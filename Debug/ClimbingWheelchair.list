
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9ec  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800dba0  0800dba0  0001dba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0c0  0800e0c0  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0c0  0800e0c0  0001e0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0c8  0800e0c8  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0c8  0800e0c8  0001e0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0cc  0800e0cc  0001e0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800e0d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000268  0800e334  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800e334  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d549  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004089  00000000  00000000  0003d7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  00041868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  00042dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027aec  00000000  00000000  00044138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec14  00000000  00000000  0006bc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2343  00000000  00000000  0008a838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016cb7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d3c  00000000  00000000  0016cbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000268 	.word	0x20000268
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800db84 	.word	0x0800db84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000026c 	.word	0x2000026c
 80001ec:	0800db84 	.word	0x0800db84

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f8c3 	bl	80010b8 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 f95e 	bl	80011fc <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f811 	bl	8000f74 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f002 ffd9 	bl	8003f08 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <PID_tune>:
	pid->lastin = in;
	pid->lasttime = HAL_GetTick();
}

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f80:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f84:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 8000f88:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	d452      	bmi.n	800103c <PID_tune+0xc8>
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa2:	d44b      	bmi.n	800103c <PID_tune+0xc8>
 8000fa4:	edd7 7a00 	vldr	s15, [r7]
 8000fa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	d444      	bmi.n	800103c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fbe:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001048 <PID_tune+0xd4>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8000fd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8000fe2:	edd7 6a00 	vldr	s13, [r7]
 8000fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d11f      	bne.n	800103e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	edd3 7a03 	vldr	s15, [r3, #12]
 8001004:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800104c <PID_tune+0xd8>
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a04 	vldr	s15, [r3, #16]
 8001018:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800104c <PID_tune+0xd8>
 800101c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	edd3 7a05 	vldr	s15, [r3, #20]
 800102c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800104c <PID_tune+0xd8>
 8001030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	edc3 7a05 	vstr	s15, [r3, #20]
 800103a:	e000      	b.n	800103e <PID_tune+0xca>
		return;
 800103c:	bf00      	nop
	}
}
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	447a0000 	.word	0x447a0000
 800104c:	00000000 	.word	0x00000000

08001050 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d025      	beq.n	80010ac <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107a:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	ed93 7a04 	vldr	s14, [r3, #16]
 8001084:	edd7 7a03 	vldr	s15, [r7, #12]
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	edd3 6a05 	vldr	s13, [r3, #20]
 8001098:	ed97 7a03 	vldr	s14, [r7, #12]
 800109c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80010c4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 80010c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80010cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	da4d      	bge.n	8001176 <pid_limits+0xbe>
	pid->omin = min;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d043      	beq.n	8001178 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	ed93 7a00 	vldr	s14, [r3]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80010fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd05      	ble.n	8001114 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	69d2      	ldr	r2, [r2, #28]
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e010      	b.n	8001136 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	d504      	bpl.n	8001136 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	6992      	ldr	r2, [r2, #24]
 8001134:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	ed93 7a08 	vldr	s14, [r3, #32]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	dd04      	ble.n	8001156 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	69da      	ldr	r2, [r3, #28]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	621a      	str	r2, [r3, #32]
 8001154:	e010      	b.n	8001178 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	ed93 7a08 	vldr	s14, [r3, #32]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d505      	bpl.n	8001178 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	621a      	str	r2, [r3, #32]
 8001174:	e000      	b.n	8001178 <pid_limits+0xc0>
	if (min >= max) return;
 8001176:	bf00      	nop
	}
}
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <pid_auto>:

void pid_auto(PID_t pid)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001190:	2b00      	cmp	r3, #0
 8001192:	d12c      	bne.n	80011ee <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80011b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	dd04      	ble.n	80011c8 <pid_auto+0x46>
			pid->iterm = pid->omax;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69da      	ldr	r2, [r3, #28]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	621a      	str	r2, [r3, #32]
 80011c6:	e00e      	b.n	80011e6 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d503      	bpl.n	80011e6 <pid_auto+0x64>
			pid->iterm = pid->omin;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800120e:	2b00      	cmp	r3, #0
 8001210:	d023      	beq.n	800125a <pid_direction+0x5e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	429a      	cmp	r2, r3
 800121c:	d01d      	beq.n	800125a <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edd3 7a03 	vldr	s15, [r3, #12]
 8001224:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001270 <pid_direction+0x74>
 8001228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	edd3 7a04 	vldr	s15, [r3, #16]
 8001238:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001270 <pid_direction+0x74>
 800123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edd3 7a05 	vldr	s15, [r3, #20]
 800124c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001270 <pid_direction+0x74>
 8001250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	78fa      	ldrb	r2, [r7, #3]
 800125e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	00000000 	.word	0x00000000

08001274 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <hubMotor_Init+0x2c>)
 8001280:	f005 f86a 	bl	8006358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <hubMotor_Init+0x2c>)
 800128c:	f005 f864 	bl	8006358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001296:	4802      	ldr	r0, [pc, #8]	; (80012a0 <hubMotor_Init+0x2c>)
 8001298:	f005 f85e 	bl	8006358 <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	00000000 	.word	0x00000000

080012a8 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80012b2:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff f8fe 	bl	80004b8 <__aeabi_f2d>
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b63      	ldr	r3, [pc, #396]	; (8001450 <send_HubMotor+0x1a8>)
 80012c2:	f7ff f951 	bl	8000568 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	a35e      	add	r3, pc, #376	; (adr r3, 8001448 <send_HubMotor+0x1a0>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff fa72 	bl	80007bc <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fbf2 	bl	8000ac8 <__aeabi_d2iz>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	425b      	negs	r3, r3
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 80012f0:	6838      	ldr	r0, [r7, #0]
 80012f2:	f7ff f8e1 	bl	80004b8 <__aeabi_f2d>
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b55      	ldr	r3, [pc, #340]	; (8001450 <send_HubMotor+0x1a8>)
 80012fc:	f7ff f934 	bl	8000568 <__aeabi_dmul>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	a34f      	add	r3, pc, #316	; (adr r3, 8001448 <send_HubMotor+0x1a0>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff fa55 	bl	80007bc <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fbd5 	bl	8000ac8 <__aeabi_d2iz>
 800131e:	4603      	mov	r3, r0
 8001320:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 8001322:	23aa      	movs	r3, #170	; 0xaa
 8001324:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 8001326:	23a4      	movs	r3, #164	; 0xa4
 8001328:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 800132a:	230e      	movs	r3, #14
 800132c:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 800133a:	23c8      	movs	r3, #200	; 0xc8
 800133c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 800133e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b29b      	uxth	r3, r3
 8001344:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 8001348:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800134a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 800134e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001352:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 8001354:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001358:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 300;
 800135a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800135e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 8001360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	b29b      	uxth	r3, r3
 8001366:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 800136a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800136c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 8001370:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001374:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 8001376:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800137a:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 800137c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001380:	121b      	asrs	r3, r3, #8
 8001382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 8001386:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 800138c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001390:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 8001392:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001396:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 8001398:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800139c:	121b      	asrs	r3, r3, #8
 800139e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 80013a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013a4:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 80013a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ac:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 80013ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013b2:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 80013b4:	7b3b      	ldrb	r3, [r7, #12]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	7b7b      	ldrb	r3, [r7, #13]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4413      	add	r3, r2
 80013be:	b29a      	uxth	r2, r3
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4413      	add	r3, r2
 80013ce:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 80013d0:	7c3b      	ldrb	r3, [r7, #16]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	7c7b      	ldrb	r3, [r7, #17]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4413      	add	r3, r2
 80013de:	b29a      	uxth	r2, r3
 80013e0:	7cbb      	ldrb	r3, [r7, #18]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 80013e8:	7cfb      	ldrb	r3, [r7, #19]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	7d3b      	ldrb	r3, [r7, #20]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4413      	add	r3, r2
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	7d7b      	ldrb	r3, [r7, #21]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001400:	7dbb      	ldrb	r3, [r7, #22]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4413      	add	r3, r2
 8001406:	b29a      	uxth	r2, r3
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4413      	add	r3, r2
 800140e:	b29a      	uxth	r2, r3
 8001410:	7e3b      	ldrb	r3, [r7, #24]
 8001412:	b29b      	uxth	r3, r3
 8001414:	4413      	add	r3, r2
 8001416:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001418:	7e7b      	ldrb	r3, [r7, #25]
 800141a:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 800141c:	4413      	add	r3, r2
 800141e:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001420:	8bfb      	ldrh	r3, [r7, #30]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15, 50);
 8001426:	f107 010c 	add.w	r1, r7, #12
 800142a:	2332      	movs	r3, #50	; 0x32
 800142c:	220f      	movs	r2, #15
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <send_HubMotor+0x1ac>)
 8001430:	f009 fed6 	bl	800b1e0 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 8001434:	220f      	movs	r2, #15
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <send_HubMotor+0x1b0>)
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <send_HubMotor+0x1ac>)
 800143a:	f009 ff6b 	bl	800b314 <HAL_UART_Receive_DMA>
}
 800143e:	bf00      	nop
 8001440:	3730      	adds	r7, #48	; 0x30
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	54442d18 	.word	0x54442d18
 800144c:	401921fb 	.word	0x401921fb
 8001450:	40b00000 	.word	0x40b00000
 8001454:	200007a0 	.word	0x200007a0
 8001458:	20000624 	.word	0x20000624

0800145c <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001464:	2200      	movs	r2, #0
 8001466:	2110      	movs	r1, #16
 8001468:	4808      	ldr	r0, [pc, #32]	; (800148c <ADC_Read+0x30>)
 800146a:	f004 ff75 	bl	8006358 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 800146e:	2302      	movs	r3, #2
 8001470:	2208      	movs	r2, #8
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4806      	ldr	r0, [pc, #24]	; (8001490 <ADC_Read+0x34>)
 8001476:	f007 f837 	bl	80084e8 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 800147a:	2201      	movs	r2, #1
 800147c:	2110      	movs	r1, #16
 800147e:	4803      	ldr	r0, [pc, #12]	; (800148c <ADC_Read+0x30>)
 8001480:	f004 ff6a 	bl	8006358 <HAL_GPIO_WritePin>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40020000 	.word	0x40020000
 8001490:	2000031c 	.word	0x2000031c

08001494 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 800149c:	2100      	movs	r1, #0
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f808 	bl	80014b4 <enableMotor>
	brakeMotor(motor, 0);
 80014a4:	2100      	movs	r1, #0
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f828 	bl	80014fc <brakeMotor>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c8:	78fa      	ldrb	r2, [r7, #3]
 80014ca:	4619      	mov	r1, r3
 80014cc:	f004 ff44 	bl	8006358 <HAL_GPIO_WritePin>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	461a      	mov	r2, r3
 80014e6:	2108      	movs	r1, #8
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <emBrakeMotor+0x20>)
 80014ea:	f004 ff35 	bl	8006358 <HAL_GPIO_WritePin>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40020c00 	.word	0x40020c00

080014fc <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69d8      	ldr	r0, [r3, #28]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	8c1b      	ldrh	r3, [r3, #32]
 8001510:	78fa      	ldrb	r2, [r7, #3]
 8001512:	4619      	mov	r1, r3
 8001514:	f004 ff20 	bl	8006358 <HAL_GPIO_WritePin>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001534:	78fa      	ldrb	r2, [r7, #3]
 8001536:	4619      	mov	r1, r3
 8001538:	f004 ff0e 	bl	8006358 <HAL_GPIO_WritePin>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	0000      	movs	r0, r0
	...

08001548 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 800155a:	edd7 7a00 	vldr	s15, [r7]
 800155e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001690 <setMotorSpeed+0x148>
 8001562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	dd01      	ble.n	8001570 <setMotorSpeed+0x28>
 800156c:	4b49      	ldr	r3, [pc, #292]	; (8001694 <setMotorSpeed+0x14c>)
 800156e:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001570:	6838      	ldr	r0, [r7, #0]
 8001572:	f7fe ffa1 	bl	80004b8 <__aeabi_f2d>
 8001576:	a340      	add	r3, pc, #256	; (adr r3, 8001678 <setMotorSpeed+0x130>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f7fe fe3c 	bl	80001f8 <__aeabi_dsub>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	a33d      	add	r3, pc, #244	; (adr r3, 8001680 <setMotorSpeed+0x138>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7ff f915 	bl	80007bc <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fabd 	bl	8000b18 <__aeabi_d2uiz>
 800159e:	4603      	mov	r3, r0
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015aa:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7fe ff82 	bl	80004b8 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	a133      	add	r1, pc, #204	; (adr r1, 8001688 <setMotorSpeed+0x140>)
 80015ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015be:	f7ff f8fd 	bl	80007bc <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fa7d 	bl	8000ac8 <__aeabi_d2iz>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 80015d6:	8a7b      	ldrh	r3, [r7, #18]
 80015d8:	085b      	lsrs	r3, r3, #1
 80015da:	b29b      	uxth	r3, r3
 80015dc:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 80015de:	edd7 7a00 	vldr	s15, [r7]
 80015e2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80015e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ee:	d503      	bpl.n	80015f8 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 80015f0:	2101      	movs	r1, #1
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ff82 	bl	80014fc <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	8a7a      	ldrh	r2, [r7, #18]
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8b1b      	ldrh	r3, [r3, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d105      	bne.n	8001616 <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	635a      	str	r2, [r3, #52]	; 0x34
 8001614:	e01c      	b.n	8001650 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8b1b      	ldrh	r3, [r3, #24]
 800161a:	2b04      	cmp	r3, #4
 800161c:	d105      	bne.n	800162a <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	639a      	str	r2, [r3, #56]	; 0x38
 8001628:	e012      	b.n	8001650 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	8b1b      	ldrh	r3, [r3, #24]
 800162e:	2b08      	cmp	r3, #8
 8001630:	d105      	bne.n	800163e <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c
 800163c:	e008      	b.n	8001650 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	8b1b      	ldrh	r3, [r3, #24]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d104      	bne.n	8001650 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	8b1b      	ldrh	r3, [r3, #24]
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f007 fd3a 	bl	80090d4 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	bfb15b57 	.word	0xbfb15b57
 800167c:	3fd09eec 	.word	0x3fd09eec
 8001680:	1172ef0b 	.word	0x1172ef0b
 8001684:	3f9989df 	.word	0x3f9989df
 8001688:	00000000 	.word	0x00000000
 800168c:	412e8480 	.word	0x412e8480
 8001690:	42c80000 	.word	0x42c80000
 8001694:	42c80000 	.word	0x42c80000

08001698 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d129      	bne.n	8001702 <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 80016ae:	edd7 7a00 	vldr	s15, [r7]
 80016b2:	eef0 7ae7 	vabs.f32	s15, s15
 80016b6:	ee17 0a90 	vmov	r0, s15
 80016ba:	f7fe fefd 	bl	80004b8 <__aeabi_f2d>
 80016be:	4604      	mov	r4, r0
 80016c0:	460d      	mov	r5, r1
 80016c2:	6838      	ldr	r0, [r7, #0]
 80016c4:	f7fe fef8 	bl	80004b8 <__aeabi_f2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7ff f874 	bl	80007bc <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	f7ff f9c6 	bl	8000a74 <__aeabi_dcmpge>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <runMotor+0x60>
	      setMotorDir(motor, 0);
 80016ee:	2100      	movs	r1, #0
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff15 	bl	8001520 <setMotorDir>
 80016f6:	e032      	b.n	800175e <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 80016f8:	2101      	movs	r1, #1
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ff10 	bl	8001520 <setMotorDir>
 8001700:	e02d      	b.n	800175e <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001708:	2b02      	cmp	r3, #2
 800170a:	d128      	bne.n	800175e <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 800170c:	edd7 7a00 	vldr	s15, [r7]
 8001710:	eef0 7ae7 	vabs.f32	s15, s15
 8001714:	ee17 0a90 	vmov	r0, s15
 8001718:	f7fe fece 	bl	80004b8 <__aeabi_f2d>
 800171c:	4604      	mov	r4, r0
 800171e:	460d      	mov	r5, r1
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f7fe fec9 	bl	80004b8 <__aeabi_f2d>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4620      	mov	r0, r4
 800172c:	4629      	mov	r1, r5
 800172e:	f7ff f845 	bl	80007bc <__aeabi_ddiv>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f7ff f997 	bl	8000a74 <__aeabi_dcmpge>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <runMotor+0xbe>
	  setMotorDir(motor, 1);
 800174c:	2101      	movs	r1, #1
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fee6 	bl	8001520 <setMotorDir>
 8001754:	e003      	b.n	800175e <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 8001756:	2100      	movs	r1, #0
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fee1 	bl	8001520 <setMotorDir>
    }

    HAL_Delay(50);
 800175e:	2032      	movs	r0, #50	; 0x32
 8001760:	f002 fbde 	bl	8003f20 <HAL_Delay>
    brakeMotor(motor, 0);
 8001764:	2100      	movs	r1, #0
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fec8 	bl	80014fc <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 800176c:	edd7 7a00 	vldr	s15, [r7]
 8001770:	eef0 7ae7 	vabs.f32	s15, s15
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fee5 	bl	8001548 <setMotorSpeed>

}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bdb0      	pop	{r4, r5, r7, pc}

08001786 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	889b      	ldrh	r3, [r3, #4]
 8001798:	4619      	mov	r1, r3
 800179a:	4610      	mov	r0, r2
 800179c:	f004 fdb6 	bl	800630c <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	799a      	ldrb	r2, [r3, #6]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	79db      	ldrb	r3, [r3, #7]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d004      	beq.n	80017be <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 80017b4:	f002 fba8 	bl	8003f08 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 80017be:	f002 fba3 	bl	8003f08 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d209      	bcs.n	80017e4 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	799a      	ldrb	r2, [r3, #6]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7a1b      	ldrb	r3, [r3, #8]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e004      	b.n	80017ee <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	799a      	ldrb	r2, [r3, #6]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80017fe:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <MX_CAN1_Init+0xc8>)
 8001800:	4a30      	ldr	r2, [pc, #192]	; (80018c4 <MX_CAN1_Init+0xcc>)
 8001802:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001804:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <MX_CAN1_Init+0xc8>)
 8001806:	2209      	movs	r2, #9
 8001808:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <MX_CAN1_Init+0xc8>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <MX_CAN1_Init+0xc8>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <MX_CAN1_Init+0xc8>)
 8001818:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800181c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <MX_CAN1_Init+0xc8>)
 8001820:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001824:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <MX_CAN1_Init+0xc8>)
 8001828:	2200      	movs	r2, #0
 800182a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <MX_CAN1_Init+0xc8>)
 800182e:	2200      	movs	r2, #0
 8001830:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_CAN1_Init+0xc8>)
 8001834:	2200      	movs	r2, #0
 8001836:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <MX_CAN1_Init+0xc8>)
 800183a:	2200      	movs	r2, #0
 800183c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_CAN1_Init+0xc8>)
 8001840:	2200      	movs	r2, #0
 8001842:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_CAN1_Init+0xc8>)
 8001846:	2200      	movs	r2, #0
 8001848:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800184a:	481d      	ldr	r0, [pc, #116]	; (80018c0 <MX_CAN1_Init+0xc8>)
 800184c:	f002 fb8c 	bl	8003f68 <HAL_CAN_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001856:	f001 f9f7 	bl	8002c48 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfil_1;
  	canfil_1.FilterBank = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001862:	2301      	movs	r3, #1
 8001864:	61fb      	str	r3, [r7, #28]
  	canfil_1.FilterIdHigh = 0x0000;
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
  	canfil_1.FilterIdLow = 0x0000;
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
  	canfil_1.FilterMaskIdHigh = 0x0000;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  	canfil_1.FilterMaskIdLow = 0x0000;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 800187a:	2301      	movs	r3, #1
 800187c:	623b      	str	r3, [r7, #32]
  	canfil_1.SlaveStartFilterBank = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001882:	463b      	mov	r3, r7
 8001884:	4619      	mov	r1, r3
 8001886:	480e      	ldr	r0, [pc, #56]	; (80018c0 <MX_CAN1_Init+0xc8>)
 8001888:	f002 fd8a 	bl	80043a0 <HAL_CAN_ConfigFilter>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_CAN1_Init+0x9e>
  		Error_Handler();
 8001892:	f001 f9d9 	bl	8002c48 <Error_Handler>

  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001896:	2102      	movs	r1, #2
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <MX_CAN1_Init+0xc8>)
 800189a:	f003 f955 	bl	8004b48 <HAL_CAN_ActivateNotification>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <MX_CAN1_Init+0xb2>
  		return Error_Handler();
 80018a4:	f001 f9d0 	bl	8002c48 <Error_Handler>
 80018a8:	e007      	b.n	80018ba <MX_CAN1_Init+0xc2>

  	if (HAL_CAN_Start(&hcan1))
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_CAN1_Init+0xc8>)
 80018ac:	f002 fec6 	bl	800463c <HAL_CAN_Start>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_CAN1_Init+0xc2>
  		return Error_Handler();
 80018b6:	f001 f9c7 	bl	8002c48 <Error_Handler>


    /* USER CODE END CAN1_Init 2 */

}
 80018ba:	3728      	adds	r7, #40	; 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000374 	.word	0x20000374
 80018c4:	40006400 	.word	0x40006400

080018c8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1d      	ldr	r2, [pc, #116]	; (800195c <HAL_CAN_MspInit+0x94>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d133      	bne.n	8001952 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_CAN_MspInit+0x98>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <HAL_CAN_MspInit+0x98>)
 80018f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_CAN_MspInit+0x98>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_CAN_MspInit+0x98>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a14      	ldr	r2, [pc, #80]	; (8001960 <HAL_CAN_MspInit+0x98>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_CAN_MspInit+0x98>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001922:	2303      	movs	r3, #3
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001932:	2309      	movs	r3, #9
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	4809      	ldr	r0, [pc, #36]	; (8001964 <HAL_CAN_MspInit+0x9c>)
 800193e:	f004 f9b9 	bl	8005cb4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2014      	movs	r0, #20
 8001948:	f003 fc50 	bl	80051ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800194c:	2014      	movs	r0, #20
 800194e:	f003 fc79 	bl	8005244 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40006400 	.word	0x40006400
 8001960:	40023800 	.word	0x40023800
 8001964:	40020c00 	.word	0x40020c00

08001968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_DMA_Init+0x3c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <MX_DMA_Init+0x3c>)
 8001978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_DMA_Init+0x3c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	200c      	movs	r0, #12
 8001990:	f003 fc2c 	bl	80051ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001994:	200c      	movs	r0, #12
 8001996:	f003 fc55 	bl	8005244 <HAL_NVIC_EnableIRQ>

}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <ENCODER_Init+0x24>)
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <ENCODER_Init+0x28>)
 80019b0:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <ENCODER_Init+0x2c>)
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <ENCODER_Init+0x28>)
 80019b6:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 80019b8:	2101      	movs	r1, #1
 80019ba:	4804      	ldr	r0, [pc, #16]	; (80019cc <ENCODER_Init+0x24>)
 80019bc:	f000 f83f 	bl	8001a3e <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 80019c0:	2102      	movs	r1, #2
 80019c2:	4804      	ldr	r0, [pc, #16]	; (80019d4 <ENCODER_Init+0x2c>)
 80019c4:	f000 f83b 	bl	8001a3e <ENCODER_Set_TxHeader>

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000418 	.word	0x20000418
 80019d0:	20000374 	.word	0x20000374
 80019d4:	200003c4 	.word	0x200003c4

080019d8 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[1] = incoming_array[1];
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	785a      	ldrb	r2, [r3, #1]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[2] = incoming_array[2];
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	789a      	ldrb	r2, [r3, #2]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	78da      	ldrb	r2, [r3, #3]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	791a      	ldrb	r2, [r3, #4]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	795a      	ldrb	r2, [r3, #5]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	799a      	ldrb	r2, [r3, #6]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	79da      	ldrb	r2, [r3, #7]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->sendData[2] = 0x01;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->sendData[3] = 0x00;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f103 0120 	add.w	r1, r3, #32
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3338      	adds	r3, #56	; 0x38
 8001abe:	f002 fe01 	bl	80046c4 <HAL_CAN_AddTxMessage>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffd1 	bl	8001a7a <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	441a      	add	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	4413      	add	r3, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	4b8a      	ldr	r3, [pc, #552]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a89      	ldr	r2, [pc, #548]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001b54:	f043 0310 	orr.w	r3, r3, #16
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b87      	ldr	r3, [pc, #540]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	4b83      	ldr	r3, [pc, #524]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a82      	ldr	r2, [pc, #520]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b80      	ldr	r3, [pc, #512]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b7c      	ldr	r3, [pc, #496]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a7b      	ldr	r2, [pc, #492]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b79      	ldr	r3, [pc, #484]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b75      	ldr	r3, [pc, #468]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a74      	ldr	r2, [pc, #464]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b72      	ldr	r3, [pc, #456]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b6e      	ldr	r3, [pc, #440]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a6d      	ldr	r2, [pc, #436]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b6b      	ldr	r3, [pc, #428]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a66      	ldr	r2, [pc, #408]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b64      	ldr	r3, [pc, #400]	; (8001d78 <MX_GPIO_Init+0x244>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	213f      	movs	r1, #63	; 0x3f
 8001bf6:	4861      	ldr	r0, [pc, #388]	; (8001d7c <MX_GPIO_Init+0x248>)
 8001bf8:	f004 fbae 	bl	8006358 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2110      	movs	r1, #16
 8001c00:	485f      	ldr	r0, [pc, #380]	; (8001d80 <MX_GPIO_Init+0x24c>)
 8001c02:	f004 fba9 	bl	8006358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001c06:	2200      	movs	r2, #0
 8001c08:	219b      	movs	r1, #155	; 0x9b
 8001c0a:	485e      	ldr	r0, [pc, #376]	; (8001d84 <MX_GPIO_Init+0x250>)
 8001c0c:	f004 fba4 	bl	8006358 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001c16:	485c      	ldr	r0, [pc, #368]	; (8001d88 <MX_GPIO_Init+0x254>)
 8001c18:	f004 fb9e 	bl	8006358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001c22:	485a      	ldr	r0, [pc, #360]	; (8001d8c <MX_GPIO_Init+0x258>)
 8001c24:	f004 fb98 	bl	8006358 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001c28:	2307      	movs	r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c30:	2302      	movs	r3, #2
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4853      	ldr	r0, [pc, #332]	; (8001d88 <MX_GPIO_Init+0x254>)
 8001c3c:	f004 f83a 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001c40:	f248 1378 	movw	r3, #33144	; 0x8178
 8001c44:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	484c      	ldr	r0, [pc, #304]	; (8001d88 <MX_GPIO_Init+0x254>)
 8001c56:	f004 f82d 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001c5a:	233f      	movs	r3, #63	; 0x3f
 8001c5c:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4842      	ldr	r0, [pc, #264]	; (8001d7c <MX_GPIO_Init+0x248>)
 8001c72:	f004 f81f 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001c76:	2310      	movs	r3, #16
 8001c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	483c      	ldr	r0, [pc, #240]	; (8001d80 <MX_GPIO_Init+0x24c>)
 8001c8e:	f004 f811 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c96:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <MX_GPIO_Init+0x25c>)
 8001c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4836      	ldr	r0, [pc, #216]	; (8001d80 <MX_GPIO_Init+0x24c>)
 8001ca6:	f004 f805 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001caa:	239b      	movs	r3, #155	; 0x9b
 8001cac:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4830      	ldr	r0, [pc, #192]	; (8001d84 <MX_GPIO_Init+0x250>)
 8001cc2:	f003 fff7 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001cc6:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	482a      	ldr	r0, [pc, #168]	; (8001d88 <MX_GPIO_Init+0x254>)
 8001ce0:	f003 ffe8 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001ce4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4820      	ldr	r0, [pc, #128]	; (8001d84 <MX_GPIO_Init+0x250>)
 8001d02:	f003 ffd7 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001d06:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001d0a:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	481b      	ldr	r0, [pc, #108]	; (8001d8c <MX_GPIO_Init+0x258>)
 8001d20:	f003 ffc8 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	4814      	ldr	r0, [pc, #80]	; (8001d8c <MX_GPIO_Init+0x258>)
 8001d3a:	f003 ffbb 	bl	8005cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001d4e:	2309      	movs	r3, #9
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	480a      	ldr	r0, [pc, #40]	; (8001d84 <MX_GPIO_Init+0x250>)
 8001d5a:	f003 ffab 	bl	8005cb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	2017      	movs	r0, #23
 8001d64:	f003 fa42 	bl	80051ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d68:	2017      	movs	r0, #23
 8001d6a:	f003 fa6b 	bl	8005244 <HAL_NVIC_EnableIRQ>

}
 8001d6e:	bf00      	nop
 8001d70:	3730      	adds	r7, #48	; 0x30
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40020c00 	.word	0x40020c00
 8001d90:	10210000 	.word	0x10210000

08001d94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <MX_I2C1_Init+0x78>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <MX_I2C1_Init+0x7c>)
 8001da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001db6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001dd2:	f004 fb0b 	bl	80063ec <HAL_I2C_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ddc:	f000 ff34 	bl	8002c48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001de0:	2100      	movs	r1, #0
 8001de2:	4809      	ldr	r0, [pc, #36]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001de4:	f005 fb62 	bl	80074ac <HAL_I2CEx_ConfigAnalogFilter>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001dee:	f000 ff2b 	bl	8002c48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001df2:	2100      	movs	r1, #0
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <MX_I2C1_Init+0x74>)
 8001df6:	f005 fbb9 	bl	800756c <HAL_I2CEx_ConfigDigitalFilter>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001e00:	f000 ff22 	bl	8002c48 <Error_Handler>
  }

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000046c 	.word	0x2000046c
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	00061a80 	.word	0x00061a80

08001e14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <HAL_I2C_MspInit+0x84>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12c      	bne.n	8001e90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001e52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e58:	2312      	movs	r3, #18
 8001e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e64:	2304      	movs	r3, #4
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <HAL_I2C_MspInit+0x8c>)
 8001e70:	f003 ff20 	bl	8005cb4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e82:	6413      	str	r3, [r2, #64]	; 0x40
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	00000000 	.word	0x00000000

08001ea8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8001eb0:	f001 ffc4 	bl	8003e3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001eb4:	f000 fc78 	bl	80027a8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001eb8:	f006 f9ae 	bl	8008218 <HAL_RCC_GetHCLKFreq>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4abc      	ldr	r2, [pc, #752]	; (80021b0 <main+0x308>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	099b      	lsrs	r3, r3, #6
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 f9d4 	bl	8005274 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ecc:	2004      	movs	r0, #4
 8001ece:	f003 f9dd 	bl	800528c <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eda:	f003 f987 	bl	80051ec <HAL_NVIC_SetPriority>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ede:	f7ff fe29 	bl	8001b34 <MX_GPIO_Init>
	MX_DMA_Init();
 8001ee2:	f7ff fd41 	bl	8001968 <MX_DMA_Init>
	MX_I2C1_Init();
 8001ee6:	f7ff ff55 	bl	8001d94 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001eea:	f001 fb63 	bl	80035b4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001eee:	f001 fc01 	bl	80036f4 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8001ef2:	f001 feab 	bl	8003c4c <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8001ef6:	f001 fc77 	bl	80037e8 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001efa:	f001 fcf7 	bl	80038ec <MX_TIM8_Init>
	MX_CAN1_Init();
 8001efe:	f7ff fc7b 	bl	80017f8 <MX_CAN1_Init>
	MX_SPI1_Init();
 8001f02:	f001 fa4f 	bl	80033a4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//Initialize hardware communication
//	joystick_Init();
//	ADC_Init();
//	ADC_DataRequest();
	ENCODER_Init();
 8001f06:	f7ff fd4f 	bl	80019a8 <ENCODER_Init>
//	  DWT_Init();
	while (MPU6050_Init(&hi2c1) == 1);
 8001f0a:	bf00      	nop
 8001f0c:	48a9      	ldr	r0, [pc, #676]	; (80021b4 <main+0x30c>)
 8001f0e:	f000 fead 	bl	8002c6c <MPU6050_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d0f9      	beq.n	8001f0c <main+0x64>
	HAL_Delay(1000);
 8001f18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f1c:	f002 f800 	bl	8003f20 <HAL_Delay>

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 8001f20:	4ba5      	ldr	r3, [pc, #660]	; (80021b8 <main+0x310>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4aa5      	ldr	r2, [pc, #660]	; (80021bc <main+0x314>)
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	4ba2      	ldr	r3, [pc, #648]	; (80021b8 <main+0x310>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4aa3      	ldr	r2, [pc, #652]	; (80021c0 <main+0x318>)
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	ed93 7a00 	vldr	s14, [r3]
 8001f3c:	eef0 0a47 	vmov.f32	s1, s14
 8001f40:	eeb0 0a67 	vmov.f32	s0, s15
 8001f44:	489f      	ldr	r0, [pc, #636]	; (80021c4 <main+0x31c>)
 8001f46:	f001 ff25 	bl	8003d94 <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8001f4a:	489f      	ldr	r0, [pc, #636]	; (80021c8 <main+0x320>)
 8001f4c:	f006 ff62 	bl	8008e14 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8001f50:	2100      	movs	r1, #0
 8001f52:	489d      	ldr	r0, [pc, #628]	; (80021c8 <main+0x320>)
 8001f54:	f007 f8be 	bl	80090d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8001f58:	2104      	movs	r1, #4
 8001f5a:	489b      	ldr	r0, [pc, #620]	; (80021c8 <main+0x320>)
 8001f5c:	f007 f8ba 	bl	80090d4 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8001f60:	4b99      	ldr	r3, [pc, #612]	; (80021c8 <main+0x320>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8001f6a:	4b97      	ldr	r3, [pc, #604]	; (80021c8 <main+0x320>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(100);
 8001f74:	2064      	movs	r0, #100	; 0x64
 8001f76:	f001 ffd3 	bl	8003f20 <HAL_Delay>

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8001f7a:	4894      	ldr	r0, [pc, #592]	; (80021cc <main+0x324>)
 8001f7c:	f7ff fa8a 	bl	8001494 <bd25l_Init>
	bd25l_Init(&backMotor);
 8001f80:	4893      	ldr	r0, [pc, #588]	; (80021d0 <main+0x328>)
 8001f82:	f7ff fa87 	bl	8001494 <bd25l_Init>
	runMotor(&rearMotor, 0);
 8001f86:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80021d4 <main+0x32c>
 8001f8a:	4890      	ldr	r0, [pc, #576]	; (80021cc <main+0x324>)
 8001f8c:	f7ff fb84 	bl	8001698 <runMotor>
	runMotor(&backMotor, 0);
 8001f90:	ed9f 0a90 	vldr	s0, [pc, #576]	; 80021d4 <main+0x32c>
 8001f94:	488e      	ldr	r0, [pc, #568]	; (80021d0 <main+0x328>)
 8001f96:	f7ff fb7f 	bl	8001698 <runMotor>
	emBrakeMotor(0);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f7ff fa9c 	bl	80014d8 <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 8001fa0:	f7ff f968 	bl	8001274 <hubMotor_Init>
	wheelSpeedControl_Init(&climbWheelSpeed,
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <main+0x330>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a8c      	ldr	r2, [pc, #560]	; (80021dc <main+0x334>)
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <main+0x330>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a8a      	ldr	r2, [pc, #552]	; (80021e0 <main+0x338>)
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	ed93 7a00 	vldr	s14, [r3]
 8001fc0:	eef0 0a47 	vmov.f32	s1, s14
 8001fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc8:	4886      	ldr	r0, [pc, #536]	; (80021e4 <main+0x33c>)
 8001fca:	f001 fee3 	bl	8003d94 <wheelSpeedControl_Init>
			climb_linSpeedLevel[climb_speedLevel],
			climb_angSpeedLevel[climb_speedLevel]);

	//Initialize front and back balance controller
	frontBalance_pid = pid_create(&frontBalance_ctrl, &frontBalance_input,
 8001fce:	4b86      	ldr	r3, [pc, #536]	; (80021e8 <main+0x340>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	4b85      	ldr	r3, [pc, #532]	; (80021ec <main+0x344>)
 8001fd6:	ed93 7a00 	vldr	s14, [r3]
 8001fda:	4b85      	ldr	r3, [pc, #532]	; (80021f0 <main+0x348>)
 8001fdc:	edd3 6a00 	vldr	s13, [r3]
 8001fe0:	eeb0 1a66 	vmov.f32	s2, s13
 8001fe4:	eef0 0a47 	vmov.f32	s1, s14
 8001fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fec:	4b81      	ldr	r3, [pc, #516]	; (80021f4 <main+0x34c>)
 8001fee:	4a82      	ldr	r2, [pc, #520]	; (80021f8 <main+0x350>)
 8001ff0:	4982      	ldr	r1, [pc, #520]	; (80021fc <main+0x354>)
 8001ff2:	4883      	ldr	r0, [pc, #524]	; (8002200 <main+0x358>)
 8001ff4:	f7fe ff7c 	bl	8000ef0 <pid_create>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4a82      	ldr	r2, [pc, #520]	; (8002204 <main+0x35c>)
 8001ffc:	6013      	str	r3, [r2, #0]
			&frontBalance_output, &frontBalance_setpoint, frontBalance_kp,
			frontBalance_ki, frontBalance_kd);
	pid_limits(frontBalance_pid, -50, 50);
 8001ffe:	4b81      	ldr	r3, [pc, #516]	; (8002204 <main+0x35c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	eddf 0a81 	vldr	s1, [pc, #516]	; 8002208 <main+0x360>
 8002006:	ed9f 0a81 	vldr	s0, [pc, #516]	; 800220c <main+0x364>
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff f854 	bl	80010b8 <pid_limits>
	pid_sample(frontBalance_pid, 1);
 8002010:	4b7c      	ldr	r3, [pc, #496]	; (8002204 <main+0x35c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f81a 	bl	8001050 <pid_sample>
	pid_auto(frontBalance_pid);
 800201c:	4b79      	ldr	r3, [pc, #484]	; (8002204 <main+0x35c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f8ae 	bl	8001182 <pid_auto>

	backBalance_pid = pid_create(&backBalance_ctrl, &backBalance_input,
 8002026:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <main+0x368>)
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	4b79      	ldr	r3, [pc, #484]	; (8002214 <main+0x36c>)
 800202e:	ed93 7a00 	vldr	s14, [r3]
 8002032:	4b79      	ldr	r3, [pc, #484]	; (8002218 <main+0x370>)
 8002034:	edd3 6a00 	vldr	s13, [r3]
 8002038:	eeb0 1a66 	vmov.f32	s2, s13
 800203c:	eef0 0a47 	vmov.f32	s1, s14
 8002040:	eeb0 0a67 	vmov.f32	s0, s15
 8002044:	4b75      	ldr	r3, [pc, #468]	; (800221c <main+0x374>)
 8002046:	4a76      	ldr	r2, [pc, #472]	; (8002220 <main+0x378>)
 8002048:	4976      	ldr	r1, [pc, #472]	; (8002224 <main+0x37c>)
 800204a:	4877      	ldr	r0, [pc, #476]	; (8002228 <main+0x380>)
 800204c:	f7fe ff50 	bl	8000ef0 <pid_create>
 8002050:	4603      	mov	r3, r0
 8002052:	4a76      	ldr	r2, [pc, #472]	; (800222c <main+0x384>)
 8002054:	6013      	str	r3, [r2, #0]
			&backBalance_output, &backBalance_setpoint, backBalance_kp,
			backBalance_ki, backBalance_kd);
	pid_limits(backBalance_pid, -20, 20);
 8002056:	4b75      	ldr	r3, [pc, #468]	; (800222c <main+0x384>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800205e:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f828 	bl	80010b8 <pid_limits>
	pid_sample(backBalance_pid, 1);
 8002068:	4b70      	ldr	r3, [pc, #448]	; (800222c <main+0x384>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe ffee 	bl	8001050 <pid_sample>
	pid_auto(backBalance_pid);
 8002074:	4b6d      	ldr	r3, [pc, #436]	; (800222c <main+0x384>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f882 	bl	8001182 <pid_auto>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 800207e:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <main+0x388>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	4b6b      	ldr	r3, [pc, #428]	; (8002234 <main+0x38c>)
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <main+0x390>)
 800208c:	edd3 6a00 	vldr	s13, [r3]
 8002090:	eeb0 1a66 	vmov.f32	s2, s13
 8002094:	eef0 0a47 	vmov.f32	s1, s14
 8002098:	eeb0 0a67 	vmov.f32	s0, s15
 800209c:	4b67      	ldr	r3, [pc, #412]	; (800223c <main+0x394>)
 800209e:	4a68      	ldr	r2, [pc, #416]	; (8002240 <main+0x398>)
 80020a0:	4968      	ldr	r1, [pc, #416]	; (8002244 <main+0x39c>)
 80020a2:	4869      	ldr	r0, [pc, #420]	; (8002248 <main+0x3a0>)
 80020a4:	f7fe ff24 	bl	8000ef0 <pid_create>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a68      	ldr	r2, [pc, #416]	; (800224c <main+0x3a4>)
 80020ac:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -50, 50);
 80020ae:	4b67      	ldr	r3, [pc, #412]	; (800224c <main+0x3a4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	eddf 0a55 	vldr	s1, [pc, #340]	; 8002208 <main+0x360>
 80020b6:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800220c <main+0x364>
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fffc 	bl	80010b8 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 80020c0:	4b62      	ldr	r3, [pc, #392]	; (800224c <main+0x3a4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe ffc2 	bl	8001050 <pid_sample>
	pid_auto(frontClimb_pid);
 80020cc:	4b5f      	ldr	r3, [pc, #380]	; (800224c <main+0x3a4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff f856 	bl	8001182 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 80020d6:	4b5e      	ldr	r3, [pc, #376]	; (8002250 <main+0x3a8>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <main+0x3ac>)
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <main+0x3b0>)
 80020e4:	edd3 6a00 	vldr	s13, [r3]
 80020e8:	eeb0 1a66 	vmov.f32	s2, s13
 80020ec:	eef0 0a47 	vmov.f32	s1, s14
 80020f0:	eeb0 0a67 	vmov.f32	s0, s15
 80020f4:	4b59      	ldr	r3, [pc, #356]	; (800225c <main+0x3b4>)
 80020f6:	4a5a      	ldr	r2, [pc, #360]	; (8002260 <main+0x3b8>)
 80020f8:	495a      	ldr	r1, [pc, #360]	; (8002264 <main+0x3bc>)
 80020fa:	485b      	ldr	r0, [pc, #364]	; (8002268 <main+0x3c0>)
 80020fc:	f7fe fef8 	bl	8000ef0 <pid_create>
 8002100:	4603      	mov	r3, r0
 8002102:	4a5a      	ldr	r2, [pc, #360]	; (800226c <main+0x3c4>)
 8002104:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -50, 50);
 8002106:	4b59      	ldr	r3, [pc, #356]	; (800226c <main+0x3c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8002208 <main+0x360>
 800210e:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800220c <main+0x364>
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe ffd0 	bl	80010b8 <pid_limits>
	pid_sample(backClimb_pid, 1);
 8002118:	4b54      	ldr	r3, [pc, #336]	; (800226c <main+0x3c4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2101      	movs	r1, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe ff96 	bl	8001050 <pid_sample>
	pid_auto(backClimb_pid);
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <main+0x3c4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff f82a 	bl	8001182 <pid_auto>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 800212e:	f001 feeb 	bl	8003f08 <HAL_GetTick>
 8002132:	6178      	str	r0, [r7, #20]
	ENCODER_Get_Angle(&encoderBack);
 8002134:	484e      	ldr	r0, [pc, #312]	; (8002270 <main+0x3c8>)
 8002136:	f7ff fcc8 	bl	8001aca <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 800213a:	484e      	ldr	r0, [pc, #312]	; (8002274 <main+0x3cc>)
 800213c:	f7ff fcc5 	bl	8001aca <ENCODER_Get_Angle>
	while(state_count++ < 5000)  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002140:	e003      	b.n	800214a <main+0x2a2>
 8002142:	494d      	ldr	r1, [pc, #308]	; (8002278 <main+0x3d0>)
 8002144:	481b      	ldr	r0, [pc, #108]	; (80021b4 <main+0x30c>)
 8002146:	f000 fdeb 	bl	8002d20 <MPU6050_Read_All>
 800214a:	4b4c      	ldr	r3, [pc, #304]	; (800227c <main+0x3d4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	494a      	ldr	r1, [pc, #296]	; (800227c <main+0x3d4>)
 8002152:	600a      	str	r2, [r1, #0]
 8002154:	f241 3287 	movw	r2, #4999	; 0x1387
 8002158:	4293      	cmp	r3, r2
 800215a:	ddf2      	ble.n	8002142 <main+0x29a>
	HAL_Delay(500); //Stabilize reading
 800215c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002160:	f001 fede 	bl	8003f20 <HAL_Delay>
	initial_angle = MPU6050.KalmanAngleX;
 8002164:	4b44      	ldr	r3, [pc, #272]	; (8002278 <main+0x3d0>)
 8002166:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800216a:	4945      	ldr	r1, [pc, #276]	; (8002280 <main+0x3d8>)
 800216c:	e9c1 2300 	strd	r2, r3, [r1]
	state_count = 0;
 8002170:	4b42      	ldr	r3, [pc, #264]	; (800227c <main+0x3d4>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff f9ae 	bl	80014d8 <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
		//debug variable
	uint32_t debug_prev_time = HAL_GetTick();
 800217c:	f001 fec4 	bl	8003f08 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]
	uint8_t led_status = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
	//  float speed = 0;
	while (1) {
		//Code to debug with blinking LED
		if (HAL_GetTick() - debug_prev_time >= 1000) {
 8002186:	f001 febf 	bl	8003f08 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002194:	f0c0 8085 	bcc.w	80022a2 <main+0x3fa>
			if (led_status == 0) {
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d174      	bne.n	8002288 <main+0x3e0>
				//	      count++;
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800219e:	2201      	movs	r2, #1
 80021a0:	2108      	movs	r1, #8
 80021a2:	4838      	ldr	r0, [pc, #224]	; (8002284 <main+0x3dc>)
 80021a4:	f004 f8d8 	bl	8006358 <HAL_GPIO_WritePin>
				led_status = 1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e076      	b.n	800229c <main+0x3f4>
 80021ae:	bf00      	nop
 80021b0:	10624dd3 	.word	0x10624dd3
 80021b4:	2000046c 	.word	0x2000046c
 80021b8:	20000108 	.word	0x20000108
 80021bc:	0800de1c 	.word	0x0800de1c
 80021c0:	0800de28 	.word	0x0800de28
 80021c4:	200000d8 	.word	0x200000d8
 80021c8:	20000680 	.word	0x20000680
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000034 	.word	0x20000034
 80021d4:	00000000 	.word	0x00000000
 80021d8:	200002f4 	.word	0x200002f4
 80021dc:	0800de34 	.word	0x0800de34
 80021e0:	0800de40 	.word	0x0800de40
 80021e4:	2000012c 	.word	0x2000012c
 80021e8:	2000029c 	.word	0x2000029c
 80021ec:	200002a0 	.word	0x200002a0
 80021f0:	200002a4 	.word	0x200002a4
 80021f4:	20000298 	.word	0x20000298
 80021f8:	20000294 	.word	0x20000294
 80021fc:	20000290 	.word	0x20000290
 8002200:	200004c4 	.word	0x200004c4
 8002204:	200005e0 	.word	0x200005e0
 8002208:	42480000 	.word	0x42480000
 800220c:	c2480000 	.word	0xc2480000
 8002210:	2000010c 	.word	0x2000010c
 8002214:	200002b4 	.word	0x200002b4
 8002218:	200002b8 	.word	0x200002b8
 800221c:	200002b0 	.word	0x200002b0
 8002220:	200002ac 	.word	0x200002ac
 8002224:	200002a8 	.word	0x200002a8
 8002228:	20000500 	.word	0x20000500
 800222c:	20000598 	.word	0x20000598
 8002230:	20000110 	.word	0x20000110
 8002234:	20000114 	.word	0x20000114
 8002238:	20000118 	.word	0x20000118
 800223c:	200002d4 	.word	0x200002d4
 8002240:	200002d0 	.word	0x200002d0
 8002244:	200002cc 	.word	0x200002cc
 8002248:	200005e8 	.word	0x200005e8
 800224c:	200005e4 	.word	0x200005e4
 8002250:	2000011c 	.word	0x2000011c
 8002254:	20000120 	.word	0x20000120
 8002258:	20000124 	.word	0x20000124
 800225c:	200002e0 	.word	0x200002e0
 8002260:	200002dc 	.word	0x200002dc
 8002264:	200002d8 	.word	0x200002d8
 8002268:	2000059c 	.word	0x2000059c
 800226c:	20000638 	.word	0x20000638
 8002270:	20000418 	.word	0x20000418
 8002274:	200003c4 	.word	0x200003c4
 8002278:	20000538 	.word	0x20000538
 800227c:	200002fc 	.word	0x200002fc
 8002280:	20000288 	.word	0x20000288
 8002284:	40020400 	.word	0x40020400
			} else if (led_status == 1) {
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d106      	bne.n	800229c <main+0x3f4>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	2108      	movs	r1, #8
 8002292:	4836      	ldr	r0, [pc, #216]	; (800236c <main+0x4c4>)
 8002294:	f004 f860 	bl	8006358 <HAL_GPIO_WritePin>
				led_status = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
			}
			debug_prev_time = HAL_GetTick();
 800229c:	f001 fe34 	bl	8003f08 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

		//      runMotor(&backMotor, speed++, 1);xia
//		ENCODER_Get_Angle(&encoderBack);
//		ENCODER_Get_Angle(&encoderFront);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1) {
 80022a2:	f001 fe31 	bl	8003f08 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4293      	cmp	r3, r2
 80022ac:	f43f af6b 	beq.w	8002186 <main+0x2de>
			//	ADC_DataRequest();
			ENCODER_Read(&encoderBack);
 80022b0:	482f      	ldr	r0, [pc, #188]	; (8002370 <main+0x4c8>)
 80022b2:	f7ff fbe2 	bl	8001a7a <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 80022b6:	482f      	ldr	r0, [pc, #188]	; (8002374 <main+0x4cc>)
 80022b8:	f7ff fbdf 	bl	8001a7a <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
			MPU6050_Read_All(&hi2c1, &MPU6050);
 80022bc:	492e      	ldr	r1, [pc, #184]	; (8002378 <main+0x4d0>)
 80022be:	482f      	ldr	r0, [pc, #188]	; (800237c <main+0x4d4>)
 80022c0:	f000 fd2e 	bl	8002d20 <MPU6050_Read_All>
			GPIO_Digital_Filtered_Input(&button1, 30);
 80022c4:	211e      	movs	r1, #30
 80022c6:	482e      	ldr	r0, [pc, #184]	; (8002380 <main+0x4d8>)
 80022c8:	f7ff fa5d 	bl	8001786 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 80022cc:	211e      	movs	r1, #30
 80022ce:	482d      	ldr	r0, [pc, #180]	; (8002384 <main+0x4dc>)
 80022d0:	f7ff fa59 	bl	8001786 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 80022d4:	211e      	movs	r1, #30
 80022d6:	482c      	ldr	r0, [pc, #176]	; (8002388 <main+0x4e0>)
 80022d8:	f7ff fa55 	bl	8001786 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 80022dc:	2105      	movs	r1, #5
 80022de:	482b      	ldr	r0, [pc, #172]	; (800238c <main+0x4e4>)
 80022e0:	f7ff fa51 	bl	8001786 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 80022e4:	2105      	movs	r1, #5
 80022e6:	482a      	ldr	r0, [pc, #168]	; (8002390 <main+0x4e8>)
 80022e8:	f7ff fa4d 	bl	8001786 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 80022ec:	2105      	movs	r1, #5
 80022ee:	4829      	ldr	r0, [pc, #164]	; (8002394 <main+0x4ec>)
 80022f0:	f7ff fa49 	bl	8001786 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 80022f4:	2105      	movs	r1, #5
 80022f6:	4828      	ldr	r0, [pc, #160]	; (8002398 <main+0x4f0>)
 80022f8:	f7ff fa45 	bl	8001786 <GPIO_Digital_Filtered_Input>

			//---------------------------------------------------------------------------------------------------
			//3-button control climbing mechanism
//			---------------------------------------------------------------------------------------------------
			if (button1.state == GPIO_PIN_SET
 80022fc:	4b20      	ldr	r3, [pc, #128]	; (8002380 <main+0x4d8>)
 80022fe:	7a1b      	ldrb	r3, [r3, #8]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d107      	bne.n	8002314 <main+0x46c>
					&& button3.state == GPIO_PIN_RESET)
 8002304:	4b20      	ldr	r3, [pc, #128]	; (8002388 <main+0x4e0>)
 8002306:	7a1b      	ldrb	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d103      	bne.n	8002314 <main+0x46c>
				speed[FRONT_INDEX] = 5;
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <main+0x4f4>)
 800230e:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <main+0x4f8>)
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	e013      	b.n	800233c <main+0x494>
			else if (button1.state == GPIO_PIN_SET
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <main+0x4d8>)
 8002316:	7a1b      	ldrb	r3, [r3, #8]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <main+0x484>
					&& button3.state == GPIO_PIN_SET)
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <main+0x4e0>)
 800231e:	7a1b      	ldrb	r3, [r3, #8]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d103      	bne.n	800232c <main+0x484>
				speed[FRONT_INDEX] = -5;
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <main+0x4f4>)
 8002326:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <main+0x4fc>)
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e007      	b.n	800233c <main+0x494>
			else if (button1.state == GPIO_PIN_RESET)
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <main+0x4d8>)
 800232e:	7a1b      	ldrb	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d103      	bne.n	800233c <main+0x494>
				speed[FRONT_INDEX] = 0;
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <main+0x4f4>)
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

			if (button2.state == GPIO_PIN_SET
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <main+0x4dc>)
 800233e:	7a1b      	ldrb	r3, [r3, #8]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d107      	bne.n	8002354 <main+0x4ac>
					&& button3.state == GPIO_PIN_RESET)
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <main+0x4e0>)
 8002346:	7a1b      	ldrb	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <main+0x4ac>
				speed[BACK_INDEX] = 5;
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <main+0x4f4>)
 800234e:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <main+0x4f8>)
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	e031      	b.n	80023b8 <main+0x510>
			else if (button2.state == GPIO_PIN_SET
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <main+0x4dc>)
 8002356:	7a1b      	ldrb	r3, [r3, #8]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d125      	bne.n	80023a8 <main+0x500>
					&& button3.state == GPIO_PIN_SET)
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <main+0x4e0>)
 800235e:	7a1b      	ldrb	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d121      	bne.n	80023a8 <main+0x500>
				speed[BACK_INDEX] = -5;
 8002364:	4b0d      	ldr	r3, [pc, #52]	; (800239c <main+0x4f4>)
 8002366:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <main+0x4fc>)
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	e025      	b.n	80023b8 <main+0x510>
 800236c:	40020400 	.word	0x40020400
 8002370:	20000418 	.word	0x20000418
 8002374:	200003c4 	.word	0x200003c4
 8002378:	20000538 	.word	0x20000538
 800237c:	2000046c 	.word	0x2000046c
 8002380:	200000a8 	.word	0x200000a8
 8002384:	200000b8 	.word	0x200000b8
 8002388:	200000c8 	.word	0x200000c8
 800238c:	20000068 	.word	0x20000068
 8002390:	20000078 	.word	0x20000078
 8002394:	20000088 	.word	0x20000088
 8002398:	20000098 	.word	0x20000098
 800239c:	200002bc 	.word	0x200002bc
 80023a0:	40a00000 	.word	0x40a00000
 80023a4:	c0a00000 	.word	0xc0a00000
			else if (button2.state == GPIO_PIN_RESET)
 80023a8:	4bd1      	ldr	r3, [pc, #836]	; (80026f0 <main+0x848>)
 80023aa:	7a1b      	ldrb	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d103      	bne.n	80023b8 <main+0x510>
				speed[BACK_INDEX] = 0;
 80023b0:	4bd0      	ldr	r3, [pc, #832]	; (80026f4 <main+0x84c>)
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	605a      	str	r2, [r3, #4]
			curb_height = CLIMBING_LEG_LENGTH * cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT - FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 80023b8:	4bcf      	ldr	r3, [pc, #828]	; (80026f8 <main+0x850>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f87c 	bl	80004b8 <__aeabi_f2d>
 80023c0:	4604      	mov	r4, r0
 80023c2:	460d      	mov	r5, r1
 80023c4:	4bcd      	ldr	r3, [pc, #820]	; (80026fc <main+0x854>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f875 	bl	80004b8 <__aeabi_f2d>
 80023ce:	a3c0      	add	r3, pc, #768	; (adr r3, 80026d0 <main+0x828>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fe f8c8 	bl	8000568 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	4bc6      	ldr	r3, [pc, #792]	; (8002700 <main+0x858>)
 80023e6:	f7fe f9e9 	bl	80007bc <__aeabi_ddiv>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	ec43 2b17 	vmov	d7, r2, r3
 80023f2:	eeb0 0a47 	vmov.f32	s0, s14
 80023f6:	eef0 0a67 	vmov.f32	s1, s15
 80023fa:	f009 fee1 	bl	800c1c0 <cos>
 80023fe:	ec53 2b10 	vmov	r2, r3, d0
 8002402:	4620      	mov	r0, r4
 8002404:	4629      	mov	r1, r5
 8002406:	f7fe f8af 	bl	8000568 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4614      	mov	r4, r2
 8002410:	461d      	mov	r5, r3
 8002412:	4bbc      	ldr	r3, [pc, #752]	; (8002704 <main+0x85c>)
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f84f 	bl	80004b8 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4620      	mov	r0, r4
 8002420:	4629      	mov	r1, r5
 8002422:	f7fd feeb 	bl	80001fc <__adddf3>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	4bb5      	ldr	r3, [pc, #724]	; (8002708 <main+0x860>)
 8002434:	f7fd fee0 	bl	80001f8 <__aeabi_dsub>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f7fe fb8a 	bl	8000b58 <__aeabi_d2f>
 8002444:	4603      	mov	r3, r0
 8002446:	4ab1      	ldr	r2, [pc, #708]	; (800270c <main+0x864>)
 8002448:	6013      	str	r3, [r2, #0]
				curb_height -= 0.01;
 800244a:	4bb0      	ldr	r3, [pc, #704]	; (800270c <main+0x864>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f832 	bl	80004b8 <__aeabi_f2d>
 8002454:	a3a0      	add	r3, pc, #640	; (adr r3, 80026d8 <main+0x830>)
 8002456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245a:	f7fd fecd 	bl	80001f8 <__aeabi_dsub>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	f7fe fb77 	bl	8000b58 <__aeabi_d2f>
 800246a:	4603      	mov	r3, r0
 800246c:	4aa7      	ldr	r2, [pc, #668]	; (800270c <main+0x864>)
 800246e:	6013      	str	r3, [r2, #0]
			back_lifting_height = BACK_BASE_HEIGHT + curb_height - HUB_DIAMETER / 2  ;
 8002470:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8002710 <main+0x868>
 8002474:	4ba5      	ldr	r3, [pc, #660]	; (800270c <main+0x864>)
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247e:	ee17 0a90 	vmov	r0, s15
 8002482:	f7fe f819 	bl	80004b8 <__aeabi_f2d>
 8002486:	a396      	add	r3, pc, #600	; (adr r3, 80026e0 <main+0x838>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	f7fd feb4 	bl	80001f8 <__aeabi_dsub>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fb5e 	bl	8000b58 <__aeabi_d2f>
 800249c:	4603      	mov	r3, r0
 800249e:	4a9d      	ldr	r2, [pc, #628]	; (8002714 <main+0x86c>)
 80024a0:	6013      	str	r3, [r2, #0]
			back_lifting_angle = TO_DEG((float)acos(-back_lifting_height/0.34));
 80024a2:	4b9c      	ldr	r3, [pc, #624]	; (8002714 <main+0x86c>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eef1 7a67 	vneg.f32	s15, s15
 80024ac:	ee17 3a90 	vmov	r3, s15
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f801 	bl	80004b8 <__aeabi_f2d>
 80024b6:	a38c      	add	r3, pc, #560	; (adr r3, 80026e8 <main+0x840>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fe f97e 	bl	80007bc <__aeabi_ddiv>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	ec43 2b17 	vmov	d7, r2, r3
 80024c8:	eeb0 0a47 	vmov.f32	s0, s14
 80024cc:	eef0 0a67 	vmov.f32	s1, s15
 80024d0:	f009 ff26 	bl	800c320 <acos>
 80024d4:	ec53 2b10 	vmov	r2, r3, d0
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	f7fe fb3c 	bl	8000b58 <__aeabi_d2f>
 80024e0:	ee07 0a10 	vmov	s14, r0
 80024e4:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8002718 <main+0x870>
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	ee17 0a90 	vmov	r0, s15
 80024f0:	f7fd ffe2 	bl	80004b8 <__aeabi_f2d>
 80024f4:	a376      	add	r3, pc, #472	; (adr r3, 80026d0 <main+0x828>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fe f95f 	bl	80007bc <__aeabi_ddiv>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fb27 	bl	8000b58 <__aeabi_d2f>
 800250a:	4603      	mov	r3, r0
 800250c:	4a83      	ldr	r2, [pc, #524]	; (800271c <main+0x874>)
 800250e:	6013      	str	r3, [r2, #0]
			back_encoder_input = back_lifting_angle /360 * (4096 * BACK_GEAR_RATIO);
 8002510:	4b82      	ldr	r3, [pc, #520]	; (800271c <main+0x874>)
 8002512:	ed93 7a00 	vldr	s14, [r3]
 8002516:	eddf 6a82 	vldr	s13, [pc, #520]	; 8002720 <main+0x878>
 800251a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800251e:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002724 <main+0x87c>
 8002522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800252a:	ee17 2a90 	vmov	r2, s15
 800252e:	4b7e      	ldr	r3, [pc, #504]	; (8002728 <main+0x880>)
 8002530:	601a      	str	r2, [r3, #0]


			runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002532:	4b70      	ldr	r3, [pc, #448]	; (80026f4 <main+0x84c>)
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	eeb0 0a67 	vmov.f32	s0, s15
 800253c:	487b      	ldr	r0, [pc, #492]	; (800272c <main+0x884>)
 800253e:	f7ff f8ab 	bl	8001698 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 8002542:	4b6c      	ldr	r3, [pc, #432]	; (80026f4 <main+0x84c>)
 8002544:	edd3 7a01 	vldr	s15, [r3, #4]
 8002548:	eeb0 0a67 	vmov.f32	s0, s15
 800254c:	4878      	ldr	r0, [pc, #480]	; (8002730 <main+0x888>)
 800254e:	f7ff f8a3 	bl	8001698 <runMotor>

			//Prevent wheelchair from being pulled by the hub motor during lifting up process
			if (speed[BACK_INDEX] != 0 && GPIO_Digital_Filtered_Input(&backLS1, 5) && GPIO_Digital_Filtered_Input(&backLS2, 5) ){
 8002552:	4b68      	ldr	r3, [pc, #416]	; (80026f4 <main+0x84c>)
 8002554:	edd3 7a01 	vldr	s15, [r3, #4]
 8002558:	eef5 7a40 	vcmp.f32	s15, #0.0
 800255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002560:	f000 80f8 	beq.w	8002754 <main+0x8ac>
 8002564:	2105      	movs	r1, #5
 8002566:	4873      	ldr	r0, [pc, #460]	; (8002734 <main+0x88c>)
 8002568:	f7ff f90d 	bl	8001786 <GPIO_Digital_Filtered_Input>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80f0 	beq.w	8002754 <main+0x8ac>
 8002574:	2105      	movs	r1, #5
 8002576:	4870      	ldr	r0, [pc, #448]	; (8002738 <main+0x890>)
 8002578:	f7ff f905 	bl	8001786 <GPIO_Digital_Filtered_Input>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80e8 	beq.w	8002754 <main+0x8ac>
				double dt = (HAL_GetTick() - prev_angle_tick) / (float) FREQUENCY;
 8002584:	f001 fcc0 	bl	8003f08 <HAL_GetTick>
 8002588:	ee07 0a90 	vmov	s15, r0
 800258c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002590:	4b6a      	ldr	r3, [pc, #424]	; (800273c <main+0x894>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002740 <main+0x898>
 800259e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025a2:	ee16 0a90 	vmov	r0, s13
 80025a6:	f7fd ff87 	bl	80004b8 <__aeabi_f2d>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	e9c7 2300 	strd	r2, r3, [r7]
				climbForward_speed =  CLIMBING_LEG_LENGTH * (sin(TO_RAD(prev_angle)) - sin(TO_RAD(encoderBack.angleDeg))) / dt; //unit: m/s,
 80025b2:	4b51      	ldr	r3, [pc, #324]	; (80026f8 <main+0x850>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ff7f 	bl	80004b8 <__aeabi_f2d>
 80025ba:	4604      	mov	r4, r0
 80025bc:	460d      	mov	r5, r1
 80025be:	4b61      	ldr	r3, [pc, #388]	; (8002744 <main+0x89c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ff78 	bl	80004b8 <__aeabi_f2d>
 80025c8:	a341      	add	r3, pc, #260	; (adr r3, 80026d0 <main+0x828>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f7fd ffcb 	bl	8000568 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b48      	ldr	r3, [pc, #288]	; (8002700 <main+0x858>)
 80025e0:	f7fe f8ec 	bl	80007bc <__aeabi_ddiv>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	ec43 2b17 	vmov	d7, r2, r3
 80025ec:	eeb0 0a47 	vmov.f32	s0, s14
 80025f0:	eef0 0a67 	vmov.f32	s1, s15
 80025f4:	f009 fe40 	bl	800c278 <sin>
 80025f8:	ec59 8b10 	vmov	r8, r9, d0
 80025fc:	4b52      	ldr	r3, [pc, #328]	; (8002748 <main+0x8a0>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd ff59 	bl	80004b8 <__aeabi_f2d>
 8002606:	a332      	add	r3, pc, #200	; (adr r3, 80026d0 <main+0x828>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f7fd ffac 	bl	8000568 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	4b38      	ldr	r3, [pc, #224]	; (8002700 <main+0x858>)
 800261e:	f7fe f8cd 	bl	80007bc <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	ec43 2b17 	vmov	d7, r2, r3
 800262a:	eeb0 0a47 	vmov.f32	s0, s14
 800262e:	eef0 0a67 	vmov.f32	s1, s15
 8002632:	f009 fe21 	bl	800c278 <sin>
 8002636:	ec53 2b10 	vmov	r2, r3, d0
 800263a:	4640      	mov	r0, r8
 800263c:	4649      	mov	r1, r9
 800263e:	f7fd fddb 	bl	80001f8 <__aeabi_dsub>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4620      	mov	r0, r4
 8002648:	4629      	mov	r1, r5
 800264a:	f7fd ff8d 	bl	8000568 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800265a:	f7fe f8af 	bl	80007bc <__aeabi_ddiv>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	f7fe fa77 	bl	8000b58 <__aeabi_d2f>
 800266a:	4603      	mov	r3, r0
 800266c:	4a37      	ldr	r2, [pc, #220]	; (800274c <main+0x8a4>)
 800266e:	6013      	str	r3, [r2, #0]
				climbForward_speed = climbForward_speed / (HUB_DIAMETER / 2);
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <main+0x8a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd ff1f 	bl	80004b8 <__aeabi_f2d>
 800267a:	a319      	add	r3, pc, #100	; (adr r3, 80026e0 <main+0x838>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	f7fe f89c 	bl	80007bc <__aeabi_ddiv>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe fa64 	bl	8000b58 <__aeabi_d2f>
 8002690:	4603      	mov	r3, r0
 8002692:	4a2e      	ldr	r2, [pc, #184]	; (800274c <main+0x8a4>)
 8002694:	6013      	str	r3, [r2, #0]
				send_HubMotor(climbForward_speed, climbForward_speed);
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <main+0x8a4>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <main+0x8a4>)
 800269e:	ed93 7a00 	vldr	s14, [r3]
 80026a2:	eef0 0a47 	vmov.f32	s1, s14
 80026a6:	eeb0 0a67 	vmov.f32	s0, s15
 80026aa:	f7fe fdfd 	bl	80012a8 <send_HubMotor>
				prev_angle = encoderBack.angleDeg;
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <main+0x8a0>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a24      	ldr	r2, [pc, #144]	; (8002744 <main+0x89c>)
 80026b4:	6013      	str	r3, [r2, #0]
				prev_angle_tick = HAL_GetTick();
 80026b6:	f001 fc27 	bl	8003f08 <HAL_GetTick>
 80026ba:	ee07 0a90 	vmov	s15, r0
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <main+0x894>)
 80026c4:	edc3 7a00 	vstr	s15, [r3]
			if (speed[BACK_INDEX] != 0 && GPIO_Digital_Filtered_Input(&backLS1, 5) && GPIO_Digital_Filtered_Input(&backLS2, 5) ){
 80026c8:	e04e      	b.n	8002768 <main+0x8c0>
 80026ca:	bf00      	nop
 80026cc:	f3af 8000 	nop.w
 80026d0:	54442d18 	.word	0x54442d18
 80026d4:	400921fb 	.word	0x400921fb
 80026d8:	47ae147b 	.word	0x47ae147b
 80026dc:	3f847ae1 	.word	0x3f847ae1
 80026e0:	916872b0 	.word	0x916872b0
 80026e4:	3faf7ced 	.word	0x3faf7ced
 80026e8:	5c28f5c3 	.word	0x5c28f5c3
 80026ec:	3fd5c28f 	.word	0x3fd5c28f
 80026f0:	200000b8 	.word	0x200000b8
 80026f4:	200002bc 	.word	0x200002bc
 80026f8:	3eb2b021 	.word	0x3eb2b021
 80026fc:	200003c4 	.word	0x200003c4
 8002700:	40668000 	.word	0x40668000
 8002704:	3e19999a 	.word	0x3e19999a
 8002708:	3fb00000 	.word	0x3fb00000
 800270c:	200002e4 	.word	0x200002e4
 8002710:	3e19999a 	.word	0x3e19999a
 8002714:	200002e8 	.word	0x200002e8
 8002718:	43340000 	.word	0x43340000
 800271c:	200002ec 	.word	0x200002ec
 8002720:	43b40000 	.word	0x43b40000
 8002724:	46000000 	.word	0x46000000
 8002728:	200002f0 	.word	0x200002f0
 800272c:	20000000 	.word	0x20000000
 8002730:	20000034 	.word	0x20000034
 8002734:	20000088 	.word	0x20000088
 8002738:	20000098 	.word	0x20000098
 800273c:	200002c4 	.word	0x200002c4
 8002740:	447a0000 	.word	0x447a0000
 8002744:	200002c8 	.word	0x200002c8
 8002748:	20000418 	.word	0x20000418
 800274c:	200002f8 	.word	0x200002f8
 8002750:	00000000 	.word	0x00000000
			}
			else {
				send_HubMotor(0, 0);
 8002754:	ed5f 0a02 	vldr	s1, [pc, #-8]	; 8002750 <main+0x8a8>
 8002758:	ed1f 0a03 	vldr	s0, [pc, #-12]	; 8002750 <main+0x8a8>
 800275c:	f7fe fda4 	bl	80012a8 <send_HubMotor>
				climbForward_speed = 0;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <main+0x8f8>)
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
			//	}


//			if ((speed[FRONT_INDEX] <= 5 || speed[FRONT_INDEX] >= -5) && (speed[BACK_INDEX] <= 5 ||speed[BACK_INDEX] >= -5 )
//
			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <main+0x8fc>)
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	d10b      	bne.n	8002790 <main+0x8e8>
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <main+0x8fc>)
 800277a:	edd3 7a01 	vldr	s15, [r3, #4]
 800277e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002786:	d103      	bne.n	8002790 <main+0x8e8>
				emBrakeMotor(0);
 8002788:	2000      	movs	r0, #0
 800278a:	f7fe fea5 	bl	80014d8 <emBrakeMotor>
 800278e:	e002      	b.n	8002796 <main+0x8ee>
			else
				emBrakeMotor(1);
 8002790:	2001      	movs	r0, #1
 8002792:	f7fe fea1 	bl	80014d8 <emBrakeMotor>
			//	    back_touchdown = 1;
			//	}
			//
			//	//Climbing phase start

			prev_time = HAL_GetTick();
 8002796:	f001 fbb7 	bl	8003f08 <HAL_GetTick>
 800279a:	6178      	str	r0, [r7, #20]
		if (HAL_GetTick() - debug_prev_time >= 1000) {
 800279c:	e4f3      	b.n	8002186 <main+0x2de>
 800279e:	bf00      	nop
 80027a0:	200002f8 	.word	0x200002f8
 80027a4:	200002bc 	.word	0x200002bc

080027a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b094      	sub	sp, #80	; 0x50
 80027ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027ae:	f107 0320 	add.w	r3, r7, #32
 80027b2:	2230      	movs	r2, #48	; 0x30
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f009 fb5a 	bl	800be70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <SystemClock_Config+0xd8>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	4a2a      	ldr	r2, [pc, #168]	; (8002880 <SystemClock_Config+0xd8>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027da:	6413      	str	r3, [r2, #64]	; 0x40
 80027dc:	4b28      	ldr	r3, [pc, #160]	; (8002880 <SystemClock_Config+0xd8>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027e8:	2300      	movs	r3, #0
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <SystemClock_Config+0xdc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a24      	ldr	r2, [pc, #144]	; (8002884 <SystemClock_Config+0xdc>)
 80027f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b22      	ldr	r3, [pc, #136]	; (8002884 <SystemClock_Config+0xdc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002804:	2301      	movs	r3, #1
 8002806:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800280e:	2302      	movs	r3, #2
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002816:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002818:	2308      	movs	r3, #8
 800281a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 800281c:	23b4      	movs	r3, #180	; 0xb4
 800281e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002820:	2302      	movs	r3, #2
 8002822:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002824:	2304      	movs	r3, #4
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002828:	f107 0320 	add.w	r3, r7, #32
 800282c:	4618      	mov	r0, r3
 800282e:	f004 ff4d 	bl	80076cc <HAL_RCC_OscConfig>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <SystemClock_Config+0x94>
		Error_Handler();
 8002838:	f000 fa06 	bl	8002c48 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800283c:	f004 fef6 	bl	800762c <HAL_PWREx_EnableOverDrive>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <SystemClock_Config+0xa2>
		Error_Handler();
 8002846:	f000 f9ff 	bl	8002c48 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800284a:	230f      	movs	r3, #15
 800284c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800284e:	2302      	movs	r3, #2
 8002850:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002856:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800285a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800285c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002860:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002862:	f107 030c 	add.w	r3, r7, #12
 8002866:	2105      	movs	r1, #5
 8002868:	4618      	mov	r0, r3
 800286a:	f005 fa4f 	bl	8007d0c <HAL_RCC_ClockConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <SystemClock_Config+0xd0>
		Error_Handler();
 8002874:	f000 f9e8 	bl	8002c48 <Error_Handler>
	}
}
 8002878:	bf00      	nop
 800287a:	3750      	adds	r7, #80	; 0x50
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	40007000 	.word	0x40007000

08002888 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	2b80      	cmp	r3, #128	; 0x80
 8002896:	d11c      	bne.n	80028d2 <HAL_GPIO_EXTI_Callback+0x4a>
	case AD_BUSY_Pin: {
		if (HAL_GetTick() - prev_adc_time > 1) {
 8002898:	f001 fb36 	bl	8003f08 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_GPIO_EXTI_Callback+0x58>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d916      	bls.n	80028d6 <HAL_GPIO_EXTI_Callback+0x4e>
			ADC_Read(&adc_rawData[0]);
 80028a8:	480e      	ldr	r0, [pc, #56]	; (80028e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80028aa:	f7fe fdd7 	bl	800145c <ADC_Read>
			tempJoyRawDataX = adc_rawData[0];
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80028b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_GPIO_EXTI_Callback+0x60>)
 80028b8:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80028bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <HAL_GPIO_EXTI_Callback+0x64>)
 80028c4:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 80028c6:	f001 fb1f 	bl	8003f08 <HAL_GetTick>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_GPIO_EXTI_Callback+0x58>)
 80028ce:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 80028d0:	e001      	b.n	80028d6 <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 80028d6:	bf00      	nop
	}
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000284 	.word	0x20000284
 80028e4:	200005d0 	.word	0x200005d0
 80028e8:	20000634 	.word	0x20000634
 80028ec:	200004c0 	.word	0x200004c0

080028f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a47      	ldr	r2, [pc, #284]	; (8002a1c <HAL_UART_RxCpltCallback+0x12c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	f040 8085 	bne.w	8002a0e <HAL_UART_RxCpltCallback+0x11e>
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002904:	4b46      	ldr	r3, [pc, #280]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b29a      	uxth	r2, r3
 800290a:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 800290c:	785b      	ldrb	r3, [r3, #1]
 800290e:	b29b      	uxth	r3, r3
 8002910:	4413      	add	r3, r2
 8002912:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8002914:	4b42      	ldr	r3, [pc, #264]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 8002916:	789b      	ldrb	r3, [r3, #2]
 8002918:	b29b      	uxth	r3, r3
 800291a:	4413      	add	r3, r2
 800291c:	b29a      	uxth	r2, r3
 800291e:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 8002920:	78db      	ldrb	r3, [r3, #3]
 8002922:	b29b      	uxth	r3, r3
 8002924:	4413      	add	r3, r2
 8002926:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8002928:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 800292a:	791b      	ldrb	r3, [r3, #4]
 800292c:	b29b      	uxth	r3, r3
 800292e:	4413      	add	r3, r2
 8002930:	b29a      	uxth	r2, r3
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 8002934:	795b      	ldrb	r3, [r3, #5]
 8002936:	b29b      	uxth	r3, r3
 8002938:	4413      	add	r3, r2
 800293a:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 800293c:	4b38      	ldr	r3, [pc, #224]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 800293e:	799b      	ldrb	r3, [r3, #6]
 8002940:	b29b      	uxth	r3, r3
 8002942:	4413      	add	r3, r2
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 8002948:	79db      	ldrb	r3, [r3, #7]
 800294a:	b29b      	uxth	r3, r3
 800294c:	4413      	add	r3, r2
 800294e:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8002950:	4b33      	ldr	r3, [pc, #204]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 8002952:	7a1b      	ldrb	r3, [r3, #8]
 8002954:	b29b      	uxth	r3, r3
 8002956:	4413      	add	r3, r2
 8002958:	b29a      	uxth	r2, r3
 800295a:	4b31      	ldr	r3, [pc, #196]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 800295c:	7a5b      	ldrb	r3, [r3, #9]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4413      	add	r3, r2
 8002962:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 8002964:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 8002966:	7a9b      	ldrb	r3, [r3, #10]
 8002968:	b29b      	uxth	r3, r3
 800296a:	4413      	add	r3, r2
 800296c:	b29a      	uxth	r2, r3
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 8002970:	7adb      	ldrb	r3, [r3, #11]
 8002972:	b29b      	uxth	r3, r3
 8002974:	4413      	add	r3, r2
 8002976:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 800297a:	7b1b      	ldrb	r3, [r3, #12]
 800297c:	b29b      	uxth	r3, r3
 800297e:	4413      	add	r3, r2
 8002980:	b29a      	uxth	r2, r3
 8002982:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 8002984:	7b5b      	ldrb	r3, [r3, #13]
 8002986:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002988:	4413      	add	r3, r2
 800298a:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14]) {
 800298c:	89fb      	ldrh	r3, [r7, #14]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 8002992:	7b9b      	ldrb	r3, [r3, #14]
 8002994:	429a      	cmp	r2, r3
 8002996:	d13a      	bne.n	8002a0e <HAL_UART_RxCpltCallback+0x11e>
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 8002998:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2baa      	cmp	r3, #170	; 0xaa
 800299e:	d136      	bne.n	8002a0e <HAL_UART_RxCpltCallback+0x11e>
 80029a0:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 80029a2:	785b      	ldrb	r3, [r3, #1]
 80029a4:	2ba4      	cmp	r3, #164	; 0xa4
 80029a6:	d132      	bne.n	8002a0e <HAL_UART_RxCpltCallback+0x11e>
					&& receive_buf[3] == 0x00) {
 80029a8:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 80029aa:	78db      	ldrb	r3, [r3, #3]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d12e      	bne.n	8002a0e <HAL_UART_RxCpltCallback+0x11e>
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 80029b2:	7a5b      	ldrb	r3, [r3, #9]
 80029b4:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 80029b8:	7a1b      	ldrb	r3, [r3, #8]
 80029ba:	041b      	lsls	r3, r3, #16
 80029bc:	441a      	add	r2, r3
 80029be:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 80029c0:	79db      	ldrb	r3, [r3, #7]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	4413      	add	r3, r2
						+ (receive_buf[6]);
 80029c6:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 80029c8:	7992      	ldrb	r2, [r2, #6]
 80029ca:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 80029cc:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <HAL_UART_RxCpltCallback+0x134>)
 80029ce:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 80029d2:	7b5b      	ldrb	r3, [r3, #13]
 80029d4:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 80029d8:	7b1b      	ldrb	r3, [r3, #12]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	441a      	add	r2, r3
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 80029e0:	7adb      	ldrb	r3, [r3, #11]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	4413      	add	r3, r2
						+ (receive_buf[10]);
 80029e6:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <HAL_UART_RxCpltCallback+0x130>)
 80029e8:	7a92      	ldrb	r2, [r2, #10]
 80029ea:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <HAL_UART_RxCpltCallback+0x134>)
 80029ee:	6053      	str	r3, [r2, #4]
				if (first_encoder_callback) {
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_UART_RxCpltCallback+0x138>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_UART_RxCpltCallback+0x11e>
					prev_hub_encoder_feedback.encoder_1 =
							hub_encoder_feedback.encoder_1;
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_UART_RxCpltCallback+0x134>)
 80029fa:	681b      	ldr	r3, [r3, #0]
					prev_hub_encoder_feedback.encoder_1 =
 80029fc:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <HAL_UART_RxCpltCallback+0x13c>)
 80029fe:	6013      	str	r3, [r2, #0]
					prev_hub_encoder_feedback.encoder_2 =
							hub_encoder_feedback.encoder_2;
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_UART_RxCpltCallback+0x134>)
 8002a02:	685b      	ldr	r3, [r3, #4]
					prev_hub_encoder_feedback.encoder_2 =
 8002a04:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_UART_RxCpltCallback+0x13c>)
 8002a06:	6053      	str	r3, [r2, #4]
					first_encoder_callback = false;
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_UART_RxCpltCallback+0x138>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40004800 	.word	0x40004800
 8002a20:	20000624 	.word	0x20000624
 8002a24:	200004f8 	.word	0x200004f8
 8002a28:	20000128 	.word	0x20000128
 8002a2c:	2000061c 	.word	0x2000061c

08002a30 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a7b      	ldr	r2, [pc, #492]	; (8002c28 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	f040 80e6 	bne.w	8002c0e <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	4a79      	ldr	r2, [pc, #484]	; (8002c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8002a48:	2100      	movs	r1, #0
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f001 ff5e 	bl	800490c <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT) {
 8002a50:	7a7b      	ldrb	r3, [r7, #9]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d144      	bne.n	8002ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8002a56:	f107 0308 	add.w	r3, r7, #8
 8002a5a:	4975      	ldr	r1, [pc, #468]	; (8002c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe ffbb 	bl	80019d8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8002a62:	4873      	ldr	r0, [pc, #460]	; (8002c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002a64:	f7ff f831 	bl	8001aca <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos
 8002a68:	4b71      	ldr	r3, [pc, #452]	; (8002c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (uint32_t) (4096 * BACK_GEAR_RATIO);
 8002a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
					- encoderBack.encoder_pos
 8002a70:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
 8002a74:	4a6e      	ldr	r2, [pc, #440]	; (8002c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002a76:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002a78:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8002a84:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8002c34 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 8002a88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a8c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002c38 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a94:	ee17 0a90 	vmov	r0, s15
 8002a98:	f7fd fd0e 	bl	80004b8 <__aeabi_f2d>
 8002a9c:	a35e      	add	r3, pc, #376	; (adr r3, 8002c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa2:	f7fd fbab 	bl	80001fc <__adddf3>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f7fe f853 	bl	8000b58 <__aeabi_d2f>
 8002ab2:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002ab4:	4a5e      	ldr	r2, [pc, #376]	; (8002c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002ab6:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8002ab8:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002aba:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002abe:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002c38 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aca:	dd09      	ble.n	8002ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
				encoderBack.angleDeg -= 360;
 8002acc:	4b58      	ldr	r3, [pc, #352]	; (8002c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002ace:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002ad2:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002c38 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002ad6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ada:	4b55      	ldr	r3, [pc, #340]	; (8002c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002adc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
		if (incoming[1] == ENC_ADDR_RIGHT) {
 8002ae0:	7a7b      	ldrb	r3, [r7, #9]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	f040 8093 	bne.w	8002c0e <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8002ae8:	f107 0308 	add.w	r3, r7, #8
 8002aec:	4953      	ldr	r1, [pc, #332]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe ff72 	bl	80019d8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 8002af4:	4851      	ldr	r0, [pc, #324]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002af6:	f7fe ffe8 	bl	8001aca <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000) {
 8002afa:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 8002b02:	f247 522f 	movw	r2, #29999	; 0x752f
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d839      	bhi.n	8002b7e <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8002b0a:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 8002b12:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8002b14:	fba3 1302 	umull	r1, r3, r3, r2
 8002b18:	0b5b      	lsrs	r3, r3, #13
 8002b1a:	f242 3133 	movw	r1, #9011	; 0x2333
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 8002b24:	4a45      	ldr	r2, [pc, #276]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002b26:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002b28:	4b44      	ldr	r3, [pc, #272]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	ee07 3a90 	vmov	s15, r3
 8002b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b34:	ee17 0a90 	vmov	r0, s15
 8002b38:	f7fd fcbe 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002b3c:	a338      	add	r3, pc, #224	; (adr r3, 8002c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fe3b 	bl	80007bc <__aeabi_ddiv>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002b54:	f7fd fd08 	bl	8000568 <__aeabi_dmul>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	a32d      	add	r3, pc, #180	; (adr r3, 8002c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f7fd fb49 	bl	80001fc <__adddf3>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	f7fd fff1 	bl	8000b58 <__aeabi_d2f>
 8002b76:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002b78:	4a30      	ldr	r2, [pc, #192]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002b7a:	6413      	str	r3, [r2, #64]	; 0x40
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
			}
		}
	}
}
 8002b7c:	e047      	b.n	8002c0e <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
						- encoderFront.encoder_pos;
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fc76 	bl	8000474 <__aeabi_ui2d>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	a124      	add	r1, pc, #144	; (adr r1, 8002c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b92:	f7fd fb31 	bl	80001f8 <__aeabi_dsub>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f7fd ffbb 	bl	8000b18 <__aeabi_d2uiz>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4a25      	ldr	r2, [pc, #148]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002ba6:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002ba8:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	ee07 3a90 	vmov	s15, r3
 8002bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb4:	ee17 0a90 	vmov	r0, s15
 8002bb8:	f7fd fc7e 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8002bbc:	a318      	add	r3, pc, #96	; (adr r3, 8002c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fdfb 	bl	80007bc <__aeabi_ddiv>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002bd4:	f7fd fcc8 	bl	8000568 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	a30d      	add	r3, pc, #52	; (adr r3, 8002c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f7fd fb09 	bl	80001fc <__adddf3>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002bf8:	f7fd fafe 	bl	80001f8 <__aeabi_dsub>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7fd ffa8 	bl	8000b58 <__aeabi_d2f>
 8002c08:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002c0a:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	d0e56042 	.word	0xd0e56042
 8002c1c:	40424b22 	.word	0x40424b22
 8002c20:	9999999a 	.word	0x9999999a
 8002c24:	40c19999 	.word	0x40c19999
 8002c28:	20000374 	.word	0x20000374
 8002c2c:	20000300 	.word	0x20000300
 8002c30:	20000418 	.word	0x20000418
 8002c34:	46000000 	.word	0x46000000
 8002c38:	43b40000 	.word	0x43b40000
 8002c3c:	200003c4 	.word	0x200003c4
 8002c40:	e8bb8111 	.word	0xe8bb8111
 8002c44:	40768000 	.word	0x40768000

08002c48 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af04      	add	r7, sp, #16
 8002c72:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002c74:	2364      	movs	r3, #100	; 0x64
 8002c76:	9302      	str	r3, [sp, #8]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	f107 030f 	add.w	r3, r7, #15
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2301      	movs	r3, #1
 8002c84:	2275      	movs	r2, #117	; 0x75
 8002c86:	21d0      	movs	r1, #208	; 0xd0
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f003 fe81 	bl	8006990 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	2b68      	cmp	r3, #104	; 0x68
 8002c92:	d13d      	bne.n	8002d10 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002c98:	2364      	movs	r3, #100	; 0x64
 8002c9a:	9302      	str	r3, [sp, #8]
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	f107 030e 	add.w	r3, r7, #14
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	226b      	movs	r2, #107	; 0x6b
 8002caa:	21d0      	movs	r1, #208	; 0xd0
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f003 fd69 	bl	8006784 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002cb6:	2364      	movs	r3, #100	; 0x64
 8002cb8:	9302      	str	r3, [sp, #8]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	f107 030e 	add.w	r3, r7, #14
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	2219      	movs	r2, #25
 8002cc8:	21d0      	movs	r1, #208	; 0xd0
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f003 fd5a 	bl	8006784 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002cd4:	2364      	movs	r3, #100	; 0x64
 8002cd6:	9302      	str	r3, [sp, #8]
 8002cd8:	2301      	movs	r3, #1
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	f107 030e 	add.w	r3, r7, #14
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	221c      	movs	r2, #28
 8002ce6:	21d0      	movs	r1, #208	; 0xd0
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f003 fd4b 	bl	8006784 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002cf2:	2364      	movs	r3, #100	; 0x64
 8002cf4:	9302      	str	r3, [sp, #8]
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	f107 030e 	add.w	r3, r7, #14
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2301      	movs	r3, #1
 8002d02:	221b      	movs	r2, #27
 8002d04:	21d0      	movs	r1, #208	; 0xd0
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f003 fd3c 	bl	8006784 <HAL_I2C_Mem_Write>
        return 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e000      	b.n	8002d12 <MPU6050_Init+0xa6>
    }
    return 1;
 8002d10:	2301      	movs	r3, #1
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	0000      	movs	r0, r0
 8002d1c:	0000      	movs	r0, r0
	...

08002d20 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d24:	b094      	sub	sp, #80	; 0x50
 8002d26:	af04      	add	r7, sp, #16
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002d2c:	2364      	movs	r3, #100	; 0x64
 8002d2e:	9302      	str	r3, [sp, #8]
 8002d30:	230e      	movs	r3, #14
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	f107 0308 	add.w	r3, r7, #8
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	223b      	movs	r2, #59	; 0x3b
 8002d3e:	21d0      	movs	r1, #208	; 0xd0
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f003 fe25 	bl	8006990 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002d46:	7a3b      	ldrb	r3, [r7, #8]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	b21a      	sxth	r2, r3
 8002d4c:	7a7b      	ldrb	r3, [r7, #9]
 8002d4e:	b21b      	sxth	r3, r3
 8002d50:	4313      	orrs	r3, r2
 8002d52:	b21a      	sxth	r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002d58:	7abb      	ldrb	r3, [r7, #10]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	b21a      	sxth	r2, r3
 8002d5e:	7afb      	ldrb	r3, [r7, #11]
 8002d60:	b21b      	sxth	r3, r3
 8002d62:	4313      	orrs	r3, r2
 8002d64:	b21a      	sxth	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002d6a:	7b3b      	ldrb	r3, [r7, #12]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	b21a      	sxth	r2, r3
 8002d70:	7b7b      	ldrb	r3, [r7, #13]
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b21a      	sxth	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002d7c:	7bbb      	ldrb	r3, [r7, #14]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	b21a      	sxth	r2, r3
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	b21b      	sxth	r3, r3
 8002d86:	4313      	orrs	r3, r2
 8002d88:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002d8a:	7c3b      	ldrb	r3, [r7, #16]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	b21a      	sxth	r2, r3
 8002d90:	7c7b      	ldrb	r3, [r7, #17]
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b21a      	sxth	r2, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002d9c:	7cbb      	ldrb	r3, [r7, #18]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	b21a      	sxth	r2, r3
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	b21b      	sxth	r3, r3
 8002da6:	4313      	orrs	r3, r2
 8002da8:	b21a      	sxth	r2, r3
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002dae:	7d3b      	ldrb	r3, [r7, #20]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	7d7b      	ldrb	r3, [r7, #21]
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	4313      	orrs	r3, r2
 8002dba:	b21a      	sxth	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fb64 	bl	8000494 <__aeabi_i2d>
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	4bbd      	ldr	r3, [pc, #756]	; (80030c8 <MPU6050_Read_All+0x3a8>)
 8002dd2:	f7fd fcf3 	bl	80007bc <__aeabi_ddiv>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	6839      	ldr	r1, [r7, #0]
 8002ddc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fb54 	bl	8000494 <__aeabi_i2d>
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	4bb5      	ldr	r3, [pc, #724]	; (80030c8 <MPU6050_Read_All+0x3a8>)
 8002df2:	f7fd fce3 	bl	80007bc <__aeabi_ddiv>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	6839      	ldr	r1, [r7, #0]
 8002dfc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd fb44 	bl	8000494 <__aeabi_i2d>
 8002e0c:	a3a8      	add	r3, pc, #672	; (adr r3, 80030b0 <MPU6050_Read_All+0x390>)
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	f7fd fcd3 	bl	80007bc <__aeabi_ddiv>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002e20:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e2c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80030cc <MPU6050_Read_All+0x3ac>
 8002e30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e34:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80030d0 <MPU6050_Read_All+0x3b0>
 8002e38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fb23 	bl	8000494 <__aeabi_i2d>
 8002e4e:	a39a      	add	r3, pc, #616	; (adr r3, 80030b8 <MPU6050_Read_All+0x398>)
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f7fd fcb2 	bl	80007bc <__aeabi_ddiv>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	6839      	ldr	r1, [r7, #0]
 8002e5e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fb13 	bl	8000494 <__aeabi_i2d>
 8002e6e:	a392      	add	r3, pc, #584	; (adr r3, 80030b8 <MPU6050_Read_All+0x398>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd fca2 	bl	80007bc <__aeabi_ddiv>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	6839      	ldr	r1, [r7, #0]
 8002e7e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fb03 	bl	8000494 <__aeabi_i2d>
 8002e8e:	a38a      	add	r3, pc, #552	; (adr r3, 80030b8 <MPU6050_Read_All+0x398>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fc92 	bl	80007bc <__aeabi_ddiv>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	6839      	ldr	r1, [r7, #0]
 8002e9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002ea2:	f001 f831 	bl	8003f08 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	4b8a      	ldr	r3, [pc, #552]	; (80030d4 <MPU6050_Read_All+0x3b4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fae0 	bl	8000474 <__aeabi_ui2d>
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	4b87      	ldr	r3, [pc, #540]	; (80030d8 <MPU6050_Read_All+0x3b8>)
 8002eba:	f7fd fc7f 	bl	80007bc <__aeabi_ddiv>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002ec6:	f001 f81f 	bl	8003f08 <HAL_GetTick>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4a81      	ldr	r2, [pc, #516]	; (80030d4 <MPU6050_Read_All+0x3b4>)
 8002ece:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	fb03 f202 	mul.w	r2, r3, r2
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ef0:	fb03 f301 	mul.w	r3, r3, r1
 8002ef4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd facc 	bl	8000494 <__aeabi_i2d>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	ec43 2b10 	vmov	d0, r2, r3
 8002f04:	f009 fa48 	bl	800c398 <sqrt>
 8002f08:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f18:	f7fd fd8e 	bl	8000a38 <__aeabi_dcmpeq>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d11f      	bne.n	8002f62 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fab3 	bl	8000494 <__aeabi_i2d>
 8002f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f32:	f7fd fc43 	bl	80007bc <__aeabi_ddiv>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	ec43 2b17 	vmov	d7, r2, r3
 8002f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f42:	eef0 0a67 	vmov.f32	s1, s15
 8002f46:	f008 ff9b 	bl	800be80 <atan>
 8002f4a:	ec51 0b10 	vmov	r0, r1, d0
 8002f4e:	a35c      	add	r3, pc, #368	; (adr r3, 80030c0 <MPU6050_Read_All+0x3a0>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f7fd fb08 	bl	8000568 <__aeabi_dmul>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002f60:	e005      	b.n	8002f6e <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f74:	425b      	negs	r3, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fa8c 	bl	8000494 <__aeabi_i2d>
 8002f7c:	4682      	mov	sl, r0
 8002f7e:	468b      	mov	fp, r1
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fa84 	bl	8000494 <__aeabi_i2d>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	ec43 2b11 	vmov	d1, r2, r3
 8002f94:	ec4b ab10 	vmov	d0, sl, fp
 8002f98:	f009 f9fc 	bl	800c394 <atan2>
 8002f9c:	ec51 0b10 	vmov	r0, r1, d0
 8002fa0:	a347      	add	r3, pc, #284	; (adr r3, 80030c0 <MPU6050_Read_All+0x3a0>)
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	f7fd fadf 	bl	8000568 <__aeabi_dmul>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	4b49      	ldr	r3, [pc, #292]	; (80030dc <MPU6050_Read_All+0x3bc>)
 8002fb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fbc:	f7fd fd46 	bl	8000a4c <__aeabi_dcmplt>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <MPU6050_Read_All+0x2bc>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	4b43      	ldr	r3, [pc, #268]	; (80030e0 <MPU6050_Read_All+0x3c0>)
 8002fd2:	f7fd fd59 	bl	8000a88 <__aeabi_dcmpgt>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d114      	bne.n	8003006 <MPU6050_Read_All+0x2e6>
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <MPU6050_Read_All+0x3c0>)
 8002fe2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fe6:	f7fd fd4f 	bl	8000a88 <__aeabi_dcmpgt>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d015      	beq.n	800301c <MPU6050_Read_All+0x2fc>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	4b38      	ldr	r3, [pc, #224]	; (80030dc <MPU6050_Read_All+0x3bc>)
 8002ffc:	f7fd fd26 	bl	8000a4c <__aeabi_dcmplt>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8003006:	4937      	ldr	r1, [pc, #220]	; (80030e4 <MPU6050_Read_All+0x3c4>)
 8003008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800300c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003016:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800301a:	e014      	b.n	8003046 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003022:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003026:	eeb0 1a47 	vmov.f32	s2, s14
 800302a:	eef0 1a67 	vmov.f32	s3, s15
 800302e:	ed97 0b06 	vldr	d0, [r7, #24]
 8003032:	482c      	ldr	r0, [pc, #176]	; (80030e4 <MPU6050_Read_All+0x3c4>)
 8003034:	f000 f85a 	bl	80030ec <Kalman_getAngle>
 8003038:	eeb0 7a40 	vmov.f32	s14, s0
 800303c:	eef0 7a60 	vmov.f32	s15, s1
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800304c:	4690      	mov	r8, r2
 800304e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <MPU6050_Read_All+0x3c0>)
 8003058:	4640      	mov	r0, r8
 800305a:	4649      	mov	r1, r9
 800305c:	f7fd fd14 	bl	8000a88 <__aeabi_dcmpgt>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800306c:	4614      	mov	r4, r2
 800306e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800307e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003082:	eeb0 1a47 	vmov.f32	s2, s14
 8003086:	eef0 1a67 	vmov.f32	s3, s15
 800308a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800308e:	4816      	ldr	r0, [pc, #88]	; (80030e8 <MPU6050_Read_All+0x3c8>)
 8003090:	f000 f82c 	bl	80030ec <Kalman_getAngle>
 8003094:	eeb0 7a40 	vmov.f32	s14, s0
 8003098:	eef0 7a60 	vmov.f32	s15, s1
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 80030a2:	bf00      	nop
 80030a4:	3740      	adds	r7, #64	; 0x40
 80030a6:	46bd      	mov	sp, r7
 80030a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ac:	f3af 8000 	nop.w
 80030b0:	00000000 	.word	0x00000000
 80030b4:	40cc2900 	.word	0x40cc2900
 80030b8:	00000000 	.word	0x00000000
 80030bc:	40606000 	.word	0x40606000
 80030c0:	1a63c1f8 	.word	0x1a63c1f8
 80030c4:	404ca5dc 	.word	0x404ca5dc
 80030c8:	40d00000 	.word	0x40d00000
 80030cc:	43aa0000 	.word	0x43aa0000
 80030d0:	42121eb8 	.word	0x42121eb8
 80030d4:	2000063c 	.word	0x2000063c
 80030d8:	408f4000 	.word	0x408f4000
 80030dc:	c0568000 	.word	0xc0568000
 80030e0:	40568000 	.word	0x40568000
 80030e4:	200001a8 	.word	0x200001a8
 80030e8:	20000160 	.word	0x20000160

080030ec <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	b096      	sub	sp, #88	; 0x58
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	61f8      	str	r0, [r7, #28]
 80030f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80030f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80030fc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800310a:	f7fd f875 	bl	80001f8 <__aeabi_dsub>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800311c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003120:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003124:	f7fd fa20 	bl	8000568 <__aeabi_dmul>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4620      	mov	r0, r4
 800312e:	4629      	mov	r1, r5
 8003130:	f7fd f864 	bl	80001fc <__adddf3>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	69f9      	ldr	r1, [r7, #28]
 800313a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800314a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800314e:	f7fd fa0b 	bl	8000568 <__aeabi_dmul>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003160:	f7fd f84a 	bl	80001f8 <__aeabi_dsub>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003172:	f7fd f841 	bl	80001f8 <__aeabi_dsub>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f7fd f83a 	bl	80001fc <__adddf3>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003194:	f7fd f9e8 	bl	8000568 <__aeabi_dmul>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f7fd f82c 	bl	80001fc <__adddf3>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	69f9      	ldr	r1, [r7, #28]
 80031aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80031ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031be:	f7fd f9d3 	bl	8000568 <__aeabi_dmul>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4620      	mov	r0, r4
 80031c8:	4629      	mov	r1, r5
 80031ca:	f7fd f815 	bl	80001f8 <__aeabi_dsub>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	69f9      	ldr	r1, [r7, #28]
 80031d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80031e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031e8:	f7fd f9be 	bl	8000568 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4620      	mov	r0, r4
 80031f2:	4629      	mov	r1, r5
 80031f4:	f7fd f800 	bl	80001f8 <__aeabi_dsub>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	69f9      	ldr	r1, [r7, #28]
 80031fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800320e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003212:	f7fd f9a9 	bl	8000568 <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4620      	mov	r0, r4
 800321c:	4629      	mov	r1, r5
 800321e:	f7fc ffed 	bl	80001fc <__adddf3>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	69f9      	ldr	r1, [r7, #28]
 8003228:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003238:	f7fc ffe0 	bl	80001fc <__adddf3>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800324a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800324e:	f7fd fab5 	bl	80007bc <__aeabi_ddiv>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003264:	f7fd faaa 	bl	80007bc <__aeabi_ddiv>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003276:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800327a:	f7fc ffbd 	bl	80001f8 <__aeabi_dsub>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800328c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003290:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003294:	f7fd f968 	bl	8000568 <__aeabi_dmul>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4620      	mov	r0, r4
 800329e:	4629      	mov	r1, r5
 80032a0:	f7fc ffac 	bl	80001fc <__adddf3>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	69f9      	ldr	r1, [r7, #28]
 80032aa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80032b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032bc:	f7fd f954 	bl	8000568 <__aeabi_dmul>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4620      	mov	r0, r4
 80032c6:	4629      	mov	r1, r5
 80032c8:	f7fc ff98 	bl	80001fc <__adddf3>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	69f9      	ldr	r1, [r7, #28]
 80032d2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80032dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80032e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80032f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032f8:	f7fd f936 	bl	8000568 <__aeabi_dmul>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4620      	mov	r0, r4
 8003302:	4629      	mov	r1, r5
 8003304:	f7fc ff78 	bl	80001f8 <__aeabi_dsub>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	69f9      	ldr	r1, [r7, #28]
 800330e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003318:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800331c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003320:	f7fd f922 	bl	8000568 <__aeabi_dmul>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4620      	mov	r0, r4
 800332a:	4629      	mov	r1, r5
 800332c:	f7fc ff64 	bl	80001f8 <__aeabi_dsub>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	69f9      	ldr	r1, [r7, #28]
 8003336:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003340:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003348:	f7fd f90e 	bl	8000568 <__aeabi_dmul>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4620      	mov	r0, r4
 8003352:	4629      	mov	r1, r5
 8003354:	f7fc ff50 	bl	80001f8 <__aeabi_dsub>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	69f9      	ldr	r1, [r7, #28]
 800335e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003368:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800336c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003370:	f7fd f8fa 	bl	8000568 <__aeabi_dmul>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4620      	mov	r0, r4
 800337a:	4629      	mov	r1, r5
 800337c:	f7fc ff3c 	bl	80001f8 <__aeabi_dsub>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	69f9      	ldr	r1, [r7, #28]
 8003386:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003390:	ec43 2b17 	vmov	d7, r2, r3
};
 8003394:	eeb0 0a47 	vmov.f32	s0, s14
 8003398:	eef0 0a67 	vmov.f32	s1, s15
 800339c:	3758      	adds	r7, #88	; 0x58
 800339e:	46bd      	mov	sp, r7
 80033a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080033a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80033a8:	4b18      	ldr	r3, [pc, #96]	; (800340c <MX_SPI1_Init+0x68>)
 80033aa:	4a19      	ldr	r2, [pc, #100]	; (8003410 <MX_SPI1_Init+0x6c>)
 80033ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <MX_SPI1_Init+0x68>)
 80033b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <MX_SPI1_Init+0x68>)
 80033b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033bc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <MX_SPI1_Init+0x68>)
 80033c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80033c6:	4b11      	ldr	r3, [pc, #68]	; (800340c <MX_SPI1_Init+0x68>)
 80033c8:	2202      	movs	r2, #2
 80033ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033cc:	4b0f      	ldr	r3, [pc, #60]	; (800340c <MX_SPI1_Init+0x68>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <MX_SPI1_Init+0x68>)
 80033d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80033da:	4b0c      	ldr	r3, [pc, #48]	; (800340c <MX_SPI1_Init+0x68>)
 80033dc:	2228      	movs	r2, #40	; 0x28
 80033de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <MX_SPI1_Init+0x68>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033e6:	4b09      	ldr	r3, [pc, #36]	; (800340c <MX_SPI1_Init+0x68>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <MX_SPI1_Init+0x68>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <MX_SPI1_Init+0x68>)
 80033f4:	220a      	movs	r2, #10
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033f8:	4804      	ldr	r0, [pc, #16]	; (800340c <MX_SPI1_Init+0x68>)
 80033fa:	f004 ff41 	bl	8008280 <HAL_SPI_Init>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8003404:	f7ff fc20 	bl	8002c48 <Error_Handler>
  }

}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}
 800340c:	2000031c 	.word	0x2000031c
 8003410:	40013000 	.word	0x40013000

08003414 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	; 0x28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a19      	ldr	r2, [pc, #100]	; (8003498 <HAL_SPI_MspInit+0x84>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d12b      	bne.n	800348e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <HAL_SPI_MspInit+0x88>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_SPI_MspInit+0x88>)
 8003440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003444:	6453      	str	r3, [r2, #68]	; 0x44
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_SPI_MspInit+0x88>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_SPI_MspInit+0x88>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a10      	ldr	r2, [pc, #64]	; (800349c <HAL_SPI_MspInit+0x88>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <HAL_SPI_MspInit+0x88>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800346e:	2360      	movs	r3, #96	; 0x60
 8003470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347a:	2303      	movs	r3, #3
 800347c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800347e:	2305      	movs	r3, #5
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4619      	mov	r1, r3
 8003488:	4805      	ldr	r0, [pc, #20]	; (80034a0 <HAL_SPI_MspInit+0x8c>)
 800348a:	f002 fc13 	bl	8005cb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800348e:	bf00      	nop
 8003490:	3728      	adds	r7, #40	; 0x28
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40013000 	.word	0x40013000
 800349c:	40023800 	.word	0x40023800
 80034a0:	40020000 	.word	0x40020000

080034a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_MspInit+0x4c>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	4a0f      	ldr	r2, [pc, #60]	; (80034f0 <HAL_MspInit+0x4c>)
 80034b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <HAL_MspInit+0x4c>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_MspInit+0x4c>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <HAL_MspInit+0x4c>)
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d4:	6413      	str	r3, [r2, #64]	; 0x40
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_MspInit+0x4c>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800

080034f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003506:	e7fe      	b.n	8003506 <HardFault_Handler+0x4>

08003508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800350c:	e7fe      	b.n	800350c <MemManage_Handler+0x4>

0800350e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003512:	e7fe      	b.n	8003512 <BusFault_Handler+0x4>

08003514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003518:	e7fe      	b.n	8003518 <UsageFault_Handler+0x4>

0800351a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800351a:	b480      	push	{r7}
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003548:	f000 fcca 	bl	8003ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800354c:	bf00      	nop
 800354e:	bd80      	pop	{r7, pc}

08003550 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <DMA1_Stream1_IRQHandler+0x10>)
 8003556:	f002 f943 	bl	80057e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000740 	.word	0x20000740

08003564 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <CAN1_RX0_IRQHandler+0x10>)
 800356a:	f001 fb1f 	bl	8004bac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000374 	.word	0x20000374

08003578 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800357c:	2080      	movs	r0, #128	; 0x80
 800357e:	f002 ff1d 	bl	80063bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <SystemInit+0x28>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	4a07      	ldr	r2, [pc, #28]	; (80035b0 <SystemInit+0x28>)
 8003594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <SystemInit+0x28>)
 800359e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035a2:	609a      	str	r2, [r3, #8]
#endif
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b096      	sub	sp, #88	; 0x58
 80035b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	605a      	str	r2, [r3, #4]
 80035c4:	609a      	str	r2, [r3, #8]
 80035c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	60da      	str	r2, [r3, #12]
 80035e0:	611a      	str	r2, [r3, #16]
 80035e2:	615a      	str	r2, [r3, #20]
 80035e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	2220      	movs	r2, #32
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f008 fc3f 	bl	800be70 <memset>

  htim1.Instance = TIM1;
 80035f2:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <MX_TIM1_Init+0x138>)
 80035f4:	4a3e      	ldr	r2, [pc, #248]	; (80036f0 <MX_TIM1_Init+0x13c>)
 80035f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 80035f8:	4b3c      	ldr	r3, [pc, #240]	; (80036ec <MX_TIM1_Init+0x138>)
 80035fa:	22b3      	movs	r2, #179	; 0xb3
 80035fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035fe:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <MX_TIM1_Init+0x138>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003604:	4b39      	ldr	r3, [pc, #228]	; (80036ec <MX_TIM1_Init+0x138>)
 8003606:	2263      	movs	r2, #99	; 0x63
 8003608:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800360a:	4b38      	ldr	r3, [pc, #224]	; (80036ec <MX_TIM1_Init+0x138>)
 800360c:	2200      	movs	r2, #0
 800360e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003610:	4b36      	ldr	r3, [pc, #216]	; (80036ec <MX_TIM1_Init+0x138>)
 8003612:	2200      	movs	r2, #0
 8003614:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003616:	4b35      	ldr	r3, [pc, #212]	; (80036ec <MX_TIM1_Init+0x138>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800361c:	4833      	ldr	r0, [pc, #204]	; (80036ec <MX_TIM1_Init+0x138>)
 800361e:	f005 fb2d 	bl	8008c7c <HAL_TIM_Base_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003628:	f7ff fb0e 	bl	8002c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800362c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003630:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003636:	4619      	mov	r1, r3
 8003638:	482c      	ldr	r0, [pc, #176]	; (80036ec <MX_TIM1_Init+0x138>)
 800363a:	f006 faab 	bl	8009b94 <HAL_TIM_ConfigClockSource>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003644:	f7ff fb00 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003648:	4828      	ldr	r0, [pc, #160]	; (80036ec <MX_TIM1_Init+0x138>)
 800364a:	f005 fc6d 	bl	8008f28 <HAL_TIM_PWM_Init>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003654:	f7ff faf8 	bl	8002c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003658:	2300      	movs	r3, #0
 800365a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800365c:	2300      	movs	r3, #0
 800365e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003660:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003664:	4619      	mov	r1, r3
 8003666:	4821      	ldr	r0, [pc, #132]	; (80036ec <MX_TIM1_Init+0x138>)
 8003668:	f007 fb32 	bl	800acd0 <HAL_TIMEx_MasterConfigSynchronization>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003672:	f7ff fae9 	bl	8002c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003676:	2360      	movs	r3, #96	; 0x60
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800367e:	2300      	movs	r3, #0
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003682:	2300      	movs	r3, #0
 8003684:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800368e:	2300      	movs	r3, #0
 8003690:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003696:	2204      	movs	r2, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4814      	ldr	r0, [pc, #80]	; (80036ec <MX_TIM1_Init+0x138>)
 800369c:	f006 f89e 	bl	80097dc <HAL_TIM_PWM_ConfigChannel>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80036a6:	f7ff facf 	bl	8002c48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036c8:	1d3b      	adds	r3, r7, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4807      	ldr	r0, [pc, #28]	; (80036ec <MX_TIM1_Init+0x138>)
 80036ce:	f007 fbdd 	bl	800ae8c <HAL_TIMEx_ConfigBreakDeadTime>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80036d8:	f7ff fab6 	bl	8002c48 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80036dc:	4803      	ldr	r0, [pc, #12]	; (80036ec <MX_TIM1_Init+0x138>)
 80036de:	f000 fa2b 	bl	8003b38 <HAL_TIM_MspPostInit>

}
 80036e2:	bf00      	nop
 80036e4:	3758      	adds	r7, #88	; 0x58
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200006c0 	.word	0x200006c0
 80036f0:	40010000 	.word	0x40010000

080036f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036fa:	f107 0318 	add.w	r3, r7, #24
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003708:	f107 0310 	add.w	r3, r7, #16
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003712:	463b      	mov	r3, r7
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800371e:	4b31      	ldr	r3, [pc, #196]	; (80037e4 <MX_TIM2_Init+0xf0>)
 8003720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8003726:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <MX_TIM2_Init+0xf0>)
 8003728:	22b3      	movs	r2, #179	; 0xb3
 800372a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800372c:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <MX_TIM2_Init+0xf0>)
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8003732:	4b2c      	ldr	r3, [pc, #176]	; (80037e4 <MX_TIM2_Init+0xf0>)
 8003734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800373a:	4b2a      	ldr	r3, [pc, #168]	; (80037e4 <MX_TIM2_Init+0xf0>)
 800373c:	2200      	movs	r2, #0
 800373e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003740:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <MX_TIM2_Init+0xf0>)
 8003742:	2200      	movs	r2, #0
 8003744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003746:	4827      	ldr	r0, [pc, #156]	; (80037e4 <MX_TIM2_Init+0xf0>)
 8003748:	f005 fa98 	bl	8008c7c <HAL_TIM_Base_Init>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8003752:	f7ff fa79 	bl	8002c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800375a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800375c:	f107 0318 	add.w	r3, r7, #24
 8003760:	4619      	mov	r1, r3
 8003762:	4820      	ldr	r0, [pc, #128]	; (80037e4 <MX_TIM2_Init+0xf0>)
 8003764:	f006 fa16 	bl	8009b94 <HAL_TIM_ConfigClockSource>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800376e:	f7ff fa6b 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003772:	481c      	ldr	r0, [pc, #112]	; (80037e4 <MX_TIM2_Init+0xf0>)
 8003774:	f005 fda8 	bl	80092c8 <HAL_TIM_IC_Init>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800377e:	f7ff fa63 	bl	8002c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800378a:	f107 0310 	add.w	r3, r7, #16
 800378e:	4619      	mov	r1, r3
 8003790:	4814      	ldr	r0, [pc, #80]	; (80037e4 <MX_TIM2_Init+0xf0>)
 8003792:	f007 fa9d 	bl	800acd0 <HAL_TIMEx_MasterConfigSynchronization>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800379c:	f7ff fa54 	bl	8002c48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80037a0:	2300      	movs	r3, #0
 80037a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80037a4:	2301      	movs	r3, #1
 80037a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80037b0:	463b      	mov	r3, r7
 80037b2:	2208      	movs	r2, #8
 80037b4:	4619      	mov	r1, r3
 80037b6:	480b      	ldr	r0, [pc, #44]	; (80037e4 <MX_TIM2_Init+0xf0>)
 80037b8:	f005 fe5c 	bl	8009474 <HAL_TIM_IC_ConfigChannel>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80037c2:	f7ff fa41 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80037c6:	463b      	mov	r3, r7
 80037c8:	220c      	movs	r2, #12
 80037ca:	4619      	mov	r1, r3
 80037cc:	4805      	ldr	r0, [pc, #20]	; (80037e4 <MX_TIM2_Init+0xf0>)
 80037ce:	f005 fe51 	bl	8009474 <HAL_TIM_IC_ConfigChannel>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80037d8:	f7ff fa36 	bl	8002c48 <Error_Handler>
  }

}
 80037dc:	bf00      	nop
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000700 	.word	0x20000700

080037e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08e      	sub	sp, #56	; 0x38
 80037ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037fc:	f107 0320 	add.w	r3, r7, #32
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003806:	1d3b      	adds	r3, r7, #4
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
 8003814:	615a      	str	r2, [r3, #20]
 8003816:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <MX_TIM3_Init+0xfc>)
 800381a:	4a33      	ldr	r2, [pc, #204]	; (80038e8 <MX_TIM3_Init+0x100>)
 800381c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800381e:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <MX_TIM3_Init+0xfc>)
 8003820:	2259      	movs	r2, #89	; 0x59
 8003822:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003824:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <MX_TIM3_Init+0xfc>)
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800382a:	4b2e      	ldr	r3, [pc, #184]	; (80038e4 <MX_TIM3_Init+0xfc>)
 800382c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003830:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003832:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <MX_TIM3_Init+0xfc>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003838:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <MX_TIM3_Init+0xfc>)
 800383a:	2200      	movs	r2, #0
 800383c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800383e:	4829      	ldr	r0, [pc, #164]	; (80038e4 <MX_TIM3_Init+0xfc>)
 8003840:	f005 fa1c 	bl	8008c7c <HAL_TIM_Base_Init>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800384a:	f7ff f9fd 	bl	8002c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800384e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003858:	4619      	mov	r1, r3
 800385a:	4822      	ldr	r0, [pc, #136]	; (80038e4 <MX_TIM3_Init+0xfc>)
 800385c:	f006 f99a 	bl	8009b94 <HAL_TIM_ConfigClockSource>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003866:	f7ff f9ef 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800386a:	481e      	ldr	r0, [pc, #120]	; (80038e4 <MX_TIM3_Init+0xfc>)
 800386c:	f005 fb5c 	bl	8008f28 <HAL_TIM_PWM_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003876:	f7ff f9e7 	bl	8002c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003882:	f107 0320 	add.w	r3, r7, #32
 8003886:	4619      	mov	r1, r3
 8003888:	4816      	ldr	r0, [pc, #88]	; (80038e4 <MX_TIM3_Init+0xfc>)
 800388a:	f007 fa21 	bl	800acd0 <HAL_TIMEx_MasterConfigSynchronization>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003894:	f7ff f9d8 	bl	8002c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003898:	2360      	movs	r3, #96	; 0x60
 800389a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800389c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80038a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	2200      	movs	r2, #0
 80038ae:	4619      	mov	r1, r3
 80038b0:	480c      	ldr	r0, [pc, #48]	; (80038e4 <MX_TIM3_Init+0xfc>)
 80038b2:	f005 ff93 	bl	80097dc <HAL_TIM_PWM_ConfigChannel>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80038bc:	f7ff f9c4 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	2204      	movs	r2, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4807      	ldr	r0, [pc, #28]	; (80038e4 <MX_TIM3_Init+0xfc>)
 80038c8:	f005 ff88 	bl	80097dc <HAL_TIM_PWM_ConfigChannel>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80038d2:	f7ff f9b9 	bl	8002c48 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80038d6:	4803      	ldr	r0, [pc, #12]	; (80038e4 <MX_TIM3_Init+0xfc>)
 80038d8:	f000 f92e 	bl	8003b38 <HAL_TIM_MspPostInit>

}
 80038dc:	bf00      	nop
 80038de:	3738      	adds	r7, #56	; 0x38
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000680 	.word	0x20000680
 80038e8:	40000400 	.word	0x40000400

080038ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b096      	sub	sp, #88	; 0x58
 80038f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003900:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800390a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	60da      	str	r2, [r3, #12]
 8003918:	611a      	str	r2, [r3, #16]
 800391a:	615a      	str	r2, [r3, #20]
 800391c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800391e:	1d3b      	adds	r3, r7, #4
 8003920:	2220      	movs	r2, #32
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f008 faa3 	bl	800be70 <memset>

  htim8.Instance = TIM8;
 800392a:	4b3d      	ldr	r3, [pc, #244]	; (8003a20 <MX_TIM8_Init+0x134>)
 800392c:	4a3d      	ldr	r2, [pc, #244]	; (8003a24 <MX_TIM8_Init+0x138>)
 800392e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8003930:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <MX_TIM8_Init+0x134>)
 8003932:	22b3      	movs	r2, #179	; 0xb3
 8003934:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003936:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <MX_TIM8_Init+0x134>)
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800393c:	4b38      	ldr	r3, [pc, #224]	; (8003a20 <MX_TIM8_Init+0x134>)
 800393e:	2263      	movs	r2, #99	; 0x63
 8003940:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003942:	4b37      	ldr	r3, [pc, #220]	; (8003a20 <MX_TIM8_Init+0x134>)
 8003944:	2200      	movs	r2, #0
 8003946:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003948:	4b35      	ldr	r3, [pc, #212]	; (8003a20 <MX_TIM8_Init+0x134>)
 800394a:	2200      	movs	r2, #0
 800394c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800394e:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <MX_TIM8_Init+0x134>)
 8003950:	2200      	movs	r2, #0
 8003952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003954:	4832      	ldr	r0, [pc, #200]	; (8003a20 <MX_TIM8_Init+0x134>)
 8003956:	f005 f991 	bl	8008c7c <HAL_TIM_Base_Init>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003960:	f7ff f972 	bl	8002c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003968:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800396a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800396e:	4619      	mov	r1, r3
 8003970:	482b      	ldr	r0, [pc, #172]	; (8003a20 <MX_TIM8_Init+0x134>)
 8003972:	f006 f90f 	bl	8009b94 <HAL_TIM_ConfigClockSource>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800397c:	f7ff f964 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003980:	4827      	ldr	r0, [pc, #156]	; (8003a20 <MX_TIM8_Init+0x134>)
 8003982:	f005 fad1 	bl	8008f28 <HAL_TIM_PWM_Init>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800398c:	f7ff f95c 	bl	8002c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003990:	2300      	movs	r3, #0
 8003992:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003994:	2300      	movs	r3, #0
 8003996:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003998:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800399c:	4619      	mov	r1, r3
 800399e:	4820      	ldr	r0, [pc, #128]	; (8003a20 <MX_TIM8_Init+0x134>)
 80039a0:	f007 f996 	bl	800acd0 <HAL_TIMEx_MasterConfigSynchronization>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80039aa:	f7ff f94d 	bl	8002c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039ae:	2360      	movs	r3, #96	; 0x60
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039b6:	2300      	movs	r3, #0
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039be:	2300      	movs	r3, #0
 80039c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039c2:	2300      	movs	r3, #0
 80039c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ca:	220c      	movs	r2, #12
 80039cc:	4619      	mov	r1, r3
 80039ce:	4814      	ldr	r0, [pc, #80]	; (8003a20 <MX_TIM8_Init+0x134>)
 80039d0:	f005 ff04 	bl	80097dc <HAL_TIM_PWM_ConfigChannel>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80039da:	f7ff f935 	bl	8002c48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039de:	2300      	movs	r3, #0
 80039e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	4619      	mov	r1, r3
 8003a00:	4807      	ldr	r0, [pc, #28]	; (8003a20 <MX_TIM8_Init+0x134>)
 8003a02:	f007 fa43 	bl	800ae8c <HAL_TIMEx_ConfigBreakDeadTime>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8003a0c:	f7ff f91c 	bl	8002c48 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8003a10:	4803      	ldr	r0, [pc, #12]	; (8003a20 <MX_TIM8_Init+0x134>)
 8003a12:	f000 f891 	bl	8003b38 <HAL_TIM_MspPostInit>

}
 8003a16:	bf00      	nop
 8003a18:	3758      	adds	r7, #88	; 0x58
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000640 	.word	0x20000640
 8003a24:	40010400 	.word	0x40010400

08003a28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	; 0x30
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a30:	f107 031c 	add.w	r3, r7, #28
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a37      	ldr	r2, [pc, #220]	; (8003b24 <HAL_TIM_Base_MspInit+0xfc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10e      	bne.n	8003a68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	4a35      	ldr	r2, [pc, #212]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5a:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003a66:	e059      	b.n	8003b1c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d12d      	bne.n	8003ace <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4a2b      	ldr	r2, [pc, #172]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6413      	str	r3, [r2, #64]	; 0x40
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 8003aaa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003abc:	2301      	movs	r3, #1
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac0:	f107 031c 	add.w	r3, r7, #28
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4819      	ldr	r0, [pc, #100]	; (8003b2c <HAL_TIM_Base_MspInit+0x104>)
 8003ac8:	f002 f8f4 	bl	8005cb4 <HAL_GPIO_Init>
}
 8003acc:	e026      	b.n	8003b1c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <HAL_TIM_Base_MspInit+0x108>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d10e      	bne.n	8003af6 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	e012      	b.n	8003b1c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a0e      	ldr	r2, [pc, #56]	; (8003b34 <HAL_TIM_Base_MspInit+0x10c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d10d      	bne.n	8003b1c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b00:	2300      	movs	r3, #0
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	4a07      	ldr	r2, [pc, #28]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003b0a:	f043 0302 	orr.w	r3, r3, #2
 8003b0e:	6453      	str	r3, [r2, #68]	; 0x44
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_TIM_Base_MspInit+0x100>)
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
}
 8003b1c:	bf00      	nop
 8003b1e:	3730      	adds	r7, #48	; 0x30
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40020400 	.word	0x40020400
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40010400 	.word	0x40010400

08003b38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a37      	ldr	r2, [pc, #220]	; (8003c34 <HAL_TIM_MspPostInit+0xfc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d11f      	bne.n	8003b9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	4b36      	ldr	r3, [pc, #216]	; (8003c38 <HAL_TIM_MspPostInit+0x100>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	4a35      	ldr	r2, [pc, #212]	; (8003c38 <HAL_TIM_MspPostInit+0x100>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6a:	4b33      	ldr	r3, [pc, #204]	; (8003c38 <HAL_TIM_MspPostInit+0x100>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8003b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b84:	2300      	movs	r3, #0
 8003b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8003b8c:	f107 0314 	add.w	r3, r7, #20
 8003b90:	4619      	mov	r1, r3
 8003b92:	482a      	ldr	r0, [pc, #168]	; (8003c3c <HAL_TIM_MspPostInit+0x104>)
 8003b94:	f002 f88e 	bl	8005cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003b98:	e047      	b.n	8003c2a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <HAL_TIM_MspPostInit+0x108>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d11e      	bne.n	8003be2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_TIM_MspPostInit+0x100>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <HAL_TIM_MspPostInit+0x100>)
 8003bae:	f043 0304 	orr.w	r3, r3, #4
 8003bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb4:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <HAL_TIM_MspPostInit+0x100>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8003bc0:	23c0      	movs	r3, #192	; 0xc0
 8003bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	4619      	mov	r1, r3
 8003bda:	481a      	ldr	r0, [pc, #104]	; (8003c44 <HAL_TIM_MspPostInit+0x10c>)
 8003bdc:	f002 f86a 	bl	8005cb4 <HAL_GPIO_Init>
}
 8003be0:	e023      	b.n	8003c2a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_TIM_MspPostInit+0x110>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d11e      	bne.n	8003c2a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bec:	2300      	movs	r3, #0
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <HAL_TIM_MspPostInit+0x100>)
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	4a10      	ldr	r2, [pc, #64]	; (8003c38 <HAL_TIM_MspPostInit+0x100>)
 8003bf6:	f043 0304 	orr.w	r3, r3, #4
 8003bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <HAL_TIM_MspPostInit+0x100>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8003c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c16:	2300      	movs	r3, #0
 8003c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8003c1e:	f107 0314 	add.w	r3, r7, #20
 8003c22:	4619      	mov	r1, r3
 8003c24:	4807      	ldr	r0, [pc, #28]	; (8003c44 <HAL_TIM_MspPostInit+0x10c>)
 8003c26:	f002 f845 	bl	8005cb4 <HAL_GPIO_Init>
}
 8003c2a:	bf00      	nop
 8003c2c:	3728      	adds	r7, #40	; 0x28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40010000 	.word	0x40010000
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40000400 	.word	0x40000400
 8003c44:	40020800 	.word	0x40020800
 8003c48:	40010400 	.word	0x40010400

08003c4c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <MX_USART3_UART_Init+0x4c>)
 8003c52:	4a12      	ldr	r2, [pc, #72]	; (8003c9c <MX_USART3_UART_Init+0x50>)
 8003c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <MX_USART3_UART_Init+0x4c>)
 8003c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <MX_USART3_UART_Init+0x4c>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <MX_USART3_UART_Init+0x4c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <MX_USART3_UART_Init+0x4c>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <MX_USART3_UART_Init+0x4c>)
 8003c72:	220c      	movs	r2, #12
 8003c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <MX_USART3_UART_Init+0x4c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <MX_USART3_UART_Init+0x4c>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c82:	4805      	ldr	r0, [pc, #20]	; (8003c98 <MX_USART3_UART_Init+0x4c>)
 8003c84:	f007 f9ce 	bl	800b024 <HAL_UART_Init>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003c8e:	f7fe ffdb 	bl	8002c48 <Error_Handler>
  }

}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200007a0 	.word	0x200007a0
 8003c9c:	40004800 	.word	0x40004800

08003ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
 8003cb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a30      	ldr	r2, [pc, #192]	; (8003d80 <HAL_UART_MspInit+0xe0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d15a      	bne.n	8003d78 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	4b2f      	ldr	r3, [pc, #188]	; (8003d84 <HAL_UART_MspInit+0xe4>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	4a2e      	ldr	r2, [pc, #184]	; (8003d84 <HAL_UART_MspInit+0xe4>)
 8003ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <HAL_UART_MspInit+0xe4>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <HAL_UART_MspInit+0xe4>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <HAL_UART_MspInit+0xe4>)
 8003ce8:	f043 0308 	orr.w	r3, r3, #8
 8003cec:	6313      	str	r3, [r2, #48]	; 0x30
 8003cee:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_UART_MspInit+0xe4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8003cfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	2302      	movs	r3, #2
 8003d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d0c:	2307      	movs	r3, #7
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d10:	f107 0314 	add.w	r3, r7, #20
 8003d14:	4619      	mov	r1, r3
 8003d16:	481c      	ldr	r0, [pc, #112]	; (8003d88 <HAL_UART_MspInit+0xe8>)
 8003d18:	f001 ffcc 	bl	8005cb4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d1e:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <HAL_UART_MspInit+0xf0>)
 8003d20:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d28:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d2a:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d30:	4b16      	ldr	r3, [pc, #88]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d3c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d3e:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d50:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003d5c:	480b      	ldr	r0, [pc, #44]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d5e:	f001 fabd 	bl	80052dc <HAL_DMA_Init>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003d68:	f7fe ff6e 	bl	8002c48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d70:	635a      	str	r2, [r3, #52]	; 0x34
 8003d72:	4a06      	ldr	r2, [pc, #24]	; (8003d8c <HAL_UART_MspInit+0xec>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003d78:	bf00      	nop
 8003d7a:	3728      	adds	r7, #40	; 0x28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40004800 	.word	0x40004800
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40020c00 	.word	0x40020c00
 8003d8c:	20000740 	.word	0x20000740
 8003d90:	40026028 	.word	0x40026028

08003d94 <wheelSpeedControl_Init>:

  joy_pos_buffer_cnt++;
}

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003da0:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e20 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003dec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dee:	e003      	b.n	8003df8 <LoopCopyDataInit>

08003df0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003df2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003df4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003df6:	3104      	adds	r1, #4

08003df8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003df8:	480b      	ldr	r0, [pc, #44]	; (8003e28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003dfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e00:	d3f6      	bcc.n	8003df0 <CopyDataInit>
  ldr  r2, =_sbss
 8003e02:	4a0b      	ldr	r2, [pc, #44]	; (8003e30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e04:	e002      	b.n	8003e0c <LoopFillZerobss>

08003e06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e08:	f842 3b04 	str.w	r3, [r2], #4

08003e0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e10:	d3f9      	bcc.n	8003e06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e12:	f7ff fbb9 	bl	8003588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e16:	f008 f807 	bl	800be28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e1a:	f7fe f845 	bl	8001ea8 <main>
  bx  lr    
 8003e1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003e20:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003e24:	0800e0d0 	.word	0x0800e0d0
  ldr  r0, =_sdata
 8003e28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e2c:	20000264 	.word	0x20000264
  ldr  r2, =_sbss
 8003e30:	20000268 	.word	0x20000268
  ldr  r3, = _ebss
 8003e34:	200007e4 	.word	0x200007e4

08003e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e38:	e7fe      	b.n	8003e38 <ADC_IRQHandler>
	...

08003e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <HAL_Init+0x40>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <HAL_Init+0x40>)
 8003e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_Init+0x40>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <HAL_Init+0x40>)
 8003e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <HAL_Init+0x40>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <HAL_Init+0x40>)
 8003e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e64:	2003      	movs	r0, #3
 8003e66:	f001 f9a1 	bl	80051ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f000 f808 	bl	8003e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e70:	f7ff fb18 	bl	80034a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023c00 	.word	0x40023c00

08003e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e88:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <HAL_InitTick+0x54>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <HAL_InitTick+0x58>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	4619      	mov	r1, r3
 8003e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 f9e8 	bl	8005274 <HAL_SYSTICK_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e00e      	b.n	8003ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b0f      	cmp	r3, #15
 8003eb2:	d80a      	bhi.n	8003eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ebc:	f001 f996 	bl	80051ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ec0:	4a06      	ldr	r2, [pc, #24]	; (8003edc <HAL_InitTick+0x5c>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e000      	b.n	8003ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	200001f0 	.word	0x200001f0
 8003ed8:	200001f8 	.word	0x200001f8
 8003edc:	200001f4 	.word	0x200001f4

08003ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_IncTick+0x20>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_IncTick+0x24>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4413      	add	r3, r2
 8003ef0:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <HAL_IncTick+0x24>)
 8003ef2:	6013      	str	r3, [r2, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	200001f8 	.word	0x200001f8
 8003f04:	200007e0 	.word	0x200007e0

08003f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <HAL_GetTick+0x14>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	200007e0 	.word	0x200007e0

08003f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f28:	f7ff ffee 	bl	8003f08 <HAL_GetTick>
 8003f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f38:	d005      	beq.n	8003f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <HAL_Delay+0x44>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f46:	bf00      	nop
 8003f48:	f7ff ffde 	bl	8003f08 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d8f7      	bhi.n	8003f48 <HAL_Delay+0x28>
  {
  }
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	200001f8 	.word	0x200001f8

08003f68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e20e      	b.n	8004398 <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4aa0      	ldr	r2, [pc, #640]	; (8004200 <HAL_CAN_Init+0x298>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d009      	beq.n	8003f98 <HAL_CAN_Init+0x30>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a9e      	ldr	r2, [pc, #632]	; (8004204 <HAL_CAN_Init+0x29c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_CAN_Init+0x30>
 8003f8e:	f240 111d 	movw	r1, #285	; 0x11d
 8003f92:	489d      	ldr	r0, [pc, #628]	; (8004208 <HAL_CAN_Init+0x2a0>)
 8003f94:	f7fe fe5f 	bl	8002c56 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	7e1b      	ldrb	r3, [r3, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_CAN_Init+0x4a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7e1b      	ldrb	r3, [r3, #24]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d004      	beq.n	8003fb2 <HAL_CAN_Init+0x4a>
 8003fa8:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003fac:	4896      	ldr	r0, [pc, #600]	; (8004208 <HAL_CAN_Init+0x2a0>)
 8003fae:	f7fe fe52 	bl	8002c56 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	7e5b      	ldrb	r3, [r3, #25]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <HAL_CAN_Init+0x64>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	7e5b      	ldrb	r3, [r3, #25]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d004      	beq.n	8003fcc <HAL_CAN_Init+0x64>
 8003fc2:	f240 111f 	movw	r1, #287	; 0x11f
 8003fc6:	4890      	ldr	r0, [pc, #576]	; (8004208 <HAL_CAN_Init+0x2a0>)
 8003fc8:	f7fe fe45 	bl	8002c56 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7e9b      	ldrb	r3, [r3, #26]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_CAN_Init+0x7e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	7e9b      	ldrb	r3, [r3, #26]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d004      	beq.n	8003fe6 <HAL_CAN_Init+0x7e>
 8003fdc:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003fe0:	4889      	ldr	r0, [pc, #548]	; (8004208 <HAL_CAN_Init+0x2a0>)
 8003fe2:	f7fe fe38 	bl	8002c56 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7edb      	ldrb	r3, [r3, #27]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_CAN_Init+0x98>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7edb      	ldrb	r3, [r3, #27]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d004      	beq.n	8004000 <HAL_CAN_Init+0x98>
 8003ff6:	f240 1121 	movw	r1, #289	; 0x121
 8003ffa:	4883      	ldr	r0, [pc, #524]	; (8004208 <HAL_CAN_Init+0x2a0>)
 8003ffc:	f7fe fe2b 	bl	8002c56 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7f1b      	ldrb	r3, [r3, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_CAN_Init+0xb2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	7f1b      	ldrb	r3, [r3, #28]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d004      	beq.n	800401a <HAL_CAN_Init+0xb2>
 8004010:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004014:	487c      	ldr	r0, [pc, #496]	; (8004208 <HAL_CAN_Init+0x2a0>)
 8004016:	f7fe fe1e 	bl	8002c56 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	7f5b      	ldrb	r3, [r3, #29]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_CAN_Init+0xcc>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7f5b      	ldrb	r3, [r3, #29]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d004      	beq.n	8004034 <HAL_CAN_Init+0xcc>
 800402a:	f240 1123 	movw	r1, #291	; 0x123
 800402e:	4876      	ldr	r0, [pc, #472]	; (8004208 <HAL_CAN_Init+0x2a0>)
 8004030:	f7fe fe11 	bl	8002c56 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_CAN_Init+0xfc>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d00e      	beq.n	8004064 <HAL_CAN_Init+0xfc>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800404e:	d009      	beq.n	8004064 <HAL_CAN_Init+0xfc>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004058:	d004      	beq.n	8004064 <HAL_CAN_Init+0xfc>
 800405a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800405e:	486a      	ldr	r0, [pc, #424]	; (8004208 <HAL_CAN_Init+0x2a0>)
 8004060:	f7fe fdf9 	bl	8002c56 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <HAL_CAN_Init+0x12c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004074:	d00e      	beq.n	8004094 <HAL_CAN_Init+0x12c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800407e:	d009      	beq.n	8004094 <HAL_CAN_Init+0x12c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004088:	d004      	beq.n	8004094 <HAL_CAN_Init+0x12c>
 800408a:	f240 1125 	movw	r1, #293	; 0x125
 800408e:	485e      	ldr	r0, [pc, #376]	; (8004208 <HAL_CAN_Init+0x2a0>)
 8004090:	f7fe fde1 	bl	8002c56 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d04f      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a4:	d04a      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ae:	d045      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040b8:	d040      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040c2:	d03b      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040cc:	d036      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80040d6:	d031      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80040e0:	d02c      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040ea:	d027      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80040f4:	d022      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80040fe:	d01d      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8004108:	d018      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004112:	d013      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 800411c:	d00e      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004126:	d009      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8004130:	d004      	beq.n	800413c <HAL_CAN_Init+0x1d4>
 8004132:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004136:	4834      	ldr	r0, [pc, #208]	; (8004208 <HAL_CAN_Init+0x2a0>)
 8004138:	f7fe fd8d 	bl	8002c56 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d027      	beq.n	8004194 <HAL_CAN_Init+0x22c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800414c:	d022      	beq.n	8004194 <HAL_CAN_Init+0x22c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004156:	d01d      	beq.n	8004194 <HAL_CAN_Init+0x22c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004160:	d018      	beq.n	8004194 <HAL_CAN_Init+0x22c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800416a:	d013      	beq.n	8004194 <HAL_CAN_Init+0x22c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004174:	d00e      	beq.n	8004194 <HAL_CAN_Init+0x22c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800417e:	d009      	beq.n	8004194 <HAL_CAN_Init+0x22c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8004188:	d004      	beq.n	8004194 <HAL_CAN_Init+0x22c>
 800418a:	f240 1127 	movw	r1, #295	; 0x127
 800418e:	481e      	ldr	r0, [pc, #120]	; (8004208 <HAL_CAN_Init+0x2a0>)
 8004190:	f7fe fd61 	bl	8002c56 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <HAL_CAN_Init+0x23e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a4:	d904      	bls.n	80041b0 <HAL_CAN_Init+0x248>
 80041a6:	f44f 7194 	mov.w	r1, #296	; 0x128
 80041aa:	4817      	ldr	r0, [pc, #92]	; (8004208 <HAL_CAN_Init+0x2a0>)
 80041ac:	f7fe fd53 	bl	8002c56 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d102      	bne.n	80041c2 <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7fd fb83 	bl	80018c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0202 	bic.w	r2, r2, #2
 80041d0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041d2:	f7ff fe99 	bl	8003f08 <HAL_GetTick>
 80041d6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80041d8:	e018      	b.n	800420c <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041da:	f7ff fe95 	bl	8003f08 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b0a      	cmp	r3, #10
 80041e6:	d911      	bls.n	800420c <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2205      	movs	r2, #5
 80041f8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0cb      	b.n	8004398 <HAL_CAN_Init+0x430>
 8004200:	40006400 	.word	0x40006400
 8004204:	40006800 	.word	0x40006800
 8004208:	0800dba0 	.word	0x0800dba0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1df      	bne.n	80041da <HAL_CAN_Init+0x272>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800422a:	f7ff fe6d 	bl	8003f08 <HAL_GetTick>
 800422e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004230:	e012      	b.n	8004258 <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004232:	f7ff fe69 	bl	8003f08 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b0a      	cmp	r3, #10
 800423e:	d90b      	bls.n	8004258 <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2205      	movs	r2, #5
 8004250:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e09f      	b.n	8004398 <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0e5      	beq.n	8004232 <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	7e1b      	ldrb	r3, [r3, #24]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d108      	bne.n	8004280 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e007      	b.n	8004290 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800428e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7e5b      	ldrb	r3, [r3, #25]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d108      	bne.n	80042aa <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e007      	b.n	80042ba <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	7e9b      	ldrb	r3, [r3, #26]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d108      	bne.n	80042d4 <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0220 	orr.w	r2, r2, #32
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e007      	b.n	80042e4 <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0220 	bic.w	r2, r2, #32
 80042e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	7edb      	ldrb	r3, [r3, #27]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d108      	bne.n	80042fe <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0210 	bic.w	r2, r2, #16
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e007      	b.n	800430e <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0210 	orr.w	r2, r2, #16
 800430c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	7f1b      	ldrb	r3, [r3, #28]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d108      	bne.n	8004328 <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0208 	orr.w	r2, r2, #8
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	e007      	b.n	8004338 <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0208 	bic.w	r2, r2, #8
 8004336:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	7f5b      	ldrb	r3, [r3, #29]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d108      	bne.n	8004352 <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0204 	orr.w	r2, r2, #4
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e007      	b.n	8004362 <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0204 	bic.w	r2, r2, #4
 8004360:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	ea42 0103 	orr.w	r1, r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	1e5a      	subs	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80043b8:	7cfb      	ldrb	r3, [r7, #19]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d003      	beq.n	80043c6 <HAL_CAN_ConfigFilter+0x26>
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	f040 812c 	bne.w	800461e <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ce:	d304      	bcc.n	80043da <HAL_CAN_ConfigFilter+0x3a>
 80043d0:	f44f 7154 	mov.w	r1, #848	; 0x350
 80043d4:	4897      	ldr	r0, [pc, #604]	; (8004634 <HAL_CAN_ConfigFilter+0x294>)
 80043d6:	f7fe fc3e 	bl	8002c56 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e2:	d304      	bcc.n	80043ee <HAL_CAN_ConfigFilter+0x4e>
 80043e4:	f240 3151 	movw	r1, #849	; 0x351
 80043e8:	4892      	ldr	r0, [pc, #584]	; (8004634 <HAL_CAN_ConfigFilter+0x294>)
 80043ea:	f7fe fc34 	bl	8002c56 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d304      	bcc.n	8004402 <HAL_CAN_ConfigFilter+0x62>
 80043f8:	f240 3152 	movw	r1, #850	; 0x352
 80043fc:	488d      	ldr	r0, [pc, #564]	; (8004634 <HAL_CAN_ConfigFilter+0x294>)
 80043fe:	f7fe fc2a 	bl	8002c56 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440a:	d304      	bcc.n	8004416 <HAL_CAN_ConfigFilter+0x76>
 800440c:	f240 3153 	movw	r1, #851	; 0x353
 8004410:	4888      	ldr	r0, [pc, #544]	; (8004634 <HAL_CAN_ConfigFilter+0x294>)
 8004412:	f7fe fc20 	bl	8002c56 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d008      	beq.n	8004430 <HAL_CAN_ConfigFilter+0x90>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d004      	beq.n	8004430 <HAL_CAN_ConfigFilter+0x90>
 8004426:	f44f 7155 	mov.w	r1, #852	; 0x354
 800442a:	4882      	ldr	r0, [pc, #520]	; (8004634 <HAL_CAN_ConfigFilter+0x294>)
 800442c:	f7fe fc13 	bl	8002c56 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_CAN_ConfigFilter+0xaa>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d004      	beq.n	800444a <HAL_CAN_ConfigFilter+0xaa>
 8004440:	f240 3155 	movw	r1, #853	; 0x355
 8004444:	487b      	ldr	r0, [pc, #492]	; (8004634 <HAL_CAN_ConfigFilter+0x294>)
 8004446:	f7fe fc06 	bl	8002c56 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_CAN_ConfigFilter+0xc4>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d004      	beq.n	8004464 <HAL_CAN_ConfigFilter+0xc4>
 800445a:	f240 3156 	movw	r1, #854	; 0x356
 800445e:	4875      	ldr	r0, [pc, #468]	; (8004634 <HAL_CAN_ConfigFilter+0x294>)
 8004460:	f7fe fbf9 	bl	8002c56 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_CAN_ConfigFilter+0xde>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d004      	beq.n	800447e <HAL_CAN_ConfigFilter+0xde>
 8004474:	f240 3157 	movw	r1, #855	; 0x357
 8004478:	486e      	ldr	r0, [pc, #440]	; (8004634 <HAL_CAN_ConfigFilter+0x294>)
 800447a:	f7fe fbec 	bl	8002c56 <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800447e:	4b6e      	ldr	r3, [pc, #440]	; (8004638 <HAL_CAN_ConfigFilter+0x298>)
 8004480:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	2b1b      	cmp	r3, #27
 8004488:	d904      	bls.n	8004494 <HAL_CAN_ConfigFilter+0xf4>
 800448a:	f240 3172 	movw	r1, #882	; 0x372
 800448e:	4869      	ldr	r0, [pc, #420]	; (8004634 <HAL_CAN_ConfigFilter+0x294>)
 8004490:	f7fe fbe1 	bl	8002c56 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b1b      	cmp	r3, #27
 800449a:	d904      	bls.n	80044a6 <HAL_CAN_ConfigFilter+0x106>
 800449c:	f240 3173 	movw	r1, #883	; 0x373
 80044a0:	4864      	ldr	r0, [pc, #400]	; (8004634 <HAL_CAN_ConfigFilter+0x294>)
 80044a2:	f7fe fbd8 	bl	8002c56 <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044ac:	f043 0201 	orr.w	r2, r3, #1
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	431a      	orrs	r2, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	2201      	movs	r2, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	401a      	ands	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d123      	bne.n	800454c <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004526:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3248      	adds	r2, #72	; 0x48
 800452c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004540:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	3348      	adds	r3, #72	; 0x48
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	440b      	add	r3, r1
 800454a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d122      	bne.n	800459a <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	431a      	orrs	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004574:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	3248      	adds	r2, #72	; 0x48
 800457a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800458e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004590:	6979      	ldr	r1, [r7, #20]
 8004592:	3348      	adds	r3, #72	; 0x48
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	440b      	add	r3, r1
 8004598:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	401a      	ands	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80045b4:	e007      	b.n	80045c6 <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	431a      	orrs	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	43db      	mvns	r3, r3
 80045d8:	401a      	ands	r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80045e0:	e007      	b.n	80045f2 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	431a      	orrs	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004610:	f023 0201 	bic.w	r2, r3, #1
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e006      	b.n	800462c <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	0800dba0 	.word	0x0800dba0
 8004638:	40006400 	.word	0x40006400

0800463c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	d12e      	bne.n	80046ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004668:	f7ff fc4e 	bl	8003f08 <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800466e:	e012      	b.n	8004696 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004670:	f7ff fc4a 	bl	8003f08 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b0a      	cmp	r3, #10
 800467c:	d90b      	bls.n	8004696 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2205      	movs	r2, #5
 800468e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e012      	b.n	80046bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e5      	bne.n	8004670 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e006      	b.n	80046bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_CAN_AddTxMessage+0x38>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d004      	beq.n	80046fc <HAL_CAN_AddTxMessage+0x38>
 80046f2:	f240 41e9 	movw	r1, #1257	; 0x4e9
 80046f6:	4884      	ldr	r0, [pc, #528]	; (8004908 <HAL_CAN_AddTxMessage+0x244>)
 80046f8:	f7fe faad 	bl	8002c56 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_CAN_AddTxMessage+0x52>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d004      	beq.n	8004716 <HAL_CAN_AddTxMessage+0x52>
 800470c:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8004710:	487d      	ldr	r0, [pc, #500]	; (8004908 <HAL_CAN_AddTxMessage+0x244>)
 8004712:	f7fe faa0 	bl	8002c56 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b08      	cmp	r3, #8
 800471c:	d904      	bls.n	8004728 <HAL_CAN_AddTxMessage+0x64>
 800471e:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8004722:	4879      	ldr	r0, [pc, #484]	; (8004908 <HAL_CAN_AddTxMessage+0x244>)
 8004724:	f7fe fa97 	bl	8002c56 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004738:	d30f      	bcc.n	800475a <HAL_CAN_AddTxMessage+0x96>
 800473a:	f240 41ee 	movw	r1, #1262	; 0x4ee
 800473e:	4872      	ldr	r0, [pc, #456]	; (8004908 <HAL_CAN_AddTxMessage+0x244>)
 8004740:	f7fe fa89 	bl	8002c56 <assert_failed>
 8004744:	e009      	b.n	800475a <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800474e:	d304      	bcc.n	800475a <HAL_CAN_AddTxMessage+0x96>
 8004750:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8004754:	486c      	ldr	r0, [pc, #432]	; (8004908 <HAL_CAN_AddTxMessage+0x244>)
 8004756:	f7fe fa7e 	bl	8002c56 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	7d1b      	ldrb	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <HAL_CAN_AddTxMessage+0xb0>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	7d1b      	ldrb	r3, [r3, #20]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d004      	beq.n	8004774 <HAL_CAN_AddTxMessage+0xb0>
 800476a:	f240 41f4 	movw	r1, #1268	; 0x4f4
 800476e:	4866      	ldr	r0, [pc, #408]	; (8004908 <HAL_CAN_AddTxMessage+0x244>)
 8004770:	f7fe fa71 	bl	8002c56 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8004774:	7ffb      	ldrb	r3, [r7, #31]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d003      	beq.n	8004782 <HAL_CAN_AddTxMessage+0xbe>
 800477a:	7ffb      	ldrb	r3, [r7, #31]
 800477c:	2b02      	cmp	r3, #2
 800477e:	f040 80b8 	bne.w	80048f2 <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004792:	2b00      	cmp	r3, #0
 8004794:	d105      	bne.n	80047a2 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80a0 	beq.w	80048e2 <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	0e1b      	lsrs	r3, r3, #24
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d907      	bls.n	80047c2 <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e09e      	b.n	8004900 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80047c2:	2201      	movs	r2, #1
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	409a      	lsls	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10d      	bne.n	80047f0 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80047de:	68f9      	ldr	r1, [r7, #12]
 80047e0:	6809      	ldr	r1, [r1, #0]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3318      	adds	r3, #24
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	440b      	add	r3, r1
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e00f      	b.n	8004810 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047fa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004800:	68f9      	ldr	r1, [r7, #12]
 8004802:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004804:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	3318      	adds	r3, #24
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	440b      	add	r3, r1
 800480e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	3318      	adds	r3, #24
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	440b      	add	r3, r1
 8004820:	3304      	adds	r3, #4
 8004822:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	7d1b      	ldrb	r3, [r3, #20]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d111      	bne.n	8004850 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	3318      	adds	r3, #24
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	4413      	add	r3, r2
 8004838:	3304      	adds	r3, #4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	6811      	ldr	r1, [r2, #0]
 8004840:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3318      	adds	r3, #24
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	440b      	add	r3, r1
 800484c:	3304      	adds	r3, #4
 800484e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3307      	adds	r3, #7
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	061a      	lsls	r2, r3, #24
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3306      	adds	r3, #6
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3305      	adds	r3, #5
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	4313      	orrs	r3, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	3204      	adds	r2, #4
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	4610      	mov	r0, r2
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	6811      	ldr	r1, [r2, #0]
 8004878:	ea43 0200 	orr.w	r2, r3, r0
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	440b      	add	r3, r1
 8004882:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004886:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3303      	adds	r3, #3
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	061a      	lsls	r2, r3, #24
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3302      	adds	r3, #2
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3301      	adds	r3, #1
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	4313      	orrs	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	7812      	ldrb	r2, [r2, #0]
 80048a8:	4610      	mov	r0, r2
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	6811      	ldr	r1, [r2, #0]
 80048ae:	ea43 0200 	orr.w	r2, r3, r0
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	440b      	add	r3, r1
 80048b8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80048bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	3318      	adds	r3, #24
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	4413      	add	r3, r2
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	6811      	ldr	r1, [r2, #0]
 80048d0:	f043 0201 	orr.w	r2, r3, #1
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	3318      	adds	r3, #24
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	440b      	add	r3, r1
 80048dc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	e00e      	b.n	8004900 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e006      	b.n	8004900 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
  }
}
 8004900:	4618      	mov	r0, r3
 8004902:	3720      	adds	r7, #32
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	0800dba0 	.word	0x0800dba0

0800490c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004920:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <HAL_CAN_GetRxMessage+0x2c>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d004      	beq.n	8004938 <HAL_CAN_GetRxMessage+0x2c>
 800492e:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8004932:	4884      	ldr	r0, [pc, #528]	; (8004b44 <HAL_CAN_GetRxMessage+0x238>)
 8004934:	f7fe f98f 	bl	8002c56 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d003      	beq.n	8004946 <HAL_CAN_GetRxMessage+0x3a>
 800493e:	7dfb      	ldrb	r3, [r7, #23]
 8004940:	2b02      	cmp	r3, #2
 8004942:	f040 80f3 	bne.w	8004b2c <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10e      	bne.n	800496a <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d116      	bne.n	8004988 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e0e7      	b.n	8004b3a <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d107      	bne.n	8004988 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0d8      	b.n	8004b3a <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	331b      	adds	r3, #27
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	4413      	add	r3, r2
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0204 	and.w	r2, r3, #4
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10c      	bne.n	80049c0 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	331b      	adds	r3, #27
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	4413      	add	r3, r2
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0d5b      	lsrs	r3, r3, #21
 80049b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e00b      	b.n	80049d8 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	331b      	adds	r3, #27
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	4413      	add	r3, r2
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	08db      	lsrs	r3, r3, #3
 80049d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	331b      	adds	r3, #27
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	4413      	add	r3, r2
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0202 	and.w	r2, r3, #2
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	331b      	adds	r3, #27
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	4413      	add	r3, r2
 80049fa:	3304      	adds	r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 020f 	and.w	r2, r3, #15
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	331b      	adds	r3, #27
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	4413      	add	r3, r2
 8004a12:	3304      	adds	r3, #4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	331b      	adds	r3, #27
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	4413      	add	r3, r2
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	0c1b      	lsrs	r3, r3, #16
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	0a1a      	lsrs	r2, r3, #8
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	3301      	adds	r3, #1
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	0c1a      	lsrs	r2, r3, #16
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	3302      	adds	r3, #2
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	0e1a      	lsrs	r2, r3, #24
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	3303      	adds	r3, #3
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	3304      	adds	r3, #4
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	0a1a      	lsrs	r2, r3, #8
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	3305      	adds	r3, #5
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	0c1a      	lsrs	r2, r3, #16
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	3306      	adds	r3, #6
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	0e1a      	lsrs	r2, r3, #24
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	3307      	adds	r3, #7
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0220 	orr.w	r2, r2, #32
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	e007      	b.n	8004b28 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0220 	orr.w	r2, r2, #32
 8004b26:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e006      	b.n	8004b3a <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
  }
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	0800dba0 	.word	0x0800dba0

08004b48 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b58:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	4a11      	ldr	r2, [pc, #68]	; (8004ba4 <HAL_CAN_ActivateNotification+0x5c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d904      	bls.n	8004b6c <HAL_CAN_ActivateNotification+0x24>
 8004b62:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 8004b66:	4810      	ldr	r0, [pc, #64]	; (8004ba8 <HAL_CAN_ActivateNotification+0x60>)
 8004b68:	f7fe f875 	bl	8002c56 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d002      	beq.n	8004b78 <HAL_CAN_ActivateNotification+0x30>
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d109      	bne.n	8004b8c <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6959      	ldr	r1, [r3, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e006      	b.n	8004b9a <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
  }
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	00038f7f 	.word	0x00038f7f
 8004ba8:	0800dba0 	.word	0x0800dba0

08004bac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d07c      	beq.n	8004cec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d023      	beq.n	8004c44 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2201      	movs	r2, #1
 8004c02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f983 	bl	8004f1a <HAL_CAN_TxMailbox0CompleteCallback>
 8004c14:	e016      	b.n	8004c44 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
 8004c28:	e00c      	b.n	8004c44 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3c:	e002      	b.n	8004c44 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f989 	bl	8004f56 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d024      	beq.n	8004c98 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f963 	bl	8004f2e <HAL_CAN_TxMailbox1CompleteCallback>
 8004c68:	e016      	b.n	8004c98 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7c:	e00c      	b.n	8004c98 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c90:	e002      	b.n	8004c98 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f969 	bl	8004f6a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d024      	beq.n	8004cec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004caa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f943 	bl	8004f42 <HAL_CAN_TxMailbox2CompleteCallback>
 8004cbc:	e016      	b.n	8004cec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd0:	e00c      	b.n	8004cec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce4:	e002      	b.n	8004cec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f949 	bl	8004f7e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00c      	beq.n	8004d10 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2210      	movs	r2, #16
 8004d0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d006      	beq.n	8004d32 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2208      	movs	r2, #8
 8004d2a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f930 	bl	8004f92 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fd fe70 	bl	8002a30 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00c      	beq.n	8004d74 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2210      	movs	r2, #16
 8004d72:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00b      	beq.n	8004d96 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d006      	beq.n	8004d96 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f912 	bl	8004fba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f8f9 	bl	8004fa6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d006      	beq.n	8004dd6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2210      	movs	r2, #16
 8004dce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f8fc 	bl	8004fce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d006      	beq.n	8004df8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2208      	movs	r2, #8
 8004df0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f8f5 	bl	8004fe2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d07b      	beq.n	8004efa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d072      	beq.n	8004ef2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	f043 0302 	orr.w	r3, r3, #2
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d043      	beq.n	8004ef2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d03e      	beq.n	8004ef2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e7a:	2b60      	cmp	r3, #96	; 0x60
 8004e7c:	d02b      	beq.n	8004ed6 <HAL_CAN_IRQHandler+0x32a>
 8004e7e:	2b60      	cmp	r3, #96	; 0x60
 8004e80:	d82e      	bhi.n	8004ee0 <HAL_CAN_IRQHandler+0x334>
 8004e82:	2b50      	cmp	r3, #80	; 0x50
 8004e84:	d022      	beq.n	8004ecc <HAL_CAN_IRQHandler+0x320>
 8004e86:	2b50      	cmp	r3, #80	; 0x50
 8004e88:	d82a      	bhi.n	8004ee0 <HAL_CAN_IRQHandler+0x334>
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	d019      	beq.n	8004ec2 <HAL_CAN_IRQHandler+0x316>
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d826      	bhi.n	8004ee0 <HAL_CAN_IRQHandler+0x334>
 8004e92:	2b30      	cmp	r3, #48	; 0x30
 8004e94:	d010      	beq.n	8004eb8 <HAL_CAN_IRQHandler+0x30c>
 8004e96:	2b30      	cmp	r3, #48	; 0x30
 8004e98:	d822      	bhi.n	8004ee0 <HAL_CAN_IRQHandler+0x334>
 8004e9a:	2b10      	cmp	r3, #16
 8004e9c:	d002      	beq.n	8004ea4 <HAL_CAN_IRQHandler+0x2f8>
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d005      	beq.n	8004eae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004ea2:	e01d      	b.n	8004ee0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	f043 0308 	orr.w	r3, r3, #8
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eac:	e019      	b.n	8004ee2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	f043 0310 	orr.w	r3, r3, #16
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eb6:	e014      	b.n	8004ee2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	f043 0320 	orr.w	r3, r3, #32
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ec0:	e00f      	b.n	8004ee2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eca:	e00a      	b.n	8004ee2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ed4:	e005      	b.n	8004ee2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ede:	e000      	b.n	8004ee2 <HAL_CAN_IRQHandler+0x336>
            break;
 8004ee0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ef0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f872 	bl	8004ff6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004f12:	bf00      	nop
 8004f14:	3728      	adds	r7, #40	; 0x28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <__NVIC_SetPriorityGrouping+0x44>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005028:	4013      	ands	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800503c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800503e:	4a04      	ldr	r2, [pc, #16]	; (8005050 <__NVIC_SetPriorityGrouping+0x44>)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	60d3      	str	r3, [r2, #12]
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005058:	4b04      	ldr	r3, [pc, #16]	; (800506c <__NVIC_GetPriorityGrouping+0x18>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	f003 0307 	and.w	r3, r3, #7
}
 8005062:	4618      	mov	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800507a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507e:	2b00      	cmp	r3, #0
 8005080:	db0b      	blt.n	800509a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	f003 021f 	and.w	r2, r3, #31
 8005088:	4907      	ldr	r1, [pc, #28]	; (80050a8 <__NVIC_EnableIRQ+0x38>)
 800508a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	2001      	movs	r0, #1
 8005092:	fa00 f202 	lsl.w	r2, r0, r2
 8005096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	e000e100 	.word	0xe000e100

080050ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	6039      	str	r1, [r7, #0]
 80050b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	db0a      	blt.n	80050d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	490c      	ldr	r1, [pc, #48]	; (80050f8 <__NVIC_SetPriority+0x4c>)
 80050c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ca:	0112      	lsls	r2, r2, #4
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	440b      	add	r3, r1
 80050d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050d4:	e00a      	b.n	80050ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4908      	ldr	r1, [pc, #32]	; (80050fc <__NVIC_SetPriority+0x50>)
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	3b04      	subs	r3, #4
 80050e4:	0112      	lsls	r2, r2, #4
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	440b      	add	r3, r1
 80050ea:	761a      	strb	r2, [r3, #24]
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	e000e100 	.word	0xe000e100
 80050fc:	e000ed00 	.word	0xe000ed00

08005100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005100:	b480      	push	{r7}
 8005102:	b089      	sub	sp, #36	; 0x24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f1c3 0307 	rsb	r3, r3, #7
 800511a:	2b04      	cmp	r3, #4
 800511c:	bf28      	it	cs
 800511e:	2304      	movcs	r3, #4
 8005120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3304      	adds	r3, #4
 8005126:	2b06      	cmp	r3, #6
 8005128:	d902      	bls.n	8005130 <NVIC_EncodePriority+0x30>
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3b03      	subs	r3, #3
 800512e:	e000      	b.n	8005132 <NVIC_EncodePriority+0x32>
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43da      	mvns	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	401a      	ands	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	43d9      	mvns	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005158:	4313      	orrs	r3, r2
         );
}
 800515a:	4618      	mov	r0, r3
 800515c:	3724      	adds	r7, #36	; 0x24
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3b01      	subs	r3, #1
 8005174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005178:	d301      	bcc.n	800517e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800517a:	2301      	movs	r3, #1
 800517c:	e00f      	b.n	800519e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800517e:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <SysTick_Config+0x40>)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3b01      	subs	r3, #1
 8005184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005186:	210f      	movs	r1, #15
 8005188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800518c:	f7ff ff8e 	bl	80050ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <SysTick_Config+0x40>)
 8005192:	2200      	movs	r2, #0
 8005194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005196:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <SysTick_Config+0x40>)
 8005198:	2207      	movs	r2, #7
 800519a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	e000e010 	.word	0xe000e010

080051ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b07      	cmp	r3, #7
 80051b8:	d00f      	beq.n	80051da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b06      	cmp	r3, #6
 80051be:	d00c      	beq.n	80051da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b05      	cmp	r3, #5
 80051c4:	d009      	beq.n	80051da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d006      	beq.n	80051da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d003      	beq.n	80051da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80051d2:	2192      	movs	r1, #146	; 0x92
 80051d4:	4804      	ldr	r0, [pc, #16]	; (80051e8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80051d6:	f7fd fd3e 	bl	8002c56 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff ff16 	bl	800500c <__NVIC_SetPriorityGrouping>
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	0800dbd8 	.word	0x0800dbd8

080051ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b0f      	cmp	r3, #15
 8005202:	d903      	bls.n	800520c <HAL_NVIC_SetPriority+0x20>
 8005204:	21aa      	movs	r1, #170	; 0xaa
 8005206:	480e      	ldr	r0, [pc, #56]	; (8005240 <HAL_NVIC_SetPriority+0x54>)
 8005208:	f7fd fd25 	bl	8002c56 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b0f      	cmp	r3, #15
 8005210:	d903      	bls.n	800521a <HAL_NVIC_SetPriority+0x2e>
 8005212:	21ab      	movs	r1, #171	; 0xab
 8005214:	480a      	ldr	r0, [pc, #40]	; (8005240 <HAL_NVIC_SetPriority+0x54>)
 8005216:	f7fd fd1e 	bl	8002c56 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800521a:	f7ff ff1b 	bl	8005054 <__NVIC_GetPriorityGrouping>
 800521e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	6978      	ldr	r0, [r7, #20]
 8005226:	f7ff ff6b 	bl	8005100 <NVIC_EncodePriority>
 800522a:	4602      	mov	r2, r0
 800522c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff ff3a 	bl	80050ac <__NVIC_SetPriority>
}
 8005238:	bf00      	nop
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	0800dbd8 	.word	0x0800dbd8

08005244 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800524e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005252:	2b00      	cmp	r3, #0
 8005254:	da03      	bge.n	800525e <HAL_NVIC_EnableIRQ+0x1a>
 8005256:	21be      	movs	r1, #190	; 0xbe
 8005258:	4805      	ldr	r0, [pc, #20]	; (8005270 <HAL_NVIC_EnableIRQ+0x2c>)
 800525a:	f7fd fcfc 	bl	8002c56 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800525e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff04 	bl	8005070 <__NVIC_EnableIRQ>
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	0800dbd8 	.word	0x0800dbd8

08005274 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff ff73 	bl	8005168 <SysTick_Config>
 8005282:	4603      	mov	r3, r0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b04      	cmp	r3, #4
 8005298:	d007      	beq.n	80052aa <HAL_SYSTICK_CLKSourceConfig+0x1e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <HAL_SYSTICK_CLKSourceConfig+0x1e>
 80052a0:	f240 11c9 	movw	r1, #457	; 0x1c9
 80052a4:	480b      	ldr	r0, [pc, #44]	; (80052d4 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 80052a6:	f7fd fcd6 	bl	8002c56 <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d106      	bne.n	80052be <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80052b0:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80052b6:	f043 0304 	orr.w	r3, r3, #4
 80052ba:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80052bc:	e005      	b.n	80052ca <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a05      	ldr	r2, [pc, #20]	; (80052d8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	6013      	str	r3, [r2, #0]
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	0800dbd8 	.word	0x0800dbd8
 80052d8:	e000e010 	.word	0xe000e010

080052dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052e8:	f7fe fe0e 	bl	8003f08 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e204      	b.n	8005702 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a97      	ldr	r2, [pc, #604]	; (800555c <HAL_DMA_Init+0x280>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d04e      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a96      	ldr	r2, [pc, #600]	; (8005560 <HAL_DMA_Init+0x284>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d049      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a94      	ldr	r2, [pc, #592]	; (8005564 <HAL_DMA_Init+0x288>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d044      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a93      	ldr	r2, [pc, #588]	; (8005568 <HAL_DMA_Init+0x28c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d03f      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a91      	ldr	r2, [pc, #580]	; (800556c <HAL_DMA_Init+0x290>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d03a      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a90      	ldr	r2, [pc, #576]	; (8005570 <HAL_DMA_Init+0x294>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d035      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a8e      	ldr	r2, [pc, #568]	; (8005574 <HAL_DMA_Init+0x298>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d030      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a8d      	ldr	r2, [pc, #564]	; (8005578 <HAL_DMA_Init+0x29c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d02b      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a8b      	ldr	r2, [pc, #556]	; (800557c <HAL_DMA_Init+0x2a0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d026      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a8a      	ldr	r2, [pc, #552]	; (8005580 <HAL_DMA_Init+0x2a4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d021      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a88      	ldr	r2, [pc, #544]	; (8005584 <HAL_DMA_Init+0x2a8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d01c      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a87      	ldr	r2, [pc, #540]	; (8005588 <HAL_DMA_Init+0x2ac>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d017      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a85      	ldr	r2, [pc, #532]	; (800558c <HAL_DMA_Init+0x2b0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d012      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a84      	ldr	r2, [pc, #528]	; (8005590 <HAL_DMA_Init+0x2b4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00d      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a82      	ldr	r2, [pc, #520]	; (8005594 <HAL_DMA_Init+0x2b8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d008      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a81      	ldr	r2, [pc, #516]	; (8005598 <HAL_DMA_Init+0x2bc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <HAL_DMA_Init+0xc4>
 8005398:	21b8      	movs	r1, #184	; 0xb8
 800539a:	4880      	ldr	r0, [pc, #512]	; (800559c <HAL_DMA_Init+0x2c0>)
 800539c:	f7fd fc5b 	bl	8002c56 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d026      	beq.n	80053f6 <HAL_DMA_Init+0x11a>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053b0:	d021      	beq.n	80053f6 <HAL_DMA_Init+0x11a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053ba:	d01c      	beq.n	80053f6 <HAL_DMA_Init+0x11a>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80053c4:	d017      	beq.n	80053f6 <HAL_DMA_Init+0x11a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ce:	d012      	beq.n	80053f6 <HAL_DMA_Init+0x11a>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80053d8:	d00d      	beq.n	80053f6 <HAL_DMA_Init+0x11a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053e2:	d008      	beq.n	80053f6 <HAL_DMA_Init+0x11a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80053ec:	d003      	beq.n	80053f6 <HAL_DMA_Init+0x11a>
 80053ee:	21b9      	movs	r1, #185	; 0xb9
 80053f0:	486a      	ldr	r0, [pc, #424]	; (800559c <HAL_DMA_Init+0x2c0>)
 80053f2:	f7fd fc30 	bl	8002c56 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HAL_DMA_Init+0x13a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b40      	cmp	r3, #64	; 0x40
 8005404:	d007      	beq.n	8005416 <HAL_DMA_Init+0x13a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d003      	beq.n	8005416 <HAL_DMA_Init+0x13a>
 800540e:	21ba      	movs	r1, #186	; 0xba
 8005410:	4862      	ldr	r0, [pc, #392]	; (800559c <HAL_DMA_Init+0x2c0>)
 8005412:	f7fd fc20 	bl	8002c56 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541e:	d007      	beq.n	8005430 <HAL_DMA_Init+0x154>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_DMA_Init+0x154>
 8005428:	21bb      	movs	r1, #187	; 0xbb
 800542a:	485c      	ldr	r0, [pc, #368]	; (800559c <HAL_DMA_Init+0x2c0>)
 800542c:	f7fd fc13 	bl	8002c56 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005438:	d007      	beq.n	800544a <HAL_DMA_Init+0x16e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_DMA_Init+0x16e>
 8005442:	21bc      	movs	r1, #188	; 0xbc
 8005444:	4855      	ldr	r0, [pc, #340]	; (800559c <HAL_DMA_Init+0x2c0>)
 8005446:	f7fd fc06 	bl	8002c56 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <HAL_DMA_Init+0x192>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545a:	d008      	beq.n	800546e <HAL_DMA_Init+0x192>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005464:	d003      	beq.n	800546e <HAL_DMA_Init+0x192>
 8005466:	21bd      	movs	r1, #189	; 0xbd
 8005468:	484c      	ldr	r0, [pc, #304]	; (800559c <HAL_DMA_Init+0x2c0>)
 800546a:	f7fd fbf4 	bl	8002c56 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00d      	beq.n	8005492 <HAL_DMA_Init+0x1b6>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547e:	d008      	beq.n	8005492 <HAL_DMA_Init+0x1b6>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005488:	d003      	beq.n	8005492 <HAL_DMA_Init+0x1b6>
 800548a:	21be      	movs	r1, #190	; 0xbe
 800548c:	4843      	ldr	r0, [pc, #268]	; (800559c <HAL_DMA_Init+0x2c0>)
 800548e:	f7fd fbe2 	bl	8002c56 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00c      	beq.n	80054b4 <HAL_DMA_Init+0x1d8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a2:	d007      	beq.n	80054b4 <HAL_DMA_Init+0x1d8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d003      	beq.n	80054b4 <HAL_DMA_Init+0x1d8>
 80054ac:	21bf      	movs	r1, #191	; 0xbf
 80054ae:	483b      	ldr	r0, [pc, #236]	; (800559c <HAL_DMA_Init+0x2c0>)
 80054b0:	f7fd fbd1 	bl	8002c56 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d012      	beq.n	80054e2 <HAL_DMA_Init+0x206>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c4:	d00d      	beq.n	80054e2 <HAL_DMA_Init+0x206>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ce:	d008      	beq.n	80054e2 <HAL_DMA_Init+0x206>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054d8:	d003      	beq.n	80054e2 <HAL_DMA_Init+0x206>
 80054da:	21c0      	movs	r1, #192	; 0xc0
 80054dc:	482f      	ldr	r0, [pc, #188]	; (800559c <HAL_DMA_Init+0x2c0>)
 80054de:	f7fd fbba 	bl	8002c56 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <HAL_DMA_Init+0x21e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d003      	beq.n	80054fa <HAL_DMA_Init+0x21e>
 80054f2:	21c1      	movs	r1, #193	; 0xc1
 80054f4:	4829      	ldr	r0, [pc, #164]	; (800559c <HAL_DMA_Init+0x2c0>)
 80054f6:	f7fd fbae 	bl	8002c56 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d065      	beq.n	80055ce <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00f      	beq.n	800552a <HAL_DMA_Init+0x24e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	2b01      	cmp	r3, #1
 8005510:	d00b      	beq.n	800552a <HAL_DMA_Init+0x24e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	2b02      	cmp	r3, #2
 8005518:	d007      	beq.n	800552a <HAL_DMA_Init+0x24e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	2b03      	cmp	r3, #3
 8005520:	d003      	beq.n	800552a <HAL_DMA_Init+0x24e>
 8005522:	21c6      	movs	r1, #198	; 0xc6
 8005524:	481d      	ldr	r0, [pc, #116]	; (800559c <HAL_DMA_Init+0x2c0>)
 8005526:	f7fd fb96 	bl	8002c56 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d036      	beq.n	80055a0 <HAL_DMA_Init+0x2c4>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800553a:	d031      	beq.n	80055a0 <HAL_DMA_Init+0x2c4>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005544:	d02c      	beq.n	80055a0 <HAL_DMA_Init+0x2c4>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800554e:	d027      	beq.n	80055a0 <HAL_DMA_Init+0x2c4>
 8005550:	21c7      	movs	r1, #199	; 0xc7
 8005552:	4812      	ldr	r0, [pc, #72]	; (800559c <HAL_DMA_Init+0x2c0>)
 8005554:	f7fd fb7f 	bl	8002c56 <assert_failed>
 8005558:	e022      	b.n	80055a0 <HAL_DMA_Init+0x2c4>
 800555a:	bf00      	nop
 800555c:	40026010 	.word	0x40026010
 8005560:	40026028 	.word	0x40026028
 8005564:	40026040 	.word	0x40026040
 8005568:	40026058 	.word	0x40026058
 800556c:	40026070 	.word	0x40026070
 8005570:	40026088 	.word	0x40026088
 8005574:	400260a0 	.word	0x400260a0
 8005578:	400260b8 	.word	0x400260b8
 800557c:	40026410 	.word	0x40026410
 8005580:	40026428 	.word	0x40026428
 8005584:	40026440 	.word	0x40026440
 8005588:	40026458 	.word	0x40026458
 800558c:	40026470 	.word	0x40026470
 8005590:	40026488 	.word	0x40026488
 8005594:	400264a0 	.word	0x400264a0
 8005598:	400264b8 	.word	0x400264b8
 800559c:	0800dc14 	.word	0x0800dc14
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d012      	beq.n	80055ce <HAL_DMA_Init+0x2f2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b0:	d00d      	beq.n	80055ce <HAL_DMA_Init+0x2f2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ba:	d008      	beq.n	80055ce <HAL_DMA_Init+0x2f2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055c4:	d003      	beq.n	80055ce <HAL_DMA_Init+0x2f2>
 80055c6:	21c8      	movs	r1, #200	; 0xc8
 80055c8:	4850      	ldr	r0, [pc, #320]	; (800570c <HAL_DMA_Init+0x430>)
 80055ca:	f7fd fb44 	bl	8002c56 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0201 	bic.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ee:	e00f      	b.n	8005610 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055f0:	f7fe fc8a 	bl	8003f08 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b05      	cmp	r3, #5
 80055fc:	d908      	bls.n	8005610 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2203      	movs	r2, #3
 8005608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e078      	b.n	8005702 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e8      	bne.n	80055f0 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4b39      	ldr	r3, [pc, #228]	; (8005710 <HAL_DMA_Init+0x434>)
 800562a:	4013      	ands	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800563c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	2b04      	cmp	r3, #4
 8005668:	d107      	bne.n	800567a <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	4313      	orrs	r3, r2
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f023 0307 	bic.w	r3, r3, #7
 8005690:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d117      	bne.n	80056d4 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00e      	beq.n	80056d4 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa80 	bl	8005bbc <DMA_CheckFifoParam>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2240      	movs	r2, #64	; 0x40
 80056c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056d0:	2301      	movs	r3, #1
 80056d2:	e016      	b.n	8005702 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fa37 	bl	8005b50 <DMA_CalcBaseAndBitshift>
 80056e2:	4603      	mov	r3, r0
 80056e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ea:	223f      	movs	r2, #63	; 0x3f
 80056ec:	409a      	lsls	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	0800dc14 	.word	0x0800dc14
 8005710:	f010803f 	.word	0xf010803f

08005714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_DMA_Start_IT+0x26>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d304      	bcc.n	8005744 <HAL_DMA_Start_IT+0x30>
 800573a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800573e:	4827      	ldr	r0, [pc, #156]	; (80057dc <HAL_DMA_Start_IT+0xc8>)
 8005740:	f7fd fa89 	bl	8002c56 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_DMA_Start_IT+0x3e>
 800574e:	2302      	movs	r3, #2
 8005750:	e040      	b.n	80057d4 <HAL_DMA_Start_IT+0xc0>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d12f      	bne.n	80057c6 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2202      	movs	r2, #2
 800576a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f9ba 	bl	8005af4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005784:	223f      	movs	r2, #63	; 0x3f
 8005786:	409a      	lsls	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0216 	orr.w	r2, r2, #22
 800579a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0208 	orr.w	r2, r2, #8
 80057b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e005      	b.n	80057d2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
 80057d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	0800dc14 	.word	0x0800dc14

080057e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057ec:	4b92      	ldr	r3, [pc, #584]	; (8005a38 <HAL_DMA_IRQHandler+0x258>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a92      	ldr	r2, [pc, #584]	; (8005a3c <HAL_DMA_IRQHandler+0x25c>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	0a9b      	lsrs	r3, r3, #10
 80057f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580a:	2208      	movs	r2, #8
 800580c:	409a      	lsls	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4013      	ands	r3, r2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01a      	beq.n	800584c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d013      	beq.n	800584c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0204 	bic.w	r2, r2, #4
 8005832:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005838:	2208      	movs	r2, #8
 800583a:	409a      	lsls	r2, r3
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005844:	f043 0201 	orr.w	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005850:	2201      	movs	r2, #1
 8005852:	409a      	lsls	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d012      	beq.n	8005882 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586e:	2201      	movs	r2, #1
 8005870:	409a      	lsls	r2, r3
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587a:	f043 0202 	orr.w	r2, r3, #2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005886:	2204      	movs	r2, #4
 8005888:	409a      	lsls	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4013      	ands	r3, r2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d012      	beq.n	80058b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00b      	beq.n	80058b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a4:	2204      	movs	r2, #4
 80058a6:	409a      	lsls	r2, r3
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b0:	f043 0204 	orr.w	r2, r3, #4
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058bc:	2210      	movs	r2, #16
 80058be:	409a      	lsls	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4013      	ands	r3, r2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d043      	beq.n	8005950 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d03c      	beq.n	8005950 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058da:	2210      	movs	r2, #16
 80058dc:	409a      	lsls	r2, r3
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d018      	beq.n	8005922 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d108      	bne.n	8005910 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d024      	beq.n	8005950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	4798      	blx	r3
 800590e:	e01f      	b.n	8005950 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01b      	beq.n	8005950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	4798      	blx	r3
 8005920:	e016      	b.n	8005950 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d107      	bne.n	8005940 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0208 	bic.w	r2, r2, #8
 800593e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005954:	2220      	movs	r2, #32
 8005956:	409a      	lsls	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 808e 	beq.w	8005a7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8086 	beq.w	8005a7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005976:	2220      	movs	r2, #32
 8005978:	409a      	lsls	r2, r3
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b05      	cmp	r3, #5
 8005988:	d136      	bne.n	80059f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0216 	bic.w	r2, r2, #22
 8005998:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d103      	bne.n	80059ba <HAL_DMA_IRQHandler+0x1da>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0208 	bic.w	r2, r2, #8
 80059c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ce:	223f      	movs	r2, #63	; 0x3f
 80059d0:	409a      	lsls	r2, r3
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d07d      	beq.n	8005aea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	4798      	blx	r3
        }
        return;
 80059f6:	e078      	b.n	8005aea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01c      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d108      	bne.n	8005a26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d030      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
 8005a24:	e02b      	b.n	8005a7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d027      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	4798      	blx	r3
 8005a36:	e022      	b.n	8005a7e <HAL_DMA_IRQHandler+0x29e>
 8005a38:	200001f0 	.word	0x200001f0
 8005a3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10f      	bne.n	8005a6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0210 	bic.w	r2, r2, #16
 8005a5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d032      	beq.n	8005aec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d022      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2205      	movs	r2, #5
 8005a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0201 	bic.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	3301      	adds	r3, #1
 8005aae:	60bb      	str	r3, [r7, #8]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d307      	bcc.n	8005ac6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f2      	bne.n	8005aaa <HAL_DMA_IRQHandler+0x2ca>
 8005ac4:	e000      	b.n	8005ac8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005ac6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
 8005ae8:	e000      	b.n	8005aec <HAL_DMA_IRQHandler+0x30c>
        return;
 8005aea:	bf00      	nop
    }
  }
}
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop

08005af4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d108      	bne.n	8005b34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b32:	e007      	b.n	8005b44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	3b10      	subs	r3, #16
 8005b60:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <DMA_CalcBaseAndBitshift+0x64>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	091b      	lsrs	r3, r3, #4
 8005b68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b6a:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <DMA_CalcBaseAndBitshift+0x68>)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d909      	bls.n	8005b92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	1d1a      	adds	r2, r3, #4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b90:	e007      	b.n	8005ba2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b9a:	f023 0303 	bic.w	r3, r3, #3
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	aaaaaaab 	.word	0xaaaaaaab
 8005bb8:	0800de64 	.word	0x0800de64

08005bbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d11f      	bne.n	8005c16 <DMA_CheckFifoParam+0x5a>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d856      	bhi.n	8005c8a <DMA_CheckFifoParam+0xce>
 8005bdc:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <DMA_CheckFifoParam+0x28>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005bf5 	.word	0x08005bf5
 8005be8:	08005c07 	.word	0x08005c07
 8005bec:	08005bf5 	.word	0x08005bf5
 8005bf0:	08005c8b 	.word	0x08005c8b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d046      	beq.n	8005c8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c04:	e043      	b.n	8005c8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c0e:	d140      	bne.n	8005c92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c14:	e03d      	b.n	8005c92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1e:	d121      	bne.n	8005c64 <DMA_CheckFifoParam+0xa8>
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d837      	bhi.n	8005c96 <DMA_CheckFifoParam+0xda>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <DMA_CheckFifoParam+0x70>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c3d 	.word	0x08005c3d
 8005c30:	08005c43 	.word	0x08005c43
 8005c34:	08005c3d 	.word	0x08005c3d
 8005c38:	08005c55 	.word	0x08005c55
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c40:	e030      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d025      	beq.n	8005c9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c52:	e022      	b.n	8005c9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c5c:	d11f      	bne.n	8005c9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c62:	e01c      	b.n	8005c9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d903      	bls.n	8005c72 <DMA_CheckFifoParam+0xb6>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d003      	beq.n	8005c78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c70:	e018      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
      break;
 8005c76:	e015      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00e      	beq.n	8005ca2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
      break;
 8005c88:	e00b      	b.n	8005ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8005c8a:	bf00      	nop
 8005c8c:	e00a      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8005c8e:	bf00      	nop
 8005c90:	e008      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8005c92:	bf00      	nop
 8005c94:	e006      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8005c96:	bf00      	nop
 8005c98:	e004      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e002      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c9e:	bf00      	nop
 8005ca0:	e000      	b.n	8005ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ca2:	bf00      	nop
    }
  } 
  
  return status; 
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop

08005cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a45      	ldr	r2, [pc, #276]	; (8005de4 <HAL_GPIO_Init+0x130>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d02b      	beq.n	8005d2a <HAL_GPIO_Init+0x76>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a44      	ldr	r2, [pc, #272]	; (8005de8 <HAL_GPIO_Init+0x134>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d027      	beq.n	8005d2a <HAL_GPIO_Init+0x76>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a43      	ldr	r2, [pc, #268]	; (8005dec <HAL_GPIO_Init+0x138>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d023      	beq.n	8005d2a <HAL_GPIO_Init+0x76>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a42      	ldr	r2, [pc, #264]	; (8005df0 <HAL_GPIO_Init+0x13c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d01f      	beq.n	8005d2a <HAL_GPIO_Init+0x76>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a41      	ldr	r2, [pc, #260]	; (8005df4 <HAL_GPIO_Init+0x140>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d01b      	beq.n	8005d2a <HAL_GPIO_Init+0x76>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a40      	ldr	r2, [pc, #256]	; (8005df8 <HAL_GPIO_Init+0x144>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d017      	beq.n	8005d2a <HAL_GPIO_Init+0x76>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a3f      	ldr	r2, [pc, #252]	; (8005dfc <HAL_GPIO_Init+0x148>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d013      	beq.n	8005d2a <HAL_GPIO_Init+0x76>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a3e      	ldr	r2, [pc, #248]	; (8005e00 <HAL_GPIO_Init+0x14c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00f      	beq.n	8005d2a <HAL_GPIO_Init+0x76>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a3d      	ldr	r2, [pc, #244]	; (8005e04 <HAL_GPIO_Init+0x150>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00b      	beq.n	8005d2a <HAL_GPIO_Init+0x76>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a3c      	ldr	r2, [pc, #240]	; (8005e08 <HAL_GPIO_Init+0x154>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d007      	beq.n	8005d2a <HAL_GPIO_Init+0x76>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a3b      	ldr	r2, [pc, #236]	; (8005e0c <HAL_GPIO_Init+0x158>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_Init+0x76>
 8005d22:	21b3      	movs	r1, #179	; 0xb3
 8005d24:	483a      	ldr	r0, [pc, #232]	; (8005e10 <HAL_GPIO_Init+0x15c>)
 8005d26:	f7fc ff96 	bl	8002c56 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <HAL_GPIO_Init+0x8c>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	0c1b      	lsrs	r3, r3, #16
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_GPIO_Init+0x94>
 8005d40:	21b4      	movs	r1, #180	; 0xb4
 8005d42:	4833      	ldr	r0, [pc, #204]	; (8005e10 <HAL_GPIO_Init+0x15c>)
 8005d44:	f7fc ff87 	bl	8002c56 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d035      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d031      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b11      	cmp	r3, #17
 8005d5e:	d02d      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d029      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2b12      	cmp	r3, #18
 8005d6e:	d025      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <HAL_GPIO_Init+0x160>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d020      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	4a26      	ldr	r2, [pc, #152]	; (8005e18 <HAL_GPIO_Init+0x164>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d01b      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	4a24      	ldr	r2, [pc, #144]	; (8005e1c <HAL_GPIO_Init+0x168>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d016      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	4a23      	ldr	r2, [pc, #140]	; (8005e20 <HAL_GPIO_Init+0x16c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d011      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	4a21      	ldr	r2, [pc, #132]	; (8005e24 <HAL_GPIO_Init+0x170>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00c      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4a20      	ldr	r2, [pc, #128]	; (8005e28 <HAL_GPIO_Init+0x174>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d007      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d003      	beq.n	8005dbc <HAL_GPIO_Init+0x108>
 8005db4:	21b5      	movs	r1, #181	; 0xb5
 8005db6:	4816      	ldr	r0, [pc, #88]	; (8005e10 <HAL_GPIO_Init+0x15c>)
 8005db8:	f7fc ff4d 	bl	8002c56 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <HAL_GPIO_Init+0x128>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d007      	beq.n	8005ddc <HAL_GPIO_Init+0x128>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d003      	beq.n	8005ddc <HAL_GPIO_Init+0x128>
 8005dd4:	21b6      	movs	r1, #182	; 0xb6
 8005dd6:	480e      	ldr	r0, [pc, #56]	; (8005e10 <HAL_GPIO_Init+0x15c>)
 8005dd8:	f7fc ff3d 	bl	8002c56 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e270      	b.n	80062c4 <HAL_GPIO_Init+0x610>
 8005de2:	bf00      	nop
 8005de4:	40020000 	.word	0x40020000
 8005de8:	40020400 	.word	0x40020400
 8005dec:	40020800 	.word	0x40020800
 8005df0:	40020c00 	.word	0x40020c00
 8005df4:	40021000 	.word	0x40021000
 8005df8:	40021400 	.word	0x40021400
 8005dfc:	40021800 	.word	0x40021800
 8005e00:	40021c00 	.word	0x40021c00
 8005e04:	40022000 	.word	0x40022000
 8005e08:	40022400 	.word	0x40022400
 8005e0c:	40022800 	.word	0x40022800
 8005e10:	0800dc4c 	.word	0x0800dc4c
 8005e14:	10110000 	.word	0x10110000
 8005e18:	10210000 	.word	0x10210000
 8005e1c:	10310000 	.word	0x10310000
 8005e20:	10120000 	.word	0x10120000
 8005e24:	10220000 	.word	0x10220000
 8005e28:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	f040 823a 	bne.w	80062be <HAL_GPIO_Init+0x60a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d00b      	beq.n	8005e6a <HAL_GPIO_Init+0x1b6>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d007      	beq.n	8005e6a <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e5e:	2b11      	cmp	r3, #17
 8005e60:	d003      	beq.n	8005e6a <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	2b12      	cmp	r3, #18
 8005e68:	d144      	bne.n	8005ef4 <HAL_GPIO_Init+0x240>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00f      	beq.n	8005e92 <HAL_GPIO_Init+0x1de>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d00b      	beq.n	8005e92 <HAL_GPIO_Init+0x1de>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d007      	beq.n	8005e92 <HAL_GPIO_Init+0x1de>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d003      	beq.n	8005e92 <HAL_GPIO_Init+0x1de>
 8005e8a:	21c8      	movs	r1, #200	; 0xc8
 8005e8c:	489a      	ldr	r0, [pc, #616]	; (80060f8 <HAL_GPIO_Init+0x444>)
 8005e8e:	f7fc fee2 	bl	8002c56 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ec8:	2201      	movs	r2, #1
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	091b      	lsrs	r3, r3, #4
 8005ede:	f003 0201 	and.w	r2, r3, #1
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	2203      	movs	r2, #3
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	43db      	mvns	r3, r3
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d004      	beq.n	8005f36 <HAL_GPIO_Init+0x282>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2b12      	cmp	r3, #18
 8005f32:	f040 80e3 	bne.w	80060fc <HAL_GPIO_Init+0x448>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80b6 	beq.w	80060ac <HAL_GPIO_Init+0x3f8>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b09      	cmp	r3, #9
 8005f46:	f000 80b1 	beq.w	80060ac <HAL_GPIO_Init+0x3f8>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 80ac 	beq.w	80060ac <HAL_GPIO_Init+0x3f8>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80a7 	beq.w	80060ac <HAL_GPIO_Init+0x3f8>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80a2 	beq.w	80060ac <HAL_GPIO_Init+0x3f8>
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 809d 	beq.w	80060ac <HAL_GPIO_Init+0x3f8>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	f000 8098 	beq.w	80060ac <HAL_GPIO_Init+0x3f8>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	f000 8093 	beq.w	80060ac <HAL_GPIO_Init+0x3f8>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	f000 808e 	beq.w	80060ac <HAL_GPIO_Init+0x3f8>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	f000 8089 	beq.w	80060ac <HAL_GPIO_Init+0x3f8>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	f000 8084 	beq.w	80060ac <HAL_GPIO_Init+0x3f8>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d07f      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d07b      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d077      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d073      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	d06f      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b05      	cmp	r3, #5
 8005fd2:	d06b      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b09      	cmp	r3, #9
 8005fda:	d067      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b06      	cmp	r3, #6
 8005fe2:	d063      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b09      	cmp	r3, #9
 8005fea:	d05f      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2b07      	cmp	r3, #7
 8005ff2:	d05b      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	2b07      	cmp	r3, #7
 8005ffa:	d057      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b07      	cmp	r3, #7
 8006002:	d053      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b08      	cmp	r3, #8
 800600a:	d04f      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b08      	cmp	r3, #8
 8006012:	d04b      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d047      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	2b09      	cmp	r3, #9
 8006022:	d043      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	2b09      	cmp	r3, #9
 800602a:	d03f      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	2b0a      	cmp	r3, #10
 8006032:	d03b      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b0a      	cmp	r3, #10
 800603a:	d037      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b0b      	cmp	r3, #11
 8006042:	d033      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b0c      	cmp	r3, #12
 800604a:	d02f      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b0c      	cmp	r3, #12
 8006052:	d02b      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b0d      	cmp	r3, #13
 800605a:	d027      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b0f      	cmp	r3, #15
 8006062:	d023      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	2b05      	cmp	r3, #5
 800606a:	d01f      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b05      	cmp	r3, #5
 8006072:	d01b      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b05      	cmp	r3, #5
 800607a:	d017      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b08      	cmp	r3, #8
 8006082:	d013      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d00f      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b0c      	cmp	r3, #12
 8006092:	d00b      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	2b06      	cmp	r3, #6
 800609a:	d007      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b0e      	cmp	r3, #14
 80060a2:	d003      	beq.n	80060ac <HAL_GPIO_Init+0x3f8>
 80060a4:	21e0      	movs	r1, #224	; 0xe0
 80060a6:	4814      	ldr	r0, [pc, #80]	; (80060f8 <HAL_GPIO_Init+0x444>)
 80060a8:	f7fc fdd5 	bl	8002c56 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	08da      	lsrs	r2, r3, #3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3208      	adds	r2, #8
 80060b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	220f      	movs	r2, #15
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	43db      	mvns	r3, r3
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4013      	ands	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	08da      	lsrs	r2, r3, #3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3208      	adds	r2, #8
 80060ee:	69b9      	ldr	r1, [r7, #24]
 80060f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80060f4:	e002      	b.n	80060fc <HAL_GPIO_Init+0x448>
 80060f6:	bf00      	nop
 80060f8:	0800dc4c 	.word	0x0800dc4c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	2203      	movs	r2, #3
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4013      	ands	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f003 0203 	and.w	r2, r3, #3
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4313      	orrs	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80c0 	beq.w	80062be <HAL_GPIO_Init+0x60a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	4b65      	ldr	r3, [pc, #404]	; (80062d8 <HAL_GPIO_Init+0x624>)
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	4a64      	ldr	r2, [pc, #400]	; (80062d8 <HAL_GPIO_Init+0x624>)
 8006148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800614c:	6453      	str	r3, [r2, #68]	; 0x44
 800614e:	4b62      	ldr	r3, [pc, #392]	; (80062d8 <HAL_GPIO_Init+0x624>)
 8006150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800615a:	4a60      	ldr	r2, [pc, #384]	; (80062dc <HAL_GPIO_Init+0x628>)
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	089b      	lsrs	r3, r3, #2
 8006160:	3302      	adds	r3, #2
 8006162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	220f      	movs	r2, #15
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a57      	ldr	r2, [pc, #348]	; (80062e0 <HAL_GPIO_Init+0x62c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d037      	beq.n	80061f6 <HAL_GPIO_Init+0x542>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a56      	ldr	r2, [pc, #344]	; (80062e4 <HAL_GPIO_Init+0x630>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d031      	beq.n	80061f2 <HAL_GPIO_Init+0x53e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a55      	ldr	r2, [pc, #340]	; (80062e8 <HAL_GPIO_Init+0x634>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d02b      	beq.n	80061ee <HAL_GPIO_Init+0x53a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a54      	ldr	r2, [pc, #336]	; (80062ec <HAL_GPIO_Init+0x638>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d025      	beq.n	80061ea <HAL_GPIO_Init+0x536>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a53      	ldr	r2, [pc, #332]	; (80062f0 <HAL_GPIO_Init+0x63c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d01f      	beq.n	80061e6 <HAL_GPIO_Init+0x532>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a52      	ldr	r2, [pc, #328]	; (80062f4 <HAL_GPIO_Init+0x640>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d019      	beq.n	80061e2 <HAL_GPIO_Init+0x52e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a51      	ldr	r2, [pc, #324]	; (80062f8 <HAL_GPIO_Init+0x644>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d013      	beq.n	80061de <HAL_GPIO_Init+0x52a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a50      	ldr	r2, [pc, #320]	; (80062fc <HAL_GPIO_Init+0x648>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00d      	beq.n	80061da <HAL_GPIO_Init+0x526>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a4f      	ldr	r2, [pc, #316]	; (8006300 <HAL_GPIO_Init+0x64c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d007      	beq.n	80061d6 <HAL_GPIO_Init+0x522>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a4e      	ldr	r2, [pc, #312]	; (8006304 <HAL_GPIO_Init+0x650>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d101      	bne.n	80061d2 <HAL_GPIO_Init+0x51e>
 80061ce:	2309      	movs	r3, #9
 80061d0:	e012      	b.n	80061f8 <HAL_GPIO_Init+0x544>
 80061d2:	230a      	movs	r3, #10
 80061d4:	e010      	b.n	80061f8 <HAL_GPIO_Init+0x544>
 80061d6:	2308      	movs	r3, #8
 80061d8:	e00e      	b.n	80061f8 <HAL_GPIO_Init+0x544>
 80061da:	2307      	movs	r3, #7
 80061dc:	e00c      	b.n	80061f8 <HAL_GPIO_Init+0x544>
 80061de:	2306      	movs	r3, #6
 80061e0:	e00a      	b.n	80061f8 <HAL_GPIO_Init+0x544>
 80061e2:	2305      	movs	r3, #5
 80061e4:	e008      	b.n	80061f8 <HAL_GPIO_Init+0x544>
 80061e6:	2304      	movs	r3, #4
 80061e8:	e006      	b.n	80061f8 <HAL_GPIO_Init+0x544>
 80061ea:	2303      	movs	r3, #3
 80061ec:	e004      	b.n	80061f8 <HAL_GPIO_Init+0x544>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e002      	b.n	80061f8 <HAL_GPIO_Init+0x544>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <HAL_GPIO_Init+0x544>
 80061f6:	2300      	movs	r3, #0
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	f002 0203 	and.w	r2, r2, #3
 80061fe:	0092      	lsls	r2, r2, #2
 8006200:	4093      	lsls	r3, r2
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4313      	orrs	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006208:	4934      	ldr	r1, [pc, #208]	; (80062dc <HAL_GPIO_Init+0x628>)
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	089b      	lsrs	r3, r3, #2
 800620e:	3302      	adds	r3, #2
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006216:	4b3c      	ldr	r3, [pc, #240]	; (8006308 <HAL_GPIO_Init+0x654>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	43db      	mvns	r3, r3
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	4013      	ands	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_GPIO_Init+0x586>
        {
          temp |= iocurrent;
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800623a:	4a33      	ldr	r2, [pc, #204]	; (8006308 <HAL_GPIO_Init+0x654>)
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006240:	4b31      	ldr	r3, [pc, #196]	; (8006308 <HAL_GPIO_Init+0x654>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	43db      	mvns	r3, r3
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	4013      	ands	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_GPIO_Init+0x5b0>
        {
          temp |= iocurrent;
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006264:	4a28      	ldr	r2, [pc, #160]	; (8006308 <HAL_GPIO_Init+0x654>)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800626a:	4b27      	ldr	r3, [pc, #156]	; (8006308 <HAL_GPIO_Init+0x654>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	43db      	mvns	r3, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4013      	ands	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_GPIO_Init+0x5da>
        {
          temp |= iocurrent;
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800628e:	4a1e      	ldr	r2, [pc, #120]	; (8006308 <HAL_GPIO_Init+0x654>)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006294:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <HAL_GPIO_Init+0x654>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	43db      	mvns	r3, r3
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	4013      	ands	r3, r2
 80062a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_GPIO_Init+0x604>
        {
          temp |= iocurrent;
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062b8:	4a13      	ldr	r2, [pc, #76]	; (8006308 <HAL_GPIO_Init+0x654>)
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	3301      	adds	r3, #1
 80062c2:	61fb      	str	r3, [r7, #28]
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	2b0f      	cmp	r3, #15
 80062c8:	f67f adb0 	bls.w	8005e2c <HAL_GPIO_Init+0x178>
      }
    }
  }
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	3720      	adds	r7, #32
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40023800 	.word	0x40023800
 80062dc:	40013800 	.word	0x40013800
 80062e0:	40020000 	.word	0x40020000
 80062e4:	40020400 	.word	0x40020400
 80062e8:	40020800 	.word	0x40020800
 80062ec:	40020c00 	.word	0x40020c00
 80062f0:	40021000 	.word	0x40021000
 80062f4:	40021400 	.word	0x40021400
 80062f8:	40021800 	.word	0x40021800
 80062fc:	40021c00 	.word	0x40021c00
 8006300:	40022000 	.word	0x40022000
 8006304:	40022400 	.word	0x40022400
 8006308:	40013c00 	.word	0x40013c00

0800630c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006318:	887b      	ldrh	r3, [r7, #2]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <HAL_GPIO_ReadPin+0x1c>
 800631e:	887b      	ldrh	r3, [r7, #2]
 8006320:	0c1b      	lsrs	r3, r3, #16
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <HAL_GPIO_ReadPin+0x26>
 8006328:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 800632c:	4809      	ldr	r0, [pc, #36]	; (8006354 <HAL_GPIO_ReadPin+0x48>)
 800632e:	f7fc fc92 	bl	8002c56 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	887b      	ldrh	r3, [r7, #2]
 8006338:	4013      	ands	r3, r2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
 8006342:	e001      	b.n	8006348 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006344:	2300      	movs	r3, #0
 8006346:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	0800dc4c 	.word	0x0800dc4c

08006358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	807b      	strh	r3, [r7, #2]
 8006364:	4613      	mov	r3, r2
 8006366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006368:	887b      	ldrh	r3, [r7, #2]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d004      	beq.n	8006378 <HAL_GPIO_WritePin+0x20>
 800636e:	887b      	ldrh	r3, [r7, #2]
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	041b      	lsls	r3, r3, #16
 8006374:	2b00      	cmp	r3, #0
 8006376:	d004      	beq.n	8006382 <HAL_GPIO_WritePin+0x2a>
 8006378:	f240 119f 	movw	r1, #415	; 0x19f
 800637c:	480e      	ldr	r0, [pc, #56]	; (80063b8 <HAL_GPIO_WritePin+0x60>)
 800637e:	f7fc fc6a 	bl	8002c56 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006382:	787b      	ldrb	r3, [r7, #1]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <HAL_GPIO_WritePin+0x40>
 8006388:	787b      	ldrb	r3, [r7, #1]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d004      	beq.n	8006398 <HAL_GPIO_WritePin+0x40>
 800638e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8006392:	4809      	ldr	r0, [pc, #36]	; (80063b8 <HAL_GPIO_WritePin+0x60>)
 8006394:	f7fc fc5f 	bl	8002c56 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006398:	787b      	ldrb	r3, [r7, #1]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800639e:	887a      	ldrh	r2, [r7, #2]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063a4:	e003      	b.n	80063ae <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063a6:	887b      	ldrh	r3, [r7, #2]
 80063a8:	041a      	lsls	r2, r3, #16
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	619a      	str	r2, [r3, #24]
}
 80063ae:	bf00      	nop
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	0800dc4c 	.word	0x0800dc4c

080063bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80063c6:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063c8:	695a      	ldr	r2, [r3, #20]
 80063ca:	88fb      	ldrh	r3, [r7, #6]
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d006      	beq.n	80063e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063d2:	4a05      	ldr	r2, [pc, #20]	; (80063e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fc fa54 	bl	8002888 <HAL_GPIO_EXTI_Callback>
  }
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40013c00 	.word	0x40013c00

080063ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e1be      	b.n	800677c <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a9f      	ldr	r2, [pc, #636]	; (8006680 <HAL_I2C_Init+0x294>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00e      	beq.n	8006426 <HAL_I2C_Init+0x3a>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a9d      	ldr	r2, [pc, #628]	; (8006684 <HAL_I2C_Init+0x298>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d009      	beq.n	8006426 <HAL_I2C_Init+0x3a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a9c      	ldr	r2, [pc, #624]	; (8006688 <HAL_I2C_Init+0x29c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d004      	beq.n	8006426 <HAL_I2C_Init+0x3a>
 800641c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8006420:	489a      	ldr	r0, [pc, #616]	; (800668c <HAL_I2C_Init+0x2a0>)
 8006422:	f7fc fc18 	bl	8002c56 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <HAL_I2C_Init+0x4c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4a97      	ldr	r2, [pc, #604]	; (8006690 <HAL_I2C_Init+0x2a4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d904      	bls.n	8006442 <HAL_I2C_Init+0x56>
 8006438:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800643c:	4893      	ldr	r0, [pc, #588]	; (800668c <HAL_I2C_Init+0x2a0>)
 800643e:	f7fc fc0a 	bl	8002c56 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <HAL_I2C_Init+0x72>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006452:	d004      	beq.n	800645e <HAL_I2C_Init+0x72>
 8006454:	f240 11c1 	movw	r1, #449	; 0x1c1
 8006458:	488c      	ldr	r0, [pc, #560]	; (800668c <HAL_I2C_Init+0x2a0>)
 800645a:	f7fc fbfc 	bl	8002c56 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d004      	beq.n	8006478 <HAL_I2C_Init+0x8c>
 800646e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8006472:	4886      	ldr	r0, [pc, #536]	; (800668c <HAL_I2C_Init+0x2a0>)
 8006474:	f7fc fbef 	bl	8002c56 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006480:	d009      	beq.n	8006496 <HAL_I2C_Init+0xaa>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800648a:	d004      	beq.n	8006496 <HAL_I2C_Init+0xaa>
 800648c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006490:	487e      	ldr	r0, [pc, #504]	; (800668c <HAL_I2C_Init+0x2a0>)
 8006492:	f7fc fbe0 	bl	8002c56 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d008      	beq.n	80064b0 <HAL_I2C_Init+0xc4>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d004      	beq.n	80064b0 <HAL_I2C_Init+0xc4>
 80064a6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80064aa:	4878      	ldr	r0, [pc, #480]	; (800668c <HAL_I2C_Init+0x2a0>)
 80064ac:	f7fc fbd3 	bl	8002c56 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d004      	beq.n	80064c6 <HAL_I2C_Init+0xda>
 80064bc:	f240 11c5 	movw	r1, #453	; 0x1c5
 80064c0:	4872      	ldr	r0, [pc, #456]	; (800668c <HAL_I2C_Init+0x2a0>)
 80064c2:	f7fc fbc8 	bl	8002c56 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d008      	beq.n	80064e0 <HAL_I2C_Init+0xf4>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d004      	beq.n	80064e0 <HAL_I2C_Init+0xf4>
 80064d6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80064da:	486c      	ldr	r0, [pc, #432]	; (800668c <HAL_I2C_Init+0x2a0>)
 80064dc:	f7fc fbbb 	bl	8002c56 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_I2C_Init+0x10e>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	2b80      	cmp	r3, #128	; 0x80
 80064ee:	d004      	beq.n	80064fa <HAL_I2C_Init+0x10e>
 80064f0:	f240 11c7 	movw	r1, #455	; 0x1c7
 80064f4:	4865      	ldr	r0, [pc, #404]	; (800668c <HAL_I2C_Init+0x2a0>)
 80064f6:	f7fc fbae 	bl	8002c56 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fb fc80 	bl	8001e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2224      	movs	r2, #36	; 0x24
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800653a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800654a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800654c:	f001 fe70 	bl	8008230 <HAL_RCC_GetPCLK1Freq>
 8006550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	4a4f      	ldr	r2, [pc, #316]	; (8006694 <HAL_I2C_Init+0x2a8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d807      	bhi.n	800656c <HAL_I2C_Init+0x180>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4a4e      	ldr	r2, [pc, #312]	; (8006698 <HAL_I2C_Init+0x2ac>)
 8006560:	4293      	cmp	r3, r2
 8006562:	bf94      	ite	ls
 8006564:	2301      	movls	r3, #1
 8006566:	2300      	movhi	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	e006      	b.n	800657a <HAL_I2C_Init+0x18e>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4a4b      	ldr	r2, [pc, #300]	; (800669c <HAL_I2C_Init+0x2b0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	bf94      	ite	ls
 8006574:	2301      	movls	r3, #1
 8006576:	2300      	movhi	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e0fc      	b.n	800677c <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4a46      	ldr	r2, [pc, #280]	; (80066a0 <HAL_I2C_Init+0x2b4>)
 8006586:	fba2 2303 	umull	r2, r3, r2, r3
 800658a:	0c9b      	lsrs	r3, r3, #18
 800658c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	4a38      	ldr	r2, [pc, #224]	; (8006694 <HAL_I2C_Init+0x2a8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d802      	bhi.n	80065bc <HAL_I2C_Init+0x1d0>
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	3301      	adds	r3, #1
 80065ba:	e009      	b.n	80065d0 <HAL_I2C_Init+0x1e4>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	4a37      	ldr	r2, [pc, #220]	; (80066a4 <HAL_I2C_Init+0x2b8>)
 80065c8:	fba2 2303 	umull	r2, r3, r2, r3
 80065cc:	099b      	lsrs	r3, r3, #6
 80065ce:	3301      	adds	r3, #1
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	492a      	ldr	r1, [pc, #168]	; (8006694 <HAL_I2C_Init+0x2a8>)
 80065ec:	428b      	cmp	r3, r1
 80065ee:	d819      	bhi.n	8006624 <HAL_I2C_Init+0x238>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	1e59      	subs	r1, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80065fe:	1c59      	adds	r1, r3, #1
 8006600:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006604:	400b      	ands	r3, r1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <HAL_I2C_Init+0x234>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1e59      	subs	r1, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	fbb1 f3f3 	udiv	r3, r1, r3
 8006618:	3301      	adds	r3, #1
 800661a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800661e:	e066      	b.n	80066ee <HAL_I2C_Init+0x302>
 8006620:	2304      	movs	r3, #4
 8006622:	e064      	b.n	80066ee <HAL_I2C_Init+0x302>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d111      	bne.n	8006650 <HAL_I2C_Init+0x264>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	1e58      	subs	r0, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6859      	ldr	r1, [r3, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	440b      	add	r3, r1
 800663a:	fbb0 f3f3 	udiv	r3, r0, r3
 800663e:	3301      	adds	r3, #1
 8006640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006644:	2b00      	cmp	r3, #0
 8006646:	bf0c      	ite	eq
 8006648:	2301      	moveq	r3, #1
 800664a:	2300      	movne	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	e012      	b.n	8006676 <HAL_I2C_Init+0x28a>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	1e58      	subs	r0, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6859      	ldr	r1, [r3, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	0099      	lsls	r1, r3, #2
 8006660:	440b      	add	r3, r1
 8006662:	fbb0 f3f3 	udiv	r3, r0, r3
 8006666:	3301      	adds	r3, #1
 8006668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800666c:	2b00      	cmp	r3, #0
 800666e:	bf0c      	ite	eq
 8006670:	2301      	moveq	r3, #1
 8006672:	2300      	movne	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d016      	beq.n	80066a8 <HAL_I2C_Init+0x2bc>
 800667a:	2301      	movs	r3, #1
 800667c:	e037      	b.n	80066ee <HAL_I2C_Init+0x302>
 800667e:	bf00      	nop
 8006680:	40005400 	.word	0x40005400
 8006684:	40005800 	.word	0x40005800
 8006688:	40005c00 	.word	0x40005c00
 800668c:	0800dc88 	.word	0x0800dc88
 8006690:	00061a80 	.word	0x00061a80
 8006694:	000186a0 	.word	0x000186a0
 8006698:	001e847f 	.word	0x001e847f
 800669c:	003d08ff 	.word	0x003d08ff
 80066a0:	431bde83 	.word	0x431bde83
 80066a4:	10624dd3 	.word	0x10624dd3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10e      	bne.n	80066ce <HAL_I2C_Init+0x2e2>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	1e58      	subs	r0, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6859      	ldr	r1, [r3, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	440b      	add	r3, r1
 80066be:	fbb0 f3f3 	udiv	r3, r0, r3
 80066c2:	3301      	adds	r3, #1
 80066c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066cc:	e00f      	b.n	80066ee <HAL_I2C_Init+0x302>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1e58      	subs	r0, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6859      	ldr	r1, [r3, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	440b      	add	r3, r1
 80066dc:	0099      	lsls	r1, r3, #2
 80066de:	440b      	add	r3, r1
 80066e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80066e4:	3301      	adds	r3, #1
 80066e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	6809      	ldr	r1, [r1, #0]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800671c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6911      	ldr	r1, [r2, #16]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	68d2      	ldr	r2, [r2, #12]
 8006728:	4311      	orrs	r1, r2
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6812      	ldr	r2, [r2, #0]
 800672e:	430b      	orrs	r3, r1
 8006730:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695a      	ldr	r2, [r3, #20]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0201 	orr.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	4608      	mov	r0, r1
 800678e:	4611      	mov	r1, r2
 8006790:	461a      	mov	r2, r3
 8006792:	4603      	mov	r3, r0
 8006794:	817b      	strh	r3, [r7, #10]
 8006796:	460b      	mov	r3, r1
 8006798:	813b      	strh	r3, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800679e:	f7fd fbb3 	bl	8003f08 <HAL_GetTick>
 80067a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80067a4:	88fb      	ldrh	r3, [r7, #6]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d007      	beq.n	80067ba <HAL_I2C_Mem_Write+0x36>
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d004      	beq.n	80067ba <HAL_I2C_Mem_Write+0x36>
 80067b0:	f640 1175 	movw	r1, #2421	; 0x975
 80067b4:	4873      	ldr	r0, [pc, #460]	; (8006984 <HAL_I2C_Mem_Write+0x200>)
 80067b6:	f7fc fa4e 	bl	8002c56 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	f040 80d9 	bne.w	800697a <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	2319      	movs	r3, #25
 80067ce:	2201      	movs	r2, #1
 80067d0:	496d      	ldr	r1, [pc, #436]	; (8006988 <HAL_I2C_Mem_Write+0x204>)
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fc8c 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 80067de:	2302      	movs	r3, #2
 80067e0:	e0cc      	b.n	800697c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_I2C_Mem_Write+0x6c>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e0c5      	b.n	800697c <HAL_I2C_Mem_Write+0x1f8>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b01      	cmp	r3, #1
 8006804:	d007      	beq.n	8006816 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006824:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2221      	movs	r2, #33	; 0x21
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2240      	movs	r2, #64	; 0x40
 8006832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a3a      	ldr	r2, [r7, #32]
 8006840:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006846:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4a4d      	ldr	r2, [pc, #308]	; (800698c <HAL_I2C_Mem_Write+0x208>)
 8006856:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006858:	88f8      	ldrh	r0, [r7, #6]
 800685a:	893a      	ldrh	r2, [r7, #8]
 800685c:	8979      	ldrh	r1, [r7, #10]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	4603      	mov	r3, r0
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 fac3 	bl	8006df4 <I2C_RequestMemoryWrite>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d052      	beq.n	800691a <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e081      	b.n	800697c <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 fd0d 	bl	800729c <I2C_WaitOnTXEFlagUntilTimeout>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00d      	beq.n	80068a4 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	2b04      	cmp	r3, #4
 800688e:	d107      	bne.n	80068a0 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800689e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e06b      	b.n	800697c <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d11b      	bne.n	800691a <HAL_I2C_Mem_Write+0x196>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d017      	beq.n	800691a <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	781a      	ldrb	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1aa      	bne.n	8006878 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 fcf9 	bl	800731e <I2C_WaitOnBTFFlagUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00d      	beq.n	800694e <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	2b04      	cmp	r3, #4
 8006938:	d107      	bne.n	800694a <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006948:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e016      	b.n	800697c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e000      	b.n	800697c <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 800697a:	2302      	movs	r3, #2
  }
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	0800dc88 	.word	0x0800dc88
 8006988:	00100002 	.word	0x00100002
 800698c:	ffff0000 	.word	0xffff0000

08006990 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08c      	sub	sp, #48	; 0x30
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	4608      	mov	r0, r1
 800699a:	4611      	mov	r1, r2
 800699c:	461a      	mov	r2, r3
 800699e:	4603      	mov	r3, r0
 80069a0:	817b      	strh	r3, [r7, #10]
 80069a2:	460b      	mov	r3, r1
 80069a4:	813b      	strh	r3, [r7, #8]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069aa:	f7fd faad 	bl	8003f08 <HAL_GetTick>
 80069ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80069b0:	88fb      	ldrh	r3, [r7, #6]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d007      	beq.n	80069c6 <HAL_I2C_Mem_Read+0x36>
 80069b6:	88fb      	ldrh	r3, [r7, #6]
 80069b8:	2b10      	cmp	r3, #16
 80069ba:	d004      	beq.n	80069c6 <HAL_I2C_Mem_Read+0x36>
 80069bc:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 80069c0:	4881      	ldr	r0, [pc, #516]	; (8006bc8 <HAL_I2C_Mem_Read+0x238>)
 80069c2:	f7fc f948 	bl	8002c56 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	f040 8209 	bne.w	8006de6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	2319      	movs	r3, #25
 80069da:	2201      	movs	r2, #1
 80069dc:	497b      	ldr	r1, [pc, #492]	; (8006bcc <HAL_I2C_Mem_Read+0x23c>)
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fb86 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 80069ea:	2302      	movs	r3, #2
 80069ec:	e1fc      	b.n	8006de8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_I2C_Mem_Read+0x6c>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e1f5      	b.n	8006de8 <HAL_I2C_Mem_Read+0x458>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d007      	beq.n	8006a22 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0201 	orr.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a30:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2222      	movs	r2, #34	; 0x22
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2240      	movs	r2, #64	; 0x40
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a5b      	ldr	r2, [pc, #364]	; (8006bd0 <HAL_I2C_Mem_Read+0x240>)
 8006a62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a64:	88f8      	ldrh	r0, [r7, #6]
 8006a66:	893a      	ldrh	r2, [r7, #8]
 8006a68:	8979      	ldrh	r1, [r7, #10]
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	4603      	mov	r3, r0
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 fa53 	bl	8006f20 <I2C_RequestMemoryRead>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e1b1      	b.n	8006de8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d113      	bne.n	8006ab4 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	623b      	str	r3, [r7, #32]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	623b      	str	r3, [r7, #32]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	623b      	str	r3, [r7, #32]
 8006aa0:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	e185      	b.n	8006dc0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d11b      	bne.n	8006af4 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aca:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006acc:	2300      	movs	r3, #0
 8006ace:	61fb      	str	r3, [r7, #28]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e165      	b.n	8006dc0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d11b      	bne.n	8006b34 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b0a:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b1a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	61bb      	str	r3, [r7, #24]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	e145      	b.n	8006dc0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b4a:	e139      	b.n	8006dc0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	f200 80f2 	bhi.w	8006d3a <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d123      	bne.n	8006ba6 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 fc1c 	bl	80073a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e13a      	b.n	8006de8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	691a      	ldr	r2, [r3, #16]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ba4:	e10c      	b.n	8006dc0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d14f      	bne.n	8006c4e <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4907      	ldr	r1, [pc, #28]	; (8006bd4 <HAL_I2C_Mem_Read+0x244>)
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fa99 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d009      	beq.n	8006bd8 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e10f      	b.n	8006de8 <HAL_I2C_Mem_Read+0x458>
 8006bc8:	0800dc88 	.word	0x0800dc88
 8006bcc:	00100002 	.word	0x00100002
 8006bd0:	ffff0000 	.word	0xffff0000
 8006bd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c4c:	e0b8      	b.n	8006dc0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	2200      	movs	r2, #0
 8006c56:	4966      	ldr	r1, [pc, #408]	; (8006df0 <HAL_I2C_Mem_Read+0x460>)
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fa49 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0bf      	b.n	8006de8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691a      	ldr	r2, [r3, #16]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	494f      	ldr	r1, [pc, #316]	; (8006df0 <HAL_I2C_Mem_Read+0x460>)
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fa1b 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e091      	b.n	8006de8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	691a      	ldr	r2, [r3, #16]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d38:	e042      	b.n	8006dc0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fb2e 	bl	80073a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e04c      	b.n	8006de8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	b2d2      	uxtb	r2, r2
 8006d5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d118      	bne.n	8006dc0 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f47f aec1 	bne.w	8006b4c <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	e000      	b.n	8006de8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006de6:	2302      	movs	r3, #2
  }
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3728      	adds	r7, #40	; 0x28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	00010004 	.word	0x00010004

08006df4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	4611      	mov	r1, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	817b      	strh	r3, [r7, #10]
 8006e06:	460b      	mov	r3, r1
 8006e08:	813b      	strh	r3, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 f960 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00d      	beq.n	8006e52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e44:	d103      	bne.n	8006e4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e05f      	b.n	8006f12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e52:	897b      	ldrh	r3, [r7, #10]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	6a3a      	ldr	r2, [r7, #32]
 8006e66:	492d      	ldr	r1, [pc, #180]	; (8006f1c <I2C_RequestMemoryWrite+0x128>)
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f998 	bl	800719e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e04c      	b.n	8006f12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e78:	2300      	movs	r3, #0
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e90:	6a39      	ldr	r1, [r7, #32]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fa02 	bl	800729c <I2C_WaitOnTXEFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00d      	beq.n	8006eba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d107      	bne.n	8006eb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e02b      	b.n	8006f12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d105      	bne.n	8006ecc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ec0:	893b      	ldrh	r3, [r7, #8]
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	611a      	str	r2, [r3, #16]
 8006eca:	e021      	b.n	8006f10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ecc:	893b      	ldrh	r3, [r7, #8]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006edc:	6a39      	ldr	r1, [r7, #32]
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f9dc 	bl	800729c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00d      	beq.n	8006f06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d107      	bne.n	8006f02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e005      	b.n	8006f12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f06:	893b      	ldrh	r3, [r7, #8]
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	00010002 	.word	0x00010002

08006f20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af02      	add	r7, sp, #8
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	4608      	mov	r0, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	817b      	strh	r3, [r7, #10]
 8006f32:	460b      	mov	r3, r1
 8006f34:	813b      	strh	r3, [r7, #8]
 8006f36:	4613      	mov	r3, r2
 8006f38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f8c2 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00d      	beq.n	8006f8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f80:	d103      	bne.n	8006f8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e0aa      	b.n	80070e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f8e:	897b      	ldrh	r3, [r7, #10]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	6a3a      	ldr	r2, [r7, #32]
 8006fa2:	4952      	ldr	r1, [pc, #328]	; (80070ec <I2C_RequestMemoryRead+0x1cc>)
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f8fa 	bl	800719e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e097      	b.n	80070e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fcc:	6a39      	ldr	r1, [r7, #32]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 f964 	bl	800729c <I2C_WaitOnTXEFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00d      	beq.n	8006ff6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d107      	bne.n	8006ff2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ff0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e076      	b.n	80070e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d105      	bne.n	8007008 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ffc:	893b      	ldrh	r3, [r7, #8]
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	611a      	str	r2, [r3, #16]
 8007006:	e021      	b.n	800704c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007008:	893b      	ldrh	r3, [r7, #8]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	b29b      	uxth	r3, r3
 800700e:	b2da      	uxtb	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007018:	6a39      	ldr	r1, [r7, #32]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f93e 	bl	800729c <I2C_WaitOnTXEFlagUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00d      	beq.n	8007042 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	2b04      	cmp	r3, #4
 800702c:	d107      	bne.n	800703e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800703c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e050      	b.n	80070e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007042:	893b      	ldrh	r3, [r7, #8]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800704c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800704e:	6a39      	ldr	r1, [r7, #32]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f923 	bl	800729c <I2C_WaitOnTXEFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00d      	beq.n	8007078 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	2b04      	cmp	r3, #4
 8007062:	d107      	bne.n	8007074 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007072:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e035      	b.n	80070e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007086:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	2200      	movs	r2, #0
 8007090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f82b 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00d      	beq.n	80070bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ae:	d103      	bne.n	80070b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e013      	b.n	80070e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070bc:	897b      	ldrh	r3, [r7, #10]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	f043 0301 	orr.w	r3, r3, #1
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	6a3a      	ldr	r2, [r7, #32]
 80070d0:	4906      	ldr	r1, [pc, #24]	; (80070ec <I2C_RequestMemoryRead+0x1cc>)
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f863 	bl	800719e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	00010002 	.word	0x00010002

080070f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007100:	e025      	b.n	800714e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007108:	d021      	beq.n	800714e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800710a:	f7fc fefd 	bl	8003f08 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d302      	bcc.n	8007120 <I2C_WaitOnFlagUntilTimeout+0x30>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d116      	bne.n	800714e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2220      	movs	r2, #32
 800712a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f043 0220 	orr.w	r2, r3, #32
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e023      	b.n	8007196 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	0c1b      	lsrs	r3, r3, #16
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b01      	cmp	r3, #1
 8007156:	d10d      	bne.n	8007174 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	43da      	mvns	r2, r3
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	4013      	ands	r3, r2
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	bf0c      	ite	eq
 800716a:	2301      	moveq	r3, #1
 800716c:	2300      	movne	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	e00c      	b.n	800718e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	43da      	mvns	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4013      	ands	r3, r2
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	bf0c      	ite	eq
 8007186:	2301      	moveq	r3, #1
 8007188:	2300      	movne	r3, #0
 800718a:	b2db      	uxtb	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	429a      	cmp	r2, r3
 8007192:	d0b6      	beq.n	8007102 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
 80071aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071ac:	e051      	b.n	8007252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071bc:	d123      	bne.n	8007206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f043 0204 	orr.w	r2, r3, #4
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e046      	b.n	8007294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800720c:	d021      	beq.n	8007252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800720e:	f7fc fe7b 	bl	8003f08 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	429a      	cmp	r2, r3
 800721c:	d302      	bcc.n	8007224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d116      	bne.n	8007252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2220      	movs	r2, #32
 800722e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f043 0220 	orr.w	r2, r3, #32
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e020      	b.n	8007294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	0c1b      	lsrs	r3, r3, #16
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b01      	cmp	r3, #1
 800725a:	d10c      	bne.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	43da      	mvns	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4013      	ands	r3, r2
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	bf14      	ite	ne
 800726e:	2301      	movne	r3, #1
 8007270:	2300      	moveq	r3, #0
 8007272:	b2db      	uxtb	r3, r3
 8007274:	e00b      	b.n	800728e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	43da      	mvns	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	4013      	ands	r3, r2
 8007282:	b29b      	uxth	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d18d      	bne.n	80071ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072a8:	e02d      	b.n	8007306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 f8ce 	bl	800744c <I2C_IsAcknowledgeFailed>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e02d      	b.n	8007316 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c0:	d021      	beq.n	8007306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c2:	f7fc fe21 	bl	8003f08 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d302      	bcc.n	80072d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d116      	bne.n	8007306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f043 0220 	orr.w	r2, r3, #32
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e007      	b.n	8007316 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007310:	2b80      	cmp	r3, #128	; 0x80
 8007312:	d1ca      	bne.n	80072aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800732a:	e02d      	b.n	8007388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f88d 	bl	800744c <I2C_IsAcknowledgeFailed>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e02d      	b.n	8007398 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007342:	d021      	beq.n	8007388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007344:	f7fc fde0 	bl	8003f08 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	429a      	cmp	r2, r3
 8007352:	d302      	bcc.n	800735a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d116      	bne.n	8007388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	f043 0220 	orr.w	r2, r3, #32
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e007      	b.n	8007398 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b04      	cmp	r3, #4
 8007394:	d1ca      	bne.n	800732c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073ac:	e042      	b.n	8007434 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d119      	bne.n	80073f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0210 	mvn.w	r2, #16
 80073c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e029      	b.n	8007444 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f0:	f7fc fd8a 	bl	8003f08 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d302      	bcc.n	8007406 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d116      	bne.n	8007434 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	f043 0220 	orr.w	r2, r3, #32
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e007      	b.n	8007444 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	d1b5      	bne.n	80073ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800745e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007462:	d11b      	bne.n	800749c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800746c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	f043 0204 	orr.w	r2, r3, #4
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e000      	b.n	800749e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
	...

080074ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a28      	ldr	r2, [pc, #160]	; (800755c <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00d      	beq.n	80074dc <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a26      	ldr	r2, [pc, #152]	; (8007560 <HAL_I2CEx_ConfigAnalogFilter+0xb4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d008      	beq.n	80074dc <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a25      	ldr	r2, [pc, #148]	; (8007564 <HAL_I2CEx_ConfigAnalogFilter+0xb8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80074d4:	215c      	movs	r1, #92	; 0x5c
 80074d6:	4824      	ldr	r0, [pc, #144]	; (8007568 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 80074d8:	f7fb fbbd 	bl	8002c56 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d006      	beq.n	80074f0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b10      	cmp	r3, #16
 80074e6:	d003      	beq.n	80074f0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80074e8:	215d      	movs	r1, #93	; 0x5d
 80074ea:	481f      	ldr	r0, [pc, #124]	; (8007568 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 80074ec:	f7fb fbb3 	bl	8002c56 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b20      	cmp	r3, #32
 80074fa:	d129      	bne.n	8007550 <HAL_I2CEx_ConfigAnalogFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2224      	movs	r2, #36	; 0x24
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0201 	bic.w	r2, r2, #1
 8007512:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0210 	bic.w	r2, r2, #16
 8007522:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f042 0201 	orr.w	r2, r2, #1
 8007542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	e000      	b.n	8007552 <HAL_I2CEx_ConfigAnalogFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007550:	2302      	movs	r3, #2
  }
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	40005400 	.word	0x40005400
 8007560:	40005800 	.word	0x40005800
 8007564:	40005c00 	.word	0x40005c00
 8007568:	0800dcc0 	.word	0x0800dcc0

0800756c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a27      	ldr	r2, [pc, #156]	; (800761c <HAL_I2CEx_ConfigDigitalFilter+0xb0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00d      	beq.n	80075a0 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a25      	ldr	r2, [pc, #148]	; (8007620 <HAL_I2CEx_ConfigDigitalFilter+0xb4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d008      	beq.n	80075a0 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a24      	ldr	r2, [pc, #144]	; (8007624 <HAL_I2CEx_ConfigDigitalFilter+0xb8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d003      	beq.n	80075a0 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007598:	2184      	movs	r1, #132	; 0x84
 800759a:	4823      	ldr	r0, [pc, #140]	; (8007628 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 800759c:	f7fb fb5b 	bl	8002c56 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b0f      	cmp	r3, #15
 80075a4:	d903      	bls.n	80075ae <HAL_I2CEx_ConfigDigitalFilter+0x42>
 80075a6:	2185      	movs	r1, #133	; 0x85
 80075a8:	481f      	ldr	r0, [pc, #124]	; (8007628 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 80075aa:	f7fb fb54 	bl	8002c56 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	d12a      	bne.n	8007610 <HAL_I2CEx_ConfigDigitalFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2224      	movs	r2, #36	; 0x24
 80075be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0201 	bic.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80075da:	89fb      	ldrh	r3, [r7, #14]
 80075dc:	f023 030f 	bic.w	r3, r3, #15
 80075e0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	89fb      	ldrh	r3, [r7, #14]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	89fa      	ldrh	r2, [r7, #14]
 80075f2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0201 	orr.w	r2, r2, #1
 8007602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	e000      	b.n	8007612 <HAL_I2CEx_ConfigDigitalFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007610:	2302      	movs	r3, #2
  }
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	40005400 	.word	0x40005400
 8007620:	40005800 	.word	0x40005800
 8007624:	40005c00 	.word	0x40005c00
 8007628:	0800dcc0 	.word	0x0800dcc0

0800762c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007636:	2300      	movs	r3, #0
 8007638:	603b      	str	r3, [r7, #0]
 800763a:	4b20      	ldr	r3, [pc, #128]	; (80076bc <HAL_PWREx_EnableOverDrive+0x90>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <HAL_PWREx_EnableOverDrive+0x90>)
 8007640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007644:	6413      	str	r3, [r2, #64]	; 0x40
 8007646:	4b1d      	ldr	r3, [pc, #116]	; (80076bc <HAL_PWREx_EnableOverDrive+0x90>)
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007652:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8007654:	2201      	movs	r2, #1
 8007656:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007658:	f7fc fc56 	bl	8003f08 <HAL_GetTick>
 800765c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800765e:	e009      	b.n	8007674 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007660:	f7fc fc52 	bl	8003f08 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800766e:	d901      	bls.n	8007674 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e01f      	b.n	80076b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007674:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800767c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007680:	d1ee      	bne.n	8007660 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007682:	4b11      	ldr	r3, [pc, #68]	; (80076c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007684:	2201      	movs	r2, #1
 8007686:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007688:	f7fc fc3e 	bl	8003f08 <HAL_GetTick>
 800768c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800768e:	e009      	b.n	80076a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007690:	f7fc fc3a 	bl	8003f08 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800769e:	d901      	bls.n	80076a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e007      	b.n	80076b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076a4:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076b0:	d1ee      	bne.n	8007690 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40023800 	.word	0x40023800
 80076c0:	420e0040 	.word	0x420e0040
 80076c4:	40007000 	.word	0x40007000
 80076c8:	420e0044 	.word	0x420e0044

080076cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e30d      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b0f      	cmp	r3, #15
 80076e4:	d903      	bls.n	80076ee <HAL_RCC_OscConfig+0x22>
 80076e6:	21e8      	movs	r1, #232	; 0xe8
 80076e8:	48a3      	ldr	r0, [pc, #652]	; (8007978 <HAL_RCC_OscConfig+0x2ac>)
 80076ea:	f7fb fab4 	bl	8002c56 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 8088 	beq.w	800780c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00d      	beq.n	8007720 <HAL_RCC_OscConfig+0x54>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800770c:	d008      	beq.n	8007720 <HAL_RCC_OscConfig+0x54>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007716:	d003      	beq.n	8007720 <HAL_RCC_OscConfig+0x54>
 8007718:	21ed      	movs	r1, #237	; 0xed
 800771a:	4897      	ldr	r0, [pc, #604]	; (8007978 <HAL_RCC_OscConfig+0x2ac>)
 800771c:	f7fb fa9b 	bl	8002c56 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007720:	4b96      	ldr	r3, [pc, #600]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f003 030c 	and.w	r3, r3, #12
 8007728:	2b04      	cmp	r3, #4
 800772a:	d00c      	beq.n	8007746 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800772c:	4b93      	ldr	r3, [pc, #588]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007734:	2b08      	cmp	r3, #8
 8007736:	d112      	bne.n	800775e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007738:	4b90      	ldr	r3, [pc, #576]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007744:	d10b      	bne.n	800775e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007746:	4b8d      	ldr	r3, [pc, #564]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d05b      	beq.n	800780a <HAL_RCC_OscConfig+0x13e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d157      	bne.n	800780a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e2cd      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007766:	d106      	bne.n	8007776 <HAL_RCC_OscConfig+0xaa>
 8007768:	4b84      	ldr	r3, [pc, #528]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a83      	ldr	r2, [pc, #524]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 800776e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	e01d      	b.n	80077b2 <HAL_RCC_OscConfig+0xe6>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800777e:	d10c      	bne.n	800779a <HAL_RCC_OscConfig+0xce>
 8007780:	4b7e      	ldr	r3, [pc, #504]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a7d      	ldr	r2, [pc, #500]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 8007786:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	4b7b      	ldr	r3, [pc, #492]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a7a      	ldr	r2, [pc, #488]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 8007792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	e00b      	b.n	80077b2 <HAL_RCC_OscConfig+0xe6>
 800779a:	4b78      	ldr	r3, [pc, #480]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a77      	ldr	r2, [pc, #476]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 80077a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	4b75      	ldr	r3, [pc, #468]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a74      	ldr	r2, [pc, #464]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 80077ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d013      	beq.n	80077e2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077ba:	f7fc fba5 	bl	8003f08 <HAL_GetTick>
 80077be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077c0:	e008      	b.n	80077d4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077c2:	f7fc fba1 	bl	8003f08 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b64      	cmp	r3, #100	; 0x64
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e292      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077d4:	4b69      	ldr	r3, [pc, #420]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0f0      	beq.n	80077c2 <HAL_RCC_OscConfig+0xf6>
 80077e0:	e014      	b.n	800780c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e2:	f7fc fb91 	bl	8003f08 <HAL_GetTick>
 80077e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077e8:	e008      	b.n	80077fc <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077ea:	f7fc fb8d 	bl	8003f08 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b64      	cmp	r3, #100	; 0x64
 80077f6:	d901      	bls.n	80077fc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e27e      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077fc:	4b5f      	ldr	r3, [pc, #380]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f0      	bne.n	80077ea <HAL_RCC_OscConfig+0x11e>
 8007808:	e000      	b.n	800780c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800780a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d079      	beq.n	800790c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d008      	beq.n	8007832 <HAL_RCC_OscConfig+0x166>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d004      	beq.n	8007832 <HAL_RCC_OscConfig+0x166>
 8007828:	f240 111f 	movw	r1, #287	; 0x11f
 800782c:	4852      	ldr	r0, [pc, #328]	; (8007978 <HAL_RCC_OscConfig+0x2ac>)
 800782e:	f7fb fa12 	bl	8002c56 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b1f      	cmp	r3, #31
 8007838:	d904      	bls.n	8007844 <HAL_RCC_OscConfig+0x178>
 800783a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800783e:	484e      	ldr	r0, [pc, #312]	; (8007978 <HAL_RCC_OscConfig+0x2ac>)
 8007840:	f7fb fa09 	bl	8002c56 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007844:	4b4d      	ldr	r3, [pc, #308]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 030c 	and.w	r3, r3, #12
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00b      	beq.n	8007868 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007850:	4b4a      	ldr	r3, [pc, #296]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007858:	2b08      	cmp	r3, #8
 800785a:	d11c      	bne.n	8007896 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800785c:	4b47      	ldr	r3, [pc, #284]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d116      	bne.n	8007896 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007868:	4b44      	ldr	r3, [pc, #272]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <HAL_RCC_OscConfig+0x1b4>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d001      	beq.n	8007880 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e23c      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007880:	4b3e      	ldr	r3, [pc, #248]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	493b      	ldr	r1, [pc, #236]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 8007890:	4313      	orrs	r3, r2
 8007892:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007894:	e03a      	b.n	800790c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d020      	beq.n	80078e0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800789e:	4b38      	ldr	r3, [pc, #224]	; (8007980 <HAL_RCC_OscConfig+0x2b4>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a4:	f7fc fb30 	bl	8003f08 <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078ac:	f7fc fb2c 	bl	8003f08 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e21d      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078be:	4b2f      	ldr	r3, [pc, #188]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0f0      	beq.n	80078ac <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ca:	4b2c      	ldr	r3, [pc, #176]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	4928      	ldr	r1, [pc, #160]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	600b      	str	r3, [r1, #0]
 80078de:	e015      	b.n	800790c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078e0:	4b27      	ldr	r3, [pc, #156]	; (8007980 <HAL_RCC_OscConfig+0x2b4>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e6:	f7fc fb0f 	bl	8003f08 <HAL_GetTick>
 80078ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ec:	e008      	b.n	8007900 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078ee:	f7fc fb0b 	bl	8003f08 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d901      	bls.n	8007900 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e1fc      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007900:	4b1e      	ldr	r3, [pc, #120]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1f0      	bne.n	80078ee <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0308 	and.w	r3, r3, #8
 8007914:	2b00      	cmp	r3, #0
 8007916:	d046      	beq.n	80079a6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d008      	beq.n	8007932 <HAL_RCC_OscConfig+0x266>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d004      	beq.n	8007932 <HAL_RCC_OscConfig+0x266>
 8007928:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800792c:	4812      	ldr	r0, [pc, #72]	; (8007978 <HAL_RCC_OscConfig+0x2ac>)
 800792e:	f7fb f992 	bl	8002c56 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d016      	beq.n	8007968 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800793a:	4b12      	ldr	r3, [pc, #72]	; (8007984 <HAL_RCC_OscConfig+0x2b8>)
 800793c:	2201      	movs	r2, #1
 800793e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007940:	f7fc fae2 	bl	8003f08 <HAL_GetTick>
 8007944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007946:	e008      	b.n	800795a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007948:	f7fc fade 	bl	8003f08 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e1cf      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800795a:	4b08      	ldr	r3, [pc, #32]	; (800797c <HAL_RCC_OscConfig+0x2b0>)
 800795c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0f0      	beq.n	8007948 <HAL_RCC_OscConfig+0x27c>
 8007966:	e01e      	b.n	80079a6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007968:	4b06      	ldr	r3, [pc, #24]	; (8007984 <HAL_RCC_OscConfig+0x2b8>)
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800796e:	f7fc facb 	bl	8003f08 <HAL_GetTick>
 8007972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007974:	e011      	b.n	800799a <HAL_RCC_OscConfig+0x2ce>
 8007976:	bf00      	nop
 8007978:	0800dcfc 	.word	0x0800dcfc
 800797c:	40023800 	.word	0x40023800
 8007980:	42470000 	.word	0x42470000
 8007984:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007988:	f7fc fabe 	bl	8003f08 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d901      	bls.n	800799a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e1af      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800799a:	4b97      	ldr	r3, [pc, #604]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 800799c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1f0      	bne.n	8007988 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0304 	and.w	r3, r3, #4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 80a8 	beq.w	8007b04 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079b4:	2300      	movs	r3, #0
 80079b6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00c      	beq.n	80079da <HAL_RCC_OscConfig+0x30e>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d008      	beq.n	80079da <HAL_RCC_OscConfig+0x30e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	2b05      	cmp	r3, #5
 80079ce:	d004      	beq.n	80079da <HAL_RCC_OscConfig+0x30e>
 80079d0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80079d4:	4889      	ldr	r0, [pc, #548]	; (8007bfc <HAL_RCC_OscConfig+0x530>)
 80079d6:	f7fb f93e 	bl	8002c56 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079da:	4b87      	ldr	r3, [pc, #540]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10f      	bne.n	8007a06 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079e6:	2300      	movs	r3, #0
 80079e8:	60bb      	str	r3, [r7, #8]
 80079ea:	4b83      	ldr	r3, [pc, #524]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	4a82      	ldr	r2, [pc, #520]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 80079f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079f4:	6413      	str	r3, [r2, #64]	; 0x40
 80079f6:	4b80      	ldr	r3, [pc, #512]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079fe:	60bb      	str	r3, [r7, #8]
 8007a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a02:	2301      	movs	r3, #1
 8007a04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a06:	4b7e      	ldr	r3, [pc, #504]	; (8007c00 <HAL_RCC_OscConfig+0x534>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d118      	bne.n	8007a44 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a12:	4b7b      	ldr	r3, [pc, #492]	; (8007c00 <HAL_RCC_OscConfig+0x534>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a7a      	ldr	r2, [pc, #488]	; (8007c00 <HAL_RCC_OscConfig+0x534>)
 8007a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a1e:	f7fc fa73 	bl	8003f08 <HAL_GetTick>
 8007a22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a24:	e008      	b.n	8007a38 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a26:	f7fc fa6f 	bl	8003f08 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e160      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a38:	4b71      	ldr	r3, [pc, #452]	; (8007c00 <HAL_RCC_OscConfig+0x534>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d0f0      	beq.n	8007a26 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d106      	bne.n	8007a5a <HAL_RCC_OscConfig+0x38e>
 8007a4c:	4b6a      	ldr	r3, [pc, #424]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a50:	4a69      	ldr	r2, [pc, #420]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	6713      	str	r3, [r2, #112]	; 0x70
 8007a58:	e01c      	b.n	8007a94 <HAL_RCC_OscConfig+0x3c8>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	2b05      	cmp	r3, #5
 8007a60:	d10c      	bne.n	8007a7c <HAL_RCC_OscConfig+0x3b0>
 8007a62:	4b65      	ldr	r3, [pc, #404]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	4a64      	ldr	r2, [pc, #400]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007a68:	f043 0304 	orr.w	r3, r3, #4
 8007a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6e:	4b62      	ldr	r3, [pc, #392]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a72:	4a61      	ldr	r2, [pc, #388]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007a74:	f043 0301 	orr.w	r3, r3, #1
 8007a78:	6713      	str	r3, [r2, #112]	; 0x70
 8007a7a:	e00b      	b.n	8007a94 <HAL_RCC_OscConfig+0x3c8>
 8007a7c:	4b5e      	ldr	r3, [pc, #376]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a80:	4a5d      	ldr	r2, [pc, #372]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007a82:	f023 0301 	bic.w	r3, r3, #1
 8007a86:	6713      	str	r3, [r2, #112]	; 0x70
 8007a88:	4b5b      	ldr	r3, [pc, #364]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8c:	4a5a      	ldr	r2, [pc, #360]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007a8e:	f023 0304 	bic.w	r3, r3, #4
 8007a92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d015      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9c:	f7fc fa34 	bl	8003f08 <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aa2:	e00a      	b.n	8007aba <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aa4:	f7fc fa30 	bl	8003f08 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e11f      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aba:	4b4f      	ldr	r3, [pc, #316]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0ee      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x3d8>
 8007ac6:	e014      	b.n	8007af2 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ac8:	f7fc fa1e 	bl	8003f08 <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ace:	e00a      	b.n	8007ae6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ad0:	f7fc fa1a 	bl	8003f08 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e109      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ae6:	4b44      	ldr	r3, [pc, #272]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1ee      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d105      	bne.n	8007b04 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007af8:	4b3f      	ldr	r3, [pc, #252]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afc:	4a3e      	ldr	r2, [pc, #248]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <HAL_RCC_OscConfig+0x45a>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d008      	beq.n	8007b26 <HAL_RCC_OscConfig+0x45a>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d004      	beq.n	8007b26 <HAL_RCC_OscConfig+0x45a>
 8007b1c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007b20:	4836      	ldr	r0, [pc, #216]	; (8007bfc <HAL_RCC_OscConfig+0x530>)
 8007b22:	f7fb f898 	bl	8002c56 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 80e4 	beq.w	8007cf8 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b30:	4b31      	ldr	r3, [pc, #196]	; (8007bf8 <HAL_RCC_OscConfig+0x52c>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 030c 	and.w	r3, r3, #12
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	f000 80ae 	beq.w	8007c9a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	f040 8092 	bne.w	8007c6c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	69db      	ldr	r3, [r3, #28]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d009      	beq.n	8007b64 <HAL_RCC_OscConfig+0x498>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b58:	d004      	beq.n	8007b64 <HAL_RCC_OscConfig+0x498>
 8007b5a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8007b5e:	4827      	ldr	r0, [pc, #156]	; (8007bfc <HAL_RCC_OscConfig+0x530>)
 8007b60:	f7fb f879 	bl	8002c56 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	2b3f      	cmp	r3, #63	; 0x3f
 8007b6a:	d904      	bls.n	8007b76 <HAL_RCC_OscConfig+0x4aa>
 8007b6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b70:	4822      	ldr	r0, [pc, #136]	; (8007bfc <HAL_RCC_OscConfig+0x530>)
 8007b72:	f7fb f870 	bl	8002c56 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	2b31      	cmp	r3, #49	; 0x31
 8007b7c:	d904      	bls.n	8007b88 <HAL_RCC_OscConfig+0x4bc>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007b86:	d904      	bls.n	8007b92 <HAL_RCC_OscConfig+0x4c6>
 8007b88:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8007b8c:	481b      	ldr	r0, [pc, #108]	; (8007bfc <HAL_RCC_OscConfig+0x530>)
 8007b8e:	f7fb f862 	bl	8002c56 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d010      	beq.n	8007bbc <HAL_RCC_OscConfig+0x4f0>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d00c      	beq.n	8007bbc <HAL_RCC_OscConfig+0x4f0>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	2b06      	cmp	r3, #6
 8007ba8:	d008      	beq.n	8007bbc <HAL_RCC_OscConfig+0x4f0>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bae:	2b08      	cmp	r3, #8
 8007bb0:	d004      	beq.n	8007bbc <HAL_RCC_OscConfig+0x4f0>
 8007bb2:	f240 11db 	movw	r1, #475	; 0x1db
 8007bb6:	4811      	ldr	r0, [pc, #68]	; (8007bfc <HAL_RCC_OscConfig+0x530>)
 8007bb8:	f7fb f84d 	bl	8002c56 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d903      	bls.n	8007bcc <HAL_RCC_OscConfig+0x500>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	2b0f      	cmp	r3, #15
 8007bca:	d904      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x50a>
 8007bcc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8007bd0:	480a      	ldr	r0, [pc, #40]	; (8007bfc <HAL_RCC_OscConfig+0x530>)
 8007bd2:	f7fb f840 	bl	8002c56 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <HAL_RCC_OscConfig+0x538>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bdc:	f7fc f994 	bl	8003f08 <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007be2:	e011      	b.n	8007c08 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007be4:	f7fc f990 	bl	8003f08 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d90a      	bls.n	8007c08 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e081      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
 8007bf6:	bf00      	nop
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	0800dcfc 	.word	0x0800dcfc
 8007c00:	40007000 	.word	0x40007000
 8007c04:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c08:	4b3e      	ldr	r3, [pc, #248]	; (8007d04 <HAL_RCC_OscConfig+0x638>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e7      	bne.n	8007be4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	69da      	ldr	r2, [r3, #28]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	019b      	lsls	r3, r3, #6
 8007c24:	431a      	orrs	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2a:	085b      	lsrs	r3, r3, #1
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	041b      	lsls	r3, r3, #16
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c36:	061b      	lsls	r3, r3, #24
 8007c38:	4932      	ldr	r1, [pc, #200]	; (8007d04 <HAL_RCC_OscConfig+0x638>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c3e:	4b32      	ldr	r3, [pc, #200]	; (8007d08 <HAL_RCC_OscConfig+0x63c>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c44:	f7fc f960 	bl	8003f08 <HAL_GetTick>
 8007c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c4c:	f7fc f95c 	bl	8003f08 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e04d      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c5e:	4b29      	ldr	r3, [pc, #164]	; (8007d04 <HAL_RCC_OscConfig+0x638>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0f0      	beq.n	8007c4c <HAL_RCC_OscConfig+0x580>
 8007c6a:	e045      	b.n	8007cf8 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c6c:	4b26      	ldr	r3, [pc, #152]	; (8007d08 <HAL_RCC_OscConfig+0x63c>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c72:	f7fc f949 	bl	8003f08 <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c78:	e008      	b.n	8007c8c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c7a:	f7fc f945 	bl	8003f08 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e036      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c8c:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <HAL_RCC_OscConfig+0x638>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f0      	bne.n	8007c7a <HAL_RCC_OscConfig+0x5ae>
 8007c98:	e02e      	b.n	8007cf8 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e029      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ca6:	4b17      	ldr	r3, [pc, #92]	; (8007d04 <HAL_RCC_OscConfig+0x638>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d11c      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d115      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007cce:	4013      	ands	r3, r2
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d10d      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d106      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d001      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e000      	b.n	8007cfa <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	40023800 	.word	0x40023800
 8007d08:	42470060 	.word	0x42470060

08007d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e18c      	b.n	800803a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <HAL_RCC_ClockConfig+0x24>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b0f      	cmp	r3, #15
 8007d2e:	d904      	bls.n	8007d3a <HAL_RCC_ClockConfig+0x2e>
 8007d30:	f240 2151 	movw	r1, #593	; 0x251
 8007d34:	4887      	ldr	r0, [pc, #540]	; (8007f54 <HAL_RCC_ClockConfig+0x248>)
 8007d36:	f7fa ff8e 	bl	8002c56 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d031      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d02e      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d02b      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d028      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d025      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	d022      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b06      	cmp	r3, #6
 8007d62:	d01f      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2b07      	cmp	r3, #7
 8007d68:	d01c      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d019      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b09      	cmp	r3, #9
 8007d74:	d016      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b0a      	cmp	r3, #10
 8007d7a:	d013      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b0b      	cmp	r3, #11
 8007d80:	d010      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b0c      	cmp	r3, #12
 8007d86:	d00d      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b0d      	cmp	r3, #13
 8007d8c:	d00a      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b0e      	cmp	r3, #14
 8007d92:	d007      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b0f      	cmp	r3, #15
 8007d98:	d004      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x98>
 8007d9a:	f240 2152 	movw	r1, #594	; 0x252
 8007d9e:	486d      	ldr	r0, [pc, #436]	; (8007f54 <HAL_RCC_ClockConfig+0x248>)
 8007da0:	f7fa ff59 	bl	8002c56 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007da4:	4b6c      	ldr	r3, [pc, #432]	; (8007f58 <HAL_RCC_ClockConfig+0x24c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 030f 	and.w	r3, r3, #15
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d90c      	bls.n	8007dcc <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007db2:	4b69      	ldr	r3, [pc, #420]	; (8007f58 <HAL_RCC_ClockConfig+0x24c>)
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dba:	4b67      	ldr	r3, [pc, #412]	; (8007f58 <HAL_RCC_ClockConfig+0x24c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d001      	beq.n	8007dcc <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e136      	b.n	800803a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d049      	beq.n	8007e6c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007de4:	4b5d      	ldr	r3, [pc, #372]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	4a5c      	ldr	r2, [pc, #368]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007dea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007dee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0308 	and.w	r3, r3, #8
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d005      	beq.n	8007e08 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007dfc:	4b57      	ldr	r3, [pc, #348]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	4a56      	ldr	r2, [pc, #344]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d024      	beq.n	8007e5a <HAL_RCC_ClockConfig+0x14e>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	2b80      	cmp	r3, #128	; 0x80
 8007e16:	d020      	beq.n	8007e5a <HAL_RCC_ClockConfig+0x14e>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	2b90      	cmp	r3, #144	; 0x90
 8007e1e:	d01c      	beq.n	8007e5a <HAL_RCC_ClockConfig+0x14e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	2ba0      	cmp	r3, #160	; 0xa0
 8007e26:	d018      	beq.n	8007e5a <HAL_RCC_ClockConfig+0x14e>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	2bb0      	cmp	r3, #176	; 0xb0
 8007e2e:	d014      	beq.n	8007e5a <HAL_RCC_ClockConfig+0x14e>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	2bc0      	cmp	r3, #192	; 0xc0
 8007e36:	d010      	beq.n	8007e5a <HAL_RCC_ClockConfig+0x14e>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	2bd0      	cmp	r3, #208	; 0xd0
 8007e3e:	d00c      	beq.n	8007e5a <HAL_RCC_ClockConfig+0x14e>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	2be0      	cmp	r3, #224	; 0xe0
 8007e46:	d008      	beq.n	8007e5a <HAL_RCC_ClockConfig+0x14e>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	2bf0      	cmp	r3, #240	; 0xf0
 8007e4e:	d004      	beq.n	8007e5a <HAL_RCC_ClockConfig+0x14e>
 8007e50:	f240 2175 	movw	r1, #629	; 0x275
 8007e54:	483f      	ldr	r0, [pc, #252]	; (8007f54 <HAL_RCC_ClockConfig+0x248>)
 8007e56:	f7fa fefe 	bl	8002c56 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e5a:	4b40      	ldr	r3, [pc, #256]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	493d      	ldr	r1, [pc, #244]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d059      	beq.n	8007f2c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d010      	beq.n	8007ea2 <HAL_RCC_ClockConfig+0x196>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d00c      	beq.n	8007ea2 <HAL_RCC_ClockConfig+0x196>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d008      	beq.n	8007ea2 <HAL_RCC_ClockConfig+0x196>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d004      	beq.n	8007ea2 <HAL_RCC_ClockConfig+0x196>
 8007e98:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8007e9c:	482d      	ldr	r0, [pc, #180]	; (8007f54 <HAL_RCC_ClockConfig+0x248>)
 8007e9e:	f7fa feda 	bl	8002c56 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d107      	bne.n	8007eba <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eaa:	4b2c      	ldr	r3, [pc, #176]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d119      	bne.n	8007eea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e0bf      	b.n	800803a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d003      	beq.n	8007eca <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d107      	bne.n	8007eda <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eca:	4b24      	ldr	r3, [pc, #144]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d109      	bne.n	8007eea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e0af      	b.n	800803a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eda:	4b20      	ldr	r3, [pc, #128]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e0a7      	b.n	800803a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007eea:	4b1c      	ldr	r3, [pc, #112]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f023 0203 	bic.w	r2, r3, #3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	4919      	ldr	r1, [pc, #100]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007efc:	f7fc f804 	bl	8003f08 <HAL_GetTick>
 8007f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f02:	e00a      	b.n	8007f1a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f04:	f7fc f800 	bl	8003f08 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e08f      	b.n	800803a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1a:	4b10      	ldr	r3, [pc, #64]	; (8007f5c <HAL_RCC_ClockConfig+0x250>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 020c 	and.w	r2, r3, #12
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d1eb      	bne.n	8007f04 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <HAL_RCC_ClockConfig+0x24c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d212      	bcs.n	8007f60 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f3a:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <HAL_RCC_ClockConfig+0x24c>)
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	b2d2      	uxtb	r2, r2
 8007f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f42:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <HAL_RCC_ClockConfig+0x24c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d007      	beq.n	8007f60 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e072      	b.n	800803a <HAL_RCC_ClockConfig+0x32e>
 8007f54:	0800dcfc 	.word	0x0800dcfc
 8007f58:	40023c00 	.word	0x40023c00
 8007f5c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0304 	and.w	r3, r3, #4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d025      	beq.n	8007fb8 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d018      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x29a>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7c:	d013      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x29a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f86:	d00e      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x29a>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007f90:	d009      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x29a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007f9a:	d004      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x29a>
 8007f9c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8007fa0:	4828      	ldr	r0, [pc, #160]	; (8008044 <HAL_RCC_ClockConfig+0x338>)
 8007fa2:	f7fa fe58 	bl	8002c56 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fa6:	4b28      	ldr	r3, [pc, #160]	; (8008048 <HAL_RCC_ClockConfig+0x33c>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	4925      	ldr	r1, [pc, #148]	; (8008048 <HAL_RCC_ClockConfig+0x33c>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0308 	and.w	r3, r3, #8
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d026      	beq.n	8008012 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d018      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x2f2>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd4:	d013      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x2f2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fde:	d00e      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x2f2>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007fe8:	d009      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x2f2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007ff2:	d004      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x2f2>
 8007ff4:	f240 21c1 	movw	r1, #705	; 0x2c1
 8007ff8:	4812      	ldr	r0, [pc, #72]	; (8008044 <HAL_RCC_ClockConfig+0x338>)
 8007ffa:	f7fa fe2c 	bl	8002c56 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ffe:	4b12      	ldr	r3, [pc, #72]	; (8008048 <HAL_RCC_ClockConfig+0x33c>)
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	490e      	ldr	r1, [pc, #56]	; (8008048 <HAL_RCC_ClockConfig+0x33c>)
 800800e:	4313      	orrs	r3, r2
 8008010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008012:	f000 f821 	bl	8008058 <HAL_RCC_GetSysClockFreq>
 8008016:	4602      	mov	r2, r0
 8008018:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <HAL_RCC_ClockConfig+0x33c>)
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	091b      	lsrs	r3, r3, #4
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	490a      	ldr	r1, [pc, #40]	; (800804c <HAL_RCC_ClockConfig+0x340>)
 8008024:	5ccb      	ldrb	r3, [r1, r3]
 8008026:	fa22 f303 	lsr.w	r3, r2, r3
 800802a:	4a09      	ldr	r2, [pc, #36]	; (8008050 <HAL_RCC_ClockConfig+0x344>)
 800802c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800802e:	4b09      	ldr	r3, [pc, #36]	; (8008054 <HAL_RCC_ClockConfig+0x348>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f7fb ff24 	bl	8003e80 <HAL_InitTick>

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	0800dcfc 	.word	0x0800dcfc
 8008048:	40023800 	.word	0x40023800
 800804c:	0800de4c 	.word	0x0800de4c
 8008050:	200001f0 	.word	0x200001f0
 8008054:	200001f4 	.word	0x200001f4

08008058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008058:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	607b      	str	r3, [r7, #4]
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	2300      	movs	r3, #0
 800806a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008070:	4b67      	ldr	r3, [pc, #412]	; (8008210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f003 030c 	and.w	r3, r3, #12
 8008078:	2b08      	cmp	r3, #8
 800807a:	d00d      	beq.n	8008098 <HAL_RCC_GetSysClockFreq+0x40>
 800807c:	2b08      	cmp	r3, #8
 800807e:	f200 80bd 	bhi.w	80081fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <HAL_RCC_GetSysClockFreq+0x34>
 8008086:	2b04      	cmp	r3, #4
 8008088:	d003      	beq.n	8008092 <HAL_RCC_GetSysClockFreq+0x3a>
 800808a:	e0b7      	b.n	80081fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800808c:	4b61      	ldr	r3, [pc, #388]	; (8008214 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800808e:	60bb      	str	r3, [r7, #8]
       break;
 8008090:	e0b7      	b.n	8008202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008092:	4b60      	ldr	r3, [pc, #384]	; (8008214 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008094:	60bb      	str	r3, [r7, #8]
      break;
 8008096:	e0b4      	b.n	8008202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008098:	4b5d      	ldr	r3, [pc, #372]	; (8008210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080a2:	4b5b      	ldr	r3, [pc, #364]	; (8008210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d04d      	beq.n	800814a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ae:	4b58      	ldr	r3, [pc, #352]	; (8008210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	099b      	lsrs	r3, r3, #6
 80080b4:	461a      	mov	r2, r3
 80080b6:	f04f 0300 	mov.w	r3, #0
 80080ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80080be:	f04f 0100 	mov.w	r1, #0
 80080c2:	ea02 0800 	and.w	r8, r2, r0
 80080c6:	ea03 0901 	and.w	r9, r3, r1
 80080ca:	4640      	mov	r0, r8
 80080cc:	4649      	mov	r1, r9
 80080ce:	f04f 0200 	mov.w	r2, #0
 80080d2:	f04f 0300 	mov.w	r3, #0
 80080d6:	014b      	lsls	r3, r1, #5
 80080d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80080dc:	0142      	lsls	r2, r0, #5
 80080de:	4610      	mov	r0, r2
 80080e0:	4619      	mov	r1, r3
 80080e2:	ebb0 0008 	subs.w	r0, r0, r8
 80080e6:	eb61 0109 	sbc.w	r1, r1, r9
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	018b      	lsls	r3, r1, #6
 80080f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80080f8:	0182      	lsls	r2, r0, #6
 80080fa:	1a12      	subs	r2, r2, r0
 80080fc:	eb63 0301 	sbc.w	r3, r3, r1
 8008100:	f04f 0000 	mov.w	r0, #0
 8008104:	f04f 0100 	mov.w	r1, #0
 8008108:	00d9      	lsls	r1, r3, #3
 800810a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800810e:	00d0      	lsls	r0, r2, #3
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	eb12 0208 	adds.w	r2, r2, r8
 8008118:	eb43 0309 	adc.w	r3, r3, r9
 800811c:	f04f 0000 	mov.w	r0, #0
 8008120:	f04f 0100 	mov.w	r1, #0
 8008124:	0299      	lsls	r1, r3, #10
 8008126:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800812a:	0290      	lsls	r0, r2, #10
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	4610      	mov	r0, r2
 8008132:	4619      	mov	r1, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	461a      	mov	r2, r3
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	f7f8 fd5c 	bl	8000bf8 <__aeabi_uldivmod>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4613      	mov	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	e04a      	b.n	80081e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800814a:	4b31      	ldr	r3, [pc, #196]	; (8008210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	099b      	lsrs	r3, r3, #6
 8008150:	461a      	mov	r2, r3
 8008152:	f04f 0300 	mov.w	r3, #0
 8008156:	f240 10ff 	movw	r0, #511	; 0x1ff
 800815a:	f04f 0100 	mov.w	r1, #0
 800815e:	ea02 0400 	and.w	r4, r2, r0
 8008162:	ea03 0501 	and.w	r5, r3, r1
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f04f 0200 	mov.w	r2, #0
 800816e:	f04f 0300 	mov.w	r3, #0
 8008172:	014b      	lsls	r3, r1, #5
 8008174:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008178:	0142      	lsls	r2, r0, #5
 800817a:	4610      	mov	r0, r2
 800817c:	4619      	mov	r1, r3
 800817e:	1b00      	subs	r0, r0, r4
 8008180:	eb61 0105 	sbc.w	r1, r1, r5
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	018b      	lsls	r3, r1, #6
 800818e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008192:	0182      	lsls	r2, r0, #6
 8008194:	1a12      	subs	r2, r2, r0
 8008196:	eb63 0301 	sbc.w	r3, r3, r1
 800819a:	f04f 0000 	mov.w	r0, #0
 800819e:	f04f 0100 	mov.w	r1, #0
 80081a2:	00d9      	lsls	r1, r3, #3
 80081a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081a8:	00d0      	lsls	r0, r2, #3
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	1912      	adds	r2, r2, r4
 80081b0:	eb45 0303 	adc.w	r3, r5, r3
 80081b4:	f04f 0000 	mov.w	r0, #0
 80081b8:	f04f 0100 	mov.w	r1, #0
 80081bc:	0299      	lsls	r1, r3, #10
 80081be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80081c2:	0290      	lsls	r0, r2, #10
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	4610      	mov	r0, r2
 80081ca:	4619      	mov	r1, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	461a      	mov	r2, r3
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	f7f8 fd10 	bl	8000bf8 <__aeabi_uldivmod>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4613      	mov	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	0c1b      	lsrs	r3, r3, #16
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	3301      	adds	r3, #1
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f8:	60bb      	str	r3, [r7, #8]
      break;
 80081fa:	e002      	b.n	8008202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081fc:	4b05      	ldr	r3, [pc, #20]	; (8008214 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80081fe:	60bb      	str	r3, [r7, #8]
      break;
 8008200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008202:	68bb      	ldr	r3, [r7, #8]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800820e:	bf00      	nop
 8008210:	40023800 	.word	0x40023800
 8008214:	00f42400 	.word	0x00f42400

08008218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800821c:	4b03      	ldr	r3, [pc, #12]	; (800822c <HAL_RCC_GetHCLKFreq+0x14>)
 800821e:	681b      	ldr	r3, [r3, #0]
}
 8008220:	4618      	mov	r0, r3
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	200001f0 	.word	0x200001f0

08008230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008234:	f7ff fff0 	bl	8008218 <HAL_RCC_GetHCLKFreq>
 8008238:	4602      	mov	r2, r0
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	0a9b      	lsrs	r3, r3, #10
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	4903      	ldr	r1, [pc, #12]	; (8008254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008246:	5ccb      	ldrb	r3, [r1, r3]
 8008248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800824c:	4618      	mov	r0, r3
 800824e:	bd80      	pop	{r7, pc}
 8008250:	40023800 	.word	0x40023800
 8008254:	0800de5c 	.word	0x0800de5c

08008258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800825c:	f7ff ffdc 	bl	8008218 <HAL_RCC_GetHCLKFreq>
 8008260:	4602      	mov	r2, r0
 8008262:	4b05      	ldr	r3, [pc, #20]	; (8008278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	0b5b      	lsrs	r3, r3, #13
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	4903      	ldr	r1, [pc, #12]	; (800827c <HAL_RCC_GetPCLK2Freq+0x24>)
 800826e:	5ccb      	ldrb	r3, [r1, r3]
 8008270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008274:	4618      	mov	r0, r3
 8008276:	bd80      	pop	{r7, pc}
 8008278:	40023800 	.word	0x40023800
 800827c:	0800de5c 	.word	0x0800de5c

08008280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e118      	b.n	80084c4 <HAL_SPI_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a8d      	ldr	r2, [pc, #564]	; (80084cc <HAL_SPI_Init+0x24c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d01d      	beq.n	80082d8 <HAL_SPI_Init+0x58>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a8b      	ldr	r2, [pc, #556]	; (80084d0 <HAL_SPI_Init+0x250>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d018      	beq.n	80082d8 <HAL_SPI_Init+0x58>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a8a      	ldr	r2, [pc, #552]	; (80084d4 <HAL_SPI_Init+0x254>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d013      	beq.n	80082d8 <HAL_SPI_Init+0x58>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a88      	ldr	r2, [pc, #544]	; (80084d8 <HAL_SPI_Init+0x258>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00e      	beq.n	80082d8 <HAL_SPI_Init+0x58>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a87      	ldr	r2, [pc, #540]	; (80084dc <HAL_SPI_Init+0x25c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d009      	beq.n	80082d8 <HAL_SPI_Init+0x58>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a85      	ldr	r2, [pc, #532]	; (80084e0 <HAL_SPI_Init+0x260>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d004      	beq.n	80082d8 <HAL_SPI_Init+0x58>
 80082ce:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80082d2:	4884      	ldr	r0, [pc, #528]	; (80084e4 <HAL_SPI_Init+0x264>)
 80082d4:	f7fa fcbf 	bl	8002c56 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d009      	beq.n	80082f4 <HAL_SPI_Init+0x74>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082e8:	d004      	beq.n	80082f4 <HAL_SPI_Init+0x74>
 80082ea:	f240 1143 	movw	r1, #323	; 0x143
 80082ee:	487d      	ldr	r0, [pc, #500]	; (80084e4 <HAL_SPI_Init+0x264>)
 80082f0:	f7fa fcb1 	bl	8002c56 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00e      	beq.n	800831a <HAL_SPI_Init+0x9a>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008304:	d009      	beq.n	800831a <HAL_SPI_Init+0x9a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800830e:	d004      	beq.n	800831a <HAL_SPI_Init+0x9a>
 8008310:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008314:	4873      	ldr	r0, [pc, #460]	; (80084e4 <HAL_SPI_Init+0x264>)
 8008316:	f7fa fc9e 	bl	8002c56 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008322:	d008      	beq.n	8008336 <HAL_SPI_Init+0xb6>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d004      	beq.n	8008336 <HAL_SPI_Init+0xb6>
 800832c:	f240 1145 	movw	r1, #325	; 0x145
 8008330:	486c      	ldr	r0, [pc, #432]	; (80084e4 <HAL_SPI_Init+0x264>)
 8008332:	f7fa fc90 	bl	8002c56 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800833e:	d00d      	beq.n	800835c <HAL_SPI_Init+0xdc>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d009      	beq.n	800835c <HAL_SPI_Init+0xdc>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008350:	d004      	beq.n	800835c <HAL_SPI_Init+0xdc>
 8008352:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008356:	4863      	ldr	r0, [pc, #396]	; (80084e4 <HAL_SPI_Init+0x264>)
 8008358:	f7fa fc7d 	bl	8002c56 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d020      	beq.n	80083a6 <HAL_SPI_Init+0x126>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	2b08      	cmp	r3, #8
 800836a:	d01c      	beq.n	80083a6 <HAL_SPI_Init+0x126>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	2b10      	cmp	r3, #16
 8008372:	d018      	beq.n	80083a6 <HAL_SPI_Init+0x126>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	2b18      	cmp	r3, #24
 800837a:	d014      	beq.n	80083a6 <HAL_SPI_Init+0x126>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	2b20      	cmp	r3, #32
 8008382:	d010      	beq.n	80083a6 <HAL_SPI_Init+0x126>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	2b28      	cmp	r3, #40	; 0x28
 800838a:	d00c      	beq.n	80083a6 <HAL_SPI_Init+0x126>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	2b30      	cmp	r3, #48	; 0x30
 8008392:	d008      	beq.n	80083a6 <HAL_SPI_Init+0x126>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	2b38      	cmp	r3, #56	; 0x38
 800839a:	d004      	beq.n	80083a6 <HAL_SPI_Init+0x126>
 800839c:	f240 1147 	movw	r1, #327	; 0x147
 80083a0:	4850      	ldr	r0, [pc, #320]	; (80084e4 <HAL_SPI_Init+0x264>)
 80083a2:	f7fa fc58 	bl	8002c56 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d008      	beq.n	80083c0 <HAL_SPI_Init+0x140>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	2b80      	cmp	r3, #128	; 0x80
 80083b4:	d004      	beq.n	80083c0 <HAL_SPI_Init+0x140>
 80083b6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80083ba:	484a      	ldr	r0, [pc, #296]	; (80084e4 <HAL_SPI_Init+0x264>)
 80083bc:	f7fa fc4b 	bl	8002c56 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d008      	beq.n	80083da <HAL_SPI_Init+0x15a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b10      	cmp	r3, #16
 80083ce:	d004      	beq.n	80083da <HAL_SPI_Init+0x15a>
 80083d0:	f240 1149 	movw	r1, #329	; 0x149
 80083d4:	4843      	ldr	r0, [pc, #268]	; (80084e4 <HAL_SPI_Init+0x264>)
 80083d6:	f7fa fc3e 	bl	8002c56 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d119      	bne.n	8008416 <HAL_SPI_Init+0x196>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d008      	beq.n	80083fc <HAL_SPI_Init+0x17c>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d004      	beq.n	80083fc <HAL_SPI_Init+0x17c>
 80083f2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80083f6:	483b      	ldr	r0, [pc, #236]	; (80084e4 <HAL_SPI_Init+0x264>)
 80083f8:	f7fa fc2d 	bl	8002c56 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d008      	beq.n	8008416 <HAL_SPI_Init+0x196>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d004      	beq.n	8008416 <HAL_SPI_Init+0x196>
 800840c:	f240 114d 	movw	r1, #333	; 0x14d
 8008410:	4834      	ldr	r0, [pc, #208]	; (80084e4 <HAL_SPI_Init+0x264>)
 8008412:	f7fa fc20 	bl	8002c56 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <HAL_SPI_Init+0x1b6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fa ffef 	bl	8003414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2202      	movs	r2, #2
 800843a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800844c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	431a      	orrs	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	431a      	orrs	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	ea42 0103 	orr.w	r1, r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	0c1b      	lsrs	r3, r3, #16
 8008494:	f003 0104 	and.w	r1, r3, #4
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	69da      	ldr	r2, [r3, #28]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40013000 	.word	0x40013000
 80084d0:	40003800 	.word	0x40003800
 80084d4:	40003c00 	.word	0x40003c00
 80084d8:	40013400 	.word	0x40013400
 80084dc:	40015000 	.word	0x40015000
 80084e0:	40015400 	.word	0x40015400
 80084e4:	0800dd34 	.word	0x0800dd34

080084e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b088      	sub	sp, #32
 80084ec:	af02      	add	r7, sp, #8
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	4613      	mov	r3, r2
 80084f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008504:	d112      	bne.n	800852c <HAL_SPI_Receive+0x44>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10e      	bne.n	800852c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2204      	movs	r2, #4
 8008512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008516:	88fa      	ldrh	r2, [r7, #6]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	4613      	mov	r3, r2
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 f8ea 	bl	80086fc <HAL_SPI_TransmitReceive>
 8008528:	4603      	mov	r3, r0
 800852a:	e0e2      	b.n	80086f2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008532:	2b01      	cmp	r3, #1
 8008534:	d101      	bne.n	800853a <HAL_SPI_Receive+0x52>
 8008536:	2302      	movs	r3, #2
 8008538:	e0db      	b.n	80086f2 <HAL_SPI_Receive+0x20a>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008542:	f7fb fce1 	bl	8003f08 <HAL_GetTick>
 8008546:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b01      	cmp	r3, #1
 8008552:	d002      	beq.n	800855a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008554:	2302      	movs	r3, #2
 8008556:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008558:	e0c2      	b.n	80086e0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <HAL_SPI_Receive+0x7e>
 8008560:	88fb      	ldrh	r3, [r7, #6]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d102      	bne.n	800856c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	75fb      	strb	r3, [r7, #23]
    goto error;
 800856a:	e0b9      	b.n	80086e0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2204      	movs	r2, #4
 8008570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	88fa      	ldrh	r2, [r7, #6]
 8008584:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	88fa      	ldrh	r2, [r7, #6]
 800858a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085b2:	d107      	bne.n	80085c4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80085c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ce:	2b40      	cmp	r3, #64	; 0x40
 80085d0:	d007      	beq.n	80085e2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d162      	bne.n	80086b0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80085ea:	e02e      	b.n	800864a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d115      	bne.n	8008626 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f103 020c 	add.w	r2, r3, #12
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008606:	7812      	ldrb	r2, [r2, #0]
 8008608:	b2d2      	uxtb	r2, r2
 800860a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800861a:	b29b      	uxth	r3, r3
 800861c:	3b01      	subs	r3, #1
 800861e:	b29a      	uxth	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008624:	e011      	b.n	800864a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008626:	f7fb fc6f 	bl	8003f08 <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d803      	bhi.n	800863e <HAL_SPI_Receive+0x156>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800863c:	d102      	bne.n	8008644 <HAL_SPI_Receive+0x15c>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d102      	bne.n	800864a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008648:	e04a      	b.n	80086e0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800864e:	b29b      	uxth	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1cb      	bne.n	80085ec <HAL_SPI_Receive+0x104>
 8008654:	e031      	b.n	80086ba <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b01      	cmp	r3, #1
 8008662:	d113      	bne.n	800868c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866e:	b292      	uxth	r2, r2
 8008670:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008676:	1c9a      	adds	r2, r3, #2
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008680:	b29b      	uxth	r3, r3
 8008682:	3b01      	subs	r3, #1
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	87da      	strh	r2, [r3, #62]	; 0x3e
 800868a:	e011      	b.n	80086b0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800868c:	f7fb fc3c 	bl	8003f08 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d803      	bhi.n	80086a4 <HAL_SPI_Receive+0x1bc>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086a2:	d102      	bne.n	80086aa <HAL_SPI_Receive+0x1c2>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d102      	bne.n	80086b0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80086ae:	e017      	b.n	80086e0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1cd      	bne.n	8008656 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 fa34 	bl	8008b2c <SPI_EndRxTransaction>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2220      	movs	r2, #32
 80086ce:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	75fb      	strb	r3, [r7, #23]
 80086dc:	e000      	b.n	80086e0 <HAL_SPI_Receive+0x1f8>
  }

error :
 80086de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08c      	sub	sp, #48	; 0x30
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
 8008708:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800870a:	2301      	movs	r3, #1
 800870c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <HAL_SPI_TransmitReceive+0x2a>
 800871c:	f240 415a 	movw	r1, #1114	; 0x45a
 8008720:	4884      	ldr	r0, [pc, #528]	; (8008934 <HAL_SPI_TransmitReceive+0x238>)
 8008722:	f7fa fa98 	bl	8002c56 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_SPI_TransmitReceive+0x38>
 8008730:	2302      	movs	r3, #2
 8008732:	e18d      	b.n	8008a50 <HAL_SPI_TransmitReceive+0x354>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800873c:	f7fb fbe4 	bl	8003f08 <HAL_GetTick>
 8008740:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008752:	887b      	ldrh	r3, [r7, #2]
 8008754:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008756:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800875a:	2b01      	cmp	r3, #1
 800875c:	d00f      	beq.n	800877e <HAL_SPI_TransmitReceive+0x82>
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008764:	d107      	bne.n	8008776 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <HAL_SPI_TransmitReceive+0x7a>
 800876e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008772:	2b04      	cmp	r3, #4
 8008774:	d003      	beq.n	800877e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8008776:	2302      	movs	r3, #2
 8008778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800877c:	e15e      	b.n	8008a3c <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d005      	beq.n	8008790 <HAL_SPI_TransmitReceive+0x94>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <HAL_SPI_TransmitReceive+0x94>
 800878a:	887b      	ldrh	r3, [r7, #2]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d103      	bne.n	8008798 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008796:	e151      	b.n	8008a3c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b04      	cmp	r3, #4
 80087a2:	d003      	beq.n	80087ac <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2205      	movs	r2, #5
 80087a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	887a      	ldrh	r2, [r7, #2]
 80087bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	887a      	ldrh	r2, [r7, #2]
 80087c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	887a      	ldrh	r2, [r7, #2]
 80087ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	887a      	ldrh	r2, [r7, #2]
 80087d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b40      	cmp	r3, #64	; 0x40
 80087ee:	d007      	beq.n	8008800 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008808:	d178      	bne.n	80088fc <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <HAL_SPI_TransmitReceive+0x11c>
 8008812:	8b7b      	ldrh	r3, [r7, #26]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d166      	bne.n	80088e6 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	881a      	ldrh	r2, [r3, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008828:	1c9a      	adds	r2, r3, #2
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008832:	b29b      	uxth	r3, r3
 8008834:	3b01      	subs	r3, #1
 8008836:	b29a      	uxth	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800883c:	e053      	b.n	80088e6 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b02      	cmp	r3, #2
 800884a:	d11b      	bne.n	8008884 <HAL_SPI_TransmitReceive+0x188>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008850:	b29b      	uxth	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d016      	beq.n	8008884 <HAL_SPI_TransmitReceive+0x188>
 8008856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008858:	2b01      	cmp	r3, #1
 800885a:	d113      	bne.n	8008884 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008860:	881a      	ldrh	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886c:	1c9a      	adds	r2, r3, #2
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008876:	b29b      	uxth	r3, r3
 8008878:	3b01      	subs	r3, #1
 800887a:	b29a      	uxth	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b01      	cmp	r3, #1
 8008890:	d119      	bne.n	80088c6 <HAL_SPI_TransmitReceive+0x1ca>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008896:	b29b      	uxth	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d014      	beq.n	80088c6 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a6:	b292      	uxth	r2, r2
 80088a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ae:	1c9a      	adds	r2, r3, #2
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088c2:	2301      	movs	r3, #1
 80088c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80088c6:	f7fb fb1f 	bl	8003f08 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d807      	bhi.n	80088e6 <HAL_SPI_TransmitReceive+0x1ea>
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088dc:	d003      	beq.n	80088e6 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80088e4:	e0aa      	b.n	8008a3c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1a6      	bne.n	800883e <HAL_SPI_TransmitReceive+0x142>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1a1      	bne.n	800883e <HAL_SPI_TransmitReceive+0x142>
 80088fa:	e07f      	b.n	80089fc <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <HAL_SPI_TransmitReceive+0x20e>
 8008904:	8b7b      	ldrh	r3, [r7, #26]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d16e      	bne.n	80089e8 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	330c      	adds	r3, #12
 8008914:	7812      	ldrb	r2, [r2, #0]
 8008916:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008926:	b29b      	uxth	r3, r3
 8008928:	3b01      	subs	r3, #1
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008930:	e05a      	b.n	80089e8 <HAL_SPI_TransmitReceive+0x2ec>
 8008932:	bf00      	nop
 8008934:	0800dd34 	.word	0x0800dd34
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b02      	cmp	r3, #2
 8008944:	d11c      	bne.n	8008980 <HAL_SPI_TransmitReceive+0x284>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800894a:	b29b      	uxth	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d017      	beq.n	8008980 <HAL_SPI_TransmitReceive+0x284>
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	2b01      	cmp	r3, #1
 8008954:	d114      	bne.n	8008980 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	330c      	adds	r3, #12
 8008960:	7812      	ldrb	r2, [r2, #0]
 8008962:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b01      	cmp	r3, #1
 800898c:	d119      	bne.n	80089c2 <HAL_SPI_TransmitReceive+0x2c6>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008992:	b29b      	uxth	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	d014      	beq.n	80089c2 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089be:	2301      	movs	r3, #1
 80089c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80089c2:	f7fb faa1 	bl	8003f08 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d803      	bhi.n	80089da <HAL_SPI_TransmitReceive+0x2de>
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089d8:	d102      	bne.n	80089e0 <HAL_SPI_TransmitReceive+0x2e4>
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d103      	bne.n	80089e8 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089e6:	e029      	b.n	8008a3c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1a2      	bne.n	8008938 <HAL_SPI_TransmitReceive+0x23c>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d19d      	bne.n	8008938 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 f8f9 	bl	8008bf8 <SPI_EndRxTxTransaction>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d006      	beq.n	8008a1a <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2220      	movs	r2, #32
 8008a16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008a18:	e010      	b.n	8008a3c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10b      	bne.n	8008a3a <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a22:	2300      	movs	r3, #0
 8008a24:	617b      	str	r3, [r7, #20]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	617b      	str	r3, [r7, #20]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	e000      	b.n	8008a3c <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8008a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3730      	adds	r7, #48	; 0x30
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	4613      	mov	r3, r2
 8008a66:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a68:	e04c      	b.n	8008b04 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a70:	d048      	beq.n	8008b04 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008a72:	f7fb fa49 	bl	8003f08 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d902      	bls.n	8008a88 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d13d      	bne.n	8008b04 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aa0:	d111      	bne.n	8008ac6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aaa:	d004      	beq.n	8008ab6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ab4:	d107      	bne.n	8008ac6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ac4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ace:	d10f      	bne.n	8008af0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008aee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e00f      	b.n	8008b24 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689a      	ldr	r2, [r3, #8]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	bf0c      	ite	eq
 8008b14:	2301      	moveq	r3, #1
 8008b16:	2300      	movne	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	79fb      	ldrb	r3, [r7, #7]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d1a3      	bne.n	8008a6a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af02      	add	r7, sp, #8
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b40:	d111      	bne.n	8008b66 <SPI_EndRxTransaction+0x3a>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b4a:	d004      	beq.n	8008b56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b54:	d107      	bne.n	8008b66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b6e:	d12a      	bne.n	8008bc6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b78:	d012      	beq.n	8008ba0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2200      	movs	r2, #0
 8008b82:	2180      	movs	r1, #128	; 0x80
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f7ff ff67 	bl	8008a58 <SPI_WaitFlagStateUntilTimeout>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d02d      	beq.n	8008bec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b94:	f043 0220 	orr.w	r2, r3, #32
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e026      	b.n	8008bee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2101      	movs	r1, #1
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f7ff ff54 	bl	8008a58 <SPI_WaitFlagStateUntilTimeout>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d01a      	beq.n	8008bec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bba:	f043 0220 	orr.w	r2, r3, #32
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e013      	b.n	8008bee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2101      	movs	r1, #1
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff ff41 	bl	8008a58 <SPI_WaitFlagStateUntilTimeout>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d007      	beq.n	8008bec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be0:	f043 0220 	orr.w	r2, r3, #32
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e000      	b.n	8008bee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008c04:	4b1b      	ldr	r3, [pc, #108]	; (8008c74 <SPI_EndRxTxTransaction+0x7c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a1b      	ldr	r2, [pc, #108]	; (8008c78 <SPI_EndRxTxTransaction+0x80>)
 8008c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0e:	0d5b      	lsrs	r3, r3, #21
 8008c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c14:	fb02 f303 	mul.w	r3, r2, r3
 8008c18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c22:	d112      	bne.n	8008c4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2180      	movs	r1, #128	; 0x80
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7ff ff12 	bl	8008a58 <SPI_WaitFlagStateUntilTimeout>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d016      	beq.n	8008c68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3e:	f043 0220 	orr.w	r2, r3, #32
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e00f      	b.n	8008c6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00a      	beq.n	8008c66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c60:	2b80      	cmp	r3, #128	; 0x80
 8008c62:	d0f2      	beq.n	8008c4a <SPI_EndRxTxTransaction+0x52>
 8008c64:	e000      	b.n	8008c68 <SPI_EndRxTxTransaction+0x70>
        break;
 8008c66:	bf00      	nop
  }

  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	200001f0 	.word	0x200001f0
 8008c78:	165e9f81 	.word	0x165e9f81

08008c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e0a1      	b.n	8008dd2 <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a52      	ldr	r2, [pc, #328]	; (8008ddc <HAL_TIM_Base_Init+0x160>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d045      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca0:	d040      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a4e      	ldr	r2, [pc, #312]	; (8008de0 <HAL_TIM_Base_Init+0x164>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d03b      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a4c      	ldr	r2, [pc, #304]	; (8008de4 <HAL_TIM_Base_Init+0x168>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d036      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a4b      	ldr	r2, [pc, #300]	; (8008de8 <HAL_TIM_Base_Init+0x16c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d031      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a49      	ldr	r2, [pc, #292]	; (8008dec <HAL_TIM_Base_Init+0x170>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d02c      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a48      	ldr	r2, [pc, #288]	; (8008df0 <HAL_TIM_Base_Init+0x174>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d027      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a46      	ldr	r2, [pc, #280]	; (8008df4 <HAL_TIM_Base_Init+0x178>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d022      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a45      	ldr	r2, [pc, #276]	; (8008df8 <HAL_TIM_Base_Init+0x17c>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d01d      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a43      	ldr	r2, [pc, #268]	; (8008dfc <HAL_TIM_Base_Init+0x180>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d018      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a42      	ldr	r2, [pc, #264]	; (8008e00 <HAL_TIM_Base_Init+0x184>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d013      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a40      	ldr	r2, [pc, #256]	; (8008e04 <HAL_TIM_Base_Init+0x188>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d00e      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a3f      	ldr	r2, [pc, #252]	; (8008e08 <HAL_TIM_Base_Init+0x18c>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d009      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a3d      	ldr	r2, [pc, #244]	; (8008e0c <HAL_TIM_Base_Init+0x190>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d004      	beq.n	8008d24 <HAL_TIM_Base_Init+0xa8>
 8008d1a:	f44f 7189 	mov.w	r1, #274	; 0x112
 8008d1e:	483c      	ldr	r0, [pc, #240]	; (8008e10 <HAL_TIM_Base_Init+0x194>)
 8008d20:	f7f9 ff99 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d014      	beq.n	8008d56 <HAL_TIM_Base_Init+0xda>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	2b10      	cmp	r3, #16
 8008d32:	d010      	beq.n	8008d56 <HAL_TIM_Base_Init+0xda>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	2b20      	cmp	r3, #32
 8008d3a:	d00c      	beq.n	8008d56 <HAL_TIM_Base_Init+0xda>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b40      	cmp	r3, #64	; 0x40
 8008d42:	d008      	beq.n	8008d56 <HAL_TIM_Base_Init+0xda>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	2b60      	cmp	r3, #96	; 0x60
 8008d4a:	d004      	beq.n	8008d56 <HAL_TIM_Base_Init+0xda>
 8008d4c:	f240 1113 	movw	r1, #275	; 0x113
 8008d50:	482f      	ldr	r0, [pc, #188]	; (8008e10 <HAL_TIM_Base_Init+0x194>)
 8008d52:	f7f9 ff80 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00e      	beq.n	8008d7c <HAL_TIM_Base_Init+0x100>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d66:	d009      	beq.n	8008d7c <HAL_TIM_Base_Init+0x100>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d70:	d004      	beq.n	8008d7c <HAL_TIM_Base_Init+0x100>
 8008d72:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008d76:	4826      	ldr	r0, [pc, #152]	; (8008e10 <HAL_TIM_Base_Init+0x194>)
 8008d78:	f7f9 ff6d 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d008      	beq.n	8008d96 <HAL_TIM_Base_Init+0x11a>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	2b80      	cmp	r3, #128	; 0x80
 8008d8a:	d004      	beq.n	8008d96 <HAL_TIM_Base_Init+0x11a>
 8008d8c:	f240 1115 	movw	r1, #277	; 0x115
 8008d90:	481f      	ldr	r0, [pc, #124]	; (8008e10 <HAL_TIM_Base_Init+0x194>)
 8008d92:	f7f9 ff60 	bl	8002c56 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7fa fe3c 	bl	8003a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2202      	movs	r2, #2
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	f001 fa62 	bl	800a28c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	40010000 	.word	0x40010000
 8008de0:	40000400 	.word	0x40000400
 8008de4:	40000800 	.word	0x40000800
 8008de8:	40000c00 	.word	0x40000c00
 8008dec:	40001000 	.word	0x40001000
 8008df0:	40001400 	.word	0x40001400
 8008df4:	40010400 	.word	0x40010400
 8008df8:	40014000 	.word	0x40014000
 8008dfc:	40014400 	.word	0x40014400
 8008e00:	40014800 	.word	0x40014800
 8008e04:	40001800 	.word	0x40001800
 8008e08:	40001c00 	.word	0x40001c00
 8008e0c:	40002000 	.word	0x40002000
 8008e10:	0800dd6c 	.word	0x0800dd6c

08008e14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a33      	ldr	r2, [pc, #204]	; (8008ef0 <HAL_TIM_Base_Start+0xdc>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d045      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e2e:	d040      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a2f      	ldr	r2, [pc, #188]	; (8008ef4 <HAL_TIM_Base_Start+0xe0>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d03b      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a2e      	ldr	r2, [pc, #184]	; (8008ef8 <HAL_TIM_Base_Start+0xe4>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d036      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a2c      	ldr	r2, [pc, #176]	; (8008efc <HAL_TIM_Base_Start+0xe8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d031      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a2b      	ldr	r2, [pc, #172]	; (8008f00 <HAL_TIM_Base_Start+0xec>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d02c      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a29      	ldr	r2, [pc, #164]	; (8008f04 <HAL_TIM_Base_Start+0xf0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d027      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a28      	ldr	r2, [pc, #160]	; (8008f08 <HAL_TIM_Base_Start+0xf4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d022      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a26      	ldr	r2, [pc, #152]	; (8008f0c <HAL_TIM_Base_Start+0xf8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d01d      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a25      	ldr	r2, [pc, #148]	; (8008f10 <HAL_TIM_Base_Start+0xfc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d018      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a23      	ldr	r2, [pc, #140]	; (8008f14 <HAL_TIM_Base_Start+0x100>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d013      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a22      	ldr	r2, [pc, #136]	; (8008f18 <HAL_TIM_Base_Start+0x104>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d00e      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a20      	ldr	r2, [pc, #128]	; (8008f1c <HAL_TIM_Base_Start+0x108>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d009      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1f      	ldr	r2, [pc, #124]	; (8008f20 <HAL_TIM_Base_Start+0x10c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d004      	beq.n	8008eb2 <HAL_TIM_Base_Start+0x9e>
 8008ea8:	f240 1185 	movw	r1, #389	; 0x185
 8008eac:	481d      	ldr	r0, [pc, #116]	; (8008f24 <HAL_TIM_Base_Start+0x110>)
 8008eae:	f7f9 fed2 	bl	8002c56 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f003 0307 	and.w	r3, r3, #7
 8008ec4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b06      	cmp	r3, #6
 8008eca:	d007      	beq.n	8008edc <HAL_TIM_Base_Start+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f042 0201 	orr.w	r2, r2, #1
 8008eda:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	40010000 	.word	0x40010000
 8008ef4:	40000400 	.word	0x40000400
 8008ef8:	40000800 	.word	0x40000800
 8008efc:	40000c00 	.word	0x40000c00
 8008f00:	40001000 	.word	0x40001000
 8008f04:	40001400 	.word	0x40001400
 8008f08:	40010400 	.word	0x40010400
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40014400 	.word	0x40014400
 8008f14:	40014800 	.word	0x40014800
 8008f18:	40001800 	.word	0x40001800
 8008f1c:	40001c00 	.word	0x40001c00
 8008f20:	40002000 	.word	0x40002000
 8008f24:	0800dd6c 	.word	0x0800dd6c

08008f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e0a1      	b.n	800907e <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a52      	ldr	r2, [pc, #328]	; (8009088 <HAL_TIM_PWM_Init+0x160>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d045      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f4c:	d040      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a4e      	ldr	r2, [pc, #312]	; (800908c <HAL_TIM_PWM_Init+0x164>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d03b      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a4c      	ldr	r2, [pc, #304]	; (8009090 <HAL_TIM_PWM_Init+0x168>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d036      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a4b      	ldr	r2, [pc, #300]	; (8009094 <HAL_TIM_PWM_Init+0x16c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d031      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a49      	ldr	r2, [pc, #292]	; (8009098 <HAL_TIM_PWM_Init+0x170>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d02c      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a48      	ldr	r2, [pc, #288]	; (800909c <HAL_TIM_PWM_Init+0x174>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d027      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a46      	ldr	r2, [pc, #280]	; (80090a0 <HAL_TIM_PWM_Init+0x178>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d022      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a45      	ldr	r2, [pc, #276]	; (80090a4 <HAL_TIM_PWM_Init+0x17c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d01d      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a43      	ldr	r2, [pc, #268]	; (80090a8 <HAL_TIM_PWM_Init+0x180>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d018      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a42      	ldr	r2, [pc, #264]	; (80090ac <HAL_TIM_PWM_Init+0x184>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d013      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a40      	ldr	r2, [pc, #256]	; (80090b0 <HAL_TIM_PWM_Init+0x188>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d00e      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a3f      	ldr	r2, [pc, #252]	; (80090b4 <HAL_TIM_PWM_Init+0x18c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d009      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a3d      	ldr	r2, [pc, #244]	; (80090b8 <HAL_TIM_PWM_Init+0x190>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d004      	beq.n	8008fd0 <HAL_TIM_PWM_Init+0xa8>
 8008fc6:	f240 419b 	movw	r1, #1179	; 0x49b
 8008fca:	483c      	ldr	r0, [pc, #240]	; (80090bc <HAL_TIM_PWM_Init+0x194>)
 8008fcc:	f7f9 fe43 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d014      	beq.n	8009002 <HAL_TIM_PWM_Init+0xda>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	2b10      	cmp	r3, #16
 8008fde:	d010      	beq.n	8009002 <HAL_TIM_PWM_Init+0xda>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	d00c      	beq.n	8009002 <HAL_TIM_PWM_Init+0xda>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	2b40      	cmp	r3, #64	; 0x40
 8008fee:	d008      	beq.n	8009002 <HAL_TIM_PWM_Init+0xda>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	2b60      	cmp	r3, #96	; 0x60
 8008ff6:	d004      	beq.n	8009002 <HAL_TIM_PWM_Init+0xda>
 8008ff8:	f240 419c 	movw	r1, #1180	; 0x49c
 8008ffc:	482f      	ldr	r0, [pc, #188]	; (80090bc <HAL_TIM_PWM_Init+0x194>)
 8008ffe:	f7f9 fe2a 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00e      	beq.n	8009028 <HAL_TIM_PWM_Init+0x100>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009012:	d009      	beq.n	8009028 <HAL_TIM_PWM_Init+0x100>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800901c:	d004      	beq.n	8009028 <HAL_TIM_PWM_Init+0x100>
 800901e:	f240 419d 	movw	r1, #1181	; 0x49d
 8009022:	4826      	ldr	r0, [pc, #152]	; (80090bc <HAL_TIM_PWM_Init+0x194>)
 8009024:	f7f9 fe17 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d008      	beq.n	8009042 <HAL_TIM_PWM_Init+0x11a>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	2b80      	cmp	r3, #128	; 0x80
 8009036:	d004      	beq.n	8009042 <HAL_TIM_PWM_Init+0x11a>
 8009038:	f240 419e 	movw	r1, #1182	; 0x49e
 800903c:	481f      	ldr	r0, [pc, #124]	; (80090bc <HAL_TIM_PWM_Init+0x194>)
 800903e:	f7f9 fe0a 	bl	8002c56 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d106      	bne.n	800905c <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f832 	bl	80090c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3304      	adds	r3, #4
 800906c:	4619      	mov	r1, r3
 800906e:	4610      	mov	r0, r2
 8009070:	f001 f90c 	bl	800a28c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	40010000 	.word	0x40010000
 800908c:	40000400 	.word	0x40000400
 8009090:	40000800 	.word	0x40000800
 8009094:	40000c00 	.word	0x40000c00
 8009098:	40001000 	.word	0x40001000
 800909c:	40001400 	.word	0x40001400
 80090a0:	40010400 	.word	0x40010400
 80090a4:	40014000 	.word	0x40014000
 80090a8:	40014400 	.word	0x40014400
 80090ac:	40014800 	.word	0x40014800
 80090b0:	40001800 	.word	0x40001800
 80090b4:	40001c00 	.word	0x40001c00
 80090b8:	40002000 	.word	0x40002000
 80090bc:	0800dd6c 	.word	0x0800dd6c

080090c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a6d      	ldr	r2, [pc, #436]	; (8009298 <HAL_TIM_PWM_Start+0x1c4>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d10f      	bne.n	8009108 <HAL_TIM_PWM_Start+0x34>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 809f 	beq.w	800922e <HAL_TIM_PWM_Start+0x15a>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	f000 809b 	beq.w	800922e <HAL_TIM_PWM_Start+0x15a>
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2b08      	cmp	r3, #8
 80090fc:	f000 8097 	beq.w	800922e <HAL_TIM_PWM_Start+0x15a>
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	2b0c      	cmp	r3, #12
 8009104:	f000 8093 	beq.w	800922e <HAL_TIM_PWM_Start+0x15a>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009110:	d10e      	bne.n	8009130 <HAL_TIM_PWM_Start+0x5c>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 808a 	beq.w	800922e <HAL_TIM_PWM_Start+0x15a>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b04      	cmp	r3, #4
 800911e:	f000 8086 	beq.w	800922e <HAL_TIM_PWM_Start+0x15a>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b08      	cmp	r3, #8
 8009126:	f000 8082 	beq.w	800922e <HAL_TIM_PWM_Start+0x15a>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b0c      	cmp	r3, #12
 800912e:	d07e      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a59      	ldr	r2, [pc, #356]	; (800929c <HAL_TIM_PWM_Start+0x1c8>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d10b      	bne.n	8009152 <HAL_TIM_PWM_Start+0x7e>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d076      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b04      	cmp	r3, #4
 8009144:	d073      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b08      	cmp	r3, #8
 800914a:	d070      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	2b0c      	cmp	r3, #12
 8009150:	d06d      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a52      	ldr	r2, [pc, #328]	; (80092a0 <HAL_TIM_PWM_Start+0x1cc>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d10b      	bne.n	8009174 <HAL_TIM_PWM_Start+0xa0>
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d065      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b04      	cmp	r3, #4
 8009166:	d062      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b08      	cmp	r3, #8
 800916c:	d05f      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	2b0c      	cmp	r3, #12
 8009172:	d05c      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a4a      	ldr	r2, [pc, #296]	; (80092a4 <HAL_TIM_PWM_Start+0x1d0>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d10b      	bne.n	8009196 <HAL_TIM_PWM_Start+0xc2>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d054      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	2b04      	cmp	r3, #4
 8009188:	d051      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b08      	cmp	r3, #8
 800918e:	d04e      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2b0c      	cmp	r3, #12
 8009194:	d04b      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a43      	ldr	r2, [pc, #268]	; (80092a8 <HAL_TIM_PWM_Start+0x1d4>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d10b      	bne.n	80091b8 <HAL_TIM_PWM_Start+0xe4>
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d043      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b04      	cmp	r3, #4
 80091aa:	d040      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	2b08      	cmp	r3, #8
 80091b0:	d03d      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b0c      	cmp	r3, #12
 80091b6:	d03a      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a3b      	ldr	r2, [pc, #236]	; (80092ac <HAL_TIM_PWM_Start+0x1d8>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d105      	bne.n	80091ce <HAL_TIM_PWM_Start+0xfa>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d032      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	d02f      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a37      	ldr	r2, [pc, #220]	; (80092b0 <HAL_TIM_PWM_Start+0x1dc>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d102      	bne.n	80091de <HAL_TIM_PWM_Start+0x10a>
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d027      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a34      	ldr	r2, [pc, #208]	; (80092b4 <HAL_TIM_PWM_Start+0x1e0>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d102      	bne.n	80091ee <HAL_TIM_PWM_Start+0x11a>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d01f      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a31      	ldr	r2, [pc, #196]	; (80092b8 <HAL_TIM_PWM_Start+0x1e4>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d105      	bne.n	8009204 <HAL_TIM_PWM_Start+0x130>
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d017      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b04      	cmp	r3, #4
 8009202:	d014      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a2c      	ldr	r2, [pc, #176]	; (80092bc <HAL_TIM_PWM_Start+0x1e8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d102      	bne.n	8009214 <HAL_TIM_PWM_Start+0x140>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00c      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a29      	ldr	r2, [pc, #164]	; (80092c0 <HAL_TIM_PWM_Start+0x1ec>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d102      	bne.n	8009224 <HAL_TIM_PWM_Start+0x150>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <HAL_TIM_PWM_Start+0x15a>
 8009224:	f240 5113 	movw	r1, #1299	; 0x513
 8009228:	4826      	ldr	r0, [pc, #152]	; (80092c4 <HAL_TIM_PWM_Start+0x1f0>)
 800922a:	f7f9 fd14 	bl	8002c56 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2201      	movs	r2, #1
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	4618      	mov	r0, r3
 8009238:	f001 fcc6 	bl	800abc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a15      	ldr	r2, [pc, #84]	; (8009298 <HAL_TIM_PWM_Start+0x1c4>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d004      	beq.n	8009250 <HAL_TIM_PWM_Start+0x17c>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a17      	ldr	r2, [pc, #92]	; (80092a8 <HAL_TIM_PWM_Start+0x1d4>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d101      	bne.n	8009254 <HAL_TIM_PWM_Start+0x180>
 8009250:	2301      	movs	r3, #1
 8009252:	e000      	b.n	8009256 <HAL_TIM_PWM_Start+0x182>
 8009254:	2300      	movs	r3, #0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <HAL_TIM_PWM_Start+0x196>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009268:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f003 0307 	and.w	r3, r3, #7
 8009274:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b06      	cmp	r3, #6
 800927a:	d007      	beq.n	800928c <HAL_TIM_PWM_Start+0x1b8>
  {
    __HAL_TIM_ENABLE(htim);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0201 	orr.w	r2, r2, #1
 800928a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	40010000 	.word	0x40010000
 800929c:	40000400 	.word	0x40000400
 80092a0:	40000800 	.word	0x40000800
 80092a4:	40000c00 	.word	0x40000c00
 80092a8:	40010400 	.word	0x40010400
 80092ac:	40014000 	.word	0x40014000
 80092b0:	40014400 	.word	0x40014400
 80092b4:	40014800 	.word	0x40014800
 80092b8:	40001800 	.word	0x40001800
 80092bc:	40001c00 	.word	0x40001c00
 80092c0:	40002000 	.word	0x40002000
 80092c4:	0800dd6c 	.word	0x0800dd6c

080092c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e0a1      	b.n	800941e <HAL_TIM_IC_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a52      	ldr	r2, [pc, #328]	; (8009428 <HAL_TIM_IC_Init+0x160>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d045      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ec:	d040      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a4e      	ldr	r2, [pc, #312]	; (800942c <HAL_TIM_IC_Init+0x164>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d03b      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a4c      	ldr	r2, [pc, #304]	; (8009430 <HAL_TIM_IC_Init+0x168>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d036      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a4b      	ldr	r2, [pc, #300]	; (8009434 <HAL_TIM_IC_Init+0x16c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d031      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a49      	ldr	r2, [pc, #292]	; (8009438 <HAL_TIM_IC_Init+0x170>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d02c      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a48      	ldr	r2, [pc, #288]	; (800943c <HAL_TIM_IC_Init+0x174>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d027      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a46      	ldr	r2, [pc, #280]	; (8009440 <HAL_TIM_IC_Init+0x178>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d022      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a45      	ldr	r2, [pc, #276]	; (8009444 <HAL_TIM_IC_Init+0x17c>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d01d      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a43      	ldr	r2, [pc, #268]	; (8009448 <HAL_TIM_IC_Init+0x180>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d018      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a42      	ldr	r2, [pc, #264]	; (800944c <HAL_TIM_IC_Init+0x184>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d013      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a40      	ldr	r2, [pc, #256]	; (8009450 <HAL_TIM_IC_Init+0x188>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d00e      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a3f      	ldr	r2, [pc, #252]	; (8009454 <HAL_TIM_IC_Init+0x18c>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d009      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a3d      	ldr	r2, [pc, #244]	; (8009458 <HAL_TIM_IC_Init+0x190>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d004      	beq.n	8009370 <HAL_TIM_IC_Init+0xa8>
 8009366:	f240 61d9 	movw	r1, #1753	; 0x6d9
 800936a:	483c      	ldr	r0, [pc, #240]	; (800945c <HAL_TIM_IC_Init+0x194>)
 800936c:	f7f9 fc73 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d014      	beq.n	80093a2 <HAL_TIM_IC_Init+0xda>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	2b10      	cmp	r3, #16
 800937e:	d010      	beq.n	80093a2 <HAL_TIM_IC_Init+0xda>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b20      	cmp	r3, #32
 8009386:	d00c      	beq.n	80093a2 <HAL_TIM_IC_Init+0xda>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	2b40      	cmp	r3, #64	; 0x40
 800938e:	d008      	beq.n	80093a2 <HAL_TIM_IC_Init+0xda>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	2b60      	cmp	r3, #96	; 0x60
 8009396:	d004      	beq.n	80093a2 <HAL_TIM_IC_Init+0xda>
 8009398:	f240 61da 	movw	r1, #1754	; 0x6da
 800939c:	482f      	ldr	r0, [pc, #188]	; (800945c <HAL_TIM_IC_Init+0x194>)
 800939e:	f7f9 fc5a 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00e      	beq.n	80093c8 <HAL_TIM_IC_Init+0x100>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093b2:	d009      	beq.n	80093c8 <HAL_TIM_IC_Init+0x100>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093bc:	d004      	beq.n	80093c8 <HAL_TIM_IC_Init+0x100>
 80093be:	f240 61db 	movw	r1, #1755	; 0x6db
 80093c2:	4826      	ldr	r0, [pc, #152]	; (800945c <HAL_TIM_IC_Init+0x194>)
 80093c4:	f7f9 fc47 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d008      	beq.n	80093e2 <HAL_TIM_IC_Init+0x11a>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	2b80      	cmp	r3, #128	; 0x80
 80093d6:	d004      	beq.n	80093e2 <HAL_TIM_IC_Init+0x11a>
 80093d8:	f240 61dc 	movw	r1, #1756	; 0x6dc
 80093dc:	481f      	ldr	r0, [pc, #124]	; (800945c <HAL_TIM_IC_Init+0x194>)
 80093de:	f7f9 fc3a 	bl	8002c56 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d106      	bne.n	80093fc <HAL_TIM_IC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f832 	bl	8009460 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3304      	adds	r3, #4
 800940c:	4619      	mov	r1, r3
 800940e:	4610      	mov	r0, r2
 8009410:	f000 ff3c 	bl	800a28c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	40010000 	.word	0x40010000
 800942c:	40000400 	.word	0x40000400
 8009430:	40000800 	.word	0x40000800
 8009434:	40000c00 	.word	0x40000c00
 8009438:	40001000 	.word	0x40001000
 800943c:	40001400 	.word	0x40001400
 8009440:	40010400 	.word	0x40010400
 8009444:	40014000 	.word	0x40014000
 8009448:	40014400 	.word	0x40014400
 800944c:	40014800 	.word	0x40014800
 8009450:	40001800 	.word	0x40001800
 8009454:	40001c00 	.word	0x40001c00
 8009458:	40002000 	.word	0x40002000
 800945c:	0800dd6c 	.word	0x0800dd6c

08009460 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a7c      	ldr	r2, [pc, #496]	; (8009678 <HAL_TIM_IC_ConfigChannel+0x204>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d03b      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009492:	d036      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a78      	ldr	r2, [pc, #480]	; (800967c <HAL_TIM_IC_ConfigChannel+0x208>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d031      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a77      	ldr	r2, [pc, #476]	; (8009680 <HAL_TIM_IC_ConfigChannel+0x20c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d02c      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a75      	ldr	r2, [pc, #468]	; (8009684 <HAL_TIM_IC_ConfigChannel+0x210>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d027      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a74      	ldr	r2, [pc, #464]	; (8009688 <HAL_TIM_IC_ConfigChannel+0x214>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d022      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a72      	ldr	r2, [pc, #456]	; (800968c <HAL_TIM_IC_ConfigChannel+0x218>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d01d      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a71      	ldr	r2, [pc, #452]	; (8009690 <HAL_TIM_IC_ConfigChannel+0x21c>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d018      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a6f      	ldr	r2, [pc, #444]	; (8009694 <HAL_TIM_IC_ConfigChannel+0x220>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d013      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a6e      	ldr	r2, [pc, #440]	; (8009698 <HAL_TIM_IC_ConfigChannel+0x224>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00e      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a6c      	ldr	r2, [pc, #432]	; (800969c <HAL_TIM_IC_ConfigChannel+0x228>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d009      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a6b      	ldr	r2, [pc, #428]	; (80096a0 <HAL_TIM_IC_ConfigChannel+0x22c>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d004      	beq.n	8009502 <HAL_TIM_IC_ConfigChannel+0x8e>
 80094f8:	f640 5189 	movw	r1, #3465	; 0xd89
 80094fc:	4869      	ldr	r0, [pc, #420]	; (80096a4 <HAL_TIM_IC_ConfigChannel+0x230>)
 80094fe:	f7f9 fbaa 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00c      	beq.n	8009524 <HAL_TIM_IC_ConfigChannel+0xb0>
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b02      	cmp	r3, #2
 8009510:	d008      	beq.n	8009524 <HAL_TIM_IC_ConfigChannel+0xb0>
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b0a      	cmp	r3, #10
 8009518:	d004      	beq.n	8009524 <HAL_TIM_IC_ConfigChannel+0xb0>
 800951a:	f640 518a 	movw	r1, #3466	; 0xd8a
 800951e:	4861      	ldr	r0, [pc, #388]	; (80096a4 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009520:	f7f9 fb99 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d00c      	beq.n	8009546 <HAL_TIM_IC_ConfigChannel+0xd2>
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	2b02      	cmp	r3, #2
 8009532:	d008      	beq.n	8009546 <HAL_TIM_IC_ConfigChannel+0xd2>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b03      	cmp	r3, #3
 800953a:	d004      	beq.n	8009546 <HAL_TIM_IC_ConfigChannel+0xd2>
 800953c:	f640 518b 	movw	r1, #3467	; 0xd8b
 8009540:	4858      	ldr	r0, [pc, #352]	; (80096a4 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009542:	f7f9 fb88 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d010      	beq.n	8009570 <HAL_TIM_IC_ConfigChannel+0xfc>
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	2b04      	cmp	r3, #4
 8009554:	d00c      	beq.n	8009570 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	2b08      	cmp	r3, #8
 800955c:	d008      	beq.n	8009570 <HAL_TIM_IC_ConfigChannel+0xfc>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	2b0c      	cmp	r3, #12
 8009564:	d004      	beq.n	8009570 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009566:	f640 518c 	movw	r1, #3468	; 0xd8c
 800956a:	484e      	ldr	r0, [pc, #312]	; (80096a4 <HAL_TIM_IC_ConfigChannel+0x230>)
 800956c:	f7f9 fb73 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	2b0f      	cmp	r3, #15
 8009576:	d904      	bls.n	8009582 <HAL_TIM_IC_ConfigChannel+0x10e>
 8009578:	f640 518d 	movw	r1, #3469	; 0xd8d
 800957c:	4849      	ldr	r0, [pc, #292]	; (80096a4 <HAL_TIM_IC_ConfigChannel+0x230>)
 800957e:	f7f9 fb6a 	bl	8002c56 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009588:	2b01      	cmp	r3, #1
 800958a:	d101      	bne.n	8009590 <HAL_TIM_IC_ConfigChannel+0x11c>
 800958c:	2302      	movs	r3, #2
 800958e:	e115      	b.n	80097bc <HAL_TIM_IC_ConfigChannel+0x348>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2202      	movs	r2, #2
 800959c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d11b      	bne.n	80095de <HAL_TIM_IC_ConfigChannel+0x16a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	6819      	ldr	r1, [r3, #0]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	f001 f943 	bl	800a840 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699a      	ldr	r2, [r3, #24]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 020c 	bic.w	r2, r2, #12
 80095c8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6999      	ldr	r1, [r3, #24]
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	430a      	orrs	r2, r1
 80095da:	619a      	str	r2, [r3, #24]
 80095dc:	e0e5      	b.n	80097aa <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else if (Channel == TIM_CHANNEL_2)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	d161      	bne.n	80096a8 <HAL_TIM_IC_ConfigChannel+0x234>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a23      	ldr	r2, [pc, #140]	; (8009678 <HAL_TIM_IC_ConfigChannel+0x204>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d027      	beq.n	800963e <HAL_TIM_IC_ConfigChannel+0x1ca>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f6:	d022      	beq.n	800963e <HAL_TIM_IC_ConfigChannel+0x1ca>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a1f      	ldr	r2, [pc, #124]	; (800967c <HAL_TIM_IC_ConfigChannel+0x208>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d01d      	beq.n	800963e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a1e      	ldr	r2, [pc, #120]	; (8009680 <HAL_TIM_IC_ConfigChannel+0x20c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d018      	beq.n	800963e <HAL_TIM_IC_ConfigChannel+0x1ca>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a1c      	ldr	r2, [pc, #112]	; (8009684 <HAL_TIM_IC_ConfigChannel+0x210>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d013      	beq.n	800963e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a1b      	ldr	r2, [pc, #108]	; (8009688 <HAL_TIM_IC_ConfigChannel+0x214>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00e      	beq.n	800963e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a19      	ldr	r2, [pc, #100]	; (800968c <HAL_TIM_IC_ConfigChannel+0x218>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d009      	beq.n	800963e <HAL_TIM_IC_ConfigChannel+0x1ca>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a1a      	ldr	r2, [pc, #104]	; (8009698 <HAL_TIM_IC_ConfigChannel+0x224>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d004      	beq.n	800963e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009634:	f640 51a5 	movw	r1, #3493	; 0xda5
 8009638:	481a      	ldr	r0, [pc, #104]	; (80096a4 <HAL_TIM_IC_ConfigChannel+0x230>)
 800963a:	f7f9 fb0c 	bl	8002c56 <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6819      	ldr	r1, [r3, #0]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f001 f99a 	bl	800a986 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	699a      	ldr	r2, [r3, #24]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009660:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6999      	ldr	r1, [r3, #24]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	021a      	lsls	r2, r3, #8
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	619a      	str	r2, [r3, #24]
 8009676:	e098      	b.n	80097aa <HAL_TIM_IC_ConfigChannel+0x336>
 8009678:	40010000 	.word	0x40010000
 800967c:	40000400 	.word	0x40000400
 8009680:	40000800 	.word	0x40000800
 8009684:	40000c00 	.word	0x40000c00
 8009688:	40010400 	.word	0x40010400
 800968c:	40014000 	.word	0x40014000
 8009690:	40014400 	.word	0x40014400
 8009694:	40014800 	.word	0x40014800
 8009698:	40001800 	.word	0x40001800
 800969c:	40001c00 	.word	0x40001c00
 80096a0:	40002000 	.word	0x40002000
 80096a4:	0800dd6c 	.word	0x0800dd6c
  }
  else if (Channel == TIM_CHANNEL_3)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	d13e      	bne.n	800972c <HAL_TIM_IC_ConfigChannel+0x2b8>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a44      	ldr	r2, [pc, #272]	; (80097c4 <HAL_TIM_IC_ConfigChannel+0x350>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d01d      	beq.n	80096f4 <HAL_TIM_IC_ConfigChannel+0x280>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c0:	d018      	beq.n	80096f4 <HAL_TIM_IC_ConfigChannel+0x280>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a40      	ldr	r2, [pc, #256]	; (80097c8 <HAL_TIM_IC_ConfigChannel+0x354>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d013      	beq.n	80096f4 <HAL_TIM_IC_ConfigChannel+0x280>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a3e      	ldr	r2, [pc, #248]	; (80097cc <HAL_TIM_IC_ConfigChannel+0x358>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d00e      	beq.n	80096f4 <HAL_TIM_IC_ConfigChannel+0x280>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a3d      	ldr	r2, [pc, #244]	; (80097d0 <HAL_TIM_IC_ConfigChannel+0x35c>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d009      	beq.n	80096f4 <HAL_TIM_IC_ConfigChannel+0x280>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a3b      	ldr	r2, [pc, #236]	; (80097d4 <HAL_TIM_IC_ConfigChannel+0x360>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d004      	beq.n	80096f4 <HAL_TIM_IC_ConfigChannel+0x280>
 80096ea:	f640 51b5 	movw	r1, #3509	; 0xdb5
 80096ee:	483a      	ldr	r0, [pc, #232]	; (80097d8 <HAL_TIM_IC_ConfigChannel+0x364>)
 80096f0:	f7f9 fab1 	bl	8002c56 <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6818      	ldr	r0, [r3, #0]
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	6819      	ldr	r1, [r3, #0]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	f001 f9ac 	bl	800aa60 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	69da      	ldr	r2, [r3, #28]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 020c 	bic.w	r2, r2, #12
 8009716:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	69d9      	ldr	r1, [r3, #28]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	689a      	ldr	r2, [r3, #8]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	61da      	str	r2, [r3, #28]
 800972a:	e03e      	b.n	80097aa <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a24      	ldr	r2, [pc, #144]	; (80097c4 <HAL_TIM_IC_ConfigChannel+0x350>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d01d      	beq.n	8009772 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800973e:	d018      	beq.n	8009772 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a20      	ldr	r2, [pc, #128]	; (80097c8 <HAL_TIM_IC_ConfigChannel+0x354>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d013      	beq.n	8009772 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a1f      	ldr	r2, [pc, #124]	; (80097cc <HAL_TIM_IC_ConfigChannel+0x358>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d00e      	beq.n	8009772 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a1d      	ldr	r2, [pc, #116]	; (80097d0 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d009      	beq.n	8009772 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a1c      	ldr	r2, [pc, #112]	; (80097d4 <HAL_TIM_IC_ConfigChannel+0x360>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d004      	beq.n	8009772 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009768:	f640 51c5 	movw	r1, #3525	; 0xdc5
 800976c:	481a      	ldr	r0, [pc, #104]	; (80097d8 <HAL_TIM_IC_ConfigChannel+0x364>)
 800976e:	f7f9 fa72 	bl	8002c56 <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6818      	ldr	r0, [r3, #0]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	6819      	ldr	r1, [r3, #0]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	f001 f9a9 	bl	800aad8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	69da      	ldr	r2, [r3, #28]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009794:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69d9      	ldr	r1, [r3, #28]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	021a      	lsls	r2, r3, #8
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	40010000 	.word	0x40010000
 80097c8:	40000400 	.word	0x40000400
 80097cc:	40000800 	.word	0x40000800
 80097d0:	40000c00 	.word	0x40000c00
 80097d4:	40010400 	.word	0x40010400
 80097d8:	0800dd6c 	.word	0x0800dd6c

080097dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d010      	beq.n	8009810 <HAL_TIM_PWM_ConfigChannel+0x34>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d00d      	beq.n	8009810 <HAL_TIM_PWM_ConfigChannel+0x34>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b08      	cmp	r3, #8
 80097f8:	d00a      	beq.n	8009810 <HAL_TIM_PWM_ConfigChannel+0x34>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b0c      	cmp	r3, #12
 80097fe:	d007      	beq.n	8009810 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b3c      	cmp	r3, #60	; 0x3c
 8009804:	d004      	beq.n	8009810 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009806:	f640 51ec 	movw	r1, #3564	; 0xdec
 800980a:	4885      	ldr	r0, [pc, #532]	; (8009a20 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800980c:	f7f9 fa23 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b60      	cmp	r3, #96	; 0x60
 8009816:	d008      	beq.n	800982a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b70      	cmp	r3, #112	; 0x70
 800981e:	d004      	beq.n	800982a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8009820:	f640 51ed 	movw	r1, #3565	; 0xded
 8009824:	487e      	ldr	r0, [pc, #504]	; (8009a20 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009826:	f7f9 fa16 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d008      	beq.n	8009844 <HAL_TIM_PWM_ConfigChannel+0x68>
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	2b02      	cmp	r3, #2
 8009838:	d004      	beq.n	8009844 <HAL_TIM_PWM_ConfigChannel+0x68>
 800983a:	f640 51ee 	movw	r1, #3566	; 0xdee
 800983e:	4878      	ldr	r0, [pc, #480]	; (8009a20 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009840:	f7f9 fa09 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d008      	beq.n	800985e <HAL_TIM_PWM_ConfigChannel+0x82>
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	2b04      	cmp	r3, #4
 8009852:	d004      	beq.n	800985e <HAL_TIM_PWM_ConfigChannel+0x82>
 8009854:	f640 51ef 	movw	r1, #3567	; 0xdef
 8009858:	4871      	ldr	r0, [pc, #452]	; (8009a20 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800985a:	f7f9 f9fc 	bl	8002c56 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009864:	2b01      	cmp	r3, #1
 8009866:	d101      	bne.n	800986c <HAL_TIM_PWM_ConfigChannel+0x90>
 8009868:	2302      	movs	r3, #2
 800986a:	e182      	b.n	8009b72 <HAL_TIM_PWM_ConfigChannel+0x396>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2202      	movs	r2, #2
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b0c      	cmp	r3, #12
 8009880:	f200 816d 	bhi.w	8009b5e <HAL_TIM_PWM_ConfigChannel+0x382>
 8009884:	a201      	add	r2, pc, #4	; (adr r2, 800988c <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8009886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988a:	bf00      	nop
 800988c:	080098c1 	.word	0x080098c1
 8009890:	08009b5f 	.word	0x08009b5f
 8009894:	08009b5f 	.word	0x08009b5f
 8009898:	08009b5f 	.word	0x08009b5f
 800989c:	08009983 	.word	0x08009983
 80098a0:	08009b5f 	.word	0x08009b5f
 80098a4:	08009b5f 	.word	0x08009b5f
 80098a8:	08009b5f 	.word	0x08009b5f
 80098ac:	08009a51 	.word	0x08009a51
 80098b0:	08009b5f 	.word	0x08009b5f
 80098b4:	08009b5f 	.word	0x08009b5f
 80098b8:	08009b5f 	.word	0x08009b5f
 80098bc:	08009ad7 	.word	0x08009ad7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a57      	ldr	r2, [pc, #348]	; (8009a24 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d03b      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d2:	d036      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a53      	ldr	r2, [pc, #332]	; (8009a28 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d031      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a52      	ldr	r2, [pc, #328]	; (8009a2c <HAL_TIM_PWM_ConfigChannel+0x250>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d02c      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a50      	ldr	r2, [pc, #320]	; (8009a30 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d027      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a4f      	ldr	r2, [pc, #316]	; (8009a34 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d022      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a4d      	ldr	r2, [pc, #308]	; (8009a38 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d01d      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a4c      	ldr	r2, [pc, #304]	; (8009a3c <HAL_TIM_PWM_ConfigChannel+0x260>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d018      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a4a      	ldr	r2, [pc, #296]	; (8009a40 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d013      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a49      	ldr	r2, [pc, #292]	; (8009a44 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00e      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a47      	ldr	r2, [pc, #284]	; (8009a48 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d009      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a46      	ldr	r2, [pc, #280]	; (8009a4c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d004      	beq.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009938:	f640 51fb 	movw	r1, #3579	; 0xdfb
 800993c:	4838      	ldr	r0, [pc, #224]	; (8009a20 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800993e:	f7f9 f98a 	bl	8002c56 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	4618      	mov	r0, r3
 800994a:	f000 fd3f 	bl	800a3cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	699a      	ldr	r2, [r3, #24]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f042 0208 	orr.w	r2, r2, #8
 800995c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	699a      	ldr	r2, [r3, #24]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f022 0204 	bic.w	r2, r2, #4
 800996c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6999      	ldr	r1, [r3, #24]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	691a      	ldr	r2, [r3, #16]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	619a      	str	r2, [r3, #24]
      break;
 8009980:	e0ee      	b.n	8009b60 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a27      	ldr	r2, [pc, #156]	; (8009a24 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d027      	beq.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x200>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009994:	d022      	beq.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x200>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a23      	ldr	r2, [pc, #140]	; (8009a28 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d01d      	beq.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x200>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a21      	ldr	r2, [pc, #132]	; (8009a2c <HAL_TIM_PWM_ConfigChannel+0x250>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d018      	beq.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x200>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a20      	ldr	r2, [pc, #128]	; (8009a30 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d013      	beq.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x200>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a1e      	ldr	r2, [pc, #120]	; (8009a34 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d00e      	beq.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x200>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a1d      	ldr	r2, [pc, #116]	; (8009a38 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d009      	beq.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x200>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a1d      	ldr	r2, [pc, #116]	; (8009a44 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d004      	beq.n	80099dc <HAL_TIM_PWM_ConfigChannel+0x200>
 80099d2:	f640 610c 	movw	r1, #3596	; 0xe0c
 80099d6:	4812      	ldr	r0, [pc, #72]	; (8009a20 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80099d8:	f7f9 f93d 	bl	8002c56 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68b9      	ldr	r1, [r7, #8]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fd8c 	bl	800a500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6999      	ldr	r1, [r3, #24]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	021a      	lsls	r2, r3, #8
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	619a      	str	r2, [r3, #24]
      break;
 8009a1c:	e0a0      	b.n	8009b60 <HAL_TIM_PWM_ConfigChannel+0x384>
 8009a1e:	bf00      	nop
 8009a20:	0800dd6c 	.word	0x0800dd6c
 8009a24:	40010000 	.word	0x40010000
 8009a28:	40000400 	.word	0x40000400
 8009a2c:	40000800 	.word	0x40000800
 8009a30:	40000c00 	.word	0x40000c00
 8009a34:	40010400 	.word	0x40010400
 8009a38:	40014000 	.word	0x40014000
 8009a3c:	40014400 	.word	0x40014400
 8009a40:	40014800 	.word	0x40014800
 8009a44:	40001800 	.word	0x40001800
 8009a48:	40001c00 	.word	0x40001c00
 8009a4c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a49      	ldr	r2, [pc, #292]	; (8009b7c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d01d      	beq.n	8009a96 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a62:	d018      	beq.n	8009a96 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a45      	ldr	r2, [pc, #276]	; (8009b80 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d013      	beq.n	8009a96 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a44      	ldr	r2, [pc, #272]	; (8009b84 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d00e      	beq.n	8009a96 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a42      	ldr	r2, [pc, #264]	; (8009b88 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d009      	beq.n	8009a96 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a41      	ldr	r2, [pc, #260]	; (8009b8c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d004      	beq.n	8009a96 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009a8c:	f640 611d 	movw	r1, #3613	; 0xe1d
 8009a90:	483f      	ldr	r0, [pc, #252]	; (8009b90 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8009a92:	f7f9 f8e0 	bl	8002c56 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68b9      	ldr	r1, [r7, #8]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 fdcd 	bl	800a63c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	69da      	ldr	r2, [r3, #28]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f042 0208 	orr.w	r2, r2, #8
 8009ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69da      	ldr	r2, [r3, #28]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f022 0204 	bic.w	r2, r2, #4
 8009ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	69d9      	ldr	r1, [r3, #28]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	691a      	ldr	r2, [r3, #16]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	61da      	str	r2, [r3, #28]
      break;
 8009ad4:	e044      	b.n	8009b60 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a28      	ldr	r2, [pc, #160]	; (8009b7c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d01d      	beq.n	8009b1c <HAL_TIM_PWM_ConfigChannel+0x340>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae8:	d018      	beq.n	8009b1c <HAL_TIM_PWM_ConfigChannel+0x340>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a24      	ldr	r2, [pc, #144]	; (8009b80 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d013      	beq.n	8009b1c <HAL_TIM_PWM_ConfigChannel+0x340>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a22      	ldr	r2, [pc, #136]	; (8009b84 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d00e      	beq.n	8009b1c <HAL_TIM_PWM_ConfigChannel+0x340>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a21      	ldr	r2, [pc, #132]	; (8009b88 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d009      	beq.n	8009b1c <HAL_TIM_PWM_ConfigChannel+0x340>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a1f      	ldr	r2, [pc, #124]	; (8009b8c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d004      	beq.n	8009b1c <HAL_TIM_PWM_ConfigChannel+0x340>
 8009b12:	f640 612e 	movw	r1, #3630	; 0xe2e
 8009b16:	481e      	ldr	r0, [pc, #120]	; (8009b90 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8009b18:	f7f9 f89d 	bl	8002c56 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68b9      	ldr	r1, [r7, #8]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 fe28 	bl	800a778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	69da      	ldr	r2, [r3, #28]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	69da      	ldr	r2, [r3, #28]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	69d9      	ldr	r1, [r3, #28]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	021a      	lsls	r2, r3, #8
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	61da      	str	r2, [r3, #28]
      break;
 8009b5c:	e000      	b.n	8009b60 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      break;
 8009b5e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	40010000 	.word	0x40010000
 8009b80:	40000400 	.word	0x40000400
 8009b84:	40000800 	.word	0x40000800
 8009b88:	40000c00 	.word	0x40000c00
 8009b8c:	40010400 	.word	0x40010400
 8009b90:	0800dd6c 	.word	0x0800dd6c

08009b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d101      	bne.n	8009bac <HAL_TIM_ConfigClockSource+0x18>
 8009ba8:	2302      	movs	r3, #2
 8009baa:	e35b      	b.n	800a264 <HAL_TIM_ConfigClockSource+0x6d0>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc4:	d029      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x86>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bce:	d024      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x86>
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d020      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x86>
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b10      	cmp	r3, #16
 8009bde:	d01c      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x86>
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	d018      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x86>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b30      	cmp	r3, #48	; 0x30
 8009bee:	d014      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x86>
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b40      	cmp	r3, #64	; 0x40
 8009bf6:	d010      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x86>
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b50      	cmp	r3, #80	; 0x50
 8009bfe:	d00c      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x86>
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b60      	cmp	r3, #96	; 0x60
 8009c06:	d008      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x86>
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b70      	cmp	r3, #112	; 0x70
 8009c0e:	d004      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x86>
 8009c10:	f241 118b 	movw	r1, #4491	; 0x118b
 8009c14:	4893      	ldr	r0, [pc, #588]	; (8009e64 <HAL_TIM_ConfigClockSource+0x2d0>)
 8009c16:	f7f9 f81e 	bl	8002c56 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c30:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c42:	f000 812b 	beq.w	8009e9c <HAL_TIM_ConfigClockSource+0x308>
 8009c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c4a:	f200 82ff 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x6b8>
 8009c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c52:	d02e      	beq.n	8009cb2 <HAL_TIM_ConfigClockSource+0x11e>
 8009c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c58:	f200 82f8 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x6b8>
 8009c5c:	2b70      	cmp	r3, #112	; 0x70
 8009c5e:	f000 8082 	beq.w	8009d66 <HAL_TIM_ConfigClockSource+0x1d2>
 8009c62:	2b70      	cmp	r3, #112	; 0x70
 8009c64:	f200 82f2 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x6b8>
 8009c68:	2b60      	cmp	r3, #96	; 0x60
 8009c6a:	f000 81e8 	beq.w	800a03e <HAL_TIM_ConfigClockSource+0x4aa>
 8009c6e:	2b60      	cmp	r3, #96	; 0x60
 8009c70:	f200 82ec 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x6b8>
 8009c74:	2b50      	cmp	r3, #80	; 0x50
 8009c76:	f000 8182 	beq.w	8009f7e <HAL_TIM_ConfigClockSource+0x3ea>
 8009c7a:	2b50      	cmp	r3, #80	; 0x50
 8009c7c:	f200 82e6 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x6b8>
 8009c80:	2b40      	cmp	r3, #64	; 0x40
 8009c82:	f000 824d 	beq.w	800a120 <HAL_TIM_ConfigClockSource+0x58c>
 8009c86:	2b40      	cmp	r3, #64	; 0x40
 8009c88:	f200 82e0 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x6b8>
 8009c8c:	2b30      	cmp	r3, #48	; 0x30
 8009c8e:	f000 82a7 	beq.w	800a1e0 <HAL_TIM_ConfigClockSource+0x64c>
 8009c92:	2b30      	cmp	r3, #48	; 0x30
 8009c94:	f200 82da 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x6b8>
 8009c98:	2b20      	cmp	r3, #32
 8009c9a:	f000 82a1 	beq.w	800a1e0 <HAL_TIM_ConfigClockSource+0x64c>
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	f200 82d4 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x6b8>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 829b 	beq.w	800a1e0 <HAL_TIM_ConfigClockSource+0x64c>
 8009caa:	2b10      	cmp	r3, #16
 8009cac:	f000 8298 	beq.w	800a1e0 <HAL_TIM_ConfigClockSource+0x64c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009cb0:	e2cc      	b.n	800a24c <HAL_TIM_ConfigClockSource+0x6b8>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a6c      	ldr	r2, [pc, #432]	; (8009e68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	f000 82c9 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cc6:	f000 82c3 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a67      	ldr	r2, [pc, #412]	; (8009e6c <HAL_TIM_ConfigClockSource+0x2d8>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	f000 82bd 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a65      	ldr	r2, [pc, #404]	; (8009e70 <HAL_TIM_ConfigClockSource+0x2dc>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	f000 82b7 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a63      	ldr	r2, [pc, #396]	; (8009e74 <HAL_TIM_ConfigClockSource+0x2e0>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	f000 82b1 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a61      	ldr	r2, [pc, #388]	; (8009e78 <HAL_TIM_ConfigClockSource+0x2e4>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	f000 82ab 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a5f      	ldr	r2, [pc, #380]	; (8009e7c <HAL_TIM_ConfigClockSource+0x2e8>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	f000 82a5 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a5d      	ldr	r2, [pc, #372]	; (8009e80 <HAL_TIM_ConfigClockSource+0x2ec>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	f000 829f 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a5b      	ldr	r2, [pc, #364]	; (8009e84 <HAL_TIM_ConfigClockSource+0x2f0>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	f000 8299 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a59      	ldr	r2, [pc, #356]	; (8009e88 <HAL_TIM_ConfigClockSource+0x2f4>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	f000 8293 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a57      	ldr	r2, [pc, #348]	; (8009e8c <HAL_TIM_ConfigClockSource+0x2f8>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	f000 828d 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a55      	ldr	r2, [pc, #340]	; (8009e90 <HAL_TIM_ConfigClockSource+0x2fc>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	f000 8287 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a53      	ldr	r2, [pc, #332]	; (8009e94 <HAL_TIM_ConfigClockSource+0x300>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	f000 8281 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a51      	ldr	r2, [pc, #324]	; (8009e98 <HAL_TIM_ConfigClockSource+0x304>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	f000 827b 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
 8009d5a:	f241 1197 	movw	r1, #4503	; 0x1197
 8009d5e:	4841      	ldr	r0, [pc, #260]	; (8009e64 <HAL_TIM_ConfigClockSource+0x2d0>)
 8009d60:	f7f8 ff79 	bl	8002c56 <assert_failed>
      break;
 8009d64:	e274      	b.n	800a250 <HAL_TIM_ConfigClockSource+0x6bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a3f      	ldr	r2, [pc, #252]	; (8009e68 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d027      	beq.n	8009dc0 <HAL_TIM_ConfigClockSource+0x22c>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d78:	d022      	beq.n	8009dc0 <HAL_TIM_ConfigClockSource+0x22c>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a3b      	ldr	r2, [pc, #236]	; (8009e6c <HAL_TIM_ConfigClockSource+0x2d8>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d01d      	beq.n	8009dc0 <HAL_TIM_ConfigClockSource+0x22c>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a39      	ldr	r2, [pc, #228]	; (8009e70 <HAL_TIM_ConfigClockSource+0x2dc>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d018      	beq.n	8009dc0 <HAL_TIM_ConfigClockSource+0x22c>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a38      	ldr	r2, [pc, #224]	; (8009e74 <HAL_TIM_ConfigClockSource+0x2e0>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d013      	beq.n	8009dc0 <HAL_TIM_ConfigClockSource+0x22c>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a38      	ldr	r2, [pc, #224]	; (8009e80 <HAL_TIM_ConfigClockSource+0x2ec>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d00e      	beq.n	8009dc0 <HAL_TIM_ConfigClockSource+0x22c>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a37      	ldr	r2, [pc, #220]	; (8009e84 <HAL_TIM_ConfigClockSource+0x2f0>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d009      	beq.n	8009dc0 <HAL_TIM_ConfigClockSource+0x22c>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a37      	ldr	r2, [pc, #220]	; (8009e90 <HAL_TIM_ConfigClockSource+0x2fc>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d004      	beq.n	8009dc0 <HAL_TIM_ConfigClockSource+0x22c>
 8009db6:	f241 119e 	movw	r1, #4510	; 0x119e
 8009dba:	482a      	ldr	r0, [pc, #168]	; (8009e64 <HAL_TIM_ConfigClockSource+0x2d0>)
 8009dbc:	f7f8 ff4b 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d013      	beq.n	8009df0 <HAL_TIM_ConfigClockSource+0x25c>
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dd0:	d00e      	beq.n	8009df0 <HAL_TIM_ConfigClockSource+0x25c>
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dda:	d009      	beq.n	8009df0 <HAL_TIM_ConfigClockSource+0x25c>
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009de4:	d004      	beq.n	8009df0 <HAL_TIM_ConfigClockSource+0x25c>
 8009de6:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8009dea:	481e      	ldr	r0, [pc, #120]	; (8009e64 <HAL_TIM_ConfigClockSource+0x2d0>)
 8009dec:	f7f8 ff33 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009df8:	d014      	beq.n	8009e24 <HAL_TIM_ConfigClockSource+0x290>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d010      	beq.n	8009e24 <HAL_TIM_ConfigClockSource+0x290>
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00c      	beq.n	8009e24 <HAL_TIM_ConfigClockSource+0x290>
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d008      	beq.n	8009e24 <HAL_TIM_ConfigClockSource+0x290>
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2b0a      	cmp	r3, #10
 8009e18:	d004      	beq.n	8009e24 <HAL_TIM_ConfigClockSource+0x290>
 8009e1a:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8009e1e:	4811      	ldr	r0, [pc, #68]	; (8009e64 <HAL_TIM_ConfigClockSource+0x2d0>)
 8009e20:	f7f8 ff19 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	2b0f      	cmp	r3, #15
 8009e2a:	d904      	bls.n	8009e36 <HAL_TIM_ConfigClockSource+0x2a2>
 8009e2c:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8009e30:	480c      	ldr	r0, [pc, #48]	; (8009e64 <HAL_TIM_ConfigClockSource+0x2d0>)
 8009e32:	f7f8 ff10 	bl	8002c56 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	6899      	ldr	r1, [r3, #8]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f000 fe9f 	bl	800ab88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	609a      	str	r2, [r3, #8]
      break;
 8009e62:	e1f6      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x6be>
 8009e64:	0800dd6c 	.word	0x0800dd6c
 8009e68:	40010000 	.word	0x40010000
 8009e6c:	40000400 	.word	0x40000400
 8009e70:	40000800 	.word	0x40000800
 8009e74:	40000c00 	.word	0x40000c00
 8009e78:	40001000 	.word	0x40001000
 8009e7c:	40001400 	.word	0x40001400
 8009e80:	40010400 	.word	0x40010400
 8009e84:	40014000 	.word	0x40014000
 8009e88:	40014400 	.word	0x40014400
 8009e8c:	40014800 	.word	0x40014800
 8009e90:	40001800 	.word	0x40001800
 8009e94:	40001c00 	.word	0x40001c00
 8009e98:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a97      	ldr	r2, [pc, #604]	; (800a100 <HAL_TIM_ConfigClockSource+0x56c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d01d      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x34e>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eae:	d018      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x34e>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a93      	ldr	r2, [pc, #588]	; (800a104 <HAL_TIM_ConfigClockSource+0x570>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d013      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x34e>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a92      	ldr	r2, [pc, #584]	; (800a108 <HAL_TIM_ConfigClockSource+0x574>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d00e      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x34e>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a90      	ldr	r2, [pc, #576]	; (800a10c <HAL_TIM_ConfigClockSource+0x578>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d009      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x34e>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a8f      	ldr	r2, [pc, #572]	; (800a110 <HAL_TIM_ConfigClockSource+0x57c>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d004      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x34e>
 8009ed8:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8009edc:	488d      	ldr	r0, [pc, #564]	; (800a114 <HAL_TIM_ConfigClockSource+0x580>)
 8009ede:	f7f8 feba 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d013      	beq.n	8009f12 <HAL_TIM_ConfigClockSource+0x37e>
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef2:	d00e      	beq.n	8009f12 <HAL_TIM_ConfigClockSource+0x37e>
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009efc:	d009      	beq.n	8009f12 <HAL_TIM_ConfigClockSource+0x37e>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f06:	d004      	beq.n	8009f12 <HAL_TIM_ConfigClockSource+0x37e>
 8009f08:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8009f0c:	4881      	ldr	r0, [pc, #516]	; (800a114 <HAL_TIM_ConfigClockSource+0x580>)
 8009f0e:	f7f8 fea2 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f1a:	d014      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x3b2>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d010      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x3b2>
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00c      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x3b2>
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d008      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x3b2>
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	2b0a      	cmp	r3, #10
 8009f3a:	d004      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x3b2>
 8009f3c:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8009f40:	4874      	ldr	r0, [pc, #464]	; (800a114 <HAL_TIM_ConfigClockSource+0x580>)
 8009f42:	f7f8 fe88 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	2b0f      	cmp	r3, #15
 8009f4c:	d904      	bls.n	8009f58 <HAL_TIM_ConfigClockSource+0x3c4>
 8009f4e:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8009f52:	4870      	ldr	r0, [pc, #448]	; (800a114 <HAL_TIM_ConfigClockSource+0x580>)
 8009f54:	f7f8 fe7f 	bl	8002c56 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6818      	ldr	r0, [r3, #0]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	6899      	ldr	r1, [r3, #8]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	685a      	ldr	r2, [r3, #4]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	f000 fe0e 	bl	800ab88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689a      	ldr	r2, [r3, #8]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f7a:	609a      	str	r2, [r3, #8]
      break;
 8009f7c:	e169      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a5f      	ldr	r2, [pc, #380]	; (800a100 <HAL_TIM_ConfigClockSource+0x56c>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d027      	beq.n	8009fd8 <HAL_TIM_ConfigClockSource+0x444>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f90:	d022      	beq.n	8009fd8 <HAL_TIM_ConfigClockSource+0x444>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a5b      	ldr	r2, [pc, #364]	; (800a104 <HAL_TIM_ConfigClockSource+0x570>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d01d      	beq.n	8009fd8 <HAL_TIM_ConfigClockSource+0x444>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a59      	ldr	r2, [pc, #356]	; (800a108 <HAL_TIM_ConfigClockSource+0x574>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d018      	beq.n	8009fd8 <HAL_TIM_ConfigClockSource+0x444>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a58      	ldr	r2, [pc, #352]	; (800a10c <HAL_TIM_ConfigClockSource+0x578>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d013      	beq.n	8009fd8 <HAL_TIM_ConfigClockSource+0x444>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a56      	ldr	r2, [pc, #344]	; (800a110 <HAL_TIM_ConfigClockSource+0x57c>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d00e      	beq.n	8009fd8 <HAL_TIM_ConfigClockSource+0x444>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a56      	ldr	r2, [pc, #344]	; (800a118 <HAL_TIM_ConfigClockSource+0x584>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d009      	beq.n	8009fd8 <HAL_TIM_ConfigClockSource+0x444>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a54      	ldr	r2, [pc, #336]	; (800a11c <HAL_TIM_ConfigClockSource+0x588>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d004      	beq.n	8009fd8 <HAL_TIM_ConfigClockSource+0x444>
 8009fce:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8009fd2:	4850      	ldr	r0, [pc, #320]	; (800a114 <HAL_TIM_ConfigClockSource+0x580>)
 8009fd4:	f7f8 fe3f 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fe0:	d014      	beq.n	800a00c <HAL_TIM_ConfigClockSource+0x478>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d010      	beq.n	800a00c <HAL_TIM_ConfigClockSource+0x478>
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00c      	beq.n	800a00c <HAL_TIM_ConfigClockSource+0x478>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d008      	beq.n	800a00c <HAL_TIM_ConfigClockSource+0x478>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	2b0a      	cmp	r3, #10
 800a000:	d004      	beq.n	800a00c <HAL_TIM_ConfigClockSource+0x478>
 800a002:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800a006:	4843      	ldr	r0, [pc, #268]	; (800a114 <HAL_TIM_ConfigClockSource+0x580>)
 800a008:	f7f8 fe25 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	2b0f      	cmp	r3, #15
 800a012:	d904      	bls.n	800a01e <HAL_TIM_ConfigClockSource+0x48a>
 800a014:	f241 11ce 	movw	r1, #4558	; 0x11ce
 800a018:	483e      	ldr	r0, [pc, #248]	; (800a114 <HAL_TIM_ConfigClockSource+0x580>)
 800a01a:	f7f8 fe1c 	bl	8002c56 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	6859      	ldr	r1, [r3, #4]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	461a      	mov	r2, r3
 800a02c:	f000 fc7c 	bl	800a928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2150      	movs	r1, #80	; 0x50
 800a036:	4618      	mov	r0, r3
 800a038:	f000 fd8b 	bl	800ab52 <TIM_ITRx_SetConfig>
      break;
 800a03c:	e109      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a2f      	ldr	r2, [pc, #188]	; (800a100 <HAL_TIM_ConfigClockSource+0x56c>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d027      	beq.n	800a098 <HAL_TIM_ConfigClockSource+0x504>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a050:	d022      	beq.n	800a098 <HAL_TIM_ConfigClockSource+0x504>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a2b      	ldr	r2, [pc, #172]	; (800a104 <HAL_TIM_ConfigClockSource+0x570>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d01d      	beq.n	800a098 <HAL_TIM_ConfigClockSource+0x504>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a29      	ldr	r2, [pc, #164]	; (800a108 <HAL_TIM_ConfigClockSource+0x574>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d018      	beq.n	800a098 <HAL_TIM_ConfigClockSource+0x504>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a28      	ldr	r2, [pc, #160]	; (800a10c <HAL_TIM_ConfigClockSource+0x578>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d013      	beq.n	800a098 <HAL_TIM_ConfigClockSource+0x504>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a26      	ldr	r2, [pc, #152]	; (800a110 <HAL_TIM_ConfigClockSource+0x57c>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00e      	beq.n	800a098 <HAL_TIM_ConfigClockSource+0x504>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a26      	ldr	r2, [pc, #152]	; (800a118 <HAL_TIM_ConfigClockSource+0x584>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d009      	beq.n	800a098 <HAL_TIM_ConfigClockSource+0x504>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a24      	ldr	r2, [pc, #144]	; (800a11c <HAL_TIM_ConfigClockSource+0x588>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d004      	beq.n	800a098 <HAL_TIM_ConfigClockSource+0x504>
 800a08e:	f241 11da 	movw	r1, #4570	; 0x11da
 800a092:	4820      	ldr	r0, [pc, #128]	; (800a114 <HAL_TIM_ConfigClockSource+0x580>)
 800a094:	f7f8 fddf 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0a0:	d014      	beq.n	800a0cc <HAL_TIM_ConfigClockSource+0x538>
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d010      	beq.n	800a0cc <HAL_TIM_ConfigClockSource+0x538>
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00c      	beq.n	800a0cc <HAL_TIM_ConfigClockSource+0x538>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d008      	beq.n	800a0cc <HAL_TIM_ConfigClockSource+0x538>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	2b0a      	cmp	r3, #10
 800a0c0:	d004      	beq.n	800a0cc <HAL_TIM_ConfigClockSource+0x538>
 800a0c2:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800a0c6:	4813      	ldr	r0, [pc, #76]	; (800a114 <HAL_TIM_ConfigClockSource+0x580>)
 800a0c8:	f7f8 fdc5 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	2b0f      	cmp	r3, #15
 800a0d2:	d904      	bls.n	800a0de <HAL_TIM_ConfigClockSource+0x54a>
 800a0d4:	f241 11de 	movw	r1, #4574	; 0x11de
 800a0d8:	480e      	ldr	r0, [pc, #56]	; (800a114 <HAL_TIM_ConfigClockSource+0x580>)
 800a0da:	f7f8 fdbc 	bl	8002c56 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	6859      	ldr	r1, [r3, #4]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f000 fc88 	bl	800aa00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2160      	movs	r1, #96	; 0x60
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 fd2b 	bl	800ab52 <TIM_ITRx_SetConfig>
      break;
 800a0fc:	e0a9      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x6be>
 800a0fe:	bf00      	nop
 800a100:	40010000 	.word	0x40010000
 800a104:	40000400 	.word	0x40000400
 800a108:	40000800 	.word	0x40000800
 800a10c:	40000c00 	.word	0x40000c00
 800a110:	40010400 	.word	0x40010400
 800a114:	0800dd6c 	.word	0x0800dd6c
 800a118:	40014000 	.word	0x40014000
 800a11c:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a51      	ldr	r2, [pc, #324]	; (800a26c <HAL_TIM_ConfigClockSource+0x6d8>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d027      	beq.n	800a17a <HAL_TIM_ConfigClockSource+0x5e6>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a132:	d022      	beq.n	800a17a <HAL_TIM_ConfigClockSource+0x5e6>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a4d      	ldr	r2, [pc, #308]	; (800a270 <HAL_TIM_ConfigClockSource+0x6dc>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d01d      	beq.n	800a17a <HAL_TIM_ConfigClockSource+0x5e6>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a4c      	ldr	r2, [pc, #304]	; (800a274 <HAL_TIM_ConfigClockSource+0x6e0>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d018      	beq.n	800a17a <HAL_TIM_ConfigClockSource+0x5e6>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a4a      	ldr	r2, [pc, #296]	; (800a278 <HAL_TIM_ConfigClockSource+0x6e4>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d013      	beq.n	800a17a <HAL_TIM_ConfigClockSource+0x5e6>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a49      	ldr	r2, [pc, #292]	; (800a27c <HAL_TIM_ConfigClockSource+0x6e8>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d00e      	beq.n	800a17a <HAL_TIM_ConfigClockSource+0x5e6>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a47      	ldr	r2, [pc, #284]	; (800a280 <HAL_TIM_ConfigClockSource+0x6ec>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d009      	beq.n	800a17a <HAL_TIM_ConfigClockSource+0x5e6>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a46      	ldr	r2, [pc, #280]	; (800a284 <HAL_TIM_ConfigClockSource+0x6f0>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d004      	beq.n	800a17a <HAL_TIM_ConfigClockSource+0x5e6>
 800a170:	f241 11ea 	movw	r1, #4586	; 0x11ea
 800a174:	4844      	ldr	r0, [pc, #272]	; (800a288 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a176:	f7f8 fd6e 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a182:	d014      	beq.n	800a1ae <HAL_TIM_ConfigClockSource+0x61a>
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d010      	beq.n	800a1ae <HAL_TIM_ConfigClockSource+0x61a>
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00c      	beq.n	800a1ae <HAL_TIM_ConfigClockSource+0x61a>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d008      	beq.n	800a1ae <HAL_TIM_ConfigClockSource+0x61a>
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	2b0a      	cmp	r3, #10
 800a1a2:	d004      	beq.n	800a1ae <HAL_TIM_ConfigClockSource+0x61a>
 800a1a4:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800a1a8:	4837      	ldr	r0, [pc, #220]	; (800a288 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a1aa:	f7f8 fd54 	bl	8002c56 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	2b0f      	cmp	r3, #15
 800a1b4:	d904      	bls.n	800a1c0 <HAL_TIM_ConfigClockSource+0x62c>
 800a1b6:	f241 11ee 	movw	r1, #4590	; 0x11ee
 800a1ba:	4833      	ldr	r0, [pc, #204]	; (800a288 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a1bc:	f7f8 fd4b 	bl	8002c56 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6818      	ldr	r0, [r3, #0]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	6859      	ldr	r1, [r3, #4]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	f000 fbab 	bl	800a928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2140      	movs	r1, #64	; 0x40
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 fcba 	bl	800ab52 <TIM_ITRx_SetConfig>
      break;
 800a1de:	e038      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a21      	ldr	r2, [pc, #132]	; (800a26c <HAL_TIM_ConfigClockSource+0x6d8>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d027      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x6a6>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1f2:	d022      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x6a6>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a1d      	ldr	r2, [pc, #116]	; (800a270 <HAL_TIM_ConfigClockSource+0x6dc>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d01d      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x6a6>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a1c      	ldr	r2, [pc, #112]	; (800a274 <HAL_TIM_ConfigClockSource+0x6e0>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d018      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x6a6>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a1a      	ldr	r2, [pc, #104]	; (800a278 <HAL_TIM_ConfigClockSource+0x6e4>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d013      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x6a6>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a19      	ldr	r2, [pc, #100]	; (800a27c <HAL_TIM_ConfigClockSource+0x6e8>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d00e      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x6a6>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a17      	ldr	r2, [pc, #92]	; (800a280 <HAL_TIM_ConfigClockSource+0x6ec>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d009      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x6a6>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a16      	ldr	r2, [pc, #88]	; (800a284 <HAL_TIM_ConfigClockSource+0x6f0>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d004      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x6a6>
 800a230:	f241 11fd 	movw	r1, #4605	; 0x11fd
 800a234:	4814      	ldr	r0, [pc, #80]	; (800a288 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a236:	f7f8 fd0e 	bl	8002c56 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4619      	mov	r1, r3
 800a244:	4610      	mov	r0, r2
 800a246:	f000 fc84 	bl	800ab52 <TIM_ITRx_SetConfig>
      break;
 800a24a:	e002      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 800a24c:	bf00      	nop
 800a24e:	e000      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 800a250:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	40010000 	.word	0x40010000
 800a270:	40000400 	.word	0x40000400
 800a274:	40000800 	.word	0x40000800
 800a278:	40000c00 	.word	0x40000c00
 800a27c:	40010400 	.word	0x40010400
 800a280:	40014000 	.word	0x40014000
 800a284:	40001800 	.word	0x40001800
 800a288:	0800dd6c 	.word	0x0800dd6c

0800a28c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a40      	ldr	r2, [pc, #256]	; (800a3a0 <TIM_Base_SetConfig+0x114>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d013      	beq.n	800a2cc <TIM_Base_SetConfig+0x40>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2aa:	d00f      	beq.n	800a2cc <TIM_Base_SetConfig+0x40>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a3d      	ldr	r2, [pc, #244]	; (800a3a4 <TIM_Base_SetConfig+0x118>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d00b      	beq.n	800a2cc <TIM_Base_SetConfig+0x40>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a3c      	ldr	r2, [pc, #240]	; (800a3a8 <TIM_Base_SetConfig+0x11c>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d007      	beq.n	800a2cc <TIM_Base_SetConfig+0x40>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a3b      	ldr	r2, [pc, #236]	; (800a3ac <TIM_Base_SetConfig+0x120>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d003      	beq.n	800a2cc <TIM_Base_SetConfig+0x40>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a3a      	ldr	r2, [pc, #232]	; (800a3b0 <TIM_Base_SetConfig+0x124>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d108      	bne.n	800a2de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a2f      	ldr	r2, [pc, #188]	; (800a3a0 <TIM_Base_SetConfig+0x114>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d02b      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ec:	d027      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a2c      	ldr	r2, [pc, #176]	; (800a3a4 <TIM_Base_SetConfig+0x118>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d023      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a2b      	ldr	r2, [pc, #172]	; (800a3a8 <TIM_Base_SetConfig+0x11c>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d01f      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a2a      	ldr	r2, [pc, #168]	; (800a3ac <TIM_Base_SetConfig+0x120>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d01b      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a29      	ldr	r2, [pc, #164]	; (800a3b0 <TIM_Base_SetConfig+0x124>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d017      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a28      	ldr	r2, [pc, #160]	; (800a3b4 <TIM_Base_SetConfig+0x128>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d013      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a27      	ldr	r2, [pc, #156]	; (800a3b8 <TIM_Base_SetConfig+0x12c>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d00f      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a26      	ldr	r2, [pc, #152]	; (800a3bc <TIM_Base_SetConfig+0x130>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d00b      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a25      	ldr	r2, [pc, #148]	; (800a3c0 <TIM_Base_SetConfig+0x134>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d007      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a24      	ldr	r2, [pc, #144]	; (800a3c4 <TIM_Base_SetConfig+0x138>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d003      	beq.n	800a33e <TIM_Base_SetConfig+0xb2>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a23      	ldr	r2, [pc, #140]	; (800a3c8 <TIM_Base_SetConfig+0x13c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d108      	bne.n	800a350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a0a      	ldr	r2, [pc, #40]	; (800a3a0 <TIM_Base_SetConfig+0x114>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d003      	beq.n	800a384 <TIM_Base_SetConfig+0xf8>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a0c      	ldr	r2, [pc, #48]	; (800a3b0 <TIM_Base_SetConfig+0x124>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d103      	bne.n	800a38c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	691a      	ldr	r2, [r3, #16]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	615a      	str	r2, [r3, #20]
}
 800a392:	bf00      	nop
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	40010000 	.word	0x40010000
 800a3a4:	40000400 	.word	0x40000400
 800a3a8:	40000800 	.word	0x40000800
 800a3ac:	40000c00 	.word	0x40000c00
 800a3b0:	40010400 	.word	0x40010400
 800a3b4:	40014000 	.word	0x40014000
 800a3b8:	40014400 	.word	0x40014400
 800a3bc:	40014800 	.word	0x40014800
 800a3c0:	40001800 	.word	0x40001800
 800a3c4:	40001c00 	.word	0x40001c00
 800a3c8:	40002000 	.word	0x40002000

0800a3cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	f023 0201 	bic.w	r2, r3, #1
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f023 0303 	bic.w	r3, r3, #3
 800a402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f023 0302 	bic.w	r3, r3, #2
 800a414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	697a      	ldr	r2, [r7, #20]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a34      	ldr	r2, [pc, #208]	; (800a4f4 <TIM_OC1_SetConfig+0x128>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d003      	beq.n	800a430 <TIM_OC1_SetConfig+0x64>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a33      	ldr	r2, [pc, #204]	; (800a4f8 <TIM_OC1_SetConfig+0x12c>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d119      	bne.n	800a464 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d008      	beq.n	800a44a <TIM_OC1_SetConfig+0x7e>
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	2b08      	cmp	r3, #8
 800a43e:	d004      	beq.n	800a44a <TIM_OC1_SetConfig+0x7e>
 800a440:	f241 7102 	movw	r1, #5890	; 0x1702
 800a444:	482d      	ldr	r0, [pc, #180]	; (800a4fc <TIM_OC1_SetConfig+0x130>)
 800a446:	f7f8 fc06 	bl	8002c56 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f023 0308 	bic.w	r3, r3, #8
 800a450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	4313      	orrs	r3, r2
 800a45a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f023 0304 	bic.w	r3, r3, #4
 800a462:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a23      	ldr	r2, [pc, #140]	; (800a4f4 <TIM_OC1_SetConfig+0x128>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d003      	beq.n	800a474 <TIM_OC1_SetConfig+0xa8>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a22      	ldr	r2, [pc, #136]	; (800a4f8 <TIM_OC1_SetConfig+0x12c>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d12d      	bne.n	800a4d0 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a47c:	d008      	beq.n	800a490 <TIM_OC1_SetConfig+0xc4>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d004      	beq.n	800a490 <TIM_OC1_SetConfig+0xc4>
 800a486:	f241 710f 	movw	r1, #5903	; 0x170f
 800a48a:	481c      	ldr	r0, [pc, #112]	; (800a4fc <TIM_OC1_SetConfig+0x130>)
 800a48c:	f7f8 fbe3 	bl	8002c56 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	695b      	ldr	r3, [r3, #20]
 800a494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a498:	d008      	beq.n	800a4ac <TIM_OC1_SetConfig+0xe0>
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d004      	beq.n	800a4ac <TIM_OC1_SetConfig+0xe0>
 800a4a2:	f241 7110 	movw	r1, #5904	; 0x1710
 800a4a6:	4815      	ldr	r0, [pc, #84]	; (800a4fc <TIM_OC1_SetConfig+0x130>)
 800a4a8:	f7f8 fbd5 	bl	8002c56 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	621a      	str	r2, [r3, #32]
}
 800a4ea:	bf00      	nop
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	40010000 	.word	0x40010000
 800a4f8:	40010400 	.word	0x40010400
 800a4fc:	0800dd6c 	.word	0x0800dd6c

0800a500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	f023 0210 	bic.w	r2, r3, #16
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a52e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	021b      	lsls	r3, r3, #8
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	4313      	orrs	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	f023 0320 	bic.w	r3, r3, #32
 800a54a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	011b      	lsls	r3, r3, #4
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	4313      	orrs	r3, r2
 800a556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a35      	ldr	r2, [pc, #212]	; (800a630 <TIM_OC2_SetConfig+0x130>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d003      	beq.n	800a568 <TIM_OC2_SetConfig+0x68>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a34      	ldr	r2, [pc, #208]	; (800a634 <TIM_OC2_SetConfig+0x134>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d11a      	bne.n	800a59e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d008      	beq.n	800a582 <TIM_OC2_SetConfig+0x82>
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	2b08      	cmp	r3, #8
 800a576:	d004      	beq.n	800a582 <TIM_OC2_SetConfig+0x82>
 800a578:	f241 714d 	movw	r1, #5965	; 0x174d
 800a57c:	482e      	ldr	r0, [pc, #184]	; (800a638 <TIM_OC2_SetConfig+0x138>)
 800a57e:	f7f8 fb6a 	bl	8002c56 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	4313      	orrs	r3, r2
 800a594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a59c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a23      	ldr	r2, [pc, #140]	; (800a630 <TIM_OC2_SetConfig+0x130>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d003      	beq.n	800a5ae <TIM_OC2_SetConfig+0xae>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a22      	ldr	r2, [pc, #136]	; (800a634 <TIM_OC2_SetConfig+0x134>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d12f      	bne.n	800a60e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	699b      	ldr	r3, [r3, #24]
 800a5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b6:	d008      	beq.n	800a5ca <TIM_OC2_SetConfig+0xca>
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d004      	beq.n	800a5ca <TIM_OC2_SetConfig+0xca>
 800a5c0:	f241 715b 	movw	r1, #5979	; 0x175b
 800a5c4:	481c      	ldr	r0, [pc, #112]	; (800a638 <TIM_OC2_SetConfig+0x138>)
 800a5c6:	f7f8 fb46 	bl	8002c56 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5d2:	d008      	beq.n	800a5e6 <TIM_OC2_SetConfig+0xe6>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d004      	beq.n	800a5e6 <TIM_OC2_SetConfig+0xe6>
 800a5dc:	f241 715c 	movw	r1, #5980	; 0x175c
 800a5e0:	4815      	ldr	r0, [pc, #84]	; (800a638 <TIM_OC2_SetConfig+0x138>)
 800a5e2:	f7f8 fb38 	bl	8002c56 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a5ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	621a      	str	r2, [r3, #32]
}
 800a628:	bf00      	nop
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	40010000 	.word	0x40010000
 800a634:	40010400 	.word	0x40010400
 800a638:	0800dd6c 	.word	0x0800dd6c

0800a63c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a66a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f023 0303 	bic.w	r3, r3, #3
 800a672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	021b      	lsls	r3, r3, #8
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	4313      	orrs	r3, r2
 800a690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a35      	ldr	r2, [pc, #212]	; (800a76c <TIM_OC3_SetConfig+0x130>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d003      	beq.n	800a6a2 <TIM_OC3_SetConfig+0x66>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a34      	ldr	r2, [pc, #208]	; (800a770 <TIM_OC3_SetConfig+0x134>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d11a      	bne.n	800a6d8 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d008      	beq.n	800a6bc <TIM_OC3_SetConfig+0x80>
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	2b08      	cmp	r3, #8
 800a6b0:	d004      	beq.n	800a6bc <TIM_OC3_SetConfig+0x80>
 800a6b2:	f241 7198 	movw	r1, #6040	; 0x1798
 800a6b6:	482f      	ldr	r0, [pc, #188]	; (800a774 <TIM_OC3_SetConfig+0x138>)
 800a6b8:	f7f8 facd 	bl	8002c56 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	021b      	lsls	r3, r3, #8
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a24      	ldr	r2, [pc, #144]	; (800a76c <TIM_OC3_SetConfig+0x130>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d003      	beq.n	800a6e8 <TIM_OC3_SetConfig+0xac>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4a23      	ldr	r2, [pc, #140]	; (800a770 <TIM_OC3_SetConfig+0x134>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d12f      	bne.n	800a748 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6f0:	d008      	beq.n	800a704 <TIM_OC3_SetConfig+0xc8>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	699b      	ldr	r3, [r3, #24]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d004      	beq.n	800a704 <TIM_OC3_SetConfig+0xc8>
 800a6fa:	f241 71a5 	movw	r1, #6053	; 0x17a5
 800a6fe:	481d      	ldr	r0, [pc, #116]	; (800a774 <TIM_OC3_SetConfig+0x138>)
 800a700:	f7f8 faa9 	bl	8002c56 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a70c:	d008      	beq.n	800a720 <TIM_OC3_SetConfig+0xe4>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d004      	beq.n	800a720 <TIM_OC3_SetConfig+0xe4>
 800a716:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800a71a:	4816      	ldr	r0, [pc, #88]	; (800a774 <TIM_OC3_SetConfig+0x138>)
 800a71c:	f7f8 fa9b 	bl	8002c56 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a72e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	011b      	lsls	r3, r3, #4
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	4313      	orrs	r3, r2
 800a73a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	011b      	lsls	r3, r3, #4
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	4313      	orrs	r3, r2
 800a746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	621a      	str	r2, [r3, #32]
}
 800a762:	bf00      	nop
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	40010000 	.word	0x40010000
 800a770:	40010400 	.word	0x40010400
 800a774:	0800dd6c 	.word	0x0800dd6c

0800a778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	031b      	lsls	r3, r3, #12
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a18      	ldr	r2, [pc, #96]	; (800a834 <TIM_OC4_SetConfig+0xbc>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d003      	beq.n	800a7e0 <TIM_OC4_SetConfig+0x68>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a17      	ldr	r2, [pc, #92]	; (800a838 <TIM_OC4_SetConfig+0xc0>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d117      	bne.n	800a810 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7e8:	d008      	beq.n	800a7fc <TIM_OC4_SetConfig+0x84>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d004      	beq.n	800a7fc <TIM_OC4_SetConfig+0x84>
 800a7f2:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800a7f6:	4811      	ldr	r0, [pc, #68]	; (800a83c <TIM_OC4_SetConfig+0xc4>)
 800a7f8:	f7f8 fa2d 	bl	8002c56 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	019b      	lsls	r3, r3, #6
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	621a      	str	r2, [r3, #32]
}
 800a82a:	bf00      	nop
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	40010000 	.word	0x40010000
 800a838:	40010400 	.word	0x40010400
 800a83c:	0800dd6c 	.word	0x0800dd6c

0800a840 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a840:	b480      	push	{r7}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
 800a84c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	f023 0201 	bic.w	r2, r3, #1
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6a1b      	ldr	r3, [r3, #32]
 800a864:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	4a28      	ldr	r2, [pc, #160]	; (800a90c <TIM_TI1_SetConfig+0xcc>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d01b      	beq.n	800a8a6 <TIM_TI1_SetConfig+0x66>
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a874:	d017      	beq.n	800a8a6 <TIM_TI1_SetConfig+0x66>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	4a25      	ldr	r2, [pc, #148]	; (800a910 <TIM_TI1_SetConfig+0xd0>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d013      	beq.n	800a8a6 <TIM_TI1_SetConfig+0x66>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	4a24      	ldr	r2, [pc, #144]	; (800a914 <TIM_TI1_SetConfig+0xd4>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d00f      	beq.n	800a8a6 <TIM_TI1_SetConfig+0x66>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	4a23      	ldr	r2, [pc, #140]	; (800a918 <TIM_TI1_SetConfig+0xd8>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d00b      	beq.n	800a8a6 <TIM_TI1_SetConfig+0x66>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4a22      	ldr	r2, [pc, #136]	; (800a91c <TIM_TI1_SetConfig+0xdc>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d007      	beq.n	800a8a6 <TIM_TI1_SetConfig+0x66>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4a21      	ldr	r2, [pc, #132]	; (800a920 <TIM_TI1_SetConfig+0xe0>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d003      	beq.n	800a8a6 <TIM_TI1_SetConfig+0x66>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	4a20      	ldr	r2, [pc, #128]	; (800a924 <TIM_TI1_SetConfig+0xe4>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d101      	bne.n	800a8aa <TIM_TI1_SetConfig+0x6a>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e000      	b.n	800a8ac <TIM_TI1_SetConfig+0x6c>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d008      	beq.n	800a8c2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f023 0303 	bic.w	r3, r3, #3
 800a8b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	617b      	str	r3, [r7, #20]
 800a8c0:	e003      	b.n	800a8ca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f043 0301 	orr.w	r3, r3, #1
 800a8c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	011b      	lsls	r3, r3, #4
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f023 030a 	bic.w	r3, r3, #10
 800a8e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	f003 030a 	and.w	r3, r3, #10
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	621a      	str	r2, [r3, #32]
}
 800a8fe:	bf00      	nop
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	40010000 	.word	0x40010000
 800a910:	40000400 	.word	0x40000400
 800a914:	40000800 	.word	0x40000800
 800a918:	40000c00 	.word	0x40000c00
 800a91c:	40010400 	.word	0x40010400
 800a920:	40014000 	.word	0x40014000
 800a924:	40001800 	.word	0x40001800

0800a928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6a1b      	ldr	r3, [r3, #32]
 800a938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6a1b      	ldr	r3, [r3, #32]
 800a93e:	f023 0201 	bic.w	r2, r3, #1
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	699b      	ldr	r3, [r3, #24]
 800a94a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	011b      	lsls	r3, r3, #4
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f023 030a 	bic.w	r3, r3, #10
 800a964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	621a      	str	r2, [r3, #32]
}
 800a97a:	bf00      	nop
 800a97c:	371c      	adds	r7, #28
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a986:	b480      	push	{r7}
 800a988:	b087      	sub	sp, #28
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	60f8      	str	r0, [r7, #12]
 800a98e:	60b9      	str	r1, [r7, #8]
 800a990:	607a      	str	r2, [r7, #4]
 800a992:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6a1b      	ldr	r3, [r3, #32]
 800a998:	f023 0210 	bic.w	r2, r3, #16
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	021b      	lsls	r3, r3, #8
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	031b      	lsls	r3, r3, #12
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a9d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	011b      	lsls	r3, r3, #4
 800a9de:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	621a      	str	r2, [r3, #32]
}
 800a9f4:	bf00      	nop
 800a9f6:	371c      	adds	r7, #28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b087      	sub	sp, #28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	f023 0210 	bic.w	r2, r3, #16
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	031b      	lsls	r3, r3, #12
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	011b      	lsls	r3, r3, #4
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	621a      	str	r2, [r3, #32]
}
 800aa54:	bf00      	nop
 800aa56:	371c      	adds	r7, #28
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6a1b      	ldr	r3, [r3, #32]
 800aa84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f023 0303 	bic.w	r3, r3, #3
 800aa8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	011b      	lsls	r3, r3, #4
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800aab0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	021b      	lsls	r3, r3, #8
 800aab6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	621a      	str	r2, [r3, #32]
}
 800aacc:	bf00      	nop
 800aace:	371c      	adds	r7, #28
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	69db      	ldr	r3, [r3, #28]
 800aaf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6a1b      	ldr	r3, [r3, #32]
 800aafc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	021b      	lsls	r3, r3, #8
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	031b      	lsls	r3, r3, #12
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ab2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	031b      	lsls	r3, r3, #12
 800ab30:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ab34:	693a      	ldr	r2, [r7, #16]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	621a      	str	r2, [r3, #32]
}
 800ab46:	bf00      	nop
 800ab48:	371c      	adds	r7, #28
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab52:	b480      	push	{r7}
 800ab54:	b085      	sub	sp, #20
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	f043 0307 	orr.w	r3, r3, #7
 800ab74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	609a      	str	r2, [r3, #8]
}
 800ab7c:	bf00      	nop
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	021a      	lsls	r2, r3, #8
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	431a      	orrs	r2, r3
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	4313      	orrs	r3, r2
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	609a      	str	r2, [r3, #8]
}
 800abbc:	bf00      	nop
 800abbe:	371c      	adds	r7, #28
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	4a32      	ldr	r2, [pc, #200]	; (800aca0 <TIM_CCxChannelCmd+0xd8>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d030      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe2:	d02c      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4a2f      	ldr	r2, [pc, #188]	; (800aca4 <TIM_CCxChannelCmd+0xdc>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d028      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4a2e      	ldr	r2, [pc, #184]	; (800aca8 <TIM_CCxChannelCmd+0xe0>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d024      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4a2d      	ldr	r2, [pc, #180]	; (800acac <TIM_CCxChannelCmd+0xe4>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d020      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4a2c      	ldr	r2, [pc, #176]	; (800acb0 <TIM_CCxChannelCmd+0xe8>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d01c      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	4a2b      	ldr	r2, [pc, #172]	; (800acb4 <TIM_CCxChannelCmd+0xec>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d018      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	4a2a      	ldr	r2, [pc, #168]	; (800acb8 <TIM_CCxChannelCmd+0xf0>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d014      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4a29      	ldr	r2, [pc, #164]	; (800acbc <TIM_CCxChannelCmd+0xf4>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d010      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4a28      	ldr	r2, [pc, #160]	; (800acc0 <TIM_CCxChannelCmd+0xf8>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d00c      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	4a27      	ldr	r2, [pc, #156]	; (800acc4 <TIM_CCxChannelCmd+0xfc>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d008      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	4a26      	ldr	r2, [pc, #152]	; (800acc8 <TIM_CCxChannelCmd+0x100>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d004      	beq.n	800ac3e <TIM_CCxChannelCmd+0x76>
 800ac34:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800ac38:	4824      	ldr	r0, [pc, #144]	; (800accc <TIM_CCxChannelCmd+0x104>)
 800ac3a:	f7f8 f80c 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d010      	beq.n	800ac66 <TIM_CCxChannelCmd+0x9e>
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2b04      	cmp	r3, #4
 800ac48:	d00d      	beq.n	800ac66 <TIM_CCxChannelCmd+0x9e>
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2b08      	cmp	r3, #8
 800ac4e:	d00a      	beq.n	800ac66 <TIM_CCxChannelCmd+0x9e>
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2b0c      	cmp	r3, #12
 800ac54:	d007      	beq.n	800ac66 <TIM_CCxChannelCmd+0x9e>
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2b3c      	cmp	r3, #60	; 0x3c
 800ac5a:	d004      	beq.n	800ac66 <TIM_CCxChannelCmd+0x9e>
 800ac5c:	f641 11cd 	movw	r1, #6605	; 0x19cd
 800ac60:	481a      	ldr	r0, [pc, #104]	; (800accc <TIM_CCxChannelCmd+0x104>)
 800ac62:	f7f7 fff8 	bl	8002c56 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	f003 031f 	and.w	r3, r3, #31
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac72:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6a1a      	ldr	r2, [r3, #32]
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	43db      	mvns	r3, r3
 800ac7c:	401a      	ands	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6a1a      	ldr	r2, [r3, #32]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f003 031f 	and.w	r3, r3, #31
 800ac8c:	6879      	ldr	r1, [r7, #4]
 800ac8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac92:	431a      	orrs	r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	621a      	str	r2, [r3, #32]
}
 800ac98:	bf00      	nop
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	40010000 	.word	0x40010000
 800aca4:	40000400 	.word	0x40000400
 800aca8:	40000800 	.word	0x40000800
 800acac:	40000c00 	.word	0x40000c00
 800acb0:	40010400 	.word	0x40010400
 800acb4:	40014000 	.word	0x40014000
 800acb8:	40014400 	.word	0x40014400
 800acbc:	40014800 	.word	0x40014800
 800acc0:	40001800 	.word	0x40001800
 800acc4:	40001c00 	.word	0x40001c00
 800acc8:	40002000 	.word	0x40002000
 800accc:	0800dd6c 	.word	0x0800dd6c

0800acd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a61      	ldr	r2, [pc, #388]	; (800ae64 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d027      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acec:	d022      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a5d      	ldr	r2, [pc, #372]	; (800ae68 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d01d      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a5b      	ldr	r2, [pc, #364]	; (800ae6c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d018      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a5a      	ldr	r2, [pc, #360]	; (800ae70 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d013      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a58      	ldr	r2, [pc, #352]	; (800ae74 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d00e      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a57      	ldr	r2, [pc, #348]	; (800ae78 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d009      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a55      	ldr	r2, [pc, #340]	; (800ae7c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d004      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ad2a:	f240 6164 	movw	r1, #1636	; 0x664
 800ad2e:	4854      	ldr	r0, [pc, #336]	; (800ae80 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800ad30:	f7f7 ff91 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d020      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b10      	cmp	r3, #16
 800ad42:	d01c      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b20      	cmp	r3, #32
 800ad4a:	d018      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b30      	cmp	r3, #48	; 0x30
 800ad52:	d014      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b40      	cmp	r3, #64	; 0x40
 800ad5a:	d010      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b50      	cmp	r3, #80	; 0x50
 800ad62:	d00c      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b60      	cmp	r3, #96	; 0x60
 800ad6a:	d008      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b70      	cmp	r3, #112	; 0x70
 800ad72:	d004      	beq.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ad74:	f240 6165 	movw	r1, #1637	; 0x665
 800ad78:	4841      	ldr	r0, [pc, #260]	; (800ae80 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800ad7a:	f7f7 ff6c 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	2b80      	cmp	r3, #128	; 0x80
 800ad84:	d008      	beq.n	800ad98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d004      	beq.n	800ad98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad8e:	f240 6166 	movw	r1, #1638	; 0x666
 800ad92:	483b      	ldr	r0, [pc, #236]	; (800ae80 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800ad94:	f7f7 ff5f 	bl	8002c56 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d101      	bne.n	800ada6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ada2:	2302      	movs	r3, #2
 800ada4:	e05a      	b.n	800ae5c <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2202      	movs	r2, #2
 800adb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	4313      	orrs	r3, r2
 800add6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a1f      	ldr	r2, [pc, #124]	; (800ae64 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d022      	beq.n	800ae30 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adf2:	d01d      	beq.n	800ae30 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a1b      	ldr	r2, [pc, #108]	; (800ae68 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d018      	beq.n	800ae30 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a1a      	ldr	r2, [pc, #104]	; (800ae6c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d013      	beq.n	800ae30 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a18      	ldr	r2, [pc, #96]	; (800ae70 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d00e      	beq.n	800ae30 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a19      	ldr	r2, [pc, #100]	; (800ae7c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d009      	beq.n	800ae30 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a18      	ldr	r2, [pc, #96]	; (800ae84 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d004      	beq.n	800ae30 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a17      	ldr	r2, [pc, #92]	; (800ae88 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d10c      	bne.n	800ae4a <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	40010000 	.word	0x40010000
 800ae68:	40000400 	.word	0x40000400
 800ae6c:	40000800 	.word	0x40000800
 800ae70:	40000c00 	.word	0x40000c00
 800ae74:	40001000 	.word	0x40001000
 800ae78:	40001400 	.word	0x40001400
 800ae7c:	40010400 	.word	0x40010400
 800ae80:	0800dda4 	.word	0x0800dda4
 800ae84:	40014000 	.word	0x40014000
 800ae88:	40001800 	.word	0x40001800

0800ae8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae96:	2300      	movs	r3, #0
 800ae98:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a5e      	ldr	r2, [pc, #376]	; (800b018 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d009      	beq.n	800aeb8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a5c      	ldr	r2, [pc, #368]	; (800b01c <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d004      	beq.n	800aeb8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800aeae:	f240 61a1 	movw	r1, #1697	; 0x6a1
 800aeb2:	485b      	ldr	r0, [pc, #364]	; (800b020 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aeb4:	f7f7 fecf 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aec0:	d008      	beq.n	800aed4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d004      	beq.n	800aed4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800aeca:	f240 61a2 	movw	r1, #1698	; 0x6a2
 800aece:	4854      	ldr	r0, [pc, #336]	; (800b020 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aed0:	f7f7 fec1 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aedc:	d008      	beq.n	800aef0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d004      	beq.n	800aef0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800aee6:	f240 61a3 	movw	r1, #1699	; 0x6a3
 800aeea:	484d      	ldr	r0, [pc, #308]	; (800b020 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aeec:	f7f7 feb3 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d013      	beq.n	800af20 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af00:	d00e      	beq.n	800af20 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af0a:	d009      	beq.n	800af20 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af14:	d004      	beq.n	800af20 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800af16:	f240 61a4 	movw	r1, #1700	; 0x6a4
 800af1a:	4841      	ldr	r0, [pc, #260]	; (800b020 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800af1c:	f7f7 fe9b 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	2bff      	cmp	r3, #255	; 0xff
 800af26:	d904      	bls.n	800af32 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800af28:	f240 61a5 	movw	r1, #1701	; 0x6a5
 800af2c:	483c      	ldr	r0, [pc, #240]	; (800b020 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800af2e:	f7f7 fe92 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af3a:	d008      	beq.n	800af4e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d004      	beq.n	800af4e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800af44:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800af48:	4835      	ldr	r0, [pc, #212]	; (800b020 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800af4a:	f7f7 fe84 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d009      	beq.n	800af6a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af5e:	d004      	beq.n	800af6a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800af60:	f240 61a7 	movw	r1, #1703	; 0x6a7
 800af64:	482e      	ldr	r0, [pc, #184]	; (800b020 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800af66:	f7f7 fe76 	bl	8002c56 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	69db      	ldr	r3, [r3, #28]
 800af6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af72:	d008      	beq.n	800af86 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	69db      	ldr	r3, [r3, #28]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d004      	beq.n	800af86 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800af7c:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 800af80:	4827      	ldr	r0, [pc, #156]	; (800b020 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800af82:	f7f7 fe68 	bl	8002c56 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d101      	bne.n	800af94 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800af90:	2302      	movs	r3, #2
 800af92:	e03d      	b.n	800b010 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	4313      	orrs	r3, r2
 800afe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	4313      	orrs	r3, r2
 800afee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	69db      	ldr	r3, [r3, #28]
 800affa:	4313      	orrs	r3, r2
 800affc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3710      	adds	r7, #16
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	40010000 	.word	0x40010000
 800b01c:	40010400 	.word	0x40010400
 800b020:	0800dda4 	.word	0x0800dda4

0800b024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e0be      	b.n	800b1b4 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d031      	beq.n	800b0a2 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a5e      	ldr	r2, [pc, #376]	; (800b1bc <HAL_UART_Init+0x198>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d013      	beq.n	800b070 <HAL_UART_Init+0x4c>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a5c      	ldr	r2, [pc, #368]	; (800b1c0 <HAL_UART_Init+0x19c>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d00e      	beq.n	800b070 <HAL_UART_Init+0x4c>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a5b      	ldr	r2, [pc, #364]	; (800b1c4 <HAL_UART_Init+0x1a0>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d009      	beq.n	800b070 <HAL_UART_Init+0x4c>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a59      	ldr	r2, [pc, #356]	; (800b1c8 <HAL_UART_Init+0x1a4>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d004      	beq.n	800b070 <HAL_UART_Init+0x4c>
 800b066:	f240 114b 	movw	r1, #331	; 0x14b
 800b06a:	4858      	ldr	r0, [pc, #352]	; (800b1cc <HAL_UART_Init+0x1a8>)
 800b06c:	f7f7 fdf3 	bl	8002c56 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d041      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b080:	d03c      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	699b      	ldr	r3, [r3, #24]
 800b086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b08a:	d037      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b094:	d032      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b096:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800b09a:	484c      	ldr	r0, [pc, #304]	; (800b1cc <HAL_UART_Init+0x1a8>)
 800b09c:	f7f7 fddb 	bl	8002c56 <assert_failed>
 800b0a0:	e02c      	b.n	800b0fc <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a45      	ldr	r2, [pc, #276]	; (800b1bc <HAL_UART_Init+0x198>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d027      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a43      	ldr	r2, [pc, #268]	; (800b1c0 <HAL_UART_Init+0x19c>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d022      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a42      	ldr	r2, [pc, #264]	; (800b1c4 <HAL_UART_Init+0x1a0>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d01d      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a42      	ldr	r2, [pc, #264]	; (800b1d0 <HAL_UART_Init+0x1ac>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d018      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a41      	ldr	r2, [pc, #260]	; (800b1d4 <HAL_UART_Init+0x1b0>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d013      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a3b      	ldr	r2, [pc, #236]	; (800b1c8 <HAL_UART_Init+0x1a4>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d00e      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a3d      	ldr	r2, [pc, #244]	; (800b1d8 <HAL_UART_Init+0x1b4>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d009      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a3b      	ldr	r2, [pc, #236]	; (800b1dc <HAL_UART_Init+0x1b8>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d004      	beq.n	800b0fc <HAL_UART_Init+0xd8>
 800b0f2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800b0f6:	4835      	ldr	r0, [pc, #212]	; (800b1cc <HAL_UART_Init+0x1a8>)
 800b0f8:	f7f7 fdad 	bl	8002c56 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d009      	beq.n	800b118 <HAL_UART_Init+0xf4>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b10c:	d004      	beq.n	800b118 <HAL_UART_Init+0xf4>
 800b10e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800b112:	482e      	ldr	r0, [pc, #184]	; (800b1cc <HAL_UART_Init+0x1a8>)
 800b114:	f7f7 fd9f 	bl	8002c56 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	69db      	ldr	r3, [r3, #28]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d009      	beq.n	800b134 <HAL_UART_Init+0x110>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	69db      	ldr	r3, [r3, #28]
 800b124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b128:	d004      	beq.n	800b134 <HAL_UART_Init+0x110>
 800b12a:	f240 1153 	movw	r1, #339	; 0x153
 800b12e:	4827      	ldr	r0, [pc, #156]	; (800b1cc <HAL_UART_Init+0x1a8>)
 800b130:	f7f7 fd91 	bl	8002c56 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d106      	bne.n	800b14e <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7f8 fda9 	bl	8003ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2224      	movs	r2, #36	; 0x24
 800b152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68da      	ldr	r2, [r3, #12]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b164:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fa72 	bl	800b650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	691a      	ldr	r2, [r3, #16]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b17a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	695a      	ldr	r2, [r3, #20]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b18a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b19a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2220      	movs	r2, #32
 800b1a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	40011000 	.word	0x40011000
 800b1c0:	40004400 	.word	0x40004400
 800b1c4:	40004800 	.word	0x40004800
 800b1c8:	40011400 	.word	0x40011400
 800b1cc:	0800dde0 	.word	0x0800dde0
 800b1d0:	40004c00 	.word	0x40004c00
 800b1d4:	40005000 	.word	0x40005000
 800b1d8:	40007800 	.word	0x40007800
 800b1dc:	40007c00 	.word	0x40007c00

0800b1e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b088      	sub	sp, #32
 800b1e4:	af02      	add	r7, sp, #8
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b20      	cmp	r3, #32
 800b1fe:	f040 8083 	bne.w	800b308 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <HAL_UART_Transmit+0x2e>
 800b208:	88fb      	ldrh	r3, [r7, #6]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e07b      	b.n	800b30a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d101      	bne.n	800b220 <HAL_UART_Transmit+0x40>
 800b21c:	2302      	movs	r3, #2
 800b21e:	e074      	b.n	800b30a <HAL_UART_Transmit+0x12a>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2221      	movs	r2, #33	; 0x21
 800b232:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b236:	f7f8 fe67 	bl	8003f08 <HAL_GetTick>
 800b23a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	88fa      	ldrh	r2, [r7, #6]
 800b240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	88fa      	ldrh	r2, [r7, #6]
 800b246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b250:	e042      	b.n	800b2d8 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b256:	b29b      	uxth	r3, r3
 800b258:	3b01      	subs	r3, #1
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b268:	d122      	bne.n	800b2b0 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2200      	movs	r2, #0
 800b272:	2180      	movs	r1, #128	; 0x80
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 f96d 	bl	800b554 <UART_WaitOnFlagUntilTimeout>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800b280:	2303      	movs	r3, #3
 800b282:	e042      	b.n	800b30a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	461a      	mov	r2, r3
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b296:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d103      	bne.n	800b2a8 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	3302      	adds	r3, #2
 800b2a4:	60bb      	str	r3, [r7, #8]
 800b2a6:	e017      	b.n	800b2d8 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	60bb      	str	r3, [r7, #8]
 800b2ae:	e013      	b.n	800b2d8 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2180      	movs	r1, #128	; 0x80
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 f94a 	bl	800b554 <UART_WaitOnFlagUntilTimeout>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e01f      	b.n	800b30a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	60ba      	str	r2, [r7, #8]
 800b2d0:	781a      	ldrb	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1b7      	bne.n	800b252 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2140      	movs	r1, #64	; 0x40
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 f931 	bl	800b554 <UART_WaitOnFlagUntilTimeout>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d001      	beq.n	800b2fc <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e006      	b.n	800b30a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	e000      	b.n	800b30a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800b308:	2302      	movs	r3, #2
  }
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3718      	adds	r7, #24
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
	...

0800b314 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	4613      	mov	r3, r2
 800b320:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b20      	cmp	r3, #32
 800b32c:	d166      	bne.n	800b3fc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <HAL_UART_Receive_DMA+0x26>
 800b334:	88fb      	ldrh	r3, [r7, #6]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d101      	bne.n	800b33e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e05f      	b.n	800b3fe <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b344:	2b01      	cmp	r3, #1
 800b346:	d101      	bne.n	800b34c <HAL_UART_Receive_DMA+0x38>
 800b348:	2302      	movs	r3, #2
 800b34a:	e058      	b.n	800b3fe <HAL_UART_Receive_DMA+0xea>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	88fa      	ldrh	r2, [r7, #6]
 800b35e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2200      	movs	r2, #0
 800b364:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2222      	movs	r2, #34	; 0x22
 800b36a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b372:	4a25      	ldr	r2, [pc, #148]	; (800b408 <HAL_UART_Receive_DMA+0xf4>)
 800b374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b37a:	4a24      	ldr	r2, [pc, #144]	; (800b40c <HAL_UART_Receive_DMA+0xf8>)
 800b37c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b382:	4a23      	ldr	r2, [pc, #140]	; (800b410 <HAL_UART_Receive_DMA+0xfc>)
 800b384:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38a:	2200      	movs	r2, #0
 800b38c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800b38e:	f107 0308 	add.w	r3, r7, #8
 800b392:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	3304      	adds	r3, #4
 800b39e:	4619      	mov	r1, r3
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	88fb      	ldrh	r3, [r7, #6]
 800b3a6:	f7fa f9b5 	bl	8005714 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	613b      	str	r3, [r7, #16]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	613b      	str	r3, [r7, #16]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	613b      	str	r3, [r7, #16]
 800b3be:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	68da      	ldr	r2, [r3, #12]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3d6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	695a      	ldr	r2, [r3, #20]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f042 0201 	orr.w	r2, r2, #1
 800b3e6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	695a      	ldr	r2, [r3, #20]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3f6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	e000      	b.n	800b3fe <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b3fc:	2302      	movs	r3, #2
  }
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3718      	adds	r7, #24
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	0800b43d 	.word	0x0800b43d
 800b40c:	0800b4a5 	.word	0x0800b4a5
 800b410:	0800b4c1 	.word	0x0800b4c1

0800b414 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b448:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b454:	2b00      	cmp	r3, #0
 800b456:	d11e      	bne.n	800b496 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68da      	ldr	r2, [r3, #12]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b46c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	695a      	ldr	r2, [r3, #20]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f022 0201 	bic.w	r2, r2, #1
 800b47c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	695a      	ldr	r2, [r3, #20]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b48c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2220      	movs	r2, #32
 800b492:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f7f7 fa2a 	bl	80028f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b49c:	bf00      	nop
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f7ff ffae 	bl	800b414 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4b8:	bf00      	nop
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4dc:	2b80      	cmp	r3, #128	; 0x80
 800b4de:	bf0c      	ite	eq
 800b4e0:	2301      	moveq	r3, #1
 800b4e2:	2300      	movne	r3, #0
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	2b21      	cmp	r3, #33	; 0x21
 800b4f2:	d108      	bne.n	800b506 <UART_DMAError+0x46>
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d005      	beq.n	800b506 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b500:	68b8      	ldr	r0, [r7, #8]
 800b502:	f000 f871 	bl	800b5e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	695b      	ldr	r3, [r3, #20]
 800b50c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b510:	2b40      	cmp	r3, #64	; 0x40
 800b512:	bf0c      	ite	eq
 800b514:	2301      	moveq	r3, #1
 800b516:	2300      	movne	r3, #0
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b522:	b2db      	uxtb	r3, r3
 800b524:	2b22      	cmp	r3, #34	; 0x22
 800b526:	d108      	bne.n	800b53a <UART_DMAError+0x7a>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d005      	beq.n	800b53a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2200      	movs	r2, #0
 800b532:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b534:	68b8      	ldr	r0, [r7, #8]
 800b536:	f000 f86d 	bl	800b614 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b53e:	f043 0210 	orr.w	r2, r3, #16
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b546:	68b8      	ldr	r0, [r7, #8]
 800b548:	f7ff ff6e 	bl	800b428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b54c:	bf00      	nop
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	603b      	str	r3, [r7, #0]
 800b560:	4613      	mov	r3, r2
 800b562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b564:	e02c      	b.n	800b5c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b56c:	d028      	beq.n	800b5c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d007      	beq.n	800b584 <UART_WaitOnFlagUntilTimeout+0x30>
 800b574:	f7f8 fcc8 	bl	8003f08 <HAL_GetTick>
 800b578:	4602      	mov	r2, r0
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	69ba      	ldr	r2, [r7, #24]
 800b580:	429a      	cmp	r2, r3
 800b582:	d21d      	bcs.n	800b5c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68da      	ldr	r2, [r3, #12]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b592:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	695a      	ldr	r2, [r3, #20]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f022 0201 	bic.w	r2, r2, #1
 800b5a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2220      	movs	r2, #32
 800b5a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2220      	movs	r2, #32
 800b5b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e00f      	b.n	800b5e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	bf0c      	ite	eq
 800b5d0:	2301      	moveq	r3, #1
 800b5d2:	2300      	movne	r3, #0
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	79fb      	ldrb	r3, [r7, #7]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d0c3      	beq.n	800b566 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b5fe:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2220      	movs	r2, #32
 800b604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68da      	ldr	r2, [r3, #12]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b62a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	695a      	ldr	r2, [r3, #20]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f022 0201 	bic.w	r2, r2, #1
 800b63a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2220      	movs	r2, #32
 800b640:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	b0bd      	sub	sp, #244	; 0xf4
 800b656:	af00      	add	r7, sp, #0
 800b658:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	4bae      	ldr	r3, [pc, #696]	; (800b91c <UART_SetConfig+0x2cc>)
 800b664:	429a      	cmp	r2, r3
 800b666:	d904      	bls.n	800b672 <UART_SetConfig+0x22>
 800b668:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800b66c:	48ac      	ldr	r0, [pc, #688]	; (800b920 <UART_SetConfig+0x2d0>)
 800b66e:	f7f7 faf2 	bl	8002c56 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800b672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00a      	beq.n	800b692 <UART_SetConfig+0x42>
 800b67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b686:	d004      	beq.n	800b692 <UART_SetConfig+0x42>
 800b688:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800b68c:	48a4      	ldr	r0, [pc, #656]	; (800b920 <UART_SetConfig+0x2d0>)
 800b68e:	f7f7 fae2 	bl	8002c56 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800b692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d010      	beq.n	800b6be <UART_SetConfig+0x6e>
 800b69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6a6:	d00a      	beq.n	800b6be <UART_SetConfig+0x6e>
 800b6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b6b2:	d004      	beq.n	800b6be <UART_SetConfig+0x6e>
 800b6b4:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800b6b8:	4899      	ldr	r0, [pc, #612]	; (800b920 <UART_SetConfig+0x2d0>)
 800b6ba:	f7f7 facc 	bl	8002c56 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800b6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6c2:	695a      	ldr	r2, [r3, #20]
 800b6c4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d104      	bne.n	800b6d8 <UART_SetConfig+0x88>
 800b6ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d104      	bne.n	800b6e2 <UART_SetConfig+0x92>
 800b6d8:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800b6dc:	4890      	ldr	r0, [pc, #576]	; (800b920 <UART_SetConfig+0x2d0>)
 800b6de:	f7f7 faba 	bl	8002c56 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f2:	68d9      	ldr	r1, [r3, #12]
 800b6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	ea40 0301 	orr.w	r3, r0, r1
 800b6fe:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b704:	689a      	ldr	r2, [r3, #8]
 800b706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	431a      	orrs	r2, r3
 800b70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b712:	695b      	ldr	r3, [r3, #20]
 800b714:	431a      	orrs	r2, r3
 800b716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b71a:	69db      	ldr	r3, [r3, #28]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800b722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b72e:	f021 010c 	bic.w	r1, r1, #12
 800b732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b73c:	430b      	orrs	r3, r1
 800b73e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	695b      	ldr	r3, [r3, #20]
 800b748:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b750:	6999      	ldr	r1, [r3, #24]
 800b752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	ea40 0301 	orr.w	r3, r0, r1
 800b75c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b762:	69db      	ldr	r3, [r3, #28]
 800b764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b768:	f040 81a9 	bne.w	800babe <UART_SetConfig+0x46e>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4b6c      	ldr	r3, [pc, #432]	; (800b924 <UART_SetConfig+0x2d4>)
 800b774:	429a      	cmp	r2, r3
 800b776:	d006      	beq.n	800b786 <UART_SetConfig+0x136>
 800b778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	4b6a      	ldr	r3, [pc, #424]	; (800b928 <UART_SetConfig+0x2d8>)
 800b780:	429a      	cmp	r2, r3
 800b782:	f040 80d5 	bne.w	800b930 <UART_SetConfig+0x2e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b786:	f7fc fd67 	bl	8008258 <HAL_RCC_GetPCLK2Freq>
 800b78a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b78e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b792:	461c      	mov	r4, r3
 800b794:	f04f 0500 	mov.w	r5, #0
 800b798:	4622      	mov	r2, r4
 800b79a:	462b      	mov	r3, r5
 800b79c:	1891      	adds	r1, r2, r2
 800b79e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800b7a2:	415b      	adcs	r3, r3
 800b7a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b7a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b7ac:	1912      	adds	r2, r2, r4
 800b7ae:	eb45 0303 	adc.w	r3, r5, r3
 800b7b2:	f04f 0000 	mov.w	r0, #0
 800b7b6:	f04f 0100 	mov.w	r1, #0
 800b7ba:	00d9      	lsls	r1, r3, #3
 800b7bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b7c0:	00d0      	lsls	r0, r2, #3
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	1911      	adds	r1, r2, r4
 800b7c8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800b7cc:	416b      	adcs	r3, r5
 800b7ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	f04f 0300 	mov.w	r3, #0
 800b7de:	1891      	adds	r1, r2, r2
 800b7e0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800b7e4:	415b      	adcs	r3, r3
 800b7e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b7ea:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800b7ee:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800b7f2:	f7f5 fa01 	bl	8000bf8 <__aeabi_uldivmod>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4b4c      	ldr	r3, [pc, #304]	; (800b92c <UART_SetConfig+0x2dc>)
 800b7fc:	fba3 2302 	umull	r2, r3, r3, r2
 800b800:	095b      	lsrs	r3, r3, #5
 800b802:	011e      	lsls	r6, r3, #4
 800b804:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b808:	461c      	mov	r4, r3
 800b80a:	f04f 0500 	mov.w	r5, #0
 800b80e:	4622      	mov	r2, r4
 800b810:	462b      	mov	r3, r5
 800b812:	1891      	adds	r1, r2, r2
 800b814:	67b9      	str	r1, [r7, #120]	; 0x78
 800b816:	415b      	adcs	r3, r3
 800b818:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b81a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b81e:	1912      	adds	r2, r2, r4
 800b820:	eb45 0303 	adc.w	r3, r5, r3
 800b824:	f04f 0000 	mov.w	r0, #0
 800b828:	f04f 0100 	mov.w	r1, #0
 800b82c:	00d9      	lsls	r1, r3, #3
 800b82e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b832:	00d0      	lsls	r0, r2, #3
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	1911      	adds	r1, r2, r4
 800b83a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800b83e:	416b      	adcs	r3, r5
 800b840:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	461a      	mov	r2, r3
 800b84c:	f04f 0300 	mov.w	r3, #0
 800b850:	1891      	adds	r1, r2, r2
 800b852:	6739      	str	r1, [r7, #112]	; 0x70
 800b854:	415b      	adcs	r3, r3
 800b856:	677b      	str	r3, [r7, #116]	; 0x74
 800b858:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800b85c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800b860:	f7f5 f9ca 	bl	8000bf8 <__aeabi_uldivmod>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	4b30      	ldr	r3, [pc, #192]	; (800b92c <UART_SetConfig+0x2dc>)
 800b86a:	fba3 1302 	umull	r1, r3, r3, r2
 800b86e:	095b      	lsrs	r3, r3, #5
 800b870:	2164      	movs	r1, #100	; 0x64
 800b872:	fb01 f303 	mul.w	r3, r1, r3
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	00db      	lsls	r3, r3, #3
 800b87a:	3332      	adds	r3, #50	; 0x32
 800b87c:	4a2b      	ldr	r2, [pc, #172]	; (800b92c <UART_SetConfig+0x2dc>)
 800b87e:	fba2 2303 	umull	r2, r3, r2, r3
 800b882:	095b      	lsrs	r3, r3, #5
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b88a:	441e      	add	r6, r3
 800b88c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b890:	4618      	mov	r0, r3
 800b892:	f04f 0100 	mov.w	r1, #0
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	1894      	adds	r4, r2, r2
 800b89c:	66bc      	str	r4, [r7, #104]	; 0x68
 800b89e:	415b      	adcs	r3, r3
 800b8a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8a2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b8a6:	1812      	adds	r2, r2, r0
 800b8a8:	eb41 0303 	adc.w	r3, r1, r3
 800b8ac:	f04f 0400 	mov.w	r4, #0
 800b8b0:	f04f 0500 	mov.w	r5, #0
 800b8b4:	00dd      	lsls	r5, r3, #3
 800b8b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b8ba:	00d4      	lsls	r4, r2, #3
 800b8bc:	4622      	mov	r2, r4
 800b8be:	462b      	mov	r3, r5
 800b8c0:	1814      	adds	r4, r2, r0
 800b8c2:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800b8c6:	414b      	adcs	r3, r1
 800b8c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b8cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f04f 0300 	mov.w	r3, #0
 800b8d8:	1891      	adds	r1, r2, r2
 800b8da:	6639      	str	r1, [r7, #96]	; 0x60
 800b8dc:	415b      	adcs	r3, r3
 800b8de:	667b      	str	r3, [r7, #100]	; 0x64
 800b8e0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b8e4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b8e8:	f7f5 f986 	bl	8000bf8 <__aeabi_uldivmod>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	4b0e      	ldr	r3, [pc, #56]	; (800b92c <UART_SetConfig+0x2dc>)
 800b8f2:	fba3 1302 	umull	r1, r3, r3, r2
 800b8f6:	095b      	lsrs	r3, r3, #5
 800b8f8:	2164      	movs	r1, #100	; 0x64
 800b8fa:	fb01 f303 	mul.w	r3, r1, r3
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	00db      	lsls	r3, r3, #3
 800b902:	3332      	adds	r3, #50	; 0x32
 800b904:	4a09      	ldr	r2, [pc, #36]	; (800b92c <UART_SetConfig+0x2dc>)
 800b906:	fba2 2303 	umull	r2, r3, r2, r3
 800b90a:	095b      	lsrs	r3, r3, #5
 800b90c:	f003 0207 	and.w	r2, r3, #7
 800b910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4432      	add	r2, r6
 800b918:	609a      	str	r2, [r3, #8]
 800b91a:	e277      	b.n	800be0c <UART_SetConfig+0x7bc>
 800b91c:	00a037a0 	.word	0x00a037a0
 800b920:	0800dde0 	.word	0x0800dde0
 800b924:	40011000 	.word	0x40011000
 800b928:	40011400 	.word	0x40011400
 800b92c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b930:	f7fc fc7e 	bl	8008230 <HAL_RCC_GetPCLK1Freq>
 800b934:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b938:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b93c:	461c      	mov	r4, r3
 800b93e:	f04f 0500 	mov.w	r5, #0
 800b942:	4622      	mov	r2, r4
 800b944:	462b      	mov	r3, r5
 800b946:	1891      	adds	r1, r2, r2
 800b948:	65b9      	str	r1, [r7, #88]	; 0x58
 800b94a:	415b      	adcs	r3, r3
 800b94c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b94e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b952:	1912      	adds	r2, r2, r4
 800b954:	eb45 0303 	adc.w	r3, r5, r3
 800b958:	f04f 0000 	mov.w	r0, #0
 800b95c:	f04f 0100 	mov.w	r1, #0
 800b960:	00d9      	lsls	r1, r3, #3
 800b962:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b966:	00d0      	lsls	r0, r2, #3
 800b968:	4602      	mov	r2, r0
 800b96a:	460b      	mov	r3, r1
 800b96c:	1911      	adds	r1, r2, r4
 800b96e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800b972:	416b      	adcs	r3, r5
 800b974:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	461a      	mov	r2, r3
 800b980:	f04f 0300 	mov.w	r3, #0
 800b984:	1891      	adds	r1, r2, r2
 800b986:	6539      	str	r1, [r7, #80]	; 0x50
 800b988:	415b      	adcs	r3, r3
 800b98a:	657b      	str	r3, [r7, #84]	; 0x54
 800b98c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b990:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b994:	f7f5 f930 	bl	8000bf8 <__aeabi_uldivmod>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4bb3      	ldr	r3, [pc, #716]	; (800bc6c <UART_SetConfig+0x61c>)
 800b99e:	fba3 2302 	umull	r2, r3, r3, r2
 800b9a2:	095b      	lsrs	r3, r3, #5
 800b9a4:	011e      	lsls	r6, r3, #4
 800b9a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b9aa:	461c      	mov	r4, r3
 800b9ac:	f04f 0500 	mov.w	r5, #0
 800b9b0:	4622      	mov	r2, r4
 800b9b2:	462b      	mov	r3, r5
 800b9b4:	1891      	adds	r1, r2, r2
 800b9b6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b9b8:	415b      	adcs	r3, r3
 800b9ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b9c0:	1912      	adds	r2, r2, r4
 800b9c2:	eb45 0303 	adc.w	r3, r5, r3
 800b9c6:	f04f 0000 	mov.w	r0, #0
 800b9ca:	f04f 0100 	mov.w	r1, #0
 800b9ce:	00d9      	lsls	r1, r3, #3
 800b9d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b9d4:	00d0      	lsls	r0, r2, #3
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	1911      	adds	r1, r2, r4
 800b9dc:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800b9e0:	416b      	adcs	r3, r5
 800b9e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	f04f 0300 	mov.w	r3, #0
 800b9f2:	1891      	adds	r1, r2, r2
 800b9f4:	6439      	str	r1, [r7, #64]	; 0x40
 800b9f6:	415b      	adcs	r3, r3
 800b9f8:	647b      	str	r3, [r7, #68]	; 0x44
 800b9fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b9fe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800ba02:	f7f5 f8f9 	bl	8000bf8 <__aeabi_uldivmod>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4b98      	ldr	r3, [pc, #608]	; (800bc6c <UART_SetConfig+0x61c>)
 800ba0c:	fba3 1302 	umull	r1, r3, r3, r2
 800ba10:	095b      	lsrs	r3, r3, #5
 800ba12:	2164      	movs	r1, #100	; 0x64
 800ba14:	fb01 f303 	mul.w	r3, r1, r3
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	00db      	lsls	r3, r3, #3
 800ba1c:	3332      	adds	r3, #50	; 0x32
 800ba1e:	4a93      	ldr	r2, [pc, #588]	; (800bc6c <UART_SetConfig+0x61c>)
 800ba20:	fba2 2303 	umull	r2, r3, r2, r3
 800ba24:	095b      	lsrs	r3, r3, #5
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba2c:	441e      	add	r6, r3
 800ba2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ba32:	4618      	mov	r0, r3
 800ba34:	f04f 0100 	mov.w	r1, #0
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	1894      	adds	r4, r2, r2
 800ba3e:	63bc      	str	r4, [r7, #56]	; 0x38
 800ba40:	415b      	adcs	r3, r3
 800ba42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ba48:	1812      	adds	r2, r2, r0
 800ba4a:	eb41 0303 	adc.w	r3, r1, r3
 800ba4e:	f04f 0400 	mov.w	r4, #0
 800ba52:	f04f 0500 	mov.w	r5, #0
 800ba56:	00dd      	lsls	r5, r3, #3
 800ba58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ba5c:	00d4      	lsls	r4, r2, #3
 800ba5e:	4622      	mov	r2, r4
 800ba60:	462b      	mov	r3, r5
 800ba62:	1814      	adds	r4, r2, r0
 800ba64:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800ba68:	414b      	adcs	r3, r1
 800ba6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	461a      	mov	r2, r3
 800ba76:	f04f 0300 	mov.w	r3, #0
 800ba7a:	1891      	adds	r1, r2, r2
 800ba7c:	6339      	str	r1, [r7, #48]	; 0x30
 800ba7e:	415b      	adcs	r3, r3
 800ba80:	637b      	str	r3, [r7, #52]	; 0x34
 800ba82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ba86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba8a:	f7f5 f8b5 	bl	8000bf8 <__aeabi_uldivmod>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	4b76      	ldr	r3, [pc, #472]	; (800bc6c <UART_SetConfig+0x61c>)
 800ba94:	fba3 1302 	umull	r1, r3, r3, r2
 800ba98:	095b      	lsrs	r3, r3, #5
 800ba9a:	2164      	movs	r1, #100	; 0x64
 800ba9c:	fb01 f303 	mul.w	r3, r1, r3
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	00db      	lsls	r3, r3, #3
 800baa4:	3332      	adds	r3, #50	; 0x32
 800baa6:	4a71      	ldr	r2, [pc, #452]	; (800bc6c <UART_SetConfig+0x61c>)
 800baa8:	fba2 2303 	umull	r2, r3, r2, r3
 800baac:	095b      	lsrs	r3, r3, #5
 800baae:	f003 0207 	and.w	r2, r3, #7
 800bab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4432      	add	r2, r6
 800baba:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800babc:	e1a6      	b.n	800be0c <UART_SetConfig+0x7bc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800babe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	4b6a      	ldr	r3, [pc, #424]	; (800bc70 <UART_SetConfig+0x620>)
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d006      	beq.n	800bad8 <UART_SetConfig+0x488>
 800baca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	4b68      	ldr	r3, [pc, #416]	; (800bc74 <UART_SetConfig+0x624>)
 800bad2:	429a      	cmp	r2, r3
 800bad4:	f040 80d0 	bne.w	800bc78 <UART_SetConfig+0x628>
      pclk = HAL_RCC_GetPCLK2Freq();
 800bad8:	f7fc fbbe 	bl	8008258 <HAL_RCC_GetPCLK2Freq>
 800badc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bae0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bae4:	461c      	mov	r4, r3
 800bae6:	f04f 0500 	mov.w	r5, #0
 800baea:	4622      	mov	r2, r4
 800baec:	462b      	mov	r3, r5
 800baee:	1891      	adds	r1, r2, r2
 800baf0:	62b9      	str	r1, [r7, #40]	; 0x28
 800baf2:	415b      	adcs	r3, r3
 800baf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bafa:	1912      	adds	r2, r2, r4
 800bafc:	eb45 0303 	adc.w	r3, r5, r3
 800bb00:	f04f 0000 	mov.w	r0, #0
 800bb04:	f04f 0100 	mov.w	r1, #0
 800bb08:	00d9      	lsls	r1, r3, #3
 800bb0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bb0e:	00d0      	lsls	r0, r2, #3
 800bb10:	4602      	mov	r2, r0
 800bb12:	460b      	mov	r3, r1
 800bb14:	eb12 0a04 	adds.w	sl, r2, r4
 800bb18:	eb43 0b05 	adc.w	fp, r3, r5
 800bb1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f04f 0100 	mov.w	r1, #0
 800bb28:	f04f 0200 	mov.w	r2, #0
 800bb2c:	f04f 0300 	mov.w	r3, #0
 800bb30:	008b      	lsls	r3, r1, #2
 800bb32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bb36:	0082      	lsls	r2, r0, #2
 800bb38:	4650      	mov	r0, sl
 800bb3a:	4659      	mov	r1, fp
 800bb3c:	f7f5 f85c 	bl	8000bf8 <__aeabi_uldivmod>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	4b49      	ldr	r3, [pc, #292]	; (800bc6c <UART_SetConfig+0x61c>)
 800bb46:	fba3 2302 	umull	r2, r3, r3, r2
 800bb4a:	095b      	lsrs	r3, r3, #5
 800bb4c:	011e      	lsls	r6, r3, #4
 800bb4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bb52:	4618      	mov	r0, r3
 800bb54:	f04f 0100 	mov.w	r1, #0
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	1894      	adds	r4, r2, r2
 800bb5e:	623c      	str	r4, [r7, #32]
 800bb60:	415b      	adcs	r3, r3
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
 800bb64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb68:	1812      	adds	r2, r2, r0
 800bb6a:	eb41 0303 	adc.w	r3, r1, r3
 800bb6e:	f04f 0400 	mov.w	r4, #0
 800bb72:	f04f 0500 	mov.w	r5, #0
 800bb76:	00dd      	lsls	r5, r3, #3
 800bb78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bb7c:	00d4      	lsls	r4, r2, #3
 800bb7e:	4622      	mov	r2, r4
 800bb80:	462b      	mov	r3, r5
 800bb82:	1814      	adds	r4, r2, r0
 800bb84:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800bb88:	414b      	adcs	r3, r1
 800bb8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f04f 0100 	mov.w	r1, #0
 800bb9a:	f04f 0200 	mov.w	r2, #0
 800bb9e:	f04f 0300 	mov.w	r3, #0
 800bba2:	008b      	lsls	r3, r1, #2
 800bba4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bba8:	0082      	lsls	r2, r0, #2
 800bbaa:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800bbae:	f7f5 f823 	bl	8000bf8 <__aeabi_uldivmod>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	4b2d      	ldr	r3, [pc, #180]	; (800bc6c <UART_SetConfig+0x61c>)
 800bbb8:	fba3 1302 	umull	r1, r3, r3, r2
 800bbbc:	095b      	lsrs	r3, r3, #5
 800bbbe:	2164      	movs	r1, #100	; 0x64
 800bbc0:	fb01 f303 	mul.w	r3, r1, r3
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	011b      	lsls	r3, r3, #4
 800bbc8:	3332      	adds	r3, #50	; 0x32
 800bbca:	4a28      	ldr	r2, [pc, #160]	; (800bc6c <UART_SetConfig+0x61c>)
 800bbcc:	fba2 2303 	umull	r2, r3, r2, r3
 800bbd0:	095b      	lsrs	r3, r3, #5
 800bbd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbd6:	441e      	add	r6, r3
 800bbd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f04f 0100 	mov.w	r1, #0
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	1894      	adds	r4, r2, r2
 800bbe8:	61bc      	str	r4, [r7, #24]
 800bbea:	415b      	adcs	r3, r3
 800bbec:	61fb      	str	r3, [r7, #28]
 800bbee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbf2:	1812      	adds	r2, r2, r0
 800bbf4:	eb41 0303 	adc.w	r3, r1, r3
 800bbf8:	f04f 0400 	mov.w	r4, #0
 800bbfc:	f04f 0500 	mov.w	r5, #0
 800bc00:	00dd      	lsls	r5, r3, #3
 800bc02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bc06:	00d4      	lsls	r4, r2, #3
 800bc08:	4622      	mov	r2, r4
 800bc0a:	462b      	mov	r3, r5
 800bc0c:	1814      	adds	r4, r2, r0
 800bc0e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800bc12:	414b      	adcs	r3, r1
 800bc14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bc18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f04f 0100 	mov.w	r1, #0
 800bc24:	f04f 0200 	mov.w	r2, #0
 800bc28:	f04f 0300 	mov.w	r3, #0
 800bc2c:	008b      	lsls	r3, r1, #2
 800bc2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bc32:	0082      	lsls	r2, r0, #2
 800bc34:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800bc38:	f7f4 ffde 	bl	8000bf8 <__aeabi_uldivmod>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	4b0a      	ldr	r3, [pc, #40]	; (800bc6c <UART_SetConfig+0x61c>)
 800bc42:	fba3 1302 	umull	r1, r3, r3, r2
 800bc46:	095b      	lsrs	r3, r3, #5
 800bc48:	2164      	movs	r1, #100	; 0x64
 800bc4a:	fb01 f303 	mul.w	r3, r1, r3
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	011b      	lsls	r3, r3, #4
 800bc52:	3332      	adds	r3, #50	; 0x32
 800bc54:	4a05      	ldr	r2, [pc, #20]	; (800bc6c <UART_SetConfig+0x61c>)
 800bc56:	fba2 2303 	umull	r2, r3, r2, r3
 800bc5a:	095b      	lsrs	r3, r3, #5
 800bc5c:	f003 020f 	and.w	r2, r3, #15
 800bc60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4432      	add	r2, r6
 800bc68:	609a      	str	r2, [r3, #8]
 800bc6a:	e0cf      	b.n	800be0c <UART_SetConfig+0x7bc>
 800bc6c:	51eb851f 	.word	0x51eb851f
 800bc70:	40011000 	.word	0x40011000
 800bc74:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc78:	f7fc fada 	bl	8008230 <HAL_RCC_GetPCLK1Freq>
 800bc7c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc84:	461c      	mov	r4, r3
 800bc86:	f04f 0500 	mov.w	r5, #0
 800bc8a:	4622      	mov	r2, r4
 800bc8c:	462b      	mov	r3, r5
 800bc8e:	1891      	adds	r1, r2, r2
 800bc90:	6139      	str	r1, [r7, #16]
 800bc92:	415b      	adcs	r3, r3
 800bc94:	617b      	str	r3, [r7, #20]
 800bc96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc9a:	1912      	adds	r2, r2, r4
 800bc9c:	eb45 0303 	adc.w	r3, r5, r3
 800bca0:	f04f 0000 	mov.w	r0, #0
 800bca4:	f04f 0100 	mov.w	r1, #0
 800bca8:	00d9      	lsls	r1, r3, #3
 800bcaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bcae:	00d0      	lsls	r0, r2, #3
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	eb12 0804 	adds.w	r8, r2, r4
 800bcb8:	eb43 0905 	adc.w	r9, r3, r5
 800bcbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f04f 0100 	mov.w	r1, #0
 800bcc8:	f04f 0200 	mov.w	r2, #0
 800bccc:	f04f 0300 	mov.w	r3, #0
 800bcd0:	008b      	lsls	r3, r1, #2
 800bcd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bcd6:	0082      	lsls	r2, r0, #2
 800bcd8:	4640      	mov	r0, r8
 800bcda:	4649      	mov	r1, r9
 800bcdc:	f7f4 ff8c 	bl	8000bf8 <__aeabi_uldivmod>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	4b4c      	ldr	r3, [pc, #304]	; (800be18 <UART_SetConfig+0x7c8>)
 800bce6:	fba3 2302 	umull	r2, r3, r3, r2
 800bcea:	095b      	lsrs	r3, r3, #5
 800bcec:	011e      	lsls	r6, r3, #4
 800bcee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f04f 0100 	mov.w	r1, #0
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	1894      	adds	r4, r2, r2
 800bcfe:	60bc      	str	r4, [r7, #8]
 800bd00:	415b      	adcs	r3, r3
 800bd02:	60fb      	str	r3, [r7, #12]
 800bd04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd08:	1812      	adds	r2, r2, r0
 800bd0a:	eb41 0303 	adc.w	r3, r1, r3
 800bd0e:	f04f 0400 	mov.w	r4, #0
 800bd12:	f04f 0500 	mov.w	r5, #0
 800bd16:	00dd      	lsls	r5, r3, #3
 800bd18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bd1c:	00d4      	lsls	r4, r2, #3
 800bd1e:	4622      	mov	r2, r4
 800bd20:	462b      	mov	r3, r5
 800bd22:	1814      	adds	r4, r2, r0
 800bd24:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800bd28:	414b      	adcs	r3, r1
 800bd2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f04f 0100 	mov.w	r1, #0
 800bd3a:	f04f 0200 	mov.w	r2, #0
 800bd3e:	f04f 0300 	mov.w	r3, #0
 800bd42:	008b      	lsls	r3, r1, #2
 800bd44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bd48:	0082      	lsls	r2, r0, #2
 800bd4a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bd4e:	f7f4 ff53 	bl	8000bf8 <__aeabi_uldivmod>
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	4b30      	ldr	r3, [pc, #192]	; (800be18 <UART_SetConfig+0x7c8>)
 800bd58:	fba3 1302 	umull	r1, r3, r3, r2
 800bd5c:	095b      	lsrs	r3, r3, #5
 800bd5e:	2164      	movs	r1, #100	; 0x64
 800bd60:	fb01 f303 	mul.w	r3, r1, r3
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	011b      	lsls	r3, r3, #4
 800bd68:	3332      	adds	r3, #50	; 0x32
 800bd6a:	4a2b      	ldr	r2, [pc, #172]	; (800be18 <UART_SetConfig+0x7c8>)
 800bd6c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd70:	095b      	lsrs	r3, r3, #5
 800bd72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd76:	441e      	add	r6, r3
 800bd78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f04f 0100 	mov.w	r1, #0
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	1894      	adds	r4, r2, r2
 800bd88:	603c      	str	r4, [r7, #0]
 800bd8a:	415b      	adcs	r3, r3
 800bd8c:	607b      	str	r3, [r7, #4]
 800bd8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd92:	1812      	adds	r2, r2, r0
 800bd94:	eb41 0303 	adc.w	r3, r1, r3
 800bd98:	f04f 0400 	mov.w	r4, #0
 800bd9c:	f04f 0500 	mov.w	r5, #0
 800bda0:	00dd      	lsls	r5, r3, #3
 800bda2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bda6:	00d4      	lsls	r4, r2, #3
 800bda8:	4622      	mov	r2, r4
 800bdaa:	462b      	mov	r3, r5
 800bdac:	1814      	adds	r4, r2, r0
 800bdae:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800bdb2:	414b      	adcs	r3, r1
 800bdb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bdb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f04f 0100 	mov.w	r1, #0
 800bdc4:	f04f 0200 	mov.w	r2, #0
 800bdc8:	f04f 0300 	mov.w	r3, #0
 800bdcc:	008b      	lsls	r3, r1, #2
 800bdce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bdd2:	0082      	lsls	r2, r0, #2
 800bdd4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800bdd8:	f7f4 ff0e 	bl	8000bf8 <__aeabi_uldivmod>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4b0d      	ldr	r3, [pc, #52]	; (800be18 <UART_SetConfig+0x7c8>)
 800bde2:	fba3 1302 	umull	r1, r3, r3, r2
 800bde6:	095b      	lsrs	r3, r3, #5
 800bde8:	2164      	movs	r1, #100	; 0x64
 800bdea:	fb01 f303 	mul.w	r3, r1, r3
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	011b      	lsls	r3, r3, #4
 800bdf2:	3332      	adds	r3, #50	; 0x32
 800bdf4:	4a08      	ldr	r2, [pc, #32]	; (800be18 <UART_SetConfig+0x7c8>)
 800bdf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfa:	095b      	lsrs	r3, r3, #5
 800bdfc:	f003 020f 	and.w	r2, r3, #15
 800be00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4432      	add	r2, r6
 800be08:	609a      	str	r2, [r3, #8]
}
 800be0a:	e7ff      	b.n	800be0c <UART_SetConfig+0x7bc>
 800be0c:	bf00      	nop
 800be0e:	37f4      	adds	r7, #244	; 0xf4
 800be10:	46bd      	mov	sp, r7
 800be12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be16:	bf00      	nop
 800be18:	51eb851f 	.word	0x51eb851f

0800be1c <__errno>:
 800be1c:	4b01      	ldr	r3, [pc, #4]	; (800be24 <__errno+0x8>)
 800be1e:	6818      	ldr	r0, [r3, #0]
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	200001fc 	.word	0x200001fc

0800be28 <__libc_init_array>:
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	4d0d      	ldr	r5, [pc, #52]	; (800be60 <__libc_init_array+0x38>)
 800be2c:	4c0d      	ldr	r4, [pc, #52]	; (800be64 <__libc_init_array+0x3c>)
 800be2e:	1b64      	subs	r4, r4, r5
 800be30:	10a4      	asrs	r4, r4, #2
 800be32:	2600      	movs	r6, #0
 800be34:	42a6      	cmp	r6, r4
 800be36:	d109      	bne.n	800be4c <__libc_init_array+0x24>
 800be38:	4d0b      	ldr	r5, [pc, #44]	; (800be68 <__libc_init_array+0x40>)
 800be3a:	4c0c      	ldr	r4, [pc, #48]	; (800be6c <__libc_init_array+0x44>)
 800be3c:	f001 fea2 	bl	800db84 <_init>
 800be40:	1b64      	subs	r4, r4, r5
 800be42:	10a4      	asrs	r4, r4, #2
 800be44:	2600      	movs	r6, #0
 800be46:	42a6      	cmp	r6, r4
 800be48:	d105      	bne.n	800be56 <__libc_init_array+0x2e>
 800be4a:	bd70      	pop	{r4, r5, r6, pc}
 800be4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be50:	4798      	blx	r3
 800be52:	3601      	adds	r6, #1
 800be54:	e7ee      	b.n	800be34 <__libc_init_array+0xc>
 800be56:	f855 3b04 	ldr.w	r3, [r5], #4
 800be5a:	4798      	blx	r3
 800be5c:	3601      	adds	r6, #1
 800be5e:	e7f2      	b.n	800be46 <__libc_init_array+0x1e>
 800be60:	0800e0c8 	.word	0x0800e0c8
 800be64:	0800e0c8 	.word	0x0800e0c8
 800be68:	0800e0c8 	.word	0x0800e0c8
 800be6c:	0800e0cc 	.word	0x0800e0cc

0800be70 <memset>:
 800be70:	4402      	add	r2, r0
 800be72:	4603      	mov	r3, r0
 800be74:	4293      	cmp	r3, r2
 800be76:	d100      	bne.n	800be7a <memset+0xa>
 800be78:	4770      	bx	lr
 800be7a:	f803 1b01 	strb.w	r1, [r3], #1
 800be7e:	e7f9      	b.n	800be74 <memset+0x4>

0800be80 <atan>:
 800be80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	ec55 4b10 	vmov	r4, r5, d0
 800be88:	4bc3      	ldr	r3, [pc, #780]	; (800c198 <atan+0x318>)
 800be8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be8e:	429e      	cmp	r6, r3
 800be90:	46ab      	mov	fp, r5
 800be92:	dd18      	ble.n	800bec6 <atan+0x46>
 800be94:	4bc1      	ldr	r3, [pc, #772]	; (800c19c <atan+0x31c>)
 800be96:	429e      	cmp	r6, r3
 800be98:	dc01      	bgt.n	800be9e <atan+0x1e>
 800be9a:	d109      	bne.n	800beb0 <atan+0x30>
 800be9c:	b144      	cbz	r4, 800beb0 <atan+0x30>
 800be9e:	4622      	mov	r2, r4
 800bea0:	462b      	mov	r3, r5
 800bea2:	4620      	mov	r0, r4
 800bea4:	4629      	mov	r1, r5
 800bea6:	f7f4 f9a9 	bl	80001fc <__adddf3>
 800beaa:	4604      	mov	r4, r0
 800beac:	460d      	mov	r5, r1
 800beae:	e006      	b.n	800bebe <atan+0x3e>
 800beb0:	f1bb 0f00 	cmp.w	fp, #0
 800beb4:	f300 8131 	bgt.w	800c11a <atan+0x29a>
 800beb8:	a59b      	add	r5, pc, #620	; (adr r5, 800c128 <atan+0x2a8>)
 800beba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bebe:	ec45 4b10 	vmov	d0, r4, r5
 800bec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec6:	4bb6      	ldr	r3, [pc, #728]	; (800c1a0 <atan+0x320>)
 800bec8:	429e      	cmp	r6, r3
 800beca:	dc14      	bgt.n	800bef6 <atan+0x76>
 800becc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bed0:	429e      	cmp	r6, r3
 800bed2:	dc0d      	bgt.n	800bef0 <atan+0x70>
 800bed4:	a396      	add	r3, pc, #600	; (adr r3, 800c130 <atan+0x2b0>)
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	ee10 0a10 	vmov	r0, s0
 800bede:	4629      	mov	r1, r5
 800bee0:	f7f4 f98c 	bl	80001fc <__adddf3>
 800bee4:	4baf      	ldr	r3, [pc, #700]	; (800c1a4 <atan+0x324>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	f7f4 fdce 	bl	8000a88 <__aeabi_dcmpgt>
 800beec:	2800      	cmp	r0, #0
 800beee:	d1e6      	bne.n	800bebe <atan+0x3e>
 800bef0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bef4:	e02b      	b.n	800bf4e <atan+0xce>
 800bef6:	f000 f9b3 	bl	800c260 <fabs>
 800befa:	4bab      	ldr	r3, [pc, #684]	; (800c1a8 <atan+0x328>)
 800befc:	429e      	cmp	r6, r3
 800befe:	ec55 4b10 	vmov	r4, r5, d0
 800bf02:	f300 80bf 	bgt.w	800c084 <atan+0x204>
 800bf06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bf0a:	429e      	cmp	r6, r3
 800bf0c:	f300 80a0 	bgt.w	800c050 <atan+0x1d0>
 800bf10:	ee10 2a10 	vmov	r2, s0
 800bf14:	ee10 0a10 	vmov	r0, s0
 800bf18:	462b      	mov	r3, r5
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f7f4 f96e 	bl	80001fc <__adddf3>
 800bf20:	4ba0      	ldr	r3, [pc, #640]	; (800c1a4 <atan+0x324>)
 800bf22:	2200      	movs	r2, #0
 800bf24:	f7f4 f968 	bl	80001f8 <__aeabi_dsub>
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	460f      	mov	r7, r1
 800bf2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf32:	4620      	mov	r0, r4
 800bf34:	4629      	mov	r1, r5
 800bf36:	f7f4 f961 	bl	80001fc <__adddf3>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	4630      	mov	r0, r6
 800bf40:	4639      	mov	r1, r7
 800bf42:	f7f4 fc3b 	bl	80007bc <__aeabi_ddiv>
 800bf46:	f04f 0a00 	mov.w	sl, #0
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	460d      	mov	r5, r1
 800bf4e:	4622      	mov	r2, r4
 800bf50:	462b      	mov	r3, r5
 800bf52:	4620      	mov	r0, r4
 800bf54:	4629      	mov	r1, r5
 800bf56:	f7f4 fb07 	bl	8000568 <__aeabi_dmul>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4680      	mov	r8, r0
 800bf60:	4689      	mov	r9, r1
 800bf62:	f7f4 fb01 	bl	8000568 <__aeabi_dmul>
 800bf66:	a374      	add	r3, pc, #464	; (adr r3, 800c138 <atan+0x2b8>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	4606      	mov	r6, r0
 800bf6e:	460f      	mov	r7, r1
 800bf70:	f7f4 fafa 	bl	8000568 <__aeabi_dmul>
 800bf74:	a372      	add	r3, pc, #456	; (adr r3, 800c140 <atan+0x2c0>)
 800bf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7a:	f7f4 f93f 	bl	80001fc <__adddf3>
 800bf7e:	4632      	mov	r2, r6
 800bf80:	463b      	mov	r3, r7
 800bf82:	f7f4 faf1 	bl	8000568 <__aeabi_dmul>
 800bf86:	a370      	add	r3, pc, #448	; (adr r3, 800c148 <atan+0x2c8>)
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	f7f4 f936 	bl	80001fc <__adddf3>
 800bf90:	4632      	mov	r2, r6
 800bf92:	463b      	mov	r3, r7
 800bf94:	f7f4 fae8 	bl	8000568 <__aeabi_dmul>
 800bf98:	a36d      	add	r3, pc, #436	; (adr r3, 800c150 <atan+0x2d0>)
 800bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9e:	f7f4 f92d 	bl	80001fc <__adddf3>
 800bfa2:	4632      	mov	r2, r6
 800bfa4:	463b      	mov	r3, r7
 800bfa6:	f7f4 fadf 	bl	8000568 <__aeabi_dmul>
 800bfaa:	a36b      	add	r3, pc, #428	; (adr r3, 800c158 <atan+0x2d8>)
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	f7f4 f924 	bl	80001fc <__adddf3>
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	463b      	mov	r3, r7
 800bfb8:	f7f4 fad6 	bl	8000568 <__aeabi_dmul>
 800bfbc:	a368      	add	r3, pc, #416	; (adr r3, 800c160 <atan+0x2e0>)
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	f7f4 f91b 	bl	80001fc <__adddf3>
 800bfc6:	4642      	mov	r2, r8
 800bfc8:	464b      	mov	r3, r9
 800bfca:	f7f4 facd 	bl	8000568 <__aeabi_dmul>
 800bfce:	a366      	add	r3, pc, #408	; (adr r3, 800c168 <atan+0x2e8>)
 800bfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd4:	4680      	mov	r8, r0
 800bfd6:	4689      	mov	r9, r1
 800bfd8:	4630      	mov	r0, r6
 800bfda:	4639      	mov	r1, r7
 800bfdc:	f7f4 fac4 	bl	8000568 <__aeabi_dmul>
 800bfe0:	a363      	add	r3, pc, #396	; (adr r3, 800c170 <atan+0x2f0>)
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	f7f4 f907 	bl	80001f8 <__aeabi_dsub>
 800bfea:	4632      	mov	r2, r6
 800bfec:	463b      	mov	r3, r7
 800bfee:	f7f4 fabb 	bl	8000568 <__aeabi_dmul>
 800bff2:	a361      	add	r3, pc, #388	; (adr r3, 800c178 <atan+0x2f8>)
 800bff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff8:	f7f4 f8fe 	bl	80001f8 <__aeabi_dsub>
 800bffc:	4632      	mov	r2, r6
 800bffe:	463b      	mov	r3, r7
 800c000:	f7f4 fab2 	bl	8000568 <__aeabi_dmul>
 800c004:	a35e      	add	r3, pc, #376	; (adr r3, 800c180 <atan+0x300>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f7f4 f8f5 	bl	80001f8 <__aeabi_dsub>
 800c00e:	4632      	mov	r2, r6
 800c010:	463b      	mov	r3, r7
 800c012:	f7f4 faa9 	bl	8000568 <__aeabi_dmul>
 800c016:	a35c      	add	r3, pc, #368	; (adr r3, 800c188 <atan+0x308>)
 800c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01c:	f7f4 f8ec 	bl	80001f8 <__aeabi_dsub>
 800c020:	4632      	mov	r2, r6
 800c022:	463b      	mov	r3, r7
 800c024:	f7f4 faa0 	bl	8000568 <__aeabi_dmul>
 800c028:	4602      	mov	r2, r0
 800c02a:	460b      	mov	r3, r1
 800c02c:	4640      	mov	r0, r8
 800c02e:	4649      	mov	r1, r9
 800c030:	f7f4 f8e4 	bl	80001fc <__adddf3>
 800c034:	4622      	mov	r2, r4
 800c036:	462b      	mov	r3, r5
 800c038:	f7f4 fa96 	bl	8000568 <__aeabi_dmul>
 800c03c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	d14b      	bne.n	800c0de <atan+0x25e>
 800c046:	4620      	mov	r0, r4
 800c048:	4629      	mov	r1, r5
 800c04a:	f7f4 f8d5 	bl	80001f8 <__aeabi_dsub>
 800c04e:	e72c      	b.n	800beaa <atan+0x2a>
 800c050:	ee10 0a10 	vmov	r0, s0
 800c054:	4b53      	ldr	r3, [pc, #332]	; (800c1a4 <atan+0x324>)
 800c056:	2200      	movs	r2, #0
 800c058:	4629      	mov	r1, r5
 800c05a:	f7f4 f8cd 	bl	80001f8 <__aeabi_dsub>
 800c05e:	4b51      	ldr	r3, [pc, #324]	; (800c1a4 <atan+0x324>)
 800c060:	4606      	mov	r6, r0
 800c062:	460f      	mov	r7, r1
 800c064:	2200      	movs	r2, #0
 800c066:	4620      	mov	r0, r4
 800c068:	4629      	mov	r1, r5
 800c06a:	f7f4 f8c7 	bl	80001fc <__adddf3>
 800c06e:	4602      	mov	r2, r0
 800c070:	460b      	mov	r3, r1
 800c072:	4630      	mov	r0, r6
 800c074:	4639      	mov	r1, r7
 800c076:	f7f4 fba1 	bl	80007bc <__aeabi_ddiv>
 800c07a:	f04f 0a01 	mov.w	sl, #1
 800c07e:	4604      	mov	r4, r0
 800c080:	460d      	mov	r5, r1
 800c082:	e764      	b.n	800bf4e <atan+0xce>
 800c084:	4b49      	ldr	r3, [pc, #292]	; (800c1ac <atan+0x32c>)
 800c086:	429e      	cmp	r6, r3
 800c088:	da1d      	bge.n	800c0c6 <atan+0x246>
 800c08a:	ee10 0a10 	vmov	r0, s0
 800c08e:	4b48      	ldr	r3, [pc, #288]	; (800c1b0 <atan+0x330>)
 800c090:	2200      	movs	r2, #0
 800c092:	4629      	mov	r1, r5
 800c094:	f7f4 f8b0 	bl	80001f8 <__aeabi_dsub>
 800c098:	4b45      	ldr	r3, [pc, #276]	; (800c1b0 <atan+0x330>)
 800c09a:	4606      	mov	r6, r0
 800c09c:	460f      	mov	r7, r1
 800c09e:	2200      	movs	r2, #0
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	4629      	mov	r1, r5
 800c0a4:	f7f4 fa60 	bl	8000568 <__aeabi_dmul>
 800c0a8:	4b3e      	ldr	r3, [pc, #248]	; (800c1a4 <atan+0x324>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f7f4 f8a6 	bl	80001fc <__adddf3>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	4639      	mov	r1, r7
 800c0b8:	f7f4 fb80 	bl	80007bc <__aeabi_ddiv>
 800c0bc:	f04f 0a02 	mov.w	sl, #2
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	460d      	mov	r5, r1
 800c0c4:	e743      	b.n	800bf4e <atan+0xce>
 800c0c6:	462b      	mov	r3, r5
 800c0c8:	ee10 2a10 	vmov	r2, s0
 800c0cc:	4939      	ldr	r1, [pc, #228]	; (800c1b4 <atan+0x334>)
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	f7f4 fb74 	bl	80007bc <__aeabi_ddiv>
 800c0d4:	f04f 0a03 	mov.w	sl, #3
 800c0d8:	4604      	mov	r4, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	e737      	b.n	800bf4e <atan+0xce>
 800c0de:	4b36      	ldr	r3, [pc, #216]	; (800c1b8 <atan+0x338>)
 800c0e0:	4e36      	ldr	r6, [pc, #216]	; (800c1bc <atan+0x33c>)
 800c0e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c0e6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c0ea:	e9da 2300 	ldrd	r2, r3, [sl]
 800c0ee:	f7f4 f883 	bl	80001f8 <__aeabi_dsub>
 800c0f2:	4622      	mov	r2, r4
 800c0f4:	462b      	mov	r3, r5
 800c0f6:	f7f4 f87f 	bl	80001f8 <__aeabi_dsub>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c102:	f7f4 f879 	bl	80001f8 <__aeabi_dsub>
 800c106:	f1bb 0f00 	cmp.w	fp, #0
 800c10a:	4604      	mov	r4, r0
 800c10c:	460d      	mov	r5, r1
 800c10e:	f6bf aed6 	bge.w	800bebe <atan+0x3e>
 800c112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c116:	461d      	mov	r5, r3
 800c118:	e6d1      	b.n	800bebe <atan+0x3e>
 800c11a:	a51d      	add	r5, pc, #116	; (adr r5, 800c190 <atan+0x310>)
 800c11c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c120:	e6cd      	b.n	800bebe <atan+0x3e>
 800c122:	bf00      	nop
 800c124:	f3af 8000 	nop.w
 800c128:	54442d18 	.word	0x54442d18
 800c12c:	bff921fb 	.word	0xbff921fb
 800c130:	8800759c 	.word	0x8800759c
 800c134:	7e37e43c 	.word	0x7e37e43c
 800c138:	e322da11 	.word	0xe322da11
 800c13c:	3f90ad3a 	.word	0x3f90ad3a
 800c140:	24760deb 	.word	0x24760deb
 800c144:	3fa97b4b 	.word	0x3fa97b4b
 800c148:	a0d03d51 	.word	0xa0d03d51
 800c14c:	3fb10d66 	.word	0x3fb10d66
 800c150:	c54c206e 	.word	0xc54c206e
 800c154:	3fb745cd 	.word	0x3fb745cd
 800c158:	920083ff 	.word	0x920083ff
 800c15c:	3fc24924 	.word	0x3fc24924
 800c160:	5555550d 	.word	0x5555550d
 800c164:	3fd55555 	.word	0x3fd55555
 800c168:	2c6a6c2f 	.word	0x2c6a6c2f
 800c16c:	bfa2b444 	.word	0xbfa2b444
 800c170:	52defd9a 	.word	0x52defd9a
 800c174:	3fadde2d 	.word	0x3fadde2d
 800c178:	af749a6d 	.word	0xaf749a6d
 800c17c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c180:	fe231671 	.word	0xfe231671
 800c184:	3fbc71c6 	.word	0x3fbc71c6
 800c188:	9998ebc4 	.word	0x9998ebc4
 800c18c:	3fc99999 	.word	0x3fc99999
 800c190:	54442d18 	.word	0x54442d18
 800c194:	3ff921fb 	.word	0x3ff921fb
 800c198:	440fffff 	.word	0x440fffff
 800c19c:	7ff00000 	.word	0x7ff00000
 800c1a0:	3fdbffff 	.word	0x3fdbffff
 800c1a4:	3ff00000 	.word	0x3ff00000
 800c1a8:	3ff2ffff 	.word	0x3ff2ffff
 800c1ac:	40038000 	.word	0x40038000
 800c1b0:	3ff80000 	.word	0x3ff80000
 800c1b4:	bff00000 	.word	0xbff00000
 800c1b8:	0800de90 	.word	0x0800de90
 800c1bc:	0800de70 	.word	0x0800de70

0800c1c0 <cos>:
 800c1c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1c2:	ec53 2b10 	vmov	r2, r3, d0
 800c1c6:	4824      	ldr	r0, [pc, #144]	; (800c258 <cos+0x98>)
 800c1c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c1cc:	4281      	cmp	r1, r0
 800c1ce:	dc06      	bgt.n	800c1de <cos+0x1e>
 800c1d0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800c250 <cos+0x90>
 800c1d4:	f000 ff00 	bl	800cfd8 <__kernel_cos>
 800c1d8:	ec51 0b10 	vmov	r0, r1, d0
 800c1dc:	e007      	b.n	800c1ee <cos+0x2e>
 800c1de:	481f      	ldr	r0, [pc, #124]	; (800c25c <cos+0x9c>)
 800c1e0:	4281      	cmp	r1, r0
 800c1e2:	dd09      	ble.n	800c1f8 <cos+0x38>
 800c1e4:	ee10 0a10 	vmov	r0, s0
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	f7f4 f805 	bl	80001f8 <__aeabi_dsub>
 800c1ee:	ec41 0b10 	vmov	d0, r0, r1
 800c1f2:	b005      	add	sp, #20
 800c1f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1f8:	4668      	mov	r0, sp
 800c1fa:	f000 fc2d 	bl	800ca58 <__ieee754_rem_pio2>
 800c1fe:	f000 0003 	and.w	r0, r0, #3
 800c202:	2801      	cmp	r0, #1
 800c204:	d007      	beq.n	800c216 <cos+0x56>
 800c206:	2802      	cmp	r0, #2
 800c208:	d012      	beq.n	800c230 <cos+0x70>
 800c20a:	b9c0      	cbnz	r0, 800c23e <cos+0x7e>
 800c20c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c210:	ed9d 0b00 	vldr	d0, [sp]
 800c214:	e7de      	b.n	800c1d4 <cos+0x14>
 800c216:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c21a:	ed9d 0b00 	vldr	d0, [sp]
 800c21e:	f001 fae3 	bl	800d7e8 <__kernel_sin>
 800c222:	ec53 2b10 	vmov	r2, r3, d0
 800c226:	ee10 0a10 	vmov	r0, s0
 800c22a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c22e:	e7de      	b.n	800c1ee <cos+0x2e>
 800c230:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c234:	ed9d 0b00 	vldr	d0, [sp]
 800c238:	f000 fece 	bl	800cfd8 <__kernel_cos>
 800c23c:	e7f1      	b.n	800c222 <cos+0x62>
 800c23e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c242:	ed9d 0b00 	vldr	d0, [sp]
 800c246:	2001      	movs	r0, #1
 800c248:	f001 face 	bl	800d7e8 <__kernel_sin>
 800c24c:	e7c4      	b.n	800c1d8 <cos+0x18>
 800c24e:	bf00      	nop
	...
 800c258:	3fe921fb 	.word	0x3fe921fb
 800c25c:	7fefffff 	.word	0x7fefffff

0800c260 <fabs>:
 800c260:	ec51 0b10 	vmov	r0, r1, d0
 800c264:	ee10 2a10 	vmov	r2, s0
 800c268:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c26c:	ec43 2b10 	vmov	d0, r2, r3
 800c270:	4770      	bx	lr
 800c272:	0000      	movs	r0, r0
 800c274:	0000      	movs	r0, r0
	...

0800c278 <sin>:
 800c278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c27a:	ec53 2b10 	vmov	r2, r3, d0
 800c27e:	4826      	ldr	r0, [pc, #152]	; (800c318 <sin+0xa0>)
 800c280:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c284:	4281      	cmp	r1, r0
 800c286:	dc07      	bgt.n	800c298 <sin+0x20>
 800c288:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c310 <sin+0x98>
 800c28c:	2000      	movs	r0, #0
 800c28e:	f001 faab 	bl	800d7e8 <__kernel_sin>
 800c292:	ec51 0b10 	vmov	r0, r1, d0
 800c296:	e007      	b.n	800c2a8 <sin+0x30>
 800c298:	4820      	ldr	r0, [pc, #128]	; (800c31c <sin+0xa4>)
 800c29a:	4281      	cmp	r1, r0
 800c29c:	dd09      	ble.n	800c2b2 <sin+0x3a>
 800c29e:	ee10 0a10 	vmov	r0, s0
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	f7f3 ffa8 	bl	80001f8 <__aeabi_dsub>
 800c2a8:	ec41 0b10 	vmov	d0, r0, r1
 800c2ac:	b005      	add	sp, #20
 800c2ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2b2:	4668      	mov	r0, sp
 800c2b4:	f000 fbd0 	bl	800ca58 <__ieee754_rem_pio2>
 800c2b8:	f000 0003 	and.w	r0, r0, #3
 800c2bc:	2801      	cmp	r0, #1
 800c2be:	d008      	beq.n	800c2d2 <sin+0x5a>
 800c2c0:	2802      	cmp	r0, #2
 800c2c2:	d00d      	beq.n	800c2e0 <sin+0x68>
 800c2c4:	b9d0      	cbnz	r0, 800c2fc <sin+0x84>
 800c2c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2ca:	ed9d 0b00 	vldr	d0, [sp]
 800c2ce:	2001      	movs	r0, #1
 800c2d0:	e7dd      	b.n	800c28e <sin+0x16>
 800c2d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2d6:	ed9d 0b00 	vldr	d0, [sp]
 800c2da:	f000 fe7d 	bl	800cfd8 <__kernel_cos>
 800c2de:	e7d8      	b.n	800c292 <sin+0x1a>
 800c2e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2e4:	ed9d 0b00 	vldr	d0, [sp]
 800c2e8:	2001      	movs	r0, #1
 800c2ea:	f001 fa7d 	bl	800d7e8 <__kernel_sin>
 800c2ee:	ec53 2b10 	vmov	r2, r3, d0
 800c2f2:	ee10 0a10 	vmov	r0, s0
 800c2f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c2fa:	e7d5      	b.n	800c2a8 <sin+0x30>
 800c2fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c300:	ed9d 0b00 	vldr	d0, [sp]
 800c304:	f000 fe68 	bl	800cfd8 <__kernel_cos>
 800c308:	e7f1      	b.n	800c2ee <sin+0x76>
 800c30a:	bf00      	nop
 800c30c:	f3af 8000 	nop.w
	...
 800c318:	3fe921fb 	.word	0x3fe921fb
 800c31c:	7fefffff 	.word	0x7fefffff

0800c320 <acos>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	ed2d 8b02 	vpush	{d8}
 800c326:	ec55 4b10 	vmov	r4, r5, d0
 800c32a:	f000 f869 	bl	800c400 <__ieee754_acos>
 800c32e:	4b16      	ldr	r3, [pc, #88]	; (800c388 <acos+0x68>)
 800c330:	eeb0 8a40 	vmov.f32	s16, s0
 800c334:	eef0 8a60 	vmov.f32	s17, s1
 800c338:	f993 3000 	ldrsb.w	r3, [r3]
 800c33c:	3301      	adds	r3, #1
 800c33e:	d01c      	beq.n	800c37a <acos+0x5a>
 800c340:	4622      	mov	r2, r4
 800c342:	462b      	mov	r3, r5
 800c344:	4620      	mov	r0, r4
 800c346:	4629      	mov	r1, r5
 800c348:	f7f4 fba8 	bl	8000a9c <__aeabi_dcmpun>
 800c34c:	b9a8      	cbnz	r0, 800c37a <acos+0x5a>
 800c34e:	ec45 4b10 	vmov	d0, r4, r5
 800c352:	f7ff ff85 	bl	800c260 <fabs>
 800c356:	4b0d      	ldr	r3, [pc, #52]	; (800c38c <acos+0x6c>)
 800c358:	ec51 0b10 	vmov	r0, r1, d0
 800c35c:	2200      	movs	r2, #0
 800c35e:	f7f4 fb93 	bl	8000a88 <__aeabi_dcmpgt>
 800c362:	b150      	cbz	r0, 800c37a <acos+0x5a>
 800c364:	f7ff fd5a 	bl	800be1c <__errno>
 800c368:	ecbd 8b02 	vpop	{d8}
 800c36c:	2321      	movs	r3, #33	; 0x21
 800c36e:	6003      	str	r3, [r0, #0]
 800c370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c374:	4806      	ldr	r0, [pc, #24]	; (800c390 <acos+0x70>)
 800c376:	f001 bb77 	b.w	800da68 <nan>
 800c37a:	eeb0 0a48 	vmov.f32	s0, s16
 800c37e:	eef0 0a68 	vmov.f32	s1, s17
 800c382:	ecbd 8b02 	vpop	{d8}
 800c386:	bd38      	pop	{r3, r4, r5, pc}
 800c388:	20000260 	.word	0x20000260
 800c38c:	3ff00000 	.word	0x3ff00000
 800c390:	0800deb0 	.word	0x0800deb0

0800c394 <atan2>:
 800c394:	f000 ba94 	b.w	800c8c0 <__ieee754_atan2>

0800c398 <sqrt>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	ed2d 8b02 	vpush	{d8}
 800c39e:	ec55 4b10 	vmov	r4, r5, d0
 800c3a2:	f000 fd63 	bl	800ce6c <__ieee754_sqrt>
 800c3a6:	4b15      	ldr	r3, [pc, #84]	; (800c3fc <sqrt+0x64>)
 800c3a8:	eeb0 8a40 	vmov.f32	s16, s0
 800c3ac:	eef0 8a60 	vmov.f32	s17, s1
 800c3b0:	f993 3000 	ldrsb.w	r3, [r3]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	d019      	beq.n	800c3ec <sqrt+0x54>
 800c3b8:	4622      	mov	r2, r4
 800c3ba:	462b      	mov	r3, r5
 800c3bc:	4620      	mov	r0, r4
 800c3be:	4629      	mov	r1, r5
 800c3c0:	f7f4 fb6c 	bl	8000a9c <__aeabi_dcmpun>
 800c3c4:	b990      	cbnz	r0, 800c3ec <sqrt+0x54>
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f7f4 fb3d 	bl	8000a4c <__aeabi_dcmplt>
 800c3d2:	b158      	cbz	r0, 800c3ec <sqrt+0x54>
 800c3d4:	f7ff fd22 	bl	800be1c <__errno>
 800c3d8:	2321      	movs	r3, #33	; 0x21
 800c3da:	6003      	str	r3, [r0, #0]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	2300      	movs	r3, #0
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	f7f4 f9ea 	bl	80007bc <__aeabi_ddiv>
 800c3e8:	ec41 0b18 	vmov	d8, r0, r1
 800c3ec:	eeb0 0a48 	vmov.f32	s0, s16
 800c3f0:	eef0 0a68 	vmov.f32	s1, s17
 800c3f4:	ecbd 8b02 	vpop	{d8}
 800c3f8:	bd38      	pop	{r3, r4, r5, pc}
 800c3fa:	bf00      	nop
 800c3fc:	20000260 	.word	0x20000260

0800c400 <__ieee754_acos>:
 800c400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c404:	ec55 4b10 	vmov	r4, r5, d0
 800c408:	49b7      	ldr	r1, [pc, #732]	; (800c6e8 <__ieee754_acos+0x2e8>)
 800c40a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c40e:	428b      	cmp	r3, r1
 800c410:	dd1b      	ble.n	800c44a <__ieee754_acos+0x4a>
 800c412:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800c416:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c41a:	4323      	orrs	r3, r4
 800c41c:	d106      	bne.n	800c42c <__ieee754_acos+0x2c>
 800c41e:	2d00      	cmp	r5, #0
 800c420:	f300 8211 	bgt.w	800c846 <__ieee754_acos+0x446>
 800c424:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800c680 <__ieee754_acos+0x280>
 800c428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42c:	ee10 2a10 	vmov	r2, s0
 800c430:	462b      	mov	r3, r5
 800c432:	ee10 0a10 	vmov	r0, s0
 800c436:	4629      	mov	r1, r5
 800c438:	f7f3 fede 	bl	80001f8 <__aeabi_dsub>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	f7f4 f9bc 	bl	80007bc <__aeabi_ddiv>
 800c444:	ec41 0b10 	vmov	d0, r0, r1
 800c448:	e7ee      	b.n	800c428 <__ieee754_acos+0x28>
 800c44a:	49a8      	ldr	r1, [pc, #672]	; (800c6ec <__ieee754_acos+0x2ec>)
 800c44c:	428b      	cmp	r3, r1
 800c44e:	f300 8087 	bgt.w	800c560 <__ieee754_acos+0x160>
 800c452:	4aa7      	ldr	r2, [pc, #668]	; (800c6f0 <__ieee754_acos+0x2f0>)
 800c454:	4293      	cmp	r3, r2
 800c456:	f340 81f9 	ble.w	800c84c <__ieee754_acos+0x44c>
 800c45a:	ee10 2a10 	vmov	r2, s0
 800c45e:	ee10 0a10 	vmov	r0, s0
 800c462:	462b      	mov	r3, r5
 800c464:	4629      	mov	r1, r5
 800c466:	f7f4 f87f 	bl	8000568 <__aeabi_dmul>
 800c46a:	a387      	add	r3, pc, #540	; (adr r3, 800c688 <__ieee754_acos+0x288>)
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	4606      	mov	r6, r0
 800c472:	460f      	mov	r7, r1
 800c474:	f7f4 f878 	bl	8000568 <__aeabi_dmul>
 800c478:	a385      	add	r3, pc, #532	; (adr r3, 800c690 <__ieee754_acos+0x290>)
 800c47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47e:	f7f3 febd 	bl	80001fc <__adddf3>
 800c482:	4632      	mov	r2, r6
 800c484:	463b      	mov	r3, r7
 800c486:	f7f4 f86f 	bl	8000568 <__aeabi_dmul>
 800c48a:	a383      	add	r3, pc, #524	; (adr r3, 800c698 <__ieee754_acos+0x298>)
 800c48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c490:	f7f3 feb2 	bl	80001f8 <__aeabi_dsub>
 800c494:	4632      	mov	r2, r6
 800c496:	463b      	mov	r3, r7
 800c498:	f7f4 f866 	bl	8000568 <__aeabi_dmul>
 800c49c:	a380      	add	r3, pc, #512	; (adr r3, 800c6a0 <__ieee754_acos+0x2a0>)
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	f7f3 feab 	bl	80001fc <__adddf3>
 800c4a6:	4632      	mov	r2, r6
 800c4a8:	463b      	mov	r3, r7
 800c4aa:	f7f4 f85d 	bl	8000568 <__aeabi_dmul>
 800c4ae:	a37e      	add	r3, pc, #504	; (adr r3, 800c6a8 <__ieee754_acos+0x2a8>)
 800c4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b4:	f7f3 fea0 	bl	80001f8 <__aeabi_dsub>
 800c4b8:	4632      	mov	r2, r6
 800c4ba:	463b      	mov	r3, r7
 800c4bc:	f7f4 f854 	bl	8000568 <__aeabi_dmul>
 800c4c0:	a37b      	add	r3, pc, #492	; (adr r3, 800c6b0 <__ieee754_acos+0x2b0>)
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	f7f3 fe99 	bl	80001fc <__adddf3>
 800c4ca:	4632      	mov	r2, r6
 800c4cc:	463b      	mov	r3, r7
 800c4ce:	f7f4 f84b 	bl	8000568 <__aeabi_dmul>
 800c4d2:	a379      	add	r3, pc, #484	; (adr r3, 800c6b8 <__ieee754_acos+0x2b8>)
 800c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d8:	4680      	mov	r8, r0
 800c4da:	4689      	mov	r9, r1
 800c4dc:	4630      	mov	r0, r6
 800c4de:	4639      	mov	r1, r7
 800c4e0:	f7f4 f842 	bl	8000568 <__aeabi_dmul>
 800c4e4:	a376      	add	r3, pc, #472	; (adr r3, 800c6c0 <__ieee754_acos+0x2c0>)
 800c4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ea:	f7f3 fe85 	bl	80001f8 <__aeabi_dsub>
 800c4ee:	4632      	mov	r2, r6
 800c4f0:	463b      	mov	r3, r7
 800c4f2:	f7f4 f839 	bl	8000568 <__aeabi_dmul>
 800c4f6:	a374      	add	r3, pc, #464	; (adr r3, 800c6c8 <__ieee754_acos+0x2c8>)
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	f7f3 fe7e 	bl	80001fc <__adddf3>
 800c500:	4632      	mov	r2, r6
 800c502:	463b      	mov	r3, r7
 800c504:	f7f4 f830 	bl	8000568 <__aeabi_dmul>
 800c508:	a371      	add	r3, pc, #452	; (adr r3, 800c6d0 <__ieee754_acos+0x2d0>)
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	f7f3 fe73 	bl	80001f8 <__aeabi_dsub>
 800c512:	4632      	mov	r2, r6
 800c514:	463b      	mov	r3, r7
 800c516:	f7f4 f827 	bl	8000568 <__aeabi_dmul>
 800c51a:	4b76      	ldr	r3, [pc, #472]	; (800c6f4 <__ieee754_acos+0x2f4>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	f7f3 fe6d 	bl	80001fc <__adddf3>
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	4640      	mov	r0, r8
 800c528:	4649      	mov	r1, r9
 800c52a:	f7f4 f947 	bl	80007bc <__aeabi_ddiv>
 800c52e:	4622      	mov	r2, r4
 800c530:	462b      	mov	r3, r5
 800c532:	f7f4 f819 	bl	8000568 <__aeabi_dmul>
 800c536:	4602      	mov	r2, r0
 800c538:	460b      	mov	r3, r1
 800c53a:	a167      	add	r1, pc, #412	; (adr r1, 800c6d8 <__ieee754_acos+0x2d8>)
 800c53c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c540:	f7f3 fe5a 	bl	80001f8 <__aeabi_dsub>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4620      	mov	r0, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	f7f3 fe54 	bl	80001f8 <__aeabi_dsub>
 800c550:	4602      	mov	r2, r0
 800c552:	460b      	mov	r3, r1
 800c554:	a162      	add	r1, pc, #392	; (adr r1, 800c6e0 <__ieee754_acos+0x2e0>)
 800c556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c55a:	f7f3 fe4d 	bl	80001f8 <__aeabi_dsub>
 800c55e:	e771      	b.n	800c444 <__ieee754_acos+0x44>
 800c560:	2d00      	cmp	r5, #0
 800c562:	f280 80cb 	bge.w	800c6fc <__ieee754_acos+0x2fc>
 800c566:	ee10 0a10 	vmov	r0, s0
 800c56a:	4b62      	ldr	r3, [pc, #392]	; (800c6f4 <__ieee754_acos+0x2f4>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	4629      	mov	r1, r5
 800c570:	f7f3 fe44 	bl	80001fc <__adddf3>
 800c574:	4b60      	ldr	r3, [pc, #384]	; (800c6f8 <__ieee754_acos+0x2f8>)
 800c576:	2200      	movs	r2, #0
 800c578:	f7f3 fff6 	bl	8000568 <__aeabi_dmul>
 800c57c:	a342      	add	r3, pc, #264	; (adr r3, 800c688 <__ieee754_acos+0x288>)
 800c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c582:	4604      	mov	r4, r0
 800c584:	460d      	mov	r5, r1
 800c586:	f7f3 ffef 	bl	8000568 <__aeabi_dmul>
 800c58a:	a341      	add	r3, pc, #260	; (adr r3, 800c690 <__ieee754_acos+0x290>)
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	f7f3 fe34 	bl	80001fc <__adddf3>
 800c594:	4622      	mov	r2, r4
 800c596:	462b      	mov	r3, r5
 800c598:	f7f3 ffe6 	bl	8000568 <__aeabi_dmul>
 800c59c:	a33e      	add	r3, pc, #248	; (adr r3, 800c698 <__ieee754_acos+0x298>)
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	f7f3 fe29 	bl	80001f8 <__aeabi_dsub>
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	462b      	mov	r3, r5
 800c5aa:	f7f3 ffdd 	bl	8000568 <__aeabi_dmul>
 800c5ae:	a33c      	add	r3, pc, #240	; (adr r3, 800c6a0 <__ieee754_acos+0x2a0>)
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	f7f3 fe22 	bl	80001fc <__adddf3>
 800c5b8:	4622      	mov	r2, r4
 800c5ba:	462b      	mov	r3, r5
 800c5bc:	f7f3 ffd4 	bl	8000568 <__aeabi_dmul>
 800c5c0:	a339      	add	r3, pc, #228	; (adr r3, 800c6a8 <__ieee754_acos+0x2a8>)
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	f7f3 fe17 	bl	80001f8 <__aeabi_dsub>
 800c5ca:	4622      	mov	r2, r4
 800c5cc:	462b      	mov	r3, r5
 800c5ce:	f7f3 ffcb 	bl	8000568 <__aeabi_dmul>
 800c5d2:	a337      	add	r3, pc, #220	; (adr r3, 800c6b0 <__ieee754_acos+0x2b0>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f3 fe10 	bl	80001fc <__adddf3>
 800c5dc:	4622      	mov	r2, r4
 800c5de:	462b      	mov	r3, r5
 800c5e0:	f7f3 ffc2 	bl	8000568 <__aeabi_dmul>
 800c5e4:	ec45 4b10 	vmov	d0, r4, r5
 800c5e8:	4680      	mov	r8, r0
 800c5ea:	4689      	mov	r9, r1
 800c5ec:	f000 fc3e 	bl	800ce6c <__ieee754_sqrt>
 800c5f0:	a331      	add	r3, pc, #196	; (adr r3, 800c6b8 <__ieee754_acos+0x2b8>)
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	ec57 6b10 	vmov	r6, r7, d0
 800c5fe:	f7f3 ffb3 	bl	8000568 <__aeabi_dmul>
 800c602:	a32f      	add	r3, pc, #188	; (adr r3, 800c6c0 <__ieee754_acos+0x2c0>)
 800c604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c608:	f7f3 fdf6 	bl	80001f8 <__aeabi_dsub>
 800c60c:	4622      	mov	r2, r4
 800c60e:	462b      	mov	r3, r5
 800c610:	f7f3 ffaa 	bl	8000568 <__aeabi_dmul>
 800c614:	a32c      	add	r3, pc, #176	; (adr r3, 800c6c8 <__ieee754_acos+0x2c8>)
 800c616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61a:	f7f3 fdef 	bl	80001fc <__adddf3>
 800c61e:	4622      	mov	r2, r4
 800c620:	462b      	mov	r3, r5
 800c622:	f7f3 ffa1 	bl	8000568 <__aeabi_dmul>
 800c626:	a32a      	add	r3, pc, #168	; (adr r3, 800c6d0 <__ieee754_acos+0x2d0>)
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	f7f3 fde4 	bl	80001f8 <__aeabi_dsub>
 800c630:	4622      	mov	r2, r4
 800c632:	462b      	mov	r3, r5
 800c634:	f7f3 ff98 	bl	8000568 <__aeabi_dmul>
 800c638:	4b2e      	ldr	r3, [pc, #184]	; (800c6f4 <__ieee754_acos+0x2f4>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	f7f3 fdde 	bl	80001fc <__adddf3>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	4640      	mov	r0, r8
 800c646:	4649      	mov	r1, r9
 800c648:	f7f4 f8b8 	bl	80007bc <__aeabi_ddiv>
 800c64c:	4632      	mov	r2, r6
 800c64e:	463b      	mov	r3, r7
 800c650:	f7f3 ff8a 	bl	8000568 <__aeabi_dmul>
 800c654:	a320      	add	r3, pc, #128	; (adr r3, 800c6d8 <__ieee754_acos+0x2d8>)
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	f7f3 fdcd 	bl	80001f8 <__aeabi_dsub>
 800c65e:	4632      	mov	r2, r6
 800c660:	463b      	mov	r3, r7
 800c662:	f7f3 fdcb 	bl	80001fc <__adddf3>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	f7f3 fdc7 	bl	80001fc <__adddf3>
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	a103      	add	r1, pc, #12	; (adr r1, 800c680 <__ieee754_acos+0x280>)
 800c674:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c678:	e76f      	b.n	800c55a <__ieee754_acos+0x15a>
 800c67a:	bf00      	nop
 800c67c:	f3af 8000 	nop.w
 800c680:	54442d18 	.word	0x54442d18
 800c684:	400921fb 	.word	0x400921fb
 800c688:	0dfdf709 	.word	0x0dfdf709
 800c68c:	3f023de1 	.word	0x3f023de1
 800c690:	7501b288 	.word	0x7501b288
 800c694:	3f49efe0 	.word	0x3f49efe0
 800c698:	b5688f3b 	.word	0xb5688f3b
 800c69c:	3fa48228 	.word	0x3fa48228
 800c6a0:	0e884455 	.word	0x0e884455
 800c6a4:	3fc9c155 	.word	0x3fc9c155
 800c6a8:	03eb6f7d 	.word	0x03eb6f7d
 800c6ac:	3fd4d612 	.word	0x3fd4d612
 800c6b0:	55555555 	.word	0x55555555
 800c6b4:	3fc55555 	.word	0x3fc55555
 800c6b8:	b12e9282 	.word	0xb12e9282
 800c6bc:	3fb3b8c5 	.word	0x3fb3b8c5
 800c6c0:	1b8d0159 	.word	0x1b8d0159
 800c6c4:	3fe6066c 	.word	0x3fe6066c
 800c6c8:	9c598ac8 	.word	0x9c598ac8
 800c6cc:	40002ae5 	.word	0x40002ae5
 800c6d0:	1c8a2d4b 	.word	0x1c8a2d4b
 800c6d4:	40033a27 	.word	0x40033a27
 800c6d8:	33145c07 	.word	0x33145c07
 800c6dc:	3c91a626 	.word	0x3c91a626
 800c6e0:	54442d18 	.word	0x54442d18
 800c6e4:	3ff921fb 	.word	0x3ff921fb
 800c6e8:	3fefffff 	.word	0x3fefffff
 800c6ec:	3fdfffff 	.word	0x3fdfffff
 800c6f0:	3c600000 	.word	0x3c600000
 800c6f4:	3ff00000 	.word	0x3ff00000
 800c6f8:	3fe00000 	.word	0x3fe00000
 800c6fc:	ee10 2a10 	vmov	r2, s0
 800c700:	462b      	mov	r3, r5
 800c702:	496d      	ldr	r1, [pc, #436]	; (800c8b8 <__ieee754_acos+0x4b8>)
 800c704:	2000      	movs	r0, #0
 800c706:	f7f3 fd77 	bl	80001f8 <__aeabi_dsub>
 800c70a:	4b6c      	ldr	r3, [pc, #432]	; (800c8bc <__ieee754_acos+0x4bc>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	f7f3 ff2b 	bl	8000568 <__aeabi_dmul>
 800c712:	4604      	mov	r4, r0
 800c714:	460d      	mov	r5, r1
 800c716:	ec45 4b10 	vmov	d0, r4, r5
 800c71a:	f000 fba7 	bl	800ce6c <__ieee754_sqrt>
 800c71e:	a34e      	add	r3, pc, #312	; (adr r3, 800c858 <__ieee754_acos+0x458>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	4620      	mov	r0, r4
 800c726:	4629      	mov	r1, r5
 800c728:	ec59 8b10 	vmov	r8, r9, d0
 800c72c:	f7f3 ff1c 	bl	8000568 <__aeabi_dmul>
 800c730:	a34b      	add	r3, pc, #300	; (adr r3, 800c860 <__ieee754_acos+0x460>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	f7f3 fd61 	bl	80001fc <__adddf3>
 800c73a:	4622      	mov	r2, r4
 800c73c:	462b      	mov	r3, r5
 800c73e:	f7f3 ff13 	bl	8000568 <__aeabi_dmul>
 800c742:	a349      	add	r3, pc, #292	; (adr r3, 800c868 <__ieee754_acos+0x468>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fd56 	bl	80001f8 <__aeabi_dsub>
 800c74c:	4622      	mov	r2, r4
 800c74e:	462b      	mov	r3, r5
 800c750:	f7f3 ff0a 	bl	8000568 <__aeabi_dmul>
 800c754:	a346      	add	r3, pc, #280	; (adr r3, 800c870 <__ieee754_acos+0x470>)
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	f7f3 fd4f 	bl	80001fc <__adddf3>
 800c75e:	4622      	mov	r2, r4
 800c760:	462b      	mov	r3, r5
 800c762:	f7f3 ff01 	bl	8000568 <__aeabi_dmul>
 800c766:	a344      	add	r3, pc, #272	; (adr r3, 800c878 <__ieee754_acos+0x478>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f3 fd44 	bl	80001f8 <__aeabi_dsub>
 800c770:	4622      	mov	r2, r4
 800c772:	462b      	mov	r3, r5
 800c774:	f7f3 fef8 	bl	8000568 <__aeabi_dmul>
 800c778:	a341      	add	r3, pc, #260	; (adr r3, 800c880 <__ieee754_acos+0x480>)
 800c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77e:	f7f3 fd3d 	bl	80001fc <__adddf3>
 800c782:	4622      	mov	r2, r4
 800c784:	462b      	mov	r3, r5
 800c786:	f7f3 feef 	bl	8000568 <__aeabi_dmul>
 800c78a:	a33f      	add	r3, pc, #252	; (adr r3, 800c888 <__ieee754_acos+0x488>)
 800c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c790:	4682      	mov	sl, r0
 800c792:	468b      	mov	fp, r1
 800c794:	4620      	mov	r0, r4
 800c796:	4629      	mov	r1, r5
 800c798:	f7f3 fee6 	bl	8000568 <__aeabi_dmul>
 800c79c:	a33c      	add	r3, pc, #240	; (adr r3, 800c890 <__ieee754_acos+0x490>)
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	f7f3 fd29 	bl	80001f8 <__aeabi_dsub>
 800c7a6:	4622      	mov	r2, r4
 800c7a8:	462b      	mov	r3, r5
 800c7aa:	f7f3 fedd 	bl	8000568 <__aeabi_dmul>
 800c7ae:	a33a      	add	r3, pc, #232	; (adr r3, 800c898 <__ieee754_acos+0x498>)
 800c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b4:	f7f3 fd22 	bl	80001fc <__adddf3>
 800c7b8:	4622      	mov	r2, r4
 800c7ba:	462b      	mov	r3, r5
 800c7bc:	f7f3 fed4 	bl	8000568 <__aeabi_dmul>
 800c7c0:	a337      	add	r3, pc, #220	; (adr r3, 800c8a0 <__ieee754_acos+0x4a0>)
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	f7f3 fd17 	bl	80001f8 <__aeabi_dsub>
 800c7ca:	4622      	mov	r2, r4
 800c7cc:	462b      	mov	r3, r5
 800c7ce:	f7f3 fecb 	bl	8000568 <__aeabi_dmul>
 800c7d2:	4b39      	ldr	r3, [pc, #228]	; (800c8b8 <__ieee754_acos+0x4b8>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f7f3 fd11 	bl	80001fc <__adddf3>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4650      	mov	r0, sl
 800c7e0:	4659      	mov	r1, fp
 800c7e2:	f7f3 ffeb 	bl	80007bc <__aeabi_ddiv>
 800c7e6:	4642      	mov	r2, r8
 800c7e8:	464b      	mov	r3, r9
 800c7ea:	f7f3 febd 	bl	8000568 <__aeabi_dmul>
 800c7ee:	2600      	movs	r6, #0
 800c7f0:	4682      	mov	sl, r0
 800c7f2:	468b      	mov	fp, r1
 800c7f4:	4632      	mov	r2, r6
 800c7f6:	464b      	mov	r3, r9
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	4649      	mov	r1, r9
 800c7fc:	f7f3 feb4 	bl	8000568 <__aeabi_dmul>
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	4620      	mov	r0, r4
 800c806:	4629      	mov	r1, r5
 800c808:	f7f3 fcf6 	bl	80001f8 <__aeabi_dsub>
 800c80c:	4632      	mov	r2, r6
 800c80e:	4604      	mov	r4, r0
 800c810:	460d      	mov	r5, r1
 800c812:	464b      	mov	r3, r9
 800c814:	4640      	mov	r0, r8
 800c816:	4649      	mov	r1, r9
 800c818:	f7f3 fcf0 	bl	80001fc <__adddf3>
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	4620      	mov	r0, r4
 800c822:	4629      	mov	r1, r5
 800c824:	f7f3 ffca 	bl	80007bc <__aeabi_ddiv>
 800c828:	4602      	mov	r2, r0
 800c82a:	460b      	mov	r3, r1
 800c82c:	4650      	mov	r0, sl
 800c82e:	4659      	mov	r1, fp
 800c830:	f7f3 fce4 	bl	80001fc <__adddf3>
 800c834:	4632      	mov	r2, r6
 800c836:	464b      	mov	r3, r9
 800c838:	f7f3 fce0 	bl	80001fc <__adddf3>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	f7f3 fcdc 	bl	80001fc <__adddf3>
 800c844:	e5fe      	b.n	800c444 <__ieee754_acos+0x44>
 800c846:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c8a8 <__ieee754_acos+0x4a8>
 800c84a:	e5ed      	b.n	800c428 <__ieee754_acos+0x28>
 800c84c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c8b0 <__ieee754_acos+0x4b0>
 800c850:	e5ea      	b.n	800c428 <__ieee754_acos+0x28>
 800c852:	bf00      	nop
 800c854:	f3af 8000 	nop.w
 800c858:	0dfdf709 	.word	0x0dfdf709
 800c85c:	3f023de1 	.word	0x3f023de1
 800c860:	7501b288 	.word	0x7501b288
 800c864:	3f49efe0 	.word	0x3f49efe0
 800c868:	b5688f3b 	.word	0xb5688f3b
 800c86c:	3fa48228 	.word	0x3fa48228
 800c870:	0e884455 	.word	0x0e884455
 800c874:	3fc9c155 	.word	0x3fc9c155
 800c878:	03eb6f7d 	.word	0x03eb6f7d
 800c87c:	3fd4d612 	.word	0x3fd4d612
 800c880:	55555555 	.word	0x55555555
 800c884:	3fc55555 	.word	0x3fc55555
 800c888:	b12e9282 	.word	0xb12e9282
 800c88c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c890:	1b8d0159 	.word	0x1b8d0159
 800c894:	3fe6066c 	.word	0x3fe6066c
 800c898:	9c598ac8 	.word	0x9c598ac8
 800c89c:	40002ae5 	.word	0x40002ae5
 800c8a0:	1c8a2d4b 	.word	0x1c8a2d4b
 800c8a4:	40033a27 	.word	0x40033a27
	...
 800c8b0:	54442d18 	.word	0x54442d18
 800c8b4:	3ff921fb 	.word	0x3ff921fb
 800c8b8:	3ff00000 	.word	0x3ff00000
 800c8bc:	3fe00000 	.word	0x3fe00000

0800c8c0 <__ieee754_atan2>:
 800c8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8c4:	ec57 6b11 	vmov	r6, r7, d1
 800c8c8:	4273      	negs	r3, r6
 800c8ca:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ca50 <__ieee754_atan2+0x190>
 800c8ce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c8d2:	4333      	orrs	r3, r6
 800c8d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c8d8:	4573      	cmp	r3, lr
 800c8da:	ec51 0b10 	vmov	r0, r1, d0
 800c8de:	ee11 8a10 	vmov	r8, s2
 800c8e2:	d80a      	bhi.n	800c8fa <__ieee754_atan2+0x3a>
 800c8e4:	4244      	negs	r4, r0
 800c8e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8ea:	4304      	orrs	r4, r0
 800c8ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c8f0:	4574      	cmp	r4, lr
 800c8f2:	ee10 9a10 	vmov	r9, s0
 800c8f6:	468c      	mov	ip, r1
 800c8f8:	d907      	bls.n	800c90a <__ieee754_atan2+0x4a>
 800c8fa:	4632      	mov	r2, r6
 800c8fc:	463b      	mov	r3, r7
 800c8fe:	f7f3 fc7d 	bl	80001fc <__adddf3>
 800c902:	ec41 0b10 	vmov	d0, r0, r1
 800c906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c90a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c90e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c912:	4334      	orrs	r4, r6
 800c914:	d103      	bne.n	800c91e <__ieee754_atan2+0x5e>
 800c916:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c91a:	f7ff bab1 	b.w	800be80 <atan>
 800c91e:	17bc      	asrs	r4, r7, #30
 800c920:	f004 0402 	and.w	r4, r4, #2
 800c924:	ea53 0909 	orrs.w	r9, r3, r9
 800c928:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c92c:	d107      	bne.n	800c93e <__ieee754_atan2+0x7e>
 800c92e:	2c02      	cmp	r4, #2
 800c930:	d060      	beq.n	800c9f4 <__ieee754_atan2+0x134>
 800c932:	2c03      	cmp	r4, #3
 800c934:	d1e5      	bne.n	800c902 <__ieee754_atan2+0x42>
 800c936:	a142      	add	r1, pc, #264	; (adr r1, 800ca40 <__ieee754_atan2+0x180>)
 800c938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c93c:	e7e1      	b.n	800c902 <__ieee754_atan2+0x42>
 800c93e:	ea52 0808 	orrs.w	r8, r2, r8
 800c942:	d106      	bne.n	800c952 <__ieee754_atan2+0x92>
 800c944:	f1bc 0f00 	cmp.w	ip, #0
 800c948:	da5f      	bge.n	800ca0a <__ieee754_atan2+0x14a>
 800c94a:	a13f      	add	r1, pc, #252	; (adr r1, 800ca48 <__ieee754_atan2+0x188>)
 800c94c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c950:	e7d7      	b.n	800c902 <__ieee754_atan2+0x42>
 800c952:	4572      	cmp	r2, lr
 800c954:	d10f      	bne.n	800c976 <__ieee754_atan2+0xb6>
 800c956:	4293      	cmp	r3, r2
 800c958:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c95c:	d107      	bne.n	800c96e <__ieee754_atan2+0xae>
 800c95e:	2c02      	cmp	r4, #2
 800c960:	d84c      	bhi.n	800c9fc <__ieee754_atan2+0x13c>
 800c962:	4b35      	ldr	r3, [pc, #212]	; (800ca38 <__ieee754_atan2+0x178>)
 800c964:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c968:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c96c:	e7c9      	b.n	800c902 <__ieee754_atan2+0x42>
 800c96e:	2c02      	cmp	r4, #2
 800c970:	d848      	bhi.n	800ca04 <__ieee754_atan2+0x144>
 800c972:	4b32      	ldr	r3, [pc, #200]	; (800ca3c <__ieee754_atan2+0x17c>)
 800c974:	e7f6      	b.n	800c964 <__ieee754_atan2+0xa4>
 800c976:	4573      	cmp	r3, lr
 800c978:	d0e4      	beq.n	800c944 <__ieee754_atan2+0x84>
 800c97a:	1a9b      	subs	r3, r3, r2
 800c97c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c980:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c984:	da1e      	bge.n	800c9c4 <__ieee754_atan2+0x104>
 800c986:	2f00      	cmp	r7, #0
 800c988:	da01      	bge.n	800c98e <__ieee754_atan2+0xce>
 800c98a:	323c      	adds	r2, #60	; 0x3c
 800c98c:	db1e      	blt.n	800c9cc <__ieee754_atan2+0x10c>
 800c98e:	4632      	mov	r2, r6
 800c990:	463b      	mov	r3, r7
 800c992:	f7f3 ff13 	bl	80007bc <__aeabi_ddiv>
 800c996:	ec41 0b10 	vmov	d0, r0, r1
 800c99a:	f7ff fc61 	bl	800c260 <fabs>
 800c99e:	f7ff fa6f 	bl	800be80 <atan>
 800c9a2:	ec51 0b10 	vmov	r0, r1, d0
 800c9a6:	2c01      	cmp	r4, #1
 800c9a8:	d013      	beq.n	800c9d2 <__ieee754_atan2+0x112>
 800c9aa:	2c02      	cmp	r4, #2
 800c9ac:	d015      	beq.n	800c9da <__ieee754_atan2+0x11a>
 800c9ae:	2c00      	cmp	r4, #0
 800c9b0:	d0a7      	beq.n	800c902 <__ieee754_atan2+0x42>
 800c9b2:	a319      	add	r3, pc, #100	; (adr r3, 800ca18 <__ieee754_atan2+0x158>)
 800c9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b8:	f7f3 fc1e 	bl	80001f8 <__aeabi_dsub>
 800c9bc:	a318      	add	r3, pc, #96	; (adr r3, 800ca20 <__ieee754_atan2+0x160>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	e014      	b.n	800c9ee <__ieee754_atan2+0x12e>
 800c9c4:	a118      	add	r1, pc, #96	; (adr r1, 800ca28 <__ieee754_atan2+0x168>)
 800c9c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ca:	e7ec      	b.n	800c9a6 <__ieee754_atan2+0xe6>
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	e7e9      	b.n	800c9a6 <__ieee754_atan2+0xe6>
 800c9d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	e793      	b.n	800c902 <__ieee754_atan2+0x42>
 800c9da:	a30f      	add	r3, pc, #60	; (adr r3, 800ca18 <__ieee754_atan2+0x158>)
 800c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e0:	f7f3 fc0a 	bl	80001f8 <__aeabi_dsub>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	a10d      	add	r1, pc, #52	; (adr r1, 800ca20 <__ieee754_atan2+0x160>)
 800c9ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ee:	f7f3 fc03 	bl	80001f8 <__aeabi_dsub>
 800c9f2:	e786      	b.n	800c902 <__ieee754_atan2+0x42>
 800c9f4:	a10a      	add	r1, pc, #40	; (adr r1, 800ca20 <__ieee754_atan2+0x160>)
 800c9f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9fa:	e782      	b.n	800c902 <__ieee754_atan2+0x42>
 800c9fc:	a10c      	add	r1, pc, #48	; (adr r1, 800ca30 <__ieee754_atan2+0x170>)
 800c9fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca02:	e77e      	b.n	800c902 <__ieee754_atan2+0x42>
 800ca04:	2000      	movs	r0, #0
 800ca06:	2100      	movs	r1, #0
 800ca08:	e77b      	b.n	800c902 <__ieee754_atan2+0x42>
 800ca0a:	a107      	add	r1, pc, #28	; (adr r1, 800ca28 <__ieee754_atan2+0x168>)
 800ca0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca10:	e777      	b.n	800c902 <__ieee754_atan2+0x42>
 800ca12:	bf00      	nop
 800ca14:	f3af 8000 	nop.w
 800ca18:	33145c07 	.word	0x33145c07
 800ca1c:	3ca1a626 	.word	0x3ca1a626
 800ca20:	54442d18 	.word	0x54442d18
 800ca24:	400921fb 	.word	0x400921fb
 800ca28:	54442d18 	.word	0x54442d18
 800ca2c:	3ff921fb 	.word	0x3ff921fb
 800ca30:	54442d18 	.word	0x54442d18
 800ca34:	3fe921fb 	.word	0x3fe921fb
 800ca38:	0800deb8 	.word	0x0800deb8
 800ca3c:	0800ded0 	.word	0x0800ded0
 800ca40:	54442d18 	.word	0x54442d18
 800ca44:	c00921fb 	.word	0xc00921fb
 800ca48:	54442d18 	.word	0x54442d18
 800ca4c:	bff921fb 	.word	0xbff921fb
 800ca50:	7ff00000 	.word	0x7ff00000
 800ca54:	00000000 	.word	0x00000000

0800ca58 <__ieee754_rem_pio2>:
 800ca58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5c:	ed2d 8b02 	vpush	{d8}
 800ca60:	ec55 4b10 	vmov	r4, r5, d0
 800ca64:	4bca      	ldr	r3, [pc, #808]	; (800cd90 <__ieee754_rem_pio2+0x338>)
 800ca66:	b08b      	sub	sp, #44	; 0x2c
 800ca68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ca6c:	4598      	cmp	r8, r3
 800ca6e:	4682      	mov	sl, r0
 800ca70:	9502      	str	r5, [sp, #8]
 800ca72:	dc08      	bgt.n	800ca86 <__ieee754_rem_pio2+0x2e>
 800ca74:	2200      	movs	r2, #0
 800ca76:	2300      	movs	r3, #0
 800ca78:	ed80 0b00 	vstr	d0, [r0]
 800ca7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ca80:	f04f 0b00 	mov.w	fp, #0
 800ca84:	e028      	b.n	800cad8 <__ieee754_rem_pio2+0x80>
 800ca86:	4bc3      	ldr	r3, [pc, #780]	; (800cd94 <__ieee754_rem_pio2+0x33c>)
 800ca88:	4598      	cmp	r8, r3
 800ca8a:	dc78      	bgt.n	800cb7e <__ieee754_rem_pio2+0x126>
 800ca8c:	9b02      	ldr	r3, [sp, #8]
 800ca8e:	4ec2      	ldr	r6, [pc, #776]	; (800cd98 <__ieee754_rem_pio2+0x340>)
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	ee10 0a10 	vmov	r0, s0
 800ca96:	a3b0      	add	r3, pc, #704	; (adr r3, 800cd58 <__ieee754_rem_pio2+0x300>)
 800ca98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	dd39      	ble.n	800cb14 <__ieee754_rem_pio2+0xbc>
 800caa0:	f7f3 fbaa 	bl	80001f8 <__aeabi_dsub>
 800caa4:	45b0      	cmp	r8, r6
 800caa6:	4604      	mov	r4, r0
 800caa8:	460d      	mov	r5, r1
 800caaa:	d01b      	beq.n	800cae4 <__ieee754_rem_pio2+0x8c>
 800caac:	a3ac      	add	r3, pc, #688	; (adr r3, 800cd60 <__ieee754_rem_pio2+0x308>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f7f3 fba1 	bl	80001f8 <__aeabi_dsub>
 800cab6:	4602      	mov	r2, r0
 800cab8:	460b      	mov	r3, r1
 800caba:	e9ca 2300 	strd	r2, r3, [sl]
 800cabe:	4620      	mov	r0, r4
 800cac0:	4629      	mov	r1, r5
 800cac2:	f7f3 fb99 	bl	80001f8 <__aeabi_dsub>
 800cac6:	a3a6      	add	r3, pc, #664	; (adr r3, 800cd60 <__ieee754_rem_pio2+0x308>)
 800cac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cacc:	f7f3 fb94 	bl	80001f8 <__aeabi_dsub>
 800cad0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cad4:	f04f 0b01 	mov.w	fp, #1
 800cad8:	4658      	mov	r0, fp
 800cada:	b00b      	add	sp, #44	; 0x2c
 800cadc:	ecbd 8b02 	vpop	{d8}
 800cae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae4:	a3a0      	add	r3, pc, #640	; (adr r3, 800cd68 <__ieee754_rem_pio2+0x310>)
 800cae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caea:	f7f3 fb85 	bl	80001f8 <__aeabi_dsub>
 800caee:	a3a0      	add	r3, pc, #640	; (adr r3, 800cd70 <__ieee754_rem_pio2+0x318>)
 800caf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf4:	4604      	mov	r4, r0
 800caf6:	460d      	mov	r5, r1
 800caf8:	f7f3 fb7e 	bl	80001f8 <__aeabi_dsub>
 800cafc:	4602      	mov	r2, r0
 800cafe:	460b      	mov	r3, r1
 800cb00:	e9ca 2300 	strd	r2, r3, [sl]
 800cb04:	4620      	mov	r0, r4
 800cb06:	4629      	mov	r1, r5
 800cb08:	f7f3 fb76 	bl	80001f8 <__aeabi_dsub>
 800cb0c:	a398      	add	r3, pc, #608	; (adr r3, 800cd70 <__ieee754_rem_pio2+0x318>)
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	e7db      	b.n	800cacc <__ieee754_rem_pio2+0x74>
 800cb14:	f7f3 fb72 	bl	80001fc <__adddf3>
 800cb18:	45b0      	cmp	r8, r6
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	460d      	mov	r5, r1
 800cb1e:	d016      	beq.n	800cb4e <__ieee754_rem_pio2+0xf6>
 800cb20:	a38f      	add	r3, pc, #572	; (adr r3, 800cd60 <__ieee754_rem_pio2+0x308>)
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	f7f3 fb69 	bl	80001fc <__adddf3>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	e9ca 2300 	strd	r2, r3, [sl]
 800cb32:	4620      	mov	r0, r4
 800cb34:	4629      	mov	r1, r5
 800cb36:	f7f3 fb5f 	bl	80001f8 <__aeabi_dsub>
 800cb3a:	a389      	add	r3, pc, #548	; (adr r3, 800cd60 <__ieee754_rem_pio2+0x308>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	f7f3 fb5c 	bl	80001fc <__adddf3>
 800cb44:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800cb48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cb4c:	e7c4      	b.n	800cad8 <__ieee754_rem_pio2+0x80>
 800cb4e:	a386      	add	r3, pc, #536	; (adr r3, 800cd68 <__ieee754_rem_pio2+0x310>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	f7f3 fb52 	bl	80001fc <__adddf3>
 800cb58:	a385      	add	r3, pc, #532	; (adr r3, 800cd70 <__ieee754_rem_pio2+0x318>)
 800cb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5e:	4604      	mov	r4, r0
 800cb60:	460d      	mov	r5, r1
 800cb62:	f7f3 fb4b 	bl	80001fc <__adddf3>
 800cb66:	4602      	mov	r2, r0
 800cb68:	460b      	mov	r3, r1
 800cb6a:	e9ca 2300 	strd	r2, r3, [sl]
 800cb6e:	4620      	mov	r0, r4
 800cb70:	4629      	mov	r1, r5
 800cb72:	f7f3 fb41 	bl	80001f8 <__aeabi_dsub>
 800cb76:	a37e      	add	r3, pc, #504	; (adr r3, 800cd70 <__ieee754_rem_pio2+0x318>)
 800cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7c:	e7e0      	b.n	800cb40 <__ieee754_rem_pio2+0xe8>
 800cb7e:	4b87      	ldr	r3, [pc, #540]	; (800cd9c <__ieee754_rem_pio2+0x344>)
 800cb80:	4598      	cmp	r8, r3
 800cb82:	f300 80d9 	bgt.w	800cd38 <__ieee754_rem_pio2+0x2e0>
 800cb86:	f7ff fb6b 	bl	800c260 <fabs>
 800cb8a:	ec55 4b10 	vmov	r4, r5, d0
 800cb8e:	ee10 0a10 	vmov	r0, s0
 800cb92:	a379      	add	r3, pc, #484	; (adr r3, 800cd78 <__ieee754_rem_pio2+0x320>)
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	4629      	mov	r1, r5
 800cb9a:	f7f3 fce5 	bl	8000568 <__aeabi_dmul>
 800cb9e:	4b80      	ldr	r3, [pc, #512]	; (800cda0 <__ieee754_rem_pio2+0x348>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	f7f3 fb2b 	bl	80001fc <__adddf3>
 800cba6:	f7f3 ff8f 	bl	8000ac8 <__aeabi_d2iz>
 800cbaa:	4683      	mov	fp, r0
 800cbac:	f7f3 fc72 	bl	8000494 <__aeabi_i2d>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	ec43 2b18 	vmov	d8, r2, r3
 800cbb8:	a367      	add	r3, pc, #412	; (adr r3, 800cd58 <__ieee754_rem_pio2+0x300>)
 800cbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbe:	f7f3 fcd3 	bl	8000568 <__aeabi_dmul>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f7f3 fb15 	bl	80001f8 <__aeabi_dsub>
 800cbce:	a364      	add	r3, pc, #400	; (adr r3, 800cd60 <__ieee754_rem_pio2+0x308>)
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	4606      	mov	r6, r0
 800cbd6:	460f      	mov	r7, r1
 800cbd8:	ec51 0b18 	vmov	r0, r1, d8
 800cbdc:	f7f3 fcc4 	bl	8000568 <__aeabi_dmul>
 800cbe0:	f1bb 0f1f 	cmp.w	fp, #31
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	460d      	mov	r5, r1
 800cbe8:	dc0d      	bgt.n	800cc06 <__ieee754_rem_pio2+0x1ae>
 800cbea:	4b6e      	ldr	r3, [pc, #440]	; (800cda4 <__ieee754_rem_pio2+0x34c>)
 800cbec:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800cbf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbf4:	4543      	cmp	r3, r8
 800cbf6:	d006      	beq.n	800cc06 <__ieee754_rem_pio2+0x1ae>
 800cbf8:	4622      	mov	r2, r4
 800cbfa:	462b      	mov	r3, r5
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	4639      	mov	r1, r7
 800cc00:	f7f3 fafa 	bl	80001f8 <__aeabi_dsub>
 800cc04:	e00f      	b.n	800cc26 <__ieee754_rem_pio2+0x1ce>
 800cc06:	462b      	mov	r3, r5
 800cc08:	4622      	mov	r2, r4
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	4639      	mov	r1, r7
 800cc0e:	f7f3 faf3 	bl	80001f8 <__aeabi_dsub>
 800cc12:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cc16:	9303      	str	r3, [sp, #12]
 800cc18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cc1c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800cc20:	f1b8 0f10 	cmp.w	r8, #16
 800cc24:	dc02      	bgt.n	800cc2c <__ieee754_rem_pio2+0x1d4>
 800cc26:	e9ca 0100 	strd	r0, r1, [sl]
 800cc2a:	e039      	b.n	800cca0 <__ieee754_rem_pio2+0x248>
 800cc2c:	a34e      	add	r3, pc, #312	; (adr r3, 800cd68 <__ieee754_rem_pio2+0x310>)
 800cc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc32:	ec51 0b18 	vmov	r0, r1, d8
 800cc36:	f7f3 fc97 	bl	8000568 <__aeabi_dmul>
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	460d      	mov	r5, r1
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	4630      	mov	r0, r6
 800cc44:	4639      	mov	r1, r7
 800cc46:	f7f3 fad7 	bl	80001f8 <__aeabi_dsub>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	4680      	mov	r8, r0
 800cc50:	4689      	mov	r9, r1
 800cc52:	4630      	mov	r0, r6
 800cc54:	4639      	mov	r1, r7
 800cc56:	f7f3 facf 	bl	80001f8 <__aeabi_dsub>
 800cc5a:	4622      	mov	r2, r4
 800cc5c:	462b      	mov	r3, r5
 800cc5e:	f7f3 facb 	bl	80001f8 <__aeabi_dsub>
 800cc62:	a343      	add	r3, pc, #268	; (adr r3, 800cd70 <__ieee754_rem_pio2+0x318>)
 800cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc68:	4604      	mov	r4, r0
 800cc6a:	460d      	mov	r5, r1
 800cc6c:	ec51 0b18 	vmov	r0, r1, d8
 800cc70:	f7f3 fc7a 	bl	8000568 <__aeabi_dmul>
 800cc74:	4622      	mov	r2, r4
 800cc76:	462b      	mov	r3, r5
 800cc78:	f7f3 fabe 	bl	80001f8 <__aeabi_dsub>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	460b      	mov	r3, r1
 800cc80:	4604      	mov	r4, r0
 800cc82:	460d      	mov	r5, r1
 800cc84:	4640      	mov	r0, r8
 800cc86:	4649      	mov	r1, r9
 800cc88:	f7f3 fab6 	bl	80001f8 <__aeabi_dsub>
 800cc8c:	9a03      	ldr	r2, [sp, #12]
 800cc8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cc92:	1ad3      	subs	r3, r2, r3
 800cc94:	2b31      	cmp	r3, #49	; 0x31
 800cc96:	dc24      	bgt.n	800cce2 <__ieee754_rem_pio2+0x28a>
 800cc98:	e9ca 0100 	strd	r0, r1, [sl]
 800cc9c:	4646      	mov	r6, r8
 800cc9e:	464f      	mov	r7, r9
 800cca0:	e9da 8900 	ldrd	r8, r9, [sl]
 800cca4:	4630      	mov	r0, r6
 800cca6:	4642      	mov	r2, r8
 800cca8:	464b      	mov	r3, r9
 800ccaa:	4639      	mov	r1, r7
 800ccac:	f7f3 faa4 	bl	80001f8 <__aeabi_dsub>
 800ccb0:	462b      	mov	r3, r5
 800ccb2:	4622      	mov	r2, r4
 800ccb4:	f7f3 faa0 	bl	80001f8 <__aeabi_dsub>
 800ccb8:	9b02      	ldr	r3, [sp, #8]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ccc0:	f6bf af0a 	bge.w	800cad8 <__ieee754_rem_pio2+0x80>
 800ccc4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ccc8:	f8ca 3004 	str.w	r3, [sl, #4]
 800cccc:	f8ca 8000 	str.w	r8, [sl]
 800ccd0:	f8ca 0008 	str.w	r0, [sl, #8]
 800ccd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccd8:	f8ca 300c 	str.w	r3, [sl, #12]
 800ccdc:	f1cb 0b00 	rsb	fp, fp, #0
 800cce0:	e6fa      	b.n	800cad8 <__ieee754_rem_pio2+0x80>
 800cce2:	a327      	add	r3, pc, #156	; (adr r3, 800cd80 <__ieee754_rem_pio2+0x328>)
 800cce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce8:	ec51 0b18 	vmov	r0, r1, d8
 800ccec:	f7f3 fc3c 	bl	8000568 <__aeabi_dmul>
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4640      	mov	r0, r8
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	f7f3 fa7c 	bl	80001f8 <__aeabi_dsub>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4606      	mov	r6, r0
 800cd06:	460f      	mov	r7, r1
 800cd08:	4640      	mov	r0, r8
 800cd0a:	4649      	mov	r1, r9
 800cd0c:	f7f3 fa74 	bl	80001f8 <__aeabi_dsub>
 800cd10:	4622      	mov	r2, r4
 800cd12:	462b      	mov	r3, r5
 800cd14:	f7f3 fa70 	bl	80001f8 <__aeabi_dsub>
 800cd18:	a31b      	add	r3, pc, #108	; (adr r3, 800cd88 <__ieee754_rem_pio2+0x330>)
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	4604      	mov	r4, r0
 800cd20:	460d      	mov	r5, r1
 800cd22:	ec51 0b18 	vmov	r0, r1, d8
 800cd26:	f7f3 fc1f 	bl	8000568 <__aeabi_dmul>
 800cd2a:	4622      	mov	r2, r4
 800cd2c:	462b      	mov	r3, r5
 800cd2e:	f7f3 fa63 	bl	80001f8 <__aeabi_dsub>
 800cd32:	4604      	mov	r4, r0
 800cd34:	460d      	mov	r5, r1
 800cd36:	e75f      	b.n	800cbf8 <__ieee754_rem_pio2+0x1a0>
 800cd38:	4b1b      	ldr	r3, [pc, #108]	; (800cda8 <__ieee754_rem_pio2+0x350>)
 800cd3a:	4598      	cmp	r8, r3
 800cd3c:	dd36      	ble.n	800cdac <__ieee754_rem_pio2+0x354>
 800cd3e:	ee10 2a10 	vmov	r2, s0
 800cd42:	462b      	mov	r3, r5
 800cd44:	4620      	mov	r0, r4
 800cd46:	4629      	mov	r1, r5
 800cd48:	f7f3 fa56 	bl	80001f8 <__aeabi_dsub>
 800cd4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd50:	e9ca 0100 	strd	r0, r1, [sl]
 800cd54:	e694      	b.n	800ca80 <__ieee754_rem_pio2+0x28>
 800cd56:	bf00      	nop
 800cd58:	54400000 	.word	0x54400000
 800cd5c:	3ff921fb 	.word	0x3ff921fb
 800cd60:	1a626331 	.word	0x1a626331
 800cd64:	3dd0b461 	.word	0x3dd0b461
 800cd68:	1a600000 	.word	0x1a600000
 800cd6c:	3dd0b461 	.word	0x3dd0b461
 800cd70:	2e037073 	.word	0x2e037073
 800cd74:	3ba3198a 	.word	0x3ba3198a
 800cd78:	6dc9c883 	.word	0x6dc9c883
 800cd7c:	3fe45f30 	.word	0x3fe45f30
 800cd80:	2e000000 	.word	0x2e000000
 800cd84:	3ba3198a 	.word	0x3ba3198a
 800cd88:	252049c1 	.word	0x252049c1
 800cd8c:	397b839a 	.word	0x397b839a
 800cd90:	3fe921fb 	.word	0x3fe921fb
 800cd94:	4002d97b 	.word	0x4002d97b
 800cd98:	3ff921fb 	.word	0x3ff921fb
 800cd9c:	413921fb 	.word	0x413921fb
 800cda0:	3fe00000 	.word	0x3fe00000
 800cda4:	0800dee8 	.word	0x0800dee8
 800cda8:	7fefffff 	.word	0x7fefffff
 800cdac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800cdb0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800cdb4:	ee10 0a10 	vmov	r0, s0
 800cdb8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800cdbc:	ee10 6a10 	vmov	r6, s0
 800cdc0:	460f      	mov	r7, r1
 800cdc2:	f7f3 fe81 	bl	8000ac8 <__aeabi_d2iz>
 800cdc6:	f7f3 fb65 	bl	8000494 <__aeabi_i2d>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	460b      	mov	r3, r1
 800cdce:	4630      	mov	r0, r6
 800cdd0:	4639      	mov	r1, r7
 800cdd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cdd6:	f7f3 fa0f 	bl	80001f8 <__aeabi_dsub>
 800cdda:	4b22      	ldr	r3, [pc, #136]	; (800ce64 <__ieee754_rem_pio2+0x40c>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	f7f3 fbc3 	bl	8000568 <__aeabi_dmul>
 800cde2:	460f      	mov	r7, r1
 800cde4:	4606      	mov	r6, r0
 800cde6:	f7f3 fe6f 	bl	8000ac8 <__aeabi_d2iz>
 800cdea:	f7f3 fb53 	bl	8000494 <__aeabi_i2d>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	4639      	mov	r1, r7
 800cdf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cdfa:	f7f3 f9fd 	bl	80001f8 <__aeabi_dsub>
 800cdfe:	4b19      	ldr	r3, [pc, #100]	; (800ce64 <__ieee754_rem_pio2+0x40c>)
 800ce00:	2200      	movs	r2, #0
 800ce02:	f7f3 fbb1 	bl	8000568 <__aeabi_dmul>
 800ce06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce0a:	ad04      	add	r5, sp, #16
 800ce0c:	f04f 0803 	mov.w	r8, #3
 800ce10:	46a9      	mov	r9, r5
 800ce12:	2600      	movs	r6, #0
 800ce14:	2700      	movs	r7, #0
 800ce16:	4632      	mov	r2, r6
 800ce18:	463b      	mov	r3, r7
 800ce1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ce1e:	46c3      	mov	fp, r8
 800ce20:	3d08      	subs	r5, #8
 800ce22:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ce26:	f7f3 fe07 	bl	8000a38 <__aeabi_dcmpeq>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	d1f3      	bne.n	800ce16 <__ieee754_rem_pio2+0x3be>
 800ce2e:	4b0e      	ldr	r3, [pc, #56]	; (800ce68 <__ieee754_rem_pio2+0x410>)
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	2302      	movs	r3, #2
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	4622      	mov	r2, r4
 800ce38:	465b      	mov	r3, fp
 800ce3a:	4651      	mov	r1, sl
 800ce3c:	4648      	mov	r0, r9
 800ce3e:	f000 f993 	bl	800d168 <__kernel_rem_pio2>
 800ce42:	9b02      	ldr	r3, [sp, #8]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	4683      	mov	fp, r0
 800ce48:	f6bf ae46 	bge.w	800cad8 <__ieee754_rem_pio2+0x80>
 800ce4c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ce50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce54:	f8ca 3004 	str.w	r3, [sl, #4]
 800ce58:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ce5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce60:	e73a      	b.n	800ccd8 <__ieee754_rem_pio2+0x280>
 800ce62:	bf00      	nop
 800ce64:	41700000 	.word	0x41700000
 800ce68:	0800df68 	.word	0x0800df68

0800ce6c <__ieee754_sqrt>:
 800ce6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce70:	ec55 4b10 	vmov	r4, r5, d0
 800ce74:	4e56      	ldr	r6, [pc, #344]	; (800cfd0 <__ieee754_sqrt+0x164>)
 800ce76:	43ae      	bics	r6, r5
 800ce78:	ee10 0a10 	vmov	r0, s0
 800ce7c:	ee10 3a10 	vmov	r3, s0
 800ce80:	4629      	mov	r1, r5
 800ce82:	462a      	mov	r2, r5
 800ce84:	d110      	bne.n	800cea8 <__ieee754_sqrt+0x3c>
 800ce86:	ee10 2a10 	vmov	r2, s0
 800ce8a:	462b      	mov	r3, r5
 800ce8c:	f7f3 fb6c 	bl	8000568 <__aeabi_dmul>
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	4620      	mov	r0, r4
 800ce96:	4629      	mov	r1, r5
 800ce98:	f7f3 f9b0 	bl	80001fc <__adddf3>
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	460d      	mov	r5, r1
 800cea0:	ec45 4b10 	vmov	d0, r4, r5
 800cea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea8:	2d00      	cmp	r5, #0
 800ceaa:	dc10      	bgt.n	800cece <__ieee754_sqrt+0x62>
 800ceac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ceb0:	4330      	orrs	r0, r6
 800ceb2:	d0f5      	beq.n	800cea0 <__ieee754_sqrt+0x34>
 800ceb4:	b15d      	cbz	r5, 800cece <__ieee754_sqrt+0x62>
 800ceb6:	ee10 2a10 	vmov	r2, s0
 800ceba:	462b      	mov	r3, r5
 800cebc:	ee10 0a10 	vmov	r0, s0
 800cec0:	f7f3 f99a 	bl	80001f8 <__aeabi_dsub>
 800cec4:	4602      	mov	r2, r0
 800cec6:	460b      	mov	r3, r1
 800cec8:	f7f3 fc78 	bl	80007bc <__aeabi_ddiv>
 800cecc:	e7e6      	b.n	800ce9c <__ieee754_sqrt+0x30>
 800cece:	1509      	asrs	r1, r1, #20
 800ced0:	d076      	beq.n	800cfc0 <__ieee754_sqrt+0x154>
 800ced2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ced6:	07ce      	lsls	r6, r1, #31
 800ced8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cedc:	bf5e      	ittt	pl
 800cede:	0fda      	lsrpl	r2, r3, #31
 800cee0:	005b      	lslpl	r3, r3, #1
 800cee2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cee6:	0fda      	lsrs	r2, r3, #31
 800cee8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ceec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cef0:	2000      	movs	r0, #0
 800cef2:	106d      	asrs	r5, r5, #1
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	f04f 0e16 	mov.w	lr, #22
 800cefa:	4684      	mov	ip, r0
 800cefc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf00:	eb0c 0401 	add.w	r4, ip, r1
 800cf04:	4294      	cmp	r4, r2
 800cf06:	bfde      	ittt	le
 800cf08:	1b12      	suble	r2, r2, r4
 800cf0a:	eb04 0c01 	addle.w	ip, r4, r1
 800cf0e:	1840      	addle	r0, r0, r1
 800cf10:	0052      	lsls	r2, r2, #1
 800cf12:	f1be 0e01 	subs.w	lr, lr, #1
 800cf16:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cf1a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cf1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf22:	d1ed      	bne.n	800cf00 <__ieee754_sqrt+0x94>
 800cf24:	4671      	mov	r1, lr
 800cf26:	2720      	movs	r7, #32
 800cf28:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cf2c:	4562      	cmp	r2, ip
 800cf2e:	eb04 060e 	add.w	r6, r4, lr
 800cf32:	dc02      	bgt.n	800cf3a <__ieee754_sqrt+0xce>
 800cf34:	d113      	bne.n	800cf5e <__ieee754_sqrt+0xf2>
 800cf36:	429e      	cmp	r6, r3
 800cf38:	d811      	bhi.n	800cf5e <__ieee754_sqrt+0xf2>
 800cf3a:	2e00      	cmp	r6, #0
 800cf3c:	eb06 0e04 	add.w	lr, r6, r4
 800cf40:	da43      	bge.n	800cfca <__ieee754_sqrt+0x15e>
 800cf42:	f1be 0f00 	cmp.w	lr, #0
 800cf46:	db40      	blt.n	800cfca <__ieee754_sqrt+0x15e>
 800cf48:	f10c 0801 	add.w	r8, ip, #1
 800cf4c:	eba2 020c 	sub.w	r2, r2, ip
 800cf50:	429e      	cmp	r6, r3
 800cf52:	bf88      	it	hi
 800cf54:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800cf58:	1b9b      	subs	r3, r3, r6
 800cf5a:	4421      	add	r1, r4
 800cf5c:	46c4      	mov	ip, r8
 800cf5e:	0052      	lsls	r2, r2, #1
 800cf60:	3f01      	subs	r7, #1
 800cf62:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cf66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cf6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf6e:	d1dd      	bne.n	800cf2c <__ieee754_sqrt+0xc0>
 800cf70:	4313      	orrs	r3, r2
 800cf72:	d006      	beq.n	800cf82 <__ieee754_sqrt+0x116>
 800cf74:	1c4c      	adds	r4, r1, #1
 800cf76:	bf13      	iteet	ne
 800cf78:	3101      	addne	r1, #1
 800cf7a:	3001      	addeq	r0, #1
 800cf7c:	4639      	moveq	r1, r7
 800cf7e:	f021 0101 	bicne.w	r1, r1, #1
 800cf82:	1043      	asrs	r3, r0, #1
 800cf84:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cf88:	0849      	lsrs	r1, r1, #1
 800cf8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cf8e:	07c2      	lsls	r2, r0, #31
 800cf90:	bf48      	it	mi
 800cf92:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cf96:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	463d      	mov	r5, r7
 800cf9e:	e77f      	b.n	800cea0 <__ieee754_sqrt+0x34>
 800cfa0:	0ada      	lsrs	r2, r3, #11
 800cfa2:	3815      	subs	r0, #21
 800cfa4:	055b      	lsls	r3, r3, #21
 800cfa6:	2a00      	cmp	r2, #0
 800cfa8:	d0fa      	beq.n	800cfa0 <__ieee754_sqrt+0x134>
 800cfaa:	02d7      	lsls	r7, r2, #11
 800cfac:	d50a      	bpl.n	800cfc4 <__ieee754_sqrt+0x158>
 800cfae:	f1c1 0420 	rsb	r4, r1, #32
 800cfb2:	fa23 f404 	lsr.w	r4, r3, r4
 800cfb6:	1e4d      	subs	r5, r1, #1
 800cfb8:	408b      	lsls	r3, r1
 800cfba:	4322      	orrs	r2, r4
 800cfbc:	1b41      	subs	r1, r0, r5
 800cfbe:	e788      	b.n	800ced2 <__ieee754_sqrt+0x66>
 800cfc0:	4608      	mov	r0, r1
 800cfc2:	e7f0      	b.n	800cfa6 <__ieee754_sqrt+0x13a>
 800cfc4:	0052      	lsls	r2, r2, #1
 800cfc6:	3101      	adds	r1, #1
 800cfc8:	e7ef      	b.n	800cfaa <__ieee754_sqrt+0x13e>
 800cfca:	46e0      	mov	r8, ip
 800cfcc:	e7be      	b.n	800cf4c <__ieee754_sqrt+0xe0>
 800cfce:	bf00      	nop
 800cfd0:	7ff00000 	.word	0x7ff00000
 800cfd4:	00000000 	.word	0x00000000

0800cfd8 <__kernel_cos>:
 800cfd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	ec57 6b10 	vmov	r6, r7, d0
 800cfe0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cfe4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800cfe8:	ed8d 1b00 	vstr	d1, [sp]
 800cfec:	da07      	bge.n	800cffe <__kernel_cos+0x26>
 800cfee:	ee10 0a10 	vmov	r0, s0
 800cff2:	4639      	mov	r1, r7
 800cff4:	f7f3 fd68 	bl	8000ac8 <__aeabi_d2iz>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	f000 8088 	beq.w	800d10e <__kernel_cos+0x136>
 800cffe:	4632      	mov	r2, r6
 800d000:	463b      	mov	r3, r7
 800d002:	4630      	mov	r0, r6
 800d004:	4639      	mov	r1, r7
 800d006:	f7f3 faaf 	bl	8000568 <__aeabi_dmul>
 800d00a:	4b51      	ldr	r3, [pc, #324]	; (800d150 <__kernel_cos+0x178>)
 800d00c:	2200      	movs	r2, #0
 800d00e:	4604      	mov	r4, r0
 800d010:	460d      	mov	r5, r1
 800d012:	f7f3 faa9 	bl	8000568 <__aeabi_dmul>
 800d016:	a340      	add	r3, pc, #256	; (adr r3, 800d118 <__kernel_cos+0x140>)
 800d018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01c:	4682      	mov	sl, r0
 800d01e:	468b      	mov	fp, r1
 800d020:	4620      	mov	r0, r4
 800d022:	4629      	mov	r1, r5
 800d024:	f7f3 faa0 	bl	8000568 <__aeabi_dmul>
 800d028:	a33d      	add	r3, pc, #244	; (adr r3, 800d120 <__kernel_cos+0x148>)
 800d02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02e:	f7f3 f8e5 	bl	80001fc <__adddf3>
 800d032:	4622      	mov	r2, r4
 800d034:	462b      	mov	r3, r5
 800d036:	f7f3 fa97 	bl	8000568 <__aeabi_dmul>
 800d03a:	a33b      	add	r3, pc, #236	; (adr r3, 800d128 <__kernel_cos+0x150>)
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	f7f3 f8da 	bl	80001f8 <__aeabi_dsub>
 800d044:	4622      	mov	r2, r4
 800d046:	462b      	mov	r3, r5
 800d048:	f7f3 fa8e 	bl	8000568 <__aeabi_dmul>
 800d04c:	a338      	add	r3, pc, #224	; (adr r3, 800d130 <__kernel_cos+0x158>)
 800d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d052:	f7f3 f8d3 	bl	80001fc <__adddf3>
 800d056:	4622      	mov	r2, r4
 800d058:	462b      	mov	r3, r5
 800d05a:	f7f3 fa85 	bl	8000568 <__aeabi_dmul>
 800d05e:	a336      	add	r3, pc, #216	; (adr r3, 800d138 <__kernel_cos+0x160>)
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	f7f3 f8c8 	bl	80001f8 <__aeabi_dsub>
 800d068:	4622      	mov	r2, r4
 800d06a:	462b      	mov	r3, r5
 800d06c:	f7f3 fa7c 	bl	8000568 <__aeabi_dmul>
 800d070:	a333      	add	r3, pc, #204	; (adr r3, 800d140 <__kernel_cos+0x168>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	f7f3 f8c1 	bl	80001fc <__adddf3>
 800d07a:	4622      	mov	r2, r4
 800d07c:	462b      	mov	r3, r5
 800d07e:	f7f3 fa73 	bl	8000568 <__aeabi_dmul>
 800d082:	4622      	mov	r2, r4
 800d084:	462b      	mov	r3, r5
 800d086:	f7f3 fa6f 	bl	8000568 <__aeabi_dmul>
 800d08a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d08e:	4604      	mov	r4, r0
 800d090:	460d      	mov	r5, r1
 800d092:	4630      	mov	r0, r6
 800d094:	4639      	mov	r1, r7
 800d096:	f7f3 fa67 	bl	8000568 <__aeabi_dmul>
 800d09a:	460b      	mov	r3, r1
 800d09c:	4602      	mov	r2, r0
 800d09e:	4629      	mov	r1, r5
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f7f3 f8a9 	bl	80001f8 <__aeabi_dsub>
 800d0a6:	4b2b      	ldr	r3, [pc, #172]	; (800d154 <__kernel_cos+0x17c>)
 800d0a8:	4598      	cmp	r8, r3
 800d0aa:	4606      	mov	r6, r0
 800d0ac:	460f      	mov	r7, r1
 800d0ae:	dc10      	bgt.n	800d0d2 <__kernel_cos+0xfa>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	4650      	mov	r0, sl
 800d0b6:	4659      	mov	r1, fp
 800d0b8:	f7f3 f89e 	bl	80001f8 <__aeabi_dsub>
 800d0bc:	460b      	mov	r3, r1
 800d0be:	4926      	ldr	r1, [pc, #152]	; (800d158 <__kernel_cos+0x180>)
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	f7f3 f898 	bl	80001f8 <__aeabi_dsub>
 800d0c8:	ec41 0b10 	vmov	d0, r0, r1
 800d0cc:	b003      	add	sp, #12
 800d0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d2:	4b22      	ldr	r3, [pc, #136]	; (800d15c <__kernel_cos+0x184>)
 800d0d4:	4920      	ldr	r1, [pc, #128]	; (800d158 <__kernel_cos+0x180>)
 800d0d6:	4598      	cmp	r8, r3
 800d0d8:	bfcc      	ite	gt
 800d0da:	4d21      	ldrgt	r5, [pc, #132]	; (800d160 <__kernel_cos+0x188>)
 800d0dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d0e0:	2400      	movs	r4, #0
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	462b      	mov	r3, r5
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	f7f3 f886 	bl	80001f8 <__aeabi_dsub>
 800d0ec:	4622      	mov	r2, r4
 800d0ee:	4680      	mov	r8, r0
 800d0f0:	4689      	mov	r9, r1
 800d0f2:	462b      	mov	r3, r5
 800d0f4:	4650      	mov	r0, sl
 800d0f6:	4659      	mov	r1, fp
 800d0f8:	f7f3 f87e 	bl	80001f8 <__aeabi_dsub>
 800d0fc:	4632      	mov	r2, r6
 800d0fe:	463b      	mov	r3, r7
 800d100:	f7f3 f87a 	bl	80001f8 <__aeabi_dsub>
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	4640      	mov	r0, r8
 800d10a:	4649      	mov	r1, r9
 800d10c:	e7da      	b.n	800d0c4 <__kernel_cos+0xec>
 800d10e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d148 <__kernel_cos+0x170>
 800d112:	e7db      	b.n	800d0cc <__kernel_cos+0xf4>
 800d114:	f3af 8000 	nop.w
 800d118:	be8838d4 	.word	0xbe8838d4
 800d11c:	bda8fae9 	.word	0xbda8fae9
 800d120:	bdb4b1c4 	.word	0xbdb4b1c4
 800d124:	3e21ee9e 	.word	0x3e21ee9e
 800d128:	809c52ad 	.word	0x809c52ad
 800d12c:	3e927e4f 	.word	0x3e927e4f
 800d130:	19cb1590 	.word	0x19cb1590
 800d134:	3efa01a0 	.word	0x3efa01a0
 800d138:	16c15177 	.word	0x16c15177
 800d13c:	3f56c16c 	.word	0x3f56c16c
 800d140:	5555554c 	.word	0x5555554c
 800d144:	3fa55555 	.word	0x3fa55555
 800d148:	00000000 	.word	0x00000000
 800d14c:	3ff00000 	.word	0x3ff00000
 800d150:	3fe00000 	.word	0x3fe00000
 800d154:	3fd33332 	.word	0x3fd33332
 800d158:	3ff00000 	.word	0x3ff00000
 800d15c:	3fe90000 	.word	0x3fe90000
 800d160:	3fd20000 	.word	0x3fd20000
 800d164:	00000000 	.word	0x00000000

0800d168 <__kernel_rem_pio2>:
 800d168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16c:	ed2d 8b02 	vpush	{d8}
 800d170:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d174:	f112 0f14 	cmn.w	r2, #20
 800d178:	9308      	str	r3, [sp, #32]
 800d17a:	9101      	str	r1, [sp, #4]
 800d17c:	4bc6      	ldr	r3, [pc, #792]	; (800d498 <__kernel_rem_pio2+0x330>)
 800d17e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d180:	9009      	str	r0, [sp, #36]	; 0x24
 800d182:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d186:	9304      	str	r3, [sp, #16]
 800d188:	9b08      	ldr	r3, [sp, #32]
 800d18a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d18e:	bfa8      	it	ge
 800d190:	1ed4      	subge	r4, r2, #3
 800d192:	9306      	str	r3, [sp, #24]
 800d194:	bfb2      	itee	lt
 800d196:	2400      	movlt	r4, #0
 800d198:	2318      	movge	r3, #24
 800d19a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d19e:	f06f 0317 	mvn.w	r3, #23
 800d1a2:	fb04 3303 	mla	r3, r4, r3, r3
 800d1a6:	eb03 0a02 	add.w	sl, r3, r2
 800d1aa:	9b04      	ldr	r3, [sp, #16]
 800d1ac:	9a06      	ldr	r2, [sp, #24]
 800d1ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d488 <__kernel_rem_pio2+0x320>
 800d1b2:	eb03 0802 	add.w	r8, r3, r2
 800d1b6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d1b8:	1aa7      	subs	r7, r4, r2
 800d1ba:	ae20      	add	r6, sp, #128	; 0x80
 800d1bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d1c0:	2500      	movs	r5, #0
 800d1c2:	4545      	cmp	r5, r8
 800d1c4:	dd18      	ble.n	800d1f8 <__kernel_rem_pio2+0x90>
 800d1c6:	9b08      	ldr	r3, [sp, #32]
 800d1c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d1cc:	aa20      	add	r2, sp, #128	; 0x80
 800d1ce:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d488 <__kernel_rem_pio2+0x320>
 800d1d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d1d6:	f1c3 0301 	rsb	r3, r3, #1
 800d1da:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d1de:	9307      	str	r3, [sp, #28]
 800d1e0:	9b07      	ldr	r3, [sp, #28]
 800d1e2:	9a04      	ldr	r2, [sp, #16]
 800d1e4:	4443      	add	r3, r8
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	db2f      	blt.n	800d24a <__kernel_rem_pio2+0xe2>
 800d1ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d1ee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d1f2:	462f      	mov	r7, r5
 800d1f4:	2600      	movs	r6, #0
 800d1f6:	e01b      	b.n	800d230 <__kernel_rem_pio2+0xc8>
 800d1f8:	42ef      	cmn	r7, r5
 800d1fa:	d407      	bmi.n	800d20c <__kernel_rem_pio2+0xa4>
 800d1fc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d200:	f7f3 f948 	bl	8000494 <__aeabi_i2d>
 800d204:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d208:	3501      	adds	r5, #1
 800d20a:	e7da      	b.n	800d1c2 <__kernel_rem_pio2+0x5a>
 800d20c:	ec51 0b18 	vmov	r0, r1, d8
 800d210:	e7f8      	b.n	800d204 <__kernel_rem_pio2+0x9c>
 800d212:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d216:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d21a:	f7f3 f9a5 	bl	8000568 <__aeabi_dmul>
 800d21e:	4602      	mov	r2, r0
 800d220:	460b      	mov	r3, r1
 800d222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d226:	f7f2 ffe9 	bl	80001fc <__adddf3>
 800d22a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d22e:	3601      	adds	r6, #1
 800d230:	9b06      	ldr	r3, [sp, #24]
 800d232:	429e      	cmp	r6, r3
 800d234:	f1a7 0708 	sub.w	r7, r7, #8
 800d238:	ddeb      	ble.n	800d212 <__kernel_rem_pio2+0xaa>
 800d23a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d23e:	3508      	adds	r5, #8
 800d240:	ecab 7b02 	vstmia	fp!, {d7}
 800d244:	f108 0801 	add.w	r8, r8, #1
 800d248:	e7ca      	b.n	800d1e0 <__kernel_rem_pio2+0x78>
 800d24a:	9b04      	ldr	r3, [sp, #16]
 800d24c:	aa0c      	add	r2, sp, #48	; 0x30
 800d24e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d252:	930b      	str	r3, [sp, #44]	; 0x2c
 800d254:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d256:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d25a:	9c04      	ldr	r4, [sp, #16]
 800d25c:	930a      	str	r3, [sp, #40]	; 0x28
 800d25e:	ab98      	add	r3, sp, #608	; 0x260
 800d260:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d264:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d268:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d26c:	f8cd b008 	str.w	fp, [sp, #8]
 800d270:	4625      	mov	r5, r4
 800d272:	2d00      	cmp	r5, #0
 800d274:	dc78      	bgt.n	800d368 <__kernel_rem_pio2+0x200>
 800d276:	ec47 6b10 	vmov	d0, r6, r7
 800d27a:	4650      	mov	r0, sl
 800d27c:	f000 fbfc 	bl	800da78 <scalbn>
 800d280:	ec57 6b10 	vmov	r6, r7, d0
 800d284:	2200      	movs	r2, #0
 800d286:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d28a:	ee10 0a10 	vmov	r0, s0
 800d28e:	4639      	mov	r1, r7
 800d290:	f7f3 f96a 	bl	8000568 <__aeabi_dmul>
 800d294:	ec41 0b10 	vmov	d0, r0, r1
 800d298:	f000 fb66 	bl	800d968 <floor>
 800d29c:	4b7f      	ldr	r3, [pc, #508]	; (800d49c <__kernel_rem_pio2+0x334>)
 800d29e:	ec51 0b10 	vmov	r0, r1, d0
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f7f3 f960 	bl	8000568 <__aeabi_dmul>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	4639      	mov	r1, r7
 800d2b0:	f7f2 ffa2 	bl	80001f8 <__aeabi_dsub>
 800d2b4:	460f      	mov	r7, r1
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	f7f3 fc06 	bl	8000ac8 <__aeabi_d2iz>
 800d2bc:	9007      	str	r0, [sp, #28]
 800d2be:	f7f3 f8e9 	bl	8000494 <__aeabi_i2d>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	4639      	mov	r1, r7
 800d2ca:	f7f2 ff95 	bl	80001f8 <__aeabi_dsub>
 800d2ce:	f1ba 0f00 	cmp.w	sl, #0
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	460f      	mov	r7, r1
 800d2d6:	dd70      	ble.n	800d3ba <__kernel_rem_pio2+0x252>
 800d2d8:	1e62      	subs	r2, r4, #1
 800d2da:	ab0c      	add	r3, sp, #48	; 0x30
 800d2dc:	9d07      	ldr	r5, [sp, #28]
 800d2de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d2e2:	f1ca 0118 	rsb	r1, sl, #24
 800d2e6:	fa40 f301 	asr.w	r3, r0, r1
 800d2ea:	441d      	add	r5, r3
 800d2ec:	408b      	lsls	r3, r1
 800d2ee:	1ac0      	subs	r0, r0, r3
 800d2f0:	ab0c      	add	r3, sp, #48	; 0x30
 800d2f2:	9507      	str	r5, [sp, #28]
 800d2f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d2f8:	f1ca 0317 	rsb	r3, sl, #23
 800d2fc:	fa40 f303 	asr.w	r3, r0, r3
 800d300:	9302      	str	r3, [sp, #8]
 800d302:	9b02      	ldr	r3, [sp, #8]
 800d304:	2b00      	cmp	r3, #0
 800d306:	dd66      	ble.n	800d3d6 <__kernel_rem_pio2+0x26e>
 800d308:	9b07      	ldr	r3, [sp, #28]
 800d30a:	2200      	movs	r2, #0
 800d30c:	3301      	adds	r3, #1
 800d30e:	9307      	str	r3, [sp, #28]
 800d310:	4615      	mov	r5, r2
 800d312:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d316:	4294      	cmp	r4, r2
 800d318:	f300 8099 	bgt.w	800d44e <__kernel_rem_pio2+0x2e6>
 800d31c:	f1ba 0f00 	cmp.w	sl, #0
 800d320:	dd07      	ble.n	800d332 <__kernel_rem_pio2+0x1ca>
 800d322:	f1ba 0f01 	cmp.w	sl, #1
 800d326:	f000 80a5 	beq.w	800d474 <__kernel_rem_pio2+0x30c>
 800d32a:	f1ba 0f02 	cmp.w	sl, #2
 800d32e:	f000 80c1 	beq.w	800d4b4 <__kernel_rem_pio2+0x34c>
 800d332:	9b02      	ldr	r3, [sp, #8]
 800d334:	2b02      	cmp	r3, #2
 800d336:	d14e      	bne.n	800d3d6 <__kernel_rem_pio2+0x26e>
 800d338:	4632      	mov	r2, r6
 800d33a:	463b      	mov	r3, r7
 800d33c:	4958      	ldr	r1, [pc, #352]	; (800d4a0 <__kernel_rem_pio2+0x338>)
 800d33e:	2000      	movs	r0, #0
 800d340:	f7f2 ff5a 	bl	80001f8 <__aeabi_dsub>
 800d344:	4606      	mov	r6, r0
 800d346:	460f      	mov	r7, r1
 800d348:	2d00      	cmp	r5, #0
 800d34a:	d044      	beq.n	800d3d6 <__kernel_rem_pio2+0x26e>
 800d34c:	4650      	mov	r0, sl
 800d34e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d490 <__kernel_rem_pio2+0x328>
 800d352:	f000 fb91 	bl	800da78 <scalbn>
 800d356:	4630      	mov	r0, r6
 800d358:	4639      	mov	r1, r7
 800d35a:	ec53 2b10 	vmov	r2, r3, d0
 800d35e:	f7f2 ff4b 	bl	80001f8 <__aeabi_dsub>
 800d362:	4606      	mov	r6, r0
 800d364:	460f      	mov	r7, r1
 800d366:	e036      	b.n	800d3d6 <__kernel_rem_pio2+0x26e>
 800d368:	4b4e      	ldr	r3, [pc, #312]	; (800d4a4 <__kernel_rem_pio2+0x33c>)
 800d36a:	2200      	movs	r2, #0
 800d36c:	4630      	mov	r0, r6
 800d36e:	4639      	mov	r1, r7
 800d370:	f7f3 f8fa 	bl	8000568 <__aeabi_dmul>
 800d374:	f7f3 fba8 	bl	8000ac8 <__aeabi_d2iz>
 800d378:	f7f3 f88c 	bl	8000494 <__aeabi_i2d>
 800d37c:	4b4a      	ldr	r3, [pc, #296]	; (800d4a8 <__kernel_rem_pio2+0x340>)
 800d37e:	2200      	movs	r2, #0
 800d380:	4680      	mov	r8, r0
 800d382:	4689      	mov	r9, r1
 800d384:	f7f3 f8f0 	bl	8000568 <__aeabi_dmul>
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	4630      	mov	r0, r6
 800d38e:	4639      	mov	r1, r7
 800d390:	f7f2 ff32 	bl	80001f8 <__aeabi_dsub>
 800d394:	f7f3 fb98 	bl	8000ac8 <__aeabi_d2iz>
 800d398:	9b02      	ldr	r3, [sp, #8]
 800d39a:	f843 0b04 	str.w	r0, [r3], #4
 800d39e:	3d01      	subs	r5, #1
 800d3a0:	9302      	str	r3, [sp, #8]
 800d3a2:	ab70      	add	r3, sp, #448	; 0x1c0
 800d3a4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ac:	4640      	mov	r0, r8
 800d3ae:	4649      	mov	r1, r9
 800d3b0:	f7f2 ff24 	bl	80001fc <__adddf3>
 800d3b4:	4606      	mov	r6, r0
 800d3b6:	460f      	mov	r7, r1
 800d3b8:	e75b      	b.n	800d272 <__kernel_rem_pio2+0x10a>
 800d3ba:	d105      	bne.n	800d3c8 <__kernel_rem_pio2+0x260>
 800d3bc:	1e63      	subs	r3, r4, #1
 800d3be:	aa0c      	add	r2, sp, #48	; 0x30
 800d3c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d3c4:	15c3      	asrs	r3, r0, #23
 800d3c6:	e79b      	b.n	800d300 <__kernel_rem_pio2+0x198>
 800d3c8:	4b38      	ldr	r3, [pc, #224]	; (800d4ac <__kernel_rem_pio2+0x344>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f7f3 fb52 	bl	8000a74 <__aeabi_dcmpge>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d139      	bne.n	800d448 <__kernel_rem_pio2+0x2e0>
 800d3d4:	9002      	str	r0, [sp, #8]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	2300      	movs	r3, #0
 800d3da:	4630      	mov	r0, r6
 800d3dc:	4639      	mov	r1, r7
 800d3de:	f7f3 fb2b 	bl	8000a38 <__aeabi_dcmpeq>
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	f000 80b4 	beq.w	800d550 <__kernel_rem_pio2+0x3e8>
 800d3e8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800d3ec:	465b      	mov	r3, fp
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	9904      	ldr	r1, [sp, #16]
 800d3f2:	428b      	cmp	r3, r1
 800d3f4:	da65      	bge.n	800d4c2 <__kernel_rem_pio2+0x35a>
 800d3f6:	2a00      	cmp	r2, #0
 800d3f8:	d07b      	beq.n	800d4f2 <__kernel_rem_pio2+0x38a>
 800d3fa:	ab0c      	add	r3, sp, #48	; 0x30
 800d3fc:	f1aa 0a18 	sub.w	sl, sl, #24
 800d400:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d404:	2b00      	cmp	r3, #0
 800d406:	f000 80a0 	beq.w	800d54a <__kernel_rem_pio2+0x3e2>
 800d40a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d490 <__kernel_rem_pio2+0x328>
 800d40e:	4650      	mov	r0, sl
 800d410:	f000 fb32 	bl	800da78 <scalbn>
 800d414:	4f23      	ldr	r7, [pc, #140]	; (800d4a4 <__kernel_rem_pio2+0x33c>)
 800d416:	ec55 4b10 	vmov	r4, r5, d0
 800d41a:	46d8      	mov	r8, fp
 800d41c:	2600      	movs	r6, #0
 800d41e:	f1b8 0f00 	cmp.w	r8, #0
 800d422:	f280 80cf 	bge.w	800d5c4 <__kernel_rem_pio2+0x45c>
 800d426:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d488 <__kernel_rem_pio2+0x320>
 800d42a:	465f      	mov	r7, fp
 800d42c:	f04f 0800 	mov.w	r8, #0
 800d430:	2f00      	cmp	r7, #0
 800d432:	f2c0 80fd 	blt.w	800d630 <__kernel_rem_pio2+0x4c8>
 800d436:	ab70      	add	r3, sp, #448	; 0x1c0
 800d438:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d4b0 <__kernel_rem_pio2+0x348>
 800d43c:	ec55 4b18 	vmov	r4, r5, d8
 800d440:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d444:	2600      	movs	r6, #0
 800d446:	e0e5      	b.n	800d614 <__kernel_rem_pio2+0x4ac>
 800d448:	2302      	movs	r3, #2
 800d44a:	9302      	str	r3, [sp, #8]
 800d44c:	e75c      	b.n	800d308 <__kernel_rem_pio2+0x1a0>
 800d44e:	f8db 3000 	ldr.w	r3, [fp]
 800d452:	b955      	cbnz	r5, 800d46a <__kernel_rem_pio2+0x302>
 800d454:	b123      	cbz	r3, 800d460 <__kernel_rem_pio2+0x2f8>
 800d456:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d45a:	f8cb 3000 	str.w	r3, [fp]
 800d45e:	2301      	movs	r3, #1
 800d460:	3201      	adds	r2, #1
 800d462:	f10b 0b04 	add.w	fp, fp, #4
 800d466:	461d      	mov	r5, r3
 800d468:	e755      	b.n	800d316 <__kernel_rem_pio2+0x1ae>
 800d46a:	1acb      	subs	r3, r1, r3
 800d46c:	f8cb 3000 	str.w	r3, [fp]
 800d470:	462b      	mov	r3, r5
 800d472:	e7f5      	b.n	800d460 <__kernel_rem_pio2+0x2f8>
 800d474:	1e62      	subs	r2, r4, #1
 800d476:	ab0c      	add	r3, sp, #48	; 0x30
 800d478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d47c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d480:	a90c      	add	r1, sp, #48	; 0x30
 800d482:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d486:	e754      	b.n	800d332 <__kernel_rem_pio2+0x1ca>
	...
 800d494:	3ff00000 	.word	0x3ff00000
 800d498:	0800e0b0 	.word	0x0800e0b0
 800d49c:	40200000 	.word	0x40200000
 800d4a0:	3ff00000 	.word	0x3ff00000
 800d4a4:	3e700000 	.word	0x3e700000
 800d4a8:	41700000 	.word	0x41700000
 800d4ac:	3fe00000 	.word	0x3fe00000
 800d4b0:	0800e070 	.word	0x0800e070
 800d4b4:	1e62      	subs	r2, r4, #1
 800d4b6:	ab0c      	add	r3, sp, #48	; 0x30
 800d4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d4c0:	e7de      	b.n	800d480 <__kernel_rem_pio2+0x318>
 800d4c2:	a90c      	add	r1, sp, #48	; 0x30
 800d4c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	430a      	orrs	r2, r1
 800d4cc:	e790      	b.n	800d3f0 <__kernel_rem_pio2+0x288>
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d4d4:	2900      	cmp	r1, #0
 800d4d6:	d0fa      	beq.n	800d4ce <__kernel_rem_pio2+0x366>
 800d4d8:	9a08      	ldr	r2, [sp, #32]
 800d4da:	18e3      	adds	r3, r4, r3
 800d4dc:	18a6      	adds	r6, r4, r2
 800d4de:	aa20      	add	r2, sp, #128	; 0x80
 800d4e0:	1c65      	adds	r5, r4, #1
 800d4e2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d4e6:	9302      	str	r3, [sp, #8]
 800d4e8:	9b02      	ldr	r3, [sp, #8]
 800d4ea:	42ab      	cmp	r3, r5
 800d4ec:	da04      	bge.n	800d4f8 <__kernel_rem_pio2+0x390>
 800d4ee:	461c      	mov	r4, r3
 800d4f0:	e6b5      	b.n	800d25e <__kernel_rem_pio2+0xf6>
 800d4f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	e7eb      	b.n	800d4d0 <__kernel_rem_pio2+0x368>
 800d4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4fe:	f7f2 ffc9 	bl	8000494 <__aeabi_i2d>
 800d502:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d508:	46b3      	mov	fp, r6
 800d50a:	461c      	mov	r4, r3
 800d50c:	2700      	movs	r7, #0
 800d50e:	f04f 0800 	mov.w	r8, #0
 800d512:	f04f 0900 	mov.w	r9, #0
 800d516:	9b06      	ldr	r3, [sp, #24]
 800d518:	429f      	cmp	r7, r3
 800d51a:	dd06      	ble.n	800d52a <__kernel_rem_pio2+0x3c2>
 800d51c:	ab70      	add	r3, sp, #448	; 0x1c0
 800d51e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d522:	e9c3 8900 	strd	r8, r9, [r3]
 800d526:	3501      	adds	r5, #1
 800d528:	e7de      	b.n	800d4e8 <__kernel_rem_pio2+0x380>
 800d52a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d52e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d532:	f7f3 f819 	bl	8000568 <__aeabi_dmul>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	4640      	mov	r0, r8
 800d53c:	4649      	mov	r1, r9
 800d53e:	f7f2 fe5d 	bl	80001fc <__adddf3>
 800d542:	3701      	adds	r7, #1
 800d544:	4680      	mov	r8, r0
 800d546:	4689      	mov	r9, r1
 800d548:	e7e5      	b.n	800d516 <__kernel_rem_pio2+0x3ae>
 800d54a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d54e:	e754      	b.n	800d3fa <__kernel_rem_pio2+0x292>
 800d550:	ec47 6b10 	vmov	d0, r6, r7
 800d554:	f1ca 0000 	rsb	r0, sl, #0
 800d558:	f000 fa8e 	bl	800da78 <scalbn>
 800d55c:	ec57 6b10 	vmov	r6, r7, d0
 800d560:	4b9f      	ldr	r3, [pc, #636]	; (800d7e0 <__kernel_rem_pio2+0x678>)
 800d562:	ee10 0a10 	vmov	r0, s0
 800d566:	2200      	movs	r2, #0
 800d568:	4639      	mov	r1, r7
 800d56a:	f7f3 fa83 	bl	8000a74 <__aeabi_dcmpge>
 800d56e:	b300      	cbz	r0, 800d5b2 <__kernel_rem_pio2+0x44a>
 800d570:	4b9c      	ldr	r3, [pc, #624]	; (800d7e4 <__kernel_rem_pio2+0x67c>)
 800d572:	2200      	movs	r2, #0
 800d574:	4630      	mov	r0, r6
 800d576:	4639      	mov	r1, r7
 800d578:	f7f2 fff6 	bl	8000568 <__aeabi_dmul>
 800d57c:	f7f3 faa4 	bl	8000ac8 <__aeabi_d2iz>
 800d580:	4605      	mov	r5, r0
 800d582:	f7f2 ff87 	bl	8000494 <__aeabi_i2d>
 800d586:	4b96      	ldr	r3, [pc, #600]	; (800d7e0 <__kernel_rem_pio2+0x678>)
 800d588:	2200      	movs	r2, #0
 800d58a:	f7f2 ffed 	bl	8000568 <__aeabi_dmul>
 800d58e:	460b      	mov	r3, r1
 800d590:	4602      	mov	r2, r0
 800d592:	4639      	mov	r1, r7
 800d594:	4630      	mov	r0, r6
 800d596:	f7f2 fe2f 	bl	80001f8 <__aeabi_dsub>
 800d59a:	f7f3 fa95 	bl	8000ac8 <__aeabi_d2iz>
 800d59e:	f104 0b01 	add.w	fp, r4, #1
 800d5a2:	ab0c      	add	r3, sp, #48	; 0x30
 800d5a4:	f10a 0a18 	add.w	sl, sl, #24
 800d5a8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d5ac:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800d5b0:	e72b      	b.n	800d40a <__kernel_rem_pio2+0x2a2>
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	4639      	mov	r1, r7
 800d5b6:	f7f3 fa87 	bl	8000ac8 <__aeabi_d2iz>
 800d5ba:	ab0c      	add	r3, sp, #48	; 0x30
 800d5bc:	46a3      	mov	fp, r4
 800d5be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d5c2:	e722      	b.n	800d40a <__kernel_rem_pio2+0x2a2>
 800d5c4:	ab70      	add	r3, sp, #448	; 0x1c0
 800d5c6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800d5ca:	ab0c      	add	r3, sp, #48	; 0x30
 800d5cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d5d0:	f7f2 ff60 	bl	8000494 <__aeabi_i2d>
 800d5d4:	4622      	mov	r2, r4
 800d5d6:	462b      	mov	r3, r5
 800d5d8:	f7f2 ffc6 	bl	8000568 <__aeabi_dmul>
 800d5dc:	4632      	mov	r2, r6
 800d5de:	e9c9 0100 	strd	r0, r1, [r9]
 800d5e2:	463b      	mov	r3, r7
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	4629      	mov	r1, r5
 800d5e8:	f7f2 ffbe 	bl	8000568 <__aeabi_dmul>
 800d5ec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	460d      	mov	r5, r1
 800d5f4:	e713      	b.n	800d41e <__kernel_rem_pio2+0x2b6>
 800d5f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d5fa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d5fe:	f7f2 ffb3 	bl	8000568 <__aeabi_dmul>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	4620      	mov	r0, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	f7f2 fdf7 	bl	80001fc <__adddf3>
 800d60e:	3601      	adds	r6, #1
 800d610:	4604      	mov	r4, r0
 800d612:	460d      	mov	r5, r1
 800d614:	9b04      	ldr	r3, [sp, #16]
 800d616:	429e      	cmp	r6, r3
 800d618:	dc01      	bgt.n	800d61e <__kernel_rem_pio2+0x4b6>
 800d61a:	45b0      	cmp	r8, r6
 800d61c:	daeb      	bge.n	800d5f6 <__kernel_rem_pio2+0x48e>
 800d61e:	ab48      	add	r3, sp, #288	; 0x120
 800d620:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d624:	e9c3 4500 	strd	r4, r5, [r3]
 800d628:	3f01      	subs	r7, #1
 800d62a:	f108 0801 	add.w	r8, r8, #1
 800d62e:	e6ff      	b.n	800d430 <__kernel_rem_pio2+0x2c8>
 800d630:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d632:	2b02      	cmp	r3, #2
 800d634:	dc0b      	bgt.n	800d64e <__kernel_rem_pio2+0x4e6>
 800d636:	2b00      	cmp	r3, #0
 800d638:	dc6e      	bgt.n	800d718 <__kernel_rem_pio2+0x5b0>
 800d63a:	d045      	beq.n	800d6c8 <__kernel_rem_pio2+0x560>
 800d63c:	9b07      	ldr	r3, [sp, #28]
 800d63e:	f003 0007 	and.w	r0, r3, #7
 800d642:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d646:	ecbd 8b02 	vpop	{d8}
 800d64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d64e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d650:	2b03      	cmp	r3, #3
 800d652:	d1f3      	bne.n	800d63c <__kernel_rem_pio2+0x4d4>
 800d654:	ab48      	add	r3, sp, #288	; 0x120
 800d656:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800d65a:	46d0      	mov	r8, sl
 800d65c:	46d9      	mov	r9, fp
 800d65e:	f1b9 0f00 	cmp.w	r9, #0
 800d662:	f1a8 0808 	sub.w	r8, r8, #8
 800d666:	dc64      	bgt.n	800d732 <__kernel_rem_pio2+0x5ca>
 800d668:	465c      	mov	r4, fp
 800d66a:	2c01      	cmp	r4, #1
 800d66c:	f1aa 0a08 	sub.w	sl, sl, #8
 800d670:	dc7e      	bgt.n	800d770 <__kernel_rem_pio2+0x608>
 800d672:	2000      	movs	r0, #0
 800d674:	2100      	movs	r1, #0
 800d676:	f1bb 0f01 	cmp.w	fp, #1
 800d67a:	f300 8097 	bgt.w	800d7ac <__kernel_rem_pio2+0x644>
 800d67e:	9b02      	ldr	r3, [sp, #8]
 800d680:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800d684:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f040 8099 	bne.w	800d7c0 <__kernel_rem_pio2+0x658>
 800d68e:	9b01      	ldr	r3, [sp, #4]
 800d690:	e9c3 5600 	strd	r5, r6, [r3]
 800d694:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d698:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d69c:	e7ce      	b.n	800d63c <__kernel_rem_pio2+0x4d4>
 800d69e:	ab48      	add	r3, sp, #288	; 0x120
 800d6a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	f7f2 fda8 	bl	80001fc <__adddf3>
 800d6ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d6b0:	f1bb 0f00 	cmp.w	fp, #0
 800d6b4:	daf3      	bge.n	800d69e <__kernel_rem_pio2+0x536>
 800d6b6:	9b02      	ldr	r3, [sp, #8]
 800d6b8:	b113      	cbz	r3, 800d6c0 <__kernel_rem_pio2+0x558>
 800d6ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6be:	4619      	mov	r1, r3
 800d6c0:	9b01      	ldr	r3, [sp, #4]
 800d6c2:	e9c3 0100 	strd	r0, r1, [r3]
 800d6c6:	e7b9      	b.n	800d63c <__kernel_rem_pio2+0x4d4>
 800d6c8:	2000      	movs	r0, #0
 800d6ca:	2100      	movs	r1, #0
 800d6cc:	e7f0      	b.n	800d6b0 <__kernel_rem_pio2+0x548>
 800d6ce:	ab48      	add	r3, sp, #288	; 0x120
 800d6d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d8:	f7f2 fd90 	bl	80001fc <__adddf3>
 800d6dc:	3c01      	subs	r4, #1
 800d6de:	2c00      	cmp	r4, #0
 800d6e0:	daf5      	bge.n	800d6ce <__kernel_rem_pio2+0x566>
 800d6e2:	9b02      	ldr	r3, [sp, #8]
 800d6e4:	b1e3      	cbz	r3, 800d720 <__kernel_rem_pio2+0x5b8>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6ec:	9c01      	ldr	r4, [sp, #4]
 800d6ee:	e9c4 2300 	strd	r2, r3, [r4]
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d6fa:	f7f2 fd7d 	bl	80001f8 <__aeabi_dsub>
 800d6fe:	ad4a      	add	r5, sp, #296	; 0x128
 800d700:	2401      	movs	r4, #1
 800d702:	45a3      	cmp	fp, r4
 800d704:	da0f      	bge.n	800d726 <__kernel_rem_pio2+0x5be>
 800d706:	9b02      	ldr	r3, [sp, #8]
 800d708:	b113      	cbz	r3, 800d710 <__kernel_rem_pio2+0x5a8>
 800d70a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d70e:	4619      	mov	r1, r3
 800d710:	9b01      	ldr	r3, [sp, #4]
 800d712:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d716:	e791      	b.n	800d63c <__kernel_rem_pio2+0x4d4>
 800d718:	465c      	mov	r4, fp
 800d71a:	2000      	movs	r0, #0
 800d71c:	2100      	movs	r1, #0
 800d71e:	e7de      	b.n	800d6de <__kernel_rem_pio2+0x576>
 800d720:	4602      	mov	r2, r0
 800d722:	460b      	mov	r3, r1
 800d724:	e7e2      	b.n	800d6ec <__kernel_rem_pio2+0x584>
 800d726:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d72a:	f7f2 fd67 	bl	80001fc <__adddf3>
 800d72e:	3401      	adds	r4, #1
 800d730:	e7e7      	b.n	800d702 <__kernel_rem_pio2+0x59a>
 800d732:	e9d8 4500 	ldrd	r4, r5, [r8]
 800d736:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800d73a:	4620      	mov	r0, r4
 800d73c:	4632      	mov	r2, r6
 800d73e:	463b      	mov	r3, r7
 800d740:	4629      	mov	r1, r5
 800d742:	f7f2 fd5b 	bl	80001fc <__adddf3>
 800d746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	4620      	mov	r0, r4
 800d750:	4629      	mov	r1, r5
 800d752:	f7f2 fd51 	bl	80001f8 <__aeabi_dsub>
 800d756:	4632      	mov	r2, r6
 800d758:	463b      	mov	r3, r7
 800d75a:	f7f2 fd4f 	bl	80001fc <__adddf3>
 800d75e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d762:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800d766:	ed88 7b00 	vstr	d7, [r8]
 800d76a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d76e:	e776      	b.n	800d65e <__kernel_rem_pio2+0x4f6>
 800d770:	e9da 8900 	ldrd	r8, r9, [sl]
 800d774:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d778:	4640      	mov	r0, r8
 800d77a:	4632      	mov	r2, r6
 800d77c:	463b      	mov	r3, r7
 800d77e:	4649      	mov	r1, r9
 800d780:	f7f2 fd3c 	bl	80001fc <__adddf3>
 800d784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d788:	4602      	mov	r2, r0
 800d78a:	460b      	mov	r3, r1
 800d78c:	4640      	mov	r0, r8
 800d78e:	4649      	mov	r1, r9
 800d790:	f7f2 fd32 	bl	80001f8 <__aeabi_dsub>
 800d794:	4632      	mov	r2, r6
 800d796:	463b      	mov	r3, r7
 800d798:	f7f2 fd30 	bl	80001fc <__adddf3>
 800d79c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d7a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d7a4:	ed8a 7b00 	vstr	d7, [sl]
 800d7a8:	3c01      	subs	r4, #1
 800d7aa:	e75e      	b.n	800d66a <__kernel_rem_pio2+0x502>
 800d7ac:	ab48      	add	r3, sp, #288	; 0x120
 800d7ae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b6:	f7f2 fd21 	bl	80001fc <__adddf3>
 800d7ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d7be:	e75a      	b.n	800d676 <__kernel_rem_pio2+0x50e>
 800d7c0:	9b01      	ldr	r3, [sp, #4]
 800d7c2:	9a01      	ldr	r2, [sp, #4]
 800d7c4:	601d      	str	r5, [r3, #0]
 800d7c6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d7ca:	605c      	str	r4, [r3, #4]
 800d7cc:	609f      	str	r7, [r3, #8]
 800d7ce:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d7d2:	60d3      	str	r3, [r2, #12]
 800d7d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7d8:	6110      	str	r0, [r2, #16]
 800d7da:	6153      	str	r3, [r2, #20]
 800d7dc:	e72e      	b.n	800d63c <__kernel_rem_pio2+0x4d4>
 800d7de:	bf00      	nop
 800d7e0:	41700000 	.word	0x41700000
 800d7e4:	3e700000 	.word	0x3e700000

0800d7e8 <__kernel_sin>:
 800d7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ec:	ed2d 8b04 	vpush	{d8-d9}
 800d7f0:	eeb0 8a41 	vmov.f32	s16, s2
 800d7f4:	eef0 8a61 	vmov.f32	s17, s3
 800d7f8:	ec55 4b10 	vmov	r4, r5, d0
 800d7fc:	b083      	sub	sp, #12
 800d7fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d802:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d806:	9001      	str	r0, [sp, #4]
 800d808:	da06      	bge.n	800d818 <__kernel_sin+0x30>
 800d80a:	ee10 0a10 	vmov	r0, s0
 800d80e:	4629      	mov	r1, r5
 800d810:	f7f3 f95a 	bl	8000ac8 <__aeabi_d2iz>
 800d814:	2800      	cmp	r0, #0
 800d816:	d051      	beq.n	800d8bc <__kernel_sin+0xd4>
 800d818:	4622      	mov	r2, r4
 800d81a:	462b      	mov	r3, r5
 800d81c:	4620      	mov	r0, r4
 800d81e:	4629      	mov	r1, r5
 800d820:	f7f2 fea2 	bl	8000568 <__aeabi_dmul>
 800d824:	4682      	mov	sl, r0
 800d826:	468b      	mov	fp, r1
 800d828:	4602      	mov	r2, r0
 800d82a:	460b      	mov	r3, r1
 800d82c:	4620      	mov	r0, r4
 800d82e:	4629      	mov	r1, r5
 800d830:	f7f2 fe9a 	bl	8000568 <__aeabi_dmul>
 800d834:	a341      	add	r3, pc, #260	; (adr r3, 800d93c <__kernel_sin+0x154>)
 800d836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83a:	4680      	mov	r8, r0
 800d83c:	4689      	mov	r9, r1
 800d83e:	4650      	mov	r0, sl
 800d840:	4659      	mov	r1, fp
 800d842:	f7f2 fe91 	bl	8000568 <__aeabi_dmul>
 800d846:	a33f      	add	r3, pc, #252	; (adr r3, 800d944 <__kernel_sin+0x15c>)
 800d848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84c:	f7f2 fcd4 	bl	80001f8 <__aeabi_dsub>
 800d850:	4652      	mov	r2, sl
 800d852:	465b      	mov	r3, fp
 800d854:	f7f2 fe88 	bl	8000568 <__aeabi_dmul>
 800d858:	a33c      	add	r3, pc, #240	; (adr r3, 800d94c <__kernel_sin+0x164>)
 800d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85e:	f7f2 fccd 	bl	80001fc <__adddf3>
 800d862:	4652      	mov	r2, sl
 800d864:	465b      	mov	r3, fp
 800d866:	f7f2 fe7f 	bl	8000568 <__aeabi_dmul>
 800d86a:	a33a      	add	r3, pc, #232	; (adr r3, 800d954 <__kernel_sin+0x16c>)
 800d86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d870:	f7f2 fcc2 	bl	80001f8 <__aeabi_dsub>
 800d874:	4652      	mov	r2, sl
 800d876:	465b      	mov	r3, fp
 800d878:	f7f2 fe76 	bl	8000568 <__aeabi_dmul>
 800d87c:	a337      	add	r3, pc, #220	; (adr r3, 800d95c <__kernel_sin+0x174>)
 800d87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d882:	f7f2 fcbb 	bl	80001fc <__adddf3>
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	4606      	mov	r6, r0
 800d88a:	460f      	mov	r7, r1
 800d88c:	b9eb      	cbnz	r3, 800d8ca <__kernel_sin+0xe2>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	4650      	mov	r0, sl
 800d894:	4659      	mov	r1, fp
 800d896:	f7f2 fe67 	bl	8000568 <__aeabi_dmul>
 800d89a:	a325      	add	r3, pc, #148	; (adr r3, 800d930 <__kernel_sin+0x148>)
 800d89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a0:	f7f2 fcaa 	bl	80001f8 <__aeabi_dsub>
 800d8a4:	4642      	mov	r2, r8
 800d8a6:	464b      	mov	r3, r9
 800d8a8:	f7f2 fe5e 	bl	8000568 <__aeabi_dmul>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	4629      	mov	r1, r5
 800d8b4:	f7f2 fca2 	bl	80001fc <__adddf3>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	460d      	mov	r5, r1
 800d8bc:	ec45 4b10 	vmov	d0, r4, r5
 800d8c0:	b003      	add	sp, #12
 800d8c2:	ecbd 8b04 	vpop	{d8-d9}
 800d8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ca:	4b1b      	ldr	r3, [pc, #108]	; (800d938 <__kernel_sin+0x150>)
 800d8cc:	ec51 0b18 	vmov	r0, r1, d8
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f7f2 fe49 	bl	8000568 <__aeabi_dmul>
 800d8d6:	4632      	mov	r2, r6
 800d8d8:	ec41 0b19 	vmov	d9, r0, r1
 800d8dc:	463b      	mov	r3, r7
 800d8de:	4640      	mov	r0, r8
 800d8e0:	4649      	mov	r1, r9
 800d8e2:	f7f2 fe41 	bl	8000568 <__aeabi_dmul>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	ec51 0b19 	vmov	r0, r1, d9
 800d8ee:	f7f2 fc83 	bl	80001f8 <__aeabi_dsub>
 800d8f2:	4652      	mov	r2, sl
 800d8f4:	465b      	mov	r3, fp
 800d8f6:	f7f2 fe37 	bl	8000568 <__aeabi_dmul>
 800d8fa:	ec53 2b18 	vmov	r2, r3, d8
 800d8fe:	f7f2 fc7b 	bl	80001f8 <__aeabi_dsub>
 800d902:	a30b      	add	r3, pc, #44	; (adr r3, 800d930 <__kernel_sin+0x148>)
 800d904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d908:	4606      	mov	r6, r0
 800d90a:	460f      	mov	r7, r1
 800d90c:	4640      	mov	r0, r8
 800d90e:	4649      	mov	r1, r9
 800d910:	f7f2 fe2a 	bl	8000568 <__aeabi_dmul>
 800d914:	4602      	mov	r2, r0
 800d916:	460b      	mov	r3, r1
 800d918:	4630      	mov	r0, r6
 800d91a:	4639      	mov	r1, r7
 800d91c:	f7f2 fc6e 	bl	80001fc <__adddf3>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4620      	mov	r0, r4
 800d926:	4629      	mov	r1, r5
 800d928:	f7f2 fc66 	bl	80001f8 <__aeabi_dsub>
 800d92c:	e7c4      	b.n	800d8b8 <__kernel_sin+0xd0>
 800d92e:	bf00      	nop
 800d930:	55555549 	.word	0x55555549
 800d934:	3fc55555 	.word	0x3fc55555
 800d938:	3fe00000 	.word	0x3fe00000
 800d93c:	5acfd57c 	.word	0x5acfd57c
 800d940:	3de5d93a 	.word	0x3de5d93a
 800d944:	8a2b9ceb 	.word	0x8a2b9ceb
 800d948:	3e5ae5e6 	.word	0x3e5ae5e6
 800d94c:	57b1fe7d 	.word	0x57b1fe7d
 800d950:	3ec71de3 	.word	0x3ec71de3
 800d954:	19c161d5 	.word	0x19c161d5
 800d958:	3f2a01a0 	.word	0x3f2a01a0
 800d95c:	1110f8a6 	.word	0x1110f8a6
 800d960:	3f811111 	.word	0x3f811111
 800d964:	00000000 	.word	0x00000000

0800d968 <floor>:
 800d968:	ec51 0b10 	vmov	r0, r1, d0
 800d96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d970:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d974:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d978:	2e13      	cmp	r6, #19
 800d97a:	ee10 5a10 	vmov	r5, s0
 800d97e:	ee10 8a10 	vmov	r8, s0
 800d982:	460c      	mov	r4, r1
 800d984:	dc32      	bgt.n	800d9ec <floor+0x84>
 800d986:	2e00      	cmp	r6, #0
 800d988:	da14      	bge.n	800d9b4 <floor+0x4c>
 800d98a:	a333      	add	r3, pc, #204	; (adr r3, 800da58 <floor+0xf0>)
 800d98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d990:	f7f2 fc34 	bl	80001fc <__adddf3>
 800d994:	2200      	movs	r2, #0
 800d996:	2300      	movs	r3, #0
 800d998:	f7f3 f876 	bl	8000a88 <__aeabi_dcmpgt>
 800d99c:	b138      	cbz	r0, 800d9ae <floor+0x46>
 800d99e:	2c00      	cmp	r4, #0
 800d9a0:	da57      	bge.n	800da52 <floor+0xea>
 800d9a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d9a6:	431d      	orrs	r5, r3
 800d9a8:	d001      	beq.n	800d9ae <floor+0x46>
 800d9aa:	4c2d      	ldr	r4, [pc, #180]	; (800da60 <floor+0xf8>)
 800d9ac:	2500      	movs	r5, #0
 800d9ae:	4621      	mov	r1, r4
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	e025      	b.n	800da00 <floor+0x98>
 800d9b4:	4f2b      	ldr	r7, [pc, #172]	; (800da64 <floor+0xfc>)
 800d9b6:	4137      	asrs	r7, r6
 800d9b8:	ea01 0307 	and.w	r3, r1, r7
 800d9bc:	4303      	orrs	r3, r0
 800d9be:	d01f      	beq.n	800da00 <floor+0x98>
 800d9c0:	a325      	add	r3, pc, #148	; (adr r3, 800da58 <floor+0xf0>)
 800d9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c6:	f7f2 fc19 	bl	80001fc <__adddf3>
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	f7f3 f85b 	bl	8000a88 <__aeabi_dcmpgt>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d0eb      	beq.n	800d9ae <floor+0x46>
 800d9d6:	2c00      	cmp	r4, #0
 800d9d8:	bfbe      	ittt	lt
 800d9da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d9de:	fa43 f606 	asrlt.w	r6, r3, r6
 800d9e2:	19a4      	addlt	r4, r4, r6
 800d9e4:	ea24 0407 	bic.w	r4, r4, r7
 800d9e8:	2500      	movs	r5, #0
 800d9ea:	e7e0      	b.n	800d9ae <floor+0x46>
 800d9ec:	2e33      	cmp	r6, #51	; 0x33
 800d9ee:	dd0b      	ble.n	800da08 <floor+0xa0>
 800d9f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d9f4:	d104      	bne.n	800da00 <floor+0x98>
 800d9f6:	ee10 2a10 	vmov	r2, s0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	f7f2 fbfe 	bl	80001fc <__adddf3>
 800da00:	ec41 0b10 	vmov	d0, r0, r1
 800da04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da08:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800da0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da10:	fa23 f707 	lsr.w	r7, r3, r7
 800da14:	4207      	tst	r7, r0
 800da16:	d0f3      	beq.n	800da00 <floor+0x98>
 800da18:	a30f      	add	r3, pc, #60	; (adr r3, 800da58 <floor+0xf0>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	f7f2 fbed 	bl	80001fc <__adddf3>
 800da22:	2200      	movs	r2, #0
 800da24:	2300      	movs	r3, #0
 800da26:	f7f3 f82f 	bl	8000a88 <__aeabi_dcmpgt>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d0bf      	beq.n	800d9ae <floor+0x46>
 800da2e:	2c00      	cmp	r4, #0
 800da30:	da02      	bge.n	800da38 <floor+0xd0>
 800da32:	2e14      	cmp	r6, #20
 800da34:	d103      	bne.n	800da3e <floor+0xd6>
 800da36:	3401      	adds	r4, #1
 800da38:	ea25 0507 	bic.w	r5, r5, r7
 800da3c:	e7b7      	b.n	800d9ae <floor+0x46>
 800da3e:	2301      	movs	r3, #1
 800da40:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800da44:	fa03 f606 	lsl.w	r6, r3, r6
 800da48:	4435      	add	r5, r6
 800da4a:	4545      	cmp	r5, r8
 800da4c:	bf38      	it	cc
 800da4e:	18e4      	addcc	r4, r4, r3
 800da50:	e7f2      	b.n	800da38 <floor+0xd0>
 800da52:	2500      	movs	r5, #0
 800da54:	462c      	mov	r4, r5
 800da56:	e7aa      	b.n	800d9ae <floor+0x46>
 800da58:	8800759c 	.word	0x8800759c
 800da5c:	7e37e43c 	.word	0x7e37e43c
 800da60:	bff00000 	.word	0xbff00000
 800da64:	000fffff 	.word	0x000fffff

0800da68 <nan>:
 800da68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800da70 <nan+0x8>
 800da6c:	4770      	bx	lr
 800da6e:	bf00      	nop
 800da70:	00000000 	.word	0x00000000
 800da74:	7ff80000 	.word	0x7ff80000

0800da78 <scalbn>:
 800da78:	b570      	push	{r4, r5, r6, lr}
 800da7a:	ec55 4b10 	vmov	r4, r5, d0
 800da7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800da82:	4606      	mov	r6, r0
 800da84:	462b      	mov	r3, r5
 800da86:	b99a      	cbnz	r2, 800dab0 <scalbn+0x38>
 800da88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800da8c:	4323      	orrs	r3, r4
 800da8e:	d036      	beq.n	800dafe <scalbn+0x86>
 800da90:	4b39      	ldr	r3, [pc, #228]	; (800db78 <scalbn+0x100>)
 800da92:	4629      	mov	r1, r5
 800da94:	ee10 0a10 	vmov	r0, s0
 800da98:	2200      	movs	r2, #0
 800da9a:	f7f2 fd65 	bl	8000568 <__aeabi_dmul>
 800da9e:	4b37      	ldr	r3, [pc, #220]	; (800db7c <scalbn+0x104>)
 800daa0:	429e      	cmp	r6, r3
 800daa2:	4604      	mov	r4, r0
 800daa4:	460d      	mov	r5, r1
 800daa6:	da10      	bge.n	800daca <scalbn+0x52>
 800daa8:	a32b      	add	r3, pc, #172	; (adr r3, 800db58 <scalbn+0xe0>)
 800daaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daae:	e03a      	b.n	800db26 <scalbn+0xae>
 800dab0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dab4:	428a      	cmp	r2, r1
 800dab6:	d10c      	bne.n	800dad2 <scalbn+0x5a>
 800dab8:	ee10 2a10 	vmov	r2, s0
 800dabc:	4620      	mov	r0, r4
 800dabe:	4629      	mov	r1, r5
 800dac0:	f7f2 fb9c 	bl	80001fc <__adddf3>
 800dac4:	4604      	mov	r4, r0
 800dac6:	460d      	mov	r5, r1
 800dac8:	e019      	b.n	800dafe <scalbn+0x86>
 800daca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dace:	460b      	mov	r3, r1
 800dad0:	3a36      	subs	r2, #54	; 0x36
 800dad2:	4432      	add	r2, r6
 800dad4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dad8:	428a      	cmp	r2, r1
 800dada:	dd08      	ble.n	800daee <scalbn+0x76>
 800dadc:	2d00      	cmp	r5, #0
 800dade:	a120      	add	r1, pc, #128	; (adr r1, 800db60 <scalbn+0xe8>)
 800dae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dae4:	da1c      	bge.n	800db20 <scalbn+0xa8>
 800dae6:	a120      	add	r1, pc, #128	; (adr r1, 800db68 <scalbn+0xf0>)
 800dae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daec:	e018      	b.n	800db20 <scalbn+0xa8>
 800daee:	2a00      	cmp	r2, #0
 800daf0:	dd08      	ble.n	800db04 <scalbn+0x8c>
 800daf2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800daf6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dafa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dafe:	ec45 4b10 	vmov	d0, r4, r5
 800db02:	bd70      	pop	{r4, r5, r6, pc}
 800db04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800db08:	da19      	bge.n	800db3e <scalbn+0xc6>
 800db0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800db0e:	429e      	cmp	r6, r3
 800db10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800db14:	dd0a      	ble.n	800db2c <scalbn+0xb4>
 800db16:	a112      	add	r1, pc, #72	; (adr r1, 800db60 <scalbn+0xe8>)
 800db18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1e2      	bne.n	800dae6 <scalbn+0x6e>
 800db20:	a30f      	add	r3, pc, #60	; (adr r3, 800db60 <scalbn+0xe8>)
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	f7f2 fd1f 	bl	8000568 <__aeabi_dmul>
 800db2a:	e7cb      	b.n	800dac4 <scalbn+0x4c>
 800db2c:	a10a      	add	r1, pc, #40	; (adr r1, 800db58 <scalbn+0xe0>)
 800db2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0b8      	beq.n	800daa8 <scalbn+0x30>
 800db36:	a10e      	add	r1, pc, #56	; (adr r1, 800db70 <scalbn+0xf8>)
 800db38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db3c:	e7b4      	b.n	800daa8 <scalbn+0x30>
 800db3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db42:	3236      	adds	r2, #54	; 0x36
 800db44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800db4c:	4620      	mov	r0, r4
 800db4e:	4b0c      	ldr	r3, [pc, #48]	; (800db80 <scalbn+0x108>)
 800db50:	2200      	movs	r2, #0
 800db52:	e7e8      	b.n	800db26 <scalbn+0xae>
 800db54:	f3af 8000 	nop.w
 800db58:	c2f8f359 	.word	0xc2f8f359
 800db5c:	01a56e1f 	.word	0x01a56e1f
 800db60:	8800759c 	.word	0x8800759c
 800db64:	7e37e43c 	.word	0x7e37e43c
 800db68:	8800759c 	.word	0x8800759c
 800db6c:	fe37e43c 	.word	0xfe37e43c
 800db70:	c2f8f359 	.word	0xc2f8f359
 800db74:	81a56e1f 	.word	0x81a56e1f
 800db78:	43500000 	.word	0x43500000
 800db7c:	ffff3cb0 	.word	0xffff3cb0
 800db80:	3c900000 	.word	0x3c900000

0800db84 <_init>:
 800db84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db86:	bf00      	nop
 800db88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db8a:	bc08      	pop	{r3}
 800db8c:	469e      	mov	lr, r3
 800db8e:	4770      	bx	lr

0800db90 <_fini>:
 800db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db92:	bf00      	nop
 800db94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db96:	bc08      	pop	{r3}
 800db98:	469e      	mov	lr, r3
 800db9a:	4770      	bx	lr
