
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a58  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005c08  08005c08  00015c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c28  08005c28  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c30  08005c30  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08005c38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  20000098  08005ccc  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  08005ccc  000207fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013df2  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bae  00000000  00000000  00033eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  00036a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c0  00000000  00000000  00037c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003cf8  00000000  00000000  00038d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb78  00000000  00000000  0003ca40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dee60  00000000  00000000  0004c5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce0  00000000  00000000  0012b494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005bf0 	.word	0x08005bf0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	08005bf0 	.word	0x08005bf0

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8000df4:	2200      	movs	r2, #0
 8000df6:	2110      	movs	r1, #16
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <ADC_Read+0x30>)
 8000dfa:	f002 f8bb 	bl	8002f74 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8000dfe:	2302      	movs	r3, #2
 8000e00:	2208      	movs	r2, #8
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	4806      	ldr	r0, [pc, #24]	; (8000e20 <ADC_Read+0x34>)
 8000e06:	f002 ffaf 	bl	8003d68 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4803      	ldr	r0, [pc, #12]	; (8000e1c <ADC_Read+0x30>)
 8000e10:	f002 f8b0 	bl	8002f74 <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	200000b8 	.word	0x200000b8

08000e24 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 3,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	brakeMotor(motor, 0);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 f82c 	bl	8000e8c <brakeMotor>
	enableMotor(motor, 0);
 8000e34:	2100      	movs	r1, #0
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f804 	bl	8000e44 <enableMotor>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <enableMotor>:

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e58:	78fa      	ldrb	r2, [r7, #3]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f002 f88a 	bl	8002f74 <HAL_GPIO_WritePin>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	461a      	mov	r2, r3
 8000e76:	2108      	movs	r1, #8
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <emBrakeMotor+0x20>)
 8000e7a:	f002 f87b 	bl	8002f74 <HAL_GPIO_WritePin>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40020c00 	.word	0x40020c00

08000e8c <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69d8      	ldr	r0, [r3, #28]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	8c1b      	ldrh	r3, [r3, #32]
 8000ea0:	78fa      	ldrb	r2, [r7, #3]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f002 f866 	bl	8002f74 <HAL_GPIO_WritePin>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_DMA_Init+0x3c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <MX_DMA_Init+0x3c>)
 8000ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_DMA_Init+0x3c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	200c      	movs	r0, #12
 8000ed8:	f001 fb67 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000edc:	200c      	movs	r0, #12
 8000ede:	f001 fb80 	bl	80025e2 <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	4b6d      	ldr	r3, [pc, #436]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a6c      	ldr	r2, [pc, #432]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f10:	f043 0310 	orr.w	r3, r3, #16
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b6a      	ldr	r3, [pc, #424]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	4b66      	ldr	r3, [pc, #408]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a65      	ldr	r2, [pc, #404]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b63      	ldr	r3, [pc, #396]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b5f      	ldr	r3, [pc, #380]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a5e      	ldr	r2, [pc, #376]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b58      	ldr	r3, [pc, #352]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a57      	ldr	r2, [pc, #348]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a50      	ldr	r2, [pc, #320]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b4e      	ldr	r3, [pc, #312]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a49      	ldr	r2, [pc, #292]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <MX_GPIO_Init+0x1d0>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000fae:	2200      	movs	r2, #0
 8000fb0:	213f      	movs	r1, #63	; 0x3f
 8000fb2:	4844      	ldr	r0, [pc, #272]	; (80010c4 <MX_GPIO_Init+0x1d4>)
 8000fb4:	f001 ffde 	bl	8002f74 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4842      	ldr	r0, [pc, #264]	; (80010c8 <MX_GPIO_Init+0x1d8>)
 8000fbe:	f001 ffd9 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	219b      	movs	r1, #155	; 0x9b
 8000fc6:	4841      	ldr	r0, [pc, #260]	; (80010cc <MX_GPIO_Init+0x1dc>)
 8000fc8:	f001 ffd4 	bl	8002f74 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8000fd2:	483f      	ldr	r0, [pc, #252]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000fd4:	f001 ffce 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_ALM_Pin|HubM_IO_SON_Pin
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f64f 4108 	movw	r1, #64520	; 0xfc08
 8000fde:	483d      	ldr	r0, [pc, #244]	; (80010d4 <MX_GPIO_Init+0x1e4>)
 8000fe0:	f001 ffc8 	bl	8002f74 <HAL_GPIO_WritePin>
                          |HubM_IO_NOT_Pin|HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin
 8000fe4:	f248 137f 	movw	r3, #33151	; 0x817f
 8000fe8:	61fb      	str	r3, [r7, #28]
                          |LimitSW4_Pin|ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin|Button1_Pin
                          |Button2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4835      	ldr	r0, [pc, #212]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000ffa:	f001 fe11 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000ffe:	233f      	movs	r3, #63	; 0x3f
 8001000:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001006:	2301      	movs	r3, #1
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	482b      	ldr	r0, [pc, #172]	; (80010c4 <MX_GPIO_Init+0x1d4>)
 8001016:	f001 fe03 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 800101a:	2310      	movs	r3, #16
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	4825      	ldr	r0, [pc, #148]	; (80010c8 <MX_GPIO_Init+0x1d8>)
 8001032:	f001 fdf5 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_GPIO_Init+0x1e8>)
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	481f      	ldr	r0, [pc, #124]	; (80010c8 <MX_GPIO_Init+0x1d8>)
 800104a:	f001 fde9 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 800104e:	239b      	movs	r3, #155	; 0x9b
 8001050:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001056:	2301      	movs	r3, #1
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4819      	ldr	r0, [pc, #100]	; (80010cc <MX_GPIO_Init+0x1dc>)
 8001066:	f001 fddb 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 800106a:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001074:	2301      	movs	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	4813      	ldr	r0, [pc, #76]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8001084:	f001 fdcc 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_ALM_Pin|HubM_IO_SON_Pin
 8001088:	f64f 4308 	movw	r3, #64520	; 0xfc08
 800108c:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_NOT_Pin|HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001092:	2301      	movs	r3, #1
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MX_GPIO_Init+0x1e4>)
 80010a2:	f001 fdbd 	bl	8002c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2017      	movs	r0, #23
 80010ac:	f001 fa7d 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010b0:	2017      	movs	r0, #23
 80010b2:	f001 fa96 	bl	80025e2 <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3730      	adds	r7, #48	; 0x30
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40020c00 	.word	0x40020c00
 80010d8:	10210000 	.word	0x10210000

080010dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_I2C1_Init+0x74>)
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <MX_I2C1_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_I2C1_Init+0x74>)
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <MX_I2C1_Init+0x7c>)
 80010ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_I2C1_Init+0x74>)
 80010fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_I2C1_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_I2C1_Init+0x74>)
 800111a:	f001 ff5d 	bl	8002fd8 <HAL_I2C_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001124:	f000 fb28 	bl	8001778 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <MX_I2C1_Init+0x74>)
 800112c:	f002 f88c 	bl	8003248 <HAL_I2CEx_ConfigAnalogFilter>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001136:	f000 fb1f 	bl	8001778 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800113a:	2100      	movs	r1, #0
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_I2C1_Init+0x74>)
 800113e:	f002 f8bf 	bl	80032c0 <HAL_I2CEx_ConfigDigitalFilter>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001148:	f000 fb16 	bl	8001778 <Error_Handler>
  }

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000110 	.word	0x20000110
 8001154:	40005400 	.word	0x40005400
 8001158:	00061a80 	.word	0x00061a80

0800115c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_I2C_MspInit+0x84>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d12c      	bne.n	80011d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 800119a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a0:	2312      	movs	r3, #18
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ac:	2304      	movs	r3, #4
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	480c      	ldr	r0, [pc, #48]	; (80011e8 <HAL_I2C_MspInit+0x8c>)
 80011b8:	f001 fd32 	bl	8002c20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 80011c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40005400 	.word	0x40005400
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020400 	.word	0x40020400

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f001 f88d 	bl	8002310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f86d 	bl	80012d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 80011fa:	f002 fd1d 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 80011fe:	4602      	mov	r2, r0
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <main+0xd4>)
 8001202:	fba3 2302 	umull	r2, r3, r3, r2
 8001206:	099b      	lsrs	r3, r3, #6
 8001208:	4618      	mov	r0, r3
 800120a:	f001 f9f8 	bl	80025fe <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800120e:	2004      	movs	r0, #4
 8001210:	f001 fa02 	bl	8002618 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800121c:	f001 f9c5 	bl	80025aa <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001220:	f7ff fe66 	bl	8000ef0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001224:	f7ff fe44 	bl	8000eb0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001228:	f7ff ff58 	bl	80010dc <MX_I2C1_Init>
  MX_SPI1_Init();
 800122c:	f000 faac 	bl	8001788 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001230:	f000 fae0 	bl	80017f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001234:	f000 fc2e 	bl	8001a94 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001238:	f000 fccc 	bl	8001bd4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800123c:	f000 ff98 	bl	8002170 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001240:	f000 fd42 	bl	8001cc8 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001244:	f000 fdc2 	bl	8001dcc <MX_TIM8_Init>
//  MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
//  MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
//  HAL_Delay(500);

  //Initialize rear and back motor
  bd25l_Init(&rearMotor);
 8001248:	481e      	ldr	r0, [pc, #120]	; (80012c4 <main+0xd8>)
 800124a:	f7ff fdeb 	bl	8000e24 <bd25l_Init>
  bd25l_Init(&backMotor);
 800124e:	481e      	ldr	r0, [pc, #120]	; (80012c8 <main+0xdc>)
 8001250:	f7ff fde8 	bl	8000e24 <bd25l_Init>
  emBrakeMotor(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff fe07 	bl	8000e68 <emBrakeMotor>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t prev_time = HAL_GetTick();
 800125a:	f001 f8bf 	bl	80023dc <HAL_GetTick>
 800125e:	6078      	str	r0, [r7, #4]

  //debug variable
  uint32_t debug_prev_time = HAL_GetTick();
 8001260:	f001 f8bc 	bl	80023dc <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]
  uint8_t led_status = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	72fb      	strb	r3, [r7, #11]
  while (1)
  {
      if (HAL_GetTick() - debug_prev_time >= 500){
 800126a:	f001 f8b7 	bl	80023dc <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001278:	d31c      	bcc.n	80012b4 <main+0xc8>
	  if (led_status == 0){
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10c      	bne.n	800129a <main+0xae>
	      count++;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <main+0xe0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a11      	ldr	r2, [pc, #68]	; (80012cc <main+0xe0>)
 8001288:	6013      	str	r3, [r2, #0]
	      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2108      	movs	r1, #8
 800128e:	4810      	ldr	r0, [pc, #64]	; (80012d0 <main+0xe4>)
 8001290:	f001 fe70 	bl	8002f74 <HAL_GPIO_WritePin>
	      led_status = 1;
 8001294:	2301      	movs	r3, #1
 8001296:	72fb      	strb	r3, [r7, #11]
 8001298:	e009      	b.n	80012ae <main+0xc2>
	  }
	  else if (led_status == 1){
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d106      	bne.n	80012ae <main+0xc2>
	      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2108      	movs	r1, #8
 80012a4:	480a      	ldr	r0, [pc, #40]	; (80012d0 <main+0xe4>)
 80012a6:	f001 fe65 	bl	8002f74 <HAL_GPIO_WritePin>
	      led_status = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	72fb      	strb	r3, [r7, #11]
	  }
	  debug_prev_time = HAL_GetTick();
 80012ae:	f001 f895 	bl	80023dc <HAL_GetTick>
 80012b2:	60f8      	str	r0, [r7, #12]
//      //Test speed commands on bse motor
//      MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL -= 50;
//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;

    //Loop should execute once every 1 tick
    if(HAL_GetTick() - prev_time >= 1)
 80012b4:	f001 f892 	bl	80023dc <HAL_GetTick>
//	//Send PID commands to motor
//	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = motor_command[LEFT_INDEX] + 1500;
//	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = motor_command[RIGHT_INDEX] + 1500;
//
    }
    prev_time = HAL_GetTick();
 80012b8:	f001 f890 	bl	80023dc <HAL_GetTick>
 80012bc:	6078      	str	r0, [r7, #4]
      if (HAL_GetTick() - debug_prev_time >= 500){
 80012be:	e7d4      	b.n	800126a <main+0x7e>
 80012c0:	10624dd3 	.word	0x10624dd3
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000034 	.word	0x20000034
 80012cc:	200000b4 	.word	0x200000b4
 80012d0:	40020400 	.word	0x40020400

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	; 0x50
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	2230      	movs	r2, #48	; 0x30
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fc7c 	bl	8005be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <SystemClock_Config+0xd8>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	4a2a      	ldr	r2, [pc, #168]	; (80013ac <SystemClock_Config+0xd8>)
 8001302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001306:	6413      	str	r3, [r2, #64]	; 0x40
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <SystemClock_Config+0xd8>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <SystemClock_Config+0xdc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a24      	ldr	r2, [pc, #144]	; (80013b0 <SystemClock_Config+0xdc>)
 800131e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <SystemClock_Config+0xdc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001330:	2301      	movs	r3, #1
 8001332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133a:	2302      	movs	r3, #2
 800133c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001344:	2308      	movs	r3, #8
 8001346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001348:	23b4      	movs	r3, #180	; 0xb4
 800134a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001350:	2304      	movs	r3, #4
 8001352:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4618      	mov	r0, r3
 800135a:	f002 f841 	bl	80033e0 <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001364:	f000 fa08 	bl	8001778 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001368:	f001 ffea 	bl	8003340 <HAL_PWREx_EnableOverDrive>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001372:	f000 fa01 	bl	8001778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001382:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2105      	movs	r1, #5
 8001394:	4618      	mov	r0, r3
 8001396:	f002 fa93 	bl	80038c0 <HAL_RCC_ClockConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80013a0:	f000 f9ea 	bl	8001778 <Error_Handler>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3750      	adds	r7, #80	; 0x50
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000
 80013b4:	00000000 	.word	0x00000000

080013b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	2b80      	cmp	r3, #128	; 0x80
 80013c8:	d000      	beq.n	80013cc <HAL_GPIO_EXTI_Callback+0x14>
      joystick.y = MAX(-1,MIN(joystick.y, 1));
    }

      break;
    default:
      break;
 80013ca:	e1c9      	b.n	8001760 <HAL_GPIO_EXTI_Callback+0x3a8>
      ADC_Read(&adc_rawData[0]);
 80013cc:	48ba      	ldr	r0, [pc, #744]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 80013ce:	f7ff fd0d 	bl	8000dec <ADC_Read>
      adc_rawData[0] = adc_rawData[0] * (1 - ADC_EXPONENTIAL_ALPHA) + adc_rawData_prev[0] * ADC_EXPONENTIAL_ALPHA;
 80013d2:	4bb9      	ldr	r3, [pc, #740]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 80013d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f85b 	bl	8000494 <__aeabi_i2d>
 80013de:	a3b2      	add	r3, pc, #712	; (adr r3, 80016a8 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f8c0 	bl	8000568 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4692      	mov	sl, r2
 80013ee:	469b      	mov	fp, r3
 80013f0:	4bb2      	ldr	r3, [pc, #712]	; (80016bc <HAL_GPIO_EXTI_Callback+0x304>)
 80013f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f84c 	bl	8000494 <__aeabi_i2d>
 80013fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80016b0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f8b1 	bl	8000568 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4650      	mov	r0, sl
 800140c:	4659      	mov	r1, fp
 800140e:	f7fe fef5 	bl	80001fc <__adddf3>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fb3f 	bl	8000a9c <__aeabi_d2iz>
 800141e:	4603      	mov	r3, r0
 8001420:	b21a      	sxth	r2, r3
 8001422:	4ba5      	ldr	r3, [pc, #660]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 8001424:	801a      	strh	r2, [r3, #0]
      adc_rawData[1] = adc_rawData[1] * (1 - ADC_EXPONENTIAL_ALPHA) + adc_rawData_prev[1] * ADC_EXPONENTIAL_ALPHA;
 8001426:	4ba4      	ldr	r3, [pc, #656]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 8001428:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f831 	bl	8000494 <__aeabi_i2d>
 8001432:	a39d      	add	r3, pc, #628	; (adr r3, 80016a8 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7ff f896 	bl	8000568 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4692      	mov	sl, r2
 8001442:	469b      	mov	fp, r3
 8001444:	4b9d      	ldr	r3, [pc, #628]	; (80016bc <HAL_GPIO_EXTI_Callback+0x304>)
 8001446:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f822 	bl	8000494 <__aeabi_i2d>
 8001450:	a397      	add	r3, pc, #604	; (adr r3, 80016b0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f887 	bl	8000568 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4650      	mov	r0, sl
 8001460:	4659      	mov	r1, fp
 8001462:	f7fe fecb 	bl	80001fc <__adddf3>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fb15 	bl	8000a9c <__aeabi_d2iz>
 8001472:	4603      	mov	r3, r0
 8001474:	b21a      	sxth	r2, r3
 8001476:	4b90      	ldr	r3, [pc, #576]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 8001478:	805a      	strh	r2, [r3, #2]
      adc_rawData_prev[0] = adc_rawData[0];
 800147a:	4b8f      	ldr	r3, [pc, #572]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 800147c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001480:	4b8e      	ldr	r3, [pc, #568]	; (80016bc <HAL_GPIO_EXTI_Callback+0x304>)
 8001482:	801a      	strh	r2, [r3, #0]
      adc_rawData_prev[1] = adc_rawData[1];
 8001484:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 8001486:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800148a:	4b8c      	ldr	r3, [pc, #560]	; (80016bc <HAL_GPIO_EXTI_Callback+0x304>)
 800148c:	805a      	strh	r2, [r3, #2]
      if (adc_rawData[0] >= joystick.MID_X + ADC_TOLERANCE)
 800148e:	4b8a      	ldr	r3, [pc, #552]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 8001490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001494:	461a      	mov	r2, r3
 8001496:	4b8a      	ldr	r3, [pc, #552]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 8001498:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800149c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80014a0:	429a      	cmp	r2, r3
 80014a2:	db27      	blt.n	80014f4 <HAL_GPIO_EXTI_Callback+0x13c>
	  joystick.x = (double)(adc_rawData[0] - joystick.MID_X - ADC_TOLERANCE)/(joystick.MAX_X - joystick.MID_X- ADC_TOLERANCE);
 80014a4:	4b84      	ldr	r3, [pc, #528]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 80014a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b84      	ldr	r3, [pc, #528]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 80014ae:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffeb 	bl	8000494 <__aeabi_i2d>
 80014be:	4680      	mov	r8, r0
 80014c0:	4689      	mov	r9, r1
 80014c2:	4b7f      	ldr	r3, [pc, #508]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 80014c4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b7d      	ldr	r3, [pc, #500]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 80014cc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ffdc 	bl	8000494 <__aeabi_i2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4640      	mov	r0, r8
 80014e2:	4649      	mov	r1, r9
 80014e4:	f7ff f96a 	bl	80007bc <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4974      	ldr	r1, [pc, #464]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 80014ee:	e9c1 2300 	strd	r2, r3, [r1]
 80014f2:	e034      	b.n	800155e <HAL_GPIO_EXTI_Callback+0x1a6>
      else if (adc_rawData[0] <= joystick.MID_X - ADC_TOLERANCE)
 80014f4:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 80014f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 80014fe:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001502:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001506:	429a      	cmp	r2, r3
 8001508:	dc29      	bgt.n	800155e <HAL_GPIO_EXTI_Callback+0x1a6>
      	  joystick.x = -(double)(adc_rawData[0] - joystick.MID_X + ADC_TOLERANCE)/(joystick.MIN_X - joystick.MID_X + ADC_TOLERANCE);
 800150a:	4b6b      	ldr	r3, [pc, #428]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 800150c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001510:	461a      	mov	r2, r3
 8001512:	4b6b      	ldr	r3, [pc, #428]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 8001514:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe ffb8 	bl	8000494 <__aeabi_i2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4690      	mov	r8, r2
 800152a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800152e:	4b64      	ldr	r3, [pc, #400]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 8001530:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001534:	461a      	mov	r2, r3
 8001536:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 8001538:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ffa6 	bl	8000494 <__aeabi_i2d>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4640      	mov	r0, r8
 800154e:	4649      	mov	r1, r9
 8001550:	f7ff f934 	bl	80007bc <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4959      	ldr	r1, [pc, #356]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 800155a:	e9c1 2300 	strd	r2, r3, [r1]
      if (adc_rawData[1] >= joystick.MID_Y + ADC_TOLERANCE)
 800155e:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 8001560:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001564:	461a      	mov	r2, r3
 8001566:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 8001568:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800156c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001570:	429a      	cmp	r2, r3
 8001572:	db27      	blt.n	80015c4 <HAL_GPIO_EXTI_Callback+0x20c>
      	  joystick.y = (double)(adc_rawData[1] - joystick.MID_Y - ADC_TOLERANCE)/(joystick.MAX_Y - joystick.MID_Y- ADC_TOLERANCE);
 8001574:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 8001576:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800157a:	461a      	mov	r2, r3
 800157c:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 800157e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ff83 	bl	8000494 <__aeabi_i2d>
 800158e:	4604      	mov	r4, r0
 8001590:	460d      	mov	r5, r1
 8001592:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 8001594:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001598:	461a      	mov	r2, r3
 800159a:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 800159c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff74 	bl	8000494 <__aeabi_i2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4620      	mov	r0, r4
 80015b2:	4629      	mov	r1, r5
 80015b4:	f7ff f902 	bl	80007bc <__aeabi_ddiv>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	4a40      	ldr	r2, [pc, #256]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 80015be:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80015c2:	e034      	b.n	800162e <HAL_GPIO_EXTI_Callback+0x276>
      else if (adc_rawData[1] <= joystick.MID_Y - ADC_TOLERANCE)
 80015c4:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 80015c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 80015ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015d2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dc29      	bgt.n	800162e <HAL_GPIO_EXTI_Callback+0x276>
	    joystick.y = -(double)(adc_rawData[1] - joystick.MID_Y + ADC_TOLERANCE)/(joystick.MIN_Y - joystick.MID_Y + ADC_TOLERANCE);
 80015da:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x300>)
 80015dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 80015e4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff50 	bl	8000494 <__aeabi_i2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4614      	mov	r4, r2
 80015fa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80015fe:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 8001600:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001604:	461a      	mov	r2, r3
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 8001608:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff3e 	bl	8000494 <__aeabi_i2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4620      	mov	r0, r4
 800161e:	4629      	mov	r1, r5
 8001620:	f7ff f8cc 	bl	80007bc <__aeabi_ddiv>
 8001624:	4603      	mov	r3, r0
 8001626:	460c      	mov	r4, r1
 8001628:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 800162a:	e9c2 3402 	strd	r3, r4, [r2, #8]
      joystick.x = MAX(-1,MIN(joystick.x, 1));
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 8001630:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001634:	2301      	movs	r3, #1
 8001636:	461c      	mov	r4, r3
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x30c>)
 800163e:	f7ff fa05 	bl	8000a4c <__aeabi_dcmplt>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_GPIO_EXTI_Callback+0x294>
 8001648:	2300      	movs	r3, #0
 800164a:	461c      	mov	r4, r3
 800164c:	b2e3      	uxtb	r3, r4
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d114      	bne.n	8001682 <HAL_GPIO_EXTI_Callback+0x2ca>
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 800165a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165e:	2301      	movs	r3, #1
 8001660:	461c      	mov	r4, r3
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_GPIO_EXTI_Callback+0x310>)
 8001668:	f7ff f9f0 	bl	8000a4c <__aeabi_dcmplt>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_GPIO_EXTI_Callback+0x2be>
 8001672:	2300      	movs	r3, #0
 8001674:	461c      	mov	r4, r3
 8001676:	b2e3      	uxtb	r3, r4
 8001678:	f083 0301 	eor.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d024      	beq.n	80016cc <HAL_GPIO_EXTI_Callback+0x314>
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 8001684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x30c>)
 800168e:	f7ff f9dd 	bl	8000a4c <__aeabi_dcmplt>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_EXTI_Callback+0x2e8>
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x308>)
 800169a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800169e:	e018      	b.n	80016d2 <HAL_GPIO_EXTI_Callback+0x31a>
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	4c07      	ldr	r4, [pc, #28]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x30c>)
 80016a6:	e014      	b.n	80016d2 <HAL_GPIO_EXTI_Callback+0x31a>
 80016a8:	33333334 	.word	0x33333334
 80016ac:	3fc33333 	.word	0x3fc33333
 80016b0:	33333333 	.word	0x33333333
 80016b4:	3feb3333 	.word	0x3feb3333
 80016b8:	20000470 	.word	0x20000470
 80016bc:	20000480 	.word	0x20000480
 80016c0:	20000068 	.word	0x20000068
 80016c4:	3ff00000 	.word	0x3ff00000
 80016c8:	bff00000 	.word	0xbff00000
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	4c26      	ldr	r4, [pc, #152]	; (800176c <HAL_GPIO_EXTI_Callback+0x3b4>)
 80016d2:	4a27      	ldr	r2, [pc, #156]	; (8001770 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80016d4:	e9c2 3400 	strd	r3, r4, [r2]
      joystick.y = MAX(-1,MIN(joystick.y, 1));
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80016da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016de:	2301      	movs	r3, #1
 80016e0:	461c      	mov	r4, r3
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80016e8:	f7ff f9b0 	bl	8000a4c <__aeabi_dcmplt>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_EXTI_Callback+0x33e>
 80016f2:	2300      	movs	r3, #0
 80016f4:	461c      	mov	r4, r3
 80016f6:	b2e3      	uxtb	r3, r4
 80016f8:	f083 0301 	eor.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d114      	bne.n	800172c <HAL_GPIO_EXTI_Callback+0x374>
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8001704:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001708:	2301      	movs	r3, #1
 800170a:	461c      	mov	r4, r3
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_GPIO_EXTI_Callback+0x3b4>)
 8001712:	f7ff f99b 	bl	8000a4c <__aeabi_dcmplt>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_GPIO_EXTI_Callback+0x368>
 800171c:	2300      	movs	r3, #0
 800171e:	461c      	mov	r4, r3
 8001720:	b2e3      	uxtb	r3, r4
 8001722:	f083 0301 	eor.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d012      	beq.n	8001752 <HAL_GPIO_EXTI_Callback+0x39a>
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_GPIO_EXTI_Callback+0x3b8>)
 800172e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_GPIO_EXTI_Callback+0x3bc>)
 8001738:	f7ff f988 	bl	8000a4c <__aeabi_dcmplt>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_EXTI_Callback+0x392>
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8001744:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001748:	e006      	b.n	8001758 <HAL_GPIO_EXTI_Callback+0x3a0>
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	4c09      	ldr	r4, [pc, #36]	; (8001774 <HAL_GPIO_EXTI_Callback+0x3bc>)
 8001750:	e002      	b.n	8001758 <HAL_GPIO_EXTI_Callback+0x3a0>
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	4c05      	ldr	r4, [pc, #20]	; (800176c <HAL_GPIO_EXTI_Callback+0x3b4>)
 8001758:	4a05      	ldr	r2, [pc, #20]	; (8001770 <HAL_GPIO_EXTI_Callback+0x3b8>)
 800175a:	e9c2 3402 	strd	r3, r4, [r2, #8]
      break;
 800175e:	bf00      	nop
  }

}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800176a:	bf00      	nop
 800176c:	bff00000 	.word	0xbff00000
 8001770:	20000068 	.word	0x20000068
 8001774:	3ff00000 	.word	0x3ff00000

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <MX_SPI1_Init+0x64>)
 800178e:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <MX_SPI1_Init+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <MX_SPI1_Init+0x64>)
 8001794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_SPI1_Init+0x64>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_SPI1_Init+0x64>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_SPI1_Init+0x64>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_SPI1_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_SPI1_Init+0x64>)
 80017b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_SPI1_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <MX_SPI1_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_SPI1_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_SPI1_Init+0x64>)
 80017d4:	220a      	movs	r2, #10
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <MX_SPI1_Init+0x64>)
 80017da:	f002 fa61 	bl	8003ca0 <HAL_SPI_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017e4:	f7ff ffc8 	bl	8001778 <Error_Handler>
  }

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200000b8 	.word	0x200000b8
 80017f0:	40013000 	.word	0x40013000

080017f4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_SPI2_Init+0x64>)
 80017fa:	4a18      	ldr	r2, [pc, #96]	; (800185c <MX_SPI2_Init+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_SPI2_Init+0x64>)
 8001800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001804:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_SPI2_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_SPI2_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_SPI2_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_SPI2_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_SPI2_Init+0x64>)
 8001820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001824:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_SPI2_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <MX_SPI2_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_SPI2_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <MX_SPI2_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_SPI2_Init+0x64>)
 8001840:	220a      	movs	r2, #10
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_SPI2_Init+0x64>)
 8001846:	f002 fa2b 	bl	8003ca0 <HAL_SPI_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001850:	f7ff ff92 	bl	8001778 <Error_Handler>
  }

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000600 	.word	0x20000600
 800185c:	40003800 	.word	0x40003800

08001860 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a41      	ldr	r2, [pc, #260]	; (8001984 <HAL_SPI_MspInit+0x124>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d14a      	bne.n	8001918 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	4b40      	ldr	r3, [pc, #256]	; (8001988 <HAL_SPI_MspInit+0x128>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4a3f      	ldr	r2, [pc, #252]	; (8001988 <HAL_SPI_MspInit+0x128>)
 800188c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <HAL_SPI_MspInit+0x128>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_SPI_MspInit+0x128>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a38      	ldr	r2, [pc, #224]	; (8001988 <HAL_SPI_MspInit+0x128>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b36      	ldr	r3, [pc, #216]	; (8001988 <HAL_SPI_MspInit+0x128>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b32      	ldr	r3, [pc, #200]	; (8001988 <HAL_SPI_MspInit+0x128>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a31      	ldr	r2, [pc, #196]	; (8001988 <HAL_SPI_MspInit+0x128>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_SPI_MspInit+0x128>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 80018d6:	2360      	movs	r3, #96	; 0x60
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018e6:	2305      	movs	r3, #5
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4826      	ldr	r0, [pc, #152]	; (800198c <HAL_SPI_MspInit+0x12c>)
 80018f2:	f001 f995 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018f6:	2320      	movs	r3, #32
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001906:	2305      	movs	r3, #5
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	481f      	ldr	r0, [pc, #124]	; (8001990 <HAL_SPI_MspInit+0x130>)
 8001912:	f001 f985 	bl	8002c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001916:	e031      	b.n	800197c <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_SPI_MspInit+0x134>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d12c      	bne.n	800197c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <HAL_SPI_MspInit+0x128>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a17      	ldr	r2, [pc, #92]	; (8001988 <HAL_SPI_MspInit+0x128>)
 800192c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_SPI_MspInit+0x128>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_SPI_MspInit+0x128>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <HAL_SPI_MspInit+0x128>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_SPI_MspInit+0x128>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 800195a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800195e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800196c:	2305      	movs	r3, #5
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <HAL_SPI_MspInit+0x130>)
 8001978:	f001 f952 	bl	8002c20 <HAL_GPIO_Init>
}
 800197c:	bf00      	nop
 800197e:	3730      	adds	r7, #48	; 0x30
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40013000 	.word	0x40013000
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40003800 	.word	0x40003800

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <MemManage_Handler+0x4>

08001a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3c:	f000 fcba 	bl	80023b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <DMA1_Stream1_IRQHandler+0x10>)
 8001a4a:	f000 feaf 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000758 	.word	0x20000758

08001a58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a5c:	2080      	movs	r0, #128	; 0x80
 8001a5e:	f001 faa3 	bl	8002fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <SystemInit+0x28>)
 8001a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a72:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <SystemInit+0x28>)
 8001a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SystemInit+0x28>)
 8001a7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a82:	609a      	str	r2, [r3, #8]
#endif
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b096      	sub	sp, #88	; 0x58
 8001a98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
 8001ac2:	615a      	str	r2, [r3, #20]
 8001ac4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2220      	movs	r2, #32
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 f887 	bl	8005be0 <memset>

  htim1.Instance = TIM1;
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ad4:	4a3e      	ldr	r2, [pc, #248]	; (8001bd0 <MX_TIM1_Init+0x13c>)
 8001ad6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 8001ad8:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ada:	2259      	movs	r2, #89	; 0x59
 8001adc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001ae4:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ae6:	2263      	movs	r2, #99	; 0x63
 8001ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af6:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001afc:	4833      	ldr	r0, [pc, #204]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001afe:	f002 fcef 	bl	80044e0 <HAL_TIM_Base_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001b08:	f7ff fe36 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b16:	4619      	mov	r1, r3
 8001b18:	482c      	ldr	r0, [pc, #176]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b1a:	f002 fed9 	bl	80048d0 <HAL_TIM_ConfigClockSource>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001b24:	f7ff fe28 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b28:	4828      	ldr	r0, [pc, #160]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b2a:	f002 fd04 	bl	8004536 <HAL_TIM_PWM_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b34:	f7ff fe20 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b44:	4619      	mov	r1, r3
 8001b46:	4821      	ldr	r0, [pc, #132]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b48:	f003 fb8e 	bl	8005268 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001b52:	f7ff fe11 	bl	8001778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b56:	2360      	movs	r3, #96	; 0x60
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b62:	2300      	movs	r3, #0
 8001b64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	2200      	movs	r2, #0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4814      	ldr	r0, [pc, #80]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b7c:	f002 fde2 	bl	8004744 <HAL_TIM_PWM_ConfigChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001b86:	f7ff fdf7 	bl	8001778 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001bae:	f003 fbd7 	bl	8005360 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001bb8:	f7ff fdde 	bl	8001778 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001bbe:	f000 fa4d 	bl	800205c <HAL_TIM_MspPostInit>

}
 8001bc2:	bf00      	nop
 8001bc4:	3758      	adds	r7, #88	; 0x58
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200006d8 	.word	0x200006d8
 8001bd0:	40010000 	.word	0x40010000

08001bd4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0318 	add.w	r3, r7, #24
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001bfe:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001c00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001c08:	22b3      	movs	r2, #179	; 0xb3
 8001c0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c26:	4827      	ldr	r0, [pc, #156]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001c28:	f002 fc5a 	bl	80044e0 <HAL_TIM_Base_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001c32:	f7ff fda1 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c3c:	f107 0318 	add.w	r3, r7, #24
 8001c40:	4619      	mov	r1, r3
 8001c42:	4820      	ldr	r0, [pc, #128]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001c44:	f002 fe44 	bl	80048d0 <HAL_TIM_ConfigClockSource>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c4e:	f7ff fd93 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c52:	481c      	ldr	r0, [pc, #112]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001c54:	f002 fca4 	bl	80045a0 <HAL_TIM_IC_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c5e:	f7ff fd8b 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c6a:	f107 0310 	add.w	r3, r7, #16
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4814      	ldr	r0, [pc, #80]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001c72:	f003 faf9 	bl	8005268 <HAL_TIMEx_MasterConfigSynchronization>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001c7c:	f7ff fd7c 	bl	8001778 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c80:	2300      	movs	r3, #0
 8001c82:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c84:	2301      	movs	r3, #1
 8001c86:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c90:	463b      	mov	r3, r7
 8001c92:	2208      	movs	r2, #8
 8001c94:	4619      	mov	r1, r3
 8001c96:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001c98:	f002 fcb7 	bl	800460a <HAL_TIM_IC_ConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001ca2:	f7ff fd69 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	220c      	movs	r2, #12
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_TIM2_Init+0xf0>)
 8001cae:	f002 fcac 	bl	800460a <HAL_TIM_IC_ConfigChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001cb8:	f7ff fd5e 	bl	8001778 <Error_Handler>
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000718 	.word	0x20000718

08001cc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08e      	sub	sp, #56	; 0x38
 8001ccc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	615a      	str	r2, [r3, #20]
 8001cf6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001cf8:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001cfa:	4a33      	ldr	r2, [pc, #204]	; (8001dc8 <MX_TIM3_Init+0x100>)
 8001cfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001d00:	2259      	movs	r2, #89	; 0x59
 8001d02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001d0c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001d10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d12:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d18:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d1e:	4829      	ldr	r0, [pc, #164]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001d20:	f002 fbde 	bl	80044e0 <HAL_TIM_Base_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d2a:	f7ff fd25 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4822      	ldr	r0, [pc, #136]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001d3c:	f002 fdc8 	bl	80048d0 <HAL_TIM_ConfigClockSource>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d46:	f7ff fd17 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d4a:	481e      	ldr	r0, [pc, #120]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001d4c:	f002 fbf3 	bl	8004536 <HAL_TIM_PWM_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d56:	f7ff fd0f 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d62:	f107 0320 	add.w	r3, r7, #32
 8001d66:	4619      	mov	r1, r3
 8001d68:	4816      	ldr	r0, [pc, #88]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001d6a:	f003 fa7d 	bl	8005268 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d74:	f7ff fd00 	bl	8001778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d78:	2360      	movs	r3, #96	; 0x60
 8001d7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001d90:	f002 fcd8 	bl	8004744 <HAL_TIM_PWM_ConfigChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d9a:	f7ff fced 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2204      	movs	r2, #4
 8001da2:	4619      	mov	r1, r3
 8001da4:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001da6:	f002 fccd 	bl	8004744 <HAL_TIM_PWM_ConfigChannel>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001db0:	f7ff fce2 	bl	8001778 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <MX_TIM3_Init+0xfc>)
 8001db6:	f000 f951 	bl	800205c <HAL_TIM_MspPostInit>

}
 8001dba:	bf00      	nop
 8001dbc:	3738      	adds	r7, #56	; 0x38
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000698 	.word	0x20000698
 8001dc8:	40000400 	.word	0x40000400

08001dcc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b096      	sub	sp, #88	; 0x58
 8001dd0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]
 8001dfa:	615a      	str	r2, [r3, #20]
 8001dfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2220      	movs	r2, #32
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 feeb 	bl	8005be0 <memset>

  htim8.Instance = TIM8;
 8001e0a:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001e0c:	4a3d      	ldr	r2, [pc, #244]	; (8001f04 <MX_TIM8_Init+0x138>)
 8001e0e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 8001e10:	4b3b      	ldr	r3, [pc, #236]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001e12:	2259      	movs	r2, #89	; 0x59
 8001e14:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8001e1c:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001e1e:	2263      	movs	r2, #99	; 0x63
 8001e20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e22:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e2e:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e34:	4832      	ldr	r0, [pc, #200]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001e36:	f002 fb53 	bl	80044e0 <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001e40:	f7ff fc9a 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e4e:	4619      	mov	r1, r3
 8001e50:	482b      	ldr	r0, [pc, #172]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001e52:	f002 fd3d 	bl	80048d0 <HAL_TIM_ConfigClockSource>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001e5c:	f7ff fc8c 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e60:	4827      	ldr	r0, [pc, #156]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001e62:	f002 fb68 	bl	8004536 <HAL_TIM_PWM_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001e6c:	f7ff fc84 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4820      	ldr	r0, [pc, #128]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001e80:	f003 f9f2 	bl	8005268 <HAL_TIMEx_MasterConfigSynchronization>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001e8a:	f7ff fc75 	bl	8001778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e8e:	2360      	movs	r3, #96	; 0x60
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eaa:	220c      	movs	r2, #12
 8001eac:	4619      	mov	r1, r3
 8001eae:	4814      	ldr	r0, [pc, #80]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001eb0:	f002 fc48 	bl	8004744 <HAL_TIM_PWM_ConfigChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8001eba:	f7ff fc5d 	bl	8001778 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4807      	ldr	r0, [pc, #28]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001ee2:	f003 fa3d 	bl	8005360 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8001eec:	f7ff fc44 	bl	8001778 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <MX_TIM8_Init+0x134>)
 8001ef2:	f000 f8b3 	bl	800205c <HAL_TIM_MspPostInit>

}
 8001ef6:	bf00      	nop
 8001ef8:	3758      	adds	r7, #88	; 0x58
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000658 	.word	0x20000658
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	; 0x38
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a47      	ldr	r2, [pc, #284]	; (8002044 <HAL_TIM_Base_MspInit+0x13c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d12d      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
 8001f2e:	4b46      	ldr	r3, [pc, #280]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	4a45      	ldr	r2, [pc, #276]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3a:	4b43      	ldr	r3, [pc, #268]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	623b      	str	r3, [r7, #32]
 8001f44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	4b3f      	ldr	r3, [pc, #252]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a3e      	ldr	r2, [pc, #248]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001f50:	f043 0310 	orr.w	r3, r3, #16
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8001f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4833      	ldr	r0, [pc, #204]	; (800204c <HAL_TIM_Base_MspInit+0x144>)
 8001f80:	f000 fe4e 	bl	8002c20 <HAL_GPIO_Init>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f84:	e059      	b.n	800203a <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8e:	d12d      	bne.n	8001fec <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	4b2c      	ldr	r3, [pc, #176]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	4a2b      	ldr	r2, [pc, #172]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa0:	4b29      	ldr	r3, [pc, #164]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	4a24      	ldr	r2, [pc, #144]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbc:	4b22      	ldr	r3, [pc, #136]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 8001fc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	481a      	ldr	r0, [pc, #104]	; (8002050 <HAL_TIM_Base_MspInit+0x148>)
 8001fe6:	f000 fe1b 	bl	8002c20 <HAL_GPIO_Init>
}
 8001fea:	e026      	b.n	800203a <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM3)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_TIM_Base_MspInit+0x14c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
}
 8002012:	e012      	b.n	800203a <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM8)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_TIM_Base_MspInit+0x150>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10d      	bne.n	800203a <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_TIM_Base_MspInit+0x140>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
}
 800203a:	bf00      	nop
 800203c:	3738      	adds	r7, #56	; 0x38
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40010000 	.word	0x40010000
 8002048:	40023800 	.word	0x40023800
 800204c:	40021000 	.word	0x40021000
 8002050:	40020400 	.word	0x40020400
 8002054:	40000400 	.word	0x40000400
 8002058:	40010400 	.word	0x40010400

0800205c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a37      	ldr	r2, [pc, #220]	; (8002158 <HAL_TIM_MspPostInit+0xfc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d11f      	bne.n	80020be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_TIM_MspPostInit+0x100>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a35      	ldr	r2, [pc, #212]	; (800215c <HAL_TIM_MspPostInit+0x100>)
 8002088:	f043 0310 	orr.w	r3, r3, #16
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <HAL_TIM_MspPostInit+0x100>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH1_Pin;
 800209a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH1_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	482a      	ldr	r0, [pc, #168]	; (8002160 <HAL_TIM_MspPostInit+0x104>)
 80020b8:	f000 fdb2 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80020bc:	e047      	b.n	800214e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_TIM_MspPostInit+0x108>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d11e      	bne.n	8002106 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_TIM_MspPostInit+0x100>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <HAL_TIM_MspPostInit+0x100>)
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	6313      	str	r3, [r2, #48]	; 0x30
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_TIM_MspPostInit+0x100>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 80020e4:	23c0      	movs	r3, #192	; 0xc0
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f4:	2302      	movs	r3, #2
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	481a      	ldr	r0, [pc, #104]	; (8002168 <HAL_TIM_MspPostInit+0x10c>)
 8002100:	f000 fd8e 	bl	8002c20 <HAL_GPIO_Init>
}
 8002104:	e023      	b.n	800214e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a18      	ldr	r2, [pc, #96]	; (800216c <HAL_TIM_MspPostInit+0x110>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d11e      	bne.n	800214e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_TIM_MspPostInit+0x100>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_TIM_MspPostInit+0x100>)
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_TIM_MspPostInit+0x100>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 800212c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800213e:	2303      	movs	r3, #3
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	4807      	ldr	r0, [pc, #28]	; (8002168 <HAL_TIM_MspPostInit+0x10c>)
 800214a:	f000 fd69 	bl	8002c20 <HAL_GPIO_Init>
}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40010000 	.word	0x40010000
 800215c:	40023800 	.word	0x40023800
 8002160:	40021000 	.word	0x40021000
 8002164:	40000400 	.word	0x40000400
 8002168:	40020800 	.word	0x40020800
 800216c:	40010400 	.word	0x40010400

08002170 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_USART3_UART_Init+0x4c>)
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <MX_USART3_UART_Init+0x50>)
 8002178:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <MX_USART3_UART_Init+0x4c>)
 800217c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002180:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <MX_USART3_UART_Init+0x4c>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <MX_USART3_UART_Init+0x4c>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <MX_USART3_UART_Init+0x4c>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_USART3_UART_Init+0x4c>)
 8002196:	220c      	movs	r2, #12
 8002198:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <MX_USART3_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_USART3_UART_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_USART3_UART_Init+0x4c>)
 80021a8:	f003 f92c 	bl	8005404 <HAL_UART_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021b2:	f7ff fae1 	bl	8001778 <Error_Handler>
  }

}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200007b8 	.word	0x200007b8
 80021c0:	40004800 	.word	0x40004800

080021c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_UART_MspInit+0xe4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d15b      	bne.n	800229e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b30      	ldr	r3, [pc, #192]	; (80022ac <HAL_UART_MspInit+0xe8>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <HAL_UART_MspInit+0xe8>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_UART_MspInit+0xe8>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b29      	ldr	r3, [pc, #164]	; (80022ac <HAL_UART_MspInit+0xe8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a28      	ldr	r2, [pc, #160]	; (80022ac <HAL_UART_MspInit+0xe8>)
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <HAL_UART_MspInit+0xe8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 800221e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002230:	2307      	movs	r3, #7
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	481d      	ldr	r0, [pc, #116]	; (80022b0 <HAL_UART_MspInit+0xec>)
 800223c:	f000 fcf0 	bl	8002c20 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002240:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 8002242:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <HAL_UART_MspInit+0xf4>)
 8002244:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 8002248:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800224c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800224e:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 800225c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002260:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 8002264:	2200      	movs	r2, #0
 8002266:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 8002270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002274:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 8002278:	2200      	movs	r2, #0
 800227a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 8002284:	f000 f9e4 	bl	8002650 <HAL_DMA_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800228e:	f7ff fa73 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 8002296:	635a      	str	r2, [r3, #52]	; 0x34
 8002298:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <HAL_UART_MspInit+0xf0>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40004800 	.word	0x40004800
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	20000758 	.word	0x20000758
 80022b8:	40026028 	.word	0x40026028

080022bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80022bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022c2:	e003      	b.n	80022cc <LoopCopyDataInit>

080022c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022ca:	3104      	adds	r1, #4

080022cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022cc:	480b      	ldr	r0, [pc, #44]	; (80022fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022d4:	d3f6      	bcc.n	80022c4 <CopyDataInit>
  ldr  r2, =_sbss
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022d8:	e002      	b.n	80022e0 <LoopFillZerobss>

080022da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022dc:	f842 3b04 	str.w	r3, [r2], #4

080022e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022e4:	d3f9      	bcc.n	80022da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022e6:	f7ff fbbf 	bl	8001a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ea:	f003 fc55 	bl	8005b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ee:	f7fe ff7d 	bl	80011ec <main>
  bx  lr    
 80022f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80022f8:	08005c38 	.word	0x08005c38
  ldr  r0, =_sdata
 80022fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002300:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8002304:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8002308:	200007fc 	.word	0x200007fc

0800230c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC_IRQHandler>
	...

08002310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <HAL_Init+0x40>)
 800231a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_Init+0x40>)
 8002326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_Init+0x40>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a07      	ldr	r2, [pc, #28]	; (8002350 <HAL_Init+0x40>)
 8002332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002338:	2003      	movs	r0, #3
 800233a:	f000 f92b 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233e:	2000      	movs	r0, #0
 8002340:	f000 f808 	bl	8002354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002344:	f7ff fb28 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023c00 	.word	0x40023c00

08002354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_InitTick+0x54>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_InitTick+0x58>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236a:	fbb3 f3f1 	udiv	r3, r3, r1
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f943 	bl	80025fe <HAL_SYSTICK_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e00e      	b.n	80023a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b0f      	cmp	r3, #15
 8002386:	d80a      	bhi.n	800239e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002388:	2200      	movs	r2, #0
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002390:	f000 f90b 	bl	80025aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <HAL_InitTick+0x5c>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000088 	.word	0x20000088
 80023ac:	20000090 	.word	0x20000090
 80023b0:	2000008c 	.word	0x2000008c

080023b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_IncTick+0x20>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_IncTick+0x24>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <HAL_IncTick+0x24>)
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000090 	.word	0x20000090
 80023d8:	200007f8 	.word	0x200007f8

080023dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return uwTick;
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <HAL_GetTick+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	200007f8 	.word	0x200007f8

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <__NVIC_EnableIRQ+0x38>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002560:	d301      	bcc.n	8002566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <SysTick_Config+0x40>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256e:	210f      	movs	r1, #15
 8002570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002574:	f7ff ff8e 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <SysTick_Config+0x40>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <SysTick_Config+0x40>)
 8002580:	2207      	movs	r2, #7
 8002582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff29 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff3e 	bl	800243c <__NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff8e 	bl	80024e8 <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff5d 	bl	8002494 <__NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff31 	bl	8002458 <__NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa2 	bl	8002550 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b04      	cmp	r3, #4
 8002624:	d106      	bne.n	8002634 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a08      	ldr	r2, [pc, #32]	; (800264c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002632:	e005      	b.n	8002640 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a04      	ldr	r2, [pc, #16]	; (800264c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800263a:	f023 0304 	bic.w	r3, r3, #4
 800263e:	6013      	str	r3, [r2, #0]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000e010 	.word	0xe000e010

08002650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff febe 	bl	80023dc <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e099      	b.n	80027a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268c:	e00f      	b.n	80026ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268e:	f7ff fea5 	bl	80023dc <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b05      	cmp	r3, #5
 800269a:	d908      	bls.n	80026ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2203      	movs	r2, #3
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e078      	b.n	80027a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e8      	bne.n	800268e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_DMA_Init+0x158>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	2b04      	cmp	r3, #4
 8002706:	d107      	bne.n	8002718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	4313      	orrs	r3, r2
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0307 	bic.w	r3, r3, #7
 800272e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b04      	cmp	r3, #4
 8002740:	d117      	bne.n	8002772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f9e9 	bl	8002b2c <DMA_CheckFifoParam>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2240      	movs	r2, #64	; 0x40
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800276e:	2301      	movs	r3, #1
 8002770:	e016      	b.n	80027a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f9a0 	bl	8002ac0 <DMA_CalcBaseAndBitshift>
 8002780:	4603      	mov	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	223f      	movs	r2, #63	; 0x3f
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	f010803f 	.word	0xf010803f

080027ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027b8:	4b92      	ldr	r3, [pc, #584]	; (8002a04 <HAL_DMA_IRQHandler+0x258>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a92      	ldr	r2, [pc, #584]	; (8002a08 <HAL_DMA_IRQHandler+0x25c>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0a9b      	lsrs	r3, r3, #10
 80027c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2208      	movs	r2, #8
 80027d8:	409a      	lsls	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01a      	beq.n	8002818 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0204 	bic.w	r2, r2, #4
 80027fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	2208      	movs	r2, #8
 8002806:	409a      	lsls	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2201      	movs	r2, #1
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2201      	movs	r2, #1
 800283c:	409a      	lsls	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f043 0202 	orr.w	r2, r3, #2
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	2204      	movs	r2, #4
 8002854:	409a      	lsls	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d012      	beq.n	8002884 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	2204      	movs	r2, #4
 8002872:	409a      	lsls	r2, r3
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f043 0204 	orr.w	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	2210      	movs	r2, #16
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d043      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d03c      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	2210      	movs	r2, #16
 80028a8:	409a      	lsls	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d018      	beq.n	80028ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d108      	bne.n	80028dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d024      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
 80028da:	e01f      	b.n	800291c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01b      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e016      	b.n	800291c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d107      	bne.n	800290c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0208 	bic.w	r2, r2, #8
 800290a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	2220      	movs	r2, #32
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 808e 	beq.w	8002a4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8086 	beq.w	8002a4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	2220      	movs	r2, #32
 8002944:	409a      	lsls	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b05      	cmp	r3, #5
 8002954:	d136      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0216 	bic.w	r2, r2, #22
 8002964:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002974:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <HAL_DMA_IRQHandler+0x1da>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0208 	bic.w	r2, r2, #8
 8002994:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	223f      	movs	r2, #63	; 0x3f
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d07d      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
        }
        return;
 80029c2:	e078      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01c      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d108      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d030      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
 80029f0:	e02b      	b.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d027      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
 8002a02:	e022      	b.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
 8002a04:	20000088 	.word	0x20000088
 8002a08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0210 	bic.w	r2, r2, #16
 8002a28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d032      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d022      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2205      	movs	r2, #5
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d307      	bcc.n	8002a92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f2      	bne.n	8002a76 <HAL_DMA_IRQHandler+0x2ca>
 8002a90:	e000      	b.n	8002a94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
 8002ab4:	e000      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ab6:	bf00      	nop
    }
  }
}
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop

08002ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	3b10      	subs	r3, #16
 8002ad0:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <DMA_CalcBaseAndBitshift+0x64>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ada:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <DMA_CalcBaseAndBitshift+0x68>)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d909      	bls.n	8002b02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002af6:	f023 0303 	bic.w	r3, r3, #3
 8002afa:	1d1a      	adds	r2, r3, #4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	659a      	str	r2, [r3, #88]	; 0x58
 8002b00:	e007      	b.n	8002b12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	aaaaaaab 	.word	0xaaaaaaab
 8002b28:	08005c20 	.word	0x08005c20

08002b2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11f      	bne.n	8002b86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d855      	bhi.n	8002bf8 <DMA_CheckFifoParam+0xcc>
 8002b4c:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <DMA_CheckFifoParam+0x28>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002b77 	.word	0x08002b77
 8002b5c:	08002b65 	.word	0x08002b65
 8002b60:	08002bf9 	.word	0x08002bf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d045      	beq.n	8002bfc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b74:	e042      	b.n	8002bfc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b7e:	d13f      	bne.n	8002c00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b84:	e03c      	b.n	8002c00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8e:	d121      	bne.n	8002bd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d836      	bhi.n	8002c04 <DMA_CheckFifoParam+0xd8>
 8002b96:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <DMA_CheckFifoParam+0x70>)
 8002b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9c:	08002bad 	.word	0x08002bad
 8002ba0:	08002bb3 	.word	0x08002bb3
 8002ba4:	08002bad 	.word	0x08002bad
 8002ba8:	08002bc5 	.word	0x08002bc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb0:	e02f      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d024      	beq.n	8002c08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc2:	e021      	b.n	8002c08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bcc:	d11e      	bne.n	8002c0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bd2:	e01b      	b.n	8002c0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d902      	bls.n	8002be0 <DMA_CheckFifoParam+0xb4>
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d003      	beq.n	8002be6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bde:	e018      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      break;
 8002be4:	e015      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00e      	beq.n	8002c10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf6:	e00b      	b.n	8002c10 <DMA_CheckFifoParam+0xe4>
      break;
 8002bf8:	bf00      	nop
 8002bfa:	e00a      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;
 8002bfc:	bf00      	nop
 8002bfe:	e008      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;
 8002c00:	bf00      	nop
 8002c02:	e006      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;
 8002c04:	bf00      	nop
 8002c06:	e004      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;
 8002c08:	bf00      	nop
 8002c0a:	e002      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;   
 8002c0c:	bf00      	nop
 8002c0e:	e000      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;
 8002c10:	bf00      	nop
    }
  } 
  
  return status; 
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e177      	b.n	8002f2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 8166 	bne.w	8002f26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d00b      	beq.n	8002c7a <HAL_GPIO_Init+0x5a>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c6e:	2b11      	cmp	r3, #17
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b12      	cmp	r3, #18
 8002c78:	d130      	bne.n	8002cdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 0201 	and.w	r2, r3, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0xfc>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b12      	cmp	r3, #18
 8002d1a:	d123      	bne.n	8002d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	69b9      	ldr	r1, [r7, #24]
 8002d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80c0 	beq.w	8002f26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <HAL_GPIO_Init+0x320>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	4a64      	ldr	r2, [pc, #400]	; (8002f40 <HAL_GPIO_Init+0x320>)
 8002db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db4:	6453      	str	r3, [r2, #68]	; 0x44
 8002db6:	4b62      	ldr	r3, [pc, #392]	; (8002f40 <HAL_GPIO_Init+0x320>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc2:	4a60      	ldr	r2, [pc, #384]	; (8002f44 <HAL_GPIO_Init+0x324>)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	220f      	movs	r2, #15
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_GPIO_Init+0x328>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d037      	beq.n	8002e5e <HAL_GPIO_Init+0x23e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a56      	ldr	r2, [pc, #344]	; (8002f4c <HAL_GPIO_Init+0x32c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d031      	beq.n	8002e5a <HAL_GPIO_Init+0x23a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a55      	ldr	r2, [pc, #340]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d02b      	beq.n	8002e56 <HAL_GPIO_Init+0x236>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a54      	ldr	r2, [pc, #336]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d025      	beq.n	8002e52 <HAL_GPIO_Init+0x232>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a53      	ldr	r2, [pc, #332]	; (8002f58 <HAL_GPIO_Init+0x338>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01f      	beq.n	8002e4e <HAL_GPIO_Init+0x22e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_GPIO_Init+0x33c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d019      	beq.n	8002e4a <HAL_GPIO_Init+0x22a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a51      	ldr	r2, [pc, #324]	; (8002f60 <HAL_GPIO_Init+0x340>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0x226>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a50      	ldr	r2, [pc, #320]	; (8002f64 <HAL_GPIO_Init+0x344>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00d      	beq.n	8002e42 <HAL_GPIO_Init+0x222>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4f      	ldr	r2, [pc, #316]	; (8002f68 <HAL_GPIO_Init+0x348>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <HAL_GPIO_Init+0x21e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4e      	ldr	r2, [pc, #312]	; (8002f6c <HAL_GPIO_Init+0x34c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_GPIO_Init+0x21a>
 8002e36:	2309      	movs	r3, #9
 8002e38:	e012      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e3a:	230a      	movs	r3, #10
 8002e3c:	e010      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e3e:	2308      	movs	r3, #8
 8002e40:	e00e      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e42:	2307      	movs	r3, #7
 8002e44:	e00c      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e46:	2306      	movs	r3, #6
 8002e48:	e00a      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e4a:	2305      	movs	r3, #5
 8002e4c:	e008      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e4e:	2304      	movs	r3, #4
 8002e50:	e006      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e52:	2303      	movs	r3, #3
 8002e54:	e004      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e002      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_GPIO_Init+0x240>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	f002 0203 	and.w	r2, r2, #3
 8002e66:	0092      	lsls	r2, r2, #2
 8002e68:	4093      	lsls	r3, r2
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e70:	4934      	ldr	r1, [pc, #208]	; (8002f44 <HAL_GPIO_Init+0x324>)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	3302      	adds	r3, #2
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7e:	4b3c      	ldr	r3, [pc, #240]	; (8002f70 <HAL_GPIO_Init+0x350>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea2:	4a33      	ldr	r2, [pc, #204]	; (8002f70 <HAL_GPIO_Init+0x350>)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ea8:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <HAL_GPIO_Init+0x350>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ecc:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_GPIO_Init+0x350>)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ed2:	4b27      	ldr	r3, [pc, #156]	; (8002f70 <HAL_GPIO_Init+0x350>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ef6:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <HAL_GPIO_Init+0x350>)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002efc:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <HAL_GPIO_Init+0x350>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f20:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <HAL_GPIO_Init+0x350>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b0f      	cmp	r3, #15
 8002f30:	f67f ae84 	bls.w	8002c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f34:	bf00      	nop
 8002f36:	3724      	adds	r7, #36	; 0x24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40013800 	.word	0x40013800
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40021400 	.word	0x40021400
 8002f60:	40021800 	.word	0x40021800
 8002f64:	40021c00 	.word	0x40021c00
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40022400 	.word	0x40022400
 8002f70:	40013c00 	.word	0x40013c00

08002f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
 8002f80:	4613      	mov	r3, r2
 8002f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f84:	787b      	ldrb	r3, [r7, #1]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f90:	e003      	b.n	8002f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	041a      	lsls	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	619a      	str	r2, [r3, #24]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d006      	beq.n	8002fcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fbe:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe f9f6 	bl	80013b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40013c00 	.word	0x40013c00

08002fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e11f      	b.n	800322a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fe f8ac 	bl	800115c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2224      	movs	r2, #36	; 0x24
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800303a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800303c:	f000 fe08 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 8003040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4a7b      	ldr	r2, [pc, #492]	; (8003234 <HAL_I2C_Init+0x25c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d807      	bhi.n	800305c <HAL_I2C_Init+0x84>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a7a      	ldr	r2, [pc, #488]	; (8003238 <HAL_I2C_Init+0x260>)
 8003050:	4293      	cmp	r3, r2
 8003052:	bf94      	ite	ls
 8003054:	2301      	movls	r3, #1
 8003056:	2300      	movhi	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e006      	b.n	800306a <HAL_I2C_Init+0x92>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a77      	ldr	r2, [pc, #476]	; (800323c <HAL_I2C_Init+0x264>)
 8003060:	4293      	cmp	r3, r2
 8003062:	bf94      	ite	ls
 8003064:	2301      	movls	r3, #1
 8003066:	2300      	movhi	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0db      	b.n	800322a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4a72      	ldr	r2, [pc, #456]	; (8003240 <HAL_I2C_Init+0x268>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0c9b      	lsrs	r3, r3, #18
 800307c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a64      	ldr	r2, [pc, #400]	; (8003234 <HAL_I2C_Init+0x25c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d802      	bhi.n	80030ac <HAL_I2C_Init+0xd4>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	3301      	adds	r3, #1
 80030aa:	e009      	b.n	80030c0 <HAL_I2C_Init+0xe8>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	4a63      	ldr	r2, [pc, #396]	; (8003244 <HAL_I2C_Init+0x26c>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	3301      	adds	r3, #1
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4956      	ldr	r1, [pc, #344]	; (8003234 <HAL_I2C_Init+0x25c>)
 80030dc:	428b      	cmp	r3, r1
 80030de:	d80d      	bhi.n	80030fc <HAL_I2C_Init+0x124>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e59      	subs	r1, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	bf38      	it	cc
 80030f8:	2304      	movcc	r3, #4
 80030fa:	e04f      	b.n	800319c <HAL_I2C_Init+0x1c4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d111      	bne.n	8003128 <HAL_I2C_Init+0x150>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e012      	b.n	800314e <HAL_I2C_Init+0x176>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	0099      	lsls	r1, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Init+0x17e>
 8003152:	2301      	movs	r3, #1
 8003154:	e022      	b.n	800319c <HAL_I2C_Init+0x1c4>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10e      	bne.n	800317c <HAL_I2C_Init+0x1a4>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e58      	subs	r0, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	440b      	add	r3, r1
 800316c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003170:	3301      	adds	r3, #1
 8003172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317a:	e00f      	b.n	800319c <HAL_I2C_Init+0x1c4>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e58      	subs	r0, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	0099      	lsls	r1, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	6809      	ldr	r1, [r1, #0]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6911      	ldr	r1, [r2, #16]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68d2      	ldr	r2, [r2, #12]
 80031d6:	4311      	orrs	r1, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	430b      	orrs	r3, r1
 80031de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	000186a0 	.word	0x000186a0
 8003238:	001e847f 	.word	0x001e847f
 800323c:	003d08ff 	.word	0x003d08ff
 8003240:	431bde83 	.word	0x431bde83
 8003244:	10624dd3 	.word	0x10624dd3

08003248 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	d129      	bne.n	80032b2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2224      	movs	r2, #36	; 0x24
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0201 	bic.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0210 	bic.w	r2, r2, #16
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e000      	b.n	80032b4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80032b2:	2302      	movs	r3, #2
  }
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d12a      	bne.n	8003330 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2224      	movs	r2, #36	; 0x24
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	f023 030f 	bic.w	r3, r3, #15
 8003300:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	b29a      	uxth	r2, r3
 8003306:	89fb      	ldrh	r3, [r7, #14]
 8003308:	4313      	orrs	r3, r2
 800330a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	89fa      	ldrh	r2, [r7, #14]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003366:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800336c:	f7ff f836 	bl	80023dc <HAL_GetTick>
 8003370:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003372:	e009      	b.n	8003388 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003374:	f7ff f832 	bl	80023dc <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003382:	d901      	bls.n	8003388 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e01f      	b.n	80033c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d1ee      	bne.n	8003374 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800339c:	f7ff f81e 	bl	80023dc <HAL_GetTick>
 80033a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033a2:	e009      	b.n	80033b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033a4:	f7ff f81a 	bl	80023dc <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033b2:	d901      	bls.n	80033b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e007      	b.n	80033c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c4:	d1ee      	bne.n	80033a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40023800 	.word	0x40023800
 80033d4:	420e0040 	.word	0x420e0040
 80033d8:	40007000 	.word	0x40007000
 80033dc:	420e0044 	.word	0x420e0044

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e25b      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d075      	beq.n	80034ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033fe:	4ba3      	ldr	r3, [pc, #652]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b04      	cmp	r3, #4
 8003408:	d00c      	beq.n	8003424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340a:	4ba0      	ldr	r3, [pc, #640]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003412:	2b08      	cmp	r3, #8
 8003414:	d112      	bne.n	800343c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003416:	4b9d      	ldr	r3, [pc, #628]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003422:	d10b      	bne.n	800343c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	4b99      	ldr	r3, [pc, #612]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d05b      	beq.n	80034e8 <HAL_RCC_OscConfig+0x108>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d157      	bne.n	80034e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e236      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003444:	d106      	bne.n	8003454 <HAL_RCC_OscConfig+0x74>
 8003446:	4b91      	ldr	r3, [pc, #580]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a90      	ldr	r2, [pc, #576]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e01d      	b.n	8003490 <HAL_RCC_OscConfig+0xb0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x98>
 800345e:	4b8b      	ldr	r3, [pc, #556]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a8a      	ldr	r2, [pc, #552]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b88      	ldr	r3, [pc, #544]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a87      	ldr	r2, [pc, #540]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e00b      	b.n	8003490 <HAL_RCC_OscConfig+0xb0>
 8003478:	4b84      	ldr	r3, [pc, #528]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a83      	ldr	r2, [pc, #524]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 800347e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b81      	ldr	r3, [pc, #516]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a80      	ldr	r2, [pc, #512]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 800348a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d013      	beq.n	80034c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe ffa0 	bl	80023dc <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fe ff9c 	bl	80023dc <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e1fb      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b76      	ldr	r3, [pc, #472]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0xc0>
 80034be:	e014      	b.n	80034ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe ff8c 	bl	80023dc <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fe ff88 	bl	80023dc <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1e7      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	4b6c      	ldr	r3, [pc, #432]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0xe8>
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d063      	beq.n	80035be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034f6:	4b65      	ldr	r3, [pc, #404]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003502:	4b62      	ldr	r3, [pc, #392]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350a:	2b08      	cmp	r3, #8
 800350c:	d11c      	bne.n	8003548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350e:	4b5f      	ldr	r3, [pc, #380]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d116      	bne.n	8003548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	4b5c      	ldr	r3, [pc, #368]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_RCC_OscConfig+0x152>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d001      	beq.n	8003532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e1bb      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b56      	ldr	r3, [pc, #344]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4952      	ldr	r1, [pc, #328]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003546:	e03a      	b.n	80035be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003550:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <HAL_RCC_OscConfig+0x2b0>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fe ff41 	bl	80023dc <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355e:	f7fe ff3d 	bl	80023dc <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e19c      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	4b46      	ldr	r3, [pc, #280]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357c:	4b43      	ldr	r3, [pc, #268]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4940      	ldr	r1, [pc, #256]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]
 8003590:	e015      	b.n	80035be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003592:	4b3f      	ldr	r3, [pc, #252]	; (8003690 <HAL_RCC_OscConfig+0x2b0>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe ff20 	bl	80023dc <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fe ff1c 	bl	80023dc <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e17b      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	4b36      	ldr	r3, [pc, #216]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d030      	beq.n	800362c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d016      	beq.n	8003600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d2:	4b30      	ldr	r3, [pc, #192]	; (8003694 <HAL_RCC_OscConfig+0x2b4>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe ff00 	bl	80023dc <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e0:	f7fe fefc 	bl	80023dc <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e15b      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	4b26      	ldr	r3, [pc, #152]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x200>
 80035fe:	e015      	b.n	800362c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003600:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_RCC_OscConfig+0x2b4>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003606:	f7fe fee9 	bl	80023dc <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360e:	f7fe fee5 	bl	80023dc <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e144      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a0 	beq.w	800377a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10f      	bne.n	800366a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	4b0f      	ldr	r3, [pc, #60]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	4a0e      	ldr	r2, [pc, #56]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 8003654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003658:	6413      	str	r3, [r2, #64]	; 0x40
 800365a:	4b0c      	ldr	r3, [pc, #48]	; (800368c <HAL_RCC_OscConfig+0x2ac>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_OscConfig+0x2b8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d121      	bne.n	80036ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_RCC_OscConfig+0x2b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a07      	ldr	r2, [pc, #28]	; (8003698 <HAL_RCC_OscConfig+0x2b8>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fe feab 	bl	80023dc <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	e011      	b.n	80036ae <HAL_RCC_OscConfig+0x2ce>
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800
 8003690:	42470000 	.word	0x42470000
 8003694:	42470e80 	.word	0x42470e80
 8003698:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369c:	f7fe fe9e 	bl	80023dc <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0fd      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ae:	4b81      	ldr	r3, [pc, #516]	; (80038b4 <HAL_RCC_OscConfig+0x4d4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d106      	bne.n	80036d0 <HAL_RCC_OscConfig+0x2f0>
 80036c2:	4b7d      	ldr	r3, [pc, #500]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	4a7c      	ldr	r2, [pc, #496]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6713      	str	r3, [r2, #112]	; 0x70
 80036ce:	e01c      	b.n	800370a <HAL_RCC_OscConfig+0x32a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b05      	cmp	r3, #5
 80036d6:	d10c      	bne.n	80036f2 <HAL_RCC_OscConfig+0x312>
 80036d8:	4b77      	ldr	r3, [pc, #476]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	4a76      	ldr	r2, [pc, #472]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 80036de:	f043 0304 	orr.w	r3, r3, #4
 80036e2:	6713      	str	r3, [r2, #112]	; 0x70
 80036e4:	4b74      	ldr	r3, [pc, #464]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	4a73      	ldr	r2, [pc, #460]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6713      	str	r3, [r2, #112]	; 0x70
 80036f0:	e00b      	b.n	800370a <HAL_RCC_OscConfig+0x32a>
 80036f2:	4b71      	ldr	r3, [pc, #452]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	4a70      	ldr	r2, [pc, #448]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
 80036fe:	4b6e      	ldr	r3, [pc, #440]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	4a6d      	ldr	r2, [pc, #436]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d015      	beq.n	800373e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003712:	f7fe fe63 	bl	80023dc <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003718:	e00a      	b.n	8003730 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fe fe5f 	bl	80023dc <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0bc      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	4b61      	ldr	r3, [pc, #388]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ee      	beq.n	800371a <HAL_RCC_OscConfig+0x33a>
 800373c:	e014      	b.n	8003768 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7fe fe4d 	bl	80023dc <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003744:	e00a      	b.n	800375c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fe fe49 	bl	80023dc <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e0a6      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375c:	4b56      	ldr	r3, [pc, #344]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ee      	bne.n	8003746 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d105      	bne.n	800377a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376e:	4b52      	ldr	r3, [pc, #328]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a51      	ldr	r2, [pc, #324]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8092 	beq.w	80038a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003784:	4b4c      	ldr	r3, [pc, #304]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b08      	cmp	r3, #8
 800378e:	d05c      	beq.n	800384a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d141      	bne.n	800381c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003798:	4b48      	ldr	r3, [pc, #288]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379e:	f7fe fe1d 	bl	80023dc <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a6:	f7fe fe19 	bl	80023dc <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e078      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b8:	4b3f      	ldr	r3, [pc, #252]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f0      	bne.n	80037a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	019b      	lsls	r3, r3, #6
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	3b01      	subs	r3, #1
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	061b      	lsls	r3, r3, #24
 80037e8:	4933      	ldr	r1, [pc, #204]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ee:	4b33      	ldr	r3, [pc, #204]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fe fdf2 	bl	80023dc <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fe fdee 	bl	80023dc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e04d      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380e:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x41c>
 800381a:	e045      	b.n	80038a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003822:	f7fe fddb 	bl	80023dc <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382a:	f7fe fdd7 	bl	80023dc <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e036      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383c:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f0      	bne.n	800382a <HAL_RCC_OscConfig+0x44a>
 8003848:	e02e      	b.n	80038a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e029      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003856:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <HAL_RCC_OscConfig+0x4d8>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	429a      	cmp	r2, r3
 8003868:	d11c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d115      	bne.n	80038a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800387e:	4013      	ands	r3, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003884:	4293      	cmp	r3, r2
 8003886:	d10d      	bne.n	80038a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d106      	bne.n	80038a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40007000 	.word	0x40007000
 80038b8:	40023800 	.word	0x40023800
 80038bc:	42470060 	.word	0x42470060

080038c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0cc      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b68      	ldr	r3, [pc, #416]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d90c      	bls.n	80038fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b65      	ldr	r3, [pc, #404]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b63      	ldr	r3, [pc, #396]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0b8      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003914:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a58      	ldr	r2, [pc, #352]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800391e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800392c:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a52      	ldr	r2, [pc, #328]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	494d      	ldr	r1, [pc, #308]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d044      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d119      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d003      	beq.n	800397e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397a:	2b03      	cmp	r3, #3
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e06f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e067      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4934      	ldr	r1, [pc, #208]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b0:	f7fe fd14 	bl	80023dc <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b8:	f7fe fd10 	bl	80023dc <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e04f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1eb      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d20c      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e032      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4916      	ldr	r1, [pc, #88]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	490e      	ldr	r1, [pc, #56]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a46:	f000 f821 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8003a4a:	4601      	mov	r1, r0
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	5cd3      	ldrb	r3, [r2, r3]
 8003a5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fc74 	bl	8002354 <HAL_InitTick>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023c00 	.word	0x40023c00
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	08005c08 	.word	0x08005c08
 8003a84:	20000088 	.word	0x20000088
 8003a88:	2000008c 	.word	0x2000008c

08003a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa2:	4b63      	ldr	r3, [pc, #396]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d007      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x32>
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d008      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x38>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 80b4 	bne.w	8003c20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ab8:	4b5e      	ldr	r3, [pc, #376]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003aba:	60bb      	str	r3, [r7, #8]
       break;
 8003abc:	e0b3      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003abe:	4b5d      	ldr	r3, [pc, #372]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ac0:	60bb      	str	r3, [r7, #8]
      break;
 8003ac2:	e0b0      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac4:	4b5a      	ldr	r3, [pc, #360]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003acc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ace:	4b58      	ldr	r3, [pc, #352]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d04a      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ada:	4b55      	ldr	r3, [pc, #340]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	099b      	lsrs	r3, r3, #6
 8003ae0:	f04f 0400 	mov.w	r4, #0
 8003ae4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	ea03 0501 	and.w	r5, r3, r1
 8003af0:	ea04 0602 	and.w	r6, r4, r2
 8003af4:	4629      	mov	r1, r5
 8003af6:	4632      	mov	r2, r6
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	f04f 0400 	mov.w	r4, #0
 8003b00:	0154      	lsls	r4, r2, #5
 8003b02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b06:	014b      	lsls	r3, r1, #5
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	1b49      	subs	r1, r1, r5
 8003b0e:	eb62 0206 	sbc.w	r2, r2, r6
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	f04f 0400 	mov.w	r4, #0
 8003b1a:	0194      	lsls	r4, r2, #6
 8003b1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b20:	018b      	lsls	r3, r1, #6
 8003b22:	1a5b      	subs	r3, r3, r1
 8003b24:	eb64 0402 	sbc.w	r4, r4, r2
 8003b28:	f04f 0100 	mov.w	r1, #0
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	00e2      	lsls	r2, r4, #3
 8003b32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b36:	00d9      	lsls	r1, r3, #3
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4614      	mov	r4, r2
 8003b3c:	195b      	adds	r3, r3, r5
 8003b3e:	eb44 0406 	adc.w	r4, r4, r6
 8003b42:	f04f 0100 	mov.w	r1, #0
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	02a2      	lsls	r2, r4, #10
 8003b4c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b50:	0299      	lsls	r1, r3, #10
 8003b52:	460b      	mov	r3, r1
 8003b54:	4614      	mov	r4, r2
 8003b56:	4618      	mov	r0, r3
 8003b58:	4621      	mov	r1, r4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f04f 0400 	mov.w	r4, #0
 8003b60:	461a      	mov	r2, r3
 8003b62:	4623      	mov	r3, r4
 8003b64:	f7fc ffc2 	bl	8000aec <__aeabi_uldivmod>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	460c      	mov	r4, r1
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	e049      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b70:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	f04f 0400 	mov.w	r4, #0
 8003b7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	ea03 0501 	and.w	r5, r3, r1
 8003b86:	ea04 0602 	and.w	r6, r4, r2
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4632      	mov	r2, r6
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	f04f 0400 	mov.w	r4, #0
 8003b96:	0154      	lsls	r4, r2, #5
 8003b98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b9c:	014b      	lsls	r3, r1, #5
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4622      	mov	r2, r4
 8003ba2:	1b49      	subs	r1, r1, r5
 8003ba4:	eb62 0206 	sbc.w	r2, r2, r6
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	f04f 0400 	mov.w	r4, #0
 8003bb0:	0194      	lsls	r4, r2, #6
 8003bb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bb6:	018b      	lsls	r3, r1, #6
 8003bb8:	1a5b      	subs	r3, r3, r1
 8003bba:	eb64 0402 	sbc.w	r4, r4, r2
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	00e2      	lsls	r2, r4, #3
 8003bc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bcc:	00d9      	lsls	r1, r3, #3
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	195b      	adds	r3, r3, r5
 8003bd4:	eb44 0406 	adc.w	r4, r4, r6
 8003bd8:	f04f 0100 	mov.w	r1, #0
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	02a2      	lsls	r2, r4, #10
 8003be2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003be6:	0299      	lsls	r1, r3, #10
 8003be8:	460b      	mov	r3, r1
 8003bea:	4614      	mov	r4, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	4621      	mov	r1, r4
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f04f 0400 	mov.w	r4, #0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	f7fc ff77 	bl	8000aec <__aeabi_uldivmod>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	60bb      	str	r3, [r7, #8]
      break;
 8003c1e:	e002      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c22:	60bb      	str	r3, [r7, #8]
      break;
 8003c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c26:	68bb      	ldr	r3, [r7, #8]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c30:	40023800 	.word	0x40023800
 8003c34:	00f42400 	.word	0x00f42400

08003c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000088 	.word	0x20000088

08003c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c54:	f7ff fff0 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c58:	4601      	mov	r1, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4a03      	ldr	r2, [pc, #12]	; (8003c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c66:	5cd3      	ldrb	r3, [r2, r3]
 8003c68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	08005c18 	.word	0x08005c18

08003c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c7c:	f7ff ffdc 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c80:	4601      	mov	r1, r0
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	0b5b      	lsrs	r3, r3, #13
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	4a03      	ldr	r2, [pc, #12]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8e:	5cd3      	ldrb	r3, [r2, r3]
 8003c90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	08005c18 	.word	0x08005c18

08003ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e056      	b.n	8003d60 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7fd fdc7 	bl	8001860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	ea42 0103 	orr.w	r1, r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	0c1b      	lsrs	r3, r3, #16
 8003d30:	f003 0104 	and.w	r1, r3, #4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d84:	d112      	bne.n	8003dac <HAL_SPI_Receive+0x44>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10e      	bne.n	8003dac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2204      	movs	r2, #4
 8003d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d96:	88fa      	ldrh	r2, [r7, #6]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f8e9 	bl	8003f7a <HAL_SPI_TransmitReceive>
 8003da8:	4603      	mov	r3, r0
 8003daa:	e0e2      	b.n	8003f72 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_SPI_Receive+0x52>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e0db      	b.n	8003f72 <HAL_SPI_Receive+0x20a>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dc2:	f7fe fb0b 	bl	80023dc <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d002      	beq.n	8003dda <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dd8:	e0c2      	b.n	8003f60 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_SPI_Receive+0x7e>
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dea:	e0b9      	b.n	8003f60 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2204      	movs	r2, #4
 8003df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	88fa      	ldrh	r2, [r7, #6]
 8003e0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e32:	d107      	bne.n	8003e44 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e42:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b40      	cmp	r3, #64	; 0x40
 8003e50:	d007      	beq.n	8003e62 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d162      	bne.n	8003f30 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e6a:	e02e      	b.n	8003eca <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d115      	bne.n	8003ea6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f103 020c 	add.w	r2, r3, #12
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	7812      	ldrb	r2, [r2, #0]
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ea4:	e011      	b.n	8003eca <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ea6:	f7fe fa99 	bl	80023dc <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d803      	bhi.n	8003ebe <HAL_SPI_Receive+0x156>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ebc:	d102      	bne.n	8003ec4 <HAL_SPI_Receive+0x15c>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ec8:	e04a      	b.n	8003f60 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1cb      	bne.n	8003e6c <HAL_SPI_Receive+0x104>
 8003ed4:	e031      	b.n	8003f3a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d113      	bne.n	8003f0c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	b292      	uxth	r2, r2
 8003ef0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	1c9a      	adds	r2, r3, #2
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f0a:	e011      	b.n	8003f30 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f0c:	f7fe fa66 	bl	80023dc <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d803      	bhi.n	8003f24 <HAL_SPI_Receive+0x1bc>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f22:	d102      	bne.n	8003f2a <HAL_SPI_Receive+0x1c2>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f2e:	e017      	b.n	8003f60 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1cd      	bne.n	8003ed6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	6839      	ldr	r1, [r7, #0]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fa27 	bl	8004392 <SPI_EndRxTransaction>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	75fb      	strb	r3, [r7, #23]
 8003f5c:	e000      	b.n	8003f60 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003f5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b08c      	sub	sp, #48	; 0x30
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_SPI_TransmitReceive+0x26>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e18a      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x33c>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa8:	f7fe fa18 	bl	80023dc <HAL_GetTick>
 8003fac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fbe:	887b      	ldrh	r3, [r7, #2]
 8003fc0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d00f      	beq.n	8003fea <HAL_SPI_TransmitReceive+0x70>
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fd0:	d107      	bne.n	8003fe2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <HAL_SPI_TransmitReceive+0x68>
 8003fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d003      	beq.n	8003fea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fe8:	e15b      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x82>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x82>
 8003ff6:	887b      	ldrh	r3, [r7, #2]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d103      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004002:	e14e      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b04      	cmp	r3, #4
 800400e:	d003      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2205      	movs	r2, #5
 8004014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	887a      	ldrh	r2, [r7, #2]
 8004028:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	887a      	ldrh	r2, [r7, #2]
 800402e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	887a      	ldrh	r2, [r7, #2]
 800403a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	887a      	ldrh	r2, [r7, #2]
 8004040:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d007      	beq.n	800406c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800406a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004074:	d178      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_SPI_TransmitReceive+0x10a>
 800407e:	8b7b      	ldrh	r3, [r7, #26]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d166      	bne.n	8004152 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040a8:	e053      	b.n	8004152 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d11b      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x176>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x176>
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d113      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	881a      	ldrh	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	1c9a      	adds	r2, r3, #2
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d119      	bne.n	8004132 <HAL_SPI_TransmitReceive+0x1b8>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d014      	beq.n	8004132 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	b292      	uxth	r2, r2
 8004114:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	1c9a      	adds	r2, r3, #2
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800412e:	2301      	movs	r3, #1
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004132:	f7fe f953 	bl	80023dc <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800413e:	429a      	cmp	r2, r3
 8004140:	d807      	bhi.n	8004152 <HAL_SPI_TransmitReceive+0x1d8>
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004148:	d003      	beq.n	8004152 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004150:	e0a7      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1a6      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x130>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1a1      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x130>
 8004166:	e07c      	b.n	8004262 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_SPI_TransmitReceive+0x1fc>
 8004170:	8b7b      	ldrh	r3, [r7, #26]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d16b      	bne.n	800424e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	330c      	adds	r3, #12
 8004180:	7812      	ldrb	r2, [r2, #0]
 8004182:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419c:	e057      	b.n	800424e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d11c      	bne.n	80041e6 <HAL_SPI_TransmitReceive+0x26c>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d017      	beq.n	80041e6 <HAL_SPI_TransmitReceive+0x26c>
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d114      	bne.n	80041e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	7812      	ldrb	r2, [r2, #0]
 80041c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d119      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x2ae>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d014      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004224:	2301      	movs	r3, #1
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004228:	f7fe f8d8 	bl	80023dc <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004234:	429a      	cmp	r2, r3
 8004236:	d803      	bhi.n	8004240 <HAL_SPI_TransmitReceive+0x2c6>
 8004238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423e:	d102      	bne.n	8004246 <HAL_SPI_TransmitReceive+0x2cc>
 8004240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004242:	2b00      	cmp	r3, #0
 8004244:	d103      	bne.n	800424e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800424c:	e029      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1a2      	bne.n	800419e <HAL_SPI_TransmitReceive+0x224>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d19d      	bne.n	800419e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f8f8 	bl	800445c <SPI_EndRxTxTransaction>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d006      	beq.n	8004280 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800427e:	e010      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10b      	bne.n	80042a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	e000      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3730      	adds	r7, #48	; 0x30
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	603b      	str	r3, [r7, #0]
 80042ca:	4613      	mov	r3, r2
 80042cc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ce:	e04c      	b.n	800436a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d6:	d048      	beq.n	800436a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80042d8:	f7fe f880 	bl	80023dc <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d902      	bls.n	80042ee <SPI_WaitFlagStateUntilTimeout+0x30>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d13d      	bne.n	800436a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004306:	d111      	bne.n	800432c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004310:	d004      	beq.n	800431c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431a:	d107      	bne.n	800432c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004334:	d10f      	bne.n	8004356 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004354:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e00f      	b.n	800438a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4013      	ands	r3, r2
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	429a      	cmp	r2, r3
 8004386:	d1a3      	bne.n	80042d0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af02      	add	r7, sp, #8
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a6:	d111      	bne.n	80043cc <SPI_EndRxTransaction+0x3a>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b0:	d004      	beq.n	80043bc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d107      	bne.n	80043cc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d4:	d12a      	bne.n	800442c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043de:	d012      	beq.n	8004406 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2200      	movs	r2, #0
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7ff ff67 	bl	80042be <SPI_WaitFlagStateUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d02d      	beq.n	8004452 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e026      	b.n	8004454 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2200      	movs	r2, #0
 800440e:	2101      	movs	r1, #1
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff ff54 	bl	80042be <SPI_WaitFlagStateUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01a      	beq.n	8004452 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	f043 0220 	orr.w	r2, r3, #32
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e013      	b.n	8004454 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	2101      	movs	r1, #1
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff ff41 	bl	80042be <SPI_WaitFlagStateUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f043 0220 	orr.w	r2, r3, #32
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e000      	b.n	8004454 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004468:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <SPI_EndRxTxTransaction+0x7c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <SPI_EndRxTxTransaction+0x80>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0d5b      	lsrs	r3, r3, #21
 8004474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004478:	fb02 f303 	mul.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004486:	d112      	bne.n	80044ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	2180      	movs	r1, #128	; 0x80
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff ff13 	bl	80042be <SPI_WaitFlagStateUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d016      	beq.n	80044cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	f043 0220 	orr.w	r2, r3, #32
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e00f      	b.n	80044ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c4:	2b80      	cmp	r3, #128	; 0x80
 80044c6:	d0f2      	beq.n	80044ae <SPI_EndRxTxTransaction+0x52>
 80044c8:	e000      	b.n	80044cc <SPI_EndRxTxTransaction+0x70>
        break;
 80044ca:	bf00      	nop
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20000088 	.word	0x20000088
 80044dc:	165e9f81 	.word	0x165e9f81

080044e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e01d      	b.n	800452e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fd fcfe 	bl	8001f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	f000 fa8e 	bl	8004a40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e01d      	b.n	8004584 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f815 	bl	800458c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	4619      	mov	r1, r3
 8004574:	4610      	mov	r0, r2
 8004576:	f000 fa63 	bl	8004a40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e01d      	b.n	80045ee <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f815 	bl	80045f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f000 fa2e 	bl	8004a40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004620:	2302      	movs	r3, #2
 8004622:	e08a      	b.n	800473a <HAL_TIM_IC_ConfigChannel+0x130>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11b      	bne.n	8004672 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6819      	ldr	r1, [r3, #0]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f000 fc49 	bl	8004ee0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 020c 	bic.w	r2, r2, #12
 800465c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6999      	ldr	r1, [r3, #24]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	619a      	str	r2, [r3, #24]
 8004670:	e05a      	b.n	8004728 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d11c      	bne.n	80046b2 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f000 fccd 	bl	8005026 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800469a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6999      	ldr	r1, [r3, #24]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	021a      	lsls	r2, r3, #8
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	619a      	str	r2, [r3, #24]
 80046b0:	e03a      	b.n	8004728 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d11b      	bne.n	80046f0 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f000 fd1a 	bl	8005100 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 020c 	bic.w	r2, r2, #12
 80046da:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69d9      	ldr	r1, [r3, #28]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	61da      	str	r2, [r3, #28]
 80046ee:	e01b      	b.n	8004728 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	6819      	ldr	r1, [r3, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f000 fd3a 	bl	8005178 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69da      	ldr	r2, [r3, #28]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004712:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69d9      	ldr	r1, [r3, #28]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	021a      	lsls	r2, r3, #8
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800475a:	2302      	movs	r3, #2
 800475c:	e0b4      	b.n	80048c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b0c      	cmp	r3, #12
 8004772:	f200 809f 	bhi.w	80048b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047b1 	.word	0x080047b1
 8004780:	080048b5 	.word	0x080048b5
 8004784:	080048b5 	.word	0x080048b5
 8004788:	080048b5 	.word	0x080048b5
 800478c:	080047f1 	.word	0x080047f1
 8004790:	080048b5 	.word	0x080048b5
 8004794:	080048b5 	.word	0x080048b5
 8004798:	080048b5 	.word	0x080048b5
 800479c:	08004833 	.word	0x08004833
 80047a0:	080048b5 	.word	0x080048b5
 80047a4:	080048b5 	.word	0x080048b5
 80047a8:	080048b5 	.word	0x080048b5
 80047ac:	08004873 	.word	0x08004873
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f9e2 	bl	8004b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0208 	orr.w	r2, r2, #8
 80047ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0204 	bic.w	r2, r2, #4
 80047da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6999      	ldr	r1, [r3, #24]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	619a      	str	r2, [r3, #24]
      break;
 80047ee:	e062      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fa32 	bl	8004c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800480a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6999      	ldr	r1, [r3, #24]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	021a      	lsls	r2, r3, #8
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	619a      	str	r2, [r3, #24]
      break;
 8004830:	e041      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fa87 	bl	8004d4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69da      	ldr	r2, [r3, #28]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0208 	orr.w	r2, r2, #8
 800484c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0204 	bic.w	r2, r2, #4
 800485c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69d9      	ldr	r1, [r3, #28]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	61da      	str	r2, [r3, #28]
      break;
 8004870:	e021      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fadb 	bl	8004e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69d9      	ldr	r1, [r3, #28]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	021a      	lsls	r2, r3, #8
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	61da      	str	r2, [r3, #28]
      break;
 80048b2:	e000      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80048b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_TIM_ConfigClockSource+0x18>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e0a6      	b.n	8004a36 <HAL_TIM_ConfigClockSource+0x166>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004906:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800490e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d067      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0x120>
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d80b      	bhi.n	800493c <HAL_TIM_ConfigClockSource+0x6c>
 8004924:	2b10      	cmp	r3, #16
 8004926:	d073      	beq.n	8004a10 <HAL_TIM_ConfigClockSource+0x140>
 8004928:	2b10      	cmp	r3, #16
 800492a:	d802      	bhi.n	8004932 <HAL_TIM_ConfigClockSource+0x62>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d06f      	beq.n	8004a10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004930:	e078      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004932:	2b20      	cmp	r3, #32
 8004934:	d06c      	beq.n	8004a10 <HAL_TIM_ConfigClockSource+0x140>
 8004936:	2b30      	cmp	r3, #48	; 0x30
 8004938:	d06a      	beq.n	8004a10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800493a:	e073      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800493c:	2b70      	cmp	r3, #112	; 0x70
 800493e:	d00d      	beq.n	800495c <HAL_TIM_ConfigClockSource+0x8c>
 8004940:	2b70      	cmp	r3, #112	; 0x70
 8004942:	d804      	bhi.n	800494e <HAL_TIM_ConfigClockSource+0x7e>
 8004944:	2b50      	cmp	r3, #80	; 0x50
 8004946:	d033      	beq.n	80049b0 <HAL_TIM_ConfigClockSource+0xe0>
 8004948:	2b60      	cmp	r3, #96	; 0x60
 800494a:	d041      	beq.n	80049d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800494c:	e06a      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800494e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004952:	d066      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x152>
 8004954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004958:	d017      	beq.n	800498a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800495a:	e063      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	6899      	ldr	r1, [r3, #8]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f000 fc5c 	bl	8005228 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800497e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	609a      	str	r2, [r3, #8]
      break;
 8004988:	e04c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6899      	ldr	r1, [r3, #8]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f000 fc45 	bl	8005228 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ac:	609a      	str	r2, [r3, #8]
      break;
 80049ae:	e039      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	461a      	mov	r2, r3
 80049be:	f000 fb03 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2150      	movs	r1, #80	; 0x50
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fc12 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 80049ce:	e029      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	461a      	mov	r2, r3
 80049de:	f000 fb5f 	bl	80050a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2160      	movs	r1, #96	; 0x60
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fc02 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 80049ee:	e019      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	461a      	mov	r2, r3
 80049fe:	f000 fae3 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2140      	movs	r1, #64	; 0x40
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fbf2 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004a0e:	e009      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f000 fbe9 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004a20:	e000      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a40      	ldr	r2, [pc, #256]	; (8004b54 <TIM_Base_SetConfig+0x114>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5e:	d00f      	beq.n	8004a80 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a3d      	ldr	r2, [pc, #244]	; (8004b58 <TIM_Base_SetConfig+0x118>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00b      	beq.n	8004a80 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a3c      	ldr	r2, [pc, #240]	; (8004b5c <TIM_Base_SetConfig+0x11c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d007      	beq.n	8004a80 <TIM_Base_SetConfig+0x40>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a3b      	ldr	r2, [pc, #236]	; (8004b60 <TIM_Base_SetConfig+0x120>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a3a      	ldr	r2, [pc, #232]	; (8004b64 <TIM_Base_SetConfig+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d108      	bne.n	8004a92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2f      	ldr	r2, [pc, #188]	; (8004b54 <TIM_Base_SetConfig+0x114>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d02b      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa0:	d027      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2c      	ldr	r2, [pc, #176]	; (8004b58 <TIM_Base_SetConfig+0x118>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d023      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2b      	ldr	r2, [pc, #172]	; (8004b5c <TIM_Base_SetConfig+0x11c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01f      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <TIM_Base_SetConfig+0x120>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d01b      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <TIM_Base_SetConfig+0x124>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d017      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a28      	ldr	r2, [pc, #160]	; (8004b68 <TIM_Base_SetConfig+0x128>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a27      	ldr	r2, [pc, #156]	; (8004b6c <TIM_Base_SetConfig+0x12c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00f      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <TIM_Base_SetConfig+0x130>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a25      	ldr	r2, [pc, #148]	; (8004b74 <TIM_Base_SetConfig+0x134>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d007      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <TIM_Base_SetConfig+0x138>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <TIM_Base_SetConfig+0x13c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d108      	bne.n	8004b04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <TIM_Base_SetConfig+0x114>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_Base_SetConfig+0xf8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a0c      	ldr	r2, [pc, #48]	; (8004b64 <TIM_Base_SetConfig+0x124>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d103      	bne.n	8004b40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	615a      	str	r2, [r3, #20]
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	40010400 	.word	0x40010400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40014400 	.word	0x40014400
 8004b70:	40014800 	.word	0x40014800
 8004b74:	40001800 	.word	0x40001800
 8004b78:	40001c00 	.word	0x40001c00
 8004b7c:	40002000 	.word	0x40002000

08004b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f023 0201 	bic.w	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 0302 	bic.w	r3, r3, #2
 8004bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a20      	ldr	r2, [pc, #128]	; (8004c58 <TIM_OC1_SetConfig+0xd8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_OC1_SetConfig+0x64>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <TIM_OC1_SetConfig+0xdc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10c      	bne.n	8004bfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0308 	bic.w	r3, r3, #8
 8004bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 0304 	bic.w	r3, r3, #4
 8004bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <TIM_OC1_SetConfig+0xd8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d003      	beq.n	8004c0e <TIM_OC1_SetConfig+0x8e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <TIM_OC1_SetConfig+0xdc>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d111      	bne.n	8004c32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	621a      	str	r2, [r3, #32]
}
 8004c4c:	bf00      	nop
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	40010400 	.word	0x40010400

08004c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f023 0210 	bic.w	r2, r3, #16
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f023 0320 	bic.w	r3, r3, #32
 8004caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <TIM_OC2_SetConfig+0xe4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d003      	beq.n	8004cc8 <TIM_OC2_SetConfig+0x68>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <TIM_OC2_SetConfig+0xe8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d10d      	bne.n	8004ce4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <TIM_OC2_SetConfig+0xe4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <TIM_OC2_SetConfig+0x94>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <TIM_OC2_SetConfig+0xe8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d113      	bne.n	8004d1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	621a      	str	r2, [r3, #32]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40010400 	.word	0x40010400

08004d4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0303 	bic.w	r3, r3, #3
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	021b      	lsls	r3, r3, #8
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a21      	ldr	r2, [pc, #132]	; (8004e2c <TIM_OC3_SetConfig+0xe0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_OC3_SetConfig+0x66>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a20      	ldr	r2, [pc, #128]	; (8004e30 <TIM_OC3_SetConfig+0xe4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10d      	bne.n	8004dce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	021b      	lsls	r3, r3, #8
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <TIM_OC3_SetConfig+0xe0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_OC3_SetConfig+0x92>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <TIM_OC3_SetConfig+0xe4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d113      	bne.n	8004e06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	621a      	str	r2, [r3, #32]
}
 8004e20:	bf00      	nop
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40010400 	.word	0x40010400

08004e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	031b      	lsls	r3, r3, #12
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <TIM_OC4_SetConfig+0xa4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_OC4_SetConfig+0x68>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a11      	ldr	r2, [pc, #68]	; (8004edc <TIM_OC4_SetConfig+0xa8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d109      	bne.n	8004eb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	019b      	lsls	r3, r3, #6
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40010400 	.word	0x40010400

08004ee0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a28      	ldr	r2, [pc, #160]	; (8004fac <TIM_TI1_SetConfig+0xcc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01b      	beq.n	8004f46 <TIM_TI1_SetConfig+0x66>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f14:	d017      	beq.n	8004f46 <TIM_TI1_SetConfig+0x66>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a25      	ldr	r2, [pc, #148]	; (8004fb0 <TIM_TI1_SetConfig+0xd0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <TIM_TI1_SetConfig+0x66>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4a24      	ldr	r2, [pc, #144]	; (8004fb4 <TIM_TI1_SetConfig+0xd4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00f      	beq.n	8004f46 <TIM_TI1_SetConfig+0x66>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a23      	ldr	r2, [pc, #140]	; (8004fb8 <TIM_TI1_SetConfig+0xd8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00b      	beq.n	8004f46 <TIM_TI1_SetConfig+0x66>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a22      	ldr	r2, [pc, #136]	; (8004fbc <TIM_TI1_SetConfig+0xdc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d007      	beq.n	8004f46 <TIM_TI1_SetConfig+0x66>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a21      	ldr	r2, [pc, #132]	; (8004fc0 <TIM_TI1_SetConfig+0xe0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d003      	beq.n	8004f46 <TIM_TI1_SetConfig+0x66>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a20      	ldr	r2, [pc, #128]	; (8004fc4 <TIM_TI1_SetConfig+0xe4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <TIM_TI1_SetConfig+0x6a>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <TIM_TI1_SetConfig+0x6c>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e003      	b.n	8004f6a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f043 0301 	orr.w	r3, r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f023 030a 	bic.w	r3, r3, #10
 8004f84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f003 030a 	and.w	r3, r3, #10
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40010400 	.word	0x40010400
 8004fc0:	40014000 	.word	0x40014000
 8004fc4:	40001800 	.word	0x40001800

08004fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 030a 	bic.w	r3, r3, #10
 8005004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005026:	b480      	push	{r7}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f023 0210 	bic.w	r2, r3, #16
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005052:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005064:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	031b      	lsls	r3, r3, #12
 800506a:	b29b      	uxth	r3, r3
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005078:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	621a      	str	r2, [r3, #32]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f023 0210 	bic.w	r2, r3, #16
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	031b      	lsls	r3, r3, #12
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	621a      	str	r2, [r3, #32]
}
 80050f4:	bf00      	nop
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f023 0303 	bic.w	r3, r3, #3
 800512c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800513c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	b2db      	uxtb	r3, r3
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005150:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	621a      	str	r2, [r3, #32]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	031b      	lsls	r3, r3, #12
 80051bc:	b29b      	uxth	r3, r3
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80051ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	031b      	lsls	r3, r3, #12
 80051d0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	f043 0307 	orr.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	431a      	orrs	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800527c:	2302      	movs	r3, #2
 800527e:	e05a      	b.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a21      	ldr	r2, [pc, #132]	; (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d022      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d01d      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d018      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1b      	ldr	r2, [pc, #108]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a18      	ldr	r2, [pc, #96]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a17      	ldr	r2, [pc, #92]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a15      	ldr	r2, [pc, #84]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10c      	bne.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4313      	orrs	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40010000 	.word	0x40010000
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800
 8005350:	40000c00 	.word	0x40000c00
 8005354:	40010400 	.word	0x40010400
 8005358:	40014000 	.word	0x40014000
 800535c:	40001800 	.word	0x40001800

08005360 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005378:	2302      	movs	r3, #2
 800537a:	e03d      	b.n	80053f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e03f      	b.n	8005496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fc feca 	bl	80021c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	; 0x24
 8005434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f829 	bl	80054a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800545c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695a      	ldr	r2, [r3, #20]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800546c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800547c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80054e2:	f023 030c 	bic.w	r3, r3, #12
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6812      	ldr	r2, [r2, #0]
 80054ea:	68f9      	ldr	r1, [r7, #12]
 80054ec:	430b      	orrs	r3, r1
 80054ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550e:	f040 818b 	bne.w	8005828 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4ac1      	ldr	r2, [pc, #772]	; (800581c <UART_SetConfig+0x37c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d005      	beq.n	8005528 <UART_SetConfig+0x88>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4abf      	ldr	r2, [pc, #764]	; (8005820 <UART_SetConfig+0x380>)
 8005522:	4293      	cmp	r3, r2
 8005524:	f040 80bd 	bne.w	80056a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005528:	f7fe fba6 	bl	8003c78 <HAL_RCC_GetPCLK2Freq>
 800552c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	461d      	mov	r5, r3
 8005532:	f04f 0600 	mov.w	r6, #0
 8005536:	46a8      	mov	r8, r5
 8005538:	46b1      	mov	r9, r6
 800553a:	eb18 0308 	adds.w	r3, r8, r8
 800553e:	eb49 0409 	adc.w	r4, r9, r9
 8005542:	4698      	mov	r8, r3
 8005544:	46a1      	mov	r9, r4
 8005546:	eb18 0805 	adds.w	r8, r8, r5
 800554a:	eb49 0906 	adc.w	r9, r9, r6
 800554e:	f04f 0100 	mov.w	r1, #0
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800555a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800555e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005562:	4688      	mov	r8, r1
 8005564:	4691      	mov	r9, r2
 8005566:	eb18 0005 	adds.w	r0, r8, r5
 800556a:	eb49 0106 	adc.w	r1, r9, r6
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	461d      	mov	r5, r3
 8005574:	f04f 0600 	mov.w	r6, #0
 8005578:	196b      	adds	r3, r5, r5
 800557a:	eb46 0406 	adc.w	r4, r6, r6
 800557e:	461a      	mov	r2, r3
 8005580:	4623      	mov	r3, r4
 8005582:	f7fb fab3 	bl	8000aec <__aeabi_uldivmod>
 8005586:	4603      	mov	r3, r0
 8005588:	460c      	mov	r4, r1
 800558a:	461a      	mov	r2, r3
 800558c:	4ba5      	ldr	r3, [pc, #660]	; (8005824 <UART_SetConfig+0x384>)
 800558e:	fba3 2302 	umull	r2, r3, r3, r2
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	461d      	mov	r5, r3
 800559c:	f04f 0600 	mov.w	r6, #0
 80055a0:	46a9      	mov	r9, r5
 80055a2:	46b2      	mov	sl, r6
 80055a4:	eb19 0309 	adds.w	r3, r9, r9
 80055a8:	eb4a 040a 	adc.w	r4, sl, sl
 80055ac:	4699      	mov	r9, r3
 80055ae:	46a2      	mov	sl, r4
 80055b0:	eb19 0905 	adds.w	r9, r9, r5
 80055b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80055b8:	f04f 0100 	mov.w	r1, #0
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055cc:	4689      	mov	r9, r1
 80055ce:	4692      	mov	sl, r2
 80055d0:	eb19 0005 	adds.w	r0, r9, r5
 80055d4:	eb4a 0106 	adc.w	r1, sl, r6
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	461d      	mov	r5, r3
 80055de:	f04f 0600 	mov.w	r6, #0
 80055e2:	196b      	adds	r3, r5, r5
 80055e4:	eb46 0406 	adc.w	r4, r6, r6
 80055e8:	461a      	mov	r2, r3
 80055ea:	4623      	mov	r3, r4
 80055ec:	f7fb fa7e 	bl	8000aec <__aeabi_uldivmod>
 80055f0:	4603      	mov	r3, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	461a      	mov	r2, r3
 80055f6:	4b8b      	ldr	r3, [pc, #556]	; (8005824 <UART_SetConfig+0x384>)
 80055f8:	fba3 1302 	umull	r1, r3, r3, r2
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	2164      	movs	r1, #100	; 0x64
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	3332      	adds	r3, #50	; 0x32
 800560a:	4a86      	ldr	r2, [pc, #536]	; (8005824 <UART_SetConfig+0x384>)
 800560c:	fba2 2303 	umull	r2, r3, r2, r3
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005618:	4498      	add	r8, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	461d      	mov	r5, r3
 800561e:	f04f 0600 	mov.w	r6, #0
 8005622:	46a9      	mov	r9, r5
 8005624:	46b2      	mov	sl, r6
 8005626:	eb19 0309 	adds.w	r3, r9, r9
 800562a:	eb4a 040a 	adc.w	r4, sl, sl
 800562e:	4699      	mov	r9, r3
 8005630:	46a2      	mov	sl, r4
 8005632:	eb19 0905 	adds.w	r9, r9, r5
 8005636:	eb4a 0a06 	adc.w	sl, sl, r6
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005646:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800564a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800564e:	4689      	mov	r9, r1
 8005650:	4692      	mov	sl, r2
 8005652:	eb19 0005 	adds.w	r0, r9, r5
 8005656:	eb4a 0106 	adc.w	r1, sl, r6
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	461d      	mov	r5, r3
 8005660:	f04f 0600 	mov.w	r6, #0
 8005664:	196b      	adds	r3, r5, r5
 8005666:	eb46 0406 	adc.w	r4, r6, r6
 800566a:	461a      	mov	r2, r3
 800566c:	4623      	mov	r3, r4
 800566e:	f7fb fa3d 	bl	8000aec <__aeabi_uldivmod>
 8005672:	4603      	mov	r3, r0
 8005674:	460c      	mov	r4, r1
 8005676:	461a      	mov	r2, r3
 8005678:	4b6a      	ldr	r3, [pc, #424]	; (8005824 <UART_SetConfig+0x384>)
 800567a:	fba3 1302 	umull	r1, r3, r3, r2
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	2164      	movs	r1, #100	; 0x64
 8005682:	fb01 f303 	mul.w	r3, r1, r3
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	3332      	adds	r3, #50	; 0x32
 800568c:	4a65      	ldr	r2, [pc, #404]	; (8005824 <UART_SetConfig+0x384>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	f003 0207 	and.w	r2, r3, #7
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4442      	add	r2, r8
 800569e:	609a      	str	r2, [r3, #8]
 80056a0:	e26f      	b.n	8005b82 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056a2:	f7fe fad5 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 80056a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	461d      	mov	r5, r3
 80056ac:	f04f 0600 	mov.w	r6, #0
 80056b0:	46a8      	mov	r8, r5
 80056b2:	46b1      	mov	r9, r6
 80056b4:	eb18 0308 	adds.w	r3, r8, r8
 80056b8:	eb49 0409 	adc.w	r4, r9, r9
 80056bc:	4698      	mov	r8, r3
 80056be:	46a1      	mov	r9, r4
 80056c0:	eb18 0805 	adds.w	r8, r8, r5
 80056c4:	eb49 0906 	adc.w	r9, r9, r6
 80056c8:	f04f 0100 	mov.w	r1, #0
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056dc:	4688      	mov	r8, r1
 80056de:	4691      	mov	r9, r2
 80056e0:	eb18 0005 	adds.w	r0, r8, r5
 80056e4:	eb49 0106 	adc.w	r1, r9, r6
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	461d      	mov	r5, r3
 80056ee:	f04f 0600 	mov.w	r6, #0
 80056f2:	196b      	adds	r3, r5, r5
 80056f4:	eb46 0406 	adc.w	r4, r6, r6
 80056f8:	461a      	mov	r2, r3
 80056fa:	4623      	mov	r3, r4
 80056fc:	f7fb f9f6 	bl	8000aec <__aeabi_uldivmod>
 8005700:	4603      	mov	r3, r0
 8005702:	460c      	mov	r4, r1
 8005704:	461a      	mov	r2, r3
 8005706:	4b47      	ldr	r3, [pc, #284]	; (8005824 <UART_SetConfig+0x384>)
 8005708:	fba3 2302 	umull	r2, r3, r3, r2
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	461d      	mov	r5, r3
 8005716:	f04f 0600 	mov.w	r6, #0
 800571a:	46a9      	mov	r9, r5
 800571c:	46b2      	mov	sl, r6
 800571e:	eb19 0309 	adds.w	r3, r9, r9
 8005722:	eb4a 040a 	adc.w	r4, sl, sl
 8005726:	4699      	mov	r9, r3
 8005728:	46a2      	mov	sl, r4
 800572a:	eb19 0905 	adds.w	r9, r9, r5
 800572e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005732:	f04f 0100 	mov.w	r1, #0
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800573e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005742:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005746:	4689      	mov	r9, r1
 8005748:	4692      	mov	sl, r2
 800574a:	eb19 0005 	adds.w	r0, r9, r5
 800574e:	eb4a 0106 	adc.w	r1, sl, r6
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	461d      	mov	r5, r3
 8005758:	f04f 0600 	mov.w	r6, #0
 800575c:	196b      	adds	r3, r5, r5
 800575e:	eb46 0406 	adc.w	r4, r6, r6
 8005762:	461a      	mov	r2, r3
 8005764:	4623      	mov	r3, r4
 8005766:	f7fb f9c1 	bl	8000aec <__aeabi_uldivmod>
 800576a:	4603      	mov	r3, r0
 800576c:	460c      	mov	r4, r1
 800576e:	461a      	mov	r2, r3
 8005770:	4b2c      	ldr	r3, [pc, #176]	; (8005824 <UART_SetConfig+0x384>)
 8005772:	fba3 1302 	umull	r1, r3, r3, r2
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	2164      	movs	r1, #100	; 0x64
 800577a:	fb01 f303 	mul.w	r3, r1, r3
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	3332      	adds	r3, #50	; 0x32
 8005784:	4a27      	ldr	r2, [pc, #156]	; (8005824 <UART_SetConfig+0x384>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005792:	4498      	add	r8, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	461d      	mov	r5, r3
 8005798:	f04f 0600 	mov.w	r6, #0
 800579c:	46a9      	mov	r9, r5
 800579e:	46b2      	mov	sl, r6
 80057a0:	eb19 0309 	adds.w	r3, r9, r9
 80057a4:	eb4a 040a 	adc.w	r4, sl, sl
 80057a8:	4699      	mov	r9, r3
 80057aa:	46a2      	mov	sl, r4
 80057ac:	eb19 0905 	adds.w	r9, r9, r5
 80057b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80057b4:	f04f 0100 	mov.w	r1, #0
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057c8:	4689      	mov	r9, r1
 80057ca:	4692      	mov	sl, r2
 80057cc:	eb19 0005 	adds.w	r0, r9, r5
 80057d0:	eb4a 0106 	adc.w	r1, sl, r6
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	461d      	mov	r5, r3
 80057da:	f04f 0600 	mov.w	r6, #0
 80057de:	196b      	adds	r3, r5, r5
 80057e0:	eb46 0406 	adc.w	r4, r6, r6
 80057e4:	461a      	mov	r2, r3
 80057e6:	4623      	mov	r3, r4
 80057e8:	f7fb f980 	bl	8000aec <__aeabi_uldivmod>
 80057ec:	4603      	mov	r3, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	461a      	mov	r2, r3
 80057f2:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <UART_SetConfig+0x384>)
 80057f4:	fba3 1302 	umull	r1, r3, r3, r2
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	2164      	movs	r1, #100	; 0x64
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	3332      	adds	r3, #50	; 0x32
 8005806:	4a07      	ldr	r2, [pc, #28]	; (8005824 <UART_SetConfig+0x384>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	f003 0207 	and.w	r2, r3, #7
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4442      	add	r2, r8
 8005818:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800581a:	e1b2      	b.n	8005b82 <UART_SetConfig+0x6e2>
 800581c:	40011000 	.word	0x40011000
 8005820:	40011400 	.word	0x40011400
 8005824:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4ad7      	ldr	r2, [pc, #860]	; (8005b8c <UART_SetConfig+0x6ec>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d005      	beq.n	800583e <UART_SetConfig+0x39e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4ad6      	ldr	r2, [pc, #856]	; (8005b90 <UART_SetConfig+0x6f0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	f040 80d1 	bne.w	80059e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800583e:	f7fe fa1b 	bl	8003c78 <HAL_RCC_GetPCLK2Freq>
 8005842:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	469a      	mov	sl, r3
 8005848:	f04f 0b00 	mov.w	fp, #0
 800584c:	46d0      	mov	r8, sl
 800584e:	46d9      	mov	r9, fp
 8005850:	eb18 0308 	adds.w	r3, r8, r8
 8005854:	eb49 0409 	adc.w	r4, r9, r9
 8005858:	4698      	mov	r8, r3
 800585a:	46a1      	mov	r9, r4
 800585c:	eb18 080a 	adds.w	r8, r8, sl
 8005860:	eb49 090b 	adc.w	r9, r9, fp
 8005864:	f04f 0100 	mov.w	r1, #0
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005870:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005874:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005878:	4688      	mov	r8, r1
 800587a:	4691      	mov	r9, r2
 800587c:	eb1a 0508 	adds.w	r5, sl, r8
 8005880:	eb4b 0609 	adc.w	r6, fp, r9
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4619      	mov	r1, r3
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	f04f 0400 	mov.w	r4, #0
 8005896:	0094      	lsls	r4, r2, #2
 8005898:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800589c:	008b      	lsls	r3, r1, #2
 800589e:	461a      	mov	r2, r3
 80058a0:	4623      	mov	r3, r4
 80058a2:	4628      	mov	r0, r5
 80058a4:	4631      	mov	r1, r6
 80058a6:	f7fb f921 	bl	8000aec <__aeabi_uldivmod>
 80058aa:	4603      	mov	r3, r0
 80058ac:	460c      	mov	r4, r1
 80058ae:	461a      	mov	r2, r3
 80058b0:	4bb8      	ldr	r3, [pc, #736]	; (8005b94 <UART_SetConfig+0x6f4>)
 80058b2:	fba3 2302 	umull	r2, r3, r3, r2
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	469b      	mov	fp, r3
 80058c0:	f04f 0c00 	mov.w	ip, #0
 80058c4:	46d9      	mov	r9, fp
 80058c6:	46e2      	mov	sl, ip
 80058c8:	eb19 0309 	adds.w	r3, r9, r9
 80058cc:	eb4a 040a 	adc.w	r4, sl, sl
 80058d0:	4699      	mov	r9, r3
 80058d2:	46a2      	mov	sl, r4
 80058d4:	eb19 090b 	adds.w	r9, r9, fp
 80058d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058dc:	f04f 0100 	mov.w	r1, #0
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058f0:	4689      	mov	r9, r1
 80058f2:	4692      	mov	sl, r2
 80058f4:	eb1b 0509 	adds.w	r5, fp, r9
 80058f8:	eb4c 060a 	adc.w	r6, ip, sl
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	4619      	mov	r1, r3
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	f04f 0400 	mov.w	r4, #0
 800590e:	0094      	lsls	r4, r2, #2
 8005910:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005914:	008b      	lsls	r3, r1, #2
 8005916:	461a      	mov	r2, r3
 8005918:	4623      	mov	r3, r4
 800591a:	4628      	mov	r0, r5
 800591c:	4631      	mov	r1, r6
 800591e:	f7fb f8e5 	bl	8000aec <__aeabi_uldivmod>
 8005922:	4603      	mov	r3, r0
 8005924:	460c      	mov	r4, r1
 8005926:	461a      	mov	r2, r3
 8005928:	4b9a      	ldr	r3, [pc, #616]	; (8005b94 <UART_SetConfig+0x6f4>)
 800592a:	fba3 1302 	umull	r1, r3, r3, r2
 800592e:	095b      	lsrs	r3, r3, #5
 8005930:	2164      	movs	r1, #100	; 0x64
 8005932:	fb01 f303 	mul.w	r3, r1, r3
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	3332      	adds	r3, #50	; 0x32
 800593c:	4a95      	ldr	r2, [pc, #596]	; (8005b94 <UART_SetConfig+0x6f4>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005948:	4498      	add	r8, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	469b      	mov	fp, r3
 800594e:	f04f 0c00 	mov.w	ip, #0
 8005952:	46d9      	mov	r9, fp
 8005954:	46e2      	mov	sl, ip
 8005956:	eb19 0309 	adds.w	r3, r9, r9
 800595a:	eb4a 040a 	adc.w	r4, sl, sl
 800595e:	4699      	mov	r9, r3
 8005960:	46a2      	mov	sl, r4
 8005962:	eb19 090b 	adds.w	r9, r9, fp
 8005966:	eb4a 0a0c 	adc.w	sl, sl, ip
 800596a:	f04f 0100 	mov.w	r1, #0
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005976:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800597a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800597e:	4689      	mov	r9, r1
 8005980:	4692      	mov	sl, r2
 8005982:	eb1b 0509 	adds.w	r5, fp, r9
 8005986:	eb4c 060a 	adc.w	r6, ip, sl
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	4619      	mov	r1, r3
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	f04f 0400 	mov.w	r4, #0
 800599c:	0094      	lsls	r4, r2, #2
 800599e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059a2:	008b      	lsls	r3, r1, #2
 80059a4:	461a      	mov	r2, r3
 80059a6:	4623      	mov	r3, r4
 80059a8:	4628      	mov	r0, r5
 80059aa:	4631      	mov	r1, r6
 80059ac:	f7fb f89e 	bl	8000aec <__aeabi_uldivmod>
 80059b0:	4603      	mov	r3, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	461a      	mov	r2, r3
 80059b6:	4b77      	ldr	r3, [pc, #476]	; (8005b94 <UART_SetConfig+0x6f4>)
 80059b8:	fba3 1302 	umull	r1, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	2164      	movs	r1, #100	; 0x64
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	3332      	adds	r3, #50	; 0x32
 80059ca:	4a72      	ldr	r2, [pc, #456]	; (8005b94 <UART_SetConfig+0x6f4>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	f003 020f 	and.w	r2, r3, #15
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4442      	add	r2, r8
 80059dc:	609a      	str	r2, [r3, #8]
 80059de:	e0d0      	b.n	8005b82 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7fe f936 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 80059e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	469a      	mov	sl, r3
 80059ea:	f04f 0b00 	mov.w	fp, #0
 80059ee:	46d0      	mov	r8, sl
 80059f0:	46d9      	mov	r9, fp
 80059f2:	eb18 0308 	adds.w	r3, r8, r8
 80059f6:	eb49 0409 	adc.w	r4, r9, r9
 80059fa:	4698      	mov	r8, r3
 80059fc:	46a1      	mov	r9, r4
 80059fe:	eb18 080a 	adds.w	r8, r8, sl
 8005a02:	eb49 090b 	adc.w	r9, r9, fp
 8005a06:	f04f 0100 	mov.w	r1, #0
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a1a:	4688      	mov	r8, r1
 8005a1c:	4691      	mov	r9, r2
 8005a1e:	eb1a 0508 	adds.w	r5, sl, r8
 8005a22:	eb4b 0609 	adc.w	r6, fp, r9
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	f04f 0400 	mov.w	r4, #0
 8005a38:	0094      	lsls	r4, r2, #2
 8005a3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a3e:	008b      	lsls	r3, r1, #2
 8005a40:	461a      	mov	r2, r3
 8005a42:	4623      	mov	r3, r4
 8005a44:	4628      	mov	r0, r5
 8005a46:	4631      	mov	r1, r6
 8005a48:	f7fb f850 	bl	8000aec <__aeabi_uldivmod>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	461a      	mov	r2, r3
 8005a52:	4b50      	ldr	r3, [pc, #320]	; (8005b94 <UART_SetConfig+0x6f4>)
 8005a54:	fba3 2302 	umull	r2, r3, r3, r2
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	469b      	mov	fp, r3
 8005a62:	f04f 0c00 	mov.w	ip, #0
 8005a66:	46d9      	mov	r9, fp
 8005a68:	46e2      	mov	sl, ip
 8005a6a:	eb19 0309 	adds.w	r3, r9, r9
 8005a6e:	eb4a 040a 	adc.w	r4, sl, sl
 8005a72:	4699      	mov	r9, r3
 8005a74:	46a2      	mov	sl, r4
 8005a76:	eb19 090b 	adds.w	r9, r9, fp
 8005a7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a7e:	f04f 0100 	mov.w	r1, #0
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a92:	4689      	mov	r9, r1
 8005a94:	4692      	mov	sl, r2
 8005a96:	eb1b 0509 	adds.w	r5, fp, r9
 8005a9a:	eb4c 060a 	adc.w	r6, ip, sl
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	f04f 0400 	mov.w	r4, #0
 8005ab0:	0094      	lsls	r4, r2, #2
 8005ab2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ab6:	008b      	lsls	r3, r1, #2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4623      	mov	r3, r4
 8005abc:	4628      	mov	r0, r5
 8005abe:	4631      	mov	r1, r6
 8005ac0:	f7fb f814 	bl	8000aec <__aeabi_uldivmod>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	461a      	mov	r2, r3
 8005aca:	4b32      	ldr	r3, [pc, #200]	; (8005b94 <UART_SetConfig+0x6f4>)
 8005acc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	2164      	movs	r1, #100	; 0x64
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	3332      	adds	r3, #50	; 0x32
 8005ade:	4a2d      	ldr	r2, [pc, #180]	; (8005b94 <UART_SetConfig+0x6f4>)
 8005ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aea:	4498      	add	r8, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	469b      	mov	fp, r3
 8005af0:	f04f 0c00 	mov.w	ip, #0
 8005af4:	46d9      	mov	r9, fp
 8005af6:	46e2      	mov	sl, ip
 8005af8:	eb19 0309 	adds.w	r3, r9, r9
 8005afc:	eb4a 040a 	adc.w	r4, sl, sl
 8005b00:	4699      	mov	r9, r3
 8005b02:	46a2      	mov	sl, r4
 8005b04:	eb19 090b 	adds.w	r9, r9, fp
 8005b08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b0c:	f04f 0100 	mov.w	r1, #0
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b20:	4689      	mov	r9, r1
 8005b22:	4692      	mov	sl, r2
 8005b24:	eb1b 0509 	adds.w	r5, fp, r9
 8005b28:	eb4c 060a 	adc.w	r6, ip, sl
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4619      	mov	r1, r3
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	f04f 0400 	mov.w	r4, #0
 8005b3e:	0094      	lsls	r4, r2, #2
 8005b40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b44:	008b      	lsls	r3, r1, #2
 8005b46:	461a      	mov	r2, r3
 8005b48:	4623      	mov	r3, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	f7fa ffcd 	bl	8000aec <__aeabi_uldivmod>
 8005b52:	4603      	mov	r3, r0
 8005b54:	460c      	mov	r4, r1
 8005b56:	461a      	mov	r2, r3
 8005b58:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <UART_SetConfig+0x6f4>)
 8005b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	2164      	movs	r1, #100	; 0x64
 8005b62:	fb01 f303 	mul.w	r3, r1, r3
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	3332      	adds	r3, #50	; 0x32
 8005b6c:	4a09      	ldr	r2, [pc, #36]	; (8005b94 <UART_SetConfig+0x6f4>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4442      	add	r2, r8
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	e7ff      	b.n	8005b82 <UART_SetConfig+0x6e2>
 8005b82:	bf00      	nop
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8c:	40011000 	.word	0x40011000
 8005b90:	40011400 	.word	0x40011400
 8005b94:	51eb851f 	.word	0x51eb851f

08005b98 <__libc_init_array>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	4e0d      	ldr	r6, [pc, #52]	; (8005bd0 <__libc_init_array+0x38>)
 8005b9c:	4c0d      	ldr	r4, [pc, #52]	; (8005bd4 <__libc_init_array+0x3c>)
 8005b9e:	1ba4      	subs	r4, r4, r6
 8005ba0:	10a4      	asrs	r4, r4, #2
 8005ba2:	2500      	movs	r5, #0
 8005ba4:	42a5      	cmp	r5, r4
 8005ba6:	d109      	bne.n	8005bbc <__libc_init_array+0x24>
 8005ba8:	4e0b      	ldr	r6, [pc, #44]	; (8005bd8 <__libc_init_array+0x40>)
 8005baa:	4c0c      	ldr	r4, [pc, #48]	; (8005bdc <__libc_init_array+0x44>)
 8005bac:	f000 f820 	bl	8005bf0 <_init>
 8005bb0:	1ba4      	subs	r4, r4, r6
 8005bb2:	10a4      	asrs	r4, r4, #2
 8005bb4:	2500      	movs	r5, #0
 8005bb6:	42a5      	cmp	r5, r4
 8005bb8:	d105      	bne.n	8005bc6 <__libc_init_array+0x2e>
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bc0:	4798      	blx	r3
 8005bc2:	3501      	adds	r5, #1
 8005bc4:	e7ee      	b.n	8005ba4 <__libc_init_array+0xc>
 8005bc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bca:	4798      	blx	r3
 8005bcc:	3501      	adds	r5, #1
 8005bce:	e7f2      	b.n	8005bb6 <__libc_init_array+0x1e>
 8005bd0:	08005c30 	.word	0x08005c30
 8005bd4:	08005c30 	.word	0x08005c30
 8005bd8:	08005c30 	.word	0x08005c30
 8005bdc:	08005c34 	.word	0x08005c34

08005be0 <memset>:
 8005be0:	4402      	add	r2, r0
 8005be2:	4603      	mov	r3, r0
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d100      	bne.n	8005bea <memset+0xa>
 8005be8:	4770      	bx	lr
 8005bea:	f803 1b01 	strb.w	r1, [r3], #1
 8005bee:	e7f9      	b.n	8005be4 <memset+0x4>

08005bf0 <_init>:
 8005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf2:	bf00      	nop
 8005bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf6:	bc08      	pop	{r3}
 8005bf8:	469e      	mov	lr, r3
 8005bfa:	4770      	bx	lr

08005bfc <_fini>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	bf00      	nop
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr
