
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf3c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800c0f0  0800c0f0  0001c0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3b8  0800c3b8  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3b8  0800c3b8  0001c3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3c0  0800c3c0  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3c0  0800c3c0  0001c3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3c4  0800c3c4  0001c3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800c3c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  200001a0  0800c568  000201a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  0800c568  00020724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c407  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec3  00000000  00000000  0003c5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  000404a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  000419a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027318  00000000  00000000  00042ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a86d  00000000  00000000  00069ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2113  00000000  00000000  00084865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166978  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d80  00000000  00000000  001669cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c0d4 	.word	0x0800c0d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	0800c0d4 	.word	0x0800c0d4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f003 fd0b 	bl	800496c <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f003 fcf6 	bl	800496c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f003 fc5d 	bl	800496c <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <hubMotor_Init+0x2c>)
 80013d0:	f004 ffe2 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <hubMotor_Init+0x2c>)
 80013dc:	f004 ffdc 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e6:	4802      	ldr	r0, [pc, #8]	; (80013f0 <hubMotor_Init+0x2c>)
 80013e8:	f004 ffd6 	bl	8006398 <HAL_GPIO_WritePin>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	00000000 	.word	0x00000000

080013f8 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001402:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff f856 	bl	80004b8 <__aeabi_f2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <send_HubMotor+0x1a8>)
 8001412:	f7ff f8a9 	bl	8000568 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	a35e      	add	r3, pc, #376	; (adr r3, 8001598 <send_HubMotor+0x1a0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f9ca 	bl	80007bc <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fb4a 	bl	8000ac8 <__aeabi_d2iz>
 8001434:	4603      	mov	r3, r0
 8001436:	b21b      	sxth	r3, r3
 8001438:	b29b      	uxth	r3, r3
 800143a:	425b      	negs	r3, r3
 800143c:	b29b      	uxth	r3, r3
 800143e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f7ff f839 	bl	80004b8 <__aeabi_f2d>
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <send_HubMotor+0x1a8>)
 800144c:	f7ff f88c 	bl	8000568 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	a34f      	add	r3, pc, #316	; (adr r3, 8001598 <send_HubMotor+0x1a0>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff f9ad 	bl	80007bc <__aeabi_ddiv>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fb2d 	bl	8000ac8 <__aeabi_d2iz>
 800146e:	4603      	mov	r3, r0
 8001470:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 8001472:	23aa      	movs	r3, #170	; 0xaa
 8001474:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 8001476:	23a4      	movs	r3, #164	; 0xa4
 8001478:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 800147a:	230e      	movs	r3, #14
 800147c:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 800148a:	23c8      	movs	r3, #200	; 0xc8
 800148c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 800148e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	b29b      	uxth	r3, r3
 8001494:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 8001498:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800149a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 800149e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014a2:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 80014a4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014a8:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 350;
 80014aa:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80014ae:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 80014b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 80014ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 80014c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014c4:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 80014c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014ca:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 80014cc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014d0:	121b      	asrs	r3, r3, #8
 80014d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 80014d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 80014dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014e0:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 80014e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014e6:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 80014e8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014ec:	121b      	asrs	r3, r3, #8
 80014ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 80014f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014f4:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 80014f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fc:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 80014fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001502:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001504:	7b3b      	ldrb	r3, [r7, #12]
 8001506:	b29a      	uxth	r2, r3
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b29a      	uxth	r2, r3
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 8001520:	7c3b      	ldrb	r3, [r7, #16]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b29a      	uxth	r2, r3
 8001528:	7c7b      	ldrb	r3, [r7, #17]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29a      	uxth	r2, r3
 8001530:	7cbb      	ldrb	r3, [r7, #18]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 8001538:	7cfb      	ldrb	r3, [r7, #19]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29a      	uxth	r2, r3
 8001540:	7d3b      	ldrb	r3, [r7, #20]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29a      	uxth	r2, r3
 8001548:	7d7b      	ldrb	r3, [r7, #21]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001550:	7dbb      	ldrb	r3, [r7, #22]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29a      	uxth	r2, r3
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7e3b      	ldrb	r3, [r7, #24]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4413      	add	r3, r2
 8001566:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001568:	7e7b      	ldrb	r3, [r7, #25]
 800156a:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 800156c:	4413      	add	r3, r2
 800156e:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001570:	8bfb      	ldrh	r3, [r7, #30]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15,10);
 8001576:	f107 010c 	add.w	r1, r7, #12
 800157a:	230a      	movs	r3, #10
 800157c:	220f      	movs	r2, #15
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <send_HubMotor+0x1ac>)
 8001580:	f007 f8a5 	bl	80086ce <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 8001584:	220f      	movs	r2, #15
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <send_HubMotor+0x1b0>)
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <send_HubMotor+0x1ac>)
 800158a:	f007 f939 	bl	8008800 <HAL_UART_Receive_DMA>
}
 800158e:	bf00      	nop
 8001590:	3730      	adds	r7, #48	; 0x30
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	54442d18 	.word	0x54442d18
 800159c:	401921fb 	.word	0x401921fb
 80015a0:	40b00000 	.word	0x40b00000
 80015a4:	2000066c 	.word	0x2000066c
 80015a8:	200004f4 	.word	0x200004f4

080015ac <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 80015b0:	2201      	movs	r2, #1
 80015b2:	2110      	movs	r1, #16
 80015b4:	481c      	ldr	r0, [pc, #112]	; (8001628 <ADC_Init+0x7c>)
 80015b6:	f004 feef 	bl	8006398 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 80015ba:	2200      	movs	r2, #0
 80015bc:	2120      	movs	r1, #32
 80015be:	481b      	ldr	r0, [pc, #108]	; (800162c <ADC_Init+0x80>)
 80015c0:	f004 feea 	bl	8006398 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 80015c4:	2200      	movs	r2, #0
 80015c6:	2110      	movs	r1, #16
 80015c8:	4818      	ldr	r0, [pc, #96]	; (800162c <ADC_Init+0x80>)
 80015ca:	f004 fee5 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f003 f9d8 	bl	8004984 <HAL_Delay>
	AD7606_RST_HIGH;
 80015d4:	2201      	movs	r2, #1
 80015d6:	2110      	movs	r1, #16
 80015d8:	4814      	ldr	r0, [pc, #80]	; (800162c <ADC_Init+0x80>)
 80015da:	f004 fedd 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015de:	2001      	movs	r0, #1
 80015e0:	f003 f9d0 	bl	8004984 <HAL_Delay>
	AD7606_RST_LOW;
 80015e4:	2200      	movs	r2, #0
 80015e6:	2110      	movs	r1, #16
 80015e8:	4810      	ldr	r0, [pc, #64]	; (800162c <ADC_Init+0x80>)
 80015ea:	f004 fed5 	bl	8006398 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 80015ee:	2200      	movs	r2, #0
 80015f0:	2101      	movs	r1, #1
 80015f2:	480e      	ldr	r0, [pc, #56]	; (800162c <ADC_Init+0x80>)
 80015f4:	f004 fed0 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f003 f9c3 	bl	8004984 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2102      	movs	r1, #2
 8001602:	480a      	ldr	r0, [pc, #40]	; (800162c <ADC_Init+0x80>)
 8001604:	f004 fec8 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2104      	movs	r1, #4
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <ADC_Init+0x80>)
 800160e:	f004 fec3 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2108      	movs	r1, #8
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <ADC_Init+0x80>)
 8001618:	f004 febe 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f003 f9b1 	bl	8004984 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40020000 	.word	0x40020000
 800162c:	40020800 	.word	0x40020800

08001630 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 8001634:	2200      	movs	r2, #0
 8001636:	2120      	movs	r1, #32
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <ADC_DataRequest+0x1c>)
 800163a:	f004 fead 	bl	8006398 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 800163e:	2201      	movs	r2, #1
 8001640:	2120      	movs	r1, #32
 8001642:	4802      	ldr	r0, [pc, #8]	; (800164c <ADC_DataRequest+0x1c>)
 8001644:	f004 fea8 	bl	8006398 <HAL_GPIO_WritePin>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40020800 	.word	0x40020800

08001650 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001658:	2200      	movs	r2, #0
 800165a:	2110      	movs	r1, #16
 800165c:	4808      	ldr	r0, [pc, #32]	; (8001680 <ADC_Read+0x30>)
 800165e:	f004 fe9b 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8001662:	2302      	movs	r3, #2
 8001664:	2208      	movs	r2, #8
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4806      	ldr	r0, [pc, #24]	; (8001684 <ADC_Read+0x34>)
 800166a:	f005 fda5 	bl	80071b8 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 800166e:	2201      	movs	r2, #1
 8001670:	2110      	movs	r1, #16
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <ADC_Read+0x30>)
 8001674:	f004 fe90 	bl	8006398 <HAL_GPIO_WritePin>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020000 	.word	0x40020000
 8001684:	2000025c 	.word	0x2000025c

08001688 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001690:	2100      	movs	r1, #0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f808 	bl	80016a8 <enableMotor>
	brakeMotor(motor, 0);
 8001698:	2100      	movs	r1, #0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f828 	bl	80016f0 <brakeMotor>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	4619      	mov	r1, r3
 80016c0:	f004 fe6a 	bl	8006398 <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	461a      	mov	r2, r3
 80016da:	2108      	movs	r1, #8
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <emBrakeMotor+0x20>)
 80016de:	f004 fe5b 	bl	8006398 <HAL_GPIO_WritePin>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40020c00 	.word	0x40020c00

080016f0 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69d8      	ldr	r0, [r3, #28]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8c1b      	ldrh	r3, [r3, #32]
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	4619      	mov	r1, r3
 8001708:	f004 fe46 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->outputPWM, motor->PWM_channel);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	8b1b      	ldrh	r3, [r3, #24]
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f006 f9cc 	bl	8007ab4 <HAL_TIM_PWM_Stop>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	4619      	mov	r1, r3
 800173c:	f004 fe2c 	bl	8006398 <HAL_GPIO_WritePin>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 800175a:	edd7 7a00 	vldr	s15, [r7]
 800175e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001890 <setMotorSpeed+0x148>
 8001762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	dd01      	ble.n	8001770 <setMotorSpeed+0x28>
 800176c:	4b49      	ldr	r3, [pc, #292]	; (8001894 <setMotorSpeed+0x14c>)
 800176e:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f7fe fea1 	bl	80004b8 <__aeabi_f2d>
 8001776:	a340      	add	r3, pc, #256	; (adr r3, 8001878 <setMotorSpeed+0x130>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe fd3c 	bl	80001f8 <__aeabi_dsub>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	a33d      	add	r3, pc, #244	; (adr r3, 8001880 <setMotorSpeed+0x138>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7ff f815 	bl	80007bc <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f9bd 	bl	8000b18 <__aeabi_d2uiz>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017aa:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7fe fe82 	bl	80004b8 <__aeabi_f2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	a133      	add	r1, pc, #204	; (adr r1, 8001888 <setMotorSpeed+0x140>)
 80017ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017be:	f7fe fffd 	bl	80007bc <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f97d 	bl	8000ac8 <__aeabi_d2iz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 80017d6:	8a7b      	ldrh	r3, [r7, #18]
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	b29b      	uxth	r3, r3
 80017dc:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 80017de:	edd7 7a00 	vldr	s15, [r7]
 80017e2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80017e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	d503      	bpl.n	80017f8 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 80017f0:	2101      	movs	r1, #1
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff7c 	bl	80016f0 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	8a7a      	ldrh	r2, [r7, #18]
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	8b1b      	ldrh	r3, [r3, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	635a      	str	r2, [r3, #52]	; 0x34
 8001814:	e01c      	b.n	8001850 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	8b1b      	ldrh	r3, [r3, #24]
 800181a:	2b04      	cmp	r3, #4
 800181c:	d105      	bne.n	800182a <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	639a      	str	r2, [r3, #56]	; 0x38
 8001828:	e012      	b.n	8001850 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	8b1b      	ldrh	r3, [r3, #24]
 800182e:	2b08      	cmp	r3, #8
 8001830:	d105      	bne.n	800183e <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
 800183c:	e008      	b.n	8001850 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	8b1b      	ldrh	r3, [r3, #24]
 8001842:	2b0c      	cmp	r3, #12
 8001844:	d104      	bne.n	8001850 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	8b1b      	ldrh	r3, [r3, #24]
 8001858:	4619      	mov	r1, r3
 800185a:	4610      	mov	r0, r2
 800185c:	f006 f8ec 	bl	8007a38 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	bfb15b57 	.word	0xbfb15b57
 800187c:	3fd09eec 	.word	0x3fd09eec
 8001880:	1172ef0b 	.word	0x1172ef0b
 8001884:	3f9989df 	.word	0x3f9989df
 8001888:	00000000 	.word	0x00000000
 800188c:	412e8480 	.word	0x412e8480
 8001890:	42c80000 	.word	0x42c80000
 8001894:	42c80000 	.word	0x42c80000

08001898 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d129      	bne.n	8001902 <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 80018ae:	edd7 7a00 	vldr	s15, [r7]
 80018b2:	eef0 7ae7 	vabs.f32	s15, s15
 80018b6:	ee17 0a90 	vmov	r0, s15
 80018ba:	f7fe fdfd 	bl	80004b8 <__aeabi_f2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	6838      	ldr	r0, [r7, #0]
 80018c4:	f7fe fdf8 	bl	80004b8 <__aeabi_f2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4620      	mov	r0, r4
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7fe ff74 	bl	80007bc <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	f7ff f8c6 	bl	8000a74 <__aeabi_dcmpge>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <runMotor+0x60>
	      setMotorDir(motor, 0);
 80018ee:	2100      	movs	r1, #0
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff17 	bl	8001724 <setMotorDir>
 80018f6:	e032      	b.n	800195e <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 80018f8:	2101      	movs	r1, #1
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff12 	bl	8001724 <setMotorDir>
 8001900:	e02d      	b.n	800195e <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001908:	2b02      	cmp	r3, #2
 800190a:	d128      	bne.n	800195e <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 800190c:	edd7 7a00 	vldr	s15, [r7]
 8001910:	eef0 7ae7 	vabs.f32	s15, s15
 8001914:	ee17 0a90 	vmov	r0, s15
 8001918:	f7fe fdce 	bl	80004b8 <__aeabi_f2d>
 800191c:	4604      	mov	r4, r0
 800191e:	460d      	mov	r5, r1
 8001920:	6838      	ldr	r0, [r7, #0]
 8001922:	f7fe fdc9 	bl	80004b8 <__aeabi_f2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f7fe ff45 	bl	80007bc <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f7ff f897 	bl	8000a74 <__aeabi_dcmpge>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <runMotor+0xbe>
	  setMotorDir(motor, 1);
 800194c:	2101      	movs	r1, #1
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fee8 	bl	8001724 <setMotorDir>
 8001954:	e003      	b.n	800195e <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 8001956:	2100      	movs	r1, #0
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fee3 	bl	8001724 <setMotorDir>
    }

    HAL_Delay(50);
 800195e:	2032      	movs	r0, #50	; 0x32
 8001960:	f003 f810 	bl	8004984 <HAL_Delay>
    brakeMotor(motor, 0);
 8001964:	2100      	movs	r1, #0
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fec2 	bl	80016f0 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 800196c:	edd7 7a00 	vldr	s15, [r7]
 8001970:	eef0 7ae7 	vabs.f32	s15, s15
 8001974:	eeb0 0a67 	vmov.f32	s0, s15
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fee5 	bl	8001748 <setMotorSpeed>

}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bdb0      	pop	{r4, r5, r7, pc}

08001986 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	889b      	ldrh	r3, [r3, #4]
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f004 fce4 	bl	8006368 <HAL_GPIO_ReadPin>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	799a      	ldrb	r2, [r3, #6]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	79db      	ldrb	r3, [r3, #7]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d004      	beq.n	80019be <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 80019b4:	f002 ffda 	bl	800496c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 80019be:	f002 ffd5 	bl	800496c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d209      	bcs.n	80019e4 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	799a      	ldrb	r2, [r3, #6]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7a1b      	ldrb	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e004      	b.n	80019ee <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	799a      	ldrb	r2, [r3, #6]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80019fe:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a00:	4a30      	ldr	r2, [pc, #192]	; (8001ac4 <MX_CAN1_Init+0xcc>)
 8001a02:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001a04:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a06:	2209      	movs	r2, #9
 8001a08:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a1c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a1e:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a24:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a32:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a4a:	481d      	ldr	r0, [pc, #116]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a4c:	f002 ffbe 	bl	80049cc <HAL_CAN_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001a56:	f001 fdb9 	bl	80035cc <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
   CAN_FilterTypeDef canfil_1;
   canfil_1.FilterBank = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
   canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
   canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61fb      	str	r3, [r7, #28]
   canfil_1.FilterIdHigh = 0x0000;
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
   canfil_1.FilterIdLow = 0x0000;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
   canfil_1.FilterMaskIdHigh = 0x0000;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
   canfil_1.FilterMaskIdLow = 0x0000;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
   canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
   canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	623b      	str	r3, [r7, #32]
   canfil_1.SlaveStartFilterBank = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24

   if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001a82:	463b      	mov	r3, r7
 8001a84:	4619      	mov	r1, r3
 8001a86:	480e      	ldr	r0, [pc, #56]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a88:	f003 f89c 	bl	8004bc4 <HAL_CAN_ConfigFilter>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_CAN1_Init+0x9e>
		   Error_Handler();
 8001a92:	f001 fd9b 	bl	80035cc <Error_Handler>

   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001a96:	2102      	movs	r1, #2
 8001a98:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001a9a:	f003 fba4 	bl	80051e6 <HAL_CAN_ActivateNotification>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <MX_CAN1_Init+0xb2>
		   return Error_Handler();
 8001aa4:	f001 fd92 	bl	80035cc <Error_Handler>
 8001aa8:	e007      	b.n	8001aba <MX_CAN1_Init+0xc2>

   if (HAL_CAN_Start(&hcan1))
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_CAN1_Init+0xc8>)
 8001aac:	f003 f96a 	bl	8004d84 <HAL_CAN_Start>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_CAN1_Init+0xc2>
		   return Error_Handler();
 8001ab6:	f001 fd89 	bl	80035cc <Error_Handler>

    /* USER CODE END CAN1_Init 2 */



}
 8001aba:	3728      	adds	r7, #40	; 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200002b4 	.word	0x200002b4
 8001ac4:	40006400 	.word	0x40006400

08001ac8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_CAN_MspInit+0x94>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d133      	bne.n	8001b52 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_CAN_MspInit+0x98>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_CAN_MspInit+0x98>)
 8001af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_CAN_MspInit+0x98>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_CAN_MspInit+0x98>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <HAL_CAN_MspInit+0x98>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_CAN_MspInit+0x98>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b22:	2303      	movs	r3, #3
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b32:	2309      	movs	r3, #9
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4809      	ldr	r0, [pc, #36]	; (8001b64 <HAL_CAN_MspInit+0x9c>)
 8001b3e:	f004 fa67 	bl	8006010 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2014      	movs	r0, #20
 8001b48:	f003 fe7d 	bl	8005846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b4c:	2014      	movs	r0, #20
 8001b4e:	f003 fe96 	bl	800587e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40006400 	.word	0x40006400
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020c00 	.word	0x40020c00

08001b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <MX_DMA_Init+0x4c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <MX_DMA_Init+0x4c>)
 8001b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <MX_DMA_Init+0x4c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	200c      	movs	r0, #12
 8001b90:	f003 fe59 	bl	8005846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b94:	200c      	movs	r0, #12
 8001b96:	f003 fe72 	bl	800587e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	200e      	movs	r0, #14
 8001ba0:	f003 fe51 	bl	8005846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ba4:	200e      	movs	r0, #14
 8001ba6:	f003 fe6a 	bl	800587e <HAL_NVIC_EnableIRQ>

}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <ENCODER_Init+0x24>)
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <ENCODER_Init+0x28>)
 8001bc0:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <ENCODER_Init+0x2c>)
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <ENCODER_Init+0x28>)
 8001bc6:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4804      	ldr	r0, [pc, #16]	; (8001bdc <ENCODER_Init+0x24>)
 8001bcc:	f000 f83f 	bl	8001c4e <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	4804      	ldr	r0, [pc, #16]	; (8001be4 <ENCODER_Init+0x2c>)
 8001bd4:	f000 f83b 	bl	8001c4e <ENCODER_Set_TxHeader>

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2000035c 	.word	0x2000035c
 8001be0:	200002b4 	.word	0x200002b4
 8001be4:	20000304 	.word	0x20000304

08001be8 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	785a      	ldrb	r2, [r3, #1]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	789a      	ldrb	r2, [r3, #2]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	78da      	ldrb	r2, [r3, #3]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	791a      	ldrb	r2, [r3, #4]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	795a      	ldrb	r2, [r3, #5]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	799a      	ldrb	r2, [r3, #6]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	79da      	ldrb	r2, [r3, #7]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->sendData[2] = 0x01;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->sendData[3] = 0x00;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f103 0120 	add.w	r1, r3, #32
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3338      	adds	r3, #56	; 0x38
 8001cce:	f003 f89d 	bl	8004e0c <HAL_CAN_AddTxMessage>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffd1 	bl	8001c8a <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001d1e:	461a      	mov	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	441a      	add	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	4413      	add	r3, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	; 0x30
 8001d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	4b8a      	ldr	r3, [pc, #552]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a89      	ldr	r2, [pc, #548]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001d64:	f043 0310 	orr.w	r3, r3, #16
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b87      	ldr	r3, [pc, #540]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	4b83      	ldr	r3, [pc, #524]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a82      	ldr	r2, [pc, #520]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b80      	ldr	r3, [pc, #512]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b7c      	ldr	r3, [pc, #496]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a7b      	ldr	r2, [pc, #492]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b79      	ldr	r3, [pc, #484]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b75      	ldr	r3, [pc, #468]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a74      	ldr	r2, [pc, #464]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b6e      	ldr	r3, [pc, #440]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a6d      	ldr	r2, [pc, #436]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b6b      	ldr	r3, [pc, #428]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b67      	ldr	r3, [pc, #412]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a66      	ldr	r2, [pc, #408]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <MX_GPIO_Init+0x244>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001e02:	2200      	movs	r2, #0
 8001e04:	213f      	movs	r1, #63	; 0x3f
 8001e06:	4861      	ldr	r0, [pc, #388]	; (8001f8c <MX_GPIO_Init+0x248>)
 8001e08:	f004 fac6 	bl	8006398 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2110      	movs	r1, #16
 8001e10:	485f      	ldr	r0, [pc, #380]	; (8001f90 <MX_GPIO_Init+0x24c>)
 8001e12:	f004 fac1 	bl	8006398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001e16:	2200      	movs	r2, #0
 8001e18:	219b      	movs	r1, #155	; 0x9b
 8001e1a:	485e      	ldr	r0, [pc, #376]	; (8001f94 <MX_GPIO_Init+0x250>)
 8001e1c:	f004 fabc 	bl	8006398 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001e26:	485c      	ldr	r0, [pc, #368]	; (8001f98 <MX_GPIO_Init+0x254>)
 8001e28:	f004 fab6 	bl	8006398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001e32:	485a      	ldr	r0, [pc, #360]	; (8001f9c <MX_GPIO_Init+0x258>)
 8001e34:	f004 fab0 	bl	8006398 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e40:	2302      	movs	r3, #2
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4853      	ldr	r0, [pc, #332]	; (8001f98 <MX_GPIO_Init+0x254>)
 8001e4c:	f004 f8e0 	bl	8006010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001e50:	f248 1378 	movw	r3, #33144	; 0x8178
 8001e54:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	484c      	ldr	r0, [pc, #304]	; (8001f98 <MX_GPIO_Init+0x254>)
 8001e66:	f004 f8d3 	bl	8006010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001e6a:	233f      	movs	r3, #63	; 0x3f
 8001e6c:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4842      	ldr	r0, [pc, #264]	; (8001f8c <MX_GPIO_Init+0x248>)
 8001e82:	f004 f8c5 	bl	8006010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001e86:	2310      	movs	r3, #16
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	483c      	ldr	r0, [pc, #240]	; (8001f90 <MX_GPIO_Init+0x24c>)
 8001e9e:	f004 f8b7 	bl	8006010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <MX_GPIO_Init+0x25c>)
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4836      	ldr	r0, [pc, #216]	; (8001f90 <MX_GPIO_Init+0x24c>)
 8001eb6:	f004 f8ab 	bl	8006010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001eba:	239b      	movs	r3, #155	; 0x9b
 8001ebc:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4830      	ldr	r0, [pc, #192]	; (8001f94 <MX_GPIO_Init+0x250>)
 8001ed2:	f004 f89d 	bl	8006010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001ed6:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	482a      	ldr	r0, [pc, #168]	; (8001f98 <MX_GPIO_Init+0x254>)
 8001ef0:	f004 f88e 	bl	8006010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001ef4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f06:	2305      	movs	r3, #5
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4820      	ldr	r0, [pc, #128]	; (8001f94 <MX_GPIO_Init+0x250>)
 8001f12:	f004 f87d 	bl	8006010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001f16:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001f1a:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	481b      	ldr	r0, [pc, #108]	; (8001f9c <MX_GPIO_Init+0x258>)
 8001f30:	f004 f86e 	bl	8006010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	4814      	ldr	r0, [pc, #80]	; (8001f9c <MX_GPIO_Init+0x258>)
 8001f4a:	f004 f861 	bl	8006010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001f5e:	2309      	movs	r3, #9
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	480a      	ldr	r0, [pc, #40]	; (8001f94 <MX_GPIO_Init+0x250>)
 8001f6a:	f004 f851 	bl	8006010 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2017      	movs	r0, #23
 8001f74:	f003 fc67 	bl	8005846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f78:	2017      	movs	r0, #23
 8001f7a:	f003 fc80 	bl	800587e <HAL_NVIC_EnableIRQ>

}
 8001f7e:	bf00      	nop
 8001f80:	3730      	adds	r7, #48	; 0x30
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	10210000 	.word	0x10210000

08001fa4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <MX_I2C1_Init+0x74>)
 8001faa:	4a1c      	ldr	r2, [pc, #112]	; (800201c <MX_I2C1_Init+0x78>)
 8001fac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <MX_I2C1_Init+0x74>)
 8001fb0:	4a1b      	ldr	r2, [pc, #108]	; (8002020 <MX_I2C1_Init+0x7c>)
 8001fb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <MX_I2C1_Init+0x74>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <MX_I2C1_Init+0x74>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc0:	4b15      	ldr	r3, [pc, #84]	; (8002018 <MX_I2C1_Init+0x74>)
 8001fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <MX_I2C1_Init+0x74>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <MX_I2C1_Init+0x74>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <MX_I2C1_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <MX_I2C1_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <MX_I2C1_Init+0x74>)
 8001fe2:	f004 fa0b 	bl	80063fc <HAL_I2C_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fec:	f001 faee 	bl	80035cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4809      	ldr	r0, [pc, #36]	; (8002018 <MX_I2C1_Init+0x74>)
 8001ff4:	f004 fb46 	bl	8006684 <HAL_I2CEx_ConfigAnalogFilter>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001ffe:	f001 fae5 	bl	80035cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002002:	2100      	movs	r1, #0
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <MX_I2C1_Init+0x74>)
 8002006:	f004 fb79 	bl	80066fc <HAL_I2CEx_ConfigDigitalFilter>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002010:	f001 fadc 	bl	80035cc <Error_Handler>
  }

}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200003b4 	.word	0x200003b4
 800201c:	40005400 	.word	0x40005400
 8002020:	00061a80 	.word	0x00061a80

08002024 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <HAL_I2C_MspInit+0x84>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d12c      	bne.n	80020a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <HAL_I2C_MspInit+0x88>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a17      	ldr	r2, [pc, #92]	; (80020ac <HAL_I2C_MspInit+0x88>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_I2C_MspInit+0x88>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8002062:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002068:	2312      	movs	r3, #18
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800206c:	2301      	movs	r3, #1
 800206e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002074:	2304      	movs	r3, #4
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	480c      	ldr	r0, [pc, #48]	; (80020b0 <HAL_I2C_MspInit+0x8c>)
 8002080:	f003 ffc6 	bl	8006010 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <HAL_I2C_MspInit+0x88>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4a07      	ldr	r2, [pc, #28]	; (80020ac <HAL_I2C_MspInit+0x88>)
 800208e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_I2C_MspInit+0x88>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020a0:	bf00      	nop
 80020a2:	3728      	adds	r7, #40	; 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40005400 	.word	0x40005400
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020400 	.word	0x40020400
 80020b4:	00000000 	.word	0x00000000

080020b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b8:	b5b0      	push	{r4, r5, r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020be:	f002 fbef 	bl	80048a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c2:	f000 fcf9 	bl	8002ab8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 80020c6:	f004 ffdf 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4ab4      	ldr	r2, [pc, #720]	; (80023a0 <main+0x2e8>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	099b      	lsrs	r3, r3, #6
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 fbe0 	bl	800589a <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80020da:	2004      	movs	r0, #4
 80020dc:	f003 fbea 	bl	80058b4 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e8:	f003 fbad 	bl	8005846 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ec:	f7ff fe2a 	bl	8001d44 <MX_GPIO_Init>
  MX_DMA_Init();
 80020f0:	f7ff fd3a 	bl	8001b68 <MX_DMA_Init>
  MX_I2C1_Init();
 80020f4:	f7ff ff56 	bl	8001fa4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80020f8:	f001 fb9c 	bl	8003834 <MX_TIM1_Init>
  MX_TIM2_Init();
 80020fc:	f001 fc3a 	bl	8003974 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002100:	f001 fede 	bl	8003ec0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002104:	f001 fcaa 	bl	8003a5c <MX_TIM3_Init>
  MX_TIM8_Init();
 8002108:	f001 fd2a 	bl	8003b60 <MX_TIM8_Init>
  MX_CAN1_Init();
 800210c:	f7ff fc74 	bl	80019f8 <MX_CAN1_Init>
  MX_SPI1_Init();
 8002110:	f001 fa74 	bl	80035fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 8002114:	f001 ffb4 	bl	8004080 <joystick_Init>
	ADC_Init();
 8002118:	f7ff fa48 	bl	80015ac <ADC_Init>
	ADC_DataRequest();
 800211c:	f7ff fa88 	bl	8001630 <ADC_DataRequest>
	ENCODER_Init();
 8002120:	f7ff fd4a 	bl	8001bb8 <ENCODER_Init>
//		if (HAL_GetTick() - state_count > 5000)
//			Error_Handler();
//	}

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 8002124:	4b9f      	ldr	r3, [pc, #636]	; (80023a4 <main+0x2ec>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a9f      	ldr	r2, [pc, #636]	; (80023a8 <main+0x2f0>)
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	4b9c      	ldr	r3, [pc, #624]	; (80023a4 <main+0x2ec>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a9d      	ldr	r2, [pc, #628]	; (80023ac <main+0x2f4>)
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	ed93 7a00 	vldr	s14, [r3]
 8002140:	eef0 0a47 	vmov.f32	s1, s14
 8002144:	eeb0 0a67 	vmov.f32	s0, s15
 8002148:	4899      	ldr	r0, [pc, #612]	; (80023b0 <main+0x2f8>)
 800214a:	f002 f95f 	bl	800440c <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 800214e:	4899      	ldr	r0, [pc, #612]	; (80023b4 <main+0x2fc>)
 8002150:	f005 fc19 	bl	8007986 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8002154:	2100      	movs	r1, #0
 8002156:	4897      	ldr	r0, [pc, #604]	; (80023b4 <main+0x2fc>)
 8002158:	f005 fc6e 	bl	8007a38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 800215c:	2104      	movs	r1, #4
 800215e:	4895      	ldr	r0, [pc, #596]	; (80023b4 <main+0x2fc>)
 8002160:	f005 fc6a 	bl	8007a38 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8002164:	4b93      	ldr	r3, [pc, #588]	; (80023b4 <main+0x2fc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 800216e:	4b91      	ldr	r3, [pc, #580]	; (80023b4 <main+0x2fc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002176:	639a      	str	r2, [r3, #56]	; 0x38

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8002178:	488f      	ldr	r0, [pc, #572]	; (80023b8 <main+0x300>)
 800217a:	f7ff fa85 	bl	8001688 <bd25l_Init>
	bd25l_Init(&backMotor);
 800217e:	488f      	ldr	r0, [pc, #572]	; (80023bc <main+0x304>)
 8002180:	f7ff fa82 	bl	8001688 <bd25l_Init>
	runMotor(&rearMotor, 0);
 8002184:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80023c0 <main+0x308>
 8002188:	488b      	ldr	r0, [pc, #556]	; (80023b8 <main+0x300>)
 800218a:	f7ff fb85 	bl	8001898 <runMotor>
	runMotor(&backMotor, 0);
 800218e:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 80023c0 <main+0x308>
 8002192:	488a      	ldr	r0, [pc, #552]	; (80023bc <main+0x304>)
 8002194:	f7ff fb80 	bl	8001898 <runMotor>
	emBrakeMotor(0);
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff fa97 	bl	80016cc <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 800219e:	f7ff f911 	bl	80013c4 <hubMotor_Init>
	send_HubMotor(0, 0);
 80021a2:	eddf 0a87 	vldr	s1, [pc, #540]	; 80023c0 <main+0x308>
 80021a6:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80023c0 <main+0x308>
 80021aa:	f7ff f925 	bl	80013f8 <send_HubMotor>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 80021ae:	4b85      	ldr	r3, [pc, #532]	; (80023c4 <main+0x30c>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	4b84      	ldr	r3, [pc, #528]	; (80023c8 <main+0x310>)
 80021b6:	ed93 7a00 	vldr	s14, [r3]
 80021ba:	4b84      	ldr	r3, [pc, #528]	; (80023cc <main+0x314>)
 80021bc:	edd3 6a00 	vldr	s13, [r3]
 80021c0:	eeb0 1a66 	vmov.f32	s2, s13
 80021c4:	eef0 0a47 	vmov.f32	s1, s14
 80021c8:	eeb0 0a67 	vmov.f32	s0, s15
 80021cc:	4b80      	ldr	r3, [pc, #512]	; (80023d0 <main+0x318>)
 80021ce:	4a81      	ldr	r2, [pc, #516]	; (80023d4 <main+0x31c>)
 80021d0:	4981      	ldr	r1, [pc, #516]	; (80023d8 <main+0x320>)
 80021d2:	4882      	ldr	r0, [pc, #520]	; (80023dc <main+0x324>)
 80021d4:	f7fe fe8c 	bl	8000ef0 <pid_create>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a81      	ldr	r2, [pc, #516]	; (80023e0 <main+0x328>)
 80021dc:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -20, 20);
 80021de:	4b80      	ldr	r3, [pc, #512]	; (80023e0 <main+0x328>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80021e6:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f80c 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 80021f0:	4b7b      	ldr	r3, [pc, #492]	; (80023e0 <main+0x328>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe ffd2 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 80021fc:	4b78      	ldr	r3, [pc, #480]	; (80023e0 <main+0x328>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff f866 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 8002206:	4b77      	ldr	r3, [pc, #476]	; (80023e4 <main+0x32c>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <main+0x330>)
 800220e:	ed93 7a00 	vldr	s14, [r3]
 8002212:	4b76      	ldr	r3, [pc, #472]	; (80023ec <main+0x334>)
 8002214:	edd3 6a00 	vldr	s13, [r3]
 8002218:	eeb0 1a66 	vmov.f32	s2, s13
 800221c:	eef0 0a47 	vmov.f32	s1, s14
 8002220:	eeb0 0a67 	vmov.f32	s0, s15
 8002224:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <main+0x338>)
 8002226:	4a73      	ldr	r2, [pc, #460]	; (80023f4 <main+0x33c>)
 8002228:	4973      	ldr	r1, [pc, #460]	; (80023f8 <main+0x340>)
 800222a:	4874      	ldr	r0, [pc, #464]	; (80023fc <main+0x344>)
 800222c:	f7fe fe60 	bl	8000ef0 <pid_create>
 8002230:	4603      	mov	r3, r0
 8002232:	4a73      	ldr	r2, [pc, #460]	; (8002400 <main+0x348>)
 8002234:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -20, 20);
 8002236:	4b72      	ldr	r3, [pc, #456]	; (8002400 <main+0x348>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800223e:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe ffe0 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 8002248:	4b6d      	ldr	r3, [pc, #436]	; (8002400 <main+0x348>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2101      	movs	r1, #1
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe ffa6 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 8002254:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <main+0x348>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff f83a 	bl	80012d2 <pid_auto>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 800225e:	f002 fb85 	bl	800496c <HAL_GetTick>
 8002262:	6078      	str	r0, [r7, #4]
	ENCODER_Get_Angle(&encoderBack);
 8002264:	4867      	ldr	r0, [pc, #412]	; (8002404 <main+0x34c>)
 8002266:	f7ff fd38 	bl	8001cda <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 800226a:	4867      	ldr	r0, [pc, #412]	; (8002408 <main+0x350>)
 800226c:	f7ff fd35 	bl	8001cda <ENCODER_Get_Angle>
//	while (state_count++ < 1000)
//		MPU6050_Read_All(&hi2c1, &MPU6050);
//	initial_angle = MPU6050.KalmanAngleX;
	state_count = 0;
 8002270:	4b66      	ldr	r3, [pc, #408]	; (800240c <main+0x354>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 8002276:	2001      	movs	r0, #1
 8002278:	f7ff fa28 	bl	80016cc <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 800227c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002280:	f002 fb80 	bl	8004984 <HAL_Delay>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 8002284:	f002 fb72 	bl	800496c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4293      	cmp	r3, r2
 800228e:	d0f9      	beq.n	8002284 <main+0x1cc>
		{
			ADC_DataRequest();
 8002290:	f7ff f9ce 	bl	8001630 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 8002294:	485b      	ldr	r0, [pc, #364]	; (8002404 <main+0x34c>)
 8002296:	f7ff fcf8 	bl	8001c8a <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 800229a:	485b      	ldr	r0, [pc, #364]	; (8002408 <main+0x350>)
 800229c:	f7ff fcf5 	bl	8001c8a <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
//			MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Input(&button1, 30);
 80022a0:	211e      	movs	r1, #30
 80022a2:	485b      	ldr	r0, [pc, #364]	; (8002410 <main+0x358>)
 80022a4:	f7ff fb6f 	bl	8001986 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 80022a8:	211e      	movs	r1, #30
 80022aa:	485a      	ldr	r0, [pc, #360]	; (8002414 <main+0x35c>)
 80022ac:	f7ff fb6b 	bl	8001986 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 80022b0:	211e      	movs	r1, #30
 80022b2:	4859      	ldr	r0, [pc, #356]	; (8002418 <main+0x360>)
 80022b4:	f7ff fb67 	bl	8001986 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 80022b8:	2105      	movs	r1, #5
 80022ba:	4858      	ldr	r0, [pc, #352]	; (800241c <main+0x364>)
 80022bc:	f7ff fb63 	bl	8001986 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 80022c0:	2105      	movs	r1, #5
 80022c2:	4857      	ldr	r0, [pc, #348]	; (8002420 <main+0x368>)
 80022c4:	f7ff fb5f 	bl	8001986 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 80022c8:	2105      	movs	r1, #5
 80022ca:	4856      	ldr	r0, [pc, #344]	; (8002424 <main+0x36c>)
 80022cc:	f7ff fb5b 	bl	8001986 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 80022d0:	2105      	movs	r1, #5
 80022d2:	4855      	ldr	r0, [pc, #340]	; (8002428 <main+0x370>)
 80022d4:	f7ff fb57 	bl	8001986 <GPIO_Digital_Filtered_Input>
			 *	1. Climbing wheel extension.
			 *	2. Wheelchair lifting/dropping
			 *	3. Climbing wheel retraction
			 *-------------------------------------------------------------------*/
			//when button3 is pressed, Extend climbing wheel until both wheel touches the ground
			if ((button3.state == 1 || button_prev_state == 1)
 80022d8:	4b4f      	ldr	r3, [pc, #316]	; (8002418 <main+0x360>)
 80022da:	7a1b      	ldrb	r3, [r3, #8]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d003      	beq.n	80022e8 <main+0x230>
 80022e0:	4b52      	ldr	r3, [pc, #328]	; (800242c <main+0x374>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d038      	beq.n	800235a <main+0x2a2>
					&& climb_first_iteration == true)
 80022e8:	4b51      	ldr	r3, [pc, #324]	; (8002430 <main+0x378>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d034      	beq.n	800235a <main+0x2a2>
			{
				button_prev_state = 1;
 80022f0:	4b4e      	ldr	r3, [pc, #312]	; (800242c <main+0x374>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
				if (abs(encoderFront.signed_encoder_pos) >= 150
 80022f6:	4b44      	ldr	r3, [pc, #272]	; (8002408 <main+0x350>)
 80022f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bfb8      	it	lt
 80022fe:	425b      	neglt	r3, r3
 8002300:	2b95      	cmp	r3, #149	; 0x95
 8002302:	dc06      	bgt.n	8002312 <main+0x25a>
						|| abs(encoderBack.signed_encoder_pos) >= 150)
 8002304:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <main+0x34c>)
 8002306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002308:	2b00      	cmp	r3, #0
 800230a:	bfb8      	it	lt
 800230c:	425b      	neglt	r3, r3
 800230e:	2b95      	cmp	r3, #149	; 0x95
 8002310:	dd0f      	ble.n	8002332 <main+0x27a>
				{
					goto_pos(0, frontClimb_pid);
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <main+0x328>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4619      	mov	r1, r3
 8002318:	2000      	movs	r0, #0
 800231a:	f000 ff45 	bl	80031a8 <goto_pos>
					goto_pos(0, backClimb_pid);
 800231e:	4b38      	ldr	r3, [pc, #224]	; (8002400 <main+0x348>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	2000      	movs	r0, #0
 8002326:	f000 ff3f 	bl	80031a8 <goto_pos>
					lifting_mode = EMPTY;
 800232a:	4b42      	ldr	r3, [pc, #264]	; (8002434 <main+0x37c>)
 800232c:	2205      	movs	r2, #5
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	e013      	b.n	800235a <main+0x2a2>
				}
				else
				{
					runMotor(&rearMotor, 0);
 8002332:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80023c0 <main+0x308>
 8002336:	4820      	ldr	r0, [pc, #128]	; (80023b8 <main+0x300>)
 8002338:	f7ff faae 	bl	8001898 <runMotor>
					runMotor(&backMotor, 0);
 800233c:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80023c0 <main+0x308>
 8002340:	481e      	ldr	r0, [pc, #120]	; (80023bc <main+0x304>)
 8002342:	f7ff faa9 	bl	8001898 <runMotor>
					lifting_mode = LANDING;
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <main+0x37c>)
 8002348:	2204      	movs	r2, #4
 800234a:	701a      	strb	r2, [r3, #0]
					button_prev_state = 0;
 800234c:	4b37      	ldr	r3, [pc, #220]	; (800242c <main+0x374>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 8002352:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002356:	f002 fb15 	bl	8004984 <HAL_Delay>

				}
			}

			if (front_touchdown == false && back_touchdown == false
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <main+0x380>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f083 0301 	eor.w	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8115 	beq.w	8002594 <main+0x4dc>
 800236a:	4b34      	ldr	r3, [pc, #208]	; (800243c <main+0x384>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	f083 0301 	eor.w	r3, r3, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 810d 	beq.w	8002594 <main+0x4dc>
					&& lifting_mode == LANDING)
 800237a:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <main+0x37c>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b04      	cmp	r3, #4
 8002380:	f040 8108 	bne.w	8002594 <main+0x4dc>
			{
				//Stop the base wheel completely
				baseWheelSpeed.cur_r = 0;
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <main+0x2f8>)
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	605a      	str	r2, [r3, #4]
				baseWheelSpeed.cur_l = 0;
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <main+0x2f8>)
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
				baseMotorCommand();
 8002394:	f000 fdf4 	bl	8002f80 <baseMotorCommand>

				//Disengage the motor brake
				emBrakeMotor(1);
 8002398:	2001      	movs	r0, #1
 800239a:	f7ff f997 	bl	80016cc <emBrakeMotor>

				//Start landing process
				while (front_touchdown == false || back_touchdown == false)
 800239e:	e0c0      	b.n	8002522 <main+0x46a>
 80023a0:	10624dd3 	.word	0x10624dd3
 80023a4:	200001c0 	.word	0x200001c0
 80023a8:	0800c0f0 	.word	0x0800c0f0
 80023ac:	0800c0fc 	.word	0x0800c0fc
 80023b0:	200000d8 	.word	0x200000d8
 80023b4:	2000054c 	.word	0x2000054c
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000034 	.word	0x20000034
 80023c0:	00000000 	.word	0x00000000
 80023c4:	2000010c 	.word	0x2000010c
 80023c8:	20000110 	.word	0x20000110
 80023cc:	20000114 	.word	0x20000114
 80023d0:	200001d8 	.word	0x200001d8
 80023d4:	200001d4 	.word	0x200001d4
 80023d8:	200001d0 	.word	0x200001d0
 80023dc:	200004c0 	.word	0x200004c0
 80023e0:	200004bc 	.word	0x200004bc
 80023e4:	20000118 	.word	0x20000118
 80023e8:	2000011c 	.word	0x2000011c
 80023ec:	20000120 	.word	0x20000120
 80023f0:	200001e4 	.word	0x200001e4
 80023f4:	200001e0 	.word	0x200001e0
 80023f8:	200001dc 	.word	0x200001dc
 80023fc:	20000478 	.word	0x20000478
 8002400:	20000508 	.word	0x20000508
 8002404:	2000035c 	.word	0x2000035c
 8002408:	20000304 	.word	0x20000304
 800240c:	200001fc 	.word	0x200001fc
 8002410:	200000a8 	.word	0x200000a8
 8002414:	200000b8 	.word	0x200000b8
 8002418:	200000c8 	.word	0x200000c8
 800241c:	20000068 	.word	0x20000068
 8002420:	20000078 	.word	0x20000078
 8002424:	20000088 	.word	0x20000088
 8002428:	20000098 	.word	0x20000098
 800242c:	200001c6 	.word	0x200001c6
 8002430:	20000109 	.word	0x20000109
 8002434:	20000108 	.word	0x20000108
 8002438:	200001c4 	.word	0x200001c4
 800243c:	200001c5 	.word	0x200001c5
				{
					if (GPIO_Digital_Filtered_Input(&rearLS1, 5)
 8002440:	2105      	movs	r1, #5
 8002442:	4848      	ldr	r0, [pc, #288]	; (8002564 <main+0x4ac>)
 8002444:	f7ff fa9f 	bl	8001986 <GPIO_Digital_Filtered_Input>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <main+0x3a4>
							|| GPIO_Digital_Filtered_Input(&rearLS2, 5))
 800244e:	2105      	movs	r1, #5
 8002450:	4845      	ldr	r0, [pc, #276]	; (8002568 <main+0x4b0>)
 8002452:	f7ff fa98 	bl	8001986 <GPIO_Digital_Filtered_Input>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <main+0x3aa>
						front_touchdown = 1;
 800245c:	4b43      	ldr	r3, [pc, #268]	; (800256c <main+0x4b4>)
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
					if (GPIO_Digital_Filtered_Input(&backLS1, 5)
 8002462:	2105      	movs	r1, #5
 8002464:	4842      	ldr	r0, [pc, #264]	; (8002570 <main+0x4b8>)
 8002466:	f7ff fa8e 	bl	8001986 <GPIO_Digital_Filtered_Input>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <main+0x3c6>
							|| GPIO_Digital_Filtered_Input(&backLS2, 5))
 8002470:	2105      	movs	r1, #5
 8002472:	4840      	ldr	r0, [pc, #256]	; (8002574 <main+0x4bc>)
 8002474:	f7ff fa87 	bl	8001986 <GPIO_Digital_Filtered_Input>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <main+0x3cc>
						back_touchdown = 1;
 800247e:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <main+0x4c0>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]

					//if front touch before back, climbing up process
					if (back_touchdown == 0 && front_touchdown == 1
 8002484:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <main+0x4c0>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	f083 0301 	eor.w	r3, r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <main+0x3f2>
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <main+0x4b4>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <main+0x3f2>
							&& lifting_mode == LANDING)
 800249a:	4b38      	ldr	r3, [pc, #224]	; (800257c <main+0x4c4>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d103      	bne.n	80024aa <main+0x3f2>
						lifting_mode = CLIMB_UP;
 80024a2:	4b36      	ldr	r3, [pc, #216]	; (800257c <main+0x4c4>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e011      	b.n	80024ce <main+0x416>
					//if back touch before front, climbing down process
					else if (back_touchdown == 1 && front_touchdown == 0
 80024aa:	4b33      	ldr	r3, [pc, #204]	; (8002578 <main+0x4c0>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <main+0x416>
 80024b2:	4b2e      	ldr	r3, [pc, #184]	; (800256c <main+0x4b4>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	f083 0301 	eor.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <main+0x416>
							&& lifting_mode == LANDING)
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <main+0x4c4>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d102      	bne.n	80024ce <main+0x416>
						lifting_mode = CLIMB_DOWN;
 80024c8:	4b2c      	ldr	r3, [pc, #176]	; (800257c <main+0x4c4>)
 80024ca:	2202      	movs	r2, #2
 80024cc:	701a      	strb	r2, [r3, #0]

//					initial_angle = exp_angle_filter * MPU6050.KalmanAngleXf

					ENCODER_Read(&encoderBack);
 80024ce:	482c      	ldr	r0, [pc, #176]	; (8002580 <main+0x4c8>)
 80024d0:	f7ff fbdb 	bl	8001c8a <ENCODER_Read>
					ENCODER_Read(&encoderFront);
 80024d4:	482b      	ldr	r0, [pc, #172]	; (8002584 <main+0x4cc>)
 80024d6:	f7ff fbd8 	bl	8001c8a <ENCODER_Read>

					if (back_touchdown == false)
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <main+0x4c0>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f083 0301 	eor.w	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <main+0x43c>
						runMotor(&backMotor, 5);
 80024e8:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80024ec:	4826      	ldr	r0, [pc, #152]	; (8002588 <main+0x4d0>)
 80024ee:	f7ff f9d3 	bl	8001898 <runMotor>
 80024f2:	e004      	b.n	80024fe <main+0x446>
					else
						runMotor(&backMotor, 0);
 80024f4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800258c <main+0x4d4>
 80024f8:	4823      	ldr	r0, [pc, #140]	; (8002588 <main+0x4d0>)
 80024fa:	f7ff f9cd 	bl	8001898 <runMotor>

					if (front_touchdown == false)
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <main+0x4b4>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	f083 0301 	eor.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <main+0x460>
						runMotor(&rearMotor, 5);
 800250c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002510:	481f      	ldr	r0, [pc, #124]	; (8002590 <main+0x4d8>)
 8002512:	f7ff f9c1 	bl	8001898 <runMotor>
 8002516:	e004      	b.n	8002522 <main+0x46a>
					else
						runMotor(&rearMotor, 0);
 8002518:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800258c <main+0x4d4>
 800251c:	481c      	ldr	r0, [pc, #112]	; (8002590 <main+0x4d8>)
 800251e:	f7ff f9bb 	bl	8001898 <runMotor>
				while (front_touchdown == false || back_touchdown == false)
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <main+0x4b4>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	f083 0301 	eor.w	r3, r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d187      	bne.n	8002440 <main+0x388>
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <main+0x4c0>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f083 0301 	eor.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d180      	bne.n	8002440 <main+0x388>

				}
				runMotor(&rearMotor, 0);
 800253e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800258c <main+0x4d4>
 8002542:	4813      	ldr	r0, [pc, #76]	; (8002590 <main+0x4d8>)
 8002544:	f7ff f9a8 	bl	8001898 <runMotor>
				runMotor(&backMotor, 0);
 8002548:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800258c <main+0x4d4>
 800254c:	480e      	ldr	r0, [pc, #56]	; (8002588 <main+0x4d0>)
 800254e:	f7ff f9a3 	bl	8001898 <runMotor>
				emBrakeMotor(0);
 8002552:	2000      	movs	r0, #0
 8002554:	f7ff f8ba 	bl	80016cc <emBrakeMotor>
				HAL_Delay(500);
 8002558:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800255c:	f002 fa12 	bl	8004984 <HAL_Delay>
				continue; //to refresh the loop and get the latest encoder reading
 8002560:	e28b      	b.n	8002a7a <main+0x9c2>
 8002562:	bf00      	nop
 8002564:	20000068 	.word	0x20000068
 8002568:	20000078 	.word	0x20000078
 800256c:	200001c4 	.word	0x200001c4
 8002570:	20000088 	.word	0x20000088
 8002574:	20000098 	.word	0x20000098
 8002578:	200001c5 	.word	0x200001c5
 800257c:	20000108 	.word	0x20000108
 8002580:	2000035c 	.word	0x2000035c
 8002584:	20000304 	.word	0x20000304
 8002588:	20000034 	.word	0x20000034
 800258c:	00000000 	.word	0x00000000
 8002590:	20000000 	.word	0x20000000
			}
//			//Normal wheelchair mode, basic joystick control mode
			if (lifting_mode == NORMAL)
 8002594:	4b94      	ldr	r3, [pc, #592]	; (80027e8 <main+0x730>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11f      	bne.n	80025dc <main+0x524>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	2108      	movs	r1, #8
 80025a0:	4892      	ldr	r0, [pc, #584]	; (80027ec <main+0x734>)
 80025a2:	f003 fef9 	bl	8006398 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2110      	movs	r1, #16
 80025aa:	4890      	ldr	r0, [pc, #576]	; (80027ec <main+0x734>)
 80025ac:	f003 fef4 	bl	8006398 <HAL_GPIO_WritePin>
				wheel_Control(&baseWheelSpeed);
 80025b0:	488f      	ldr	r0, [pc, #572]	; (80027f0 <main+0x738>)
 80025b2:	f001 ff55 	bl	8004460 <wheel_Control>
				baseMotorCommand();
 80025b6:	f000 fce3 	bl	8002f80 <baseMotorCommand>
				front_touchdown = false;
 80025ba:	4b8e      	ldr	r3, [pc, #568]	; (80027f4 <main+0x73c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
				back_touchdown = false;
 80025c0:	4b8d      	ldr	r3, [pc, #564]	; (80027f8 <main+0x740>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
				climb_first_iteration = true;
 80025c6:	4b8d      	ldr	r3, [pc, #564]	; (80027fc <main+0x744>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
				speed[FRONT_INDEX] = 0;
 80025cc:	4b8c      	ldr	r3, [pc, #560]	; (8002800 <main+0x748>)
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
				speed[BACK_INDEX] = 0;
 80025d4:	4b8a      	ldr	r3, [pc, #552]	; (8002800 <main+0x748>)
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
			}
//			//Climbing up process
			if (lifting_mode == CLIMB_UP)
 80025dc:	4b82      	ldr	r3, [pc, #520]	; (80027e8 <main+0x730>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	f040 812d 	bne.w	8002840 <main+0x788>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80025e6:	2201      	movs	r2, #1
 80025e8:	2108      	movs	r1, #8
 80025ea:	4880      	ldr	r0, [pc, #512]	; (80027ec <main+0x734>)
 80025ec:	f003 fed4 	bl	8006398 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 80025f0:	4b82      	ldr	r3, [pc, #520]	; (80027fc <main+0x744>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80d6 	beq.w	80027a6 <main+0x6ee>
				{
					//If curb_height is positive, should be climbing up process and vice versa
					curb_height = CLIMBING_LEG_LENGTH
							* cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT
 80025fa:	4b82      	ldr	r3, [pc, #520]	; (8002804 <main+0x74c>)
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ff5b 	bl	80004b8 <__aeabi_f2d>
 8002602:	4604      	mov	r4, r0
 8002604:	460d      	mov	r5, r1
 8002606:	4b80      	ldr	r3, [pc, #512]	; (8002808 <main+0x750>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4618      	mov	r0, r3
 800260c:	f7fd ff54 	bl	80004b8 <__aeabi_f2d>
 8002610:	a36f      	add	r3, pc, #444	; (adr r3, 80027d0 <main+0x718>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd ffa7 	bl	8000568 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	4b79      	ldr	r3, [pc, #484]	; (800280c <main+0x754>)
 8002628:	f7fe f8c8 	bl	80007bc <__aeabi_ddiv>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	ec43 2b17 	vmov	d7, r2, r3
 8002634:	eeb0 0a47 	vmov.f32	s0, s14
 8002638:	eef0 0a67 	vmov.f32	s1, s15
 800263c:	f007 f9fc 	bl	8009a38 <cos>
 8002640:	ec53 2b10 	vmov	r2, r3, d0
 8002644:	4620      	mov	r0, r4
 8002646:	4629      	mov	r1, r5
 8002648:	f7fd ff8e 	bl	8000568 <__aeabi_dmul>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4614      	mov	r4, r2
 8002652:	461d      	mov	r5, r3
 8002654:	4b6e      	ldr	r3, [pc, #440]	; (8002810 <main+0x758>)
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd ff2e 	bl	80004b8 <__aeabi_f2d>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4620      	mov	r0, r4
 8002662:	4629      	mov	r1, r5
 8002664:	f7fd fdca 	bl	80001fc <__adddf3>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
							- FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	4b67      	ldr	r3, [pc, #412]	; (8002814 <main+0x75c>)
 8002676:	f7fd fdbf 	bl	80001f8 <__aeabi_dsub>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fa69 	bl	8000b58 <__aeabi_d2f>
 8002686:	4603      	mov	r3, r0
					curb_height = CLIMBING_LEG_LENGTH
 8002688:	4a63      	ldr	r2, [pc, #396]	; (8002818 <main+0x760>)
 800268a:	6013      	str	r3, [r2, #0]
					curb_height += 0.035; //Small error correction 10%
 800268c:	4b62      	ldr	r3, [pc, #392]	; (8002818 <main+0x760>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd ff11 	bl	80004b8 <__aeabi_f2d>
 8002696:	a350      	add	r3, pc, #320	; (adr r3, 80027d8 <main+0x720>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fd fdae 	bl	80001fc <__adddf3>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fe fa56 	bl	8000b58 <__aeabi_d2f>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4a5a      	ldr	r2, [pc, #360]	; (8002818 <main+0x760>)
 80026b0:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 80026b2:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800281c <main+0x764>
 80026b6:	4b58      	ldr	r3, [pc, #352]	; (8002818 <main+0x760>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c0:	ee17 0a90 	vmov	r0, s15
 80026c4:	f7fd fef8 	bl	80004b8 <__aeabi_f2d>
							- HUB_DIAMETER / 2;
 80026c8:	a345      	add	r3, pc, #276	; (adr r3, 80027e0 <main+0x728>)
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	f7fd fd93 	bl	80001f8 <__aeabi_dsub>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	f7fe fa3d 	bl	8000b58 <__aeabi_d2f>
 80026de:	4603      	mov	r3, r0
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 80026e0:	4a4f      	ldr	r2, [pc, #316]	; (8002820 <main+0x768>)
 80026e2:	6013      	str	r3, [r2, #0]
					back_lifting_angle =
					TO_DEG(
 80026e4:	4b4e      	ldr	r3, [pc, #312]	; (8002820 <main+0x768>)
 80026e6:	edd3 7a00 	vldr	s15, [r3]
 80026ea:	eef1 7a67 	vneg.f32	s15, s15
 80026ee:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002824 <main+0x76c>
 80026f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026f6:	ee16 0a90 	vmov	r0, s13
 80026fa:	f7fd fedd 	bl	80004b8 <__aeabi_f2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	ec43 2b10 	vmov	d0, r2, r3
 8002706:	f007 fa47 	bl	8009b98 <acos>
 800270a:	ec53 2b10 	vmov	r2, r3, d0
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f7fe fa21 	bl	8000b58 <__aeabi_d2f>
 8002716:	ee07 0a10 	vmov	s14, r0
 800271a:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002828 <main+0x770>
 800271e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002722:	ee17 0a90 	vmov	r0, s15
 8002726:	f7fd fec7 	bl	80004b8 <__aeabi_f2d>
 800272a:	a329      	add	r3, pc, #164	; (adr r3, 80027d0 <main+0x718>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	f7fe f844 	bl	80007bc <__aeabi_ddiv>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
							(float )acos(
									-back_lifting_height
									/ CLIMBING_LEG_LENGTH)) - 30.0; //30.0 is the bending angle of the extender(originally 36.6).
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b3a      	ldr	r3, [pc, #232]	; (800282c <main+0x774>)
 8002742:	f7fd fd59 	bl	80001f8 <__aeabi_dsub>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f7fe fa03 	bl	8000b58 <__aeabi_d2f>
 8002752:	4603      	mov	r3, r0
					back_lifting_angle =
 8002754:	4a36      	ldr	r2, [pc, #216]	; (8002830 <main+0x778>)
 8002756:	6013      	str	r3, [r2, #0]
					back_encoder_input = (back_lifting_angle / 360.0)
 8002758:	4b35      	ldr	r3, [pc, #212]	; (8002830 <main+0x778>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd feab 	bl	80004b8 <__aeabi_f2d>
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	4b33      	ldr	r3, [pc, #204]	; (8002834 <main+0x77c>)
 8002768:	f7fe f828 	bl	80007bc <__aeabi_ddiv>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
							* (4096 * BACK_GEAR_RATIO);
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <main+0x780>)
 800277a:	f7fd fef5 	bl	8000568 <__aeabi_dmul>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
					back_encoder_input = (back_lifting_angle / 360.0)
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	f7fe f99f 	bl	8000ac8 <__aeabi_d2iz>
 800278a:	4603      	mov	r3, r0
 800278c:	4a2b      	ldr	r2, [pc, #172]	; (800283c <main+0x784>)
 800278e:	6013      	str	r3, [r2, #0]
//								|| curb_height <= 0.05 )
//					{
//						lifting_mode = RETRACTION;
//						continue;
//					}
					speed[BACK_INDEX] = 0;
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <main+0x748>)
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <main+0x748>)
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
					climb_first_iteration = false;
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <main+0x744>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
//				}
				//20cm Height of curb   && !(climbingForward(forward_distance))

//				goto_pos(0, frontClimb_pid);
//				goto_pos(0, backClimb_pid);
				if (!in_climb_process(0, 0)
 80027a6:	2100      	movs	r1, #0
 80027a8:	2000      	movs	r0, #0
 80027aa:	f000 fded 	bl	8003388 <in_climb_process>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f083 0301 	eor.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 808f 	beq.w	80028da <main+0x822>
						)
				{
					lifting_mode = IDLE;
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <main+0x730>)
 80027be:	2206      	movs	r2, #6
 80027c0:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 80027c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027c6:	f002 f8dd 	bl	8004984 <HAL_Delay>
 80027ca:	e086      	b.n	80028da <main+0x822>
 80027cc:	f3af 8000 	nop.w
 80027d0:	54442d18 	.word	0x54442d18
 80027d4:	400921fb 	.word	0x400921fb
 80027d8:	1eb851ec 	.word	0x1eb851ec
 80027dc:	3fa1eb85 	.word	0x3fa1eb85
 80027e0:	916872b0 	.word	0x916872b0
 80027e4:	3faf7ced 	.word	0x3faf7ced
 80027e8:	20000108 	.word	0x20000108
 80027ec:	40020400 	.word	0x40020400
 80027f0:	200000d8 	.word	0x200000d8
 80027f4:	200001c4 	.word	0x200001c4
 80027f8:	200001c5 	.word	0x200001c5
 80027fc:	20000109 	.word	0x20000109
 8002800:	200001c8 	.word	0x200001c8
 8002804:	3eb2b021 	.word	0x3eb2b021
 8002808:	20000304 	.word	0x20000304
 800280c:	40668000 	.word	0x40668000
 8002810:	3e19999a 	.word	0x3e19999a
 8002814:	3fb00000 	.word	0x3fb00000
 8002818:	200001e8 	.word	0x200001e8
 800281c:	3e19999a 	.word	0x3e19999a
 8002820:	200001f0 	.word	0x200001f0
 8002824:	3eb2b021 	.word	0x3eb2b021
 8002828:	43340000 	.word	0x43340000
 800282c:	403e0000 	.word	0x403e0000
 8002830:	200001f4 	.word	0x200001f4
 8002834:	40768000 	.word	0x40768000
 8002838:	40c00000 	.word	0x40c00000
 800283c:	200001f8 	.word	0x200001f8
//					HAL_Delay(500);
//				}

			}

			else if (lifting_mode == CLIMB_DOWN)
 8002840:	4b91      	ldr	r3, [pc, #580]	; (8002a88 <main+0x9d0>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d148      	bne.n	80028da <main+0x822>
			{
				//Climbing down process
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002848:	2201      	movs	r2, #1
 800284a:	2110      	movs	r1, #16
 800284c:	488f      	ldr	r0, [pc, #572]	; (8002a8c <main+0x9d4>)
 800284e:	f003 fda3 	bl	8006398 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 8002852:	4b8f      	ldr	r3, [pc, #572]	; (8002a90 <main+0x9d8>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01d      	beq.n	8002896 <main+0x7de>
				{
					front_climbDown_enc = encoderFront.encoder_pos
 800285a:	4b8e      	ldr	r3, [pc, #568]	; (8002a94 <main+0x9dc>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							+ 3.0 / 360.0 * 4096 * FRONT_GEAR_RATIO;
 800285e:	4618      	mov	r0, r3
 8002860:	f7fd fe08 	bl	8000474 <__aeabi_ui2d>
 8002864:	a386      	add	r3, pc, #536	; (adr r3, 8002a80 <main+0x9c8>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	f7fd fcc7 	bl	80001fc <__adddf3>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
					front_climbDown_enc = encoderFront.encoder_pos
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f7fe f927 	bl	8000ac8 <__aeabi_d2iz>
 800287a:	4603      	mov	r3, r0
 800287c:	4a86      	ldr	r2, [pc, #536]	; (8002a98 <main+0x9e0>)
 800287e:	6013      	str	r3, [r2, #0]
//					if (front_climbDown_enc > MAX_FRONT_ALLOWABLE_ENC )
//					{
//						lifting_mode = RETRACTION;
//						continue;
//					}
					climb_first_iteration = false;
 8002880:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <main+0x9d8>)
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]

					speed[BACK_INDEX] = 0;
 8002886:	4b85      	ldr	r3, [pc, #532]	; (8002a9c <main+0x9e4>)
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 800288e:	4b83      	ldr	r3, [pc, #524]	; (8002a9c <main+0x9e4>)
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
				}

				if (!in_climb_process(front_climbDown_enc,
 8002896:	4b80      	ldr	r3, [pc, #512]	; (8002a98 <main+0x9e0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fd71 	bl	8003388 <in_climb_process>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f083 0301 	eor.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d013      	beq.n	80028da <main+0x822>
						MAX_BACK_CLIMBING_ENC)
						&& !(climbingForward(forward_distance)))
 80028b2:	4b7b      	ldr	r3, [pc, #492]	; (8002aa0 <main+0x9e8>)
 80028b4:	edd3 7a00 	vldr	s15, [r3]
 80028b8:	eeb0 0a67 	vmov.f32	s0, s15
 80028bc:	f000 fb84 	bl	8002fc8 <climbingForward>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <main+0x822>
				{
					lifting_mode = RETRACTION;
 80028cc:	4b6e      	ldr	r3, [pc, #440]	; (8002a88 <main+0x9d0>)
 80028ce:	2203      	movs	r2, #3
 80028d0:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 80028d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028d6:	f002 f855 	bl	8004984 <HAL_Delay>
				}
			}
//
			if (lifting_mode == RETRACTION)
 80028da:	4b6b      	ldr	r3, [pc, #428]	; (8002a88 <main+0x9d0>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d129      	bne.n	8002936 <main+0x87e>
			{

				//retraction process
				if (abs(
						encoderBack.encoder_pos
 80028e2:	4b70      	ldr	r3, [pc, #448]	; (8002aa4 <main+0x9ec>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
								- (MIN_BACK_ALLOWABLE_ENC)) > 100
 80028e6:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 80028ea:	1a9b      	subs	r3, r3, r2
				if (abs(
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bfb8      	it	lt
 80028f0:	425b      	neglt	r3, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	dc09      	bgt.n	800290a <main+0x852>
						|| abs(
								encoderFront.encoder_pos
 80028f6:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <main+0x9dc>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
										- (MIN_FRONT_ALLOWABLE_ENC))
 80028fa:	f641 2290 	movw	r2, #6800	; 0x1a90
 80028fe:	1a9b      	subs	r3, r3, r2
						|| abs(
 8002900:	2b00      	cmp	r3, #0
 8002902:	bfb8      	it	lt
 8002904:	425b      	neglt	r3, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	dd12      	ble.n	8002930 <main+0x878>
								> 100)
				{
					goto_pos(MIN_BACK_ALLOWABLE_ENC, backClimb_pid);
 800290a:	f641 43e8 	movw	r3, #7400	; 0x1ce8
 800290e:	461a      	mov	r2, r3
 8002910:	4b65      	ldr	r3, [pc, #404]	; (8002aa8 <main+0x9f0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f000 fc46 	bl	80031a8 <goto_pos>
					goto_pos(MIN_FRONT_ALLOWABLE_ENC, frontClimb_pid);
 800291c:	f641 2390 	movw	r3, #6800	; 0x1a90
 8002920:	461a      	mov	r2, r3
 8002922:	4b62      	ldr	r3, [pc, #392]	; (8002aac <main+0x9f4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f000 fc3d 	bl	80031a8 <goto_pos>
 800292e:	e002      	b.n	8002936 <main+0x87e>
				}
				else
				{

					lifting_mode = NORMAL;
 8002930:	4b55      	ldr	r3, [pc, #340]	; (8002a88 <main+0x9d0>)
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]

			}

//			!Must not comment the following section
			//Deadzone of climbing motor, force zero to avoid noise
			if (fabs(speed[FRONT_INDEX]) < 4)
 8002936:	4b59      	ldr	r3, [pc, #356]	; (8002a9c <main+0x9e4>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	eef0 7ae7 	vabs.f32	s15, s15
 8002940:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	d503      	bpl.n	8002956 <main+0x89e>
				speed[FRONT_INDEX] = 0;
 800294e:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <main+0x9e4>)
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 4)
 8002956:	4b51      	ldr	r3, [pc, #324]	; (8002a9c <main+0x9e4>)
 8002958:	edd3 7a01 	vldr	s15, [r3, #4]
 800295c:	eef0 7ae7 	vabs.f32	s15, s15
 8002960:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296c:	d503      	bpl.n	8002976 <main+0x8be>
				speed[BACK_INDEX] = 0;
 800296e:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <main+0x9e4>)
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	605a      	str	r2, [r3, #4]
			//*****VERY IMPORTANT AND MUST NOT BE COMMENTED OUT**********************************//
			//Safety check for to avoid the climbing leg overturn
			if (encoderFront.encoder_pos < FRONT_FULL_ROTATION_ENC / 2){
 8002976:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <main+0x9dc>)
 8002978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800297a:	f242 3333 	movw	r3, #9011	; 0x2333
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	429a      	cmp	r2, r3
 8002982:	d212      	bcs.n	80029aa <main+0x8f2>
				if (encoderFront.encoder_pos > MAX_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] > 0)
 8002984:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <main+0x9dc>)
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f640 421c 	movw	r2, #3100	; 0xc1c
 800298c:	4293      	cmp	r3, r2
 800298e:	d91e      	bls.n	80029ce <main+0x916>
 8002990:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <main+0x9e4>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299e:	dd16      	ble.n	80029ce <main+0x916>
					speed[FRONT_INDEX] = 0;
 80029a0:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <main+0x9e4>)
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e011      	b.n	80029ce <main+0x916>
			}
			else{
				if (encoderFront.encoder_pos < MIN_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] < 0)
 80029aa:	4b3a      	ldr	r3, [pc, #232]	; (8002a94 <main+0x9dc>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f641 2290 	movw	r2, #6800	; 0x1a90
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d20b      	bcs.n	80029ce <main+0x916>
 80029b6:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <main+0x9e4>)
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c4:	d503      	bpl.n	80029ce <main+0x916>
					speed[FRONT_INDEX] = 0;
 80029c6:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <main+0x9e4>)
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
			}

			if (encoderBack.encoder_pos < BACK_FULL_ROTATION_ENC / 2){
 80029ce:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <main+0x9ec>)
 80029d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	429a      	cmp	r2, r3
 80029da:	d212      	bcs.n	8002a02 <main+0x94a>
				if (encoderBack.encoder_pos > MAX_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] > 0)
 80029dc:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <main+0x9ec>)
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d91e      	bls.n	8002a26 <main+0x96e>
 80029e8:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <main+0x9e4>)
 80029ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80029ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f6:	dd16      	ble.n	8002a26 <main+0x96e>
					speed[BACK_INDEX] = 0;
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <main+0x9e4>)
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	e011      	b.n	8002a26 <main+0x96e>
			}
			else{
				if (encoderBack.encoder_pos < MIN_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] < 0)
 8002a02:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <main+0x9ec>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d20b      	bcs.n	8002a26 <main+0x96e>
 8002a0e:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <main+0x9e4>)
 8002a10:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1c:	d503      	bpl.n	8002a26 <main+0x96e>
					speed[BACK_INDEX] = 0;
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <main+0x9e4>)
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	605a      	str	r2, [r3, #4]
			}
			//**********************************************************************************//

			runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <main+0x9e4>)
 8002a28:	edd3 7a00 	vldr	s15, [r3]
 8002a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a30:	481f      	ldr	r0, [pc, #124]	; (8002ab0 <main+0x9f8>)
 8002a32:	f7fe ff31 	bl	8001898 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <main+0x9e4>)
 8002a38:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a40:	481c      	ldr	r0, [pc, #112]	; (8002ab4 <main+0x9fc>)
 8002a42:	f7fe ff29 	bl	8001898 <runMotor>

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <main+0x9e4>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a54:	d10b      	bne.n	8002a6e <main+0x9b6>
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <main+0x9e4>)
 8002a58:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a64:	d103      	bne.n	8002a6e <main+0x9b6>
				emBrakeMotor(0);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7fe fe30 	bl	80016cc <emBrakeMotor>
 8002a6c:	e002      	b.n	8002a74 <main+0x9bc>
			else
				emBrakeMotor(1);
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7fe fe2c 	bl	80016cc <emBrakeMotor>

			prev_time = HAL_GetTick();
 8002a74:	f001 ff7a 	bl	800496c <HAL_GetTick>
 8002a78:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - prev_time >= 1)
 8002a7a:	e403      	b.n	8002284 <main+0x1cc>
 8002a7c:	f3af 8000 	nop.w
 8002a80:	2c5f92c6 	.word	0x2c5f92c6
 8002a84:	4052c5f9 	.word	0x4052c5f9
 8002a88:	20000108 	.word	0x20000108
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	20000109 	.word	0x20000109
 8002a94:	20000304 	.word	0x20000304
 8002a98:	200001ec 	.word	0x200001ec
 8002a9c:	200001c8 	.word	0x200001c8
 8002aa0:	20000124 	.word	0x20000124
 8002aa4:	2000035c 	.word	0x2000035c
 8002aa8:	20000508 	.word	0x20000508
 8002aac:	200004bc 	.word	0x200004bc
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	20000034 	.word	0x20000034

08002ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b094      	sub	sp, #80	; 0x50
 8002abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002abe:	f107 0320 	add.w	r3, r7, #32
 8002ac2:	2230      	movs	r2, #48	; 0x30
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f006 fe0c 	bl	80096e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <SystemClock_Config+0xd8>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <SystemClock_Config+0xd8>)
 8002ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aea:	6413      	str	r3, [r2, #64]	; 0x40
 8002aec:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <SystemClock_Config+0xd8>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002af8:	2300      	movs	r3, #0
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <SystemClock_Config+0xdc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <SystemClock_Config+0xdc>)
 8002b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <SystemClock_Config+0xdc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b14:	2301      	movs	r3, #1
 8002b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002b2c:	23b4      	movs	r3, #180	; 0xb4
 8002b2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b30:	2302      	movs	r3, #2
 8002b32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b34:	2304      	movs	r3, #4
 8002b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b38:	f107 0320 	add.w	r3, r7, #32
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 fe6d 	bl	800681c <HAL_RCC_OscConfig>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b48:	f000 fd40 	bl	80035cc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b4c:	f003 fe16 	bl	800677c <HAL_PWREx_EnableOverDrive>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002b56:	f000 fd39 	bl	80035cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b5a:	230f      	movs	r3, #15
 8002b5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	2105      	movs	r1, #5
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 f8bf 	bl	8006cfc <HAL_RCC_ClockConfig>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002b84:	f000 fd22 	bl	80035cc <Error_Handler>
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3750      	adds	r7, #80	; 0x50
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40007000 	.word	0x40007000

08002b98 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	2b80      	cmp	r3, #128	; 0x80
 8002ba6:	d11c      	bne.n	8002be2 <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8002ba8:	f001 fee0 	bl	800496c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x58>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d916      	bls.n	8002be6 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8002bb8:	480e      	ldr	r0, [pc, #56]	; (8002bf4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002bba:	f7fe fd49 	bl	8001650 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002bc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x60>)
 8002bc8:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002bcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_GPIO_EXTI_Callback+0x64>)
 8002bd4:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8002bd6:	f001 fec9 	bl	800496c <HAL_GetTick>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x58>)
 8002bde:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002be0:	e001      	b.n	8002be6 <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002be2:	bf00      	nop
 8002be4:	e000      	b.n	8002be8 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8002be6:	bf00      	nop
	}
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200001bc 	.word	0x200001bc
 8002bf4:	200004ac 	.word	0x200004ac
 8002bf8:	20000504 	.word	0x20000504
 8002bfc:	20000408 	.word	0x20000408

08002c00 <HAL_UART_RxCpltCallback>:
//
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a3f      	ldr	r2, [pc, #252]	; (8002d0c <HAL_UART_RxCpltCallback+0x10c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d175      	bne.n	8002cfe <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002c12:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c1a:	785b      	ldrb	r3, [r3, #1]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8002c22:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c24:	789b      	ldrb	r3, [r3, #2]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c2e:	78db      	ldrb	r3, [r3, #3]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8002c36:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c38:	791b      	ldrb	r3, [r3, #4]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c42:	795b      	ldrb	r3, [r3, #5]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c4c:	799b      	ldrb	r3, [r3, #6]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c56:	79db      	ldrb	r3, [r3, #7]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c60:	7a1b      	ldrb	r3, [r3, #8]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c6a:	7a5b      	ldrb	r3, [r3, #9]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 8002c72:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c74:	7a9b      	ldrb	r3, [r3, #10]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c7e:	7adb      	ldrb	r3, [r3, #11]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 8002c86:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c88:	7b1b      	ldrb	r3, [r3, #12]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002c92:	7b5b      	ldrb	r3, [r3, #13]
 8002c94:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002c96:	4413      	add	r3, r2
 8002c98:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 8002c9a:	89fb      	ldrh	r3, [r7, #14]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002ca0:	7b9b      	ldrb	r3, [r3, #14]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d12b      	bne.n	8002cfe <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2baa      	cmp	r3, #170	; 0xaa
 8002cac:	d127      	bne.n	8002cfe <HAL_UART_RxCpltCallback+0xfe>
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002cb0:	785b      	ldrb	r3, [r3, #1]
 8002cb2:	2ba4      	cmp	r3, #164	; 0xa4
 8002cb4:	d123      	bne.n	8002cfe <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002cb8:	78db      	ldrb	r3, [r3, #3]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d11f      	bne.n	8002cfe <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002cc0:	7a5b      	ldrb	r3, [r3, #9]
 8002cc2:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002cc6:	7a1b      	ldrb	r3, [r3, #8]
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	441a      	add	r2, r3
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002cce:	79db      	ldrb	r3, [r3, #7]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	4413      	add	r3, r2
						+ (receive_buf[6]);
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002cd6:	7992      	ldrb	r2, [r2, #6]
 8002cd8:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002cda:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <HAL_UART_RxCpltCallback+0x114>)
 8002cdc:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002ce0:	7b5b      	ldrb	r3, [r3, #13]
 8002ce2:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002ce6:	7b1b      	ldrb	r3, [r3, #12]
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	441a      	add	r2, r3
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002cee:	7adb      	ldrb	r3, [r3, #11]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	4413      	add	r3, r2
						+ (receive_buf[10]);
 8002cf4:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <HAL_UART_RxCpltCallback+0x110>)
 8002cf6:	7a92      	ldrb	r2, [r2, #10]
 8002cf8:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002cfa:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <HAL_UART_RxCpltCallback+0x114>)
 8002cfc:	6053      	str	r3, [r2, #4]
			}
		}
	}

}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40004800 	.word	0x40004800
 8002d10:	200004f4 	.word	0x200004f4
 8002d14:	2000040c 	.word	0x2000040c

08002d18 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a8f      	ldr	r2, [pc, #572]	; (8002f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	f040 810c 	bne.w	8002f42 <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002d2a:	f107 0308 	add.w	r3, r7, #8
 8002d2e:	4a8d      	ldr	r2, [pc, #564]	; (8002f64 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8002d30:	2100      	movs	r1, #0
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f002 f945 	bl	8004fc2 <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8002d38:	7a7b      	ldrb	r3, [r7, #9]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d151      	bne.n	8002de2 <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8002d3e:	f107 0308 	add.w	r3, r7, #8
 8002d42:	4989      	ldr	r1, [pc, #548]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe ff4f 	bl	8001be8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8002d4a:	4887      	ldr	r0, [pc, #540]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002d4c:	f7fe ffc5 	bl	8001cda <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos
 8002d50:	4b85      	ldr	r3, [pc, #532]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (uint32_t) (4096 * BACK_GEAR_RATIO);
 8002d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
					- encoderBack.encoder_pos
 8002d58:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
 8002d5c:	4a82      	ldr	r2, [pc, #520]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002d5e:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002d60:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	ee07 3a90 	vmov	s15, r3
 8002d68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8002d6c:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8002f6c <HAL_CAN_RxFifo0MsgPendingCallback+0x254>
 8002d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d74:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 8002d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d7c:	ee17 0a90 	vmov	r0, s15
 8002d80:	f7fd fb9a 	bl	80004b8 <__aeabi_f2d>
 8002d84:	a372      	add	r3, pc, #456	; (adr r3, 8002f50 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	f7fd fa37 	bl	80001fc <__adddf3>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	f7fd fedf 	bl	8000b58 <__aeabi_d2f>
 8002d9a:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002d9c:	4a72      	ldr	r2, [pc, #456]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002d9e:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8002da0:	4b71      	ldr	r3, [pc, #452]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002da2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002da6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 8002daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	dd09      	ble.n	8002dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
				encoderBack.angleDeg -= 360;
 8002db4:	4b6c      	ldr	r3, [pc, #432]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002db6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002dba:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 8002dbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dc2:	4b69      	ldr	r3, [pc, #420]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002dc4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (encoderBack.encoder_pos >= MAX_BACK_ALLOWABLE_ENC)
 8002dc8:	4b67      	ldr	r3, [pc, #412]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d306      	bcc.n	8002de2 <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8002dd4:	4b64      	ldr	r3, [pc, #400]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * BACK_GEAR_RATIO;
 8002dd8:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002ddc:	461a      	mov	r2, r3
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8002dde:	4b62      	ldr	r3, [pc, #392]	; (8002f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002de0:	649a      	str	r2, [r3, #72]	; 0x48
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 8002de2:	7a7b      	ldrb	r3, [r7, #9]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	f040 80ac 	bne.w	8002f42 <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8002dea:	f107 0308 	add.w	r3, r7, #8
 8002dee:	4961      	ldr	r1, [pc, #388]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe fef9 	bl	8001be8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 8002df6:	485f      	ldr	r0, [pc, #380]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002df8:	f7fe ff6f 	bl	8001cda <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 8002dfc:	4b5d      	ldr	r3, [pc, #372]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 8002e04:	f247 522f 	movw	r2, #29999	; 0x752f
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d839      	bhi.n	8002e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8002e0c:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 8002e14:	4b58      	ldr	r3, [pc, #352]	; (8002f78 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8002e16:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1a:	0b5b      	lsrs	r3, r3, #13
 8002e1c:	f242 3133 	movw	r1, #9011	; 0x2333
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 8002e26:	4a53      	ldr	r2, [pc, #332]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002e2a:	4b52      	ldr	r3, [pc, #328]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e36:	ee17 0a90 	vmov	r0, s15
 8002e3a:	f7fd fb3d 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002e3e:	a346      	add	r3, pc, #280	; (adr r3, 8002f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	f7fd fcba 	bl	80007bc <__aeabi_ddiv>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8002e56:	f7fd fb87 	bl	8000568 <__aeabi_dmul>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	a33b      	add	r3, pc, #236	; (adr r3, 8002f50 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f7fd f9c8 	bl	80001fc <__adddf3>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f7fd fe70 	bl	8000b58 <__aeabi_d2f>
 8002e78:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002e7a:	4a3e      	ldr	r2, [pc, #248]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	e047      	b.n	8002f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>
			}
			else
			{
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
						- encoderFront.encoder_pos;
 8002e80:	4b3c      	ldr	r3, [pc, #240]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd faf5 	bl	8000474 <__aeabi_ui2d>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	a132      	add	r1, pc, #200	; (adr r1, 8002f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e94:	f7fd f9b0 	bl	80001f8 <__aeabi_dsub>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f7fd fe3a 	bl	8000b18 <__aeabi_d2uiz>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4a33      	ldr	r2, [pc, #204]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002ea8:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002eaa:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb6:	ee17 0a90 	vmov	r0, s15
 8002eba:	f7fd fafd 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8002ebe:	a326      	add	r3, pc, #152	; (adr r3, 8002f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f7fd fc7a 	bl	80007bc <__aeabi_ddiv>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8002ed6:	f7fd fb47 	bl	8000568 <__aeabi_dmul>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	a31b      	add	r3, pc, #108	; (adr r3, 8002f50 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f7fd f988 	bl	80001fc <__adddf3>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8002efa:	f7fd f97d 	bl	80001f8 <__aeabi_dsub>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fe27 	bl	8000b58 <__aeabi_d2f>
 8002f0a:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002f0e:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (encoderFront.encoder_pos >= MAX_FRONT_ALLOWABLE_ENC)
 8002f10:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d312      	bcc.n	8002f42 <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 8002f1c:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * FRONT_GEAR_RATIO;
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd faa7 	bl	8000474 <__aeabi_ui2d>
 8002f26:	a30c      	add	r3, pc, #48	; (adr r3, 8002f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f7fd f964 	bl	80001f8 <__aeabi_dsub>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	f7fd fdc6 	bl	8000ac8 <__aeabi_d2iz>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002f40:	6493      	str	r3, [r2, #72]	; 0x48
		}
	}
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	f3af 8000 	nop.w
 8002f50:	d0e56042 	.word	0xd0e56042
 8002f54:	40424b22 	.word	0x40424b22
 8002f58:	9999999a 	.word	0x9999999a
 8002f5c:	40c19999 	.word	0x40c19999
 8002f60:	200002b4 	.word	0x200002b4
 8002f64:	20000200 	.word	0x20000200
 8002f68:	2000035c 	.word	0x2000035c
 8002f6c:	46000000 	.word	0x46000000
 8002f70:	43b40000 	.word	0x43b40000
 8002f74:	20000304 	.word	0x20000304
 8002f78:	e8bb8111 	.word	0xe8bb8111
 8002f7c:	40768000 	.word	0x40768000

08002f80 <baseMotorCommand>:

void baseMotorCommand(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_r + 1500;
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <baseMotorCommand+0x40>)
 8002f86:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f8e:	ee17 3a90 	vmov	r3, s15
 8002f92:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <baseMotorCommand+0x44>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_l + 1500;
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <baseMotorCommand+0x40>)
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fa6:	ee17 3a90 	vmov	r3, s15
 8002faa:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <baseMotorCommand+0x44>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	200000d8 	.word	0x200000d8
 8002fc4:	2000054c 	.word	0x2000054c

08002fc8 <climbingForward>:

//Hub motor move forward  by preset dist
bool climbingForward(float dist)
{
 8002fc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	ed87 0a01 	vstr	s0, [r7, #4]
	static int prev_tick = 0;
	static int32_t prev_enc;
	static bool first_loop = true;
	static float dist_remaining;

	float rps = (dist >= 0) ? 1.0 : -1.0; //rad/s
 8002fd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe0:	db02      	blt.n	8002fe8 <climbingForward+0x20>
 8002fe2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002fe6:	e000      	b.n	8002fea <climbingForward+0x22>
 8002fe8:	4b65      	ldr	r3, [pc, #404]	; (8003180 <climbingForward+0x1b8>)
 8002fea:	617b      	str	r3, [r7, #20]

	if (first_loop)
 8002fec:	4b65      	ldr	r3, [pc, #404]	; (8003184 <climbingForward+0x1bc>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00f      	beq.n	8003014 <climbingForward+0x4c>
	{
		prev_enc = hub_encoder_feedback.encoder_2;
 8002ff4:	4b64      	ldr	r3, [pc, #400]	; (8003188 <climbingForward+0x1c0>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a64      	ldr	r2, [pc, #400]	; (800318c <climbingForward+0x1c4>)
 8002ffa:	6013      	str	r3, [r2, #0]
		prev_tick = HAL_GetTick();
 8002ffc:	f001 fcb6 	bl	800496c <HAL_GetTick>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4b62      	ldr	r3, [pc, #392]	; (8003190 <climbingForward+0x1c8>)
 8003006:	601a      	str	r2, [r3, #0]
		first_loop = false;
 8003008:	4b5e      	ldr	r3, [pc, #376]	; (8003184 <climbingForward+0x1bc>)
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
		dist_remaining = dist;
 800300e:	4a61      	ldr	r2, [pc, #388]	; (8003194 <climbingForward+0x1cc>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6013      	str	r3, [r2, #0]
	}
	if (dist / dist_remaining >= 0 && first_loop == false)
 8003014:	4b5f      	ldr	r3, [pc, #380]	; (8003194 <climbingForward+0x1cc>)
 8003016:	ed93 7a00 	vldr	s14, [r3]
 800301a:	edd7 6a01 	vldr	s13, [r7, #4]
 800301e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	f2c0 8090 	blt.w	800314e <climbingForward+0x186>
 800302e:	4b55      	ldr	r3, [pc, #340]	; (8003184 <climbingForward+0x1bc>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	f083 0301 	eor.w	r3, r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8088 	beq.w	800314e <climbingForward+0x186>
	{
		send_HubMotor(rps, rps);
 800303e:	edd7 0a05 	vldr	s1, [r7, #20]
 8003042:	ed97 0a05 	vldr	s0, [r7, #20]
 8003046:	f7fe f9d7 	bl	80013f8 <send_HubMotor>
		if (HAL_GetTick() - prev_tick > 1)
 800304a:	f001 fc8f 	bl	800496c <HAL_GetTick>
 800304e:	4603      	mov	r3, r0
 8003050:	4a4f      	ldr	r2, [pc, #316]	; (8003190 <climbingForward+0x1c8>)
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	2b01      	cmp	r3, #1
 8003058:	d977      	bls.n	800314a <climbingForward+0x182>
		{
			float dt = (float) (HAL_GetTick() - prev_tick) / FREQUENCY;
 800305a:	f001 fc87 	bl	800496c <HAL_GetTick>
 800305e:	4603      	mov	r3, r0
 8003060:	4a4b      	ldr	r2, [pc, #300]	; (8003190 <climbingForward+0x1c8>)
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800306e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8003198 <climbingForward+0x1d0>
 8003072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003076:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 800307a:	4b43      	ldr	r3, [pc, #268]	; (8003188 <climbingForward+0x1c0>)
 800307c:	685a      	ldr	r2, [r3, #4]
					- prev_enc) / dt) * 2 * M_PI / 4096;
 800307e:	4b43      	ldr	r3, [pc, #268]	; (800318c <climbingForward+0x1c4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	1ad3      	subs	r3, r2, r3
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eef8 6ae7 	vcvt.f32.s32	s13, s15
					- prev_enc) / dt) * 2 * M_PI / 4096;
 800308c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003094:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003098:	ee17 0a90 	vmov	r0, s15
 800309c:	f7fd fa0c 	bl	80004b8 <__aeabi_f2d>
 80030a0:	a333      	add	r3, pc, #204	; (adr r3, 8003170 <climbingForward+0x1a8>)
 80030a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a6:	f7fd fa5f 	bl	8000568 <__aeabi_dmul>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	4b39      	ldr	r3, [pc, #228]	; (800319c <climbingForward+0x1d4>)
 80030b8:	f7fd fb80 	bl	80007bc <__aeabi_ddiv>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	f7fd fd48 	bl	8000b58 <__aeabi_d2f>
 80030c8:	4603      	mov	r3, r0
 80030ca:	60fb      	str	r3, [r7, #12]
			dist_remaining -= (HUB_DIAMETER * rad_per_s * dt) / 2;
 80030cc:	4b31      	ldr	r3, [pc, #196]	; (8003194 <climbingForward+0x1cc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd f9f1 	bl	80004b8 <__aeabi_f2d>
 80030d6:	4604      	mov	r4, r0
 80030d8:	460d      	mov	r5, r1
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7fd f9ec 	bl	80004b8 <__aeabi_f2d>
 80030e0:	a325      	add	r3, pc, #148	; (adr r3, 8003178 <climbingForward+0x1b0>)
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	f7fd fa3f 	bl	8000568 <__aeabi_dmul>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4690      	mov	r8, r2
 80030f0:	4699      	mov	r9, r3
 80030f2:	6938      	ldr	r0, [r7, #16]
 80030f4:	f7fd f9e0 	bl	80004b8 <__aeabi_f2d>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4640      	mov	r0, r8
 80030fe:	4649      	mov	r1, r9
 8003100:	f7fd fa32 	bl	8000568 <__aeabi_dmul>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003114:	f7fd fb52 	bl	80007bc <__aeabi_ddiv>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4620      	mov	r0, r4
 800311e:	4629      	mov	r1, r5
 8003120:	f7fd f86a 	bl	80001f8 <__aeabi_dsub>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f7fd fd14 	bl	8000b58 <__aeabi_d2f>
 8003130:	4603      	mov	r3, r0
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <climbingForward+0x1cc>)
 8003134:	6013      	str	r3, [r2, #0]
			prev_tick = HAL_GetTick();
 8003136:	f001 fc19 	bl	800496c <HAL_GetTick>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <climbingForward+0x1c8>)
 8003140:	601a      	str	r2, [r3, #0]
			prev_enc = hub_encoder_feedback.encoder_2;
 8003142:	4b11      	ldr	r3, [pc, #68]	; (8003188 <climbingForward+0x1c0>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4a11      	ldr	r2, [pc, #68]	; (800318c <climbingForward+0x1c4>)
 8003148:	6013      	str	r3, [r2, #0]
		}
		return true;
 800314a:	2301      	movs	r3, #1
 800314c:	e009      	b.n	8003162 <climbingForward+0x19a>
	}
	else
	{
		first_loop = true;
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <climbingForward+0x1bc>)
 8003150:	2201      	movs	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]
		send_HubMotor(0, 0);
 8003154:	eddf 0a12 	vldr	s1, [pc, #72]	; 80031a0 <climbingForward+0x1d8>
 8003158:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80031a0 <climbingForward+0x1d8>
 800315c:	f7fe f94c 	bl	80013f8 <send_HubMotor>
		return false;
 8003160:	2300      	movs	r3, #0
	}
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800316c:	f3af 8000 	nop.w
 8003170:	54442d18 	.word	0x54442d18
 8003174:	400921fb 	.word	0x400921fb
 8003178:	916872b0 	.word	0x916872b0
 800317c:	3fbf7ced 	.word	0x3fbf7ced
 8003180:	bf800000 	.word	0xbf800000
 8003184:	20000128 	.word	0x20000128
 8003188:	2000040c 	.word	0x2000040c
 800318c:	2000021c 	.word	0x2000021c
 8003190:	20000220 	.word	0x20000220
 8003194:	20000224 	.word	0x20000224
 8003198:	447a0000 	.word	0x447a0000
 800319c:	40b00000 	.word	0x40b00000
	...

080031a8 <goto_pos>:

//Control rear and back wheel to set encoder position using PID controller
bool goto_pos(int enc, PID_t pid_t)
{
 80031a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
	int cur_enc_pos;
	ENCODER_Read(&encoderBack);
 80031b4:	4868      	ldr	r0, [pc, #416]	; (8003358 <goto_pos+0x1b0>)
 80031b6:	f7fe fd68 	bl	8001c8a <ENCODER_Read>
	ENCODER_Read(&encoderFront);
 80031ba:	4868      	ldr	r0, [pc, #416]	; (800335c <goto_pos+0x1b4>)
 80031bc:	f7fe fd65 	bl	8001c8a <ENCODER_Read>
	if (pid_t == frontClimb_pid)
 80031c0:	4b67      	ldr	r3, [pc, #412]	; (8003360 <goto_pos+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d166      	bne.n	8003298 <goto_pos+0xf0>
	{
		cur_enc_pos = (int) encoderFront.encoder_pos;
 80031ca:	4b64      	ldr	r3, [pc, #400]	; (800335c <goto_pos+0x1b4>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	60fb      	str	r3, [r7, #12]
//				&& ((encoderFront.encoder_pos >= 0
//						&& encoderFront.encoder_pos < MAX_FRONT_ALLOWABLE_ENC)
//						|| (encoderFront.encoder_pos > MIN_FRONT_ALLOWABLE_ENC
//								&& encoderFront.encoder_pos
//										<= 4096 * FRONT_GEAR_RATIO)))
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 80031d0:	4b63      	ldr	r3, [pc, #396]	; (8003360 <goto_pos+0x1b8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd fecd 	bl	8000f74 <pid_need_compute>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d059      	beq.n	8003294 <goto_pos+0xec>
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd f954 	bl	8000494 <__aeabi_i2d>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4690      	mov	r8, r2
 80031f2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	4b5a      	ldr	r3, [pc, #360]	; (8003364 <goto_pos+0x1bc>)
 80031fc:	4640      	mov	r0, r8
 80031fe:	4649      	mov	r1, r9
 8003200:	f7fd fc42 	bl	8000a88 <__aeabi_dcmpgt>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d044      	beq.n	8003294 <goto_pos+0xec>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f640 421c 	movw	r2, #3100	; 0xc1c
 8003210:	4293      	cmp	r3, r2
 8003212:	d90f      	bls.n	8003234 <goto_pos+0x8c>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7fd f93d 	bl	8000494 <__aeabi_i2d>
 800321a:	a34d      	add	r3, pc, #308	; (adr r3, 8003350 <goto_pos+0x1a8>)
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f7fc ffea 	bl	80001f8 <__aeabi_dsub>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4610      	mov	r0, r2
 800322a:	4619      	mov	r1, r3
 800322c:	f7fd fc4c 	bl	8000ac8 <__aeabi_d2iz>
 8003230:	4603      	mov	r3, r0
 8003232:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f640 421c 	movw	r2, #3100	; 0xc1c
 800323a:	4293      	cmp	r3, r2
 800323c:	d30f      	bcc.n	800325e <goto_pos+0xb6>
				enc -= 4096 * FRONT_GEAR_RATIO;
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd f928 	bl	8000494 <__aeabi_i2d>
 8003244:	a342      	add	r3, pc, #264	; (adr r3, 8003350 <goto_pos+0x1a8>)
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	f7fc ffd5 	bl	80001f8 <__aeabi_dsub>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	f7fd fc37 	bl	8000ac8 <__aeabi_d2iz>
 800325a:	4603      	mov	r3, r0
 800325c:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	ee07 3a90 	vmov	s15, r3
 8003264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003268:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <goto_pos+0x1c0>)
 800326a:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003278:	4b3c      	ldr	r3, [pc, #240]	; (800336c <goto_pos+0x1c4>)
 800327a:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 800327e:	4b38      	ldr	r3, [pc, #224]	; (8003360 <goto_pos+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd fe8b 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 8003288:	4b39      	ldr	r3, [pc, #228]	; (8003370 <goto_pos+0x1c8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a39      	ldr	r2, [pc, #228]	; (8003374 <goto_pos+0x1cc>)
 800328e:	6013      	str	r3, [r2, #0]
			return true;
 8003290:	2301      	movs	r3, #1
 8003292:	e056      	b.n	8003342 <goto_pos+0x19a>

		}
		else
		{
//			speed[FRONT_INDEX] = 0;
			return false;
 8003294:	2300      	movs	r3, #0
 8003296:	e054      	b.n	8003342 <goto_pos+0x19a>
		}
	}
	else if (pid_t == backClimb_pid)
 8003298:	4b37      	ldr	r3, [pc, #220]	; (8003378 <goto_pos+0x1d0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d14e      	bne.n	8003340 <goto_pos+0x198>
	{
		cur_enc_pos = (int) encoderBack.encoder_pos;
 80032a2:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <goto_pos+0x1b0>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	60fb      	str	r3, [r7, #12]
//				&& ((encoderBack.encoder_pos >= 0
//						&& encoderBack.encoder_pos < MAX_BACK_ALLOWABLE_ENC)
//						|| (encoderBack.encoder_pos > MIN_BACK_ALLOWABLE_ENC
//								&& encoderBack.encoder_pos
//										<= 4096 * BACK_GEAR_RATIO)))
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 80032a8:	4b33      	ldr	r3, [pc, #204]	; (8003378 <goto_pos+0x1d0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fe61 	bl	8000f74 <pid_need_compute>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d041      	beq.n	800333c <goto_pos+0x194>
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f8e8 	bl	8000494 <__aeabi_i2d>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4614      	mov	r4, r2
 80032ca:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <goto_pos+0x1bc>)
 80032d4:	4620      	mov	r0, r4
 80032d6:	4629      	mov	r1, r5
 80032d8:	f7fd fbd6 	bl	8000a88 <__aeabi_dcmpgt>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02c      	beq.n	800333c <goto_pos+0x194>
		{
			// Read process feedback
			//following code is causing back turn
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d903      	bls.n	80032f4 <goto_pos+0x14c>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80032f2:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d303      	bcc.n	8003306 <goto_pos+0x15e>
				enc -= 4096 * BACK_GEAR_RATIO;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003304:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003310:	4b1a      	ldr	r3, [pc, #104]	; (800337c <goto_pos+0x1d4>)
 8003312:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	ee07 3a90 	vmov	s15, r3
 800331c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003320:	4b17      	ldr	r3, [pc, #92]	; (8003380 <goto_pos+0x1d8>)
 8003322:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(backClimb_pid);
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <goto_pos+0x1d0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd fe37 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[BACK_INDEX] = backClimb_output;
 8003330:	4b14      	ldr	r3, [pc, #80]	; (8003384 <goto_pos+0x1dc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0f      	ldr	r2, [pc, #60]	; (8003374 <goto_pos+0x1cc>)
 8003336:	6053      	str	r3, [r2, #4]
			return true;
 8003338:	2301      	movs	r3, #1
 800333a:	e002      	b.n	8003342 <goto_pos+0x19a>
		}
		else
		{
//			speed[BACK_INDEX] = 0;
			return false;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <goto_pos+0x19a>
		}
	}
	return false;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800334c:	f3af 8000 	nop.w
 8003350:	9999999a 	.word	0x9999999a
 8003354:	40c19999 	.word	0x40c19999
 8003358:	2000035c 	.word	0x2000035c
 800335c:	20000304 	.word	0x20000304
 8003360:	200004bc 	.word	0x200004bc
 8003364:	40140000 	.word	0x40140000
 8003368:	200001d8 	.word	0x200001d8
 800336c:	200001d0 	.word	0x200001d0
 8003370:	200001d4 	.word	0x200001d4
 8003374:	200001c8 	.word	0x200001c8
 8003378:	20000508 	.word	0x20000508
 800337c:	200001e4 	.word	0x200001e4
 8003380:	200001dc 	.word	0x200001dc
 8003384:	200001e0 	.word	0x200001e0

08003388 <in_climb_process>:

//Lifting process with desired front and back encoder position
bool in_climb_process(int front_enc, int back_enc)
{
 8003388:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
	bool is_lifting;
	static bool first_loop = true;
	static uint32_t prev_angle_tick = 0;
	static float prev_angle = 0;
	float climbForward_speed = 0;
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	613b      	str	r3, [r7, #16]

	if (first_loop)
 800339a:	4b81      	ldr	r3, [pc, #516]	; (80035a0 <in_climb_process+0x218>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <in_climb_process+0x32>
	{
		prev_angle = encoderBack.angleDeg;
 80033a2:	4b80      	ldr	r3, [pc, #512]	; (80035a4 <in_climb_process+0x21c>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	4a80      	ldr	r2, [pc, #512]	; (80035a8 <in_climb_process+0x220>)
 80033a8:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 80033aa:	f001 fadf 	bl	800496c <HAL_GetTick>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4a7e      	ldr	r2, [pc, #504]	; (80035ac <in_climb_process+0x224>)
 80033b2:	6013      	str	r3, [r2, #0]
		first_loop = false;
 80033b4:	4b7a      	ldr	r3, [pc, #488]	; (80035a0 <in_climb_process+0x218>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
	}

	//1. lift the front climbing wheel up until it reach it maximum pos
	//The process is controlled by PID on the front climbing wheel
	//the maximum pos is when the climbing wheel is below the wheelchair base
	goto_pos(front_enc, frontClimb_pid);
 80033ba:	4b7d      	ldr	r3, [pc, #500]	; (80035b0 <in_climb_process+0x228>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fef1 	bl	80031a8 <goto_pos>
	goto_pos(back_enc, backClimb_pid);
 80033c6:	4b7b      	ldr	r3, [pc, #492]	; (80035b4 <in_climb_process+0x22c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4619      	mov	r1, r3
 80033cc:	6838      	ldr	r0, [r7, #0]
 80033ce:	f7ff feeb 	bl	80031a8 <goto_pos>

	if (fabs(speed[FRONT_INDEX]) >= 4 || fabs(speed[BACK_INDEX]) >= 4)
 80033d2:	4b79      	ldr	r3, [pc, #484]	; (80035b8 <in_climb_process+0x230>)
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	eef0 7ae7 	vabs.f32	s15, s15
 80033dc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80033e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	da0b      	bge.n	8003402 <in_climb_process+0x7a>
 80033ea:	4b73      	ldr	r3, [pc, #460]	; (80035b8 <in_climb_process+0x230>)
 80033ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80033f0:	eef0 7ae7 	vabs.f32	s15, s15
 80033f4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80033f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003400:	db02      	blt.n	8003408 <in_climb_process+0x80>
		is_lifting = true;
 8003402:	2301      	movs	r3, #1
 8003404:	75fb      	strb	r3, [r7, #23]
 8003406:	e001      	b.n	800340c <in_climb_process+0x84>
	else
		is_lifting = false;
 8003408:	2300      	movs	r3, #0
 800340a:	75fb      	strb	r3, [r7, #23]

	//2. During lifting, due to fixed point at the back climbing wheel.
	//The wheelchair would be pulled back if the back wheel not traveling while the its lifting
	//Therefore, lifting of back wheel and hub motor need to work at the same time to make sure the wheelchair is not moving back.
	//Pull back of wheelchair would cause the front climbing wheel to slip from the curb
	if (is_lifting == true && speed[BACK_INDEX] != 0)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 809d 	beq.w	800354e <in_climb_process+0x1c6>
 8003414:	4b68      	ldr	r3, [pc, #416]	; (80035b8 <in_climb_process+0x230>)
 8003416:	edd3 7a01 	vldr	s15, [r3, #4]
 800341a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	f000 8094 	beq.w	800354e <in_climb_process+0x1c6>
	{
		double dt = (HAL_GetTick() - prev_angle_tick) / (float) FREQUENCY;
 8003426:	f001 faa1 	bl	800496c <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <in_climb_process+0x224>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80035bc <in_climb_process+0x234>
 800343e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003442:	ee16 0a90 	vmov	r0, s13
 8003446:	f7fd f837 	bl	80004b8 <__aeabi_f2d>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		climbForward_speed = CLIMBING_LEG_LENGTH
				* (sin(TO_RAD(prev_angle)) - sin(TO_RAD(encoderBack.angleDeg)))
 8003452:	4b5b      	ldr	r3, [pc, #364]	; (80035c0 <in_climb_process+0x238>)
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f82f 	bl	80004b8 <__aeabi_f2d>
 800345a:	4604      	mov	r4, r0
 800345c:	460d      	mov	r5, r1
 800345e:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <in_climb_process+0x220>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd f828 	bl	80004b8 <__aeabi_f2d>
 8003468:	a349      	add	r3, pc, #292	; (adr r3, 8003590 <in_climb_process+0x208>)
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f7fd f87b 	bl	8000568 <__aeabi_dmul>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	4b51      	ldr	r3, [pc, #324]	; (80035c4 <in_climb_process+0x23c>)
 8003480:	f7fd f99c 	bl	80007bc <__aeabi_ddiv>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	ec43 2b17 	vmov	d7, r2, r3
 800348c:	eeb0 0a47 	vmov.f32	s0, s14
 8003490:	eef0 0a67 	vmov.f32	s1, s15
 8003494:	f006 fb2c 	bl	8009af0 <sin>
 8003498:	ec59 8b10 	vmov	r8, r9, d0
 800349c:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <in_climb_process+0x21c>)
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd f809 	bl	80004b8 <__aeabi_f2d>
 80034a6:	a33a      	add	r3, pc, #232	; (adr r3, 8003590 <in_climb_process+0x208>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f7fd f85c 	bl	8000568 <__aeabi_dmul>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <in_climb_process+0x23c>)
 80034be:	f7fd f97d 	bl	80007bc <__aeabi_ddiv>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	ec43 2b17 	vmov	d7, r2, r3
 80034ca:	eeb0 0a47 	vmov.f32	s0, s14
 80034ce:	eef0 0a67 	vmov.f32	s1, s15
 80034d2:	f006 fb0d 	bl	8009af0 <sin>
 80034d6:	ec53 2b10 	vmov	r2, r3, d0
 80034da:	4640      	mov	r0, r8
 80034dc:	4649      	mov	r1, r9
 80034de:	f7fc fe8b 	bl	80001f8 <__aeabi_dsub>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4620      	mov	r0, r4
 80034e8:	4629      	mov	r1, r5
 80034ea:	f7fd f83d 	bl	8000568 <__aeabi_dmul>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
				/ dt; //unit: m/s,
 80034f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034fa:	f7fd f95f 	bl	80007bc <__aeabi_ddiv>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
		climbForward_speed = CLIMBING_LEG_LENGTH
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f7fd fb27 	bl	8000b58 <__aeabi_d2f>
 800350a:	4603      	mov	r3, r0
 800350c:	613b      	str	r3, [r7, #16]
		climbForward_speed = climbForward_speed / (HUB_DIAMETER / 2);
 800350e:	6938      	ldr	r0, [r7, #16]
 8003510:	f7fc ffd2 	bl	80004b8 <__aeabi_f2d>
 8003514:	a320      	add	r3, pc, #128	; (adr r3, 8003598 <in_climb_process+0x210>)
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f7fd f94f 	bl	80007bc <__aeabi_ddiv>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	f7fd fb17 	bl	8000b58 <__aeabi_d2f>
 800352a:	4603      	mov	r3, r0
 800352c:	613b      	str	r3, [r7, #16]
		//Convert hub speed into pulse/second
		send_HubMotor(climbForward_speed, climbForward_speed);
 800352e:	edd7 0a04 	vldr	s1, [r7, #16]
 8003532:	ed97 0a04 	vldr	s0, [r7, #16]
 8003536:	f7fd ff5f 	bl	80013f8 <send_HubMotor>
		prev_angle = encoderBack.angleDeg;
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <in_climb_process+0x21c>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <in_climb_process+0x220>)
 8003540:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 8003542:	f001 fa13 	bl	800496c <HAL_GetTick>
 8003546:	4603      	mov	r3, r0
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <in_climb_process+0x224>)
 800354a:	6013      	str	r3, [r2, #0]
	{
 800354c:	e010      	b.n	8003570 <in_climb_process+0x1e8>
	}
	else if (is_lifting == true && speed[BACK_INDEX] == 0)
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00d      	beq.n	8003570 <in_climb_process+0x1e8>
 8003554:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <in_climb_process+0x230>)
 8003556:	edd3 7a01 	vldr	s15, [r3, #4]
 800355a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	d105      	bne.n	8003570 <in_climb_process+0x1e8>
		send_HubMotor(0, 0);
 8003564:	eddf 0a18 	vldr	s1, [pc, #96]	; 80035c8 <in_climb_process+0x240>
 8003568:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80035c8 <in_climb_process+0x240>
 800356c:	f7fd ff44 	bl	80013f8 <send_HubMotor>

	if (!is_lifting)
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	f083 0301 	eor.w	r3, r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <in_climb_process+0x1fa>
		first_loop = true;
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <in_climb_process+0x218>)
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
	return is_lifting;
 8003582:	7dfb      	ldrb	r3, [r7, #23]

}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800358e:	bf00      	nop
 8003590:	54442d18 	.word	0x54442d18
 8003594:	400921fb 	.word	0x400921fb
 8003598:	916872b0 	.word	0x916872b0
 800359c:	3faf7ced 	.word	0x3faf7ced
 80035a0:	20000129 	.word	0x20000129
 80035a4:	2000035c 	.word	0x2000035c
 80035a8:	20000228 	.word	0x20000228
 80035ac:	2000022c 	.word	0x2000022c
 80035b0:	200004bc 	.word	0x200004bc
 80035b4:	20000508 	.word	0x20000508
 80035b8:	200001c8 	.word	0x200001c8
 80035bc:	447a0000 	.word	0x447a0000
 80035c0:	3eb2b021 	.word	0x3eb2b021
 80035c4:	40668000 	.word	0x40668000
 80035c8:	00000000 	.word	0x00000000

080035cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_1);
 80035d0:	2100      	movs	r1, #0
 80035d2:	4808      	ldr	r0, [pc, #32]	; (80035f4 <Error_Handler+0x28>)
 80035d4:	f004 fa6e 	bl	8007ab4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_2);
 80035d8:	2104      	movs	r1, #4
 80035da:	4806      	ldr	r0, [pc, #24]	; (80035f4 <Error_Handler+0x28>)
 80035dc:	f004 fa6a 	bl	8007ab4 <HAL_TIM_PWM_Stop>
	brakeMotor(&backMotor, 1);
 80035e0:	2101      	movs	r1, #1
 80035e2:	4805      	ldr	r0, [pc, #20]	; (80035f8 <Error_Handler+0x2c>)
 80035e4:	f7fe f884 	bl	80016f0 <brakeMotor>
	brakeMotor(&backMotor, 1);
 80035e8:	2101      	movs	r1, #1
 80035ea:	4803      	ldr	r0, [pc, #12]	; (80035f8 <Error_Handler+0x2c>)
 80035ec:	f7fe f880 	bl	80016f0 <brakeMotor>
  /* USER CODE END Error_Handler_Debug */
}
 80035f0:	bf00      	nop
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	2000054c 	.word	0x2000054c
 80035f8:	20000034 	.word	0x20000034

080035fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003600:	4b18      	ldr	r3, [pc, #96]	; (8003664 <MX_SPI1_Init+0x68>)
 8003602:	4a19      	ldr	r2, [pc, #100]	; (8003668 <MX_SPI1_Init+0x6c>)
 8003604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003606:	4b17      	ldr	r3, [pc, #92]	; (8003664 <MX_SPI1_Init+0x68>)
 8003608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800360c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <MX_SPI1_Init+0x68>)
 8003610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003614:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003616:	4b13      	ldr	r3, [pc, #76]	; (8003664 <MX_SPI1_Init+0x68>)
 8003618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800361c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <MX_SPI1_Init+0x68>)
 8003620:	2202      	movs	r2, #2
 8003622:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <MX_SPI1_Init+0x68>)
 8003626:	2200      	movs	r2, #0
 8003628:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800362a:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <MX_SPI1_Init+0x68>)
 800362c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003630:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <MX_SPI1_Init+0x68>)
 8003634:	2228      	movs	r2, #40	; 0x28
 8003636:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <MX_SPI1_Init+0x68>)
 800363a:	2200      	movs	r2, #0
 800363c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <MX_SPI1_Init+0x68>)
 8003640:	2200      	movs	r2, #0
 8003642:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003644:	4b07      	ldr	r3, [pc, #28]	; (8003664 <MX_SPI1_Init+0x68>)
 8003646:	2200      	movs	r2, #0
 8003648:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <MX_SPI1_Init+0x68>)
 800364c:	220a      	movs	r2, #10
 800364e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003650:	4804      	ldr	r0, [pc, #16]	; (8003664 <MX_SPI1_Init+0x68>)
 8003652:	f003 fd4d 	bl	80070f0 <HAL_SPI_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800365c:	f7ff ffb6 	bl	80035cc <Error_Handler>
  }

}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}
 8003664:	2000025c 	.word	0x2000025c
 8003668:	40013000 	.word	0x40013000

0800366c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <HAL_SPI_MspInit+0x84>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d12b      	bne.n	80036e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 8003698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800369c:	6453      	str	r3, [r2, #68]	; 0x44
 800369e:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	4a10      	ldr	r2, [pc, #64]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 80036c6:	2360      	movs	r3, #96	; 0x60
 80036c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d2:	2303      	movs	r3, #3
 80036d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036d6:	2305      	movs	r3, #5
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	4619      	mov	r1, r3
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <HAL_SPI_MspInit+0x8c>)
 80036e2:	f002 fc95 	bl	8006010 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80036e6:	bf00      	nop
 80036e8:	3728      	adds	r7, #40	; 0x28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40013000 	.word	0x40013000
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40020000 	.word	0x40020000

080036fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <HAL_MspInit+0x4c>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	4a0f      	ldr	r2, [pc, #60]	; (8003748 <HAL_MspInit+0x4c>)
 800370c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003710:	6453      	str	r3, [r2, #68]	; 0x44
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_MspInit+0x4c>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_MspInit+0x4c>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a08      	ldr	r2, [pc, #32]	; (8003748 <HAL_MspInit+0x4c>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_MspInit+0x4c>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800

0800374c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800375e:	e7fe      	b.n	800375e <HardFault_Handler+0x4>

08003760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003764:	e7fe      	b.n	8003764 <MemManage_Handler+0x4>

08003766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800376a:	e7fe      	b.n	800376a <BusFault_Handler+0x4>

0800376c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003770:	e7fe      	b.n	8003770 <UsageFault_Handler+0x4>

08003772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037a0:	f001 f8d0 	bl	8004944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80037ac:	4802      	ldr	r0, [pc, #8]	; (80037b8 <DMA1_Stream1_IRQHandler+0x10>)
 80037ae:	f002 f9c5 	bl	8005b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	2000060c 	.word	0x2000060c

080037bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <DMA1_Stream3_IRQHandler+0x10>)
 80037c2:	f002 f9bb 	bl	8005b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200006ac 	.word	0x200006ac

080037d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <CAN1_RX0_IRQHandler+0x10>)
 80037d6:	f001 fd2c 	bl	8005232 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200002b4 	.word	0x200002b4

080037e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80037e8:	2080      	movs	r0, #128	; 0x80
 80037ea:	f002 fdef 	bl	80063cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80037f8:	4802      	ldr	r0, [pc, #8]	; (8003804 <USART3_IRQHandler+0x10>)
 80037fa:	f005 f881 	bl	8008900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	2000066c 	.word	0x2000066c

08003808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <SystemInit+0x28>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <SystemInit+0x28>)
 8003814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <SystemInit+0x28>)
 800381e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003822:	609a      	str	r2, [r3, #8]
#endif
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b096      	sub	sp, #88	; 0x58
 8003838:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	609a      	str	r2, [r3, #8]
 8003846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003848:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	60da      	str	r2, [r3, #12]
 8003860:	611a      	str	r2, [r3, #16]
 8003862:	615a      	str	r2, [r3, #20]
 8003864:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	2220      	movs	r2, #32
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f005 ff39 	bl	80096e4 <memset>

  htim1.Instance = TIM1;
 8003872:	4b3e      	ldr	r3, [pc, #248]	; (800396c <MX_TIM1_Init+0x138>)
 8003874:	4a3e      	ldr	r2, [pc, #248]	; (8003970 <MX_TIM1_Init+0x13c>)
 8003876:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003878:	4b3c      	ldr	r3, [pc, #240]	; (800396c <MX_TIM1_Init+0x138>)
 800387a:	22b3      	movs	r2, #179	; 0xb3
 800387c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387e:	4b3b      	ldr	r3, [pc, #236]	; (800396c <MX_TIM1_Init+0x138>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003884:	4b39      	ldr	r3, [pc, #228]	; (800396c <MX_TIM1_Init+0x138>)
 8003886:	2263      	movs	r2, #99	; 0x63
 8003888:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800388a:	4b38      	ldr	r3, [pc, #224]	; (800396c <MX_TIM1_Init+0x138>)
 800388c:	2200      	movs	r2, #0
 800388e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003890:	4b36      	ldr	r3, [pc, #216]	; (800396c <MX_TIM1_Init+0x138>)
 8003892:	2200      	movs	r2, #0
 8003894:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003896:	4b35      	ldr	r3, [pc, #212]	; (800396c <MX_TIM1_Init+0x138>)
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800389c:	4833      	ldr	r0, [pc, #204]	; (800396c <MX_TIM1_Init+0x138>)
 800389e:	f004 f847 	bl	8007930 <HAL_TIM_Base_Init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80038a8:	f7ff fe90 	bl	80035cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80038b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038b6:	4619      	mov	r1, r3
 80038b8:	482c      	ldr	r0, [pc, #176]	; (800396c <MX_TIM1_Init+0x138>)
 80038ba:	f004 fa19 	bl	8007cf0 <HAL_TIM_ConfigClockSource>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80038c4:	f7ff fe82 	bl	80035cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80038c8:	4828      	ldr	r0, [pc, #160]	; (800396c <MX_TIM1_Init+0x138>)
 80038ca:	f004 f880 	bl	80079ce <HAL_TIM_PWM_Init>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80038d4:	f7ff fe7a 	bl	80035cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d8:	2300      	movs	r3, #0
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038e4:	4619      	mov	r1, r3
 80038e6:	4821      	ldr	r0, [pc, #132]	; (800396c <MX_TIM1_Init+0x138>)
 80038e8:	f004 fdd6 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80038f2:	f7ff fe6b 	bl	80035cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038f6:	2360      	movs	r3, #96	; 0x60
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038fe:	2300      	movs	r3, #0
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003902:	2300      	movs	r3, #0
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003906:	2300      	movs	r3, #0
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003916:	2204      	movs	r2, #4
 8003918:	4619      	mov	r1, r3
 800391a:	4814      	ldr	r0, [pc, #80]	; (800396c <MX_TIM1_Init+0x138>)
 800391c:	f004 f922 	bl	8007b64 <HAL_TIM_PWM_ConfigChannel>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003926:	f7ff fe51 	bl	80035cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800393e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003942:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003944:	2300      	movs	r3, #0
 8003946:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	4619      	mov	r1, r3
 800394c:	4807      	ldr	r0, [pc, #28]	; (800396c <MX_TIM1_Init+0x138>)
 800394e:	f004 fe1f 	bl	8008590 <HAL_TIMEx_ConfigBreakDeadTime>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003958:	f7ff fe38 	bl	80035cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800395c:	4803      	ldr	r0, [pc, #12]	; (800396c <MX_TIM1_Init+0x138>)
 800395e:	f000 f9ff 	bl	8003d60 <HAL_TIM_MspPostInit>

}
 8003962:	bf00      	nop
 8003964:	3758      	adds	r7, #88	; 0x58
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	2000058c 	.word	0x2000058c
 8003970:	40010000 	.word	0x40010000

08003974 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08e      	sub	sp, #56	; 0x38
 8003978:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800397a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003988:	f107 0320 	add.w	r3, r7, #32
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003992:	1d3b      	adds	r3, r7, #4
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]
 80039a0:	615a      	str	r2, [r3, #20]
 80039a2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80039a4:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <MX_TIM2_Init+0xe4>)
 80039a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80039ac:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <MX_TIM2_Init+0xe4>)
 80039ae:	2259      	movs	r2, #89	; 0x59
 80039b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b2:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <MX_TIM2_Init+0xe4>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80039b8:	4b27      	ldr	r3, [pc, #156]	; (8003a58 <MX_TIM2_Init+0xe4>)
 80039ba:	2263      	movs	r2, #99	; 0x63
 80039bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039be:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <MX_TIM2_Init+0xe4>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c4:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <MX_TIM2_Init+0xe4>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039ca:	4823      	ldr	r0, [pc, #140]	; (8003a58 <MX_TIM2_Init+0xe4>)
 80039cc:	f003 ffb0 	bl	8007930 <HAL_TIM_Base_Init>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80039d6:	f7ff fdf9 	bl	80035cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039e4:	4619      	mov	r1, r3
 80039e6:	481c      	ldr	r0, [pc, #112]	; (8003a58 <MX_TIM2_Init+0xe4>)
 80039e8:	f004 f982 	bl	8007cf0 <HAL_TIM_ConfigClockSource>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80039f2:	f7ff fdeb 	bl	80035cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80039f6:	4818      	ldr	r0, [pc, #96]	; (8003a58 <MX_TIM2_Init+0xe4>)
 80039f8:	f003 ffe9 	bl	80079ce <HAL_TIM_PWM_Init>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8003a02:	f7ff fde3 	bl	80035cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a06:	2300      	movs	r3, #0
 8003a08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a0e:	f107 0320 	add.w	r3, r7, #32
 8003a12:	4619      	mov	r1, r3
 8003a14:	4810      	ldr	r0, [pc, #64]	; (8003a58 <MX_TIM2_Init+0xe4>)
 8003a16:	f004 fd3f 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003a20:	f7ff fdd4 	bl	80035cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a24:	2360      	movs	r3, #96	; 0x60
 8003a26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	2208      	movs	r2, #8
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4807      	ldr	r0, [pc, #28]	; (8003a58 <MX_TIM2_Init+0xe4>)
 8003a3c:	f004 f892 	bl	8007b64 <HAL_TIM_PWM_ConfigChannel>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8003a46:	f7ff fdc1 	bl	80035cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003a4a:	4803      	ldr	r0, [pc, #12]	; (8003a58 <MX_TIM2_Init+0xe4>)
 8003a4c:	f000 f988 	bl	8003d60 <HAL_TIM_MspPostInit>

}
 8003a50:	bf00      	nop
 8003a52:	3738      	adds	r7, #56	; 0x38
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	200005cc 	.word	0x200005cc

08003a5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08e      	sub	sp, #56	; 0x38
 8003a60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a70:	f107 0320 	add.w	r3, r7, #32
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a7a:	1d3b      	adds	r3, r7, #4
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	611a      	str	r2, [r3, #16]
 8003a88:	615a      	str	r2, [r3, #20]
 8003a8a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003a8c:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003a8e:	4a33      	ldr	r2, [pc, #204]	; (8003b5c <MX_TIM3_Init+0x100>)
 8003a90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003a92:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003a94:	2259      	movs	r2, #89	; 0x59
 8003a96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a98:	4b2f      	ldr	r3, [pc, #188]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003a9e:	4b2e      	ldr	r3, [pc, #184]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003aa0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003aa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aac:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ab2:	4829      	ldr	r0, [pc, #164]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003ab4:	f003 ff3c 	bl	8007930 <HAL_TIM_Base_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003abe:	f7ff fd85 	bl	80035cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003acc:	4619      	mov	r1, r3
 8003ace:	4822      	ldr	r0, [pc, #136]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003ad0:	f004 f90e 	bl	8007cf0 <HAL_TIM_ConfigClockSource>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003ada:	f7ff fd77 	bl	80035cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ade:	481e      	ldr	r0, [pc, #120]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003ae0:	f003 ff75 	bl	80079ce <HAL_TIM_PWM_Init>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003aea:	f7ff fd6f 	bl	80035cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003af6:	f107 0320 	add.w	r3, r7, #32
 8003afa:	4619      	mov	r1, r3
 8003afc:	4816      	ldr	r0, [pc, #88]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003afe:	f004 fccb 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003b08:	f7ff fd60 	bl	80035cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b0c:	2360      	movs	r3, #96	; 0x60
 8003b0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003b10:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003b14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	2200      	movs	r2, #0
 8003b22:	4619      	mov	r1, r3
 8003b24:	480c      	ldr	r0, [pc, #48]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003b26:	f004 f81d 	bl	8007b64 <HAL_TIM_PWM_ConfigChannel>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003b30:	f7ff fd4c 	bl	80035cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b34:	1d3b      	adds	r3, r7, #4
 8003b36:	2204      	movs	r2, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4807      	ldr	r0, [pc, #28]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003b3c:	f004 f812 	bl	8007b64 <HAL_TIM_PWM_ConfigChannel>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003b46:	f7ff fd41 	bl	80035cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003b4a:	4803      	ldr	r0, [pc, #12]	; (8003b58 <MX_TIM3_Init+0xfc>)
 8003b4c:	f000 f908 	bl	8003d60 <HAL_TIM_MspPostInit>

}
 8003b50:	bf00      	nop
 8003b52:	3738      	adds	r7, #56	; 0x38
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	2000054c 	.word	0x2000054c
 8003b5c:	40000400 	.word	0x40000400

08003b60 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b096      	sub	sp, #88	; 0x58
 8003b64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	605a      	str	r2, [r3, #4]
 8003b70:	609a      	str	r2, [r3, #8]
 8003b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	60da      	str	r2, [r3, #12]
 8003b8c:	611a      	str	r2, [r3, #16]
 8003b8e:	615a      	str	r2, [r3, #20]
 8003b90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b92:	1d3b      	adds	r3, r7, #4
 8003b94:	2220      	movs	r2, #32
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f005 fda3 	bl	80096e4 <memset>

  htim8.Instance = TIM8;
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003ba0:	4a3d      	ldr	r2, [pc, #244]	; (8003c98 <MX_TIM8_Init+0x138>)
 8003ba2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8003ba4:	4b3b      	ldr	r3, [pc, #236]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003ba6:	22b3      	movs	r2, #179	; 0xb3
 8003ba8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003baa:	4b3a      	ldr	r3, [pc, #232]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8003bb0:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003bb2:	2263      	movs	r2, #99	; 0x63
 8003bb4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb6:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003bbc:	4b35      	ldr	r3, [pc, #212]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc2:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003bc8:	4832      	ldr	r0, [pc, #200]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003bca:	f003 feb1 	bl	8007930 <HAL_TIM_Base_Init>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003bd4:	f7ff fcfa 	bl	80035cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003bde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003be2:	4619      	mov	r1, r3
 8003be4:	482b      	ldr	r0, [pc, #172]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003be6:	f004 f883 	bl	8007cf0 <HAL_TIM_ConfigClockSource>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8003bf0:	f7ff fcec 	bl	80035cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003bf4:	4827      	ldr	r0, [pc, #156]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003bf6:	f003 feea 	bl	80079ce <HAL_TIM_PWM_Init>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003c00:	f7ff fce4 	bl	80035cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c04:	2300      	movs	r3, #0
 8003c06:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003c0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c10:	4619      	mov	r1, r3
 8003c12:	4820      	ldr	r0, [pc, #128]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003c14:	f004 fc40 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003c1e:	f7ff fcd5 	bl	80035cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c22:	2360      	movs	r3, #96	; 0x60
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c36:	2300      	movs	r3, #0
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3e:	220c      	movs	r2, #12
 8003c40:	4619      	mov	r1, r3
 8003c42:	4814      	ldr	r0, [pc, #80]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003c44:	f003 ff8e 	bl	8007b64 <HAL_TIM_PWM_ConfigChannel>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8003c4e:	f7ff fcbd 	bl	80035cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4807      	ldr	r0, [pc, #28]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003c76:	f004 fc8b 	bl	8008590 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8003c80:	f7ff fca4 	bl	80035cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8003c84:	4803      	ldr	r0, [pc, #12]	; (8003c94 <MX_TIM8_Init+0x134>)
 8003c86:	f000 f86b 	bl	8003d60 <HAL_TIM_MspPostInit>

}
 8003c8a:	bf00      	nop
 8003c8c:	3758      	adds	r7, #88	; 0x58
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	2000050c 	.word	0x2000050c
 8003c98:	40010400 	.word	0x40010400

08003c9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a29      	ldr	r2, [pc, #164]	; (8003d50 <HAL_TIM_Base_MspInit+0xb4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10e      	bne.n	8003ccc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	4a27      	ldr	r2, [pc, #156]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cbe:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003cca:	e03a      	b.n	8003d42 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d10e      	bne.n	8003cf4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	4a1d      	ldr	r2, [pc, #116]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce6:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	693b      	ldr	r3, [r7, #16]
}
 8003cf2:	e026      	b.n	8003d42 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <HAL_TIM_Base_MspInit+0xbc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d10e      	bne.n	8003d1c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
}
 8003d1a:	e012      	b.n	8003d42 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a0e      	ldr	r2, [pc, #56]	; (8003d5c <HAL_TIM_Base_MspInit+0xc0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d10d      	bne.n	8003d42 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003d30:	f043 0302 	orr.w	r3, r3, #2
 8003d34:	6453      	str	r3, [r2, #68]	; 0x44
 8003d36:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <HAL_TIM_Base_MspInit+0xb8>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	68bb      	ldr	r3, [r7, #8]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40010400 	.word	0x40010400

08003d60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08c      	sub	sp, #48	; 0x30
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	f107 031c 	add.w	r3, r7, #28
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a49      	ldr	r2, [pc, #292]	; (8003ea4 <HAL_TIM_MspPostInit+0x144>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d11f      	bne.n	8003dc2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	4b48      	ldr	r3, [pc, #288]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a47      	ldr	r2, [pc, #284]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003d8c:	f043 0310 	orr.w	r3, r3, #16
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b45      	ldr	r3, [pc, #276]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8003d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da4:	2302      	movs	r3, #2
 8003da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dac:	2300      	movs	r3, #0
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003db0:	2301      	movs	r3, #1
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8003db4:	f107 031c 	add.w	r3, r7, #28
 8003db8:	4619      	mov	r1, r3
 8003dba:	483c      	ldr	r0, [pc, #240]	; (8003eac <HAL_TIM_MspPostInit+0x14c>)
 8003dbc:	f002 f928 	bl	8006010 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003dc0:	e06c      	b.n	8003e9c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d11f      	bne.n	8003e0c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	4b35      	ldr	r3, [pc, #212]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	4a34      	ldr	r2, [pc, #208]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003dd6:	f043 0302 	orr.w	r3, r3, #2
 8003dda:	6313      	str	r3, [r2, #48]	; 0x30
 8003ddc:	4b32      	ldr	r3, [pc, #200]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 8003de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	2302      	movs	r3, #2
 8003df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df6:	2300      	movs	r3, #0
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8003dfe:	f107 031c 	add.w	r3, r7, #28
 8003e02:	4619      	mov	r1, r3
 8003e04:	482a      	ldr	r0, [pc, #168]	; (8003eb0 <HAL_TIM_MspPostInit+0x150>)
 8003e06:	f002 f903 	bl	8006010 <HAL_GPIO_Init>
}
 8003e0a:	e047      	b.n	8003e9c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM3)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a28      	ldr	r2, [pc, #160]	; (8003eb4 <HAL_TIM_MspPostInit+0x154>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d11e      	bne.n	8003e54 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	4a22      	ldr	r2, [pc, #136]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6313      	str	r3, [r2, #48]	; 0x30
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8003e32:	23c0      	movs	r3, #192	; 0xc0
 8003e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e36:	2302      	movs	r3, #2
 8003e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e42:	2302      	movs	r3, #2
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e46:	f107 031c 	add.w	r3, r7, #28
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	481a      	ldr	r0, [pc, #104]	; (8003eb8 <HAL_TIM_MspPostInit+0x158>)
 8003e4e:	f002 f8df 	bl	8006010 <HAL_GPIO_Init>
}
 8003e52:	e023      	b.n	8003e9c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM8)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_TIM_MspPostInit+0x15c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d11e      	bne.n	8003e9c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003e68:	f043 0304 	orr.w	r3, r3, #4
 8003e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <HAL_TIM_MspPostInit+0x148>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8003e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e80:	2302      	movs	r3, #2
 8003e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8003e90:	f107 031c 	add.w	r3, r7, #28
 8003e94:	4619      	mov	r1, r3
 8003e96:	4808      	ldr	r0, [pc, #32]	; (8003eb8 <HAL_TIM_MspPostInit+0x158>)
 8003e98:	f002 f8ba 	bl	8006010 <HAL_GPIO_Init>
}
 8003e9c:	bf00      	nop
 8003e9e:	3730      	adds	r7, #48	; 0x30
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40020400 	.word	0x40020400
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40020800 	.word	0x40020800
 8003ebc:	40010400 	.word	0x40010400

08003ec0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003ec4:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <MX_USART3_UART_Init+0x4c>)
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <MX_USART3_UART_Init+0x50>)
 8003ec8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <MX_USART3_UART_Init+0x4c>)
 8003ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ed0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <MX_USART3_UART_Init+0x4c>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <MX_USART3_UART_Init+0x4c>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <MX_USART3_UART_Init+0x4c>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <MX_USART3_UART_Init+0x4c>)
 8003ee6:	220c      	movs	r2, #12
 8003ee8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <MX_USART3_UART_Init+0x4c>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <MX_USART3_UART_Init+0x4c>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ef6:	4805      	ldr	r0, [pc, #20]	; (8003f0c <MX_USART3_UART_Init+0x4c>)
 8003ef8:	f004 fb9c 	bl	8008634 <HAL_UART_Init>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003f02:	f7ff fb63 	bl	80035cc <Error_Handler>
  }

}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000066c 	.word	0x2000066c
 8003f10:	40004800 	.word	0x40004800

08003f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	f107 0314 	add.w	r3, r7, #20
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a4c      	ldr	r2, [pc, #304]	; (8004064 <HAL_UART_MspInit+0x150>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	f040 8091 	bne.w	800405a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	4b4a      	ldr	r3, [pc, #296]	; (8004068 <HAL_UART_MspInit+0x154>)
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	4a49      	ldr	r2, [pc, #292]	; (8004068 <HAL_UART_MspInit+0x154>)
 8003f42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f46:	6413      	str	r3, [r2, #64]	; 0x40
 8003f48:	4b47      	ldr	r3, [pc, #284]	; (8004068 <HAL_UART_MspInit+0x154>)
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	4b43      	ldr	r3, [pc, #268]	; (8004068 <HAL_UART_MspInit+0x154>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	4a42      	ldr	r2, [pc, #264]	; (8004068 <HAL_UART_MspInit+0x154>)
 8003f5e:	f043 0308 	orr.w	r3, r3, #8
 8003f62:	6313      	str	r3, [r2, #48]	; 0x30
 8003f64:	4b40      	ldr	r3, [pc, #256]	; (8004068 <HAL_UART_MspInit+0x154>)
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8003f70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f76:	2302      	movs	r3, #2
 8003f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f82:	2307      	movs	r3, #7
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f86:	f107 0314 	add.w	r3, r7, #20
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4837      	ldr	r0, [pc, #220]	; (800406c <HAL_UART_MspInit+0x158>)
 8003f8e:	f002 f83f 	bl	8006010 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003f92:	4b37      	ldr	r3, [pc, #220]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003f94:	4a37      	ldr	r2, [pc, #220]	; (8004074 <HAL_UART_MspInit+0x160>)
 8003f96:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003f98:	4b35      	ldr	r3, [pc, #212]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003f9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f9e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fa0:	4b33      	ldr	r3, [pc, #204]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fa6:	4b32      	ldr	r3, [pc, #200]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fac:	4b30      	ldr	r3, [pc, #192]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fb2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fb4:	4b2e      	ldr	r3, [pc, #184]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fba:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003fc6:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fcc:	4b28      	ldr	r3, [pc, #160]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003fd2:	4827      	ldr	r0, [pc, #156]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003fd4:	f001 fc8a 	bl	80058ec <HAL_DMA_Init>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003fde:	f7ff faf5 	bl	80035cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a22      	ldr	r2, [pc, #136]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003fe6:	635a      	str	r2, [r3, #52]	; 0x34
 8003fe8:	4a21      	ldr	r2, [pc, #132]	; (8004070 <HAL_UART_MspInit+0x15c>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <HAL_UART_MspInit+0x164>)
 8003ff0:	4a22      	ldr	r2, [pc, #136]	; (800407c <HAL_UART_MspInit+0x168>)
 8003ff2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_UART_MspInit+0x164>)
 8003ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ffa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ffc:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <HAL_UART_MspInit+0x164>)
 8003ffe:	2240      	movs	r2, #64	; 0x40
 8004000:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_UART_MspInit+0x164>)
 8004004:	2200      	movs	r2, #0
 8004006:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004008:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <HAL_UART_MspInit+0x164>)
 800400a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800400e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_UART_MspInit+0x164>)
 8004012:	2200      	movs	r2, #0
 8004014:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004016:	4b18      	ldr	r3, [pc, #96]	; (8004078 <HAL_UART_MspInit+0x164>)
 8004018:	2200      	movs	r2, #0
 800401a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <HAL_UART_MspInit+0x164>)
 800401e:	2200      	movs	r2, #0
 8004020:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <HAL_UART_MspInit+0x164>)
 8004024:	2200      	movs	r2, #0
 8004026:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004028:	4b13      	ldr	r3, [pc, #76]	; (8004078 <HAL_UART_MspInit+0x164>)
 800402a:	2200      	movs	r2, #0
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800402e:	4812      	ldr	r0, [pc, #72]	; (8004078 <HAL_UART_MspInit+0x164>)
 8004030:	f001 fc5c 	bl	80058ec <HAL_DMA_Init>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800403a:	f7ff fac7 	bl	80035cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a0d      	ldr	r2, [pc, #52]	; (8004078 <HAL_UART_MspInit+0x164>)
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
 8004044:	4a0c      	ldr	r2, [pc, #48]	; (8004078 <HAL_UART_MspInit+0x164>)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800404a:	2200      	movs	r2, #0
 800404c:	2100      	movs	r1, #0
 800404e:	2027      	movs	r0, #39	; 0x27
 8004050:	f001 fbf9 	bl	8005846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004054:	2027      	movs	r0, #39	; 0x27
 8004056:	f001 fc12 	bl	800587e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800405a:	bf00      	nop
 800405c:	3728      	adds	r7, #40	; 0x28
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40004800 	.word	0x40004800
 8004068:	40023800 	.word	0x40023800
 800406c:	40020c00 	.word	0x40020c00
 8004070:	2000060c 	.word	0x2000060c
 8004074:	40026028 	.word	0x40026028
 8004078:	200006ac 	.word	0x200006ac
 800407c:	40026058 	.word	0x40026058

08004080 <joystick_Init>:
static int joyPosBuffer[2][5] = {0};
static int joy_pos_buffer_cnt = 0;
static const float JoyForwardAngle = 1.57;
static const float JoyForwardAngleDeadzone = 0.1;

void joystick_Init(void){
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8004084:	2228      	movs	r2, #40	; 0x28
 8004086:	2100      	movs	r1, #0
 8004088:	4802      	ldr	r0, [pc, #8]	; (8004094 <joystick_Init+0x14>)
 800408a:	f005 fb2b 	bl	80096e4 <memset>
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000230 	.word	0x20000230

08004098 <joystickCalculatePos>:

void joystickCalculatePos(void)
{
 8004098:	b5b0      	push	{r4, r5, r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
  // update joystick reading into buffer array
  if (joy_pos_buffer_cnt == JoyPosBufferSize)
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <joystickCalculatePos+0x88>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2205      	movs	r2, #5
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d102      	bne.n	80040ae <joystickCalculatePos+0x16>
    joy_pos_buffer_cnt = 0;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <joystickCalculatePos+0x88>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]

  tempJoyRawDataX = (tempJoyRawDataX < 0)? tempJoyRawDataX + JoystickCenterX : tempJoyRawDataX - JoystickCenterX;
 80040ae:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <joystickCalculatePos+0x8c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	da05      	bge.n	80040c2 <joystickCalculatePos+0x2a>
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <joystickCalculatePos+0x8c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80040be:	4413      	add	r3, r2
 80040c0:	e004      	b.n	80040cc <joystickCalculatePos+0x34>
 80040c2:	4b18      	ldr	r3, [pc, #96]	; (8004124 <joystickCalculatePos+0x8c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <joystickCalculatePos+0x8c>)
 80040ce:	6013      	str	r3, [r2, #0]
  tempJoyRawDataY = (tempJoyRawDataY > 0)? JoystickCenterY - tempJoyRawDataY:  -tempJoyRawDataY - JoystickCenterX;
 80040d0:	4b15      	ldr	r3, [pc, #84]	; (8004128 <joystickCalculatePos+0x90>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	dd05      	ble.n	80040e4 <joystickCalculatePos+0x4c>
 80040d8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80040dc:	4b12      	ldr	r3, [pc, #72]	; (8004128 <joystickCalculatePos+0x90>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	e005      	b.n	80040f0 <joystickCalculatePos+0x58>
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <joystickCalculatePos+0x90>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	425b      	negs	r3, r3
 80040ea:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	4a0d      	ldr	r2, [pc, #52]	; (8004128 <joystickCalculatePos+0x90>)
 80040f2:	6013      	str	r3, [r2, #0]

  joyPosBuffer[0][joy_pos_buffer_cnt] = tempJoyRawDataX;
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <joystickCalculatePos+0x88>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <joystickCalculatePos+0x8c>)
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	490b      	ldr	r1, [pc, #44]	; (800412c <joystickCalculatePos+0x94>)
 80040fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  joyPosBuffer[1][joy_pos_buffer_cnt] = tempJoyRawDataY;
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <joystickCalculatePos+0x88>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a08      	ldr	r2, [pc, #32]	; (8004128 <joystickCalculatePos+0x90>)
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	4908      	ldr	r1, [pc, #32]	; (800412c <joystickCalculatePos+0x94>)
 800410c:	3305      	adds	r3, #5
 800410e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // calculate joystick position average from the buffer
  int sum_x = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
  int sum_y = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	e019      	b.n	8004154 <joystickCalculatePos+0xbc>
 8004120:	20000258 	.word	0x20000258
 8004124:	20000504 	.word	0x20000504
 8004128:	20000408 	.word	0x20000408
 800412c:	20000230 	.word	0x20000230
  {
    sum_x += joyPosBuffer[0][i];
 8004130:	4aaf      	ldr	r2, [pc, #700]	; (80043f0 <joystickCalculatePos+0x358>)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
    sum_y += joyPosBuffer[1][i];
 800413e:	4aac      	ldr	r2, [pc, #688]	; (80043f0 <joystickCalculatePos+0x358>)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3305      	adds	r3, #5
 8004144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	4413      	add	r3, r2
 800414c:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3301      	adds	r3, #1
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	2205      	movs	r2, #5
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4293      	cmp	r3, r2
 800415a:	dbe9      	blt.n	8004130 <joystickCalculatePos+0x98>
  }

  hJoystick.x = sum_x / JoyPosBufferSize;
 800415c:	2205      	movs	r2, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	fb93 f3f2 	sdiv	r3, r3, r2
 8004164:	b21a      	sxth	r2, r3
 8004166:	4ba3      	ldr	r3, [pc, #652]	; (80043f4 <joystickCalculatePos+0x35c>)
 8004168:	801a      	strh	r2, [r3, #0]
  hJoystick.y = sum_y / JoyPosBufferSize;
 800416a:	2205      	movs	r2, #5
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004172:	b21a      	sxth	r2, r3
 8004174:	4b9f      	ldr	r3, [pc, #636]	; (80043f4 <joystickCalculatePos+0x35c>)
 8004176:	805a      	strh	r2, [r3, #2]

  // calculate magnitude and angle
  hJoystick.magnitude = sqrt(pow(hJoystick.x, 2) + pow(hJoystick.y,2));
 8004178:	4b9e      	ldr	r3, [pc, #632]	; (80043f4 <joystickCalculatePos+0x35c>)
 800417a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc f988 	bl	8000494 <__aeabi_i2d>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	ed9f 1b95 	vldr	d1, [pc, #596]	; 80043e0 <joystickCalculatePos+0x348>
 800418c:	ec43 2b10 	vmov	d0, r2, r3
 8004190:	f005 fd3e 	bl	8009c10 <pow>
 8004194:	ec55 4b10 	vmov	r4, r5, d0
 8004198:	4b96      	ldr	r3, [pc, #600]	; (80043f4 <joystickCalculatePos+0x35c>)
 800419a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc f978 	bl	8000494 <__aeabi_i2d>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	ed9f 1b8d 	vldr	d1, [pc, #564]	; 80043e0 <joystickCalculatePos+0x348>
 80041ac:	ec43 2b10 	vmov	d0, r2, r3
 80041b0:	f005 fd2e 	bl	8009c10 <pow>
 80041b4:	ec53 2b10 	vmov	r2, r3, d0
 80041b8:	4620      	mov	r0, r4
 80041ba:	4629      	mov	r1, r5
 80041bc:	f7fc f81e 	bl	80001fc <__adddf3>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	ec43 2b17 	vmov	d7, r2, r3
 80041c8:	eeb0 0a47 	vmov.f32	s0, s14
 80041cc:	eef0 0a67 	vmov.f32	s1, s15
 80041d0:	f005 fdcc 	bl	8009d6c <sqrt>
 80041d4:	ec53 2b10 	vmov	r2, r3, d0
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	f7fc fcbc 	bl	8000b58 <__aeabi_d2f>
 80041e0:	4603      	mov	r3, r0
 80041e2:	4a84      	ldr	r2, [pc, #528]	; (80043f4 <joystickCalculatePos+0x35c>)
 80041e4:	6053      	str	r3, [r2, #4]
  hJoystick.angle = atan2(hJoystick.y, hJoystick.x);
 80041e6:	4b83      	ldr	r3, [pc, #524]	; (80043f4 <joystickCalculatePos+0x35c>)
 80041e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fc f951 	bl	8000494 <__aeabi_i2d>
 80041f2:	4604      	mov	r4, r0
 80041f4:	460d      	mov	r5, r1
 80041f6:	4b7f      	ldr	r3, [pc, #508]	; (80043f4 <joystickCalculatePos+0x35c>)
 80041f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc f949 	bl	8000494 <__aeabi_i2d>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	ec43 2b11 	vmov	d1, r2, r3
 800420a:	ec45 4b10 	vmov	d0, r4, r5
 800420e:	f005 fcfd 	bl	8009c0c <atan2>
 8004212:	ec53 2b10 	vmov	r2, r3, d0
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	f7fc fc9d 	bl	8000b58 <__aeabi_d2f>
 800421e:	4603      	mov	r3, r0
 8004220:	4a74      	ldr	r2, [pc, #464]	; (80043f4 <joystickCalculatePos+0x35c>)
 8004222:	6093      	str	r3, [r2, #8]

  // limit magnitude
  if (hJoystick.magnitude > JoystickMagnitudeMax)
 8004224:	4b73      	ldr	r3, [pc, #460]	; (80043f4 <joystickCalculatePos+0x35c>)
 8004226:	ed93 7a01 	vldr	s14, [r3, #4]
 800422a:	eddf 7a73 	vldr	s15, [pc, #460]	; 80043f8 <joystickCalculatePos+0x360>
 800422e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423a:	dd06      	ble.n	800424a <joystickCalculatePos+0x1b2>
    hJoystick.magnitude = JoystickMagnitudeMax;
 800423c:	eddf 7a6e 	vldr	s15, [pc, #440]	; 80043f8 <joystickCalculatePos+0x360>
 8004240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004244:	4b6b      	ldr	r3, [pc, #428]	; (80043f4 <joystickCalculatePos+0x35c>)
 8004246:	edc3 7a01 	vstr	s15, [r3, #4]

  // filter joystick forward deadzone
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 800424a:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <joystickCalculatePos+0x35c>)
 800424c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004250:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80043fc <joystickCalculatePos+0x364>
 8004254:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8004400 <joystickCalculatePos+0x368>
 8004258:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800425c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004264:	dd10      	ble.n	8004288 <joystickCalculatePos+0x1f0>
      hJoystick.angle < JoyForwardAngle + JoyForwardAngleDeadzone)
 8004266:	4b63      	ldr	r3, [pc, #396]	; (80043f4 <joystickCalculatePos+0x35c>)
 8004268:	ed93 7a02 	vldr	s14, [r3, #8]
 800426c:	eddf 6a63 	vldr	s13, [pc, #396]	; 80043fc <joystickCalculatePos+0x364>
 8004270:	eddf 7a63 	vldr	s15, [pc, #396]	; 8004400 <joystickCalculatePos+0x368>
 8004274:	ee76 7aa7 	vadd.f32	s15, s13, s15
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 8004278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004280:	d502      	bpl.n	8004288 <joystickCalculatePos+0x1f0>
    hJoystick.angle = JoyForwardAngle;
 8004282:	4a60      	ldr	r2, [pc, #384]	; (8004404 <joystickCalculatePos+0x36c>)
 8004284:	4b5b      	ldr	r3, [pc, #364]	; (80043f4 <joystickCalculatePos+0x35c>)
 8004286:	609a      	str	r2, [r3, #8]

  // filter joystick backward deadzone
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 8004288:	4b5a      	ldr	r3, [pc, #360]	; (80043f4 <joystickCalculatePos+0x35c>)
 800428a:	ed93 7a02 	vldr	s14, [r3, #8]
 800428e:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80043fc <joystickCalculatePos+0x364>
 8004292:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004400 <joystickCalculatePos+0x368>
 8004296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429a:	eef1 7a67 	vneg.f32	s15, s15
 800429e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	dd16      	ble.n	80042d6 <joystickCalculatePos+0x23e>
      hJoystick.angle < -(JoyForwardAngle - JoyForwardAngleDeadzone))
 80042a8:	4b52      	ldr	r3, [pc, #328]	; (80043f4 <joystickCalculatePos+0x35c>)
 80042aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80042ae:	eddf 6a53 	vldr	s13, [pc, #332]	; 80043fc <joystickCalculatePos+0x364>
 80042b2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8004400 <joystickCalculatePos+0x368>
 80042b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80042ba:	eef1 7a67 	vneg.f32	s15, s15
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 80042be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c6:	d506      	bpl.n	80042d6 <joystickCalculatePos+0x23e>
    hJoystick.angle = -JoyForwardAngle;
 80042c8:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80043fc <joystickCalculatePos+0x364>
 80042cc:	eef1 7a67 	vneg.f32	s15, s15
 80042d0:	4b48      	ldr	r3, [pc, #288]	; (80043f4 <joystickCalculatePos+0x35c>)
 80042d2:	edc3 7a02 	vstr	s15, [r3, #8]

  // normalize joystick reading
  hJoystick.linear = hJoystick.magnitude/JoystickMagnitudeMax * sin(hJoystick.angle);
 80042d6:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <joystickCalculatePos+0x35c>)
 80042d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80042dc:	eddf 7a46 	vldr	s15, [pc, #280]	; 80043f8 <joystickCalculatePos+0x360>
 80042e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80042e8:	ee16 0a90 	vmov	r0, s13
 80042ec:	f7fc f8e4 	bl	80004b8 <__aeabi_f2d>
 80042f0:	4604      	mov	r4, r0
 80042f2:	460d      	mov	r5, r1
 80042f4:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <joystickCalculatePos+0x35c>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fc f8dd 	bl	80004b8 <__aeabi_f2d>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	ec43 2b10 	vmov	d0, r2, r3
 8004306:	f005 fbf3 	bl	8009af0 <sin>
 800430a:	ec53 2b10 	vmov	r2, r3, d0
 800430e:	4620      	mov	r0, r4
 8004310:	4629      	mov	r1, r5
 8004312:	f7fc f929 	bl	8000568 <__aeabi_dmul>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	f7fc fc1b 	bl	8000b58 <__aeabi_d2f>
 8004322:	4603      	mov	r3, r0
 8004324:	4a33      	ldr	r2, [pc, #204]	; (80043f4 <joystickCalculatePos+0x35c>)
 8004326:	60d3      	str	r3, [r2, #12]
  hJoystick.angular = hJoystick.magnitude/JoystickMagnitudeMax * cos(hJoystick.angle);
 8004328:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <joystickCalculatePos+0x35c>)
 800432a:	ed93 7a01 	vldr	s14, [r3, #4]
 800432e:	eddf 7a32 	vldr	s15, [pc, #200]	; 80043f8 <joystickCalculatePos+0x360>
 8004332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004336:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800433a:	ee16 0a90 	vmov	r0, s13
 800433e:	f7fc f8bb 	bl	80004b8 <__aeabi_f2d>
 8004342:	4604      	mov	r4, r0
 8004344:	460d      	mov	r5, r1
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <joystickCalculatePos+0x35c>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc f8b4 	bl	80004b8 <__aeabi_f2d>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	ec43 2b10 	vmov	d0, r2, r3
 8004358:	f005 fb6e 	bl	8009a38 <cos>
 800435c:	ec53 2b10 	vmov	r2, r3, d0
 8004360:	4620      	mov	r0, r4
 8004362:	4629      	mov	r1, r5
 8004364:	f7fc f900 	bl	8000568 <__aeabi_dmul>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	f7fc fbf2 	bl	8000b58 <__aeabi_d2f>
 8004374:	4603      	mov	r3, r0
 8004376:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <joystickCalculatePos+0x35c>)
 8004378:	6113      	str	r3, [r2, #16]

  if (fabs(hJoystick.linear) < 0.05)
 800437a:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <joystickCalculatePos+0x35c>)
 800437c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004380:	eef0 7ae7 	vabs.f32	s15, s15
 8004384:	ee17 0a90 	vmov	r0, s15
 8004388:	f7fc f896 	bl	80004b8 <__aeabi_f2d>
 800438c:	a316      	add	r3, pc, #88	; (adr r3, 80043e8 <joystickCalculatePos+0x350>)
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f7fc fb5b 	bl	8000a4c <__aeabi_dcmplt>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <joystickCalculatePos+0x30c>
    hJoystick.linear = 0;
 800439c:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <joystickCalculatePos+0x35c>)
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	60da      	str	r2, [r3, #12]
  if (fabs(hJoystick.angular) < 0.05)
 80043a4:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <joystickCalculatePos+0x35c>)
 80043a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80043aa:	eef0 7ae7 	vabs.f32	s15, s15
 80043ae:	ee17 0a90 	vmov	r0, s15
 80043b2:	f7fc f881 	bl	80004b8 <__aeabi_f2d>
 80043b6:	a30c      	add	r3, pc, #48	; (adr r3, 80043e8 <joystickCalculatePos+0x350>)
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f7fc fb46 	bl	8000a4c <__aeabi_dcmplt>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <joystickCalculatePos+0x336>
    hJoystick.angular = 0;
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <joystickCalculatePos+0x35c>)
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	611a      	str	r2, [r3, #16]

  joy_pos_buffer_cnt++;
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <joystickCalculatePos+0x370>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3301      	adds	r3, #1
 80043d4:	4a0c      	ldr	r2, [pc, #48]	; (8004408 <joystickCalculatePos+0x370>)
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bdb0      	pop	{r4, r5, r7, pc}
 80043e0:	00000000 	.word	0x00000000
 80043e4:	40000000 	.word	0x40000000
 80043e8:	9999999a 	.word	0x9999999a
 80043ec:	3fa99999 	.word	0x3fa99999
 80043f0:	20000230 	.word	0x20000230
 80043f4:	2000070c 	.word	0x2000070c
 80043f8:	00004650 	.word	0x00004650
 80043fc:	3fc8f5c3 	.word	0x3fc8f5c3
 8004400:	3dcccccd 	.word	0x3dcccccd
 8004404:	3fc8f5c3 	.word	0x3fc8f5c3
 8004408:	20000258 	.word	0x20000258

0800440c <wheelSpeedControl_Init>:

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	ed87 0a02 	vstr	s0, [r7, #8]
 8004418:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <wheel_Control>:

void wheel_Control(WheelSpeed* wheel)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  if (wheel->stable_cnt < 25)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b18      	cmp	r3, #24
 800446e:	dc05      	bgt.n	800447c <wheel_Control+0x1c>
  {
      wheel->stable_cnt++;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	611a      	str	r2, [r3, #16]
    return;
 800447a:	e18a      	b.n	8004792 <wheel_Control+0x332>
  }

  joystickCalculatePos();
 800447c:	f7ff fe0c 	bl	8004098 <joystickCalculatePos>
  wheelCalculateSpeed(wheel);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f98f 	bl	80047a4 <wheelCalculateSpeed>

  if (wheel->pre_l == 0 && wheel->pre_r == 0)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	edd3 7a02 	vldr	s15, [r3, #8]
 800448c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004494:	d10a      	bne.n	80044ac <wheel_Control+0x4c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	edd3 7a03 	vldr	s15, [r3, #12]
 800449c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a4:	d102      	bne.n	80044ac <wheel_Control+0x4c>
    wheel->start_from_stationary = true;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	771a      	strb	r2, [r3, #28]

  if (hJoystick.magnitude > JoystickMagnitudeMin)
 80044ac:	4bba      	ldr	r3, [pc, #744]	; (8004798 <wheel_Control+0x338>)
 80044ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80044b2:	eddf 7aba 	vldr	s15, [pc, #744]	; 800479c <wheel_Control+0x33c>
 80044b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	f340 80b2 	ble.w	800462a <wheel_Control+0x1ca>
  {
    float left_speed_step = wheel->left_speed_step;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	617b      	str	r3, [r7, #20]
    float right_speed_step = wheel->right_speed_step;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	613b      	str	r3, [r7, #16]

    if (wheel->start_from_stationary)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	7f1b      	ldrb	r3, [r3, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d03c      	beq.n	8004554 <wheel_Control+0xf4>
    {
      left_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	edd3 7a00 	vldr	s15, [r3]
 80044e0:	eef0 6ae7 	vabs.f32	s13, s15
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80044ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ee:	edc7 7a05 	vstr	s15, [r7, #20]
      right_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	edd3 7a00 	vldr	s15, [r3]
 80044f8:	eef0 6ae7 	vabs.f32	s13, s15
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	ed93 7a08 	vldr	s14, [r3, #32]
 8004502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004506:	edc7 7a04 	vstr	s15, [r7, #16]

      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004510:	eeb0 7ae7 	vabs.f32	s14, s15
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	edd3 7a06 	vldr	s15, [r3, #24]
 800451a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800451e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452a:	dd13      	ble.n	8004554 <wheel_Control+0xf4>
          fabs(wheel->pre_r) > 0.5f * wheel->max_angular_speed)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004532:	eeb0 7ae7 	vabs.f32	s14, s15
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	edd3 7a06 	vldr	s15, [r3, #24]
 800453c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004540:	ee67 7aa6 	vmul.f32	s15, s15, s13
      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8004544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	dd02      	ble.n	8004554 <wheel_Control+0xf4>
      {
	  wheel->start_from_stationary = false;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
      }
    }

    if (( wheel->cur_l - wheel->pre_l) > left_speed_step)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	ed93 7a00 	vldr	s14, [r3]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004564:	ed97 7a05 	vldr	s14, [r7, #20]
 8004568:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004570:	d50a      	bpl.n	8004588 <wheel_Control+0x128>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	ed93 7a02 	vldr	s14, [r3, #8]
 8004578:	edd7 7a05 	vldr	s15, [r7, #20]
 800457c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	edc3 7a00 	vstr	s15, [r3]
 8004586:	e01a      	b.n	80045be <wheel_Control+0x15e>
    else if ((wheel->cur_l - wheel->pre_l) < -left_speed_step)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	ed93 7a00 	vldr	s14, [r3]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	edd3 7a02 	vldr	s15, [r3, #8]
 8004594:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004598:	edd7 7a05 	vldr	s15, [r7, #20]
 800459c:	eef1 7a67 	vneg.f32	s15, s15
 80045a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a8:	d509      	bpl.n	80045be <wheel_Control+0x15e>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80045b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80045b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	edc3 7a00 	vstr	s15, [r3]

    if ((wheel->cur_r - wheel->pre_r) > right_speed_step)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80045ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80045d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045da:	d50a      	bpl.n	80045f2 <wheel_Control+0x192>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	ed93 7a03 	vldr	s14, [r3, #12]
 80045e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	edc3 7a01 	vstr	s15, [r3, #4]
 80045f0:	e07f      	b.n	80046f2 <wheel_Control+0x292>
    else if ((wheel->cur_r - wheel->pre_r) < -right_speed_step)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80045fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004602:	edd7 7a04 	vldr	s15, [r7, #16]
 8004606:	eef1 7a67 	vneg.f32	s15, s15
 800460a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	d56e      	bpl.n	80046f2 <wheel_Control+0x292>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	ed93 7a03 	vldr	s14, [r3, #12]
 800461a:	edd7 7a04 	vldr	s15, [r7, #16]
 800461e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	edc3 7a01 	vstr	s15, [r3, #4]
 8004628:	e063      	b.n	80046f2 <wheel_Control+0x292>
//      wheel->cur_r = 0;

//    float left_speed_step = fabs(wheel->cur_l) / wheel->decel_loop;
//    float right_speed_step = fabs(wheel->cur_r) / wheel->decel_loop;
//
    float left_speed_step = 10;
 800462a:	4b5d      	ldr	r3, [pc, #372]	; (80047a0 <wheel_Control+0x340>)
 800462c:	60fb      	str	r3, [r7, #12]
    float right_speed_step = 10;
 800462e:	4b5c      	ldr	r3, [pc, #368]	; (80047a0 <wheel_Control+0x340>)
 8004630:	60bb      	str	r3, [r7, #8]
//    else if (wheel->cur_r < -right_speed_step)
//      wheel->cur_r = wheel->pre_r + right_speed_step;
//    else
//      wheel->cur_r = 0;

    if (wheel->pre_l > left_speed_step)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	edd3 7a02 	vldr	s15, [r3, #8]
 8004638:	ed97 7a03 	vldr	s14, [r7, #12]
 800463c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	d50a      	bpl.n	800465c <wheel_Control+0x1fc>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	ed93 7a02 	vldr	s14, [r3, #8]
 800464c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	edc3 7a00 	vstr	s15, [r3]
 800465a:	e01a      	b.n	8004692 <wheel_Control+0x232>
    else if (wheel->pre_l < -left_speed_step)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004662:	edd7 7a03 	vldr	s15, [r7, #12]
 8004666:	eef1 7a67 	vneg.f32	s15, s15
 800466a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004672:	d50a      	bpl.n	800468a <wheel_Control+0x22a>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	ed93 7a02 	vldr	s14, [r3, #8]
 800467a:	edd7 7a03 	vldr	s15, [r7, #12]
 800467e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	edc3 7a00 	vstr	s15, [r3]
 8004688:	e003      	b.n	8004692 <wheel_Control+0x232>
    else
      wheel->cur_l = 0;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
    
    if (wheel->pre_r > right_speed_step)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	edd3 7a03 	vldr	s15, [r3, #12]
 8004698:	ed97 7a02 	vldr	s14, [r7, #8]
 800469c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a4:	d50a      	bpl.n	80046bc <wheel_Control+0x25c>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80046ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80046b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	edc3 7a01 	vstr	s15, [r3, #4]
 80046ba:	e01a      	b.n	80046f2 <wheel_Control+0x292>
    else if (wheel->pre_r < -right_speed_step)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	ed93 7a03 	vldr	s14, [r3, #12]
 80046c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80046c6:	eef1 7a67 	vneg.f32	s15, s15
 80046ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d2:	d50a      	bpl.n	80046ea <wheel_Control+0x28a>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80046da:	edd7 7a02 	vldr	s15, [r7, #8]
 80046de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	edc3 7a01 	vstr	s15, [r3, #4]
 80046e8:	e003      	b.n	80046f2 <wheel_Control+0x292>
    else
      wheel->cur_r = 0;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	605a      	str	r2, [r3, #4]



  }

  if (wheel->cur_l > wheel->max_linear_speed)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	ed93 7a00 	vldr	s14, [r3]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80046fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004706:	dd03      	ble.n	8004710 <wheel_Control+0x2b0>
    wheel->cur_l = wheel->max_linear_speed;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	601a      	str	r2, [r3, #0]
  if (wheel->cur_r > wheel->max_linear_speed)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	ed93 7a01 	vldr	s14, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	edd3 7a05 	vldr	s15, [r3, #20]
 800471c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004724:	dd03      	ble.n	800472e <wheel_Control+0x2ce>
    wheel->cur_r = wheel->max_linear_speed;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	605a      	str	r2, [r3, #4]

  if (wheel->cur_l < -wheel->max_linear_speed)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	ed93 7a00 	vldr	s14, [r3]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	edd3 7a05 	vldr	s15, [r3, #20]
 800473a:	eef1 7a67 	vneg.f32	s15, s15
 800473e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	d507      	bpl.n	8004758 <wheel_Control+0x2f8>
    wheel->cur_l = -wheel->max_linear_speed;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	edd3 7a05 	vldr	s15, [r3, #20]
 800474e:	eef1 7a67 	vneg.f32	s15, s15
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	edc3 7a00 	vstr	s15, [r3]
  if (wheel->cur_r < -wheel->max_linear_speed)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	ed93 7a01 	vldr	s14, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	edd3 7a05 	vldr	s15, [r3, #20]
 8004764:	eef1 7a67 	vneg.f32	s15, s15
 8004768:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800476c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004770:	d507      	bpl.n	8004782 <wheel_Control+0x322>
    wheel->cur_r = -wheel->max_linear_speed;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	edd3 7a05 	vldr	s15, [r3, #20]
 8004778:	eef1 7a67 	vneg.f32	s15, s15
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	edc3 7a01 	vstr	s15, [r3, #4]

  wheel->pre_l = wheel->cur_l;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	609a      	str	r2, [r3, #8]
  wheel->pre_r = wheel->cur_r;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60da      	str	r2, [r3, #12]
  
}
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	2000070c 	.word	0x2000070c
 800479c:	00000bb8 	.word	0x00000bb8
 80047a0:	41200000 	.word	0x41200000

080047a4 <wheelCalculateSpeed>:



void wheelCalculateSpeed(WheelSpeed* wheel)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  float linearSpeed = wheel->max_linear_speed * hJoystick.linear;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80047b2:	4b25      	ldr	r3, [pc, #148]	; (8004848 <wheelCalculateSpeed+0xa4>)
 80047b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80047b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047bc:	edc7 7a03 	vstr	s15, [r7, #12]
  float angularSpeed = wheel->max_angular_speed *  hJoystick.angular;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80047c6:	4b20      	ldr	r3, [pc, #128]	; (8004848 <wheelCalculateSpeed+0xa4>)
 80047c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80047cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d0:	edc7 7a02 	vstr	s15, [r7, #8]

  wheel->cur_l = linearSpeed + angularSpeed;
 80047d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80047d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80047dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	edc3 7a00 	vstr	s15, [r3]
  wheel->cur_r = linearSpeed - angularSpeed;
 80047e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80047ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80047ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	edc3 7a01 	vstr	s15, [r3, #4]

  // direct step to 0 if speed is small enough50
  // direct step to 0 if speed is small enough50
  if(fabs(wheel->cur_l) < 25)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	edd3 7a00 	vldr	s15, [r3]
 80047fe:	eef0 7ae7 	vabs.f32	s15, s15
 8004802:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480e:	d503      	bpl.n	8004818 <wheelCalculateSpeed+0x74>
    wheel->cur_l = 0;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
  if(fabs(  wheel->cur_r) < 25)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	edd3 7a01 	vldr	s15, [r3, #4]
 800481e:	eef0 7ae7 	vabs.f32	s15, s15
 8004822:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800482a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482e:	d400      	bmi.n	8004832 <wheelCalculateSpeed+0x8e>
    wheel->cur_r = 0;
}
 8004830:	e003      	b.n	800483a <wheelCalculateSpeed+0x96>
    wheel->cur_r = 0;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	605a      	str	r2, [r3, #4]
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	2000070c 	.word	0x2000070c

0800484c <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 800484c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004884 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004852:	e003      	b.n	800485c <LoopCopyDataInit>

08004854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800485a:	3104      	adds	r1, #4

0800485c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800485c:	480b      	ldr	r0, [pc, #44]	; (800488c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004864:	d3f6      	bcc.n	8004854 <CopyDataInit>
  ldr  r2, =_sbss
 8004866:	4a0b      	ldr	r2, [pc, #44]	; (8004894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004868:	e002      	b.n	8004870 <LoopFillZerobss>

0800486a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800486a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800486c:	f842 3b04 	str.w	r3, [r2], #4

08004870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004874:	d3f9      	bcc.n	800486a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004876:	f7fe ffc7 	bl	8003808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800487a:	f004 ff0f 	bl	800969c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800487e:	f7fd fc1b 	bl	80020b8 <main>
  bx  lr    
 8004882:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004884:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004888:	0800c3c8 	.word	0x0800c3c8
  ldr  r0, =_sdata
 800488c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004890:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 8004894:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 8004898:	20000724 	.word	0x20000724

0800489c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800489c:	e7fe      	b.n	800489c <ADC_IRQHandler>
	...

080048a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <HAL_Init+0x40>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <HAL_Init+0x40>)
 80048aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_Init+0x40>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <HAL_Init+0x40>)
 80048b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_Init+0x40>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <HAL_Init+0x40>)
 80048c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048c8:	2003      	movs	r0, #3
 80048ca:	f000 ffb1 	bl	8005830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048ce:	2000      	movs	r0, #0
 80048d0:	f000 f808 	bl	80048e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048d4:	f7fe ff12 	bl	80036fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023c00 	.word	0x40023c00

080048e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048ec:	4b12      	ldr	r3, [pc, #72]	; (8004938 <HAL_InitTick+0x54>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b12      	ldr	r3, [pc, #72]	; (800493c <HAL_InitTick+0x58>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	4619      	mov	r1, r3
 80048f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	4618      	mov	r0, r3
 8004904:	f000 ffc9 	bl	800589a <HAL_SYSTICK_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e00e      	b.n	8004930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b0f      	cmp	r3, #15
 8004916:	d80a      	bhi.n	800492e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004918:	2200      	movs	r2, #0
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004920:	f000 ff91 	bl	8005846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004924:	4a06      	ldr	r2, [pc, #24]	; (8004940 <HAL_InitTick+0x5c>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	2000012c 	.word	0x2000012c
 800493c:	20000134 	.word	0x20000134
 8004940:	20000130 	.word	0x20000130

08004944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_IncTick+0x20>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_IncTick+0x24>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4413      	add	r3, r2
 8004954:	4a04      	ldr	r2, [pc, #16]	; (8004968 <HAL_IncTick+0x24>)
 8004956:	6013      	str	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000134 	.word	0x20000134
 8004968:	20000720 	.word	0x20000720

0800496c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return uwTick;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_GetTick+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000720 	.word	0x20000720

08004984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800498c:	f7ff ffee 	bl	800496c <HAL_GetTick>
 8004990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800499c:	d005      	beq.n	80049aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <HAL_Delay+0x44>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049aa:	bf00      	nop
 80049ac:	f7ff ffde 	bl	800496c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d8f7      	bhi.n	80049ac <HAL_Delay+0x28>
  {
  }
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000134 	.word	0x20000134

080049cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e0ed      	b.n	8004bba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd f86c 	bl	8001ac8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0202 	bic.w	r2, r2, #2
 80049fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a00:	f7ff ffb4 	bl	800496c <HAL_GetTick>
 8004a04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a06:	e012      	b.n	8004a2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a08:	f7ff ffb0 	bl	800496c <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b0a      	cmp	r3, #10
 8004a14:	d90b      	bls.n	8004a2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2205      	movs	r2, #5
 8004a26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e0c5      	b.n	8004bba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a4c:	f7ff ff8e 	bl	800496c <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a52:	e012      	b.n	8004a7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a54:	f7ff ff8a 	bl	800496c <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b0a      	cmp	r3, #10
 8004a60:	d90b      	bls.n	8004a7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2205      	movs	r2, #5
 8004a72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e09f      	b.n	8004bba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0e5      	beq.n	8004a54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	7e1b      	ldrb	r3, [r3, #24]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d108      	bne.n	8004aa2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	e007      	b.n	8004ab2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ab0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	7e5b      	ldrb	r3, [r3, #25]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d108      	bne.n	8004acc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	e007      	b.n	8004adc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	7e9b      	ldrb	r3, [r3, #26]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d108      	bne.n	8004af6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0220 	orr.w	r2, r2, #32
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	e007      	b.n	8004b06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0220 	bic.w	r2, r2, #32
 8004b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	7edb      	ldrb	r3, [r3, #27]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d108      	bne.n	8004b20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0210 	bic.w	r2, r2, #16
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e007      	b.n	8004b30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0210 	orr.w	r2, r2, #16
 8004b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7f1b      	ldrb	r3, [r3, #28]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d108      	bne.n	8004b4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0208 	orr.w	r2, r2, #8
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e007      	b.n	8004b5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0208 	bic.w	r2, r2, #8
 8004b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7f5b      	ldrb	r3, [r3, #29]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d108      	bne.n	8004b74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0204 	orr.w	r2, r2, #4
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e007      	b.n	8004b84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0204 	bic.w	r2, r2, #4
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	ea42 0103 	orr.w	r1, r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	1e5a      	subs	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004bdc:	7cfb      	ldrb	r3, [r7, #19]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d003      	beq.n	8004bea <HAL_CAN_ConfigFilter+0x26>
 8004be2:	7cfb      	ldrb	r3, [r7, #19]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	f040 80be 	bne.w	8004d66 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004bea:	4b65      	ldr	r3, [pc, #404]	; (8004d80 <HAL_CAN_ConfigFilter+0x1bc>)
 8004bec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bf4:	f043 0201 	orr.w	r2, r3, #1
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	401a      	ands	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d123      	bne.n	8004c94 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	401a      	ands	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	3248      	adds	r2, #72	; 0x48
 8004c74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c8a:	6979      	ldr	r1, [r7, #20]
 8004c8c:	3348      	adds	r3, #72	; 0x48
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	440b      	add	r3, r1
 8004c92:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d122      	bne.n	8004ce2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004cbc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	3248      	adds	r2, #72	; 0x48
 8004cc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cd6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cd8:	6979      	ldr	r1, [r7, #20]
 8004cda:	3348      	adds	r3, #72	; 0x48
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	440b      	add	r3, r1
 8004ce0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	401a      	ands	r2, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004cfc:	e007      	b.n	8004d0e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	401a      	ands	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004d28:	e007      	b.n	8004d3a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d107      	bne.n	8004d52 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d58:	f023 0201 	bic.w	r2, r3, #1
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e006      	b.n	8004d74 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
  }
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40006400 	.word	0x40006400

08004d84 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d12e      	bne.n	8004df6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004db0:	f7ff fddc 	bl	800496c <HAL_GetTick>
 8004db4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004db6:	e012      	b.n	8004dde <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004db8:	f7ff fdd8 	bl	800496c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b0a      	cmp	r3, #10
 8004dc4:	d90b      	bls.n	8004dde <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2205      	movs	r2, #5
 8004dd6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e012      	b.n	8004e04 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e5      	bne.n	8004db8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e006      	b.n	8004e04 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
  }
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	; 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e20:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e2a:	7ffb      	ldrb	r3, [r7, #31]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d003      	beq.n	8004e38 <HAL_CAN_AddTxMessage+0x2c>
 8004e30:	7ffb      	ldrb	r3, [r7, #31]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	f040 80b8 	bne.w	8004fa8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d105      	bne.n	8004e58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80a0 	beq.w	8004f98 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	0e1b      	lsrs	r3, r3, #24
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d907      	bls.n	8004e78 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e09e      	b.n	8004fb6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e78:	2201      	movs	r2, #1
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10d      	bne.n	8004ea6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e94:	68f9      	ldr	r1, [r7, #12]
 8004e96:	6809      	ldr	r1, [r1, #0]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3318      	adds	r3, #24
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	440b      	add	r3, r1
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e00f      	b.n	8004ec6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004eb0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004eba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	3318      	adds	r3, #24
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	440b      	add	r3, r1
 8004ec4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6819      	ldr	r1, [r3, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	3318      	adds	r3, #24
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	440b      	add	r3, r1
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	7d1b      	ldrb	r3, [r3, #20]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d111      	bne.n	8004f06 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	3318      	adds	r3, #24
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	4413      	add	r3, r2
 8004eee:	3304      	adds	r3, #4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	6811      	ldr	r1, [r2, #0]
 8004ef6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	3318      	adds	r3, #24
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	440b      	add	r3, r1
 8004f02:	3304      	adds	r3, #4
 8004f04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3307      	adds	r3, #7
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	061a      	lsls	r2, r3, #24
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3306      	adds	r3, #6
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3305      	adds	r3, #5
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	4313      	orrs	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	3204      	adds	r2, #4
 8004f26:	7812      	ldrb	r2, [r2, #0]
 8004f28:	4610      	mov	r0, r2
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6811      	ldr	r1, [r2, #0]
 8004f2e:	ea43 0200 	orr.w	r2, r3, r0
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	440b      	add	r3, r1
 8004f38:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004f3c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3303      	adds	r3, #3
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	061a      	lsls	r2, r3, #24
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3302      	adds	r3, #2
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	041b      	lsls	r3, r3, #16
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3301      	adds	r3, #1
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	7812      	ldrb	r2, [r2, #0]
 8004f5e:	4610      	mov	r0, r2
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	6811      	ldr	r1, [r2, #0]
 8004f64:	ea43 0200 	orr.w	r2, r3, r0
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	440b      	add	r3, r1
 8004f6e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004f72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	3318      	adds	r3, #24
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	4413      	add	r3, r2
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	6811      	ldr	r1, [r2, #0]
 8004f86:	f043 0201 	orr.w	r2, r3, #1
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	3318      	adds	r3, #24
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	440b      	add	r3, r1
 8004f92:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	e00e      	b.n	8004fb6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e006      	b.n	8004fb6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
  }
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3724      	adds	r7, #36	; 0x24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b087      	sub	sp, #28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
 8004fce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fd6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d003      	beq.n	8004fe6 <HAL_CAN_GetRxMessage+0x24>
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	f040 80f3 	bne.w	80051cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10e      	bne.n	800500a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d116      	bne.n	8005028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e0e7      	b.n	80051da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d107      	bne.n	8005028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0d8      	b.n	80051da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	331b      	adds	r3, #27
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	4413      	add	r3, r2
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0204 	and.w	r2, r3, #4
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10c      	bne.n	8005060 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	331b      	adds	r3, #27
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	4413      	add	r3, r2
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	0d5b      	lsrs	r3, r3, #21
 8005056:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e00b      	b.n	8005078 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	331b      	adds	r3, #27
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	4413      	add	r3, r2
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	08db      	lsrs	r3, r3, #3
 8005070:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	331b      	adds	r3, #27
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	4413      	add	r3, r2
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0202 	and.w	r2, r3, #2
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	331b      	adds	r3, #27
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	4413      	add	r3, r2
 800509a:	3304      	adds	r3, #4
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 020f 	and.w	r2, r3, #15
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	331b      	adds	r3, #27
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	4413      	add	r3, r2
 80050b2:	3304      	adds	r3, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	331b      	adds	r3, #27
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	4413      	add	r3, r2
 80050ca:	3304      	adds	r3, #4
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	0c1b      	lsrs	r3, r3, #16
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	4413      	add	r3, r2
 80050e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	0a1a      	lsrs	r2, r3, #8
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	4413      	add	r3, r2
 8005110:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	0c1a      	lsrs	r2, r3, #16
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	3302      	adds	r3, #2
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	4413      	add	r3, r2
 800512a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	0e1a      	lsrs	r2, r3, #24
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	3303      	adds	r3, #3
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	4413      	add	r3, r2
 8005144:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	3304      	adds	r3, #4
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	4413      	add	r3, r2
 800515c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	0a1a      	lsrs	r2, r3, #8
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	3305      	adds	r3, #5
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	4413      	add	r3, r2
 8005176:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0c1a      	lsrs	r2, r3, #16
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	3306      	adds	r3, #6
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	4413      	add	r3, r2
 8005190:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	0e1a      	lsrs	r2, r3, #24
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	3307      	adds	r3, #7
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d108      	bne.n	80051b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0220 	orr.w	r2, r2, #32
 80051b4:	60da      	str	r2, [r3, #12]
 80051b6:	e007      	b.n	80051c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0220 	orr.w	r2, r2, #32
 80051c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	e006      	b.n	80051da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
  }
}
 80051da:	4618      	mov	r0, r3
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d002      	beq.n	8005204 <HAL_CAN_ActivateNotification+0x1e>
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	2b02      	cmp	r3, #2
 8005202:	d109      	bne.n	8005218 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6959      	ldr	r1, [r3, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	e006      	b.n	8005226 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
  }
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b08a      	sub	sp, #40	; 0x28
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800523a:	2300      	movs	r3, #0
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d07c      	beq.n	8005372 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d023      	beq.n	80052ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2201      	movs	r2, #1
 8005288:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f983 	bl	80055a0 <HAL_CAN_TxMailbox0CompleteCallback>
 800529a:	e016      	b.n	80052ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d004      	beq.n	80052b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
 80052ae:	e00c      	b.n	80052ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d004      	beq.n	80052c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
 80052c2:	e002      	b.n	80052ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f989 	bl	80055dc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d024      	beq.n	800531e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f963 	bl	80055b4 <HAL_CAN_TxMailbox1CompleteCallback>
 80052ee:	e016      	b.n	800531e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
 8005302:	e00c      	b.n	800531e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
 8005316:	e002      	b.n	800531e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f969 	bl	80055f0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d024      	beq.n	8005372 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005330:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f943 	bl	80055c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8005342:	e016      	b.n	8005372 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d004      	beq.n	8005358 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
 8005356:	e00c      	b.n	8005372 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
 800536a:	e002      	b.n	8005372 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f949 	bl	8005604 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00c      	beq.n	8005396 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800538c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2210      	movs	r2, #16
 8005394:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d006      	beq.n	80053b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2208      	movs	r2, #8
 80053b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f930 	bl	8005618 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fd fca1 	bl	8002d18 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00c      	beq.n	80053fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2210      	movs	r2, #16
 80053f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d006      	beq.n	800541c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2208      	movs	r2, #8
 8005414:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f912 	bl	8005640 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	f003 0310 	and.w	r3, r3, #16
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f8f9 	bl	800562c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	d006      	beq.n	800545c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2210      	movs	r2, #16
 8005454:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f8fc 	bl	8005654 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d006      	beq.n	800547e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2208      	movs	r2, #8
 8005476:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f8f5 	bl	8005668 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d07b      	beq.n	8005580 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d072      	beq.n	8005578 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	f043 0301 	orr.w	r3, r3, #1
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	f043 0302 	orr.w	r3, r3, #2
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	f043 0304 	orr.w	r3, r3, #4
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d043      	beq.n	8005578 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d03e      	beq.n	8005578 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005500:	2b60      	cmp	r3, #96	; 0x60
 8005502:	d02b      	beq.n	800555c <HAL_CAN_IRQHandler+0x32a>
 8005504:	2b60      	cmp	r3, #96	; 0x60
 8005506:	d82e      	bhi.n	8005566 <HAL_CAN_IRQHandler+0x334>
 8005508:	2b50      	cmp	r3, #80	; 0x50
 800550a:	d022      	beq.n	8005552 <HAL_CAN_IRQHandler+0x320>
 800550c:	2b50      	cmp	r3, #80	; 0x50
 800550e:	d82a      	bhi.n	8005566 <HAL_CAN_IRQHandler+0x334>
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d019      	beq.n	8005548 <HAL_CAN_IRQHandler+0x316>
 8005514:	2b40      	cmp	r3, #64	; 0x40
 8005516:	d826      	bhi.n	8005566 <HAL_CAN_IRQHandler+0x334>
 8005518:	2b30      	cmp	r3, #48	; 0x30
 800551a:	d010      	beq.n	800553e <HAL_CAN_IRQHandler+0x30c>
 800551c:	2b30      	cmp	r3, #48	; 0x30
 800551e:	d822      	bhi.n	8005566 <HAL_CAN_IRQHandler+0x334>
 8005520:	2b10      	cmp	r3, #16
 8005522:	d002      	beq.n	800552a <HAL_CAN_IRQHandler+0x2f8>
 8005524:	2b20      	cmp	r3, #32
 8005526:	d005      	beq.n	8005534 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005528:	e01d      	b.n	8005566 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	f043 0308 	orr.w	r3, r3, #8
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005532:	e019      	b.n	8005568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	f043 0310 	orr.w	r3, r3, #16
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800553c:	e014      	b.n	8005568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	f043 0320 	orr.w	r3, r3, #32
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005546:	e00f      	b.n	8005568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005550:	e00a      	b.n	8005568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800555a:	e005      	b.n	8005568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005564:	e000      	b.n	8005568 <HAL_CAN_IRQHandler+0x336>
            break;
 8005566:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005576:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2204      	movs	r2, #4
 800557e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	2b00      	cmp	r3, #0
 8005584:	d008      	beq.n	8005598 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f872 	bl	800567c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005598:	bf00      	nop
 800559a:	3728      	adds	r7, #40	; 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <__NVIC_SetPriorityGrouping+0x44>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056ac:	4013      	ands	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056c2:	4a04      	ldr	r2, [pc, #16]	; (80056d4 <__NVIC_SetPriorityGrouping+0x44>)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	60d3      	str	r3, [r2, #12]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	e000ed00 	.word	0xe000ed00

080056d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056dc:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <__NVIC_GetPriorityGrouping+0x18>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	f003 0307 	and.w	r3, r3, #7
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	e000ed00 	.word	0xe000ed00

080056f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005702:	2b00      	cmp	r3, #0
 8005704:	db0b      	blt.n	800571e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	f003 021f 	and.w	r2, r3, #31
 800570c:	4907      	ldr	r1, [pc, #28]	; (800572c <__NVIC_EnableIRQ+0x38>)
 800570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	2001      	movs	r0, #1
 8005716:	fa00 f202 	lsl.w	r2, r0, r2
 800571a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	e000e100 	.word	0xe000e100

08005730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	6039      	str	r1, [r7, #0]
 800573a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800573c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005740:	2b00      	cmp	r3, #0
 8005742:	db0a      	blt.n	800575a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	490c      	ldr	r1, [pc, #48]	; (800577c <__NVIC_SetPriority+0x4c>)
 800574a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574e:	0112      	lsls	r2, r2, #4
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	440b      	add	r3, r1
 8005754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005758:	e00a      	b.n	8005770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	4908      	ldr	r1, [pc, #32]	; (8005780 <__NVIC_SetPriority+0x50>)
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	3b04      	subs	r3, #4
 8005768:	0112      	lsls	r2, r2, #4
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	440b      	add	r3, r1
 800576e:	761a      	strb	r2, [r3, #24]
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	e000e100 	.word	0xe000e100
 8005780:	e000ed00 	.word	0xe000ed00

08005784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005784:	b480      	push	{r7}
 8005786:	b089      	sub	sp, #36	; 0x24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f1c3 0307 	rsb	r3, r3, #7
 800579e:	2b04      	cmp	r3, #4
 80057a0:	bf28      	it	cs
 80057a2:	2304      	movcs	r3, #4
 80057a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	3304      	adds	r3, #4
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d902      	bls.n	80057b4 <NVIC_EncodePriority+0x30>
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	3b03      	subs	r3, #3
 80057b2:	e000      	b.n	80057b6 <NVIC_EncodePriority+0x32>
 80057b4:	2300      	movs	r3, #0
 80057b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43da      	mvns	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	401a      	ands	r2, r3
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	fa01 f303 	lsl.w	r3, r1, r3
 80057d6:	43d9      	mvns	r1, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057dc:	4313      	orrs	r3, r2
         );
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3724      	adds	r7, #36	; 0x24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057fc:	d301      	bcc.n	8005802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057fe:	2301      	movs	r3, #1
 8005800:	e00f      	b.n	8005822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005802:	4a0a      	ldr	r2, [pc, #40]	; (800582c <SysTick_Config+0x40>)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3b01      	subs	r3, #1
 8005808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800580a:	210f      	movs	r1, #15
 800580c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005810:	f7ff ff8e 	bl	8005730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <SysTick_Config+0x40>)
 8005816:	2200      	movs	r2, #0
 8005818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800581a:	4b04      	ldr	r3, [pc, #16]	; (800582c <SysTick_Config+0x40>)
 800581c:	2207      	movs	r2, #7
 800581e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	e000e010 	.word	0xe000e010

08005830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff ff29 	bl	8005690 <__NVIC_SetPriorityGrouping>
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005846:	b580      	push	{r7, lr}
 8005848:	b086      	sub	sp, #24
 800584a:	af00      	add	r7, sp, #0
 800584c:	4603      	mov	r3, r0
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
 8005852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005858:	f7ff ff3e 	bl	80056d8 <__NVIC_GetPriorityGrouping>
 800585c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	6978      	ldr	r0, [r7, #20]
 8005864:	f7ff ff8e 	bl	8005784 <NVIC_EncodePriority>
 8005868:	4602      	mov	r2, r0
 800586a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800586e:	4611      	mov	r1, r2
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff5d 	bl	8005730 <__NVIC_SetPriority>
}
 8005876:	bf00      	nop
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	4603      	mov	r3, r0
 8005886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff ff31 	bl	80056f4 <__NVIC_EnableIRQ>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff ffa2 	bl	80057ec <SysTick_Config>
 80058a8:	4603      	mov	r3, r0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d106      	bne.n	80058d0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a08      	ldr	r2, [pc, #32]	; (80058e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80058ce:	e005      	b.n	80058dc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a04      	ldr	r2, [pc, #16]	; (80058e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80058d6:	f023 0304 	bic.w	r3, r3, #4
 80058da:	6013      	str	r3, [r2, #0]
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	e000e010 	.word	0xe000e010

080058ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058f8:	f7ff f838 	bl	800496c <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e099      	b.n	8005a3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0201 	bic.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005928:	e00f      	b.n	800594a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800592a:	f7ff f81f 	bl	800496c <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b05      	cmp	r3, #5
 8005936:	d908      	bls.n	800594a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2203      	movs	r2, #3
 8005942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e078      	b.n	8005a3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e8      	bne.n	800592a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4b38      	ldr	r3, [pc, #224]	; (8005a44 <HAL_DMA_Init+0x158>)
 8005964:	4013      	ands	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005976:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800598e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d107      	bne.n	80059b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	4313      	orrs	r3, r2
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f023 0307 	bic.w	r3, r3, #7
 80059ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d117      	bne.n	8005a0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00e      	beq.n	8005a0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fa91 	bl	8005f18 <DMA_CheckFifoParam>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2240      	movs	r2, #64	; 0x40
 8005a00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e016      	b.n	8005a3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa48 	bl	8005eac <DMA_CalcBaseAndBitshift>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a24:	223f      	movs	r2, #63	; 0x3f
 8005a26:	409a      	lsls	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	f010803f 	.word	0xf010803f

08005a48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_DMA_Start_IT+0x26>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e040      	b.n	8005af0 <HAL_DMA_Start_IT+0xa8>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d12f      	bne.n	8005ae2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f9da 	bl	8005e50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa0:	223f      	movs	r2, #63	; 0x3f
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0216 	orr.w	r2, r2, #22
 8005ab6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0208 	orr.w	r2, r2, #8
 8005ace:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	e005      	b.n	8005aee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005aea:	2302      	movs	r3, #2
 8005aec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d004      	beq.n	8005b16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2280      	movs	r2, #128	; 0x80
 8005b10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e00c      	b.n	8005b30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2205      	movs	r2, #5
 8005b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b48:	4b92      	ldr	r3, [pc, #584]	; (8005d94 <HAL_DMA_IRQHandler+0x258>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a92      	ldr	r2, [pc, #584]	; (8005d98 <HAL_DMA_IRQHandler+0x25c>)
 8005b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b52:	0a9b      	lsrs	r3, r3, #10
 8005b54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	2208      	movs	r2, #8
 8005b68:	409a      	lsls	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d01a      	beq.n	8005ba8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d013      	beq.n	8005ba8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0204 	bic.w	r2, r2, #4
 8005b8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b94:	2208      	movs	r2, #8
 8005b96:	409a      	lsls	r2, r3
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba0:	f043 0201 	orr.w	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bac:	2201      	movs	r2, #1
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d012      	beq.n	8005bde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bca:	2201      	movs	r2, #1
 8005bcc:	409a      	lsls	r2, r3
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd6:	f043 0202 	orr.w	r2, r3, #2
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be2:	2204      	movs	r2, #4
 8005be4:	409a      	lsls	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d012      	beq.n	8005c14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00b      	beq.n	8005c14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c00:	2204      	movs	r2, #4
 8005c02:	409a      	lsls	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0c:	f043 0204 	orr.w	r2, r3, #4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c18:	2210      	movs	r2, #16
 8005c1a:	409a      	lsls	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d043      	beq.n	8005cac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d03c      	beq.n	8005cac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c36:	2210      	movs	r2, #16
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d018      	beq.n	8005c7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d108      	bne.n	8005c6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d024      	beq.n	8005cac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	4798      	blx	r3
 8005c6a:	e01f      	b.n	8005cac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01b      	beq.n	8005cac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	4798      	blx	r3
 8005c7c:	e016      	b.n	8005cac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d107      	bne.n	8005c9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0208 	bic.w	r2, r2, #8
 8005c9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	409a      	lsls	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 808e 	beq.w	8005dda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 8086 	beq.w	8005dda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	409a      	lsls	r2, r3
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b05      	cmp	r3, #5
 8005ce4:	d136      	bne.n	8005d54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0216 	bic.w	r2, r2, #22
 8005cf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695a      	ldr	r2, [r3, #20]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <HAL_DMA_IRQHandler+0x1da>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0208 	bic.w	r2, r2, #8
 8005d24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2a:	223f      	movs	r2, #63	; 0x3f
 8005d2c:	409a      	lsls	r2, r3
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d07d      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
        }
        return;
 8005d52:	e078      	b.n	8005e46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01c      	beq.n	8005d9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d108      	bne.n	8005d82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d030      	beq.n	8005dda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	4798      	blx	r3
 8005d80:	e02b      	b.n	8005dda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d027      	beq.n	8005dda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
 8005d92:	e022      	b.n	8005dda <HAL_DMA_IRQHandler+0x29e>
 8005d94:	2000012c 	.word	0x2000012c
 8005d98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10f      	bne.n	8005dca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0210 	bic.w	r2, r2, #16
 8005db8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d032      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d022      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2205      	movs	r2, #5
 8005df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0201 	bic.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	60bb      	str	r3, [r7, #8]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d307      	bcc.n	8005e22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f2      	bne.n	8005e06 <HAL_DMA_IRQHandler+0x2ca>
 8005e20:	e000      	b.n	8005e24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005e22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	4798      	blx	r3
 8005e44:	e000      	b.n	8005e48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005e46:	bf00      	nop
    }
  }
}
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop

08005e50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d108      	bne.n	8005e90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e8e:	e007      	b.n	8005ea0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	60da      	str	r2, [r3, #12]
}
 8005ea0:	bf00      	nop
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	3b10      	subs	r3, #16
 8005ebc:	4a14      	ldr	r2, [pc, #80]	; (8005f10 <DMA_CalcBaseAndBitshift+0x64>)
 8005ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ec6:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <DMA_CalcBaseAndBitshift+0x68>)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d909      	bls.n	8005eee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ee2:	f023 0303 	bic.w	r3, r3, #3
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	659a      	str	r2, [r3, #88]	; 0x58
 8005eec:	e007      	b.n	8005efe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	aaaaaaab 	.word	0xaaaaaaab
 8005f14:	0800c120 	.word	0x0800c120

08005f18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d11f      	bne.n	8005f72 <DMA_CheckFifoParam+0x5a>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d856      	bhi.n	8005fe6 <DMA_CheckFifoParam+0xce>
 8005f38:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <DMA_CheckFifoParam+0x28>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005f51 	.word	0x08005f51
 8005f44:	08005f63 	.word	0x08005f63
 8005f48:	08005f51 	.word	0x08005f51
 8005f4c:	08005fe7 	.word	0x08005fe7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d046      	beq.n	8005fea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f60:	e043      	b.n	8005fea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f6a:	d140      	bne.n	8005fee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f70:	e03d      	b.n	8005fee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7a:	d121      	bne.n	8005fc0 <DMA_CheckFifoParam+0xa8>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d837      	bhi.n	8005ff2 <DMA_CheckFifoParam+0xda>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <DMA_CheckFifoParam+0x70>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005f9f 	.word	0x08005f9f
 8005f90:	08005f99 	.word	0x08005f99
 8005f94:	08005fb1 	.word	0x08005fb1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9c:	e030      	b.n	8006000 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d025      	beq.n	8005ff6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fae:	e022      	b.n	8005ff6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fb8:	d11f      	bne.n	8005ffa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fbe:	e01c      	b.n	8005ffa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d903      	bls.n	8005fce <DMA_CheckFifoParam+0xb6>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d003      	beq.n	8005fd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005fcc:	e018      	b.n	8006000 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd2:	e015      	b.n	8006000 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00e      	beq.n	8005ffe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe4:	e00b      	b.n	8005ffe <DMA_CheckFifoParam+0xe6>
      break;
 8005fe6:	bf00      	nop
 8005fe8:	e00a      	b.n	8006000 <DMA_CheckFifoParam+0xe8>
      break;
 8005fea:	bf00      	nop
 8005fec:	e008      	b.n	8006000 <DMA_CheckFifoParam+0xe8>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e006      	b.n	8006000 <DMA_CheckFifoParam+0xe8>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e004      	b.n	8006000 <DMA_CheckFifoParam+0xe8>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e002      	b.n	8006000 <DMA_CheckFifoParam+0xe8>
      break;   
 8005ffa:	bf00      	nop
 8005ffc:	e000      	b.n	8006000 <DMA_CheckFifoParam+0xe8>
      break;
 8005ffe:	bf00      	nop
    }
  } 
  
  return status; 
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop

08006010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006010:	b480      	push	{r7}
 8006012:	b089      	sub	sp, #36	; 0x24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006022:	2300      	movs	r3, #0
 8006024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006026:	2300      	movs	r3, #0
 8006028:	61fb      	str	r3, [r7, #28]
 800602a:	e177      	b.n	800631c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800602c:	2201      	movs	r2, #1
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4013      	ands	r3, r2
 800603e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	429a      	cmp	r2, r3
 8006046:	f040 8166 	bne.w	8006316 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d00b      	beq.n	800606a <HAL_GPIO_Init+0x5a>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d007      	beq.n	800606a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800605e:	2b11      	cmp	r3, #17
 8006060:	d003      	beq.n	800606a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b12      	cmp	r3, #18
 8006068:	d130      	bne.n	80060cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	2203      	movs	r2, #3
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	43db      	mvns	r3, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	4013      	ands	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	4313      	orrs	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060a0:	2201      	movs	r2, #1
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4013      	ands	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	f003 0201 	and.w	r2, r3, #1
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	2203      	movs	r2, #3
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	43db      	mvns	r3, r3
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	4013      	ands	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d003      	beq.n	800610c <HAL_GPIO_Init+0xfc>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b12      	cmp	r3, #18
 800610a:	d123      	bne.n	8006154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	08da      	lsrs	r2, r3, #3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3208      	adds	r2, #8
 8006114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	220f      	movs	r2, #15
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	43db      	mvns	r3, r3
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4013      	ands	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4313      	orrs	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	08da      	lsrs	r2, r3, #3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3208      	adds	r2, #8
 800614e:	69b9      	ldr	r1, [r7, #24]
 8006150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	2203      	movs	r2, #3
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	43db      	mvns	r3, r3
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4013      	ands	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f003 0203 	and.w	r2, r3, #3
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	4313      	orrs	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 80c0 	beq.w	8006316 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	4b66      	ldr	r3, [pc, #408]	; (8006334 <HAL_GPIO_Init+0x324>)
 800619c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619e:	4a65      	ldr	r2, [pc, #404]	; (8006334 <HAL_GPIO_Init+0x324>)
 80061a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061a4:	6453      	str	r3, [r2, #68]	; 0x44
 80061a6:	4b63      	ldr	r3, [pc, #396]	; (8006334 <HAL_GPIO_Init+0x324>)
 80061a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061b2:	4a61      	ldr	r2, [pc, #388]	; (8006338 <HAL_GPIO_Init+0x328>)
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	089b      	lsrs	r3, r3, #2
 80061b8:	3302      	adds	r3, #2
 80061ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	220f      	movs	r2, #15
 80061ca:	fa02 f303 	lsl.w	r3, r2, r3
 80061ce:	43db      	mvns	r3, r3
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	4013      	ands	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a58      	ldr	r2, [pc, #352]	; (800633c <HAL_GPIO_Init+0x32c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d037      	beq.n	800624e <HAL_GPIO_Init+0x23e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a57      	ldr	r2, [pc, #348]	; (8006340 <HAL_GPIO_Init+0x330>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d031      	beq.n	800624a <HAL_GPIO_Init+0x23a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a56      	ldr	r2, [pc, #344]	; (8006344 <HAL_GPIO_Init+0x334>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d02b      	beq.n	8006246 <HAL_GPIO_Init+0x236>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a55      	ldr	r2, [pc, #340]	; (8006348 <HAL_GPIO_Init+0x338>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d025      	beq.n	8006242 <HAL_GPIO_Init+0x232>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a54      	ldr	r2, [pc, #336]	; (800634c <HAL_GPIO_Init+0x33c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01f      	beq.n	800623e <HAL_GPIO_Init+0x22e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a53      	ldr	r2, [pc, #332]	; (8006350 <HAL_GPIO_Init+0x340>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d019      	beq.n	800623a <HAL_GPIO_Init+0x22a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a52      	ldr	r2, [pc, #328]	; (8006354 <HAL_GPIO_Init+0x344>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d013      	beq.n	8006236 <HAL_GPIO_Init+0x226>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a51      	ldr	r2, [pc, #324]	; (8006358 <HAL_GPIO_Init+0x348>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00d      	beq.n	8006232 <HAL_GPIO_Init+0x222>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a50      	ldr	r2, [pc, #320]	; (800635c <HAL_GPIO_Init+0x34c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d007      	beq.n	800622e <HAL_GPIO_Init+0x21e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a4f      	ldr	r2, [pc, #316]	; (8006360 <HAL_GPIO_Init+0x350>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d101      	bne.n	800622a <HAL_GPIO_Init+0x21a>
 8006226:	2309      	movs	r3, #9
 8006228:	e012      	b.n	8006250 <HAL_GPIO_Init+0x240>
 800622a:	230a      	movs	r3, #10
 800622c:	e010      	b.n	8006250 <HAL_GPIO_Init+0x240>
 800622e:	2308      	movs	r3, #8
 8006230:	e00e      	b.n	8006250 <HAL_GPIO_Init+0x240>
 8006232:	2307      	movs	r3, #7
 8006234:	e00c      	b.n	8006250 <HAL_GPIO_Init+0x240>
 8006236:	2306      	movs	r3, #6
 8006238:	e00a      	b.n	8006250 <HAL_GPIO_Init+0x240>
 800623a:	2305      	movs	r3, #5
 800623c:	e008      	b.n	8006250 <HAL_GPIO_Init+0x240>
 800623e:	2304      	movs	r3, #4
 8006240:	e006      	b.n	8006250 <HAL_GPIO_Init+0x240>
 8006242:	2303      	movs	r3, #3
 8006244:	e004      	b.n	8006250 <HAL_GPIO_Init+0x240>
 8006246:	2302      	movs	r3, #2
 8006248:	e002      	b.n	8006250 <HAL_GPIO_Init+0x240>
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <HAL_GPIO_Init+0x240>
 800624e:	2300      	movs	r3, #0
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	f002 0203 	and.w	r2, r2, #3
 8006256:	0092      	lsls	r2, r2, #2
 8006258:	4093      	lsls	r3, r2
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	4313      	orrs	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006260:	4935      	ldr	r1, [pc, #212]	; (8006338 <HAL_GPIO_Init+0x328>)
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	089b      	lsrs	r3, r3, #2
 8006266:	3302      	adds	r3, #2
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800626e:	4b3d      	ldr	r3, [pc, #244]	; (8006364 <HAL_GPIO_Init+0x354>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	43db      	mvns	r3, r3
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	4013      	ands	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006292:	4a34      	ldr	r2, [pc, #208]	; (8006364 <HAL_GPIO_Init+0x354>)
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006298:	4b32      	ldr	r3, [pc, #200]	; (8006364 <HAL_GPIO_Init+0x354>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	43db      	mvns	r3, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4013      	ands	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062bc:	4a29      	ldr	r2, [pc, #164]	; (8006364 <HAL_GPIO_Init+0x354>)
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062c2:	4b28      	ldr	r3, [pc, #160]	; (8006364 <HAL_GPIO_Init+0x354>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	43db      	mvns	r3, r3
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	4013      	ands	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062e6:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <HAL_GPIO_Init+0x354>)
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062ec:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <HAL_GPIO_Init+0x354>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	43db      	mvns	r3, r3
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	4013      	ands	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006310:	4a14      	ldr	r2, [pc, #80]	; (8006364 <HAL_GPIO_Init+0x354>)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	3301      	adds	r3, #1
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2b0f      	cmp	r3, #15
 8006320:	f67f ae84 	bls.w	800602c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	3724      	adds	r7, #36	; 0x24
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40023800 	.word	0x40023800
 8006338:	40013800 	.word	0x40013800
 800633c:	40020000 	.word	0x40020000
 8006340:	40020400 	.word	0x40020400
 8006344:	40020800 	.word	0x40020800
 8006348:	40020c00 	.word	0x40020c00
 800634c:	40021000 	.word	0x40021000
 8006350:	40021400 	.word	0x40021400
 8006354:	40021800 	.word	0x40021800
 8006358:	40021c00 	.word	0x40021c00
 800635c:	40022000 	.word	0x40022000
 8006360:	40022400 	.word	0x40022400
 8006364:	40013c00 	.word	0x40013c00

08006368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	887b      	ldrh	r3, [r7, #2]
 800637a:	4013      	ands	r3, r2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006380:	2301      	movs	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	e001      	b.n	800638a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	807b      	strh	r3, [r7, #2]
 80063a4:	4613      	mov	r3, r2
 80063a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063a8:	787b      	ldrb	r3, [r7, #1]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063ae:	887a      	ldrh	r2, [r7, #2]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063b4:	e003      	b.n	80063be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063b6:	887b      	ldrh	r3, [r7, #2]
 80063b8:	041a      	lsls	r2, r3, #16
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	619a      	str	r2, [r3, #24]
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80063d6:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	4013      	ands	r3, r2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d006      	beq.n	80063f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063e2:	4a05      	ldr	r2, [pc, #20]	; (80063f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fc fbd4 	bl	8002b98 <HAL_GPIO_EXTI_Callback>
  }
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40013c00 	.word	0x40013c00

080063fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e12b      	b.n	8006666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fb fdfe 	bl	8002024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2224      	movs	r2, #36	; 0x24
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0201 	bic.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800644e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800645e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006460:	f000 fe1e 	bl	80070a0 <HAL_RCC_GetPCLK1Freq>
 8006464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	4a81      	ldr	r2, [pc, #516]	; (8006670 <HAL_I2C_Init+0x274>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d807      	bhi.n	8006480 <HAL_I2C_Init+0x84>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4a80      	ldr	r2, [pc, #512]	; (8006674 <HAL_I2C_Init+0x278>)
 8006474:	4293      	cmp	r3, r2
 8006476:	bf94      	ite	ls
 8006478:	2301      	movls	r3, #1
 800647a:	2300      	movhi	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	e006      	b.n	800648e <HAL_I2C_Init+0x92>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4a7d      	ldr	r2, [pc, #500]	; (8006678 <HAL_I2C_Init+0x27c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	bf94      	ite	ls
 8006488:	2301      	movls	r3, #1
 800648a:	2300      	movhi	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e0e7      	b.n	8006666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4a78      	ldr	r2, [pc, #480]	; (800667c <HAL_I2C_Init+0x280>)
 800649a:	fba2 2303 	umull	r2, r3, r2, r3
 800649e:	0c9b      	lsrs	r3, r3, #18
 80064a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	4a6a      	ldr	r2, [pc, #424]	; (8006670 <HAL_I2C_Init+0x274>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d802      	bhi.n	80064d0 <HAL_I2C_Init+0xd4>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	3301      	adds	r3, #1
 80064ce:	e009      	b.n	80064e4 <HAL_I2C_Init+0xe8>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80064d6:	fb02 f303 	mul.w	r3, r2, r3
 80064da:	4a69      	ldr	r2, [pc, #420]	; (8006680 <HAL_I2C_Init+0x284>)
 80064dc:	fba2 2303 	umull	r2, r3, r2, r3
 80064e0:	099b      	lsrs	r3, r3, #6
 80064e2:	3301      	adds	r3, #1
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6812      	ldr	r2, [r2, #0]
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80064f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	495c      	ldr	r1, [pc, #368]	; (8006670 <HAL_I2C_Init+0x274>)
 8006500:	428b      	cmp	r3, r1
 8006502:	d819      	bhi.n	8006538 <HAL_I2C_Init+0x13c>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	1e59      	subs	r1, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006512:	1c59      	adds	r1, r3, #1
 8006514:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006518:	400b      	ands	r3, r1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <HAL_I2C_Init+0x138>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1e59      	subs	r1, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	fbb1 f3f3 	udiv	r3, r1, r3
 800652c:	3301      	adds	r3, #1
 800652e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006532:	e051      	b.n	80065d8 <HAL_I2C_Init+0x1dc>
 8006534:	2304      	movs	r3, #4
 8006536:	e04f      	b.n	80065d8 <HAL_I2C_Init+0x1dc>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d111      	bne.n	8006564 <HAL_I2C_Init+0x168>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	1e58      	subs	r0, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6859      	ldr	r1, [r3, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	440b      	add	r3, r1
 800654e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006552:	3301      	adds	r3, #1
 8006554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006558:	2b00      	cmp	r3, #0
 800655a:	bf0c      	ite	eq
 800655c:	2301      	moveq	r3, #1
 800655e:	2300      	movne	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	e012      	b.n	800658a <HAL_I2C_Init+0x18e>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	1e58      	subs	r0, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6859      	ldr	r1, [r3, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	0099      	lsls	r1, r3, #2
 8006574:	440b      	add	r3, r1
 8006576:	fbb0 f3f3 	udiv	r3, r0, r3
 800657a:	3301      	adds	r3, #1
 800657c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006580:	2b00      	cmp	r3, #0
 8006582:	bf0c      	ite	eq
 8006584:	2301      	moveq	r3, #1
 8006586:	2300      	movne	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_I2C_Init+0x196>
 800658e:	2301      	movs	r3, #1
 8006590:	e022      	b.n	80065d8 <HAL_I2C_Init+0x1dc>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10e      	bne.n	80065b8 <HAL_I2C_Init+0x1bc>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1e58      	subs	r0, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6859      	ldr	r1, [r3, #4]
 80065a2:	460b      	mov	r3, r1
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	440b      	add	r3, r1
 80065a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80065ac:	3301      	adds	r3, #1
 80065ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b6:	e00f      	b.n	80065d8 <HAL_I2C_Init+0x1dc>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	1e58      	subs	r0, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6859      	ldr	r1, [r3, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	0099      	lsls	r1, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80065ce:	3301      	adds	r3, #1
 80065d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	6809      	ldr	r1, [r1, #0]
 80065dc:	4313      	orrs	r3, r2
 80065de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69da      	ldr	r2, [r3, #28]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6911      	ldr	r1, [r2, #16]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68d2      	ldr	r2, [r2, #12]
 8006612:	4311      	orrs	r1, r2
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6812      	ldr	r2, [r2, #0]
 8006618:	430b      	orrs	r3, r1
 800661a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0201 	orr.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	000186a0 	.word	0x000186a0
 8006674:	001e847f 	.word	0x001e847f
 8006678:	003d08ff 	.word	0x003d08ff
 800667c:	431bde83 	.word	0x431bde83
 8006680:	10624dd3 	.word	0x10624dd3

08006684 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b20      	cmp	r3, #32
 8006698:	d129      	bne.n	80066ee <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2224      	movs	r2, #36	; 0x24
 800669e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0201 	bic.w	r2, r2, #1
 80066b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0210 	bic.w	r2, r2, #16
 80066c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0201 	orr.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	e000      	b.n	80066f0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80066ee:	2302      	movs	r3, #2
  }
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b20      	cmp	r3, #32
 8006714:	d12a      	bne.n	800676c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2224      	movs	r2, #36	; 0x24
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0201 	bic.w	r2, r2, #1
 800672c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006736:	89fb      	ldrh	r3, [r7, #14]
 8006738:	f023 030f 	bic.w	r3, r3, #15
 800673c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	b29a      	uxth	r2, r3
 8006742:	89fb      	ldrh	r3, [r7, #14]
 8006744:	4313      	orrs	r3, r2
 8006746:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	89fa      	ldrh	r2, [r7, #14]
 800674e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	e000      	b.n	800676e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800676c:	2302      	movs	r3, #2
  }
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006786:	2300      	movs	r3, #0
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	4b20      	ldr	r3, [pc, #128]	; (800680c <HAL_PWREx_EnableOverDrive+0x90>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	4a1f      	ldr	r2, [pc, #124]	; (800680c <HAL_PWREx_EnableOverDrive+0x90>)
 8006790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006794:	6413      	str	r3, [r2, #64]	; 0x40
 8006796:	4b1d      	ldr	r3, [pc, #116]	; (800680c <HAL_PWREx_EnableOverDrive+0x90>)
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80067a2:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <HAL_PWREx_EnableOverDrive+0x94>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067a8:	f7fe f8e0 	bl	800496c <HAL_GetTick>
 80067ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067ae:	e009      	b.n	80067c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067b0:	f7fe f8dc 	bl	800496c <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067be:	d901      	bls.n	80067c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e01f      	b.n	8006804 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067c4:	4b13      	ldr	r3, [pc, #76]	; (8006814 <HAL_PWREx_EnableOverDrive+0x98>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d0:	d1ee      	bne.n	80067b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067d2:	4b11      	ldr	r3, [pc, #68]	; (8006818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067d8:	f7fe f8c8 	bl	800496c <HAL_GetTick>
 80067dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067de:	e009      	b.n	80067f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067e0:	f7fe f8c4 	bl	800496c <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ee:	d901      	bls.n	80067f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e007      	b.n	8006804 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067f4:	4b07      	ldr	r3, [pc, #28]	; (8006814 <HAL_PWREx_EnableOverDrive+0x98>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006800:	d1ee      	bne.n	80067e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40023800 	.word	0x40023800
 8006810:	420e0040 	.word	0x420e0040
 8006814:	40007000 	.word	0x40007000
 8006818:	420e0044 	.word	0x420e0044

0800681c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e25b      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d075      	beq.n	8006926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800683a:	4ba3      	ldr	r3, [pc, #652]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 030c 	and.w	r3, r3, #12
 8006842:	2b04      	cmp	r3, #4
 8006844:	d00c      	beq.n	8006860 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006846:	4ba0      	ldr	r3, [pc, #640]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800684e:	2b08      	cmp	r3, #8
 8006850:	d112      	bne.n	8006878 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006852:	4b9d      	ldr	r3, [pc, #628]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800685e:	d10b      	bne.n	8006878 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006860:	4b99      	ldr	r3, [pc, #612]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d05b      	beq.n	8006924 <HAL_RCC_OscConfig+0x108>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d157      	bne.n	8006924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e236      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006880:	d106      	bne.n	8006890 <HAL_RCC_OscConfig+0x74>
 8006882:	4b91      	ldr	r3, [pc, #580]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a90      	ldr	r2, [pc, #576]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e01d      	b.n	80068cc <HAL_RCC_OscConfig+0xb0>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006898:	d10c      	bne.n	80068b4 <HAL_RCC_OscConfig+0x98>
 800689a:	4b8b      	ldr	r3, [pc, #556]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a8a      	ldr	r2, [pc, #552]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	4b88      	ldr	r3, [pc, #544]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a87      	ldr	r2, [pc, #540]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	e00b      	b.n	80068cc <HAL_RCC_OscConfig+0xb0>
 80068b4:	4b84      	ldr	r3, [pc, #528]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a83      	ldr	r2, [pc, #524]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	4b81      	ldr	r3, [pc, #516]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a80      	ldr	r2, [pc, #512]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d013      	beq.n	80068fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d4:	f7fe f84a 	bl	800496c <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068dc:	f7fe f846 	bl	800496c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b64      	cmp	r3, #100	; 0x64
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e1fb      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ee:	4b76      	ldr	r3, [pc, #472]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0f0      	beq.n	80068dc <HAL_RCC_OscConfig+0xc0>
 80068fa:	e014      	b.n	8006926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fc:	f7fe f836 	bl	800496c <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006904:	f7fe f832 	bl	800496c <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b64      	cmp	r3, #100	; 0x64
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e1e7      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006916:	4b6c      	ldr	r3, [pc, #432]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f0      	bne.n	8006904 <HAL_RCC_OscConfig+0xe8>
 8006922:	e000      	b.n	8006926 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d063      	beq.n	80069fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006932:	4b65      	ldr	r3, [pc, #404]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800693e:	4b62      	ldr	r3, [pc, #392]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006946:	2b08      	cmp	r3, #8
 8006948:	d11c      	bne.n	8006984 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800694a:	4b5f      	ldr	r3, [pc, #380]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d116      	bne.n	8006984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006956:	4b5c      	ldr	r3, [pc, #368]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <HAL_RCC_OscConfig+0x152>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d001      	beq.n	800696e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e1bb      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696e:	4b56      	ldr	r3, [pc, #344]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4952      	ldr	r1, [pc, #328]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 800697e:	4313      	orrs	r3, r2
 8006980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006982:	e03a      	b.n	80069fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d020      	beq.n	80069ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800698c:	4b4f      	ldr	r3, [pc, #316]	; (8006acc <HAL_RCC_OscConfig+0x2b0>)
 800698e:	2201      	movs	r2, #1
 8006990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006992:	f7fd ffeb 	bl	800496c <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800699a:	f7fd ffe7 	bl	800496c <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e19c      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ac:	4b46      	ldr	r3, [pc, #280]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0f0      	beq.n	800699a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b8:	4b43      	ldr	r3, [pc, #268]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	4940      	ldr	r1, [pc, #256]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	600b      	str	r3, [r1, #0]
 80069cc:	e015      	b.n	80069fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ce:	4b3f      	ldr	r3, [pc, #252]	; (8006acc <HAL_RCC_OscConfig+0x2b0>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fd ffca 	bl	800496c <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069dc:	f7fd ffc6 	bl	800496c <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e17b      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ee:	4b36      	ldr	r3, [pc, #216]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d030      	beq.n	8006a68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d016      	beq.n	8006a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a0e:	4b30      	ldr	r3, [pc, #192]	; (8006ad0 <HAL_RCC_OscConfig+0x2b4>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a14:	f7fd ffaa 	bl	800496c <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a1c:	f7fd ffa6 	bl	800496c <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e15b      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a2e:	4b26      	ldr	r3, [pc, #152]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0f0      	beq.n	8006a1c <HAL_RCC_OscConfig+0x200>
 8006a3a:	e015      	b.n	8006a68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a3c:	4b24      	ldr	r3, [pc, #144]	; (8006ad0 <HAL_RCC_OscConfig+0x2b4>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a42:	f7fd ff93 	bl	800496c <HAL_GetTick>
 8006a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a48:	e008      	b.n	8006a5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a4a:	f7fd ff8f 	bl	800496c <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e144      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a5c:	4b1a      	ldr	r3, [pc, #104]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1f0      	bne.n	8006a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80a0 	beq.w	8006bb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a76:	2300      	movs	r3, #0
 8006a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a7a:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10f      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a86:	2300      	movs	r3, #0
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	4a0e      	ldr	r2, [pc, #56]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a94:	6413      	str	r3, [r2, #64]	; 0x40
 8006a96:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_RCC_OscConfig+0x2b8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d121      	bne.n	8006af6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <HAL_RCC_OscConfig+0x2b8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <HAL_RCC_OscConfig+0x2b8>)
 8006ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006abe:	f7fd ff55 	bl	800496c <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac4:	e011      	b.n	8006aea <HAL_RCC_OscConfig+0x2ce>
 8006ac6:	bf00      	nop
 8006ac8:	40023800 	.word	0x40023800
 8006acc:	42470000 	.word	0x42470000
 8006ad0:	42470e80 	.word	0x42470e80
 8006ad4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ad8:	f7fd ff48 	bl	800496c <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e0fd      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aea:	4b81      	ldr	r3, [pc, #516]	; (8006cf0 <HAL_RCC_OscConfig+0x4d4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f0      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d106      	bne.n	8006b0c <HAL_RCC_OscConfig+0x2f0>
 8006afe:	4b7d      	ldr	r3, [pc, #500]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	4a7c      	ldr	r2, [pc, #496]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0a:	e01c      	b.n	8006b46 <HAL_RCC_OscConfig+0x32a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2b05      	cmp	r3, #5
 8006b12:	d10c      	bne.n	8006b2e <HAL_RCC_OscConfig+0x312>
 8006b14:	4b77      	ldr	r3, [pc, #476]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b18:	4a76      	ldr	r2, [pc, #472]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b1a:	f043 0304 	orr.w	r3, r3, #4
 8006b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b20:	4b74      	ldr	r3, [pc, #464]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b24:	4a73      	ldr	r2, [pc, #460]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b2c:	e00b      	b.n	8006b46 <HAL_RCC_OscConfig+0x32a>
 8006b2e:	4b71      	ldr	r3, [pc, #452]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	4a70      	ldr	r2, [pc, #448]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	6713      	str	r3, [r2, #112]	; 0x70
 8006b3a:	4b6e      	ldr	r3, [pc, #440]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3e:	4a6d      	ldr	r2, [pc, #436]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b40:	f023 0304 	bic.w	r3, r3, #4
 8006b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d015      	beq.n	8006b7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4e:	f7fd ff0d 	bl	800496c <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b54:	e00a      	b.n	8006b6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b56:	f7fd ff09 	bl	800496c <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e0bc      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b6c:	4b61      	ldr	r3, [pc, #388]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0ee      	beq.n	8006b56 <HAL_RCC_OscConfig+0x33a>
 8006b78:	e014      	b.n	8006ba4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b7a:	f7fd fef7 	bl	800496c <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b80:	e00a      	b.n	8006b98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b82:	f7fd fef3 	bl	800496c <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e0a6      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b98:	4b56      	ldr	r3, [pc, #344]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1ee      	bne.n	8006b82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d105      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006baa:	4b52      	ldr	r3, [pc, #328]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	4a51      	ldr	r2, [pc, #324]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 8092 	beq.w	8006ce4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bc0:	4b4c      	ldr	r3, [pc, #304]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 030c 	and.w	r3, r3, #12
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d05c      	beq.n	8006c86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d141      	bne.n	8006c58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd4:	4b48      	ldr	r3, [pc, #288]	; (8006cf8 <HAL_RCC_OscConfig+0x4dc>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bda:	f7fd fec7 	bl	800496c <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be0:	e008      	b.n	8006bf4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006be2:	f7fd fec3 	bl	800496c <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e078      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf4:	4b3f      	ldr	r3, [pc, #252]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1f0      	bne.n	8006be2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	019b      	lsls	r3, r3, #6
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	061b      	lsls	r3, r3, #24
 8006c24:	4933      	ldr	r1, [pc, #204]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c2a:	4b33      	ldr	r3, [pc, #204]	; (8006cf8 <HAL_RCC_OscConfig+0x4dc>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c30:	f7fd fe9c 	bl	800496c <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c38:	f7fd fe98 	bl	800496c <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e04d      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c4a:	4b2a      	ldr	r3, [pc, #168]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0f0      	beq.n	8006c38 <HAL_RCC_OscConfig+0x41c>
 8006c56:	e045      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c58:	4b27      	ldr	r3, [pc, #156]	; (8006cf8 <HAL_RCC_OscConfig+0x4dc>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5e:	f7fd fe85 	bl	800496c <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c66:	f7fd fe81 	bl	800496c <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e036      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c78:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1f0      	bne.n	8006c66 <HAL_RCC_OscConfig+0x44a>
 8006c84:	e02e      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e029      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c92:	4b18      	ldr	r3, [pc, #96]	; (8006cf4 <HAL_RCC_OscConfig+0x4d8>)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d11c      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d115      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cba:	4013      	ands	r3, r2
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d10d      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d106      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d001      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e000      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40007000 	.word	0x40007000
 8006cf4:	40023800 	.word	0x40023800
 8006cf8:	42470060 	.word	0x42470060

08006cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e0cc      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d10:	4b68      	ldr	r3, [pc, #416]	; (8006eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d90c      	bls.n	8006d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1e:	4b65      	ldr	r3, [pc, #404]	; (8006eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d26:	4b63      	ldr	r3, [pc, #396]	; (8006eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d001      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e0b8      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d020      	beq.n	8006d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d50:	4b59      	ldr	r3, [pc, #356]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	4a58      	ldr	r2, [pc, #352]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d68:	4b53      	ldr	r3, [pc, #332]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	4a52      	ldr	r2, [pc, #328]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d74:	4b50      	ldr	r3, [pc, #320]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	494d      	ldr	r1, [pc, #308]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d044      	beq.n	8006e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d107      	bne.n	8006daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9a:	4b47      	ldr	r3, [pc, #284]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d119      	bne.n	8006dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e07f      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d003      	beq.n	8006dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d107      	bne.n	8006dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dba:	4b3f      	ldr	r3, [pc, #252]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e06f      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dca:	4b3b      	ldr	r3, [pc, #236]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e067      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dda:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f023 0203 	bic.w	r2, r3, #3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	4934      	ldr	r1, [pc, #208]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dec:	f7fd fdbe 	bl	800496c <HAL_GetTick>
 8006df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df2:	e00a      	b.n	8006e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df4:	f7fd fdba 	bl	800496c <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e04f      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e0a:	4b2b      	ldr	r3, [pc, #172]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 020c 	and.w	r2, r3, #12
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d1eb      	bne.n	8006df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e1c:	4b25      	ldr	r3, [pc, #148]	; (8006eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d20c      	bcs.n	8006e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2a:	4b22      	ldr	r3, [pc, #136]	; (8006eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e32:	4b20      	ldr	r3, [pc, #128]	; (8006eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d001      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e032      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d008      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e50:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	4916      	ldr	r1, [pc, #88]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e6e:	4b12      	ldr	r3, [pc, #72]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	490e      	ldr	r1, [pc, #56]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e82:	f000 f821 	bl	8006ec8 <HAL_RCC_GetSysClockFreq>
 8006e86:	4602      	mov	r2, r0
 8006e88:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	091b      	lsrs	r3, r3, #4
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	490a      	ldr	r1, [pc, #40]	; (8006ebc <HAL_RCC_ClockConfig+0x1c0>)
 8006e94:	5ccb      	ldrb	r3, [r1, r3]
 8006e96:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9a:	4a09      	ldr	r2, [pc, #36]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e9e:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fd fd1e 	bl	80048e4 <HAL_InitTick>

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	40023c00 	.word	0x40023c00
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	0800c108 	.word	0x0800c108
 8006ec0:	2000012c 	.word	0x2000012c
 8006ec4:	20000130 	.word	0x20000130

08006ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	607b      	str	r3, [r7, #4]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ee0:	4b67      	ldr	r3, [pc, #412]	; (8007080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 030c 	and.w	r3, r3, #12
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d00d      	beq.n	8006f08 <HAL_RCC_GetSysClockFreq+0x40>
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	f200 80bd 	bhi.w	800706c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <HAL_RCC_GetSysClockFreq+0x34>
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d003      	beq.n	8006f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8006efa:	e0b7      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006efc:	4b61      	ldr	r3, [pc, #388]	; (8007084 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006efe:	60bb      	str	r3, [r7, #8]
       break;
 8006f00:	e0b7      	b.n	8007072 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f02:	4b60      	ldr	r3, [pc, #384]	; (8007084 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f04:	60bb      	str	r3, [r7, #8]
      break;
 8006f06:	e0b4      	b.n	8007072 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f08:	4b5d      	ldr	r3, [pc, #372]	; (8007080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f12:	4b5b      	ldr	r3, [pc, #364]	; (8007080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d04d      	beq.n	8006fba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f1e:	4b58      	ldr	r3, [pc, #352]	; (8007080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	099b      	lsrs	r3, r3, #6
 8006f24:	461a      	mov	r2, r3
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f2e:	f04f 0100 	mov.w	r1, #0
 8006f32:	ea02 0800 	and.w	r8, r2, r0
 8006f36:	ea03 0901 	and.w	r9, r3, r1
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	014b      	lsls	r3, r1, #5
 8006f48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f4c:	0142      	lsls	r2, r0, #5
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	ebb0 0008 	subs.w	r0, r0, r8
 8006f56:	eb61 0109 	sbc.w	r1, r1, r9
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	018b      	lsls	r3, r1, #6
 8006f64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f68:	0182      	lsls	r2, r0, #6
 8006f6a:	1a12      	subs	r2, r2, r0
 8006f6c:	eb63 0301 	sbc.w	r3, r3, r1
 8006f70:	f04f 0000 	mov.w	r0, #0
 8006f74:	f04f 0100 	mov.w	r1, #0
 8006f78:	00d9      	lsls	r1, r3, #3
 8006f7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f7e:	00d0      	lsls	r0, r2, #3
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	eb12 0208 	adds.w	r2, r2, r8
 8006f88:	eb43 0309 	adc.w	r3, r3, r9
 8006f8c:	f04f 0000 	mov.w	r0, #0
 8006f90:	f04f 0100 	mov.w	r1, #0
 8006f94:	0299      	lsls	r1, r3, #10
 8006f96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f9a:	0290      	lsls	r0, r2, #10
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f04f 0300 	mov.w	r3, #0
 8006fac:	f7f9 fe24 	bl	8000bf8 <__aeabi_uldivmod>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	e04a      	b.n	8007050 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fba:	4b31      	ldr	r3, [pc, #196]	; (8007080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	099b      	lsrs	r3, r3, #6
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006fca:	f04f 0100 	mov.w	r1, #0
 8006fce:	ea02 0400 	and.w	r4, r2, r0
 8006fd2:	ea03 0501 	and.w	r5, r3, r1
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	014b      	lsls	r3, r1, #5
 8006fe4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006fe8:	0142      	lsls	r2, r0, #5
 8006fea:	4610      	mov	r0, r2
 8006fec:	4619      	mov	r1, r3
 8006fee:	1b00      	subs	r0, r0, r4
 8006ff0:	eb61 0105 	sbc.w	r1, r1, r5
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	018b      	lsls	r3, r1, #6
 8006ffe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007002:	0182      	lsls	r2, r0, #6
 8007004:	1a12      	subs	r2, r2, r0
 8007006:	eb63 0301 	sbc.w	r3, r3, r1
 800700a:	f04f 0000 	mov.w	r0, #0
 800700e:	f04f 0100 	mov.w	r1, #0
 8007012:	00d9      	lsls	r1, r3, #3
 8007014:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007018:	00d0      	lsls	r0, r2, #3
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	1912      	adds	r2, r2, r4
 8007020:	eb45 0303 	adc.w	r3, r5, r3
 8007024:	f04f 0000 	mov.w	r0, #0
 8007028:	f04f 0100 	mov.w	r1, #0
 800702c:	0299      	lsls	r1, r3, #10
 800702e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007032:	0290      	lsls	r0, r2, #10
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4610      	mov	r0, r2
 800703a:	4619      	mov	r1, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	461a      	mov	r2, r3
 8007040:	f04f 0300 	mov.w	r3, #0
 8007044:	f7f9 fdd8 	bl	8000bf8 <__aeabi_uldivmod>
 8007048:	4602      	mov	r2, r0
 800704a:	460b      	mov	r3, r1
 800704c:	4613      	mov	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	0c1b      	lsrs	r3, r3, #16
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	3301      	adds	r3, #1
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	fbb2 f3f3 	udiv	r3, r2, r3
 8007068:	60bb      	str	r3, [r7, #8]
      break;
 800706a:	e002      	b.n	8007072 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800706c:	4b05      	ldr	r3, [pc, #20]	; (8007084 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800706e:	60bb      	str	r3, [r7, #8]
      break;
 8007070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007072:	68bb      	ldr	r3, [r7, #8]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800707e:	bf00      	nop
 8007080:	40023800 	.word	0x40023800
 8007084:	00f42400 	.word	0x00f42400

08007088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800708c:	4b03      	ldr	r3, [pc, #12]	; (800709c <HAL_RCC_GetHCLKFreq+0x14>)
 800708e:	681b      	ldr	r3, [r3, #0]
}
 8007090:	4618      	mov	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	2000012c 	.word	0x2000012c

080070a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070a4:	f7ff fff0 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	0a9b      	lsrs	r3, r3, #10
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	4903      	ldr	r1, [pc, #12]	; (80070c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070b6:	5ccb      	ldrb	r3, [r1, r3]
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40023800 	.word	0x40023800
 80070c4:	0800c118 	.word	0x0800c118

080070c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070cc:	f7ff ffdc 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	0b5b      	lsrs	r3, r3, #13
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	4903      	ldr	r1, [pc, #12]	; (80070ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80070de:	5ccb      	ldrb	r3, [r1, r3]
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40023800 	.word	0x40023800
 80070ec:	0800c118 	.word	0x0800c118

080070f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e056      	b.n	80071b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fc faa5 	bl	800366c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007138:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	ea42 0103 	orr.w	r1, r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	f003 0104 	and.w	r1, r3, #4
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69da      	ldr	r2, [r3, #28]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800719e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af02      	add	r7, sp, #8
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	4613      	mov	r3, r2
 80071c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071d4:	d112      	bne.n	80071fc <HAL_SPI_Receive+0x44>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10e      	bne.n	80071fc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2204      	movs	r2, #4
 80071e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f8e9 	bl	80073ca <HAL_SPI_TransmitReceive>
 80071f8:	4603      	mov	r3, r0
 80071fa:	e0e2      	b.n	80073c2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_SPI_Receive+0x52>
 8007206:	2302      	movs	r3, #2
 8007208:	e0db      	b.n	80073c2 <HAL_SPI_Receive+0x20a>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007212:	f7fd fbab 	bl	800496c <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b01      	cmp	r3, #1
 8007222:	d002      	beq.n	800722a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007224:	2302      	movs	r3, #2
 8007226:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007228:	e0c2      	b.n	80073b0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <HAL_SPI_Receive+0x7e>
 8007230:	88fb      	ldrh	r3, [r7, #6]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d102      	bne.n	800723c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	75fb      	strb	r3, [r7, #23]
    goto error;
 800723a:	e0b9      	b.n	80073b0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2204      	movs	r2, #4
 8007240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	88fa      	ldrh	r2, [r7, #6]
 8007254:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	88fa      	ldrh	r2, [r7, #6]
 800725a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007282:	d107      	bne.n	8007294 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007292:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d007      	beq.n	80072b2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d162      	bne.n	8007380 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80072ba:	e02e      	b.n	800731a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d115      	bne.n	80072f6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f103 020c 	add.w	r2, r3, #12
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	b2d2      	uxtb	r2, r2
 80072da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072f4:	e011      	b.n	800731a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072f6:	f7fd fb39 	bl	800496c <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d803      	bhi.n	800730e <HAL_SPI_Receive+0x156>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800730c:	d102      	bne.n	8007314 <HAL_SPI_Receive+0x15c>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007318:	e04a      	b.n	80073b0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1cb      	bne.n	80072bc <HAL_SPI_Receive+0x104>
 8007324:	e031      	b.n	800738a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b01      	cmp	r3, #1
 8007332:	d113      	bne.n	800735c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	b292      	uxth	r2, r2
 8007340:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	1c9a      	adds	r2, r3, #2
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007350:	b29b      	uxth	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	87da      	strh	r2, [r3, #62]	; 0x3e
 800735a:	e011      	b.n	8007380 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800735c:	f7fd fb06 	bl	800496c <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	429a      	cmp	r2, r3
 800736a:	d803      	bhi.n	8007374 <HAL_SPI_Receive+0x1bc>
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007372:	d102      	bne.n	800737a <HAL_SPI_Receive+0x1c2>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d102      	bne.n	8007380 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800737e:	e017      	b.n	80073b0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1cd      	bne.n	8007326 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 fa27 	bl	80077e2 <SPI_EndRxTransaction>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2220      	movs	r2, #32
 800739e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	75fb      	strb	r3, [r7, #23]
 80073ac:	e000      	b.n	80073b0 <HAL_SPI_Receive+0x1f8>
  }

error :
 80073ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b08c      	sub	sp, #48	; 0x30
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	607a      	str	r2, [r7, #4]
 80073d6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073d8:	2301      	movs	r3, #1
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_SPI_TransmitReceive+0x26>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e18a      	b.n	8007706 <HAL_SPI_TransmitReceive+0x33c>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073f8:	f7fd fab8 	bl	800496c <HAL_GetTick>
 80073fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800740e:	887b      	ldrh	r3, [r7, #2]
 8007410:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007412:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007416:	2b01      	cmp	r3, #1
 8007418:	d00f      	beq.n	800743a <HAL_SPI_TransmitReceive+0x70>
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007420:	d107      	bne.n	8007432 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d103      	bne.n	8007432 <HAL_SPI_TransmitReceive+0x68>
 800742a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800742e:	2b04      	cmp	r3, #4
 8007430:	d003      	beq.n	800743a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007432:	2302      	movs	r3, #2
 8007434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007438:	e15b      	b.n	80076f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <HAL_SPI_TransmitReceive+0x82>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <HAL_SPI_TransmitReceive+0x82>
 8007446:	887b      	ldrh	r3, [r7, #2]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d103      	bne.n	8007454 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007452:	e14e      	b.n	80076f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b04      	cmp	r3, #4
 800745e:	d003      	beq.n	8007468 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2205      	movs	r2, #5
 8007464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	887a      	ldrh	r2, [r7, #2]
 8007478:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	887a      	ldrh	r2, [r7, #2]
 800747e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	887a      	ldrh	r2, [r7, #2]
 800748a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	887a      	ldrh	r2, [r7, #2]
 8007490:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a8:	2b40      	cmp	r3, #64	; 0x40
 80074aa:	d007      	beq.n	80074bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c4:	d178      	bne.n	80075b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <HAL_SPI_TransmitReceive+0x10a>
 80074ce:	8b7b      	ldrh	r3, [r7, #26]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d166      	bne.n	80075a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	881a      	ldrh	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	1c9a      	adds	r2, r3, #2
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f8:	e053      	b.n	80075a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b02      	cmp	r3, #2
 8007506:	d11b      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x176>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d016      	beq.n	8007540 <HAL_SPI_TransmitReceive+0x176>
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	2b01      	cmp	r3, #1
 8007516:	d113      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	881a      	ldrh	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007528:	1c9a      	adds	r2, r3, #2
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b01      	cmp	r3, #1
 800754c:	d119      	bne.n	8007582 <HAL_SPI_TransmitReceive+0x1b8>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d014      	beq.n	8007582 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007562:	b292      	uxth	r2, r2
 8007564:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756a:	1c9a      	adds	r2, r3, #2
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007574:	b29b      	uxth	r3, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	b29a      	uxth	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800757e:	2301      	movs	r3, #1
 8007580:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007582:	f7fd f9f3 	bl	800496c <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800758e:	429a      	cmp	r2, r3
 8007590:	d807      	bhi.n	80075a2 <HAL_SPI_TransmitReceive+0x1d8>
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007598:	d003      	beq.n	80075a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075a0:	e0a7      	b.n	80076f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1a6      	bne.n	80074fa <HAL_SPI_TransmitReceive+0x130>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1a1      	bne.n	80074fa <HAL_SPI_TransmitReceive+0x130>
 80075b6:	e07c      	b.n	80076b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <HAL_SPI_TransmitReceive+0x1fc>
 80075c0:	8b7b      	ldrh	r3, [r7, #26]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d16b      	bne.n	800769e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	330c      	adds	r3, #12
 80075d0:	7812      	ldrb	r2, [r2, #0]
 80075d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ec:	e057      	b.n	800769e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d11c      	bne.n	8007636 <HAL_SPI_TransmitReceive+0x26c>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d017      	beq.n	8007636 <HAL_SPI_TransmitReceive+0x26c>
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	2b01      	cmp	r3, #1
 800760a:	d114      	bne.n	8007636 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	7812      	ldrb	r2, [r2, #0]
 8007618:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b01      	cmp	r3, #1
 8007642:	d119      	bne.n	8007678 <HAL_SPI_TransmitReceive+0x2ae>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d014      	beq.n	8007678 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007674:	2301      	movs	r3, #1
 8007676:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007678:	f7fd f978 	bl	800496c <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007684:	429a      	cmp	r2, r3
 8007686:	d803      	bhi.n	8007690 <HAL_SPI_TransmitReceive+0x2c6>
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800768e:	d102      	bne.n	8007696 <HAL_SPI_TransmitReceive+0x2cc>
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	2b00      	cmp	r3, #0
 8007694:	d103      	bne.n	800769e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800769c:	e029      	b.n	80076f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1a2      	bne.n	80075ee <HAL_SPI_TransmitReceive+0x224>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d19d      	bne.n	80075ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 f8f8 	bl	80078ac <SPI_EndRxTxTransaction>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d006      	beq.n	80076d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2220      	movs	r2, #32
 80076cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80076ce:	e010      	b.n	80076f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10b      	bne.n	80076f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	e000      	b.n	80076f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80076f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007702:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007706:	4618      	mov	r0, r3
 8007708:	3730      	adds	r7, #48	; 0x30
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	603b      	str	r3, [r7, #0]
 800771a:	4613      	mov	r3, r2
 800771c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800771e:	e04c      	b.n	80077ba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007726:	d048      	beq.n	80077ba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007728:	f7fd f920 	bl	800496c <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d902      	bls.n	800773e <SPI_WaitFlagStateUntilTimeout+0x30>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d13d      	bne.n	80077ba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800774c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007756:	d111      	bne.n	800777c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007760:	d004      	beq.n	800776c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800776a:	d107      	bne.n	800777c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800777a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007784:	d10f      	bne.n	80077a6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e00f      	b.n	80077da <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4013      	ands	r3, r2
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	bf0c      	ite	eq
 80077ca:	2301      	moveq	r3, #1
 80077cc:	2300      	movne	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d1a3      	bne.n	8007720 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b086      	sub	sp, #24
 80077e6:	af02      	add	r7, sp, #8
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f6:	d111      	bne.n	800781c <SPI_EndRxTransaction+0x3a>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007800:	d004      	beq.n	800780c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800780a:	d107      	bne.n	800781c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800781a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007824:	d12a      	bne.n	800787c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800782e:	d012      	beq.n	8007856 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2200      	movs	r2, #0
 8007838:	2180      	movs	r1, #128	; 0x80
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff ff67 	bl	800770e <SPI_WaitFlagStateUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d02d      	beq.n	80078a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784a:	f043 0220 	orr.w	r2, r3, #32
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e026      	b.n	80078a4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2200      	movs	r2, #0
 800785e:	2101      	movs	r1, #1
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f7ff ff54 	bl	800770e <SPI_WaitFlagStateUntilTimeout>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d01a      	beq.n	80078a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007870:	f043 0220 	orr.w	r2, r3, #32
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e013      	b.n	80078a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2200      	movs	r2, #0
 8007884:	2101      	movs	r1, #1
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff ff41 	bl	800770e <SPI_WaitFlagStateUntilTimeout>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007896:	f043 0220 	orr.w	r2, r3, #32
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e000      	b.n	80078a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b088      	sub	sp, #32
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80078b8:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <SPI_EndRxTxTransaction+0x7c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a1b      	ldr	r2, [pc, #108]	; (800792c <SPI_EndRxTxTransaction+0x80>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	0d5b      	lsrs	r3, r3, #21
 80078c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078d6:	d112      	bne.n	80078fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2200      	movs	r2, #0
 80078e0:	2180      	movs	r1, #128	; 0x80
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f7ff ff13 	bl	800770e <SPI_WaitFlagStateUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d016      	beq.n	800791c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	f043 0220 	orr.w	r2, r3, #32
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e00f      	b.n	800791e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	3b01      	subs	r3, #1
 8007908:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007914:	2b80      	cmp	r3, #128	; 0x80
 8007916:	d0f2      	beq.n	80078fe <SPI_EndRxTxTransaction+0x52>
 8007918:	e000      	b.n	800791c <SPI_EndRxTxTransaction+0x70>
        break;
 800791a:	bf00      	nop
  }

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	2000012c 	.word	0x2000012c
 800792c:	165e9f81 	.word	0x165e9f81

08007930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e01d      	b.n	800797e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d106      	bne.n	800795c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fc f9a0 	bl	8003c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3304      	adds	r3, #4
 800796c:	4619      	mov	r1, r3
 800796e:	4610      	mov	r0, r2
 8007970:	f000 fa82 	bl	8007e78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2202      	movs	r2, #2
 8007992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b06      	cmp	r3, #6
 80079a6:	d007      	beq.n	80079b8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0201 	orr.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e01d      	b.n	8007a1c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d106      	bne.n	80079fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f815 	bl	8007a24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	f000 fa33 	bl	8007e78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2201      	movs	r2, #1
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fcfe 	bl	800844c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a15      	ldr	r2, [pc, #84]	; (8007aac <HAL_TIM_PWM_Start+0x74>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d004      	beq.n	8007a64 <HAL_TIM_PWM_Start+0x2c>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a14      	ldr	r2, [pc, #80]	; (8007ab0 <HAL_TIM_PWM_Start+0x78>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d101      	bne.n	8007a68 <HAL_TIM_PWM_Start+0x30>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <HAL_TIM_PWM_Start+0x32>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d007      	beq.n	8007a7e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b06      	cmp	r3, #6
 8007a8e:	d007      	beq.n	8007aa0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0201 	orr.w	r2, r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40010400 	.word	0x40010400

08007ab4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fcc0 	bl	800844c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a22      	ldr	r2, [pc, #136]	; (8007b5c <HAL_TIM_PWM_Stop+0xa8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d004      	beq.n	8007ae0 <HAL_TIM_PWM_Stop+0x2c>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a21      	ldr	r2, [pc, #132]	; (8007b60 <HAL_TIM_PWM_Stop+0xac>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d101      	bne.n	8007ae4 <HAL_TIM_PWM_Stop+0x30>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e000      	b.n	8007ae6 <HAL_TIM_PWM_Stop+0x32>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d017      	beq.n	8007b1a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6a1a      	ldr	r2, [r3, #32]
 8007af0:	f241 1311 	movw	r3, #4369	; 0x1111
 8007af4:	4013      	ands	r3, r2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10f      	bne.n	8007b1a <HAL_TIM_PWM_Stop+0x66>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6a1a      	ldr	r2, [r3, #32]
 8007b00:	f240 4344 	movw	r3, #1092	; 0x444
 8007b04:	4013      	ands	r3, r2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d107      	bne.n	8007b1a <HAL_TIM_PWM_Stop+0x66>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6a1a      	ldr	r2, [r3, #32]
 8007b20:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b24:	4013      	ands	r3, r2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10f      	bne.n	8007b4a <HAL_TIM_PWM_Stop+0x96>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6a1a      	ldr	r2, [r3, #32]
 8007b30:	f240 4344 	movw	r3, #1092	; 0x444
 8007b34:	4013      	ands	r3, r2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d107      	bne.n	8007b4a <HAL_TIM_PWM_Stop+0x96>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 0201 	bic.w	r2, r2, #1
 8007b48:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	40010000 	.word	0x40010000
 8007b60:	40010400 	.word	0x40010400

08007b64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d101      	bne.n	8007b7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e0b4      	b.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b0c      	cmp	r3, #12
 8007b92:	f200 809f 	bhi.w	8007cd4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bd1 	.word	0x08007bd1
 8007ba0:	08007cd5 	.word	0x08007cd5
 8007ba4:	08007cd5 	.word	0x08007cd5
 8007ba8:	08007cd5 	.word	0x08007cd5
 8007bac:	08007c11 	.word	0x08007c11
 8007bb0:	08007cd5 	.word	0x08007cd5
 8007bb4:	08007cd5 	.word	0x08007cd5
 8007bb8:	08007cd5 	.word	0x08007cd5
 8007bbc:	08007c53 	.word	0x08007c53
 8007bc0:	08007cd5 	.word	0x08007cd5
 8007bc4:	08007cd5 	.word	0x08007cd5
 8007bc8:	08007cd5 	.word	0x08007cd5
 8007bcc:	08007c93 	.word	0x08007c93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68b9      	ldr	r1, [r7, #8]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 f9ee 	bl	8007fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0208 	orr.w	r2, r2, #8
 8007bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0204 	bic.w	r2, r2, #4
 8007bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6999      	ldr	r1, [r3, #24]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	691a      	ldr	r2, [r3, #16]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	619a      	str	r2, [r3, #24]
      break;
 8007c0e:	e062      	b.n	8007cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fa3e 	bl	8008098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699a      	ldr	r2, [r3, #24]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6999      	ldr	r1, [r3, #24]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	021a      	lsls	r2, r3, #8
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	619a      	str	r2, [r3, #24]
      break;
 8007c50:	e041      	b.n	8007cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68b9      	ldr	r1, [r7, #8]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fa93 	bl	8008184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	69da      	ldr	r2, [r3, #28]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0208 	orr.w	r2, r2, #8
 8007c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69da      	ldr	r2, [r3, #28]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0204 	bic.w	r2, r2, #4
 8007c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69d9      	ldr	r1, [r3, #28]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	691a      	ldr	r2, [r3, #16]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	61da      	str	r2, [r3, #28]
      break;
 8007c90:	e021      	b.n	8007cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fae7 	bl	800826c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69da      	ldr	r2, [r3, #28]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69d9      	ldr	r1, [r3, #28]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	021a      	lsls	r2, r3, #8
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	61da      	str	r2, [r3, #28]
      break;
 8007cd2:	e000      	b.n	8007cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007cd4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_TIM_ConfigClockSource+0x18>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e0b3      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x180>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d40:	d03e      	beq.n	8007dc0 <HAL_TIM_ConfigClockSource+0xd0>
 8007d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d46:	f200 8087 	bhi.w	8007e58 <HAL_TIM_ConfigClockSource+0x168>
 8007d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d4e:	f000 8085 	beq.w	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d56:	d87f      	bhi.n	8007e58 <HAL_TIM_ConfigClockSource+0x168>
 8007d58:	2b70      	cmp	r3, #112	; 0x70
 8007d5a:	d01a      	beq.n	8007d92 <HAL_TIM_ConfigClockSource+0xa2>
 8007d5c:	2b70      	cmp	r3, #112	; 0x70
 8007d5e:	d87b      	bhi.n	8007e58 <HAL_TIM_ConfigClockSource+0x168>
 8007d60:	2b60      	cmp	r3, #96	; 0x60
 8007d62:	d050      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x116>
 8007d64:	2b60      	cmp	r3, #96	; 0x60
 8007d66:	d877      	bhi.n	8007e58 <HAL_TIM_ConfigClockSource+0x168>
 8007d68:	2b50      	cmp	r3, #80	; 0x50
 8007d6a:	d03c      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0xf6>
 8007d6c:	2b50      	cmp	r3, #80	; 0x50
 8007d6e:	d873      	bhi.n	8007e58 <HAL_TIM_ConfigClockSource+0x168>
 8007d70:	2b40      	cmp	r3, #64	; 0x40
 8007d72:	d058      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x136>
 8007d74:	2b40      	cmp	r3, #64	; 0x40
 8007d76:	d86f      	bhi.n	8007e58 <HAL_TIM_ConfigClockSource+0x168>
 8007d78:	2b30      	cmp	r3, #48	; 0x30
 8007d7a:	d064      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0x156>
 8007d7c:	2b30      	cmp	r3, #48	; 0x30
 8007d7e:	d86b      	bhi.n	8007e58 <HAL_TIM_ConfigClockSource+0x168>
 8007d80:	2b20      	cmp	r3, #32
 8007d82:	d060      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0x156>
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d867      	bhi.n	8007e58 <HAL_TIM_ConfigClockSource+0x168>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d05c      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0x156>
 8007d8c:	2b10      	cmp	r3, #16
 8007d8e:	d05a      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007d90:	e062      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	6899      	ldr	r1, [r3, #8]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	f000 fb33 	bl	800840c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007db4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	609a      	str	r2, [r3, #8]
      break;
 8007dbe:	e04e      	b.n	8007e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	6899      	ldr	r1, [r3, #8]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	f000 fb1c 	bl	800840c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689a      	ldr	r2, [r3, #8]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007de2:	609a      	str	r2, [r3, #8]
      break;
 8007de4:	e03b      	b.n	8007e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6859      	ldr	r1, [r3, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f000 fa90 	bl	8008318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2150      	movs	r1, #80	; 0x50
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fae9 	bl	80083d6 <TIM_ITRx_SetConfig>
      break;
 8007e04:	e02b      	b.n	8007e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	6859      	ldr	r1, [r3, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	461a      	mov	r2, r3
 8007e14:	f000 faaf 	bl	8008376 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2160      	movs	r1, #96	; 0x60
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 fad9 	bl	80083d6 <TIM_ITRx_SetConfig>
      break;
 8007e24:	e01b      	b.n	8007e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	6859      	ldr	r1, [r3, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f000 fa70 	bl	8008318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2140      	movs	r1, #64	; 0x40
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fac9 	bl	80083d6 <TIM_ITRx_SetConfig>
      break;
 8007e44:	e00b      	b.n	8007e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4610      	mov	r0, r2
 8007e52:	f000 fac0 	bl	80083d6 <TIM_ITRx_SetConfig>
      break;
 8007e56:	e002      	b.n	8007e5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e58:	bf00      	nop
 8007e5a:	e000      	b.n	8007e5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a40      	ldr	r2, [pc, #256]	; (8007f8c <TIM_Base_SetConfig+0x114>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d013      	beq.n	8007eb8 <TIM_Base_SetConfig+0x40>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e96:	d00f      	beq.n	8007eb8 <TIM_Base_SetConfig+0x40>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a3d      	ldr	r2, [pc, #244]	; (8007f90 <TIM_Base_SetConfig+0x118>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d00b      	beq.n	8007eb8 <TIM_Base_SetConfig+0x40>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a3c      	ldr	r2, [pc, #240]	; (8007f94 <TIM_Base_SetConfig+0x11c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d007      	beq.n	8007eb8 <TIM_Base_SetConfig+0x40>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a3b      	ldr	r2, [pc, #236]	; (8007f98 <TIM_Base_SetConfig+0x120>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d003      	beq.n	8007eb8 <TIM_Base_SetConfig+0x40>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a3a      	ldr	r2, [pc, #232]	; (8007f9c <TIM_Base_SetConfig+0x124>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d108      	bne.n	8007eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a2f      	ldr	r2, [pc, #188]	; (8007f8c <TIM_Base_SetConfig+0x114>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d02b      	beq.n	8007f2a <TIM_Base_SetConfig+0xb2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed8:	d027      	beq.n	8007f2a <TIM_Base_SetConfig+0xb2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a2c      	ldr	r2, [pc, #176]	; (8007f90 <TIM_Base_SetConfig+0x118>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d023      	beq.n	8007f2a <TIM_Base_SetConfig+0xb2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a2b      	ldr	r2, [pc, #172]	; (8007f94 <TIM_Base_SetConfig+0x11c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d01f      	beq.n	8007f2a <TIM_Base_SetConfig+0xb2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a2a      	ldr	r2, [pc, #168]	; (8007f98 <TIM_Base_SetConfig+0x120>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d01b      	beq.n	8007f2a <TIM_Base_SetConfig+0xb2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a29      	ldr	r2, [pc, #164]	; (8007f9c <TIM_Base_SetConfig+0x124>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d017      	beq.n	8007f2a <TIM_Base_SetConfig+0xb2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a28      	ldr	r2, [pc, #160]	; (8007fa0 <TIM_Base_SetConfig+0x128>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d013      	beq.n	8007f2a <TIM_Base_SetConfig+0xb2>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a27      	ldr	r2, [pc, #156]	; (8007fa4 <TIM_Base_SetConfig+0x12c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d00f      	beq.n	8007f2a <TIM_Base_SetConfig+0xb2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a26      	ldr	r2, [pc, #152]	; (8007fa8 <TIM_Base_SetConfig+0x130>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d00b      	beq.n	8007f2a <TIM_Base_SetConfig+0xb2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a25      	ldr	r2, [pc, #148]	; (8007fac <TIM_Base_SetConfig+0x134>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d007      	beq.n	8007f2a <TIM_Base_SetConfig+0xb2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a24      	ldr	r2, [pc, #144]	; (8007fb0 <TIM_Base_SetConfig+0x138>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d003      	beq.n	8007f2a <TIM_Base_SetConfig+0xb2>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a23      	ldr	r2, [pc, #140]	; (8007fb4 <TIM_Base_SetConfig+0x13c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d108      	bne.n	8007f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a0a      	ldr	r2, [pc, #40]	; (8007f8c <TIM_Base_SetConfig+0x114>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d003      	beq.n	8007f70 <TIM_Base_SetConfig+0xf8>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a0c      	ldr	r2, [pc, #48]	; (8007f9c <TIM_Base_SetConfig+0x124>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d103      	bne.n	8007f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	691a      	ldr	r2, [r3, #16]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	615a      	str	r2, [r3, #20]
}
 8007f7e:	bf00      	nop
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	40010000 	.word	0x40010000
 8007f90:	40000400 	.word	0x40000400
 8007f94:	40000800 	.word	0x40000800
 8007f98:	40000c00 	.word	0x40000c00
 8007f9c:	40010400 	.word	0x40010400
 8007fa0:	40014000 	.word	0x40014000
 8007fa4:	40014400 	.word	0x40014400
 8007fa8:	40014800 	.word	0x40014800
 8007fac:	40001800 	.word	0x40001800
 8007fb0:	40001c00 	.word	0x40001c00
 8007fb4:	40002000 	.word	0x40002000

08007fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f023 0201 	bic.w	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0303 	bic.w	r3, r3, #3
 8007fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f023 0302 	bic.w	r3, r3, #2
 8008000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a20      	ldr	r2, [pc, #128]	; (8008090 <TIM_OC1_SetConfig+0xd8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d003      	beq.n	800801c <TIM_OC1_SetConfig+0x64>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a1f      	ldr	r2, [pc, #124]	; (8008094 <TIM_OC1_SetConfig+0xdc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d10c      	bne.n	8008036 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f023 0308 	bic.w	r3, r3, #8
 8008022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	4313      	orrs	r3, r2
 800802c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f023 0304 	bic.w	r3, r3, #4
 8008034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a15      	ldr	r2, [pc, #84]	; (8008090 <TIM_OC1_SetConfig+0xd8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d003      	beq.n	8008046 <TIM_OC1_SetConfig+0x8e>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a14      	ldr	r2, [pc, #80]	; (8008094 <TIM_OC1_SetConfig+0xdc>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d111      	bne.n	800806a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800804c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	4313      	orrs	r3, r2
 800805e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	4313      	orrs	r3, r2
 8008068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	621a      	str	r2, [r3, #32]
}
 8008084:	bf00      	nop
 8008086:	371c      	adds	r7, #28
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	40010000 	.word	0x40010000
 8008094:	40010400 	.word	0x40010400

08008098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	f023 0210 	bic.w	r2, r3, #16
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	021b      	lsls	r3, r3, #8
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4313      	orrs	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f023 0320 	bic.w	r3, r3, #32
 80080e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a22      	ldr	r2, [pc, #136]	; (800817c <TIM_OC2_SetConfig+0xe4>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d003      	beq.n	8008100 <TIM_OC2_SetConfig+0x68>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a21      	ldr	r2, [pc, #132]	; (8008180 <TIM_OC2_SetConfig+0xe8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d10d      	bne.n	800811c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	4313      	orrs	r3, r2
 8008112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a17      	ldr	r2, [pc, #92]	; (800817c <TIM_OC2_SetConfig+0xe4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d003      	beq.n	800812c <TIM_OC2_SetConfig+0x94>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a16      	ldr	r2, [pc, #88]	; (8008180 <TIM_OC2_SetConfig+0xe8>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d113      	bne.n	8008154 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800813a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	4313      	orrs	r3, r2
 8008146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	4313      	orrs	r3, r2
 8008152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	621a      	str	r2, [r3, #32]
}
 800816e:	bf00      	nop
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	40010000 	.word	0x40010000
 8008180:	40010400 	.word	0x40010400

08008184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0303 	bic.w	r3, r3, #3
 80081ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a21      	ldr	r2, [pc, #132]	; (8008264 <TIM_OC3_SetConfig+0xe0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d003      	beq.n	80081ea <TIM_OC3_SetConfig+0x66>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a20      	ldr	r2, [pc, #128]	; (8008268 <TIM_OC3_SetConfig+0xe4>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d10d      	bne.n	8008206 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	021b      	lsls	r3, r3, #8
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a16      	ldr	r2, [pc, #88]	; (8008264 <TIM_OC3_SetConfig+0xe0>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d003      	beq.n	8008216 <TIM_OC3_SetConfig+0x92>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a15      	ldr	r2, [pc, #84]	; (8008268 <TIM_OC3_SetConfig+0xe4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d113      	bne.n	800823e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800821c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	011b      	lsls	r3, r3, #4
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	4313      	orrs	r3, r2
 8008230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	621a      	str	r2, [r3, #32]
}
 8008258:	bf00      	nop
 800825a:	371c      	adds	r7, #28
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	40010000 	.word	0x40010000
 8008268:	40010400 	.word	0x40010400

0800826c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800829a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	021b      	lsls	r3, r3, #8
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	031b      	lsls	r3, r3, #12
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a12      	ldr	r2, [pc, #72]	; (8008310 <TIM_OC4_SetConfig+0xa4>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d003      	beq.n	80082d4 <TIM_OC4_SetConfig+0x68>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a11      	ldr	r2, [pc, #68]	; (8008314 <TIM_OC4_SetConfig+0xa8>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d109      	bne.n	80082e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	019b      	lsls	r3, r3, #6
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40010000 	.word	0x40010000
 8008314:	40010400 	.word	0x40010400

08008318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	f023 0201 	bic.w	r2, r3, #1
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	4313      	orrs	r3, r2
 800834c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f023 030a 	bic.w	r3, r3, #10
 8008354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4313      	orrs	r3, r2
 800835c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	621a      	str	r2, [r3, #32]
}
 800836a:	bf00      	nop
 800836c:	371c      	adds	r7, #28
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008376:	b480      	push	{r7}
 8008378:	b087      	sub	sp, #28
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	f023 0210 	bic.w	r2, r3, #16
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	031b      	lsls	r3, r3, #12
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	011b      	lsls	r3, r3, #4
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	621a      	str	r2, [r3, #32]
}
 80083ca:	bf00      	nop
 80083cc:	371c      	adds	r7, #28
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b085      	sub	sp, #20
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	f043 0307 	orr.w	r3, r3, #7
 80083f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	609a      	str	r2, [r3, #8]
}
 8008400:	bf00      	nop
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	021a      	lsls	r2, r3, #8
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	431a      	orrs	r2, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	4313      	orrs	r3, r2
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	4313      	orrs	r3, r2
 8008438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	609a      	str	r2, [r3, #8]
}
 8008440:	bf00      	nop
 8008442:	371c      	adds	r7, #28
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f003 031f 	and.w	r3, r3, #31
 800845e:	2201      	movs	r2, #1
 8008460:	fa02 f303 	lsl.w	r3, r2, r3
 8008464:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a1a      	ldr	r2, [r3, #32]
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	43db      	mvns	r3, r3
 800846e:	401a      	ands	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6a1a      	ldr	r2, [r3, #32]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f003 031f 	and.w	r3, r3, #31
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	fa01 f303 	lsl.w	r3, r1, r3
 8008484:	431a      	orrs	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	621a      	str	r2, [r3, #32]
}
 800848a:	bf00      	nop
 800848c:	371c      	adds	r7, #28
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
	...

08008498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084ac:	2302      	movs	r3, #2
 80084ae:	e05a      	b.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	4313      	orrs	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a21      	ldr	r2, [pc, #132]	; (8008574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d022      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fc:	d01d      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1d      	ldr	r2, [pc, #116]	; (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d018      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a1b      	ldr	r2, [pc, #108]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a1a      	ldr	r2, [pc, #104]	; (8008580 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00e      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a18      	ldr	r2, [pc, #96]	; (8008584 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d009      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a17      	ldr	r2, [pc, #92]	; (8008588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d004      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a15      	ldr	r2, [pc, #84]	; (800858c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d10c      	bne.n	8008554 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	4313      	orrs	r3, r2
 800854a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	40010000 	.word	0x40010000
 8008578:	40000400 	.word	0x40000400
 800857c:	40000800 	.word	0x40000800
 8008580:	40000c00 	.word	0x40000c00
 8008584:	40010400 	.word	0x40010400
 8008588:	40014000 	.word	0x40014000
 800858c:	40001800 	.word	0x40001800

08008590 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e03d      	b.n	8008628 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	4313      	orrs	r3, r2
 80085dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e03f      	b.n	80086c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7fb fc5a 	bl	8003f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2224      	movs	r2, #36	; 0x24
 8008664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fc6d 	bl	8008f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	691a      	ldr	r2, [r3, #16]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800868c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	695a      	ldr	r2, [r3, #20]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800869c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2220      	movs	r2, #32
 80086c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b088      	sub	sp, #32
 80086d2:	af02      	add	r7, sp, #8
 80086d4:	60f8      	str	r0, [r7, #12]
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	603b      	str	r3, [r7, #0]
 80086da:	4613      	mov	r3, r2
 80086dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b20      	cmp	r3, #32
 80086ec:	f040 8083 	bne.w	80087f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <HAL_UART_Transmit+0x2e>
 80086f6:	88fb      	ldrh	r3, [r7, #6]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e07b      	b.n	80087f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008706:	2b01      	cmp	r3, #1
 8008708:	d101      	bne.n	800870e <HAL_UART_Transmit+0x40>
 800870a:	2302      	movs	r3, #2
 800870c:	e074      	b.n	80087f8 <HAL_UART_Transmit+0x12a>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2221      	movs	r2, #33	; 0x21
 8008720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008724:	f7fc f922 	bl	800496c <HAL_GetTick>
 8008728:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	88fa      	ldrh	r2, [r7, #6]
 800872e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	88fa      	ldrh	r2, [r7, #6]
 8008734:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800873e:	e042      	b.n	80087c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008744:	b29b      	uxth	r3, r3
 8008746:	3b01      	subs	r3, #1
 8008748:	b29a      	uxth	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008756:	d122      	bne.n	800879e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2200      	movs	r2, #0
 8008760:	2180      	movs	r1, #128	; 0x80
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f000 fa76 	bl	8008c54 <UART_WaitOnFlagUntilTimeout>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e042      	b.n	80087f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	461a      	mov	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008784:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	3302      	adds	r3, #2
 8008792:	60bb      	str	r3, [r7, #8]
 8008794:	e017      	b.n	80087c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	3301      	adds	r3, #1
 800879a:	60bb      	str	r3, [r7, #8]
 800879c:	e013      	b.n	80087c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2200      	movs	r2, #0
 80087a6:	2180      	movs	r1, #128	; 0x80
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 fa53 	bl	8008c54 <UART_WaitOnFlagUntilTimeout>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e01f      	b.n	80087f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	60ba      	str	r2, [r7, #8]
 80087be:	781a      	ldrb	r2, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1b7      	bne.n	8008740 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2200      	movs	r2, #0
 80087d8:	2140      	movs	r1, #64	; 0x40
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 fa3a 	bl	8008c54 <UART_WaitOnFlagUntilTimeout>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e006      	b.n	80087f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	e000      	b.n	80087f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80087f6:	2302      	movs	r3, #2
  }
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b20      	cmp	r3, #32
 8008818:	d166      	bne.n	80088e8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <HAL_UART_Receive_DMA+0x26>
 8008820:	88fb      	ldrh	r3, [r7, #6]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e05f      	b.n	80088ea <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_UART_Receive_DMA+0x38>
 8008834:	2302      	movs	r3, #2
 8008836:	e058      	b.n	80088ea <HAL_UART_Receive_DMA+0xea>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	88fa      	ldrh	r2, [r7, #6]
 800884a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2222      	movs	r2, #34	; 0x22
 8008856:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885e:	4a25      	ldr	r2, [pc, #148]	; (80088f4 <HAL_UART_Receive_DMA+0xf4>)
 8008860:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008866:	4a24      	ldr	r2, [pc, #144]	; (80088f8 <HAL_UART_Receive_DMA+0xf8>)
 8008868:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886e:	4a23      	ldr	r2, [pc, #140]	; (80088fc <HAL_UART_Receive_DMA+0xfc>)
 8008870:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008876:	2200      	movs	r2, #0
 8008878:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800887a:	f107 0308 	add.w	r3, r7, #8
 800887e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3304      	adds	r3, #4
 800888a:	4619      	mov	r1, r3
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	88fb      	ldrh	r3, [r7, #6]
 8008892:	f7fd f8d9 	bl	8005a48 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008896:	2300      	movs	r3, #0
 8008898:	613b      	str	r3, [r7, #16]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	613b      	str	r3, [r7, #16]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	613b      	str	r3, [r7, #16]
 80088aa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695a      	ldr	r2, [r3, #20]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0201 	orr.w	r2, r2, #1
 80088d2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	695a      	ldr	r2, [r3, #20]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088e2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	e000      	b.n	80088ea <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80088e8:	2302      	movs	r3, #2
  }
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	08008b3d 	.word	0x08008b3d
 80088f8:	08008ba5 	.word	0x08008ba5
 80088fc:	08008bc1 	.word	0x08008bc1

08008900 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008924:	2300      	movs	r3, #0
 8008926:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	f003 030f 	and.w	r3, r3, #15
 800892e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10d      	bne.n	8008952 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	f003 0320 	and.w	r3, r3, #32
 800893c:	2b00      	cmp	r3, #0
 800893e:	d008      	beq.n	8008952 <HAL_UART_IRQHandler+0x52>
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa82 	bl	8008e54 <UART_Receive_IT>
      return;
 8008950:	e0d0      	b.n	8008af4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 80b0 	beq.w	8008aba <HAL_UART_IRQHandler+0x1ba>
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b00      	cmp	r3, #0
 8008962:	d105      	bne.n	8008970 <HAL_UART_IRQHandler+0x70>
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 80a5 	beq.w	8008aba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <HAL_UART_IRQHandler+0x90>
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008988:	f043 0201 	orr.w	r2, r3, #1
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f003 0304 	and.w	r3, r3, #4
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <HAL_UART_IRQHandler+0xb0>
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d005      	beq.n	80089b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a8:	f043 0202 	orr.w	r2, r3, #2
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <HAL_UART_IRQHandler+0xd0>
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d005      	beq.n	80089d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c8:	f043 0204 	orr.w	r2, r3, #4
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00f      	beq.n	80089fa <HAL_UART_IRQHandler+0xfa>
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	f003 0320 	and.w	r3, r3, #32
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d104      	bne.n	80089ee <HAL_UART_IRQHandler+0xee>
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f2:	f043 0208 	orr.w	r2, r3, #8
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d077      	beq.n	8008af2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	f003 0320 	and.w	r3, r3, #32
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <HAL_UART_IRQHandler+0x11c>
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	f003 0320 	and.w	r3, r3, #32
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fa1c 	bl	8008e54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a26:	2b40      	cmp	r3, #64	; 0x40
 8008a28:	bf0c      	ite	eq
 8008a2a:	2301      	moveq	r3, #1
 8008a2c:	2300      	movne	r3, #0
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	f003 0308 	and.w	r3, r3, #8
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d102      	bne.n	8008a44 <HAL_UART_IRQHandler+0x144>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d031      	beq.n	8008aa8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f965 	bl	8008d14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a54:	2b40      	cmp	r3, #64	; 0x40
 8008a56:	d123      	bne.n	8008aa0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	695a      	ldr	r2, [r3, #20]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d013      	beq.n	8008a98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a74:	4a21      	ldr	r2, [pc, #132]	; (8008afc <HAL_UART_IRQHandler+0x1fc>)
 8008a76:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fd f83b 	bl	8005af8 <HAL_DMA_Abort_IT>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d016      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a92:	4610      	mov	r0, r2
 8008a94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a96:	e00e      	b.n	8008ab6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f845 	bl	8008b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a9e:	e00a      	b.n	8008ab6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f841 	bl	8008b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa6:	e006      	b.n	8008ab6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f83d 	bl	8008b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008ab4:	e01d      	b.n	8008af2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ab6:	bf00      	nop
    return;
 8008ab8:	e01b      	b.n	8008af2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d008      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x1d6>
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f952 	bl	8008d78 <UART_Transmit_IT>
    return;
 8008ad4:	e00e      	b.n	8008af4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d009      	beq.n	8008af4 <HAL_UART_IRQHandler+0x1f4>
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d004      	beq.n	8008af4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f99a 	bl	8008e24 <UART_EndTransmit_IT>
    return;
 8008af0:	e000      	b.n	8008af4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8008af2:	bf00      	nop
  }
}
 8008af4:	3720      	adds	r7, #32
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	08008d51 	.word	0x08008d51

08008b00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b48:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d11e      	bne.n	8008b96 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b6c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	695a      	ldr	r2, [r3, #20]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 0201 	bic.w	r2, r2, #1
 8008b7c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	695a      	ldr	r2, [r3, #20]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b8c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f7fa f832 	bl	8002c00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b9c:	bf00      	nop
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f7ff ffae 	bl	8008b14 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	695b      	ldr	r3, [r3, #20]
 8008bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bdc:	2b80      	cmp	r3, #128	; 0x80
 8008bde:	bf0c      	ite	eq
 8008be0:	2301      	moveq	r3, #1
 8008be2:	2300      	movne	r3, #0
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b21      	cmp	r3, #33	; 0x21
 8008bf2:	d108      	bne.n	8008c06 <UART_DMAError+0x46>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d005      	beq.n	8008c06 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008c00:	68b8      	ldr	r0, [r7, #8]
 8008c02:	f000 f871 	bl	8008ce8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c10:	2b40      	cmp	r3, #64	; 0x40
 8008c12:	bf0c      	ite	eq
 8008c14:	2301      	moveq	r3, #1
 8008c16:	2300      	movne	r3, #0
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b22      	cmp	r3, #34	; 0x22
 8008c26:	d108      	bne.n	8008c3a <UART_DMAError+0x7a>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2200      	movs	r2, #0
 8008c32:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008c34:	68b8      	ldr	r0, [r7, #8]
 8008c36:	f000 f86d 	bl	8008d14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3e:	f043 0210 	orr.w	r2, r3, #16
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c46:	68b8      	ldr	r0, [r7, #8]
 8008c48:	f7ff ff6e 	bl	8008b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c4c:	bf00      	nop
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	4613      	mov	r3, r2
 8008c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c64:	e02c      	b.n	8008cc0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c6c:	d028      	beq.n	8008cc0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d007      	beq.n	8008c84 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c74:	f7fb fe7a 	bl	800496c <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d21d      	bcs.n	8008cc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68da      	ldr	r2, [r3, #12]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	695a      	ldr	r2, [r3, #20]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0201 	bic.w	r2, r2, #1
 8008ca2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e00f      	b.n	8008ce0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	4013      	ands	r3, r2
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	bf0c      	ite	eq
 8008cd0:	2301      	moveq	r3, #1
 8008cd2:	2300      	movne	r3, #0
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d0c3      	beq.n	8008c66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008cfe:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	695a      	ldr	r2, [r3, #20]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0201 	bic.w	r2, r2, #1
 8008d3a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f7ff fedc 	bl	8008b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b21      	cmp	r3, #33	; 0x21
 8008d8a:	d144      	bne.n	8008e16 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d94:	d11a      	bne.n	8008dcc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008daa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d105      	bne.n	8008dc0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	1c9a      	adds	r2, r3, #2
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	621a      	str	r2, [r3, #32]
 8008dbe:	e00e      	b.n	8008dde <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	1c5a      	adds	r2, r3, #1
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	621a      	str	r2, [r3, #32]
 8008dca:	e008      	b.n	8008dde <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	1c59      	adds	r1, r3, #1
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6211      	str	r1, [r2, #32]
 8008dd6:	781a      	ldrb	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	3b01      	subs	r3, #1
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	4619      	mov	r1, r3
 8008dec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10f      	bne.n	8008e12 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68da      	ldr	r2, [r3, #12]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	e000      	b.n	8008e18 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008e16:	2302      	movs	r3, #2
  }
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff fe5b 	bl	8008b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b22      	cmp	r3, #34	; 0x22
 8008e66:	d171      	bne.n	8008f4c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e70:	d123      	bne.n	8008eba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e76:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10e      	bne.n	8008e9e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e96:	1c9a      	adds	r2, r3, #2
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e9c:	e029      	b.n	8008ef2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8008eb8:	e01b      	b.n	8008ef2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10a      	bne.n	8008ed8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6858      	ldr	r0, [r3, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ecc:	1c59      	adds	r1, r3, #1
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	6291      	str	r1, [r2, #40]	; 0x28
 8008ed2:	b2c2      	uxtb	r2, r0
 8008ed4:	701a      	strb	r2, [r3, #0]
 8008ed6:	e00c      	b.n	8008ef2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	1c58      	adds	r0, r3, #1
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	6288      	str	r0, [r1, #40]	; 0x28
 8008eea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008eee:	b2d2      	uxtb	r2, r2
 8008ef0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	4619      	mov	r1, r3
 8008f00:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d120      	bne.n	8008f48 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f022 0220 	bic.w	r2, r2, #32
 8008f14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	695a      	ldr	r2, [r3, #20]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0201 	bic.w	r2, r2, #1
 8008f34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7f9 fe5e 	bl	8002c00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	e002      	b.n	8008f4e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e000      	b.n	8008f4e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008f4c:	2302      	movs	r3, #2
  }
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	b0bd      	sub	sp, #244	; 0xf4
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f74:	68d9      	ldr	r1, [r3, #12]
 8008f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	ea40 0301 	orr.w	r3, r0, r1
 8008f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	431a      	orrs	r2, r3
 8008f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008fb0:	f021 010c 	bic.w	r1, r1, #12
 8008fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008fbe:	430b      	orrs	r3, r1
 8008fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd2:	6999      	ldr	r1, [r3, #24]
 8008fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	ea40 0301 	orr.w	r3, r0, r1
 8008fde:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fea:	f040 81a5 	bne.w	8009338 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	4bcd      	ldr	r3, [pc, #820]	; (800932c <UART_SetConfig+0x3d4>)
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d006      	beq.n	8009008 <UART_SetConfig+0xb0>
 8008ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	4bcb      	ldr	r3, [pc, #812]	; (8009330 <UART_SetConfig+0x3d8>)
 8009002:	429a      	cmp	r2, r3
 8009004:	f040 80cb 	bne.w	800919e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009008:	f7fe f85e 	bl	80070c8 <HAL_RCC_GetPCLK2Freq>
 800900c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009010:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009014:	461c      	mov	r4, r3
 8009016:	f04f 0500 	mov.w	r5, #0
 800901a:	4622      	mov	r2, r4
 800901c:	462b      	mov	r3, r5
 800901e:	1891      	adds	r1, r2, r2
 8009020:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009024:	415b      	adcs	r3, r3
 8009026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800902a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800902e:	1912      	adds	r2, r2, r4
 8009030:	eb45 0303 	adc.w	r3, r5, r3
 8009034:	f04f 0000 	mov.w	r0, #0
 8009038:	f04f 0100 	mov.w	r1, #0
 800903c:	00d9      	lsls	r1, r3, #3
 800903e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009042:	00d0      	lsls	r0, r2, #3
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	1911      	adds	r1, r2, r4
 800904a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800904e:	416b      	adcs	r3, r5
 8009050:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	461a      	mov	r2, r3
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	1891      	adds	r1, r2, r2
 8009062:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009066:	415b      	adcs	r3, r3
 8009068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800906c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009070:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009074:	f7f7 fdc0 	bl	8000bf8 <__aeabi_uldivmod>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4bad      	ldr	r3, [pc, #692]	; (8009334 <UART_SetConfig+0x3dc>)
 800907e:	fba3 2302 	umull	r2, r3, r3, r2
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	011e      	lsls	r6, r3, #4
 8009086:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800908a:	461c      	mov	r4, r3
 800908c:	f04f 0500 	mov.w	r5, #0
 8009090:	4622      	mov	r2, r4
 8009092:	462b      	mov	r3, r5
 8009094:	1891      	adds	r1, r2, r2
 8009096:	67b9      	str	r1, [r7, #120]	; 0x78
 8009098:	415b      	adcs	r3, r3
 800909a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800909c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80090a0:	1912      	adds	r2, r2, r4
 80090a2:	eb45 0303 	adc.w	r3, r5, r3
 80090a6:	f04f 0000 	mov.w	r0, #0
 80090aa:	f04f 0100 	mov.w	r1, #0
 80090ae:	00d9      	lsls	r1, r3, #3
 80090b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090b4:	00d0      	lsls	r0, r2, #3
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	1911      	adds	r1, r2, r4
 80090bc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80090c0:	416b      	adcs	r3, r5
 80090c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	461a      	mov	r2, r3
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	1891      	adds	r1, r2, r2
 80090d4:	6739      	str	r1, [r7, #112]	; 0x70
 80090d6:	415b      	adcs	r3, r3
 80090d8:	677b      	str	r3, [r7, #116]	; 0x74
 80090da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80090de:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80090e2:	f7f7 fd89 	bl	8000bf8 <__aeabi_uldivmod>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4b92      	ldr	r3, [pc, #584]	; (8009334 <UART_SetConfig+0x3dc>)
 80090ec:	fba3 1302 	umull	r1, r3, r3, r2
 80090f0:	095b      	lsrs	r3, r3, #5
 80090f2:	2164      	movs	r1, #100	; 0x64
 80090f4:	fb01 f303 	mul.w	r3, r1, r3
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	3332      	adds	r3, #50	; 0x32
 80090fe:	4a8d      	ldr	r2, [pc, #564]	; (8009334 <UART_SetConfig+0x3dc>)
 8009100:	fba2 2303 	umull	r2, r3, r2, r3
 8009104:	095b      	lsrs	r3, r3, #5
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800910c:	441e      	add	r6, r3
 800910e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009112:	4618      	mov	r0, r3
 8009114:	f04f 0100 	mov.w	r1, #0
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	1894      	adds	r4, r2, r2
 800911e:	66bc      	str	r4, [r7, #104]	; 0x68
 8009120:	415b      	adcs	r3, r3
 8009122:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009124:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009128:	1812      	adds	r2, r2, r0
 800912a:	eb41 0303 	adc.w	r3, r1, r3
 800912e:	f04f 0400 	mov.w	r4, #0
 8009132:	f04f 0500 	mov.w	r5, #0
 8009136:	00dd      	lsls	r5, r3, #3
 8009138:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800913c:	00d4      	lsls	r4, r2, #3
 800913e:	4622      	mov	r2, r4
 8009140:	462b      	mov	r3, r5
 8009142:	1814      	adds	r4, r2, r0
 8009144:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009148:	414b      	adcs	r3, r1
 800914a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	461a      	mov	r2, r3
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	1891      	adds	r1, r2, r2
 800915c:	6639      	str	r1, [r7, #96]	; 0x60
 800915e:	415b      	adcs	r3, r3
 8009160:	667b      	str	r3, [r7, #100]	; 0x64
 8009162:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009166:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800916a:	f7f7 fd45 	bl	8000bf8 <__aeabi_uldivmod>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4b70      	ldr	r3, [pc, #448]	; (8009334 <UART_SetConfig+0x3dc>)
 8009174:	fba3 1302 	umull	r1, r3, r3, r2
 8009178:	095b      	lsrs	r3, r3, #5
 800917a:	2164      	movs	r1, #100	; 0x64
 800917c:	fb01 f303 	mul.w	r3, r1, r3
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	3332      	adds	r3, #50	; 0x32
 8009186:	4a6b      	ldr	r2, [pc, #428]	; (8009334 <UART_SetConfig+0x3dc>)
 8009188:	fba2 2303 	umull	r2, r3, r2, r3
 800918c:	095b      	lsrs	r3, r3, #5
 800918e:	f003 0207 	and.w	r2, r3, #7
 8009192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4432      	add	r2, r6
 800919a:	609a      	str	r2, [r3, #8]
 800919c:	e26d      	b.n	800967a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800919e:	f7fd ff7f 	bl	80070a0 <HAL_RCC_GetPCLK1Freq>
 80091a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091aa:	461c      	mov	r4, r3
 80091ac:	f04f 0500 	mov.w	r5, #0
 80091b0:	4622      	mov	r2, r4
 80091b2:	462b      	mov	r3, r5
 80091b4:	1891      	adds	r1, r2, r2
 80091b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80091b8:	415b      	adcs	r3, r3
 80091ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091c0:	1912      	adds	r2, r2, r4
 80091c2:	eb45 0303 	adc.w	r3, r5, r3
 80091c6:	f04f 0000 	mov.w	r0, #0
 80091ca:	f04f 0100 	mov.w	r1, #0
 80091ce:	00d9      	lsls	r1, r3, #3
 80091d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091d4:	00d0      	lsls	r0, r2, #3
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	1911      	adds	r1, r2, r4
 80091dc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80091e0:	416b      	adcs	r3, r5
 80091e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	461a      	mov	r2, r3
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	1891      	adds	r1, r2, r2
 80091f4:	6539      	str	r1, [r7, #80]	; 0x50
 80091f6:	415b      	adcs	r3, r3
 80091f8:	657b      	str	r3, [r7, #84]	; 0x54
 80091fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80091fe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009202:	f7f7 fcf9 	bl	8000bf8 <__aeabi_uldivmod>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4b4a      	ldr	r3, [pc, #296]	; (8009334 <UART_SetConfig+0x3dc>)
 800920c:	fba3 2302 	umull	r2, r3, r3, r2
 8009210:	095b      	lsrs	r3, r3, #5
 8009212:	011e      	lsls	r6, r3, #4
 8009214:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009218:	461c      	mov	r4, r3
 800921a:	f04f 0500 	mov.w	r5, #0
 800921e:	4622      	mov	r2, r4
 8009220:	462b      	mov	r3, r5
 8009222:	1891      	adds	r1, r2, r2
 8009224:	64b9      	str	r1, [r7, #72]	; 0x48
 8009226:	415b      	adcs	r3, r3
 8009228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800922a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800922e:	1912      	adds	r2, r2, r4
 8009230:	eb45 0303 	adc.w	r3, r5, r3
 8009234:	f04f 0000 	mov.w	r0, #0
 8009238:	f04f 0100 	mov.w	r1, #0
 800923c:	00d9      	lsls	r1, r3, #3
 800923e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009242:	00d0      	lsls	r0, r2, #3
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	1911      	adds	r1, r2, r4
 800924a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800924e:	416b      	adcs	r3, r5
 8009250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	461a      	mov	r2, r3
 800925c:	f04f 0300 	mov.w	r3, #0
 8009260:	1891      	adds	r1, r2, r2
 8009262:	6439      	str	r1, [r7, #64]	; 0x40
 8009264:	415b      	adcs	r3, r3
 8009266:	647b      	str	r3, [r7, #68]	; 0x44
 8009268:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800926c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009270:	f7f7 fcc2 	bl	8000bf8 <__aeabi_uldivmod>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4b2e      	ldr	r3, [pc, #184]	; (8009334 <UART_SetConfig+0x3dc>)
 800927a:	fba3 1302 	umull	r1, r3, r3, r2
 800927e:	095b      	lsrs	r3, r3, #5
 8009280:	2164      	movs	r1, #100	; 0x64
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	3332      	adds	r3, #50	; 0x32
 800928c:	4a29      	ldr	r2, [pc, #164]	; (8009334 <UART_SetConfig+0x3dc>)
 800928e:	fba2 2303 	umull	r2, r3, r2, r3
 8009292:	095b      	lsrs	r3, r3, #5
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800929a:	441e      	add	r6, r3
 800929c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092a0:	4618      	mov	r0, r3
 80092a2:	f04f 0100 	mov.w	r1, #0
 80092a6:	4602      	mov	r2, r0
 80092a8:	460b      	mov	r3, r1
 80092aa:	1894      	adds	r4, r2, r2
 80092ac:	63bc      	str	r4, [r7, #56]	; 0x38
 80092ae:	415b      	adcs	r3, r3
 80092b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092b6:	1812      	adds	r2, r2, r0
 80092b8:	eb41 0303 	adc.w	r3, r1, r3
 80092bc:	f04f 0400 	mov.w	r4, #0
 80092c0:	f04f 0500 	mov.w	r5, #0
 80092c4:	00dd      	lsls	r5, r3, #3
 80092c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80092ca:	00d4      	lsls	r4, r2, #3
 80092cc:	4622      	mov	r2, r4
 80092ce:	462b      	mov	r3, r5
 80092d0:	1814      	adds	r4, r2, r0
 80092d2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80092d6:	414b      	adcs	r3, r1
 80092d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f04f 0300 	mov.w	r3, #0
 80092e8:	1891      	adds	r1, r2, r2
 80092ea:	6339      	str	r1, [r7, #48]	; 0x30
 80092ec:	415b      	adcs	r3, r3
 80092ee:	637b      	str	r3, [r7, #52]	; 0x34
 80092f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80092f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80092f8:	f7f7 fc7e 	bl	8000bf8 <__aeabi_uldivmod>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4b0c      	ldr	r3, [pc, #48]	; (8009334 <UART_SetConfig+0x3dc>)
 8009302:	fba3 1302 	umull	r1, r3, r3, r2
 8009306:	095b      	lsrs	r3, r3, #5
 8009308:	2164      	movs	r1, #100	; 0x64
 800930a:	fb01 f303 	mul.w	r3, r1, r3
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	3332      	adds	r3, #50	; 0x32
 8009314:	4a07      	ldr	r2, [pc, #28]	; (8009334 <UART_SetConfig+0x3dc>)
 8009316:	fba2 2303 	umull	r2, r3, r2, r3
 800931a:	095b      	lsrs	r3, r3, #5
 800931c:	f003 0207 	and.w	r2, r3, #7
 8009320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4432      	add	r2, r6
 8009328:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800932a:	e1a6      	b.n	800967a <UART_SetConfig+0x722>
 800932c:	40011000 	.word	0x40011000
 8009330:	40011400 	.word	0x40011400
 8009334:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	4bd1      	ldr	r3, [pc, #836]	; (8009684 <UART_SetConfig+0x72c>)
 8009340:	429a      	cmp	r2, r3
 8009342:	d006      	beq.n	8009352 <UART_SetConfig+0x3fa>
 8009344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4bcf      	ldr	r3, [pc, #828]	; (8009688 <UART_SetConfig+0x730>)
 800934c:	429a      	cmp	r2, r3
 800934e:	f040 80ca 	bne.w	80094e6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009352:	f7fd feb9 	bl	80070c8 <HAL_RCC_GetPCLK2Freq>
 8009356:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800935a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800935e:	461c      	mov	r4, r3
 8009360:	f04f 0500 	mov.w	r5, #0
 8009364:	4622      	mov	r2, r4
 8009366:	462b      	mov	r3, r5
 8009368:	1891      	adds	r1, r2, r2
 800936a:	62b9      	str	r1, [r7, #40]	; 0x28
 800936c:	415b      	adcs	r3, r3
 800936e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009370:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009374:	1912      	adds	r2, r2, r4
 8009376:	eb45 0303 	adc.w	r3, r5, r3
 800937a:	f04f 0000 	mov.w	r0, #0
 800937e:	f04f 0100 	mov.w	r1, #0
 8009382:	00d9      	lsls	r1, r3, #3
 8009384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009388:	00d0      	lsls	r0, r2, #3
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	eb12 0a04 	adds.w	sl, r2, r4
 8009392:	eb43 0b05 	adc.w	fp, r3, r5
 8009396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	4618      	mov	r0, r3
 800939e:	f04f 0100 	mov.w	r1, #0
 80093a2:	f04f 0200 	mov.w	r2, #0
 80093a6:	f04f 0300 	mov.w	r3, #0
 80093aa:	008b      	lsls	r3, r1, #2
 80093ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093b0:	0082      	lsls	r2, r0, #2
 80093b2:	4650      	mov	r0, sl
 80093b4:	4659      	mov	r1, fp
 80093b6:	f7f7 fc1f 	bl	8000bf8 <__aeabi_uldivmod>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	4bb3      	ldr	r3, [pc, #716]	; (800968c <UART_SetConfig+0x734>)
 80093c0:	fba3 2302 	umull	r2, r3, r3, r2
 80093c4:	095b      	lsrs	r3, r3, #5
 80093c6:	011e      	lsls	r6, r3, #4
 80093c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093cc:	4618      	mov	r0, r3
 80093ce:	f04f 0100 	mov.w	r1, #0
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	1894      	adds	r4, r2, r2
 80093d8:	623c      	str	r4, [r7, #32]
 80093da:	415b      	adcs	r3, r3
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
 80093de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093e2:	1812      	adds	r2, r2, r0
 80093e4:	eb41 0303 	adc.w	r3, r1, r3
 80093e8:	f04f 0400 	mov.w	r4, #0
 80093ec:	f04f 0500 	mov.w	r5, #0
 80093f0:	00dd      	lsls	r5, r3, #3
 80093f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80093f6:	00d4      	lsls	r4, r2, #3
 80093f8:	4622      	mov	r2, r4
 80093fa:	462b      	mov	r3, r5
 80093fc:	1814      	adds	r4, r2, r0
 80093fe:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009402:	414b      	adcs	r3, r1
 8009404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	4618      	mov	r0, r3
 8009410:	f04f 0100 	mov.w	r1, #0
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	f04f 0300 	mov.w	r3, #0
 800941c:	008b      	lsls	r3, r1, #2
 800941e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009422:	0082      	lsls	r2, r0, #2
 8009424:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009428:	f7f7 fbe6 	bl	8000bf8 <__aeabi_uldivmod>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4b96      	ldr	r3, [pc, #600]	; (800968c <UART_SetConfig+0x734>)
 8009432:	fba3 1302 	umull	r1, r3, r3, r2
 8009436:	095b      	lsrs	r3, r3, #5
 8009438:	2164      	movs	r1, #100	; 0x64
 800943a:	fb01 f303 	mul.w	r3, r1, r3
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	011b      	lsls	r3, r3, #4
 8009442:	3332      	adds	r3, #50	; 0x32
 8009444:	4a91      	ldr	r2, [pc, #580]	; (800968c <UART_SetConfig+0x734>)
 8009446:	fba2 2303 	umull	r2, r3, r2, r3
 800944a:	095b      	lsrs	r3, r3, #5
 800944c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009450:	441e      	add	r6, r3
 8009452:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009456:	4618      	mov	r0, r3
 8009458:	f04f 0100 	mov.w	r1, #0
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	1894      	adds	r4, r2, r2
 8009462:	61bc      	str	r4, [r7, #24]
 8009464:	415b      	adcs	r3, r3
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800946c:	1812      	adds	r2, r2, r0
 800946e:	eb41 0303 	adc.w	r3, r1, r3
 8009472:	f04f 0400 	mov.w	r4, #0
 8009476:	f04f 0500 	mov.w	r5, #0
 800947a:	00dd      	lsls	r5, r3, #3
 800947c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009480:	00d4      	lsls	r4, r2, #3
 8009482:	4622      	mov	r2, r4
 8009484:	462b      	mov	r3, r5
 8009486:	1814      	adds	r4, r2, r0
 8009488:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800948c:	414b      	adcs	r3, r1
 800948e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	4618      	mov	r0, r3
 800949a:	f04f 0100 	mov.w	r1, #0
 800949e:	f04f 0200 	mov.w	r2, #0
 80094a2:	f04f 0300 	mov.w	r3, #0
 80094a6:	008b      	lsls	r3, r1, #2
 80094a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094ac:	0082      	lsls	r2, r0, #2
 80094ae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80094b2:	f7f7 fba1 	bl	8000bf8 <__aeabi_uldivmod>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4b74      	ldr	r3, [pc, #464]	; (800968c <UART_SetConfig+0x734>)
 80094bc:	fba3 1302 	umull	r1, r3, r3, r2
 80094c0:	095b      	lsrs	r3, r3, #5
 80094c2:	2164      	movs	r1, #100	; 0x64
 80094c4:	fb01 f303 	mul.w	r3, r1, r3
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	011b      	lsls	r3, r3, #4
 80094cc:	3332      	adds	r3, #50	; 0x32
 80094ce:	4a6f      	ldr	r2, [pc, #444]	; (800968c <UART_SetConfig+0x734>)
 80094d0:	fba2 2303 	umull	r2, r3, r2, r3
 80094d4:	095b      	lsrs	r3, r3, #5
 80094d6:	f003 020f 	and.w	r2, r3, #15
 80094da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4432      	add	r2, r6
 80094e2:	609a      	str	r2, [r3, #8]
 80094e4:	e0c9      	b.n	800967a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80094e6:	f7fd fddb 	bl	80070a0 <HAL_RCC_GetPCLK1Freq>
 80094ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094f2:	461c      	mov	r4, r3
 80094f4:	f04f 0500 	mov.w	r5, #0
 80094f8:	4622      	mov	r2, r4
 80094fa:	462b      	mov	r3, r5
 80094fc:	1891      	adds	r1, r2, r2
 80094fe:	6139      	str	r1, [r7, #16]
 8009500:	415b      	adcs	r3, r3
 8009502:	617b      	str	r3, [r7, #20]
 8009504:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009508:	1912      	adds	r2, r2, r4
 800950a:	eb45 0303 	adc.w	r3, r5, r3
 800950e:	f04f 0000 	mov.w	r0, #0
 8009512:	f04f 0100 	mov.w	r1, #0
 8009516:	00d9      	lsls	r1, r3, #3
 8009518:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800951c:	00d0      	lsls	r0, r2, #3
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	eb12 0804 	adds.w	r8, r2, r4
 8009526:	eb43 0905 	adc.w	r9, r3, r5
 800952a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	4618      	mov	r0, r3
 8009532:	f04f 0100 	mov.w	r1, #0
 8009536:	f04f 0200 	mov.w	r2, #0
 800953a:	f04f 0300 	mov.w	r3, #0
 800953e:	008b      	lsls	r3, r1, #2
 8009540:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009544:	0082      	lsls	r2, r0, #2
 8009546:	4640      	mov	r0, r8
 8009548:	4649      	mov	r1, r9
 800954a:	f7f7 fb55 	bl	8000bf8 <__aeabi_uldivmod>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4b4e      	ldr	r3, [pc, #312]	; (800968c <UART_SetConfig+0x734>)
 8009554:	fba3 2302 	umull	r2, r3, r3, r2
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	011e      	lsls	r6, r3, #4
 800955c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009560:	4618      	mov	r0, r3
 8009562:	f04f 0100 	mov.w	r1, #0
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	1894      	adds	r4, r2, r2
 800956c:	60bc      	str	r4, [r7, #8]
 800956e:	415b      	adcs	r3, r3
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009576:	1812      	adds	r2, r2, r0
 8009578:	eb41 0303 	adc.w	r3, r1, r3
 800957c:	f04f 0400 	mov.w	r4, #0
 8009580:	f04f 0500 	mov.w	r5, #0
 8009584:	00dd      	lsls	r5, r3, #3
 8009586:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800958a:	00d4      	lsls	r4, r2, #3
 800958c:	4622      	mov	r2, r4
 800958e:	462b      	mov	r3, r5
 8009590:	1814      	adds	r4, r2, r0
 8009592:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009596:	414b      	adcs	r3, r1
 8009598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800959c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f04f 0100 	mov.w	r1, #0
 80095a8:	f04f 0200 	mov.w	r2, #0
 80095ac:	f04f 0300 	mov.w	r3, #0
 80095b0:	008b      	lsls	r3, r1, #2
 80095b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095b6:	0082      	lsls	r2, r0, #2
 80095b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80095bc:	f7f7 fb1c 	bl	8000bf8 <__aeabi_uldivmod>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4b31      	ldr	r3, [pc, #196]	; (800968c <UART_SetConfig+0x734>)
 80095c6:	fba3 1302 	umull	r1, r3, r3, r2
 80095ca:	095b      	lsrs	r3, r3, #5
 80095cc:	2164      	movs	r1, #100	; 0x64
 80095ce:	fb01 f303 	mul.w	r3, r1, r3
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	011b      	lsls	r3, r3, #4
 80095d6:	3332      	adds	r3, #50	; 0x32
 80095d8:	4a2c      	ldr	r2, [pc, #176]	; (800968c <UART_SetConfig+0x734>)
 80095da:	fba2 2303 	umull	r2, r3, r2, r3
 80095de:	095b      	lsrs	r3, r3, #5
 80095e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095e4:	441e      	add	r6, r3
 80095e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095ea:	4618      	mov	r0, r3
 80095ec:	f04f 0100 	mov.w	r1, #0
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	1894      	adds	r4, r2, r2
 80095f6:	603c      	str	r4, [r7, #0]
 80095f8:	415b      	adcs	r3, r3
 80095fa:	607b      	str	r3, [r7, #4]
 80095fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009600:	1812      	adds	r2, r2, r0
 8009602:	eb41 0303 	adc.w	r3, r1, r3
 8009606:	f04f 0400 	mov.w	r4, #0
 800960a:	f04f 0500 	mov.w	r5, #0
 800960e:	00dd      	lsls	r5, r3, #3
 8009610:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009614:	00d4      	lsls	r4, r2, #3
 8009616:	4622      	mov	r2, r4
 8009618:	462b      	mov	r3, r5
 800961a:	1814      	adds	r4, r2, r0
 800961c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009620:	414b      	adcs	r3, r1
 8009622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	4618      	mov	r0, r3
 800962e:	f04f 0100 	mov.w	r1, #0
 8009632:	f04f 0200 	mov.w	r2, #0
 8009636:	f04f 0300 	mov.w	r3, #0
 800963a:	008b      	lsls	r3, r1, #2
 800963c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009640:	0082      	lsls	r2, r0, #2
 8009642:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009646:	f7f7 fad7 	bl	8000bf8 <__aeabi_uldivmod>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4b0f      	ldr	r3, [pc, #60]	; (800968c <UART_SetConfig+0x734>)
 8009650:	fba3 1302 	umull	r1, r3, r3, r2
 8009654:	095b      	lsrs	r3, r3, #5
 8009656:	2164      	movs	r1, #100	; 0x64
 8009658:	fb01 f303 	mul.w	r3, r1, r3
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	3332      	adds	r3, #50	; 0x32
 8009662:	4a0a      	ldr	r2, [pc, #40]	; (800968c <UART_SetConfig+0x734>)
 8009664:	fba2 2303 	umull	r2, r3, r2, r3
 8009668:	095b      	lsrs	r3, r3, #5
 800966a:	f003 020f 	and.w	r2, r3, #15
 800966e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4432      	add	r2, r6
 8009676:	609a      	str	r2, [r3, #8]
}
 8009678:	e7ff      	b.n	800967a <UART_SetConfig+0x722>
 800967a:	bf00      	nop
 800967c:	37f4      	adds	r7, #244	; 0xf4
 800967e:	46bd      	mov	sp, r7
 8009680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009684:	40011000 	.word	0x40011000
 8009688:	40011400 	.word	0x40011400
 800968c:	51eb851f 	.word	0x51eb851f

08009690 <__errno>:
 8009690:	4b01      	ldr	r3, [pc, #4]	; (8009698 <__errno+0x8>)
 8009692:	6818      	ldr	r0, [r3, #0]
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	20000138 	.word	0x20000138

0800969c <__libc_init_array>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	4d0d      	ldr	r5, [pc, #52]	; (80096d4 <__libc_init_array+0x38>)
 80096a0:	4c0d      	ldr	r4, [pc, #52]	; (80096d8 <__libc_init_array+0x3c>)
 80096a2:	1b64      	subs	r4, r4, r5
 80096a4:	10a4      	asrs	r4, r4, #2
 80096a6:	2600      	movs	r6, #0
 80096a8:	42a6      	cmp	r6, r4
 80096aa:	d109      	bne.n	80096c0 <__libc_init_array+0x24>
 80096ac:	4d0b      	ldr	r5, [pc, #44]	; (80096dc <__libc_init_array+0x40>)
 80096ae:	4c0c      	ldr	r4, [pc, #48]	; (80096e0 <__libc_init_array+0x44>)
 80096b0:	f002 fd10 	bl	800c0d4 <_init>
 80096b4:	1b64      	subs	r4, r4, r5
 80096b6:	10a4      	asrs	r4, r4, #2
 80096b8:	2600      	movs	r6, #0
 80096ba:	42a6      	cmp	r6, r4
 80096bc:	d105      	bne.n	80096ca <__libc_init_array+0x2e>
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c4:	4798      	blx	r3
 80096c6:	3601      	adds	r6, #1
 80096c8:	e7ee      	b.n	80096a8 <__libc_init_array+0xc>
 80096ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ce:	4798      	blx	r3
 80096d0:	3601      	adds	r6, #1
 80096d2:	e7f2      	b.n	80096ba <__libc_init_array+0x1e>
 80096d4:	0800c3c0 	.word	0x0800c3c0
 80096d8:	0800c3c0 	.word	0x0800c3c0
 80096dc:	0800c3c0 	.word	0x0800c3c0
 80096e0:	0800c3c4 	.word	0x0800c3c4

080096e4 <memset>:
 80096e4:	4402      	add	r2, r0
 80096e6:	4603      	mov	r3, r0
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d100      	bne.n	80096ee <memset+0xa>
 80096ec:	4770      	bx	lr
 80096ee:	f803 1b01 	strb.w	r1, [r3], #1
 80096f2:	e7f9      	b.n	80096e8 <memset+0x4>
 80096f4:	0000      	movs	r0, r0
	...

080096f8 <atan>:
 80096f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	ec55 4b10 	vmov	r4, r5, d0
 8009700:	4bc3      	ldr	r3, [pc, #780]	; (8009a10 <atan+0x318>)
 8009702:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009706:	429e      	cmp	r6, r3
 8009708:	46ab      	mov	fp, r5
 800970a:	dd18      	ble.n	800973e <atan+0x46>
 800970c:	4bc1      	ldr	r3, [pc, #772]	; (8009a14 <atan+0x31c>)
 800970e:	429e      	cmp	r6, r3
 8009710:	dc01      	bgt.n	8009716 <atan+0x1e>
 8009712:	d109      	bne.n	8009728 <atan+0x30>
 8009714:	b144      	cbz	r4, 8009728 <atan+0x30>
 8009716:	4622      	mov	r2, r4
 8009718:	462b      	mov	r3, r5
 800971a:	4620      	mov	r0, r4
 800971c:	4629      	mov	r1, r5
 800971e:	f7f6 fd6d 	bl	80001fc <__adddf3>
 8009722:	4604      	mov	r4, r0
 8009724:	460d      	mov	r5, r1
 8009726:	e006      	b.n	8009736 <atan+0x3e>
 8009728:	f1bb 0f00 	cmp.w	fp, #0
 800972c:	f300 8131 	bgt.w	8009992 <atan+0x29a>
 8009730:	a59b      	add	r5, pc, #620	; (adr r5, 80099a0 <atan+0x2a8>)
 8009732:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009736:	ec45 4b10 	vmov	d0, r4, r5
 800973a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973e:	4bb6      	ldr	r3, [pc, #728]	; (8009a18 <atan+0x320>)
 8009740:	429e      	cmp	r6, r3
 8009742:	dc14      	bgt.n	800976e <atan+0x76>
 8009744:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009748:	429e      	cmp	r6, r3
 800974a:	dc0d      	bgt.n	8009768 <atan+0x70>
 800974c:	a396      	add	r3, pc, #600	; (adr r3, 80099a8 <atan+0x2b0>)
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	ee10 0a10 	vmov	r0, s0
 8009756:	4629      	mov	r1, r5
 8009758:	f7f6 fd50 	bl	80001fc <__adddf3>
 800975c:	4baf      	ldr	r3, [pc, #700]	; (8009a1c <atan+0x324>)
 800975e:	2200      	movs	r2, #0
 8009760:	f7f7 f992 	bl	8000a88 <__aeabi_dcmpgt>
 8009764:	2800      	cmp	r0, #0
 8009766:	d1e6      	bne.n	8009736 <atan+0x3e>
 8009768:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800976c:	e02b      	b.n	80097c6 <atan+0xce>
 800976e:	f000 f9b3 	bl	8009ad8 <fabs>
 8009772:	4bab      	ldr	r3, [pc, #684]	; (8009a20 <atan+0x328>)
 8009774:	429e      	cmp	r6, r3
 8009776:	ec55 4b10 	vmov	r4, r5, d0
 800977a:	f300 80bf 	bgt.w	80098fc <atan+0x204>
 800977e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009782:	429e      	cmp	r6, r3
 8009784:	f300 80a0 	bgt.w	80098c8 <atan+0x1d0>
 8009788:	ee10 2a10 	vmov	r2, s0
 800978c:	ee10 0a10 	vmov	r0, s0
 8009790:	462b      	mov	r3, r5
 8009792:	4629      	mov	r1, r5
 8009794:	f7f6 fd32 	bl	80001fc <__adddf3>
 8009798:	4ba0      	ldr	r3, [pc, #640]	; (8009a1c <atan+0x324>)
 800979a:	2200      	movs	r2, #0
 800979c:	f7f6 fd2c 	bl	80001f8 <__aeabi_dsub>
 80097a0:	2200      	movs	r2, #0
 80097a2:	4606      	mov	r6, r0
 80097a4:	460f      	mov	r7, r1
 80097a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097aa:	4620      	mov	r0, r4
 80097ac:	4629      	mov	r1, r5
 80097ae:	f7f6 fd25 	bl	80001fc <__adddf3>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4630      	mov	r0, r6
 80097b8:	4639      	mov	r1, r7
 80097ba:	f7f6 ffff 	bl	80007bc <__aeabi_ddiv>
 80097be:	f04f 0a00 	mov.w	sl, #0
 80097c2:	4604      	mov	r4, r0
 80097c4:	460d      	mov	r5, r1
 80097c6:	4622      	mov	r2, r4
 80097c8:	462b      	mov	r3, r5
 80097ca:	4620      	mov	r0, r4
 80097cc:	4629      	mov	r1, r5
 80097ce:	f7f6 fecb 	bl	8000568 <__aeabi_dmul>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4680      	mov	r8, r0
 80097d8:	4689      	mov	r9, r1
 80097da:	f7f6 fec5 	bl	8000568 <__aeabi_dmul>
 80097de:	a374      	add	r3, pc, #464	; (adr r3, 80099b0 <atan+0x2b8>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	4606      	mov	r6, r0
 80097e6:	460f      	mov	r7, r1
 80097e8:	f7f6 febe 	bl	8000568 <__aeabi_dmul>
 80097ec:	a372      	add	r3, pc, #456	; (adr r3, 80099b8 <atan+0x2c0>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f7f6 fd03 	bl	80001fc <__adddf3>
 80097f6:	4632      	mov	r2, r6
 80097f8:	463b      	mov	r3, r7
 80097fa:	f7f6 feb5 	bl	8000568 <__aeabi_dmul>
 80097fe:	a370      	add	r3, pc, #448	; (adr r3, 80099c0 <atan+0x2c8>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f6 fcfa 	bl	80001fc <__adddf3>
 8009808:	4632      	mov	r2, r6
 800980a:	463b      	mov	r3, r7
 800980c:	f7f6 feac 	bl	8000568 <__aeabi_dmul>
 8009810:	a36d      	add	r3, pc, #436	; (adr r3, 80099c8 <atan+0x2d0>)
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f7f6 fcf1 	bl	80001fc <__adddf3>
 800981a:	4632      	mov	r2, r6
 800981c:	463b      	mov	r3, r7
 800981e:	f7f6 fea3 	bl	8000568 <__aeabi_dmul>
 8009822:	a36b      	add	r3, pc, #428	; (adr r3, 80099d0 <atan+0x2d8>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f7f6 fce8 	bl	80001fc <__adddf3>
 800982c:	4632      	mov	r2, r6
 800982e:	463b      	mov	r3, r7
 8009830:	f7f6 fe9a 	bl	8000568 <__aeabi_dmul>
 8009834:	a368      	add	r3, pc, #416	; (adr r3, 80099d8 <atan+0x2e0>)
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	f7f6 fcdf 	bl	80001fc <__adddf3>
 800983e:	4642      	mov	r2, r8
 8009840:	464b      	mov	r3, r9
 8009842:	f7f6 fe91 	bl	8000568 <__aeabi_dmul>
 8009846:	a366      	add	r3, pc, #408	; (adr r3, 80099e0 <atan+0x2e8>)
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	4680      	mov	r8, r0
 800984e:	4689      	mov	r9, r1
 8009850:	4630      	mov	r0, r6
 8009852:	4639      	mov	r1, r7
 8009854:	f7f6 fe88 	bl	8000568 <__aeabi_dmul>
 8009858:	a363      	add	r3, pc, #396	; (adr r3, 80099e8 <atan+0x2f0>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fccb 	bl	80001f8 <__aeabi_dsub>
 8009862:	4632      	mov	r2, r6
 8009864:	463b      	mov	r3, r7
 8009866:	f7f6 fe7f 	bl	8000568 <__aeabi_dmul>
 800986a:	a361      	add	r3, pc, #388	; (adr r3, 80099f0 <atan+0x2f8>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7f6 fcc2 	bl	80001f8 <__aeabi_dsub>
 8009874:	4632      	mov	r2, r6
 8009876:	463b      	mov	r3, r7
 8009878:	f7f6 fe76 	bl	8000568 <__aeabi_dmul>
 800987c:	a35e      	add	r3, pc, #376	; (adr r3, 80099f8 <atan+0x300>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	f7f6 fcb9 	bl	80001f8 <__aeabi_dsub>
 8009886:	4632      	mov	r2, r6
 8009888:	463b      	mov	r3, r7
 800988a:	f7f6 fe6d 	bl	8000568 <__aeabi_dmul>
 800988e:	a35c      	add	r3, pc, #368	; (adr r3, 8009a00 <atan+0x308>)
 8009890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009894:	f7f6 fcb0 	bl	80001f8 <__aeabi_dsub>
 8009898:	4632      	mov	r2, r6
 800989a:	463b      	mov	r3, r7
 800989c:	f7f6 fe64 	bl	8000568 <__aeabi_dmul>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	4640      	mov	r0, r8
 80098a6:	4649      	mov	r1, r9
 80098a8:	f7f6 fca8 	bl	80001fc <__adddf3>
 80098ac:	4622      	mov	r2, r4
 80098ae:	462b      	mov	r3, r5
 80098b0:	f7f6 fe5a 	bl	8000568 <__aeabi_dmul>
 80098b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	d14b      	bne.n	8009956 <atan+0x25e>
 80098be:	4620      	mov	r0, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	f7f6 fc99 	bl	80001f8 <__aeabi_dsub>
 80098c6:	e72c      	b.n	8009722 <atan+0x2a>
 80098c8:	ee10 0a10 	vmov	r0, s0
 80098cc:	4b53      	ldr	r3, [pc, #332]	; (8009a1c <atan+0x324>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	4629      	mov	r1, r5
 80098d2:	f7f6 fc91 	bl	80001f8 <__aeabi_dsub>
 80098d6:	4b51      	ldr	r3, [pc, #324]	; (8009a1c <atan+0x324>)
 80098d8:	4606      	mov	r6, r0
 80098da:	460f      	mov	r7, r1
 80098dc:	2200      	movs	r2, #0
 80098de:	4620      	mov	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	f7f6 fc8b 	bl	80001fc <__adddf3>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f6 ff65 	bl	80007bc <__aeabi_ddiv>
 80098f2:	f04f 0a01 	mov.w	sl, #1
 80098f6:	4604      	mov	r4, r0
 80098f8:	460d      	mov	r5, r1
 80098fa:	e764      	b.n	80097c6 <atan+0xce>
 80098fc:	4b49      	ldr	r3, [pc, #292]	; (8009a24 <atan+0x32c>)
 80098fe:	429e      	cmp	r6, r3
 8009900:	da1d      	bge.n	800993e <atan+0x246>
 8009902:	ee10 0a10 	vmov	r0, s0
 8009906:	4b48      	ldr	r3, [pc, #288]	; (8009a28 <atan+0x330>)
 8009908:	2200      	movs	r2, #0
 800990a:	4629      	mov	r1, r5
 800990c:	f7f6 fc74 	bl	80001f8 <__aeabi_dsub>
 8009910:	4b45      	ldr	r3, [pc, #276]	; (8009a28 <atan+0x330>)
 8009912:	4606      	mov	r6, r0
 8009914:	460f      	mov	r7, r1
 8009916:	2200      	movs	r2, #0
 8009918:	4620      	mov	r0, r4
 800991a:	4629      	mov	r1, r5
 800991c:	f7f6 fe24 	bl	8000568 <__aeabi_dmul>
 8009920:	4b3e      	ldr	r3, [pc, #248]	; (8009a1c <atan+0x324>)
 8009922:	2200      	movs	r2, #0
 8009924:	f7f6 fc6a 	bl	80001fc <__adddf3>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4630      	mov	r0, r6
 800992e:	4639      	mov	r1, r7
 8009930:	f7f6 ff44 	bl	80007bc <__aeabi_ddiv>
 8009934:	f04f 0a02 	mov.w	sl, #2
 8009938:	4604      	mov	r4, r0
 800993a:	460d      	mov	r5, r1
 800993c:	e743      	b.n	80097c6 <atan+0xce>
 800993e:	462b      	mov	r3, r5
 8009940:	ee10 2a10 	vmov	r2, s0
 8009944:	4939      	ldr	r1, [pc, #228]	; (8009a2c <atan+0x334>)
 8009946:	2000      	movs	r0, #0
 8009948:	f7f6 ff38 	bl	80007bc <__aeabi_ddiv>
 800994c:	f04f 0a03 	mov.w	sl, #3
 8009950:	4604      	mov	r4, r0
 8009952:	460d      	mov	r5, r1
 8009954:	e737      	b.n	80097c6 <atan+0xce>
 8009956:	4b36      	ldr	r3, [pc, #216]	; (8009a30 <atan+0x338>)
 8009958:	4e36      	ldr	r6, [pc, #216]	; (8009a34 <atan+0x33c>)
 800995a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800995e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009962:	e9da 2300 	ldrd	r2, r3, [sl]
 8009966:	f7f6 fc47 	bl	80001f8 <__aeabi_dsub>
 800996a:	4622      	mov	r2, r4
 800996c:	462b      	mov	r3, r5
 800996e:	f7f6 fc43 	bl	80001f8 <__aeabi_dsub>
 8009972:	4602      	mov	r2, r0
 8009974:	460b      	mov	r3, r1
 8009976:	e9d6 0100 	ldrd	r0, r1, [r6]
 800997a:	f7f6 fc3d 	bl	80001f8 <__aeabi_dsub>
 800997e:	f1bb 0f00 	cmp.w	fp, #0
 8009982:	4604      	mov	r4, r0
 8009984:	460d      	mov	r5, r1
 8009986:	f6bf aed6 	bge.w	8009736 <atan+0x3e>
 800998a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800998e:	461d      	mov	r5, r3
 8009990:	e6d1      	b.n	8009736 <atan+0x3e>
 8009992:	a51d      	add	r5, pc, #116	; (adr r5, 8009a08 <atan+0x310>)
 8009994:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009998:	e6cd      	b.n	8009736 <atan+0x3e>
 800999a:	bf00      	nop
 800999c:	f3af 8000 	nop.w
 80099a0:	54442d18 	.word	0x54442d18
 80099a4:	bff921fb 	.word	0xbff921fb
 80099a8:	8800759c 	.word	0x8800759c
 80099ac:	7e37e43c 	.word	0x7e37e43c
 80099b0:	e322da11 	.word	0xe322da11
 80099b4:	3f90ad3a 	.word	0x3f90ad3a
 80099b8:	24760deb 	.word	0x24760deb
 80099bc:	3fa97b4b 	.word	0x3fa97b4b
 80099c0:	a0d03d51 	.word	0xa0d03d51
 80099c4:	3fb10d66 	.word	0x3fb10d66
 80099c8:	c54c206e 	.word	0xc54c206e
 80099cc:	3fb745cd 	.word	0x3fb745cd
 80099d0:	920083ff 	.word	0x920083ff
 80099d4:	3fc24924 	.word	0x3fc24924
 80099d8:	5555550d 	.word	0x5555550d
 80099dc:	3fd55555 	.word	0x3fd55555
 80099e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80099e4:	bfa2b444 	.word	0xbfa2b444
 80099e8:	52defd9a 	.word	0x52defd9a
 80099ec:	3fadde2d 	.word	0x3fadde2d
 80099f0:	af749a6d 	.word	0xaf749a6d
 80099f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80099f8:	fe231671 	.word	0xfe231671
 80099fc:	3fbc71c6 	.word	0x3fbc71c6
 8009a00:	9998ebc4 	.word	0x9998ebc4
 8009a04:	3fc99999 	.word	0x3fc99999
 8009a08:	54442d18 	.word	0x54442d18
 8009a0c:	3ff921fb 	.word	0x3ff921fb
 8009a10:	440fffff 	.word	0x440fffff
 8009a14:	7ff00000 	.word	0x7ff00000
 8009a18:	3fdbffff 	.word	0x3fdbffff
 8009a1c:	3ff00000 	.word	0x3ff00000
 8009a20:	3ff2ffff 	.word	0x3ff2ffff
 8009a24:	40038000 	.word	0x40038000
 8009a28:	3ff80000 	.word	0x3ff80000
 8009a2c:	bff00000 	.word	0xbff00000
 8009a30:	0800c148 	.word	0x0800c148
 8009a34:	0800c128 	.word	0x0800c128

08009a38 <cos>:
 8009a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a3a:	ec53 2b10 	vmov	r2, r3, d0
 8009a3e:	4824      	ldr	r0, [pc, #144]	; (8009ad0 <cos+0x98>)
 8009a40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a44:	4281      	cmp	r1, r0
 8009a46:	dc06      	bgt.n	8009a56 <cos+0x1e>
 8009a48:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8009ac8 <cos+0x90>
 8009a4c:	f001 fcd4 	bl	800b3f8 <__kernel_cos>
 8009a50:	ec51 0b10 	vmov	r0, r1, d0
 8009a54:	e007      	b.n	8009a66 <cos+0x2e>
 8009a56:	481f      	ldr	r0, [pc, #124]	; (8009ad4 <cos+0x9c>)
 8009a58:	4281      	cmp	r1, r0
 8009a5a:	dd09      	ble.n	8009a70 <cos+0x38>
 8009a5c:	ee10 0a10 	vmov	r0, s0
 8009a60:	4619      	mov	r1, r3
 8009a62:	f7f6 fbc9 	bl	80001f8 <__aeabi_dsub>
 8009a66:	ec41 0b10 	vmov	d0, r0, r1
 8009a6a:	b005      	add	sp, #20
 8009a6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a70:	4668      	mov	r0, sp
 8009a72:	f001 fa01 	bl	800ae78 <__ieee754_rem_pio2>
 8009a76:	f000 0003 	and.w	r0, r0, #3
 8009a7a:	2801      	cmp	r0, #1
 8009a7c:	d007      	beq.n	8009a8e <cos+0x56>
 8009a7e:	2802      	cmp	r0, #2
 8009a80:	d012      	beq.n	8009aa8 <cos+0x70>
 8009a82:	b9c0      	cbnz	r0, 8009ab6 <cos+0x7e>
 8009a84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a88:	ed9d 0b00 	vldr	d0, [sp]
 8009a8c:	e7de      	b.n	8009a4c <cos+0x14>
 8009a8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a92:	ed9d 0b00 	vldr	d0, [sp]
 8009a96:	f002 f8b7 	bl	800bc08 <__kernel_sin>
 8009a9a:	ec53 2b10 	vmov	r2, r3, d0
 8009a9e:	ee10 0a10 	vmov	r0, s0
 8009aa2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009aa6:	e7de      	b.n	8009a66 <cos+0x2e>
 8009aa8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009aac:	ed9d 0b00 	vldr	d0, [sp]
 8009ab0:	f001 fca2 	bl	800b3f8 <__kernel_cos>
 8009ab4:	e7f1      	b.n	8009a9a <cos+0x62>
 8009ab6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009aba:	ed9d 0b00 	vldr	d0, [sp]
 8009abe:	2001      	movs	r0, #1
 8009ac0:	f002 f8a2 	bl	800bc08 <__kernel_sin>
 8009ac4:	e7c4      	b.n	8009a50 <cos+0x18>
 8009ac6:	bf00      	nop
	...
 8009ad0:	3fe921fb 	.word	0x3fe921fb
 8009ad4:	7fefffff 	.word	0x7fefffff

08009ad8 <fabs>:
 8009ad8:	ec51 0b10 	vmov	r0, r1, d0
 8009adc:	ee10 2a10 	vmov	r2, s0
 8009ae0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ae4:	ec43 2b10 	vmov	d0, r2, r3
 8009ae8:	4770      	bx	lr
 8009aea:	0000      	movs	r0, r0
 8009aec:	0000      	movs	r0, r0
	...

08009af0 <sin>:
 8009af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009af2:	ec53 2b10 	vmov	r2, r3, d0
 8009af6:	4826      	ldr	r0, [pc, #152]	; (8009b90 <sin+0xa0>)
 8009af8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009afc:	4281      	cmp	r1, r0
 8009afe:	dc07      	bgt.n	8009b10 <sin+0x20>
 8009b00:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009b88 <sin+0x98>
 8009b04:	2000      	movs	r0, #0
 8009b06:	f002 f87f 	bl	800bc08 <__kernel_sin>
 8009b0a:	ec51 0b10 	vmov	r0, r1, d0
 8009b0e:	e007      	b.n	8009b20 <sin+0x30>
 8009b10:	4820      	ldr	r0, [pc, #128]	; (8009b94 <sin+0xa4>)
 8009b12:	4281      	cmp	r1, r0
 8009b14:	dd09      	ble.n	8009b2a <sin+0x3a>
 8009b16:	ee10 0a10 	vmov	r0, s0
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	f7f6 fb6c 	bl	80001f8 <__aeabi_dsub>
 8009b20:	ec41 0b10 	vmov	d0, r0, r1
 8009b24:	b005      	add	sp, #20
 8009b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b2a:	4668      	mov	r0, sp
 8009b2c:	f001 f9a4 	bl	800ae78 <__ieee754_rem_pio2>
 8009b30:	f000 0003 	and.w	r0, r0, #3
 8009b34:	2801      	cmp	r0, #1
 8009b36:	d008      	beq.n	8009b4a <sin+0x5a>
 8009b38:	2802      	cmp	r0, #2
 8009b3a:	d00d      	beq.n	8009b58 <sin+0x68>
 8009b3c:	b9d0      	cbnz	r0, 8009b74 <sin+0x84>
 8009b3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b42:	ed9d 0b00 	vldr	d0, [sp]
 8009b46:	2001      	movs	r0, #1
 8009b48:	e7dd      	b.n	8009b06 <sin+0x16>
 8009b4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b4e:	ed9d 0b00 	vldr	d0, [sp]
 8009b52:	f001 fc51 	bl	800b3f8 <__kernel_cos>
 8009b56:	e7d8      	b.n	8009b0a <sin+0x1a>
 8009b58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b5c:	ed9d 0b00 	vldr	d0, [sp]
 8009b60:	2001      	movs	r0, #1
 8009b62:	f002 f851 	bl	800bc08 <__kernel_sin>
 8009b66:	ec53 2b10 	vmov	r2, r3, d0
 8009b6a:	ee10 0a10 	vmov	r0, s0
 8009b6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009b72:	e7d5      	b.n	8009b20 <sin+0x30>
 8009b74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b78:	ed9d 0b00 	vldr	d0, [sp]
 8009b7c:	f001 fc3c 	bl	800b3f8 <__kernel_cos>
 8009b80:	e7f1      	b.n	8009b66 <sin+0x76>
 8009b82:	bf00      	nop
 8009b84:	f3af 8000 	nop.w
	...
 8009b90:	3fe921fb 	.word	0x3fe921fb
 8009b94:	7fefffff 	.word	0x7fefffff

08009b98 <acos>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	ed2d 8b02 	vpush	{d8}
 8009b9e:	ec55 4b10 	vmov	r4, r5, d0
 8009ba2:	f000 f919 	bl	8009dd8 <__ieee754_acos>
 8009ba6:	4b16      	ldr	r3, [pc, #88]	; (8009c00 <acos+0x68>)
 8009ba8:	eeb0 8a40 	vmov.f32	s16, s0
 8009bac:	eef0 8a60 	vmov.f32	s17, s1
 8009bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	d01c      	beq.n	8009bf2 <acos+0x5a>
 8009bb8:	4622      	mov	r2, r4
 8009bba:	462b      	mov	r3, r5
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	f7f6 ff6c 	bl	8000a9c <__aeabi_dcmpun>
 8009bc4:	b9a8      	cbnz	r0, 8009bf2 <acos+0x5a>
 8009bc6:	ec45 4b10 	vmov	d0, r4, r5
 8009bca:	f7ff ff85 	bl	8009ad8 <fabs>
 8009bce:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <acos+0x6c>)
 8009bd0:	ec51 0b10 	vmov	r0, r1, d0
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f7f6 ff57 	bl	8000a88 <__aeabi_dcmpgt>
 8009bda:	b150      	cbz	r0, 8009bf2 <acos+0x5a>
 8009bdc:	f7ff fd58 	bl	8009690 <__errno>
 8009be0:	ecbd 8b02 	vpop	{d8}
 8009be4:	2321      	movs	r3, #33	; 0x21
 8009be6:	6003      	str	r3, [r0, #0]
 8009be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bec:	4806      	ldr	r0, [pc, #24]	; (8009c08 <acos+0x70>)
 8009bee:	f002 b957 	b.w	800bea0 <nan>
 8009bf2:	eeb0 0a48 	vmov.f32	s0, s16
 8009bf6:	eef0 0a68 	vmov.f32	s1, s17
 8009bfa:	ecbd 8b02 	vpop	{d8}
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	2000019c 	.word	0x2000019c
 8009c04:	3ff00000 	.word	0x3ff00000
 8009c08:	0800c168 	.word	0x0800c168

08009c0c <atan2>:
 8009c0c:	f000 bb44 	b.w	800a298 <__ieee754_atan2>

08009c10 <pow>:
 8009c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c14:	ec59 8b10 	vmov	r8, r9, d0
 8009c18:	ec57 6b11 	vmov	r6, r7, d1
 8009c1c:	f000 fc08 	bl	800a430 <__ieee754_pow>
 8009c20:	4b4e      	ldr	r3, [pc, #312]	; (8009d5c <pow+0x14c>)
 8009c22:	f993 3000 	ldrsb.w	r3, [r3]
 8009c26:	3301      	adds	r3, #1
 8009c28:	ec55 4b10 	vmov	r4, r5, d0
 8009c2c:	d015      	beq.n	8009c5a <pow+0x4a>
 8009c2e:	4632      	mov	r2, r6
 8009c30:	463b      	mov	r3, r7
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 ff31 	bl	8000a9c <__aeabi_dcmpun>
 8009c3a:	b970      	cbnz	r0, 8009c5a <pow+0x4a>
 8009c3c:	4642      	mov	r2, r8
 8009c3e:	464b      	mov	r3, r9
 8009c40:	4640      	mov	r0, r8
 8009c42:	4649      	mov	r1, r9
 8009c44:	f7f6 ff2a 	bl	8000a9c <__aeabi_dcmpun>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	b148      	cbz	r0, 8009c62 <pow+0x52>
 8009c4e:	4630      	mov	r0, r6
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7f6 fef1 	bl	8000a38 <__aeabi_dcmpeq>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d17d      	bne.n	8009d56 <pow+0x146>
 8009c5a:	ec45 4b10 	vmov	d0, r4, r5
 8009c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c62:	4640      	mov	r0, r8
 8009c64:	4649      	mov	r1, r9
 8009c66:	f7f6 fee7 	bl	8000a38 <__aeabi_dcmpeq>
 8009c6a:	b1e0      	cbz	r0, 8009ca6 <pow+0x96>
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	2300      	movs	r3, #0
 8009c70:	4630      	mov	r0, r6
 8009c72:	4639      	mov	r1, r7
 8009c74:	f7f6 fee0 	bl	8000a38 <__aeabi_dcmpeq>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d16c      	bne.n	8009d56 <pow+0x146>
 8009c7c:	ec47 6b10 	vmov	d0, r6, r7
 8009c80:	f002 f880 	bl	800bd84 <finite>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d0e8      	beq.n	8009c5a <pow+0x4a>
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 fedc 	bl	8000a4c <__aeabi_dcmplt>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d0e0      	beq.n	8009c5a <pow+0x4a>
 8009c98:	f7ff fcfa 	bl	8009690 <__errno>
 8009c9c:	2321      	movs	r3, #33	; 0x21
 8009c9e:	6003      	str	r3, [r0, #0]
 8009ca0:	2400      	movs	r4, #0
 8009ca2:	4d2f      	ldr	r5, [pc, #188]	; (8009d60 <pow+0x150>)
 8009ca4:	e7d9      	b.n	8009c5a <pow+0x4a>
 8009ca6:	ec45 4b10 	vmov	d0, r4, r5
 8009caa:	f002 f86b 	bl	800bd84 <finite>
 8009cae:	bbb8      	cbnz	r0, 8009d20 <pow+0x110>
 8009cb0:	ec49 8b10 	vmov	d0, r8, r9
 8009cb4:	f002 f866 	bl	800bd84 <finite>
 8009cb8:	b390      	cbz	r0, 8009d20 <pow+0x110>
 8009cba:	ec47 6b10 	vmov	d0, r6, r7
 8009cbe:	f002 f861 	bl	800bd84 <finite>
 8009cc2:	b368      	cbz	r0, 8009d20 <pow+0x110>
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	4620      	mov	r0, r4
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f7f6 fee6 	bl	8000a9c <__aeabi_dcmpun>
 8009cd0:	b160      	cbz	r0, 8009cec <pow+0xdc>
 8009cd2:	f7ff fcdd 	bl	8009690 <__errno>
 8009cd6:	2321      	movs	r3, #33	; 0x21
 8009cd8:	6003      	str	r3, [r0, #0]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4610      	mov	r0, r2
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	f7f6 fd6b 	bl	80007bc <__aeabi_ddiv>
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	460d      	mov	r5, r1
 8009cea:	e7b6      	b.n	8009c5a <pow+0x4a>
 8009cec:	f7ff fcd0 	bl	8009690 <__errno>
 8009cf0:	2322      	movs	r3, #34	; 0x22
 8009cf2:	6003      	str	r3, [r0, #0]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	4640      	mov	r0, r8
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	f7f6 fea6 	bl	8000a4c <__aeabi_dcmplt>
 8009d00:	2400      	movs	r4, #0
 8009d02:	b158      	cbz	r0, 8009d1c <pow+0x10c>
 8009d04:	ec47 6b10 	vmov	d0, r6, r7
 8009d08:	f002 f8d2 	bl	800beb0 <rint>
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	ec51 0b10 	vmov	r0, r1, d0
 8009d12:	463b      	mov	r3, r7
 8009d14:	f7f6 fe90 	bl	8000a38 <__aeabi_dcmpeq>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d0c2      	beq.n	8009ca2 <pow+0x92>
 8009d1c:	4d11      	ldr	r5, [pc, #68]	; (8009d64 <pow+0x154>)
 8009d1e:	e79c      	b.n	8009c5a <pow+0x4a>
 8009d20:	2200      	movs	r2, #0
 8009d22:	2300      	movs	r3, #0
 8009d24:	4620      	mov	r0, r4
 8009d26:	4629      	mov	r1, r5
 8009d28:	f7f6 fe86 	bl	8000a38 <__aeabi_dcmpeq>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d094      	beq.n	8009c5a <pow+0x4a>
 8009d30:	ec49 8b10 	vmov	d0, r8, r9
 8009d34:	f002 f826 	bl	800bd84 <finite>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d08e      	beq.n	8009c5a <pow+0x4a>
 8009d3c:	ec47 6b10 	vmov	d0, r6, r7
 8009d40:	f002 f820 	bl	800bd84 <finite>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d088      	beq.n	8009c5a <pow+0x4a>
 8009d48:	f7ff fca2 	bl	8009690 <__errno>
 8009d4c:	2322      	movs	r3, #34	; 0x22
 8009d4e:	6003      	str	r3, [r0, #0]
 8009d50:	2400      	movs	r4, #0
 8009d52:	2500      	movs	r5, #0
 8009d54:	e781      	b.n	8009c5a <pow+0x4a>
 8009d56:	4d04      	ldr	r5, [pc, #16]	; (8009d68 <pow+0x158>)
 8009d58:	2400      	movs	r4, #0
 8009d5a:	e77e      	b.n	8009c5a <pow+0x4a>
 8009d5c:	2000019c 	.word	0x2000019c
 8009d60:	fff00000 	.word	0xfff00000
 8009d64:	7ff00000 	.word	0x7ff00000
 8009d68:	3ff00000 	.word	0x3ff00000

08009d6c <sqrt>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	ed2d 8b02 	vpush	{d8}
 8009d72:	ec55 4b10 	vmov	r4, r5, d0
 8009d76:	f001 fa89 	bl	800b28c <__ieee754_sqrt>
 8009d7a:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <sqrt+0x64>)
 8009d7c:	eeb0 8a40 	vmov.f32	s16, s0
 8009d80:	eef0 8a60 	vmov.f32	s17, s1
 8009d84:	f993 3000 	ldrsb.w	r3, [r3]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	d019      	beq.n	8009dc0 <sqrt+0x54>
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	462b      	mov	r3, r5
 8009d90:	4620      	mov	r0, r4
 8009d92:	4629      	mov	r1, r5
 8009d94:	f7f6 fe82 	bl	8000a9c <__aeabi_dcmpun>
 8009d98:	b990      	cbnz	r0, 8009dc0 <sqrt+0x54>
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7f6 fe53 	bl	8000a4c <__aeabi_dcmplt>
 8009da6:	b158      	cbz	r0, 8009dc0 <sqrt+0x54>
 8009da8:	f7ff fc72 	bl	8009690 <__errno>
 8009dac:	2321      	movs	r3, #33	; 0x21
 8009dae:	6003      	str	r3, [r0, #0]
 8009db0:	2200      	movs	r2, #0
 8009db2:	2300      	movs	r3, #0
 8009db4:	4610      	mov	r0, r2
 8009db6:	4619      	mov	r1, r3
 8009db8:	f7f6 fd00 	bl	80007bc <__aeabi_ddiv>
 8009dbc:	ec41 0b18 	vmov	d8, r0, r1
 8009dc0:	eeb0 0a48 	vmov.f32	s0, s16
 8009dc4:	eef0 0a68 	vmov.f32	s1, s17
 8009dc8:	ecbd 8b02 	vpop	{d8}
 8009dcc:	bd38      	pop	{r3, r4, r5, pc}
 8009dce:	bf00      	nop
 8009dd0:	2000019c 	.word	0x2000019c
 8009dd4:	00000000 	.word	0x00000000

08009dd8 <__ieee754_acos>:
 8009dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	ec55 4b10 	vmov	r4, r5, d0
 8009de0:	49b7      	ldr	r1, [pc, #732]	; (800a0c0 <__ieee754_acos+0x2e8>)
 8009de2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009de6:	428b      	cmp	r3, r1
 8009de8:	dd1b      	ble.n	8009e22 <__ieee754_acos+0x4a>
 8009dea:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8009dee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009df2:	4323      	orrs	r3, r4
 8009df4:	d106      	bne.n	8009e04 <__ieee754_acos+0x2c>
 8009df6:	2d00      	cmp	r5, #0
 8009df8:	f300 8211 	bgt.w	800a21e <__ieee754_acos+0x446>
 8009dfc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800a058 <__ieee754_acos+0x280>
 8009e00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e04:	ee10 2a10 	vmov	r2, s0
 8009e08:	462b      	mov	r3, r5
 8009e0a:	ee10 0a10 	vmov	r0, s0
 8009e0e:	4629      	mov	r1, r5
 8009e10:	f7f6 f9f2 	bl	80001f8 <__aeabi_dsub>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	f7f6 fcd0 	bl	80007bc <__aeabi_ddiv>
 8009e1c:	ec41 0b10 	vmov	d0, r0, r1
 8009e20:	e7ee      	b.n	8009e00 <__ieee754_acos+0x28>
 8009e22:	49a8      	ldr	r1, [pc, #672]	; (800a0c4 <__ieee754_acos+0x2ec>)
 8009e24:	428b      	cmp	r3, r1
 8009e26:	f300 8087 	bgt.w	8009f38 <__ieee754_acos+0x160>
 8009e2a:	4aa7      	ldr	r2, [pc, #668]	; (800a0c8 <__ieee754_acos+0x2f0>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	f340 81f9 	ble.w	800a224 <__ieee754_acos+0x44c>
 8009e32:	ee10 2a10 	vmov	r2, s0
 8009e36:	ee10 0a10 	vmov	r0, s0
 8009e3a:	462b      	mov	r3, r5
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	f7f6 fb93 	bl	8000568 <__aeabi_dmul>
 8009e42:	a387      	add	r3, pc, #540	; (adr r3, 800a060 <__ieee754_acos+0x288>)
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	4606      	mov	r6, r0
 8009e4a:	460f      	mov	r7, r1
 8009e4c:	f7f6 fb8c 	bl	8000568 <__aeabi_dmul>
 8009e50:	a385      	add	r3, pc, #532	; (adr r3, 800a068 <__ieee754_acos+0x290>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 f9d1 	bl	80001fc <__adddf3>
 8009e5a:	4632      	mov	r2, r6
 8009e5c:	463b      	mov	r3, r7
 8009e5e:	f7f6 fb83 	bl	8000568 <__aeabi_dmul>
 8009e62:	a383      	add	r3, pc, #524	; (adr r3, 800a070 <__ieee754_acos+0x298>)
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	f7f6 f9c6 	bl	80001f8 <__aeabi_dsub>
 8009e6c:	4632      	mov	r2, r6
 8009e6e:	463b      	mov	r3, r7
 8009e70:	f7f6 fb7a 	bl	8000568 <__aeabi_dmul>
 8009e74:	a380      	add	r3, pc, #512	; (adr r3, 800a078 <__ieee754_acos+0x2a0>)
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	f7f6 f9bf 	bl	80001fc <__adddf3>
 8009e7e:	4632      	mov	r2, r6
 8009e80:	463b      	mov	r3, r7
 8009e82:	f7f6 fb71 	bl	8000568 <__aeabi_dmul>
 8009e86:	a37e      	add	r3, pc, #504	; (adr r3, 800a080 <__ieee754_acos+0x2a8>)
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f7f6 f9b4 	bl	80001f8 <__aeabi_dsub>
 8009e90:	4632      	mov	r2, r6
 8009e92:	463b      	mov	r3, r7
 8009e94:	f7f6 fb68 	bl	8000568 <__aeabi_dmul>
 8009e98:	a37b      	add	r3, pc, #492	; (adr r3, 800a088 <__ieee754_acos+0x2b0>)
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f7f6 f9ad 	bl	80001fc <__adddf3>
 8009ea2:	4632      	mov	r2, r6
 8009ea4:	463b      	mov	r3, r7
 8009ea6:	f7f6 fb5f 	bl	8000568 <__aeabi_dmul>
 8009eaa:	a379      	add	r3, pc, #484	; (adr r3, 800a090 <__ieee754_acos+0x2b8>)
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	4680      	mov	r8, r0
 8009eb2:	4689      	mov	r9, r1
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	f7f6 fb56 	bl	8000568 <__aeabi_dmul>
 8009ebc:	a376      	add	r3, pc, #472	; (adr r3, 800a098 <__ieee754_acos+0x2c0>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f7f6 f999 	bl	80001f8 <__aeabi_dsub>
 8009ec6:	4632      	mov	r2, r6
 8009ec8:	463b      	mov	r3, r7
 8009eca:	f7f6 fb4d 	bl	8000568 <__aeabi_dmul>
 8009ece:	a374      	add	r3, pc, #464	; (adr r3, 800a0a0 <__ieee754_acos+0x2c8>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	f7f6 f992 	bl	80001fc <__adddf3>
 8009ed8:	4632      	mov	r2, r6
 8009eda:	463b      	mov	r3, r7
 8009edc:	f7f6 fb44 	bl	8000568 <__aeabi_dmul>
 8009ee0:	a371      	add	r3, pc, #452	; (adr r3, 800a0a8 <__ieee754_acos+0x2d0>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	f7f6 f987 	bl	80001f8 <__aeabi_dsub>
 8009eea:	4632      	mov	r2, r6
 8009eec:	463b      	mov	r3, r7
 8009eee:	f7f6 fb3b 	bl	8000568 <__aeabi_dmul>
 8009ef2:	4b76      	ldr	r3, [pc, #472]	; (800a0cc <__ieee754_acos+0x2f4>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f7f6 f981 	bl	80001fc <__adddf3>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4640      	mov	r0, r8
 8009f00:	4649      	mov	r1, r9
 8009f02:	f7f6 fc5b 	bl	80007bc <__aeabi_ddiv>
 8009f06:	4622      	mov	r2, r4
 8009f08:	462b      	mov	r3, r5
 8009f0a:	f7f6 fb2d 	bl	8000568 <__aeabi_dmul>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	a167      	add	r1, pc, #412	; (adr r1, 800a0b0 <__ieee754_acos+0x2d8>)
 8009f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f18:	f7f6 f96e 	bl	80001f8 <__aeabi_dsub>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4620      	mov	r0, r4
 8009f22:	4629      	mov	r1, r5
 8009f24:	f7f6 f968 	bl	80001f8 <__aeabi_dsub>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	a162      	add	r1, pc, #392	; (adr r1, 800a0b8 <__ieee754_acos+0x2e0>)
 8009f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f32:	f7f6 f961 	bl	80001f8 <__aeabi_dsub>
 8009f36:	e771      	b.n	8009e1c <__ieee754_acos+0x44>
 8009f38:	2d00      	cmp	r5, #0
 8009f3a:	f280 80cb 	bge.w	800a0d4 <__ieee754_acos+0x2fc>
 8009f3e:	ee10 0a10 	vmov	r0, s0
 8009f42:	4b62      	ldr	r3, [pc, #392]	; (800a0cc <__ieee754_acos+0x2f4>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	4629      	mov	r1, r5
 8009f48:	f7f6 f958 	bl	80001fc <__adddf3>
 8009f4c:	4b60      	ldr	r3, [pc, #384]	; (800a0d0 <__ieee754_acos+0x2f8>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f7f6 fb0a 	bl	8000568 <__aeabi_dmul>
 8009f54:	a342      	add	r3, pc, #264	; (adr r3, 800a060 <__ieee754_acos+0x288>)
 8009f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	460d      	mov	r5, r1
 8009f5e:	f7f6 fb03 	bl	8000568 <__aeabi_dmul>
 8009f62:	a341      	add	r3, pc, #260	; (adr r3, 800a068 <__ieee754_acos+0x290>)
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f7f6 f948 	bl	80001fc <__adddf3>
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	462b      	mov	r3, r5
 8009f70:	f7f6 fafa 	bl	8000568 <__aeabi_dmul>
 8009f74:	a33e      	add	r3, pc, #248	; (adr r3, 800a070 <__ieee754_acos+0x298>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 f93d 	bl	80001f8 <__aeabi_dsub>
 8009f7e:	4622      	mov	r2, r4
 8009f80:	462b      	mov	r3, r5
 8009f82:	f7f6 faf1 	bl	8000568 <__aeabi_dmul>
 8009f86:	a33c      	add	r3, pc, #240	; (adr r3, 800a078 <__ieee754_acos+0x2a0>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 f936 	bl	80001fc <__adddf3>
 8009f90:	4622      	mov	r2, r4
 8009f92:	462b      	mov	r3, r5
 8009f94:	f7f6 fae8 	bl	8000568 <__aeabi_dmul>
 8009f98:	a339      	add	r3, pc, #228	; (adr r3, 800a080 <__ieee754_acos+0x2a8>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 f92b 	bl	80001f8 <__aeabi_dsub>
 8009fa2:	4622      	mov	r2, r4
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	f7f6 fadf 	bl	8000568 <__aeabi_dmul>
 8009faa:	a337      	add	r3, pc, #220	; (adr r3, 800a088 <__ieee754_acos+0x2b0>)
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	f7f6 f924 	bl	80001fc <__adddf3>
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	462b      	mov	r3, r5
 8009fb8:	f7f6 fad6 	bl	8000568 <__aeabi_dmul>
 8009fbc:	ec45 4b10 	vmov	d0, r4, r5
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	4689      	mov	r9, r1
 8009fc4:	f001 f962 	bl	800b28c <__ieee754_sqrt>
 8009fc8:	a331      	add	r3, pc, #196	; (adr r3, 800a090 <__ieee754_acos+0x2b8>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	4620      	mov	r0, r4
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	ec57 6b10 	vmov	r6, r7, d0
 8009fd6:	f7f6 fac7 	bl	8000568 <__aeabi_dmul>
 8009fda:	a32f      	add	r3, pc, #188	; (adr r3, 800a098 <__ieee754_acos+0x2c0>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 f90a 	bl	80001f8 <__aeabi_dsub>
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	462b      	mov	r3, r5
 8009fe8:	f7f6 fabe 	bl	8000568 <__aeabi_dmul>
 8009fec:	a32c      	add	r3, pc, #176	; (adr r3, 800a0a0 <__ieee754_acos+0x2c8>)
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	f7f6 f903 	bl	80001fc <__adddf3>
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	462b      	mov	r3, r5
 8009ffa:	f7f6 fab5 	bl	8000568 <__aeabi_dmul>
 8009ffe:	a32a      	add	r3, pc, #168	; (adr r3, 800a0a8 <__ieee754_acos+0x2d0>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f7f6 f8f8 	bl	80001f8 <__aeabi_dsub>
 800a008:	4622      	mov	r2, r4
 800a00a:	462b      	mov	r3, r5
 800a00c:	f7f6 faac 	bl	8000568 <__aeabi_dmul>
 800a010:	4b2e      	ldr	r3, [pc, #184]	; (800a0cc <__ieee754_acos+0x2f4>)
 800a012:	2200      	movs	r2, #0
 800a014:	f7f6 f8f2 	bl	80001fc <__adddf3>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4640      	mov	r0, r8
 800a01e:	4649      	mov	r1, r9
 800a020:	f7f6 fbcc 	bl	80007bc <__aeabi_ddiv>
 800a024:	4632      	mov	r2, r6
 800a026:	463b      	mov	r3, r7
 800a028:	f7f6 fa9e 	bl	8000568 <__aeabi_dmul>
 800a02c:	a320      	add	r3, pc, #128	; (adr r3, 800a0b0 <__ieee754_acos+0x2d8>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f7f6 f8e1 	bl	80001f8 <__aeabi_dsub>
 800a036:	4632      	mov	r2, r6
 800a038:	463b      	mov	r3, r7
 800a03a:	f7f6 f8df 	bl	80001fc <__adddf3>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	f7f6 f8db 	bl	80001fc <__adddf3>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	a103      	add	r1, pc, #12	; (adr r1, 800a058 <__ieee754_acos+0x280>)
 800a04c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a050:	e76f      	b.n	8009f32 <__ieee754_acos+0x15a>
 800a052:	bf00      	nop
 800a054:	f3af 8000 	nop.w
 800a058:	54442d18 	.word	0x54442d18
 800a05c:	400921fb 	.word	0x400921fb
 800a060:	0dfdf709 	.word	0x0dfdf709
 800a064:	3f023de1 	.word	0x3f023de1
 800a068:	7501b288 	.word	0x7501b288
 800a06c:	3f49efe0 	.word	0x3f49efe0
 800a070:	b5688f3b 	.word	0xb5688f3b
 800a074:	3fa48228 	.word	0x3fa48228
 800a078:	0e884455 	.word	0x0e884455
 800a07c:	3fc9c155 	.word	0x3fc9c155
 800a080:	03eb6f7d 	.word	0x03eb6f7d
 800a084:	3fd4d612 	.word	0x3fd4d612
 800a088:	55555555 	.word	0x55555555
 800a08c:	3fc55555 	.word	0x3fc55555
 800a090:	b12e9282 	.word	0xb12e9282
 800a094:	3fb3b8c5 	.word	0x3fb3b8c5
 800a098:	1b8d0159 	.word	0x1b8d0159
 800a09c:	3fe6066c 	.word	0x3fe6066c
 800a0a0:	9c598ac8 	.word	0x9c598ac8
 800a0a4:	40002ae5 	.word	0x40002ae5
 800a0a8:	1c8a2d4b 	.word	0x1c8a2d4b
 800a0ac:	40033a27 	.word	0x40033a27
 800a0b0:	33145c07 	.word	0x33145c07
 800a0b4:	3c91a626 	.word	0x3c91a626
 800a0b8:	54442d18 	.word	0x54442d18
 800a0bc:	3ff921fb 	.word	0x3ff921fb
 800a0c0:	3fefffff 	.word	0x3fefffff
 800a0c4:	3fdfffff 	.word	0x3fdfffff
 800a0c8:	3c600000 	.word	0x3c600000
 800a0cc:	3ff00000 	.word	0x3ff00000
 800a0d0:	3fe00000 	.word	0x3fe00000
 800a0d4:	ee10 2a10 	vmov	r2, s0
 800a0d8:	462b      	mov	r3, r5
 800a0da:	496d      	ldr	r1, [pc, #436]	; (800a290 <__ieee754_acos+0x4b8>)
 800a0dc:	2000      	movs	r0, #0
 800a0de:	f7f6 f88b 	bl	80001f8 <__aeabi_dsub>
 800a0e2:	4b6c      	ldr	r3, [pc, #432]	; (800a294 <__ieee754_acos+0x4bc>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f7f6 fa3f 	bl	8000568 <__aeabi_dmul>
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460d      	mov	r5, r1
 800a0ee:	ec45 4b10 	vmov	d0, r4, r5
 800a0f2:	f001 f8cb 	bl	800b28c <__ieee754_sqrt>
 800a0f6:	a34e      	add	r3, pc, #312	; (adr r3, 800a230 <__ieee754_acos+0x458>)
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	4629      	mov	r1, r5
 800a100:	ec59 8b10 	vmov	r8, r9, d0
 800a104:	f7f6 fa30 	bl	8000568 <__aeabi_dmul>
 800a108:	a34b      	add	r3, pc, #300	; (adr r3, 800a238 <__ieee754_acos+0x460>)
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	f7f6 f875 	bl	80001fc <__adddf3>
 800a112:	4622      	mov	r2, r4
 800a114:	462b      	mov	r3, r5
 800a116:	f7f6 fa27 	bl	8000568 <__aeabi_dmul>
 800a11a:	a349      	add	r3, pc, #292	; (adr r3, 800a240 <__ieee754_acos+0x468>)
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f7f6 f86a 	bl	80001f8 <__aeabi_dsub>
 800a124:	4622      	mov	r2, r4
 800a126:	462b      	mov	r3, r5
 800a128:	f7f6 fa1e 	bl	8000568 <__aeabi_dmul>
 800a12c:	a346      	add	r3, pc, #280	; (adr r3, 800a248 <__ieee754_acos+0x470>)
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	f7f6 f863 	bl	80001fc <__adddf3>
 800a136:	4622      	mov	r2, r4
 800a138:	462b      	mov	r3, r5
 800a13a:	f7f6 fa15 	bl	8000568 <__aeabi_dmul>
 800a13e:	a344      	add	r3, pc, #272	; (adr r3, 800a250 <__ieee754_acos+0x478>)
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	f7f6 f858 	bl	80001f8 <__aeabi_dsub>
 800a148:	4622      	mov	r2, r4
 800a14a:	462b      	mov	r3, r5
 800a14c:	f7f6 fa0c 	bl	8000568 <__aeabi_dmul>
 800a150:	a341      	add	r3, pc, #260	; (adr r3, 800a258 <__ieee754_acos+0x480>)
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	f7f6 f851 	bl	80001fc <__adddf3>
 800a15a:	4622      	mov	r2, r4
 800a15c:	462b      	mov	r3, r5
 800a15e:	f7f6 fa03 	bl	8000568 <__aeabi_dmul>
 800a162:	a33f      	add	r3, pc, #252	; (adr r3, 800a260 <__ieee754_acos+0x488>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	4682      	mov	sl, r0
 800a16a:	468b      	mov	fp, r1
 800a16c:	4620      	mov	r0, r4
 800a16e:	4629      	mov	r1, r5
 800a170:	f7f6 f9fa 	bl	8000568 <__aeabi_dmul>
 800a174:	a33c      	add	r3, pc, #240	; (adr r3, 800a268 <__ieee754_acos+0x490>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	f7f6 f83d 	bl	80001f8 <__aeabi_dsub>
 800a17e:	4622      	mov	r2, r4
 800a180:	462b      	mov	r3, r5
 800a182:	f7f6 f9f1 	bl	8000568 <__aeabi_dmul>
 800a186:	a33a      	add	r3, pc, #232	; (adr r3, 800a270 <__ieee754_acos+0x498>)
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	f7f6 f836 	bl	80001fc <__adddf3>
 800a190:	4622      	mov	r2, r4
 800a192:	462b      	mov	r3, r5
 800a194:	f7f6 f9e8 	bl	8000568 <__aeabi_dmul>
 800a198:	a337      	add	r3, pc, #220	; (adr r3, 800a278 <__ieee754_acos+0x4a0>)
 800a19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19e:	f7f6 f82b 	bl	80001f8 <__aeabi_dsub>
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	462b      	mov	r3, r5
 800a1a6:	f7f6 f9df 	bl	8000568 <__aeabi_dmul>
 800a1aa:	4b39      	ldr	r3, [pc, #228]	; (800a290 <__ieee754_acos+0x4b8>)
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f7f6 f825 	bl	80001fc <__adddf3>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4650      	mov	r0, sl
 800a1b8:	4659      	mov	r1, fp
 800a1ba:	f7f6 faff 	bl	80007bc <__aeabi_ddiv>
 800a1be:	4642      	mov	r2, r8
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	f7f6 f9d1 	bl	8000568 <__aeabi_dmul>
 800a1c6:	2600      	movs	r6, #0
 800a1c8:	4682      	mov	sl, r0
 800a1ca:	468b      	mov	fp, r1
 800a1cc:	4632      	mov	r2, r6
 800a1ce:	464b      	mov	r3, r9
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	f7f6 f9c8 	bl	8000568 <__aeabi_dmul>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4620      	mov	r0, r4
 800a1de:	4629      	mov	r1, r5
 800a1e0:	f7f6 f80a 	bl	80001f8 <__aeabi_dsub>
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	460d      	mov	r5, r1
 800a1ea:	464b      	mov	r3, r9
 800a1ec:	4640      	mov	r0, r8
 800a1ee:	4649      	mov	r1, r9
 800a1f0:	f7f6 f804 	bl	80001fc <__adddf3>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	f7f6 fade 	bl	80007bc <__aeabi_ddiv>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4650      	mov	r0, sl
 800a206:	4659      	mov	r1, fp
 800a208:	f7f5 fff8 	bl	80001fc <__adddf3>
 800a20c:	4632      	mov	r2, r6
 800a20e:	464b      	mov	r3, r9
 800a210:	f7f5 fff4 	bl	80001fc <__adddf3>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	f7f5 fff0 	bl	80001fc <__adddf3>
 800a21c:	e5fe      	b.n	8009e1c <__ieee754_acos+0x44>
 800a21e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a280 <__ieee754_acos+0x4a8>
 800a222:	e5ed      	b.n	8009e00 <__ieee754_acos+0x28>
 800a224:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a288 <__ieee754_acos+0x4b0>
 800a228:	e5ea      	b.n	8009e00 <__ieee754_acos+0x28>
 800a22a:	bf00      	nop
 800a22c:	f3af 8000 	nop.w
 800a230:	0dfdf709 	.word	0x0dfdf709
 800a234:	3f023de1 	.word	0x3f023de1
 800a238:	7501b288 	.word	0x7501b288
 800a23c:	3f49efe0 	.word	0x3f49efe0
 800a240:	b5688f3b 	.word	0xb5688f3b
 800a244:	3fa48228 	.word	0x3fa48228
 800a248:	0e884455 	.word	0x0e884455
 800a24c:	3fc9c155 	.word	0x3fc9c155
 800a250:	03eb6f7d 	.word	0x03eb6f7d
 800a254:	3fd4d612 	.word	0x3fd4d612
 800a258:	55555555 	.word	0x55555555
 800a25c:	3fc55555 	.word	0x3fc55555
 800a260:	b12e9282 	.word	0xb12e9282
 800a264:	3fb3b8c5 	.word	0x3fb3b8c5
 800a268:	1b8d0159 	.word	0x1b8d0159
 800a26c:	3fe6066c 	.word	0x3fe6066c
 800a270:	9c598ac8 	.word	0x9c598ac8
 800a274:	40002ae5 	.word	0x40002ae5
 800a278:	1c8a2d4b 	.word	0x1c8a2d4b
 800a27c:	40033a27 	.word	0x40033a27
	...
 800a288:	54442d18 	.word	0x54442d18
 800a28c:	3ff921fb 	.word	0x3ff921fb
 800a290:	3ff00000 	.word	0x3ff00000
 800a294:	3fe00000 	.word	0x3fe00000

0800a298 <__ieee754_atan2>:
 800a298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a29c:	ec57 6b11 	vmov	r6, r7, d1
 800a2a0:	4273      	negs	r3, r6
 800a2a2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a428 <__ieee754_atan2+0x190>
 800a2a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a2aa:	4333      	orrs	r3, r6
 800a2ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a2b0:	4573      	cmp	r3, lr
 800a2b2:	ec51 0b10 	vmov	r0, r1, d0
 800a2b6:	ee11 8a10 	vmov	r8, s2
 800a2ba:	d80a      	bhi.n	800a2d2 <__ieee754_atan2+0x3a>
 800a2bc:	4244      	negs	r4, r0
 800a2be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2c2:	4304      	orrs	r4, r0
 800a2c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a2c8:	4574      	cmp	r4, lr
 800a2ca:	ee10 9a10 	vmov	r9, s0
 800a2ce:	468c      	mov	ip, r1
 800a2d0:	d907      	bls.n	800a2e2 <__ieee754_atan2+0x4a>
 800a2d2:	4632      	mov	r2, r6
 800a2d4:	463b      	mov	r3, r7
 800a2d6:	f7f5 ff91 	bl	80001fc <__adddf3>
 800a2da:	ec41 0b10 	vmov	d0, r0, r1
 800a2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a2e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a2ea:	4334      	orrs	r4, r6
 800a2ec:	d103      	bne.n	800a2f6 <__ieee754_atan2+0x5e>
 800a2ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f2:	f7ff ba01 	b.w	80096f8 <atan>
 800a2f6:	17bc      	asrs	r4, r7, #30
 800a2f8:	f004 0402 	and.w	r4, r4, #2
 800a2fc:	ea53 0909 	orrs.w	r9, r3, r9
 800a300:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a304:	d107      	bne.n	800a316 <__ieee754_atan2+0x7e>
 800a306:	2c02      	cmp	r4, #2
 800a308:	d060      	beq.n	800a3cc <__ieee754_atan2+0x134>
 800a30a:	2c03      	cmp	r4, #3
 800a30c:	d1e5      	bne.n	800a2da <__ieee754_atan2+0x42>
 800a30e:	a142      	add	r1, pc, #264	; (adr r1, 800a418 <__ieee754_atan2+0x180>)
 800a310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a314:	e7e1      	b.n	800a2da <__ieee754_atan2+0x42>
 800a316:	ea52 0808 	orrs.w	r8, r2, r8
 800a31a:	d106      	bne.n	800a32a <__ieee754_atan2+0x92>
 800a31c:	f1bc 0f00 	cmp.w	ip, #0
 800a320:	da5f      	bge.n	800a3e2 <__ieee754_atan2+0x14a>
 800a322:	a13f      	add	r1, pc, #252	; (adr r1, 800a420 <__ieee754_atan2+0x188>)
 800a324:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a328:	e7d7      	b.n	800a2da <__ieee754_atan2+0x42>
 800a32a:	4572      	cmp	r2, lr
 800a32c:	d10f      	bne.n	800a34e <__ieee754_atan2+0xb6>
 800a32e:	4293      	cmp	r3, r2
 800a330:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a334:	d107      	bne.n	800a346 <__ieee754_atan2+0xae>
 800a336:	2c02      	cmp	r4, #2
 800a338:	d84c      	bhi.n	800a3d4 <__ieee754_atan2+0x13c>
 800a33a:	4b35      	ldr	r3, [pc, #212]	; (800a410 <__ieee754_atan2+0x178>)
 800a33c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a340:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a344:	e7c9      	b.n	800a2da <__ieee754_atan2+0x42>
 800a346:	2c02      	cmp	r4, #2
 800a348:	d848      	bhi.n	800a3dc <__ieee754_atan2+0x144>
 800a34a:	4b32      	ldr	r3, [pc, #200]	; (800a414 <__ieee754_atan2+0x17c>)
 800a34c:	e7f6      	b.n	800a33c <__ieee754_atan2+0xa4>
 800a34e:	4573      	cmp	r3, lr
 800a350:	d0e4      	beq.n	800a31c <__ieee754_atan2+0x84>
 800a352:	1a9b      	subs	r3, r3, r2
 800a354:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a358:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a35c:	da1e      	bge.n	800a39c <__ieee754_atan2+0x104>
 800a35e:	2f00      	cmp	r7, #0
 800a360:	da01      	bge.n	800a366 <__ieee754_atan2+0xce>
 800a362:	323c      	adds	r2, #60	; 0x3c
 800a364:	db1e      	blt.n	800a3a4 <__ieee754_atan2+0x10c>
 800a366:	4632      	mov	r2, r6
 800a368:	463b      	mov	r3, r7
 800a36a:	f7f6 fa27 	bl	80007bc <__aeabi_ddiv>
 800a36e:	ec41 0b10 	vmov	d0, r0, r1
 800a372:	f7ff fbb1 	bl	8009ad8 <fabs>
 800a376:	f7ff f9bf 	bl	80096f8 <atan>
 800a37a:	ec51 0b10 	vmov	r0, r1, d0
 800a37e:	2c01      	cmp	r4, #1
 800a380:	d013      	beq.n	800a3aa <__ieee754_atan2+0x112>
 800a382:	2c02      	cmp	r4, #2
 800a384:	d015      	beq.n	800a3b2 <__ieee754_atan2+0x11a>
 800a386:	2c00      	cmp	r4, #0
 800a388:	d0a7      	beq.n	800a2da <__ieee754_atan2+0x42>
 800a38a:	a319      	add	r3, pc, #100	; (adr r3, 800a3f0 <__ieee754_atan2+0x158>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f5 ff32 	bl	80001f8 <__aeabi_dsub>
 800a394:	a318      	add	r3, pc, #96	; (adr r3, 800a3f8 <__ieee754_atan2+0x160>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	e014      	b.n	800a3c6 <__ieee754_atan2+0x12e>
 800a39c:	a118      	add	r1, pc, #96	; (adr r1, 800a400 <__ieee754_atan2+0x168>)
 800a39e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3a2:	e7ec      	b.n	800a37e <__ieee754_atan2+0xe6>
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	e7e9      	b.n	800a37e <__ieee754_atan2+0xe6>
 800a3aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	e793      	b.n	800a2da <__ieee754_atan2+0x42>
 800a3b2:	a30f      	add	r3, pc, #60	; (adr r3, 800a3f0 <__ieee754_atan2+0x158>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	f7f5 ff1e 	bl	80001f8 <__aeabi_dsub>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	a10d      	add	r1, pc, #52	; (adr r1, 800a3f8 <__ieee754_atan2+0x160>)
 800a3c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3c6:	f7f5 ff17 	bl	80001f8 <__aeabi_dsub>
 800a3ca:	e786      	b.n	800a2da <__ieee754_atan2+0x42>
 800a3cc:	a10a      	add	r1, pc, #40	; (adr r1, 800a3f8 <__ieee754_atan2+0x160>)
 800a3ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3d2:	e782      	b.n	800a2da <__ieee754_atan2+0x42>
 800a3d4:	a10c      	add	r1, pc, #48	; (adr r1, 800a408 <__ieee754_atan2+0x170>)
 800a3d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3da:	e77e      	b.n	800a2da <__ieee754_atan2+0x42>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	2100      	movs	r1, #0
 800a3e0:	e77b      	b.n	800a2da <__ieee754_atan2+0x42>
 800a3e2:	a107      	add	r1, pc, #28	; (adr r1, 800a400 <__ieee754_atan2+0x168>)
 800a3e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3e8:	e777      	b.n	800a2da <__ieee754_atan2+0x42>
 800a3ea:	bf00      	nop
 800a3ec:	f3af 8000 	nop.w
 800a3f0:	33145c07 	.word	0x33145c07
 800a3f4:	3ca1a626 	.word	0x3ca1a626
 800a3f8:	54442d18 	.word	0x54442d18
 800a3fc:	400921fb 	.word	0x400921fb
 800a400:	54442d18 	.word	0x54442d18
 800a404:	3ff921fb 	.word	0x3ff921fb
 800a408:	54442d18 	.word	0x54442d18
 800a40c:	3fe921fb 	.word	0x3fe921fb
 800a410:	0800c170 	.word	0x0800c170
 800a414:	0800c188 	.word	0x0800c188
 800a418:	54442d18 	.word	0x54442d18
 800a41c:	c00921fb 	.word	0xc00921fb
 800a420:	54442d18 	.word	0x54442d18
 800a424:	bff921fb 	.word	0xbff921fb
 800a428:	7ff00000 	.word	0x7ff00000
 800a42c:	00000000 	.word	0x00000000

0800a430 <__ieee754_pow>:
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	ed2d 8b06 	vpush	{d8-d10}
 800a438:	b08d      	sub	sp, #52	; 0x34
 800a43a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a43e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800a442:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a446:	ea56 0100 	orrs.w	r1, r6, r0
 800a44a:	ec53 2b10 	vmov	r2, r3, d0
 800a44e:	f000 84d1 	beq.w	800adf4 <__ieee754_pow+0x9c4>
 800a452:	497f      	ldr	r1, [pc, #508]	; (800a650 <__ieee754_pow+0x220>)
 800a454:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a458:	428c      	cmp	r4, r1
 800a45a:	ee10 8a10 	vmov	r8, s0
 800a45e:	4699      	mov	r9, r3
 800a460:	dc09      	bgt.n	800a476 <__ieee754_pow+0x46>
 800a462:	d103      	bne.n	800a46c <__ieee754_pow+0x3c>
 800a464:	b97a      	cbnz	r2, 800a486 <__ieee754_pow+0x56>
 800a466:	42a6      	cmp	r6, r4
 800a468:	dd02      	ble.n	800a470 <__ieee754_pow+0x40>
 800a46a:	e00c      	b.n	800a486 <__ieee754_pow+0x56>
 800a46c:	428e      	cmp	r6, r1
 800a46e:	dc02      	bgt.n	800a476 <__ieee754_pow+0x46>
 800a470:	428e      	cmp	r6, r1
 800a472:	d110      	bne.n	800a496 <__ieee754_pow+0x66>
 800a474:	b178      	cbz	r0, 800a496 <__ieee754_pow+0x66>
 800a476:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a47a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a47e:	ea54 0308 	orrs.w	r3, r4, r8
 800a482:	f000 84b7 	beq.w	800adf4 <__ieee754_pow+0x9c4>
 800a486:	4873      	ldr	r0, [pc, #460]	; (800a654 <__ieee754_pow+0x224>)
 800a488:	b00d      	add	sp, #52	; 0x34
 800a48a:	ecbd 8b06 	vpop	{d8-d10}
 800a48e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a492:	f001 bd05 	b.w	800bea0 <nan>
 800a496:	f1b9 0f00 	cmp.w	r9, #0
 800a49a:	da36      	bge.n	800a50a <__ieee754_pow+0xda>
 800a49c:	496e      	ldr	r1, [pc, #440]	; (800a658 <__ieee754_pow+0x228>)
 800a49e:	428e      	cmp	r6, r1
 800a4a0:	dc51      	bgt.n	800a546 <__ieee754_pow+0x116>
 800a4a2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800a4a6:	428e      	cmp	r6, r1
 800a4a8:	f340 84af 	ble.w	800ae0a <__ieee754_pow+0x9da>
 800a4ac:	1531      	asrs	r1, r6, #20
 800a4ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a4b2:	2914      	cmp	r1, #20
 800a4b4:	dd0f      	ble.n	800a4d6 <__ieee754_pow+0xa6>
 800a4b6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800a4ba:	fa20 fc01 	lsr.w	ip, r0, r1
 800a4be:	fa0c f101 	lsl.w	r1, ip, r1
 800a4c2:	4281      	cmp	r1, r0
 800a4c4:	f040 84a1 	bne.w	800ae0a <__ieee754_pow+0x9da>
 800a4c8:	f00c 0c01 	and.w	ip, ip, #1
 800a4cc:	f1cc 0102 	rsb	r1, ip, #2
 800a4d0:	9100      	str	r1, [sp, #0]
 800a4d2:	b180      	cbz	r0, 800a4f6 <__ieee754_pow+0xc6>
 800a4d4:	e059      	b.n	800a58a <__ieee754_pow+0x15a>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d155      	bne.n	800a586 <__ieee754_pow+0x156>
 800a4da:	f1c1 0114 	rsb	r1, r1, #20
 800a4de:	fa46 fc01 	asr.w	ip, r6, r1
 800a4e2:	fa0c f101 	lsl.w	r1, ip, r1
 800a4e6:	42b1      	cmp	r1, r6
 800a4e8:	f040 848c 	bne.w	800ae04 <__ieee754_pow+0x9d4>
 800a4ec:	f00c 0c01 	and.w	ip, ip, #1
 800a4f0:	f1cc 0102 	rsb	r1, ip, #2
 800a4f4:	9100      	str	r1, [sp, #0]
 800a4f6:	4959      	ldr	r1, [pc, #356]	; (800a65c <__ieee754_pow+0x22c>)
 800a4f8:	428e      	cmp	r6, r1
 800a4fa:	d12d      	bne.n	800a558 <__ieee754_pow+0x128>
 800a4fc:	2f00      	cmp	r7, #0
 800a4fe:	da79      	bge.n	800a5f4 <__ieee754_pow+0x1c4>
 800a500:	4956      	ldr	r1, [pc, #344]	; (800a65c <__ieee754_pow+0x22c>)
 800a502:	2000      	movs	r0, #0
 800a504:	f7f6 f95a 	bl	80007bc <__aeabi_ddiv>
 800a508:	e016      	b.n	800a538 <__ieee754_pow+0x108>
 800a50a:	2100      	movs	r1, #0
 800a50c:	9100      	str	r1, [sp, #0]
 800a50e:	2800      	cmp	r0, #0
 800a510:	d13b      	bne.n	800a58a <__ieee754_pow+0x15a>
 800a512:	494f      	ldr	r1, [pc, #316]	; (800a650 <__ieee754_pow+0x220>)
 800a514:	428e      	cmp	r6, r1
 800a516:	d1ee      	bne.n	800a4f6 <__ieee754_pow+0xc6>
 800a518:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a51c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a520:	ea53 0308 	orrs.w	r3, r3, r8
 800a524:	f000 8466 	beq.w	800adf4 <__ieee754_pow+0x9c4>
 800a528:	4b4d      	ldr	r3, [pc, #308]	; (800a660 <__ieee754_pow+0x230>)
 800a52a:	429c      	cmp	r4, r3
 800a52c:	dd0d      	ble.n	800a54a <__ieee754_pow+0x11a>
 800a52e:	2f00      	cmp	r7, #0
 800a530:	f280 8464 	bge.w	800adfc <__ieee754_pow+0x9cc>
 800a534:	2000      	movs	r0, #0
 800a536:	2100      	movs	r1, #0
 800a538:	ec41 0b10 	vmov	d0, r0, r1
 800a53c:	b00d      	add	sp, #52	; 0x34
 800a53e:	ecbd 8b06 	vpop	{d8-d10}
 800a542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a546:	2102      	movs	r1, #2
 800a548:	e7e0      	b.n	800a50c <__ieee754_pow+0xdc>
 800a54a:	2f00      	cmp	r7, #0
 800a54c:	daf2      	bge.n	800a534 <__ieee754_pow+0x104>
 800a54e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800a552:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a556:	e7ef      	b.n	800a538 <__ieee754_pow+0x108>
 800a558:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a55c:	d104      	bne.n	800a568 <__ieee754_pow+0x138>
 800a55e:	4610      	mov	r0, r2
 800a560:	4619      	mov	r1, r3
 800a562:	f7f6 f801 	bl	8000568 <__aeabi_dmul>
 800a566:	e7e7      	b.n	800a538 <__ieee754_pow+0x108>
 800a568:	493e      	ldr	r1, [pc, #248]	; (800a664 <__ieee754_pow+0x234>)
 800a56a:	428f      	cmp	r7, r1
 800a56c:	d10d      	bne.n	800a58a <__ieee754_pow+0x15a>
 800a56e:	f1b9 0f00 	cmp.w	r9, #0
 800a572:	db0a      	blt.n	800a58a <__ieee754_pow+0x15a>
 800a574:	ec43 2b10 	vmov	d0, r2, r3
 800a578:	b00d      	add	sp, #52	; 0x34
 800a57a:	ecbd 8b06 	vpop	{d8-d10}
 800a57e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a582:	f000 be83 	b.w	800b28c <__ieee754_sqrt>
 800a586:	2100      	movs	r1, #0
 800a588:	9100      	str	r1, [sp, #0]
 800a58a:	ec43 2b10 	vmov	d0, r2, r3
 800a58e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a592:	f7ff faa1 	bl	8009ad8 <fabs>
 800a596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a59a:	ec51 0b10 	vmov	r0, r1, d0
 800a59e:	f1b8 0f00 	cmp.w	r8, #0
 800a5a2:	d12a      	bne.n	800a5fa <__ieee754_pow+0x1ca>
 800a5a4:	b12c      	cbz	r4, 800a5b2 <__ieee754_pow+0x182>
 800a5a6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a65c <__ieee754_pow+0x22c>
 800a5aa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800a5ae:	45e6      	cmp	lr, ip
 800a5b0:	d123      	bne.n	800a5fa <__ieee754_pow+0x1ca>
 800a5b2:	2f00      	cmp	r7, #0
 800a5b4:	da05      	bge.n	800a5c2 <__ieee754_pow+0x192>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	4927      	ldr	r1, [pc, #156]	; (800a65c <__ieee754_pow+0x22c>)
 800a5be:	f7f6 f8fd 	bl	80007bc <__aeabi_ddiv>
 800a5c2:	f1b9 0f00 	cmp.w	r9, #0
 800a5c6:	dab7      	bge.n	800a538 <__ieee754_pow+0x108>
 800a5c8:	9b00      	ldr	r3, [sp, #0]
 800a5ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a5ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a5d2:	4323      	orrs	r3, r4
 800a5d4:	d108      	bne.n	800a5e8 <__ieee754_pow+0x1b8>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4610      	mov	r0, r2
 800a5dc:	4619      	mov	r1, r3
 800a5de:	f7f5 fe0b 	bl	80001f8 <__aeabi_dsub>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	e78d      	b.n	800a504 <__ieee754_pow+0xd4>
 800a5e8:	9b00      	ldr	r3, [sp, #0]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d1a4      	bne.n	800a538 <__ieee754_pow+0x108>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	e79e      	b.n	800a538 <__ieee754_pow+0x108>
 800a5fa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800a5fe:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800a602:	950a      	str	r5, [sp, #40]	; 0x28
 800a604:	9d00      	ldr	r5, [sp, #0]
 800a606:	46ac      	mov	ip, r5
 800a608:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a60a:	ea5c 0505 	orrs.w	r5, ip, r5
 800a60e:	d0e4      	beq.n	800a5da <__ieee754_pow+0x1aa>
 800a610:	4b15      	ldr	r3, [pc, #84]	; (800a668 <__ieee754_pow+0x238>)
 800a612:	429e      	cmp	r6, r3
 800a614:	f340 80fc 	ble.w	800a810 <__ieee754_pow+0x3e0>
 800a618:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a61c:	429e      	cmp	r6, r3
 800a61e:	4b10      	ldr	r3, [pc, #64]	; (800a660 <__ieee754_pow+0x230>)
 800a620:	dd07      	ble.n	800a632 <__ieee754_pow+0x202>
 800a622:	429c      	cmp	r4, r3
 800a624:	dc0a      	bgt.n	800a63c <__ieee754_pow+0x20c>
 800a626:	2f00      	cmp	r7, #0
 800a628:	da84      	bge.n	800a534 <__ieee754_pow+0x104>
 800a62a:	a307      	add	r3, pc, #28	; (adr r3, 800a648 <__ieee754_pow+0x218>)
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	e795      	b.n	800a55e <__ieee754_pow+0x12e>
 800a632:	429c      	cmp	r4, r3
 800a634:	dbf7      	blt.n	800a626 <__ieee754_pow+0x1f6>
 800a636:	4b09      	ldr	r3, [pc, #36]	; (800a65c <__ieee754_pow+0x22c>)
 800a638:	429c      	cmp	r4, r3
 800a63a:	dd17      	ble.n	800a66c <__ieee754_pow+0x23c>
 800a63c:	2f00      	cmp	r7, #0
 800a63e:	dcf4      	bgt.n	800a62a <__ieee754_pow+0x1fa>
 800a640:	e778      	b.n	800a534 <__ieee754_pow+0x104>
 800a642:	bf00      	nop
 800a644:	f3af 8000 	nop.w
 800a648:	8800759c 	.word	0x8800759c
 800a64c:	7e37e43c 	.word	0x7e37e43c
 800a650:	7ff00000 	.word	0x7ff00000
 800a654:	0800c168 	.word	0x0800c168
 800a658:	433fffff 	.word	0x433fffff
 800a65c:	3ff00000 	.word	0x3ff00000
 800a660:	3fefffff 	.word	0x3fefffff
 800a664:	3fe00000 	.word	0x3fe00000
 800a668:	41e00000 	.word	0x41e00000
 800a66c:	4b64      	ldr	r3, [pc, #400]	; (800a800 <__ieee754_pow+0x3d0>)
 800a66e:	2200      	movs	r2, #0
 800a670:	f7f5 fdc2 	bl	80001f8 <__aeabi_dsub>
 800a674:	a356      	add	r3, pc, #344	; (adr r3, 800a7d0 <__ieee754_pow+0x3a0>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	4604      	mov	r4, r0
 800a67c:	460d      	mov	r5, r1
 800a67e:	f7f5 ff73 	bl	8000568 <__aeabi_dmul>
 800a682:	a355      	add	r3, pc, #340	; (adr r3, 800a7d8 <__ieee754_pow+0x3a8>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	4606      	mov	r6, r0
 800a68a:	460f      	mov	r7, r1
 800a68c:	4620      	mov	r0, r4
 800a68e:	4629      	mov	r1, r5
 800a690:	f7f5 ff6a 	bl	8000568 <__aeabi_dmul>
 800a694:	4b5b      	ldr	r3, [pc, #364]	; (800a804 <__ieee754_pow+0x3d4>)
 800a696:	4682      	mov	sl, r0
 800a698:	468b      	mov	fp, r1
 800a69a:	2200      	movs	r2, #0
 800a69c:	4620      	mov	r0, r4
 800a69e:	4629      	mov	r1, r5
 800a6a0:	f7f5 ff62 	bl	8000568 <__aeabi_dmul>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	a14d      	add	r1, pc, #308	; (adr r1, 800a7e0 <__ieee754_pow+0x3b0>)
 800a6aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ae:	f7f5 fda3 	bl	80001f8 <__aeabi_dsub>
 800a6b2:	4622      	mov	r2, r4
 800a6b4:	462b      	mov	r3, r5
 800a6b6:	f7f5 ff57 	bl	8000568 <__aeabi_dmul>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	2000      	movs	r0, #0
 800a6c0:	4951      	ldr	r1, [pc, #324]	; (800a808 <__ieee754_pow+0x3d8>)
 800a6c2:	f7f5 fd99 	bl	80001f8 <__aeabi_dsub>
 800a6c6:	4622      	mov	r2, r4
 800a6c8:	4680      	mov	r8, r0
 800a6ca:	4689      	mov	r9, r1
 800a6cc:	462b      	mov	r3, r5
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	f7f5 ff49 	bl	8000568 <__aeabi_dmul>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4640      	mov	r0, r8
 800a6dc:	4649      	mov	r1, r9
 800a6de:	f7f5 ff43 	bl	8000568 <__aeabi_dmul>
 800a6e2:	a341      	add	r3, pc, #260	; (adr r3, 800a7e8 <__ieee754_pow+0x3b8>)
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	f7f5 ff3e 	bl	8000568 <__aeabi_dmul>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4650      	mov	r0, sl
 800a6f2:	4659      	mov	r1, fp
 800a6f4:	f7f5 fd80 	bl	80001f8 <__aeabi_dsub>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4680      	mov	r8, r0
 800a6fe:	4689      	mov	r9, r1
 800a700:	4630      	mov	r0, r6
 800a702:	4639      	mov	r1, r7
 800a704:	f7f5 fd7a 	bl	80001fc <__adddf3>
 800a708:	2400      	movs	r4, #0
 800a70a:	4632      	mov	r2, r6
 800a70c:	463b      	mov	r3, r7
 800a70e:	4620      	mov	r0, r4
 800a710:	460d      	mov	r5, r1
 800a712:	f7f5 fd71 	bl	80001f8 <__aeabi_dsub>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	4640      	mov	r0, r8
 800a71c:	4649      	mov	r1, r9
 800a71e:	f7f5 fd6b 	bl	80001f8 <__aeabi_dsub>
 800a722:	9b00      	ldr	r3, [sp, #0]
 800a724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a726:	3b01      	subs	r3, #1
 800a728:	4313      	orrs	r3, r2
 800a72a:	4682      	mov	sl, r0
 800a72c:	468b      	mov	fp, r1
 800a72e:	f040 81f1 	bne.w	800ab14 <__ieee754_pow+0x6e4>
 800a732:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a7f0 <__ieee754_pow+0x3c0>
 800a736:	eeb0 8a47 	vmov.f32	s16, s14
 800a73a:	eef0 8a67 	vmov.f32	s17, s15
 800a73e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a742:	2600      	movs	r6, #0
 800a744:	4632      	mov	r2, r6
 800a746:	463b      	mov	r3, r7
 800a748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a74c:	f7f5 fd54 	bl	80001f8 <__aeabi_dsub>
 800a750:	4622      	mov	r2, r4
 800a752:	462b      	mov	r3, r5
 800a754:	f7f5 ff08 	bl	8000568 <__aeabi_dmul>
 800a758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a75c:	4680      	mov	r8, r0
 800a75e:	4689      	mov	r9, r1
 800a760:	4650      	mov	r0, sl
 800a762:	4659      	mov	r1, fp
 800a764:	f7f5 ff00 	bl	8000568 <__aeabi_dmul>
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	4640      	mov	r0, r8
 800a76e:	4649      	mov	r1, r9
 800a770:	f7f5 fd44 	bl	80001fc <__adddf3>
 800a774:	4632      	mov	r2, r6
 800a776:	463b      	mov	r3, r7
 800a778:	4680      	mov	r8, r0
 800a77a:	4689      	mov	r9, r1
 800a77c:	4620      	mov	r0, r4
 800a77e:	4629      	mov	r1, r5
 800a780:	f7f5 fef2 	bl	8000568 <__aeabi_dmul>
 800a784:	460b      	mov	r3, r1
 800a786:	4604      	mov	r4, r0
 800a788:	460d      	mov	r5, r1
 800a78a:	4602      	mov	r2, r0
 800a78c:	4649      	mov	r1, r9
 800a78e:	4640      	mov	r0, r8
 800a790:	f7f5 fd34 	bl	80001fc <__adddf3>
 800a794:	4b1d      	ldr	r3, [pc, #116]	; (800a80c <__ieee754_pow+0x3dc>)
 800a796:	4299      	cmp	r1, r3
 800a798:	ec45 4b19 	vmov	d9, r4, r5
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	468b      	mov	fp, r1
 800a7a2:	f340 82fe 	ble.w	800ada2 <__ieee754_pow+0x972>
 800a7a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a7aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a7ae:	4303      	orrs	r3, r0
 800a7b0:	f000 81f0 	beq.w	800ab94 <__ieee754_pow+0x764>
 800a7b4:	a310      	add	r3, pc, #64	; (adr r3, 800a7f8 <__ieee754_pow+0x3c8>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	ec51 0b18 	vmov	r0, r1, d8
 800a7be:	f7f5 fed3 	bl	8000568 <__aeabi_dmul>
 800a7c2:	a30d      	add	r3, pc, #52	; (adr r3, 800a7f8 <__ieee754_pow+0x3c8>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	e6cb      	b.n	800a562 <__ieee754_pow+0x132>
 800a7ca:	bf00      	nop
 800a7cc:	f3af 8000 	nop.w
 800a7d0:	60000000 	.word	0x60000000
 800a7d4:	3ff71547 	.word	0x3ff71547
 800a7d8:	f85ddf44 	.word	0xf85ddf44
 800a7dc:	3e54ae0b 	.word	0x3e54ae0b
 800a7e0:	55555555 	.word	0x55555555
 800a7e4:	3fd55555 	.word	0x3fd55555
 800a7e8:	652b82fe 	.word	0x652b82fe
 800a7ec:	3ff71547 	.word	0x3ff71547
 800a7f0:	00000000 	.word	0x00000000
 800a7f4:	bff00000 	.word	0xbff00000
 800a7f8:	8800759c 	.word	0x8800759c
 800a7fc:	7e37e43c 	.word	0x7e37e43c
 800a800:	3ff00000 	.word	0x3ff00000
 800a804:	3fd00000 	.word	0x3fd00000
 800a808:	3fe00000 	.word	0x3fe00000
 800a80c:	408fffff 	.word	0x408fffff
 800a810:	4bd7      	ldr	r3, [pc, #860]	; (800ab70 <__ieee754_pow+0x740>)
 800a812:	ea03 0309 	and.w	r3, r3, r9
 800a816:	2200      	movs	r2, #0
 800a818:	b92b      	cbnz	r3, 800a826 <__ieee754_pow+0x3f6>
 800a81a:	4bd6      	ldr	r3, [pc, #856]	; (800ab74 <__ieee754_pow+0x744>)
 800a81c:	f7f5 fea4 	bl	8000568 <__aeabi_dmul>
 800a820:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a824:	460c      	mov	r4, r1
 800a826:	1523      	asrs	r3, r4, #20
 800a828:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a82c:	4413      	add	r3, r2
 800a82e:	9309      	str	r3, [sp, #36]	; 0x24
 800a830:	4bd1      	ldr	r3, [pc, #836]	; (800ab78 <__ieee754_pow+0x748>)
 800a832:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a836:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a83a:	429c      	cmp	r4, r3
 800a83c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a840:	dd08      	ble.n	800a854 <__ieee754_pow+0x424>
 800a842:	4bce      	ldr	r3, [pc, #824]	; (800ab7c <__ieee754_pow+0x74c>)
 800a844:	429c      	cmp	r4, r3
 800a846:	f340 8163 	ble.w	800ab10 <__ieee754_pow+0x6e0>
 800a84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84c:	3301      	adds	r3, #1
 800a84e:	9309      	str	r3, [sp, #36]	; 0x24
 800a850:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a854:	2400      	movs	r4, #0
 800a856:	00e3      	lsls	r3, r4, #3
 800a858:	930b      	str	r3, [sp, #44]	; 0x2c
 800a85a:	4bc9      	ldr	r3, [pc, #804]	; (800ab80 <__ieee754_pow+0x750>)
 800a85c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a860:	ed93 7b00 	vldr	d7, [r3]
 800a864:	4629      	mov	r1, r5
 800a866:	ec53 2b17 	vmov	r2, r3, d7
 800a86a:	eeb0 8a47 	vmov.f32	s16, s14
 800a86e:	eef0 8a67 	vmov.f32	s17, s15
 800a872:	4682      	mov	sl, r0
 800a874:	f7f5 fcc0 	bl	80001f8 <__aeabi_dsub>
 800a878:	4652      	mov	r2, sl
 800a87a:	4606      	mov	r6, r0
 800a87c:	460f      	mov	r7, r1
 800a87e:	462b      	mov	r3, r5
 800a880:	ec51 0b18 	vmov	r0, r1, d8
 800a884:	f7f5 fcba 	bl	80001fc <__adddf3>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	2000      	movs	r0, #0
 800a88e:	49bd      	ldr	r1, [pc, #756]	; (800ab84 <__ieee754_pow+0x754>)
 800a890:	f7f5 ff94 	bl	80007bc <__aeabi_ddiv>
 800a894:	ec41 0b19 	vmov	d9, r0, r1
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f5 fe62 	bl	8000568 <__aeabi_dmul>
 800a8a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9304      	str	r3, [sp, #16]
 800a8b4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a8b8:	46ab      	mov	fp, r5
 800a8ba:	106d      	asrs	r5, r5, #1
 800a8bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a8c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a8c4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	4614      	mov	r4, r2
 800a8d0:	461d      	mov	r5, r3
 800a8d2:	f7f5 fe49 	bl	8000568 <__aeabi_dmul>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4630      	mov	r0, r6
 800a8dc:	4639      	mov	r1, r7
 800a8de:	f7f5 fc8b 	bl	80001f8 <__aeabi_dsub>
 800a8e2:	ec53 2b18 	vmov	r2, r3, d8
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	460f      	mov	r7, r1
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	f7f5 fc83 	bl	80001f8 <__aeabi_dsub>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4650      	mov	r0, sl
 800a8f8:	4659      	mov	r1, fp
 800a8fa:	f7f5 fc7d 	bl	80001f8 <__aeabi_dsub>
 800a8fe:	4642      	mov	r2, r8
 800a900:	464b      	mov	r3, r9
 800a902:	f7f5 fe31 	bl	8000568 <__aeabi_dmul>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4630      	mov	r0, r6
 800a90c:	4639      	mov	r1, r7
 800a90e:	f7f5 fc73 	bl	80001f8 <__aeabi_dsub>
 800a912:	ec53 2b19 	vmov	r2, r3, d9
 800a916:	f7f5 fe27 	bl	8000568 <__aeabi_dmul>
 800a91a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a91e:	ec41 0b18 	vmov	d8, r0, r1
 800a922:	4610      	mov	r0, r2
 800a924:	4619      	mov	r1, r3
 800a926:	f7f5 fe1f 	bl	8000568 <__aeabi_dmul>
 800a92a:	a37d      	add	r3, pc, #500	; (adr r3, 800ab20 <__ieee754_pow+0x6f0>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	4604      	mov	r4, r0
 800a932:	460d      	mov	r5, r1
 800a934:	f7f5 fe18 	bl	8000568 <__aeabi_dmul>
 800a938:	a37b      	add	r3, pc, #492	; (adr r3, 800ab28 <__ieee754_pow+0x6f8>)
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	f7f5 fc5d 	bl	80001fc <__adddf3>
 800a942:	4622      	mov	r2, r4
 800a944:	462b      	mov	r3, r5
 800a946:	f7f5 fe0f 	bl	8000568 <__aeabi_dmul>
 800a94a:	a379      	add	r3, pc, #484	; (adr r3, 800ab30 <__ieee754_pow+0x700>)
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	f7f5 fc54 	bl	80001fc <__adddf3>
 800a954:	4622      	mov	r2, r4
 800a956:	462b      	mov	r3, r5
 800a958:	f7f5 fe06 	bl	8000568 <__aeabi_dmul>
 800a95c:	a376      	add	r3, pc, #472	; (adr r3, 800ab38 <__ieee754_pow+0x708>)
 800a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a962:	f7f5 fc4b 	bl	80001fc <__adddf3>
 800a966:	4622      	mov	r2, r4
 800a968:	462b      	mov	r3, r5
 800a96a:	f7f5 fdfd 	bl	8000568 <__aeabi_dmul>
 800a96e:	a374      	add	r3, pc, #464	; (adr r3, 800ab40 <__ieee754_pow+0x710>)
 800a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a974:	f7f5 fc42 	bl	80001fc <__adddf3>
 800a978:	4622      	mov	r2, r4
 800a97a:	462b      	mov	r3, r5
 800a97c:	f7f5 fdf4 	bl	8000568 <__aeabi_dmul>
 800a980:	a371      	add	r3, pc, #452	; (adr r3, 800ab48 <__ieee754_pow+0x718>)
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f7f5 fc39 	bl	80001fc <__adddf3>
 800a98a:	4622      	mov	r2, r4
 800a98c:	4606      	mov	r6, r0
 800a98e:	460f      	mov	r7, r1
 800a990:	462b      	mov	r3, r5
 800a992:	4620      	mov	r0, r4
 800a994:	4629      	mov	r1, r5
 800a996:	f7f5 fde7 	bl	8000568 <__aeabi_dmul>
 800a99a:	4602      	mov	r2, r0
 800a99c:	460b      	mov	r3, r1
 800a99e:	4630      	mov	r0, r6
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	f7f5 fde1 	bl	8000568 <__aeabi_dmul>
 800a9a6:	4642      	mov	r2, r8
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	460d      	mov	r5, r1
 800a9ac:	464b      	mov	r3, r9
 800a9ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9b2:	f7f5 fc23 	bl	80001fc <__adddf3>
 800a9b6:	ec53 2b18 	vmov	r2, r3, d8
 800a9ba:	f7f5 fdd5 	bl	8000568 <__aeabi_dmul>
 800a9be:	4622      	mov	r2, r4
 800a9c0:	462b      	mov	r3, r5
 800a9c2:	f7f5 fc1b 	bl	80001fc <__adddf3>
 800a9c6:	4642      	mov	r2, r8
 800a9c8:	4682      	mov	sl, r0
 800a9ca:	468b      	mov	fp, r1
 800a9cc:	464b      	mov	r3, r9
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	f7f5 fdc9 	bl	8000568 <__aeabi_dmul>
 800a9d6:	4b6c      	ldr	r3, [pc, #432]	; (800ab88 <__ieee754_pow+0x758>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460f      	mov	r7, r1
 800a9de:	f7f5 fc0d 	bl	80001fc <__adddf3>
 800a9e2:	4652      	mov	r2, sl
 800a9e4:	465b      	mov	r3, fp
 800a9e6:	f7f5 fc09 	bl	80001fc <__adddf3>
 800a9ea:	9c04      	ldr	r4, [sp, #16]
 800a9ec:	460d      	mov	r5, r1
 800a9ee:	4622      	mov	r2, r4
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	f7f5 fdb7 	bl	8000568 <__aeabi_dmul>
 800a9fa:	4b63      	ldr	r3, [pc, #396]	; (800ab88 <__ieee754_pow+0x758>)
 800a9fc:	4680      	mov	r8, r0
 800a9fe:	4689      	mov	r9, r1
 800aa00:	2200      	movs	r2, #0
 800aa02:	4620      	mov	r0, r4
 800aa04:	4629      	mov	r1, r5
 800aa06:	f7f5 fbf7 	bl	80001f8 <__aeabi_dsub>
 800aa0a:	4632      	mov	r2, r6
 800aa0c:	463b      	mov	r3, r7
 800aa0e:	f7f5 fbf3 	bl	80001f8 <__aeabi_dsub>
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	4650      	mov	r0, sl
 800aa18:	4659      	mov	r1, fp
 800aa1a:	f7f5 fbed 	bl	80001f8 <__aeabi_dsub>
 800aa1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa22:	f7f5 fda1 	bl	8000568 <__aeabi_dmul>
 800aa26:	4622      	mov	r2, r4
 800aa28:	4606      	mov	r6, r0
 800aa2a:	460f      	mov	r7, r1
 800aa2c:	462b      	mov	r3, r5
 800aa2e:	ec51 0b18 	vmov	r0, r1, d8
 800aa32:	f7f5 fd99 	bl	8000568 <__aeabi_dmul>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	f7f5 fbdd 	bl	80001fc <__adddf3>
 800aa42:	4606      	mov	r6, r0
 800aa44:	460f      	mov	r7, r1
 800aa46:	4602      	mov	r2, r0
 800aa48:	460b      	mov	r3, r1
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	f7f5 fbd5 	bl	80001fc <__adddf3>
 800aa52:	9c04      	ldr	r4, [sp, #16]
 800aa54:	a33e      	add	r3, pc, #248	; (adr r3, 800ab50 <__ieee754_pow+0x720>)
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	460d      	mov	r5, r1
 800aa5e:	f7f5 fd83 	bl	8000568 <__aeabi_dmul>
 800aa62:	4642      	mov	r2, r8
 800aa64:	ec41 0b18 	vmov	d8, r0, r1
 800aa68:	464b      	mov	r3, r9
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	f7f5 fbc3 	bl	80001f8 <__aeabi_dsub>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	4630      	mov	r0, r6
 800aa78:	4639      	mov	r1, r7
 800aa7a:	f7f5 fbbd 	bl	80001f8 <__aeabi_dsub>
 800aa7e:	a336      	add	r3, pc, #216	; (adr r3, 800ab58 <__ieee754_pow+0x728>)
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	f7f5 fd70 	bl	8000568 <__aeabi_dmul>
 800aa88:	a335      	add	r3, pc, #212	; (adr r3, 800ab60 <__ieee754_pow+0x730>)
 800aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8e:	4606      	mov	r6, r0
 800aa90:	460f      	mov	r7, r1
 800aa92:	4620      	mov	r0, r4
 800aa94:	4629      	mov	r1, r5
 800aa96:	f7f5 fd67 	bl	8000568 <__aeabi_dmul>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	f7f5 fbab 	bl	80001fc <__adddf3>
 800aaa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaa8:	4b38      	ldr	r3, [pc, #224]	; (800ab8c <__ieee754_pow+0x75c>)
 800aaaa:	4413      	add	r3, r2
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	f7f5 fba4 	bl	80001fc <__adddf3>
 800aab4:	4682      	mov	sl, r0
 800aab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab8:	468b      	mov	fp, r1
 800aaba:	f7f5 fceb 	bl	8000494 <__aeabi_i2d>
 800aabe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aac0:	4b33      	ldr	r3, [pc, #204]	; (800ab90 <__ieee754_pow+0x760>)
 800aac2:	4413      	add	r3, r2
 800aac4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aac8:	4606      	mov	r6, r0
 800aaca:	460f      	mov	r7, r1
 800aacc:	4652      	mov	r2, sl
 800aace:	465b      	mov	r3, fp
 800aad0:	ec51 0b18 	vmov	r0, r1, d8
 800aad4:	f7f5 fb92 	bl	80001fc <__adddf3>
 800aad8:	4642      	mov	r2, r8
 800aada:	464b      	mov	r3, r9
 800aadc:	f7f5 fb8e 	bl	80001fc <__adddf3>
 800aae0:	4632      	mov	r2, r6
 800aae2:	463b      	mov	r3, r7
 800aae4:	f7f5 fb8a 	bl	80001fc <__adddf3>
 800aae8:	9c04      	ldr	r4, [sp, #16]
 800aaea:	4632      	mov	r2, r6
 800aaec:	463b      	mov	r3, r7
 800aaee:	4620      	mov	r0, r4
 800aaf0:	460d      	mov	r5, r1
 800aaf2:	f7f5 fb81 	bl	80001f8 <__aeabi_dsub>
 800aaf6:	4642      	mov	r2, r8
 800aaf8:	464b      	mov	r3, r9
 800aafa:	f7f5 fb7d 	bl	80001f8 <__aeabi_dsub>
 800aafe:	ec53 2b18 	vmov	r2, r3, d8
 800ab02:	f7f5 fb79 	bl	80001f8 <__aeabi_dsub>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	4650      	mov	r0, sl
 800ab0c:	4659      	mov	r1, fp
 800ab0e:	e606      	b.n	800a71e <__ieee754_pow+0x2ee>
 800ab10:	2401      	movs	r4, #1
 800ab12:	e6a0      	b.n	800a856 <__ieee754_pow+0x426>
 800ab14:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ab68 <__ieee754_pow+0x738>
 800ab18:	e60d      	b.n	800a736 <__ieee754_pow+0x306>
 800ab1a:	bf00      	nop
 800ab1c:	f3af 8000 	nop.w
 800ab20:	4a454eef 	.word	0x4a454eef
 800ab24:	3fca7e28 	.word	0x3fca7e28
 800ab28:	93c9db65 	.word	0x93c9db65
 800ab2c:	3fcd864a 	.word	0x3fcd864a
 800ab30:	a91d4101 	.word	0xa91d4101
 800ab34:	3fd17460 	.word	0x3fd17460
 800ab38:	518f264d 	.word	0x518f264d
 800ab3c:	3fd55555 	.word	0x3fd55555
 800ab40:	db6fabff 	.word	0xdb6fabff
 800ab44:	3fdb6db6 	.word	0x3fdb6db6
 800ab48:	33333303 	.word	0x33333303
 800ab4c:	3fe33333 	.word	0x3fe33333
 800ab50:	e0000000 	.word	0xe0000000
 800ab54:	3feec709 	.word	0x3feec709
 800ab58:	dc3a03fd 	.word	0xdc3a03fd
 800ab5c:	3feec709 	.word	0x3feec709
 800ab60:	145b01f5 	.word	0x145b01f5
 800ab64:	be3e2fe0 	.word	0xbe3e2fe0
 800ab68:	00000000 	.word	0x00000000
 800ab6c:	3ff00000 	.word	0x3ff00000
 800ab70:	7ff00000 	.word	0x7ff00000
 800ab74:	43400000 	.word	0x43400000
 800ab78:	0003988e 	.word	0x0003988e
 800ab7c:	000bb679 	.word	0x000bb679
 800ab80:	0800c1a0 	.word	0x0800c1a0
 800ab84:	3ff00000 	.word	0x3ff00000
 800ab88:	40080000 	.word	0x40080000
 800ab8c:	0800c1c0 	.word	0x0800c1c0
 800ab90:	0800c1b0 	.word	0x0800c1b0
 800ab94:	a3b5      	add	r3, pc, #724	; (adr r3, 800ae6c <__ieee754_pow+0xa3c>)
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	4649      	mov	r1, r9
 800ab9e:	f7f5 fb2d 	bl	80001fc <__adddf3>
 800aba2:	4622      	mov	r2, r4
 800aba4:	ec41 0b1a 	vmov	d10, r0, r1
 800aba8:	462b      	mov	r3, r5
 800abaa:	4630      	mov	r0, r6
 800abac:	4639      	mov	r1, r7
 800abae:	f7f5 fb23 	bl	80001f8 <__aeabi_dsub>
 800abb2:	4602      	mov	r2, r0
 800abb4:	460b      	mov	r3, r1
 800abb6:	ec51 0b1a 	vmov	r0, r1, d10
 800abba:	f7f5 ff65 	bl	8000a88 <__aeabi_dcmpgt>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f47f adf8 	bne.w	800a7b4 <__ieee754_pow+0x384>
 800abc4:	4aa4      	ldr	r2, [pc, #656]	; (800ae58 <__ieee754_pow+0xa28>)
 800abc6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800abca:	4293      	cmp	r3, r2
 800abcc:	f340 810b 	ble.w	800ade6 <__ieee754_pow+0x9b6>
 800abd0:	151b      	asrs	r3, r3, #20
 800abd2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800abd6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800abda:	fa4a f303 	asr.w	r3, sl, r3
 800abde:	445b      	add	r3, fp
 800abe0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800abe4:	4e9d      	ldr	r6, [pc, #628]	; (800ae5c <__ieee754_pow+0xa2c>)
 800abe6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800abea:	4116      	asrs	r6, r2
 800abec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800abf0:	2000      	movs	r0, #0
 800abf2:	ea23 0106 	bic.w	r1, r3, r6
 800abf6:	f1c2 0214 	rsb	r2, r2, #20
 800abfa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800abfe:	fa4a fa02 	asr.w	sl, sl, r2
 800ac02:	f1bb 0f00 	cmp.w	fp, #0
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	bfb8      	it	lt
 800ac10:	f1ca 0a00 	rsblt	sl, sl, #0
 800ac14:	f7f5 faf0 	bl	80001f8 <__aeabi_dsub>
 800ac18:	ec41 0b19 	vmov	d9, r0, r1
 800ac1c:	4642      	mov	r2, r8
 800ac1e:	464b      	mov	r3, r9
 800ac20:	ec51 0b19 	vmov	r0, r1, d9
 800ac24:	f7f5 faea 	bl	80001fc <__adddf3>
 800ac28:	2400      	movs	r4, #0
 800ac2a:	a379      	add	r3, pc, #484	; (adr r3, 800ae10 <__ieee754_pow+0x9e0>)
 800ac2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac30:	4620      	mov	r0, r4
 800ac32:	460d      	mov	r5, r1
 800ac34:	f7f5 fc98 	bl	8000568 <__aeabi_dmul>
 800ac38:	ec53 2b19 	vmov	r2, r3, d9
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	460f      	mov	r7, r1
 800ac40:	4620      	mov	r0, r4
 800ac42:	4629      	mov	r1, r5
 800ac44:	f7f5 fad8 	bl	80001f8 <__aeabi_dsub>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4640      	mov	r0, r8
 800ac4e:	4649      	mov	r1, r9
 800ac50:	f7f5 fad2 	bl	80001f8 <__aeabi_dsub>
 800ac54:	a370      	add	r3, pc, #448	; (adr r3, 800ae18 <__ieee754_pow+0x9e8>)
 800ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5a:	f7f5 fc85 	bl	8000568 <__aeabi_dmul>
 800ac5e:	a370      	add	r3, pc, #448	; (adr r3, 800ae20 <__ieee754_pow+0x9f0>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	4680      	mov	r8, r0
 800ac66:	4689      	mov	r9, r1
 800ac68:	4620      	mov	r0, r4
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	f7f5 fc7c 	bl	8000568 <__aeabi_dmul>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	4640      	mov	r0, r8
 800ac76:	4649      	mov	r1, r9
 800ac78:	f7f5 fac0 	bl	80001fc <__adddf3>
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	460d      	mov	r5, r1
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4630      	mov	r0, r6
 800ac86:	4639      	mov	r1, r7
 800ac88:	f7f5 fab8 	bl	80001fc <__adddf3>
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	463b      	mov	r3, r7
 800ac90:	4680      	mov	r8, r0
 800ac92:	4689      	mov	r9, r1
 800ac94:	f7f5 fab0 	bl	80001f8 <__aeabi_dsub>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	4629      	mov	r1, r5
 800aca0:	f7f5 faaa 	bl	80001f8 <__aeabi_dsub>
 800aca4:	4642      	mov	r2, r8
 800aca6:	4606      	mov	r6, r0
 800aca8:	460f      	mov	r7, r1
 800acaa:	464b      	mov	r3, r9
 800acac:	4640      	mov	r0, r8
 800acae:	4649      	mov	r1, r9
 800acb0:	f7f5 fc5a 	bl	8000568 <__aeabi_dmul>
 800acb4:	a35c      	add	r3, pc, #368	; (adr r3, 800ae28 <__ieee754_pow+0x9f8>)
 800acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acba:	4604      	mov	r4, r0
 800acbc:	460d      	mov	r5, r1
 800acbe:	f7f5 fc53 	bl	8000568 <__aeabi_dmul>
 800acc2:	a35b      	add	r3, pc, #364	; (adr r3, 800ae30 <__ieee754_pow+0xa00>)
 800acc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc8:	f7f5 fa96 	bl	80001f8 <__aeabi_dsub>
 800accc:	4622      	mov	r2, r4
 800acce:	462b      	mov	r3, r5
 800acd0:	f7f5 fc4a 	bl	8000568 <__aeabi_dmul>
 800acd4:	a358      	add	r3, pc, #352	; (adr r3, 800ae38 <__ieee754_pow+0xa08>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fa8f 	bl	80001fc <__adddf3>
 800acde:	4622      	mov	r2, r4
 800ace0:	462b      	mov	r3, r5
 800ace2:	f7f5 fc41 	bl	8000568 <__aeabi_dmul>
 800ace6:	a356      	add	r3, pc, #344	; (adr r3, 800ae40 <__ieee754_pow+0xa10>)
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f7f5 fa84 	bl	80001f8 <__aeabi_dsub>
 800acf0:	4622      	mov	r2, r4
 800acf2:	462b      	mov	r3, r5
 800acf4:	f7f5 fc38 	bl	8000568 <__aeabi_dmul>
 800acf8:	a353      	add	r3, pc, #332	; (adr r3, 800ae48 <__ieee754_pow+0xa18>)
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	f7f5 fa7d 	bl	80001fc <__adddf3>
 800ad02:	4622      	mov	r2, r4
 800ad04:	462b      	mov	r3, r5
 800ad06:	f7f5 fc2f 	bl	8000568 <__aeabi_dmul>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4640      	mov	r0, r8
 800ad10:	4649      	mov	r1, r9
 800ad12:	f7f5 fa71 	bl	80001f8 <__aeabi_dsub>
 800ad16:	4604      	mov	r4, r0
 800ad18:	460d      	mov	r5, r1
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4640      	mov	r0, r8
 800ad20:	4649      	mov	r1, r9
 800ad22:	f7f5 fc21 	bl	8000568 <__aeabi_dmul>
 800ad26:	2200      	movs	r2, #0
 800ad28:	ec41 0b19 	vmov	d9, r0, r1
 800ad2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad30:	4620      	mov	r0, r4
 800ad32:	4629      	mov	r1, r5
 800ad34:	f7f5 fa60 	bl	80001f8 <__aeabi_dsub>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	ec51 0b19 	vmov	r0, r1, d9
 800ad40:	f7f5 fd3c 	bl	80007bc <__aeabi_ddiv>
 800ad44:	4632      	mov	r2, r6
 800ad46:	4604      	mov	r4, r0
 800ad48:	460d      	mov	r5, r1
 800ad4a:	463b      	mov	r3, r7
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	4649      	mov	r1, r9
 800ad50:	f7f5 fc0a 	bl	8000568 <__aeabi_dmul>
 800ad54:	4632      	mov	r2, r6
 800ad56:	463b      	mov	r3, r7
 800ad58:	f7f5 fa50 	bl	80001fc <__adddf3>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	4620      	mov	r0, r4
 800ad62:	4629      	mov	r1, r5
 800ad64:	f7f5 fa48 	bl	80001f8 <__aeabi_dsub>
 800ad68:	4642      	mov	r2, r8
 800ad6a:	464b      	mov	r3, r9
 800ad6c:	f7f5 fa44 	bl	80001f8 <__aeabi_dsub>
 800ad70:	460b      	mov	r3, r1
 800ad72:	4602      	mov	r2, r0
 800ad74:	493a      	ldr	r1, [pc, #232]	; (800ae60 <__ieee754_pow+0xa30>)
 800ad76:	2000      	movs	r0, #0
 800ad78:	f7f5 fa3e 	bl	80001f8 <__aeabi_dsub>
 800ad7c:	e9cd 0100 	strd	r0, r1, [sp]
 800ad80:	9b01      	ldr	r3, [sp, #4]
 800ad82:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ad86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad8a:	da2f      	bge.n	800adec <__ieee754_pow+0x9bc>
 800ad8c:	4650      	mov	r0, sl
 800ad8e:	ed9d 0b00 	vldr	d0, [sp]
 800ad92:	f001 f919 	bl	800bfc8 <scalbn>
 800ad96:	ec51 0b10 	vmov	r0, r1, d0
 800ad9a:	ec53 2b18 	vmov	r2, r3, d8
 800ad9e:	f7ff bbe0 	b.w	800a562 <__ieee754_pow+0x132>
 800ada2:	4b30      	ldr	r3, [pc, #192]	; (800ae64 <__ieee754_pow+0xa34>)
 800ada4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ada8:	429e      	cmp	r6, r3
 800adaa:	f77f af0b 	ble.w	800abc4 <__ieee754_pow+0x794>
 800adae:	4b2e      	ldr	r3, [pc, #184]	; (800ae68 <__ieee754_pow+0xa38>)
 800adb0:	440b      	add	r3, r1
 800adb2:	4303      	orrs	r3, r0
 800adb4:	d00b      	beq.n	800adce <__ieee754_pow+0x99e>
 800adb6:	a326      	add	r3, pc, #152	; (adr r3, 800ae50 <__ieee754_pow+0xa20>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	ec51 0b18 	vmov	r0, r1, d8
 800adc0:	f7f5 fbd2 	bl	8000568 <__aeabi_dmul>
 800adc4:	a322      	add	r3, pc, #136	; (adr r3, 800ae50 <__ieee754_pow+0xa20>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	f7ff bbca 	b.w	800a562 <__ieee754_pow+0x132>
 800adce:	4622      	mov	r2, r4
 800add0:	462b      	mov	r3, r5
 800add2:	f7f5 fa11 	bl	80001f8 <__aeabi_dsub>
 800add6:	4642      	mov	r2, r8
 800add8:	464b      	mov	r3, r9
 800adda:	f7f5 fe4b 	bl	8000a74 <__aeabi_dcmpge>
 800adde:	2800      	cmp	r0, #0
 800ade0:	f43f aef0 	beq.w	800abc4 <__ieee754_pow+0x794>
 800ade4:	e7e7      	b.n	800adb6 <__ieee754_pow+0x986>
 800ade6:	f04f 0a00 	mov.w	sl, #0
 800adea:	e717      	b.n	800ac1c <__ieee754_pow+0x7ec>
 800adec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adf0:	4619      	mov	r1, r3
 800adf2:	e7d2      	b.n	800ad9a <__ieee754_pow+0x96a>
 800adf4:	491a      	ldr	r1, [pc, #104]	; (800ae60 <__ieee754_pow+0xa30>)
 800adf6:	2000      	movs	r0, #0
 800adf8:	f7ff bb9e 	b.w	800a538 <__ieee754_pow+0x108>
 800adfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae00:	f7ff bb9a 	b.w	800a538 <__ieee754_pow+0x108>
 800ae04:	9000      	str	r0, [sp, #0]
 800ae06:	f7ff bb76 	b.w	800a4f6 <__ieee754_pow+0xc6>
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	f7ff bb60 	b.w	800a4d0 <__ieee754_pow+0xa0>
 800ae10:	00000000 	.word	0x00000000
 800ae14:	3fe62e43 	.word	0x3fe62e43
 800ae18:	fefa39ef 	.word	0xfefa39ef
 800ae1c:	3fe62e42 	.word	0x3fe62e42
 800ae20:	0ca86c39 	.word	0x0ca86c39
 800ae24:	be205c61 	.word	0xbe205c61
 800ae28:	72bea4d0 	.word	0x72bea4d0
 800ae2c:	3e663769 	.word	0x3e663769
 800ae30:	c5d26bf1 	.word	0xc5d26bf1
 800ae34:	3ebbbd41 	.word	0x3ebbbd41
 800ae38:	af25de2c 	.word	0xaf25de2c
 800ae3c:	3f11566a 	.word	0x3f11566a
 800ae40:	16bebd93 	.word	0x16bebd93
 800ae44:	3f66c16c 	.word	0x3f66c16c
 800ae48:	5555553e 	.word	0x5555553e
 800ae4c:	3fc55555 	.word	0x3fc55555
 800ae50:	c2f8f359 	.word	0xc2f8f359
 800ae54:	01a56e1f 	.word	0x01a56e1f
 800ae58:	3fe00000 	.word	0x3fe00000
 800ae5c:	000fffff 	.word	0x000fffff
 800ae60:	3ff00000 	.word	0x3ff00000
 800ae64:	4090cbff 	.word	0x4090cbff
 800ae68:	3f6f3400 	.word	0x3f6f3400
 800ae6c:	652b82fe 	.word	0x652b82fe
 800ae70:	3c971547 	.word	0x3c971547
 800ae74:	00000000 	.word	0x00000000

0800ae78 <__ieee754_rem_pio2>:
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	ed2d 8b02 	vpush	{d8}
 800ae80:	ec55 4b10 	vmov	r4, r5, d0
 800ae84:	4bca      	ldr	r3, [pc, #808]	; (800b1b0 <__ieee754_rem_pio2+0x338>)
 800ae86:	b08b      	sub	sp, #44	; 0x2c
 800ae88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ae8c:	4598      	cmp	r8, r3
 800ae8e:	4682      	mov	sl, r0
 800ae90:	9502      	str	r5, [sp, #8]
 800ae92:	dc08      	bgt.n	800aea6 <__ieee754_rem_pio2+0x2e>
 800ae94:	2200      	movs	r2, #0
 800ae96:	2300      	movs	r3, #0
 800ae98:	ed80 0b00 	vstr	d0, [r0]
 800ae9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800aea0:	f04f 0b00 	mov.w	fp, #0
 800aea4:	e028      	b.n	800aef8 <__ieee754_rem_pio2+0x80>
 800aea6:	4bc3      	ldr	r3, [pc, #780]	; (800b1b4 <__ieee754_rem_pio2+0x33c>)
 800aea8:	4598      	cmp	r8, r3
 800aeaa:	dc78      	bgt.n	800af9e <__ieee754_rem_pio2+0x126>
 800aeac:	9b02      	ldr	r3, [sp, #8]
 800aeae:	4ec2      	ldr	r6, [pc, #776]	; (800b1b8 <__ieee754_rem_pio2+0x340>)
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	ee10 0a10 	vmov	r0, s0
 800aeb6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b178 <__ieee754_rem_pio2+0x300>)
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	4629      	mov	r1, r5
 800aebe:	dd39      	ble.n	800af34 <__ieee754_rem_pio2+0xbc>
 800aec0:	f7f5 f99a 	bl	80001f8 <__aeabi_dsub>
 800aec4:	45b0      	cmp	r8, r6
 800aec6:	4604      	mov	r4, r0
 800aec8:	460d      	mov	r5, r1
 800aeca:	d01b      	beq.n	800af04 <__ieee754_rem_pio2+0x8c>
 800aecc:	a3ac      	add	r3, pc, #688	; (adr r3, 800b180 <__ieee754_rem_pio2+0x308>)
 800aece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed2:	f7f5 f991 	bl	80001f8 <__aeabi_dsub>
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	e9ca 2300 	strd	r2, r3, [sl]
 800aede:	4620      	mov	r0, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7f5 f989 	bl	80001f8 <__aeabi_dsub>
 800aee6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b180 <__ieee754_rem_pio2+0x308>)
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f7f5 f984 	bl	80001f8 <__aeabi_dsub>
 800aef0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aef4:	f04f 0b01 	mov.w	fp, #1
 800aef8:	4658      	mov	r0, fp
 800aefa:	b00b      	add	sp, #44	; 0x2c
 800aefc:	ecbd 8b02 	vpop	{d8}
 800af00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af04:	a3a0      	add	r3, pc, #640	; (adr r3, 800b188 <__ieee754_rem_pio2+0x310>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	f7f5 f975 	bl	80001f8 <__aeabi_dsub>
 800af0e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b190 <__ieee754_rem_pio2+0x318>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	4604      	mov	r4, r0
 800af16:	460d      	mov	r5, r1
 800af18:	f7f5 f96e 	bl	80001f8 <__aeabi_dsub>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	e9ca 2300 	strd	r2, r3, [sl]
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 f966 	bl	80001f8 <__aeabi_dsub>
 800af2c:	a398      	add	r3, pc, #608	; (adr r3, 800b190 <__ieee754_rem_pio2+0x318>)
 800af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af32:	e7db      	b.n	800aeec <__ieee754_rem_pio2+0x74>
 800af34:	f7f5 f962 	bl	80001fc <__adddf3>
 800af38:	45b0      	cmp	r8, r6
 800af3a:	4604      	mov	r4, r0
 800af3c:	460d      	mov	r5, r1
 800af3e:	d016      	beq.n	800af6e <__ieee754_rem_pio2+0xf6>
 800af40:	a38f      	add	r3, pc, #572	; (adr r3, 800b180 <__ieee754_rem_pio2+0x308>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f7f5 f959 	bl	80001fc <__adddf3>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	e9ca 2300 	strd	r2, r3, [sl]
 800af52:	4620      	mov	r0, r4
 800af54:	4629      	mov	r1, r5
 800af56:	f7f5 f94f 	bl	80001f8 <__aeabi_dsub>
 800af5a:	a389      	add	r3, pc, #548	; (adr r3, 800b180 <__ieee754_rem_pio2+0x308>)
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	f7f5 f94c 	bl	80001fc <__adddf3>
 800af64:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800af68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af6c:	e7c4      	b.n	800aef8 <__ieee754_rem_pio2+0x80>
 800af6e:	a386      	add	r3, pc, #536	; (adr r3, 800b188 <__ieee754_rem_pio2+0x310>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 f942 	bl	80001fc <__adddf3>
 800af78:	a385      	add	r3, pc, #532	; (adr r3, 800b190 <__ieee754_rem_pio2+0x318>)
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	4604      	mov	r4, r0
 800af80:	460d      	mov	r5, r1
 800af82:	f7f5 f93b 	bl	80001fc <__adddf3>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	e9ca 2300 	strd	r2, r3, [sl]
 800af8e:	4620      	mov	r0, r4
 800af90:	4629      	mov	r1, r5
 800af92:	f7f5 f931 	bl	80001f8 <__aeabi_dsub>
 800af96:	a37e      	add	r3, pc, #504	; (adr r3, 800b190 <__ieee754_rem_pio2+0x318>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	e7e0      	b.n	800af60 <__ieee754_rem_pio2+0xe8>
 800af9e:	4b87      	ldr	r3, [pc, #540]	; (800b1bc <__ieee754_rem_pio2+0x344>)
 800afa0:	4598      	cmp	r8, r3
 800afa2:	f300 80d9 	bgt.w	800b158 <__ieee754_rem_pio2+0x2e0>
 800afa6:	f7fe fd97 	bl	8009ad8 <fabs>
 800afaa:	ec55 4b10 	vmov	r4, r5, d0
 800afae:	ee10 0a10 	vmov	r0, s0
 800afb2:	a379      	add	r3, pc, #484	; (adr r3, 800b198 <__ieee754_rem_pio2+0x320>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	4629      	mov	r1, r5
 800afba:	f7f5 fad5 	bl	8000568 <__aeabi_dmul>
 800afbe:	4b80      	ldr	r3, [pc, #512]	; (800b1c0 <__ieee754_rem_pio2+0x348>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	f7f5 f91b 	bl	80001fc <__adddf3>
 800afc6:	f7f5 fd7f 	bl	8000ac8 <__aeabi_d2iz>
 800afca:	4683      	mov	fp, r0
 800afcc:	f7f5 fa62 	bl	8000494 <__aeabi_i2d>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	ec43 2b18 	vmov	d8, r2, r3
 800afd8:	a367      	add	r3, pc, #412	; (adr r3, 800b178 <__ieee754_rem_pio2+0x300>)
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	f7f5 fac3 	bl	8000568 <__aeabi_dmul>
 800afe2:	4602      	mov	r2, r0
 800afe4:	460b      	mov	r3, r1
 800afe6:	4620      	mov	r0, r4
 800afe8:	4629      	mov	r1, r5
 800afea:	f7f5 f905 	bl	80001f8 <__aeabi_dsub>
 800afee:	a364      	add	r3, pc, #400	; (adr r3, 800b180 <__ieee754_rem_pio2+0x308>)
 800aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff4:	4606      	mov	r6, r0
 800aff6:	460f      	mov	r7, r1
 800aff8:	ec51 0b18 	vmov	r0, r1, d8
 800affc:	f7f5 fab4 	bl	8000568 <__aeabi_dmul>
 800b000:	f1bb 0f1f 	cmp.w	fp, #31
 800b004:	4604      	mov	r4, r0
 800b006:	460d      	mov	r5, r1
 800b008:	dc0d      	bgt.n	800b026 <__ieee754_rem_pio2+0x1ae>
 800b00a:	4b6e      	ldr	r3, [pc, #440]	; (800b1c4 <__ieee754_rem_pio2+0x34c>)
 800b00c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800b010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b014:	4543      	cmp	r3, r8
 800b016:	d006      	beq.n	800b026 <__ieee754_rem_pio2+0x1ae>
 800b018:	4622      	mov	r2, r4
 800b01a:	462b      	mov	r3, r5
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	f7f5 f8ea 	bl	80001f8 <__aeabi_dsub>
 800b024:	e00f      	b.n	800b046 <__ieee754_rem_pio2+0x1ce>
 800b026:	462b      	mov	r3, r5
 800b028:	4622      	mov	r2, r4
 800b02a:	4630      	mov	r0, r6
 800b02c:	4639      	mov	r1, r7
 800b02e:	f7f5 f8e3 	bl	80001f8 <__aeabi_dsub>
 800b032:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b036:	9303      	str	r3, [sp, #12]
 800b038:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b03c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b040:	f1b8 0f10 	cmp.w	r8, #16
 800b044:	dc02      	bgt.n	800b04c <__ieee754_rem_pio2+0x1d4>
 800b046:	e9ca 0100 	strd	r0, r1, [sl]
 800b04a:	e039      	b.n	800b0c0 <__ieee754_rem_pio2+0x248>
 800b04c:	a34e      	add	r3, pc, #312	; (adr r3, 800b188 <__ieee754_rem_pio2+0x310>)
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	ec51 0b18 	vmov	r0, r1, d8
 800b056:	f7f5 fa87 	bl	8000568 <__aeabi_dmul>
 800b05a:	4604      	mov	r4, r0
 800b05c:	460d      	mov	r5, r1
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	4630      	mov	r0, r6
 800b064:	4639      	mov	r1, r7
 800b066:	f7f5 f8c7 	bl	80001f8 <__aeabi_dsub>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	4680      	mov	r8, r0
 800b070:	4689      	mov	r9, r1
 800b072:	4630      	mov	r0, r6
 800b074:	4639      	mov	r1, r7
 800b076:	f7f5 f8bf 	bl	80001f8 <__aeabi_dsub>
 800b07a:	4622      	mov	r2, r4
 800b07c:	462b      	mov	r3, r5
 800b07e:	f7f5 f8bb 	bl	80001f8 <__aeabi_dsub>
 800b082:	a343      	add	r3, pc, #268	; (adr r3, 800b190 <__ieee754_rem_pio2+0x318>)
 800b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b088:	4604      	mov	r4, r0
 800b08a:	460d      	mov	r5, r1
 800b08c:	ec51 0b18 	vmov	r0, r1, d8
 800b090:	f7f5 fa6a 	bl	8000568 <__aeabi_dmul>
 800b094:	4622      	mov	r2, r4
 800b096:	462b      	mov	r3, r5
 800b098:	f7f5 f8ae 	bl	80001f8 <__aeabi_dsub>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	460d      	mov	r5, r1
 800b0a4:	4640      	mov	r0, r8
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	f7f5 f8a6 	bl	80001f8 <__aeabi_dsub>
 800b0ac:	9a03      	ldr	r2, [sp, #12]
 800b0ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	2b31      	cmp	r3, #49	; 0x31
 800b0b6:	dc24      	bgt.n	800b102 <__ieee754_rem_pio2+0x28a>
 800b0b8:	e9ca 0100 	strd	r0, r1, [sl]
 800b0bc:	4646      	mov	r6, r8
 800b0be:	464f      	mov	r7, r9
 800b0c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	4642      	mov	r2, r8
 800b0c8:	464b      	mov	r3, r9
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	f7f5 f894 	bl	80001f8 <__aeabi_dsub>
 800b0d0:	462b      	mov	r3, r5
 800b0d2:	4622      	mov	r2, r4
 800b0d4:	f7f5 f890 	bl	80001f8 <__aeabi_dsub>
 800b0d8:	9b02      	ldr	r3, [sp, #8]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b0e0:	f6bf af0a 	bge.w	800aef8 <__ieee754_rem_pio2+0x80>
 800b0e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b0e8:	f8ca 3004 	str.w	r3, [sl, #4]
 800b0ec:	f8ca 8000 	str.w	r8, [sl]
 800b0f0:	f8ca 0008 	str.w	r0, [sl, #8]
 800b0f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0f8:	f8ca 300c 	str.w	r3, [sl, #12]
 800b0fc:	f1cb 0b00 	rsb	fp, fp, #0
 800b100:	e6fa      	b.n	800aef8 <__ieee754_rem_pio2+0x80>
 800b102:	a327      	add	r3, pc, #156	; (adr r3, 800b1a0 <__ieee754_rem_pio2+0x328>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	ec51 0b18 	vmov	r0, r1, d8
 800b10c:	f7f5 fa2c 	bl	8000568 <__aeabi_dmul>
 800b110:	4604      	mov	r4, r0
 800b112:	460d      	mov	r5, r1
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4640      	mov	r0, r8
 800b11a:	4649      	mov	r1, r9
 800b11c:	f7f5 f86c 	bl	80001f8 <__aeabi_dsub>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4606      	mov	r6, r0
 800b126:	460f      	mov	r7, r1
 800b128:	4640      	mov	r0, r8
 800b12a:	4649      	mov	r1, r9
 800b12c:	f7f5 f864 	bl	80001f8 <__aeabi_dsub>
 800b130:	4622      	mov	r2, r4
 800b132:	462b      	mov	r3, r5
 800b134:	f7f5 f860 	bl	80001f8 <__aeabi_dsub>
 800b138:	a31b      	add	r3, pc, #108	; (adr r3, 800b1a8 <__ieee754_rem_pio2+0x330>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	4604      	mov	r4, r0
 800b140:	460d      	mov	r5, r1
 800b142:	ec51 0b18 	vmov	r0, r1, d8
 800b146:	f7f5 fa0f 	bl	8000568 <__aeabi_dmul>
 800b14a:	4622      	mov	r2, r4
 800b14c:	462b      	mov	r3, r5
 800b14e:	f7f5 f853 	bl	80001f8 <__aeabi_dsub>
 800b152:	4604      	mov	r4, r0
 800b154:	460d      	mov	r5, r1
 800b156:	e75f      	b.n	800b018 <__ieee754_rem_pio2+0x1a0>
 800b158:	4b1b      	ldr	r3, [pc, #108]	; (800b1c8 <__ieee754_rem_pio2+0x350>)
 800b15a:	4598      	cmp	r8, r3
 800b15c:	dd36      	ble.n	800b1cc <__ieee754_rem_pio2+0x354>
 800b15e:	ee10 2a10 	vmov	r2, s0
 800b162:	462b      	mov	r3, r5
 800b164:	4620      	mov	r0, r4
 800b166:	4629      	mov	r1, r5
 800b168:	f7f5 f846 	bl	80001f8 <__aeabi_dsub>
 800b16c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b170:	e9ca 0100 	strd	r0, r1, [sl]
 800b174:	e694      	b.n	800aea0 <__ieee754_rem_pio2+0x28>
 800b176:	bf00      	nop
 800b178:	54400000 	.word	0x54400000
 800b17c:	3ff921fb 	.word	0x3ff921fb
 800b180:	1a626331 	.word	0x1a626331
 800b184:	3dd0b461 	.word	0x3dd0b461
 800b188:	1a600000 	.word	0x1a600000
 800b18c:	3dd0b461 	.word	0x3dd0b461
 800b190:	2e037073 	.word	0x2e037073
 800b194:	3ba3198a 	.word	0x3ba3198a
 800b198:	6dc9c883 	.word	0x6dc9c883
 800b19c:	3fe45f30 	.word	0x3fe45f30
 800b1a0:	2e000000 	.word	0x2e000000
 800b1a4:	3ba3198a 	.word	0x3ba3198a
 800b1a8:	252049c1 	.word	0x252049c1
 800b1ac:	397b839a 	.word	0x397b839a
 800b1b0:	3fe921fb 	.word	0x3fe921fb
 800b1b4:	4002d97b 	.word	0x4002d97b
 800b1b8:	3ff921fb 	.word	0x3ff921fb
 800b1bc:	413921fb 	.word	0x413921fb
 800b1c0:	3fe00000 	.word	0x3fe00000
 800b1c4:	0800c1d0 	.word	0x0800c1d0
 800b1c8:	7fefffff 	.word	0x7fefffff
 800b1cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b1d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b1d4:	ee10 0a10 	vmov	r0, s0
 800b1d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b1dc:	ee10 6a10 	vmov	r6, s0
 800b1e0:	460f      	mov	r7, r1
 800b1e2:	f7f5 fc71 	bl	8000ac8 <__aeabi_d2iz>
 800b1e6:	f7f5 f955 	bl	8000494 <__aeabi_i2d>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1f6:	f7f4 ffff 	bl	80001f8 <__aeabi_dsub>
 800b1fa:	4b22      	ldr	r3, [pc, #136]	; (800b284 <__ieee754_rem_pio2+0x40c>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f7f5 f9b3 	bl	8000568 <__aeabi_dmul>
 800b202:	460f      	mov	r7, r1
 800b204:	4606      	mov	r6, r0
 800b206:	f7f5 fc5f 	bl	8000ac8 <__aeabi_d2iz>
 800b20a:	f7f5 f943 	bl	8000494 <__aeabi_i2d>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	4630      	mov	r0, r6
 800b214:	4639      	mov	r1, r7
 800b216:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b21a:	f7f4 ffed 	bl	80001f8 <__aeabi_dsub>
 800b21e:	4b19      	ldr	r3, [pc, #100]	; (800b284 <__ieee754_rem_pio2+0x40c>)
 800b220:	2200      	movs	r2, #0
 800b222:	f7f5 f9a1 	bl	8000568 <__aeabi_dmul>
 800b226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b22a:	ad04      	add	r5, sp, #16
 800b22c:	f04f 0803 	mov.w	r8, #3
 800b230:	46a9      	mov	r9, r5
 800b232:	2600      	movs	r6, #0
 800b234:	2700      	movs	r7, #0
 800b236:	4632      	mov	r2, r6
 800b238:	463b      	mov	r3, r7
 800b23a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b23e:	46c3      	mov	fp, r8
 800b240:	3d08      	subs	r5, #8
 800b242:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b246:	f7f5 fbf7 	bl	8000a38 <__aeabi_dcmpeq>
 800b24a:	2800      	cmp	r0, #0
 800b24c:	d1f3      	bne.n	800b236 <__ieee754_rem_pio2+0x3be>
 800b24e:	4b0e      	ldr	r3, [pc, #56]	; (800b288 <__ieee754_rem_pio2+0x410>)
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	2302      	movs	r3, #2
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	4622      	mov	r2, r4
 800b258:	465b      	mov	r3, fp
 800b25a:	4651      	mov	r1, sl
 800b25c:	4648      	mov	r0, r9
 800b25e:	f000 f993 	bl	800b588 <__kernel_rem_pio2>
 800b262:	9b02      	ldr	r3, [sp, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	4683      	mov	fp, r0
 800b268:	f6bf ae46 	bge.w	800aef8 <__ieee754_rem_pio2+0x80>
 800b26c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b270:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b274:	f8ca 3004 	str.w	r3, [sl, #4]
 800b278:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b27c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b280:	e73a      	b.n	800b0f8 <__ieee754_rem_pio2+0x280>
 800b282:	bf00      	nop
 800b284:	41700000 	.word	0x41700000
 800b288:	0800c250 	.word	0x0800c250

0800b28c <__ieee754_sqrt>:
 800b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	ec55 4b10 	vmov	r4, r5, d0
 800b294:	4e56      	ldr	r6, [pc, #344]	; (800b3f0 <__ieee754_sqrt+0x164>)
 800b296:	43ae      	bics	r6, r5
 800b298:	ee10 0a10 	vmov	r0, s0
 800b29c:	ee10 3a10 	vmov	r3, s0
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	462a      	mov	r2, r5
 800b2a4:	d110      	bne.n	800b2c8 <__ieee754_sqrt+0x3c>
 800b2a6:	ee10 2a10 	vmov	r2, s0
 800b2aa:	462b      	mov	r3, r5
 800b2ac:	f7f5 f95c 	bl	8000568 <__aeabi_dmul>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f7f4 ffa0 	bl	80001fc <__adddf3>
 800b2bc:	4604      	mov	r4, r0
 800b2be:	460d      	mov	r5, r1
 800b2c0:	ec45 4b10 	vmov	d0, r4, r5
 800b2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2c8:	2d00      	cmp	r5, #0
 800b2ca:	dc10      	bgt.n	800b2ee <__ieee754_sqrt+0x62>
 800b2cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b2d0:	4330      	orrs	r0, r6
 800b2d2:	d0f5      	beq.n	800b2c0 <__ieee754_sqrt+0x34>
 800b2d4:	b15d      	cbz	r5, 800b2ee <__ieee754_sqrt+0x62>
 800b2d6:	ee10 2a10 	vmov	r2, s0
 800b2da:	462b      	mov	r3, r5
 800b2dc:	ee10 0a10 	vmov	r0, s0
 800b2e0:	f7f4 ff8a 	bl	80001f8 <__aeabi_dsub>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	f7f5 fa68 	bl	80007bc <__aeabi_ddiv>
 800b2ec:	e7e6      	b.n	800b2bc <__ieee754_sqrt+0x30>
 800b2ee:	1509      	asrs	r1, r1, #20
 800b2f0:	d076      	beq.n	800b3e0 <__ieee754_sqrt+0x154>
 800b2f2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b2f6:	07ce      	lsls	r6, r1, #31
 800b2f8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b2fc:	bf5e      	ittt	pl
 800b2fe:	0fda      	lsrpl	r2, r3, #31
 800b300:	005b      	lslpl	r3, r3, #1
 800b302:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b306:	0fda      	lsrs	r2, r3, #31
 800b308:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b30c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b310:	2000      	movs	r0, #0
 800b312:	106d      	asrs	r5, r5, #1
 800b314:	005b      	lsls	r3, r3, #1
 800b316:	f04f 0e16 	mov.w	lr, #22
 800b31a:	4684      	mov	ip, r0
 800b31c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b320:	eb0c 0401 	add.w	r4, ip, r1
 800b324:	4294      	cmp	r4, r2
 800b326:	bfde      	ittt	le
 800b328:	1b12      	suble	r2, r2, r4
 800b32a:	eb04 0c01 	addle.w	ip, r4, r1
 800b32e:	1840      	addle	r0, r0, r1
 800b330:	0052      	lsls	r2, r2, #1
 800b332:	f1be 0e01 	subs.w	lr, lr, #1
 800b336:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b33a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b33e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b342:	d1ed      	bne.n	800b320 <__ieee754_sqrt+0x94>
 800b344:	4671      	mov	r1, lr
 800b346:	2720      	movs	r7, #32
 800b348:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b34c:	4562      	cmp	r2, ip
 800b34e:	eb04 060e 	add.w	r6, r4, lr
 800b352:	dc02      	bgt.n	800b35a <__ieee754_sqrt+0xce>
 800b354:	d113      	bne.n	800b37e <__ieee754_sqrt+0xf2>
 800b356:	429e      	cmp	r6, r3
 800b358:	d811      	bhi.n	800b37e <__ieee754_sqrt+0xf2>
 800b35a:	2e00      	cmp	r6, #0
 800b35c:	eb06 0e04 	add.w	lr, r6, r4
 800b360:	da43      	bge.n	800b3ea <__ieee754_sqrt+0x15e>
 800b362:	f1be 0f00 	cmp.w	lr, #0
 800b366:	db40      	blt.n	800b3ea <__ieee754_sqrt+0x15e>
 800b368:	f10c 0801 	add.w	r8, ip, #1
 800b36c:	eba2 020c 	sub.w	r2, r2, ip
 800b370:	429e      	cmp	r6, r3
 800b372:	bf88      	it	hi
 800b374:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800b378:	1b9b      	subs	r3, r3, r6
 800b37a:	4421      	add	r1, r4
 800b37c:	46c4      	mov	ip, r8
 800b37e:	0052      	lsls	r2, r2, #1
 800b380:	3f01      	subs	r7, #1
 800b382:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b386:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b38a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b38e:	d1dd      	bne.n	800b34c <__ieee754_sqrt+0xc0>
 800b390:	4313      	orrs	r3, r2
 800b392:	d006      	beq.n	800b3a2 <__ieee754_sqrt+0x116>
 800b394:	1c4c      	adds	r4, r1, #1
 800b396:	bf13      	iteet	ne
 800b398:	3101      	addne	r1, #1
 800b39a:	3001      	addeq	r0, #1
 800b39c:	4639      	moveq	r1, r7
 800b39e:	f021 0101 	bicne.w	r1, r1, #1
 800b3a2:	1043      	asrs	r3, r0, #1
 800b3a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b3a8:	0849      	lsrs	r1, r1, #1
 800b3aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b3ae:	07c2      	lsls	r2, r0, #31
 800b3b0:	bf48      	it	mi
 800b3b2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b3b6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	463d      	mov	r5, r7
 800b3be:	e77f      	b.n	800b2c0 <__ieee754_sqrt+0x34>
 800b3c0:	0ada      	lsrs	r2, r3, #11
 800b3c2:	3815      	subs	r0, #21
 800b3c4:	055b      	lsls	r3, r3, #21
 800b3c6:	2a00      	cmp	r2, #0
 800b3c8:	d0fa      	beq.n	800b3c0 <__ieee754_sqrt+0x134>
 800b3ca:	02d7      	lsls	r7, r2, #11
 800b3cc:	d50a      	bpl.n	800b3e4 <__ieee754_sqrt+0x158>
 800b3ce:	f1c1 0420 	rsb	r4, r1, #32
 800b3d2:	fa23 f404 	lsr.w	r4, r3, r4
 800b3d6:	1e4d      	subs	r5, r1, #1
 800b3d8:	408b      	lsls	r3, r1
 800b3da:	4322      	orrs	r2, r4
 800b3dc:	1b41      	subs	r1, r0, r5
 800b3de:	e788      	b.n	800b2f2 <__ieee754_sqrt+0x66>
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	e7f0      	b.n	800b3c6 <__ieee754_sqrt+0x13a>
 800b3e4:	0052      	lsls	r2, r2, #1
 800b3e6:	3101      	adds	r1, #1
 800b3e8:	e7ef      	b.n	800b3ca <__ieee754_sqrt+0x13e>
 800b3ea:	46e0      	mov	r8, ip
 800b3ec:	e7be      	b.n	800b36c <__ieee754_sqrt+0xe0>
 800b3ee:	bf00      	nop
 800b3f0:	7ff00000 	.word	0x7ff00000
 800b3f4:	00000000 	.word	0x00000000

0800b3f8 <__kernel_cos>:
 800b3f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	ec57 6b10 	vmov	r6, r7, d0
 800b400:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b404:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b408:	ed8d 1b00 	vstr	d1, [sp]
 800b40c:	da07      	bge.n	800b41e <__kernel_cos+0x26>
 800b40e:	ee10 0a10 	vmov	r0, s0
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 fb58 	bl	8000ac8 <__aeabi_d2iz>
 800b418:	2800      	cmp	r0, #0
 800b41a:	f000 8088 	beq.w	800b52e <__kernel_cos+0x136>
 800b41e:	4632      	mov	r2, r6
 800b420:	463b      	mov	r3, r7
 800b422:	4630      	mov	r0, r6
 800b424:	4639      	mov	r1, r7
 800b426:	f7f5 f89f 	bl	8000568 <__aeabi_dmul>
 800b42a:	4b51      	ldr	r3, [pc, #324]	; (800b570 <__kernel_cos+0x178>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	4604      	mov	r4, r0
 800b430:	460d      	mov	r5, r1
 800b432:	f7f5 f899 	bl	8000568 <__aeabi_dmul>
 800b436:	a340      	add	r3, pc, #256	; (adr r3, 800b538 <__kernel_cos+0x140>)
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	4682      	mov	sl, r0
 800b43e:	468b      	mov	fp, r1
 800b440:	4620      	mov	r0, r4
 800b442:	4629      	mov	r1, r5
 800b444:	f7f5 f890 	bl	8000568 <__aeabi_dmul>
 800b448:	a33d      	add	r3, pc, #244	; (adr r3, 800b540 <__kernel_cos+0x148>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	f7f4 fed5 	bl	80001fc <__adddf3>
 800b452:	4622      	mov	r2, r4
 800b454:	462b      	mov	r3, r5
 800b456:	f7f5 f887 	bl	8000568 <__aeabi_dmul>
 800b45a:	a33b      	add	r3, pc, #236	; (adr r3, 800b548 <__kernel_cos+0x150>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	f7f4 feca 	bl	80001f8 <__aeabi_dsub>
 800b464:	4622      	mov	r2, r4
 800b466:	462b      	mov	r3, r5
 800b468:	f7f5 f87e 	bl	8000568 <__aeabi_dmul>
 800b46c:	a338      	add	r3, pc, #224	; (adr r3, 800b550 <__kernel_cos+0x158>)
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	f7f4 fec3 	bl	80001fc <__adddf3>
 800b476:	4622      	mov	r2, r4
 800b478:	462b      	mov	r3, r5
 800b47a:	f7f5 f875 	bl	8000568 <__aeabi_dmul>
 800b47e:	a336      	add	r3, pc, #216	; (adr r3, 800b558 <__kernel_cos+0x160>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	f7f4 feb8 	bl	80001f8 <__aeabi_dsub>
 800b488:	4622      	mov	r2, r4
 800b48a:	462b      	mov	r3, r5
 800b48c:	f7f5 f86c 	bl	8000568 <__aeabi_dmul>
 800b490:	a333      	add	r3, pc, #204	; (adr r3, 800b560 <__kernel_cos+0x168>)
 800b492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b496:	f7f4 feb1 	bl	80001fc <__adddf3>
 800b49a:	4622      	mov	r2, r4
 800b49c:	462b      	mov	r3, r5
 800b49e:	f7f5 f863 	bl	8000568 <__aeabi_dmul>
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	462b      	mov	r3, r5
 800b4a6:	f7f5 f85f 	bl	8000568 <__aeabi_dmul>
 800b4aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	460d      	mov	r5, r1
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	4639      	mov	r1, r7
 800b4b6:	f7f5 f857 	bl	8000568 <__aeabi_dmul>
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4602      	mov	r2, r0
 800b4be:	4629      	mov	r1, r5
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f7f4 fe99 	bl	80001f8 <__aeabi_dsub>
 800b4c6:	4b2b      	ldr	r3, [pc, #172]	; (800b574 <__kernel_cos+0x17c>)
 800b4c8:	4598      	cmp	r8, r3
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	460f      	mov	r7, r1
 800b4ce:	dc10      	bgt.n	800b4f2 <__kernel_cos+0xfa>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4650      	mov	r0, sl
 800b4d6:	4659      	mov	r1, fp
 800b4d8:	f7f4 fe8e 	bl	80001f8 <__aeabi_dsub>
 800b4dc:	460b      	mov	r3, r1
 800b4de:	4926      	ldr	r1, [pc, #152]	; (800b578 <__kernel_cos+0x180>)
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	f7f4 fe88 	bl	80001f8 <__aeabi_dsub>
 800b4e8:	ec41 0b10 	vmov	d0, r0, r1
 800b4ec:	b003      	add	sp, #12
 800b4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f2:	4b22      	ldr	r3, [pc, #136]	; (800b57c <__kernel_cos+0x184>)
 800b4f4:	4920      	ldr	r1, [pc, #128]	; (800b578 <__kernel_cos+0x180>)
 800b4f6:	4598      	cmp	r8, r3
 800b4f8:	bfcc      	ite	gt
 800b4fa:	4d21      	ldrgt	r5, [pc, #132]	; (800b580 <__kernel_cos+0x188>)
 800b4fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b500:	2400      	movs	r4, #0
 800b502:	4622      	mov	r2, r4
 800b504:	462b      	mov	r3, r5
 800b506:	2000      	movs	r0, #0
 800b508:	f7f4 fe76 	bl	80001f8 <__aeabi_dsub>
 800b50c:	4622      	mov	r2, r4
 800b50e:	4680      	mov	r8, r0
 800b510:	4689      	mov	r9, r1
 800b512:	462b      	mov	r3, r5
 800b514:	4650      	mov	r0, sl
 800b516:	4659      	mov	r1, fp
 800b518:	f7f4 fe6e 	bl	80001f8 <__aeabi_dsub>
 800b51c:	4632      	mov	r2, r6
 800b51e:	463b      	mov	r3, r7
 800b520:	f7f4 fe6a 	bl	80001f8 <__aeabi_dsub>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	4640      	mov	r0, r8
 800b52a:	4649      	mov	r1, r9
 800b52c:	e7da      	b.n	800b4e4 <__kernel_cos+0xec>
 800b52e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b568 <__kernel_cos+0x170>
 800b532:	e7db      	b.n	800b4ec <__kernel_cos+0xf4>
 800b534:	f3af 8000 	nop.w
 800b538:	be8838d4 	.word	0xbe8838d4
 800b53c:	bda8fae9 	.word	0xbda8fae9
 800b540:	bdb4b1c4 	.word	0xbdb4b1c4
 800b544:	3e21ee9e 	.word	0x3e21ee9e
 800b548:	809c52ad 	.word	0x809c52ad
 800b54c:	3e927e4f 	.word	0x3e927e4f
 800b550:	19cb1590 	.word	0x19cb1590
 800b554:	3efa01a0 	.word	0x3efa01a0
 800b558:	16c15177 	.word	0x16c15177
 800b55c:	3f56c16c 	.word	0x3f56c16c
 800b560:	5555554c 	.word	0x5555554c
 800b564:	3fa55555 	.word	0x3fa55555
 800b568:	00000000 	.word	0x00000000
 800b56c:	3ff00000 	.word	0x3ff00000
 800b570:	3fe00000 	.word	0x3fe00000
 800b574:	3fd33332 	.word	0x3fd33332
 800b578:	3ff00000 	.word	0x3ff00000
 800b57c:	3fe90000 	.word	0x3fe90000
 800b580:	3fd20000 	.word	0x3fd20000
 800b584:	00000000 	.word	0x00000000

0800b588 <__kernel_rem_pio2>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	ed2d 8b02 	vpush	{d8}
 800b590:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b594:	f112 0f14 	cmn.w	r2, #20
 800b598:	9308      	str	r3, [sp, #32]
 800b59a:	9101      	str	r1, [sp, #4]
 800b59c:	4bc6      	ldr	r3, [pc, #792]	; (800b8b8 <__kernel_rem_pio2+0x330>)
 800b59e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b5a0:	9009      	str	r0, [sp, #36]	; 0x24
 800b5a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5a6:	9304      	str	r3, [sp, #16]
 800b5a8:	9b08      	ldr	r3, [sp, #32]
 800b5aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b5ae:	bfa8      	it	ge
 800b5b0:	1ed4      	subge	r4, r2, #3
 800b5b2:	9306      	str	r3, [sp, #24]
 800b5b4:	bfb2      	itee	lt
 800b5b6:	2400      	movlt	r4, #0
 800b5b8:	2318      	movge	r3, #24
 800b5ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800b5be:	f06f 0317 	mvn.w	r3, #23
 800b5c2:	fb04 3303 	mla	r3, r4, r3, r3
 800b5c6:	eb03 0a02 	add.w	sl, r3, r2
 800b5ca:	9b04      	ldr	r3, [sp, #16]
 800b5cc:	9a06      	ldr	r2, [sp, #24]
 800b5ce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b8a8 <__kernel_rem_pio2+0x320>
 800b5d2:	eb03 0802 	add.w	r8, r3, r2
 800b5d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b5d8:	1aa7      	subs	r7, r4, r2
 800b5da:	ae20      	add	r6, sp, #128	; 0x80
 800b5dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b5e0:	2500      	movs	r5, #0
 800b5e2:	4545      	cmp	r5, r8
 800b5e4:	dd18      	ble.n	800b618 <__kernel_rem_pio2+0x90>
 800b5e6:	9b08      	ldr	r3, [sp, #32]
 800b5e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b5ec:	aa20      	add	r2, sp, #128	; 0x80
 800b5ee:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b8a8 <__kernel_rem_pio2+0x320>
 800b5f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b5f6:	f1c3 0301 	rsb	r3, r3, #1
 800b5fa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b5fe:	9307      	str	r3, [sp, #28]
 800b600:	9b07      	ldr	r3, [sp, #28]
 800b602:	9a04      	ldr	r2, [sp, #16]
 800b604:	4443      	add	r3, r8
 800b606:	429a      	cmp	r2, r3
 800b608:	db2f      	blt.n	800b66a <__kernel_rem_pio2+0xe2>
 800b60a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b60e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b612:	462f      	mov	r7, r5
 800b614:	2600      	movs	r6, #0
 800b616:	e01b      	b.n	800b650 <__kernel_rem_pio2+0xc8>
 800b618:	42ef      	cmn	r7, r5
 800b61a:	d407      	bmi.n	800b62c <__kernel_rem_pio2+0xa4>
 800b61c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b620:	f7f4 ff38 	bl	8000494 <__aeabi_i2d>
 800b624:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b628:	3501      	adds	r5, #1
 800b62a:	e7da      	b.n	800b5e2 <__kernel_rem_pio2+0x5a>
 800b62c:	ec51 0b18 	vmov	r0, r1, d8
 800b630:	e7f8      	b.n	800b624 <__kernel_rem_pio2+0x9c>
 800b632:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b636:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b63a:	f7f4 ff95 	bl	8000568 <__aeabi_dmul>
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b646:	f7f4 fdd9 	bl	80001fc <__adddf3>
 800b64a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b64e:	3601      	adds	r6, #1
 800b650:	9b06      	ldr	r3, [sp, #24]
 800b652:	429e      	cmp	r6, r3
 800b654:	f1a7 0708 	sub.w	r7, r7, #8
 800b658:	ddeb      	ble.n	800b632 <__kernel_rem_pio2+0xaa>
 800b65a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b65e:	3508      	adds	r5, #8
 800b660:	ecab 7b02 	vstmia	fp!, {d7}
 800b664:	f108 0801 	add.w	r8, r8, #1
 800b668:	e7ca      	b.n	800b600 <__kernel_rem_pio2+0x78>
 800b66a:	9b04      	ldr	r3, [sp, #16]
 800b66c:	aa0c      	add	r2, sp, #48	; 0x30
 800b66e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b672:	930b      	str	r3, [sp, #44]	; 0x2c
 800b674:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b676:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b67a:	9c04      	ldr	r4, [sp, #16]
 800b67c:	930a      	str	r3, [sp, #40]	; 0x28
 800b67e:	ab98      	add	r3, sp, #608	; 0x260
 800b680:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b684:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b688:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b68c:	f8cd b008 	str.w	fp, [sp, #8]
 800b690:	4625      	mov	r5, r4
 800b692:	2d00      	cmp	r5, #0
 800b694:	dc78      	bgt.n	800b788 <__kernel_rem_pio2+0x200>
 800b696:	ec47 6b10 	vmov	d0, r6, r7
 800b69a:	4650      	mov	r0, sl
 800b69c:	f000 fc94 	bl	800bfc8 <scalbn>
 800b6a0:	ec57 6b10 	vmov	r6, r7, d0
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b6aa:	ee10 0a10 	vmov	r0, s0
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f7f4 ff5a 	bl	8000568 <__aeabi_dmul>
 800b6b4:	ec41 0b10 	vmov	d0, r0, r1
 800b6b8:	f000 fb72 	bl	800bda0 <floor>
 800b6bc:	4b7f      	ldr	r3, [pc, #508]	; (800b8bc <__kernel_rem_pio2+0x334>)
 800b6be:	ec51 0b10 	vmov	r0, r1, d0
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f7f4 ff50 	bl	8000568 <__aeabi_dmul>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	4639      	mov	r1, r7
 800b6d0:	f7f4 fd92 	bl	80001f8 <__aeabi_dsub>
 800b6d4:	460f      	mov	r7, r1
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	f7f5 f9f6 	bl	8000ac8 <__aeabi_d2iz>
 800b6dc:	9007      	str	r0, [sp, #28]
 800b6de:	f7f4 fed9 	bl	8000494 <__aeabi_i2d>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	f7f4 fd85 	bl	80001f8 <__aeabi_dsub>
 800b6ee:	f1ba 0f00 	cmp.w	sl, #0
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460f      	mov	r7, r1
 800b6f6:	dd70      	ble.n	800b7da <__kernel_rem_pio2+0x252>
 800b6f8:	1e62      	subs	r2, r4, #1
 800b6fa:	ab0c      	add	r3, sp, #48	; 0x30
 800b6fc:	9d07      	ldr	r5, [sp, #28]
 800b6fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b702:	f1ca 0118 	rsb	r1, sl, #24
 800b706:	fa40 f301 	asr.w	r3, r0, r1
 800b70a:	441d      	add	r5, r3
 800b70c:	408b      	lsls	r3, r1
 800b70e:	1ac0      	subs	r0, r0, r3
 800b710:	ab0c      	add	r3, sp, #48	; 0x30
 800b712:	9507      	str	r5, [sp, #28]
 800b714:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b718:	f1ca 0317 	rsb	r3, sl, #23
 800b71c:	fa40 f303 	asr.w	r3, r0, r3
 800b720:	9302      	str	r3, [sp, #8]
 800b722:	9b02      	ldr	r3, [sp, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	dd66      	ble.n	800b7f6 <__kernel_rem_pio2+0x26e>
 800b728:	9b07      	ldr	r3, [sp, #28]
 800b72a:	2200      	movs	r2, #0
 800b72c:	3301      	adds	r3, #1
 800b72e:	9307      	str	r3, [sp, #28]
 800b730:	4615      	mov	r5, r2
 800b732:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b736:	4294      	cmp	r4, r2
 800b738:	f300 8099 	bgt.w	800b86e <__kernel_rem_pio2+0x2e6>
 800b73c:	f1ba 0f00 	cmp.w	sl, #0
 800b740:	dd07      	ble.n	800b752 <__kernel_rem_pio2+0x1ca>
 800b742:	f1ba 0f01 	cmp.w	sl, #1
 800b746:	f000 80a5 	beq.w	800b894 <__kernel_rem_pio2+0x30c>
 800b74a:	f1ba 0f02 	cmp.w	sl, #2
 800b74e:	f000 80c1 	beq.w	800b8d4 <__kernel_rem_pio2+0x34c>
 800b752:	9b02      	ldr	r3, [sp, #8]
 800b754:	2b02      	cmp	r3, #2
 800b756:	d14e      	bne.n	800b7f6 <__kernel_rem_pio2+0x26e>
 800b758:	4632      	mov	r2, r6
 800b75a:	463b      	mov	r3, r7
 800b75c:	4958      	ldr	r1, [pc, #352]	; (800b8c0 <__kernel_rem_pio2+0x338>)
 800b75e:	2000      	movs	r0, #0
 800b760:	f7f4 fd4a 	bl	80001f8 <__aeabi_dsub>
 800b764:	4606      	mov	r6, r0
 800b766:	460f      	mov	r7, r1
 800b768:	2d00      	cmp	r5, #0
 800b76a:	d044      	beq.n	800b7f6 <__kernel_rem_pio2+0x26e>
 800b76c:	4650      	mov	r0, sl
 800b76e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b8b0 <__kernel_rem_pio2+0x328>
 800b772:	f000 fc29 	bl	800bfc8 <scalbn>
 800b776:	4630      	mov	r0, r6
 800b778:	4639      	mov	r1, r7
 800b77a:	ec53 2b10 	vmov	r2, r3, d0
 800b77e:	f7f4 fd3b 	bl	80001f8 <__aeabi_dsub>
 800b782:	4606      	mov	r6, r0
 800b784:	460f      	mov	r7, r1
 800b786:	e036      	b.n	800b7f6 <__kernel_rem_pio2+0x26e>
 800b788:	4b4e      	ldr	r3, [pc, #312]	; (800b8c4 <__kernel_rem_pio2+0x33c>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	4630      	mov	r0, r6
 800b78e:	4639      	mov	r1, r7
 800b790:	f7f4 feea 	bl	8000568 <__aeabi_dmul>
 800b794:	f7f5 f998 	bl	8000ac8 <__aeabi_d2iz>
 800b798:	f7f4 fe7c 	bl	8000494 <__aeabi_i2d>
 800b79c:	4b4a      	ldr	r3, [pc, #296]	; (800b8c8 <__kernel_rem_pio2+0x340>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	4680      	mov	r8, r0
 800b7a2:	4689      	mov	r9, r1
 800b7a4:	f7f4 fee0 	bl	8000568 <__aeabi_dmul>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	4639      	mov	r1, r7
 800b7b0:	f7f4 fd22 	bl	80001f8 <__aeabi_dsub>
 800b7b4:	f7f5 f988 	bl	8000ac8 <__aeabi_d2iz>
 800b7b8:	9b02      	ldr	r3, [sp, #8]
 800b7ba:	f843 0b04 	str.w	r0, [r3], #4
 800b7be:	3d01      	subs	r5, #1
 800b7c0:	9302      	str	r3, [sp, #8]
 800b7c2:	ab70      	add	r3, sp, #448	; 0x1c0
 800b7c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	4640      	mov	r0, r8
 800b7ce:	4649      	mov	r1, r9
 800b7d0:	f7f4 fd14 	bl	80001fc <__adddf3>
 800b7d4:	4606      	mov	r6, r0
 800b7d6:	460f      	mov	r7, r1
 800b7d8:	e75b      	b.n	800b692 <__kernel_rem_pio2+0x10a>
 800b7da:	d105      	bne.n	800b7e8 <__kernel_rem_pio2+0x260>
 800b7dc:	1e63      	subs	r3, r4, #1
 800b7de:	aa0c      	add	r2, sp, #48	; 0x30
 800b7e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b7e4:	15c3      	asrs	r3, r0, #23
 800b7e6:	e79b      	b.n	800b720 <__kernel_rem_pio2+0x198>
 800b7e8:	4b38      	ldr	r3, [pc, #224]	; (800b8cc <__kernel_rem_pio2+0x344>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f7f5 f942 	bl	8000a74 <__aeabi_dcmpge>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d139      	bne.n	800b868 <__kernel_rem_pio2+0x2e0>
 800b7f4:	9002      	str	r0, [sp, #8]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	f7f5 f91b 	bl	8000a38 <__aeabi_dcmpeq>
 800b802:	2800      	cmp	r0, #0
 800b804:	f000 80b4 	beq.w	800b970 <__kernel_rem_pio2+0x3e8>
 800b808:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800b80c:	465b      	mov	r3, fp
 800b80e:	2200      	movs	r2, #0
 800b810:	9904      	ldr	r1, [sp, #16]
 800b812:	428b      	cmp	r3, r1
 800b814:	da65      	bge.n	800b8e2 <__kernel_rem_pio2+0x35a>
 800b816:	2a00      	cmp	r2, #0
 800b818:	d07b      	beq.n	800b912 <__kernel_rem_pio2+0x38a>
 800b81a:	ab0c      	add	r3, sp, #48	; 0x30
 800b81c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b820:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 80a0 	beq.w	800b96a <__kernel_rem_pio2+0x3e2>
 800b82a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b8b0 <__kernel_rem_pio2+0x328>
 800b82e:	4650      	mov	r0, sl
 800b830:	f000 fbca 	bl	800bfc8 <scalbn>
 800b834:	4f23      	ldr	r7, [pc, #140]	; (800b8c4 <__kernel_rem_pio2+0x33c>)
 800b836:	ec55 4b10 	vmov	r4, r5, d0
 800b83a:	46d8      	mov	r8, fp
 800b83c:	2600      	movs	r6, #0
 800b83e:	f1b8 0f00 	cmp.w	r8, #0
 800b842:	f280 80cf 	bge.w	800b9e4 <__kernel_rem_pio2+0x45c>
 800b846:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b8a8 <__kernel_rem_pio2+0x320>
 800b84a:	465f      	mov	r7, fp
 800b84c:	f04f 0800 	mov.w	r8, #0
 800b850:	2f00      	cmp	r7, #0
 800b852:	f2c0 80fd 	blt.w	800ba50 <__kernel_rem_pio2+0x4c8>
 800b856:	ab70      	add	r3, sp, #448	; 0x1c0
 800b858:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b8d0 <__kernel_rem_pio2+0x348>
 800b85c:	ec55 4b18 	vmov	r4, r5, d8
 800b860:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b864:	2600      	movs	r6, #0
 800b866:	e0e5      	b.n	800ba34 <__kernel_rem_pio2+0x4ac>
 800b868:	2302      	movs	r3, #2
 800b86a:	9302      	str	r3, [sp, #8]
 800b86c:	e75c      	b.n	800b728 <__kernel_rem_pio2+0x1a0>
 800b86e:	f8db 3000 	ldr.w	r3, [fp]
 800b872:	b955      	cbnz	r5, 800b88a <__kernel_rem_pio2+0x302>
 800b874:	b123      	cbz	r3, 800b880 <__kernel_rem_pio2+0x2f8>
 800b876:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b87a:	f8cb 3000 	str.w	r3, [fp]
 800b87e:	2301      	movs	r3, #1
 800b880:	3201      	adds	r2, #1
 800b882:	f10b 0b04 	add.w	fp, fp, #4
 800b886:	461d      	mov	r5, r3
 800b888:	e755      	b.n	800b736 <__kernel_rem_pio2+0x1ae>
 800b88a:	1acb      	subs	r3, r1, r3
 800b88c:	f8cb 3000 	str.w	r3, [fp]
 800b890:	462b      	mov	r3, r5
 800b892:	e7f5      	b.n	800b880 <__kernel_rem_pio2+0x2f8>
 800b894:	1e62      	subs	r2, r4, #1
 800b896:	ab0c      	add	r3, sp, #48	; 0x30
 800b898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b8a0:	a90c      	add	r1, sp, #48	; 0x30
 800b8a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b8a6:	e754      	b.n	800b752 <__kernel_rem_pio2+0x1ca>
	...
 800b8b4:	3ff00000 	.word	0x3ff00000
 800b8b8:	0800c398 	.word	0x0800c398
 800b8bc:	40200000 	.word	0x40200000
 800b8c0:	3ff00000 	.word	0x3ff00000
 800b8c4:	3e700000 	.word	0x3e700000
 800b8c8:	41700000 	.word	0x41700000
 800b8cc:	3fe00000 	.word	0x3fe00000
 800b8d0:	0800c358 	.word	0x0800c358
 800b8d4:	1e62      	subs	r2, r4, #1
 800b8d6:	ab0c      	add	r3, sp, #48	; 0x30
 800b8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b8e0:	e7de      	b.n	800b8a0 <__kernel_rem_pio2+0x318>
 800b8e2:	a90c      	add	r1, sp, #48	; 0x30
 800b8e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	430a      	orrs	r2, r1
 800b8ec:	e790      	b.n	800b810 <__kernel_rem_pio2+0x288>
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	d0fa      	beq.n	800b8ee <__kernel_rem_pio2+0x366>
 800b8f8:	9a08      	ldr	r2, [sp, #32]
 800b8fa:	18e3      	adds	r3, r4, r3
 800b8fc:	18a6      	adds	r6, r4, r2
 800b8fe:	aa20      	add	r2, sp, #128	; 0x80
 800b900:	1c65      	adds	r5, r4, #1
 800b902:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b906:	9302      	str	r3, [sp, #8]
 800b908:	9b02      	ldr	r3, [sp, #8]
 800b90a:	42ab      	cmp	r3, r5
 800b90c:	da04      	bge.n	800b918 <__kernel_rem_pio2+0x390>
 800b90e:	461c      	mov	r4, r3
 800b910:	e6b5      	b.n	800b67e <__kernel_rem_pio2+0xf6>
 800b912:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b914:	2301      	movs	r3, #1
 800b916:	e7eb      	b.n	800b8f0 <__kernel_rem_pio2+0x368>
 800b918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b91a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b91e:	f7f4 fdb9 	bl	8000494 <__aeabi_i2d>
 800b922:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b928:	46b3      	mov	fp, r6
 800b92a:	461c      	mov	r4, r3
 800b92c:	2700      	movs	r7, #0
 800b92e:	f04f 0800 	mov.w	r8, #0
 800b932:	f04f 0900 	mov.w	r9, #0
 800b936:	9b06      	ldr	r3, [sp, #24]
 800b938:	429f      	cmp	r7, r3
 800b93a:	dd06      	ble.n	800b94a <__kernel_rem_pio2+0x3c2>
 800b93c:	ab70      	add	r3, sp, #448	; 0x1c0
 800b93e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b942:	e9c3 8900 	strd	r8, r9, [r3]
 800b946:	3501      	adds	r5, #1
 800b948:	e7de      	b.n	800b908 <__kernel_rem_pio2+0x380>
 800b94a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b94e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b952:	f7f4 fe09 	bl	8000568 <__aeabi_dmul>
 800b956:	4602      	mov	r2, r0
 800b958:	460b      	mov	r3, r1
 800b95a:	4640      	mov	r0, r8
 800b95c:	4649      	mov	r1, r9
 800b95e:	f7f4 fc4d 	bl	80001fc <__adddf3>
 800b962:	3701      	adds	r7, #1
 800b964:	4680      	mov	r8, r0
 800b966:	4689      	mov	r9, r1
 800b968:	e7e5      	b.n	800b936 <__kernel_rem_pio2+0x3ae>
 800b96a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b96e:	e754      	b.n	800b81a <__kernel_rem_pio2+0x292>
 800b970:	ec47 6b10 	vmov	d0, r6, r7
 800b974:	f1ca 0000 	rsb	r0, sl, #0
 800b978:	f000 fb26 	bl	800bfc8 <scalbn>
 800b97c:	ec57 6b10 	vmov	r6, r7, d0
 800b980:	4b9f      	ldr	r3, [pc, #636]	; (800bc00 <__kernel_rem_pio2+0x678>)
 800b982:	ee10 0a10 	vmov	r0, s0
 800b986:	2200      	movs	r2, #0
 800b988:	4639      	mov	r1, r7
 800b98a:	f7f5 f873 	bl	8000a74 <__aeabi_dcmpge>
 800b98e:	b300      	cbz	r0, 800b9d2 <__kernel_rem_pio2+0x44a>
 800b990:	4b9c      	ldr	r3, [pc, #624]	; (800bc04 <__kernel_rem_pio2+0x67c>)
 800b992:	2200      	movs	r2, #0
 800b994:	4630      	mov	r0, r6
 800b996:	4639      	mov	r1, r7
 800b998:	f7f4 fde6 	bl	8000568 <__aeabi_dmul>
 800b99c:	f7f5 f894 	bl	8000ac8 <__aeabi_d2iz>
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	f7f4 fd77 	bl	8000494 <__aeabi_i2d>
 800b9a6:	4b96      	ldr	r3, [pc, #600]	; (800bc00 <__kernel_rem_pio2+0x678>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f7f4 fddd 	bl	8000568 <__aeabi_dmul>
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7f4 fc1f 	bl	80001f8 <__aeabi_dsub>
 800b9ba:	f7f5 f885 	bl	8000ac8 <__aeabi_d2iz>
 800b9be:	f104 0b01 	add.w	fp, r4, #1
 800b9c2:	ab0c      	add	r3, sp, #48	; 0x30
 800b9c4:	f10a 0a18 	add.w	sl, sl, #24
 800b9c8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b9cc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b9d0:	e72b      	b.n	800b82a <__kernel_rem_pio2+0x2a2>
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	4639      	mov	r1, r7
 800b9d6:	f7f5 f877 	bl	8000ac8 <__aeabi_d2iz>
 800b9da:	ab0c      	add	r3, sp, #48	; 0x30
 800b9dc:	46a3      	mov	fp, r4
 800b9de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b9e2:	e722      	b.n	800b82a <__kernel_rem_pio2+0x2a2>
 800b9e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800b9e6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b9ea:	ab0c      	add	r3, sp, #48	; 0x30
 800b9ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b9f0:	f7f4 fd50 	bl	8000494 <__aeabi_i2d>
 800b9f4:	4622      	mov	r2, r4
 800b9f6:	462b      	mov	r3, r5
 800b9f8:	f7f4 fdb6 	bl	8000568 <__aeabi_dmul>
 800b9fc:	4632      	mov	r2, r6
 800b9fe:	e9c9 0100 	strd	r0, r1, [r9]
 800ba02:	463b      	mov	r3, r7
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	f7f4 fdae 	bl	8000568 <__aeabi_dmul>
 800ba0c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ba10:	4604      	mov	r4, r0
 800ba12:	460d      	mov	r5, r1
 800ba14:	e713      	b.n	800b83e <__kernel_rem_pio2+0x2b6>
 800ba16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ba1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ba1e:	f7f4 fda3 	bl	8000568 <__aeabi_dmul>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	4620      	mov	r0, r4
 800ba28:	4629      	mov	r1, r5
 800ba2a:	f7f4 fbe7 	bl	80001fc <__adddf3>
 800ba2e:	3601      	adds	r6, #1
 800ba30:	4604      	mov	r4, r0
 800ba32:	460d      	mov	r5, r1
 800ba34:	9b04      	ldr	r3, [sp, #16]
 800ba36:	429e      	cmp	r6, r3
 800ba38:	dc01      	bgt.n	800ba3e <__kernel_rem_pio2+0x4b6>
 800ba3a:	45b0      	cmp	r8, r6
 800ba3c:	daeb      	bge.n	800ba16 <__kernel_rem_pio2+0x48e>
 800ba3e:	ab48      	add	r3, sp, #288	; 0x120
 800ba40:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ba44:	e9c3 4500 	strd	r4, r5, [r3]
 800ba48:	3f01      	subs	r7, #1
 800ba4a:	f108 0801 	add.w	r8, r8, #1
 800ba4e:	e6ff      	b.n	800b850 <__kernel_rem_pio2+0x2c8>
 800ba50:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	dc0b      	bgt.n	800ba6e <__kernel_rem_pio2+0x4e6>
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	dc6e      	bgt.n	800bb38 <__kernel_rem_pio2+0x5b0>
 800ba5a:	d045      	beq.n	800bae8 <__kernel_rem_pio2+0x560>
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	f003 0007 	and.w	r0, r3, #7
 800ba62:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ba66:	ecbd 8b02 	vpop	{d8}
 800ba6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ba70:	2b03      	cmp	r3, #3
 800ba72:	d1f3      	bne.n	800ba5c <__kernel_rem_pio2+0x4d4>
 800ba74:	ab48      	add	r3, sp, #288	; 0x120
 800ba76:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800ba7a:	46d0      	mov	r8, sl
 800ba7c:	46d9      	mov	r9, fp
 800ba7e:	f1b9 0f00 	cmp.w	r9, #0
 800ba82:	f1a8 0808 	sub.w	r8, r8, #8
 800ba86:	dc64      	bgt.n	800bb52 <__kernel_rem_pio2+0x5ca>
 800ba88:	465c      	mov	r4, fp
 800ba8a:	2c01      	cmp	r4, #1
 800ba8c:	f1aa 0a08 	sub.w	sl, sl, #8
 800ba90:	dc7e      	bgt.n	800bb90 <__kernel_rem_pio2+0x608>
 800ba92:	2000      	movs	r0, #0
 800ba94:	2100      	movs	r1, #0
 800ba96:	f1bb 0f01 	cmp.w	fp, #1
 800ba9a:	f300 8097 	bgt.w	800bbcc <__kernel_rem_pio2+0x644>
 800ba9e:	9b02      	ldr	r3, [sp, #8]
 800baa0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800baa4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f040 8099 	bne.w	800bbe0 <__kernel_rem_pio2+0x658>
 800baae:	9b01      	ldr	r3, [sp, #4]
 800bab0:	e9c3 5600 	strd	r5, r6, [r3]
 800bab4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bab8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800babc:	e7ce      	b.n	800ba5c <__kernel_rem_pio2+0x4d4>
 800babe:	ab48      	add	r3, sp, #288	; 0x120
 800bac0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	f7f4 fb98 	bl	80001fc <__adddf3>
 800bacc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bad0:	f1bb 0f00 	cmp.w	fp, #0
 800bad4:	daf3      	bge.n	800babe <__kernel_rem_pio2+0x536>
 800bad6:	9b02      	ldr	r3, [sp, #8]
 800bad8:	b113      	cbz	r3, 800bae0 <__kernel_rem_pio2+0x558>
 800bada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bade:	4619      	mov	r1, r3
 800bae0:	9b01      	ldr	r3, [sp, #4]
 800bae2:	e9c3 0100 	strd	r0, r1, [r3]
 800bae6:	e7b9      	b.n	800ba5c <__kernel_rem_pio2+0x4d4>
 800bae8:	2000      	movs	r0, #0
 800baea:	2100      	movs	r1, #0
 800baec:	e7f0      	b.n	800bad0 <__kernel_rem_pio2+0x548>
 800baee:	ab48      	add	r3, sp, #288	; 0x120
 800baf0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800baf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf8:	f7f4 fb80 	bl	80001fc <__adddf3>
 800bafc:	3c01      	subs	r4, #1
 800bafe:	2c00      	cmp	r4, #0
 800bb00:	daf5      	bge.n	800baee <__kernel_rem_pio2+0x566>
 800bb02:	9b02      	ldr	r3, [sp, #8]
 800bb04:	b1e3      	cbz	r3, 800bb40 <__kernel_rem_pio2+0x5b8>
 800bb06:	4602      	mov	r2, r0
 800bb08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb0c:	9c01      	ldr	r4, [sp, #4]
 800bb0e:	e9c4 2300 	strd	r2, r3, [r4]
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bb1a:	f7f4 fb6d 	bl	80001f8 <__aeabi_dsub>
 800bb1e:	ad4a      	add	r5, sp, #296	; 0x128
 800bb20:	2401      	movs	r4, #1
 800bb22:	45a3      	cmp	fp, r4
 800bb24:	da0f      	bge.n	800bb46 <__kernel_rem_pio2+0x5be>
 800bb26:	9b02      	ldr	r3, [sp, #8]
 800bb28:	b113      	cbz	r3, 800bb30 <__kernel_rem_pio2+0x5a8>
 800bb2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb2e:	4619      	mov	r1, r3
 800bb30:	9b01      	ldr	r3, [sp, #4]
 800bb32:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bb36:	e791      	b.n	800ba5c <__kernel_rem_pio2+0x4d4>
 800bb38:	465c      	mov	r4, fp
 800bb3a:	2000      	movs	r0, #0
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	e7de      	b.n	800bafe <__kernel_rem_pio2+0x576>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	e7e2      	b.n	800bb0c <__kernel_rem_pio2+0x584>
 800bb46:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bb4a:	f7f4 fb57 	bl	80001fc <__adddf3>
 800bb4e:	3401      	adds	r4, #1
 800bb50:	e7e7      	b.n	800bb22 <__kernel_rem_pio2+0x59a>
 800bb52:	e9d8 4500 	ldrd	r4, r5, [r8]
 800bb56:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	4632      	mov	r2, r6
 800bb5e:	463b      	mov	r3, r7
 800bb60:	4629      	mov	r1, r5
 800bb62:	f7f4 fb4b 	bl	80001fc <__adddf3>
 800bb66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4620      	mov	r0, r4
 800bb70:	4629      	mov	r1, r5
 800bb72:	f7f4 fb41 	bl	80001f8 <__aeabi_dsub>
 800bb76:	4632      	mov	r2, r6
 800bb78:	463b      	mov	r3, r7
 800bb7a:	f7f4 fb3f 	bl	80001fc <__adddf3>
 800bb7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bb82:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800bb86:	ed88 7b00 	vstr	d7, [r8]
 800bb8a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800bb8e:	e776      	b.n	800ba7e <__kernel_rem_pio2+0x4f6>
 800bb90:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb94:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bb98:	4640      	mov	r0, r8
 800bb9a:	4632      	mov	r2, r6
 800bb9c:	463b      	mov	r3, r7
 800bb9e:	4649      	mov	r1, r9
 800bba0:	f7f4 fb2c 	bl	80001fc <__adddf3>
 800bba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4640      	mov	r0, r8
 800bbae:	4649      	mov	r1, r9
 800bbb0:	f7f4 fb22 	bl	80001f8 <__aeabi_dsub>
 800bbb4:	4632      	mov	r2, r6
 800bbb6:	463b      	mov	r3, r7
 800bbb8:	f7f4 fb20 	bl	80001fc <__adddf3>
 800bbbc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bbc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bbc4:	ed8a 7b00 	vstr	d7, [sl]
 800bbc8:	3c01      	subs	r4, #1
 800bbca:	e75e      	b.n	800ba8a <__kernel_rem_pio2+0x502>
 800bbcc:	ab48      	add	r3, sp, #288	; 0x120
 800bbce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd6:	f7f4 fb11 	bl	80001fc <__adddf3>
 800bbda:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bbde:	e75a      	b.n	800ba96 <__kernel_rem_pio2+0x50e>
 800bbe0:	9b01      	ldr	r3, [sp, #4]
 800bbe2:	9a01      	ldr	r2, [sp, #4]
 800bbe4:	601d      	str	r5, [r3, #0]
 800bbe6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800bbea:	605c      	str	r4, [r3, #4]
 800bbec:	609f      	str	r7, [r3, #8]
 800bbee:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800bbf2:	60d3      	str	r3, [r2, #12]
 800bbf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbf8:	6110      	str	r0, [r2, #16]
 800bbfa:	6153      	str	r3, [r2, #20]
 800bbfc:	e72e      	b.n	800ba5c <__kernel_rem_pio2+0x4d4>
 800bbfe:	bf00      	nop
 800bc00:	41700000 	.word	0x41700000
 800bc04:	3e700000 	.word	0x3e700000

0800bc08 <__kernel_sin>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	ed2d 8b04 	vpush	{d8-d9}
 800bc10:	eeb0 8a41 	vmov.f32	s16, s2
 800bc14:	eef0 8a61 	vmov.f32	s17, s3
 800bc18:	ec55 4b10 	vmov	r4, r5, d0
 800bc1c:	b083      	sub	sp, #12
 800bc1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bc22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bc26:	9001      	str	r0, [sp, #4]
 800bc28:	da06      	bge.n	800bc38 <__kernel_sin+0x30>
 800bc2a:	ee10 0a10 	vmov	r0, s0
 800bc2e:	4629      	mov	r1, r5
 800bc30:	f7f4 ff4a 	bl	8000ac8 <__aeabi_d2iz>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d051      	beq.n	800bcdc <__kernel_sin+0xd4>
 800bc38:	4622      	mov	r2, r4
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f4 fc92 	bl	8000568 <__aeabi_dmul>
 800bc44:	4682      	mov	sl, r0
 800bc46:	468b      	mov	fp, r1
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	4629      	mov	r1, r5
 800bc50:	f7f4 fc8a 	bl	8000568 <__aeabi_dmul>
 800bc54:	a341      	add	r3, pc, #260	; (adr r3, 800bd5c <__kernel_sin+0x154>)
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	4689      	mov	r9, r1
 800bc5e:	4650      	mov	r0, sl
 800bc60:	4659      	mov	r1, fp
 800bc62:	f7f4 fc81 	bl	8000568 <__aeabi_dmul>
 800bc66:	a33f      	add	r3, pc, #252	; (adr r3, 800bd64 <__kernel_sin+0x15c>)
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	f7f4 fac4 	bl	80001f8 <__aeabi_dsub>
 800bc70:	4652      	mov	r2, sl
 800bc72:	465b      	mov	r3, fp
 800bc74:	f7f4 fc78 	bl	8000568 <__aeabi_dmul>
 800bc78:	a33c      	add	r3, pc, #240	; (adr r3, 800bd6c <__kernel_sin+0x164>)
 800bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7e:	f7f4 fabd 	bl	80001fc <__adddf3>
 800bc82:	4652      	mov	r2, sl
 800bc84:	465b      	mov	r3, fp
 800bc86:	f7f4 fc6f 	bl	8000568 <__aeabi_dmul>
 800bc8a:	a33a      	add	r3, pc, #232	; (adr r3, 800bd74 <__kernel_sin+0x16c>)
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	f7f4 fab2 	bl	80001f8 <__aeabi_dsub>
 800bc94:	4652      	mov	r2, sl
 800bc96:	465b      	mov	r3, fp
 800bc98:	f7f4 fc66 	bl	8000568 <__aeabi_dmul>
 800bc9c:	a337      	add	r3, pc, #220	; (adr r3, 800bd7c <__kernel_sin+0x174>)
 800bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca2:	f7f4 faab 	bl	80001fc <__adddf3>
 800bca6:	9b01      	ldr	r3, [sp, #4]
 800bca8:	4606      	mov	r6, r0
 800bcaa:	460f      	mov	r7, r1
 800bcac:	b9eb      	cbnz	r3, 800bcea <__kernel_sin+0xe2>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4650      	mov	r0, sl
 800bcb4:	4659      	mov	r1, fp
 800bcb6:	f7f4 fc57 	bl	8000568 <__aeabi_dmul>
 800bcba:	a325      	add	r3, pc, #148	; (adr r3, 800bd50 <__kernel_sin+0x148>)
 800bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc0:	f7f4 fa9a 	bl	80001f8 <__aeabi_dsub>
 800bcc4:	4642      	mov	r2, r8
 800bcc6:	464b      	mov	r3, r9
 800bcc8:	f7f4 fc4e 	bl	8000568 <__aeabi_dmul>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	f7f4 fa92 	bl	80001fc <__adddf3>
 800bcd8:	4604      	mov	r4, r0
 800bcda:	460d      	mov	r5, r1
 800bcdc:	ec45 4b10 	vmov	d0, r4, r5
 800bce0:	b003      	add	sp, #12
 800bce2:	ecbd 8b04 	vpop	{d8-d9}
 800bce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcea:	4b1b      	ldr	r3, [pc, #108]	; (800bd58 <__kernel_sin+0x150>)
 800bcec:	ec51 0b18 	vmov	r0, r1, d8
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f7f4 fc39 	bl	8000568 <__aeabi_dmul>
 800bcf6:	4632      	mov	r2, r6
 800bcf8:	ec41 0b19 	vmov	d9, r0, r1
 800bcfc:	463b      	mov	r3, r7
 800bcfe:	4640      	mov	r0, r8
 800bd00:	4649      	mov	r1, r9
 800bd02:	f7f4 fc31 	bl	8000568 <__aeabi_dmul>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	ec51 0b19 	vmov	r0, r1, d9
 800bd0e:	f7f4 fa73 	bl	80001f8 <__aeabi_dsub>
 800bd12:	4652      	mov	r2, sl
 800bd14:	465b      	mov	r3, fp
 800bd16:	f7f4 fc27 	bl	8000568 <__aeabi_dmul>
 800bd1a:	ec53 2b18 	vmov	r2, r3, d8
 800bd1e:	f7f4 fa6b 	bl	80001f8 <__aeabi_dsub>
 800bd22:	a30b      	add	r3, pc, #44	; (adr r3, 800bd50 <__kernel_sin+0x148>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	4606      	mov	r6, r0
 800bd2a:	460f      	mov	r7, r1
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	4649      	mov	r1, r9
 800bd30:	f7f4 fc1a 	bl	8000568 <__aeabi_dmul>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4630      	mov	r0, r6
 800bd3a:	4639      	mov	r1, r7
 800bd3c:	f7f4 fa5e 	bl	80001fc <__adddf3>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7f4 fa56 	bl	80001f8 <__aeabi_dsub>
 800bd4c:	e7c4      	b.n	800bcd8 <__kernel_sin+0xd0>
 800bd4e:	bf00      	nop
 800bd50:	55555549 	.word	0x55555549
 800bd54:	3fc55555 	.word	0x3fc55555
 800bd58:	3fe00000 	.word	0x3fe00000
 800bd5c:	5acfd57c 	.word	0x5acfd57c
 800bd60:	3de5d93a 	.word	0x3de5d93a
 800bd64:	8a2b9ceb 	.word	0x8a2b9ceb
 800bd68:	3e5ae5e6 	.word	0x3e5ae5e6
 800bd6c:	57b1fe7d 	.word	0x57b1fe7d
 800bd70:	3ec71de3 	.word	0x3ec71de3
 800bd74:	19c161d5 	.word	0x19c161d5
 800bd78:	3f2a01a0 	.word	0x3f2a01a0
 800bd7c:	1110f8a6 	.word	0x1110f8a6
 800bd80:	3f811111 	.word	0x3f811111

0800bd84 <finite>:
 800bd84:	b082      	sub	sp, #8
 800bd86:	ed8d 0b00 	vstr	d0, [sp]
 800bd8a:	9801      	ldr	r0, [sp, #4]
 800bd8c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bd90:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bd94:	0fc0      	lsrs	r0, r0, #31
 800bd96:	b002      	add	sp, #8
 800bd98:	4770      	bx	lr
 800bd9a:	0000      	movs	r0, r0
 800bd9c:	0000      	movs	r0, r0
	...

0800bda0 <floor>:
 800bda0:	ec51 0b10 	vmov	r0, r1, d0
 800bda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bdac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bdb0:	2e13      	cmp	r6, #19
 800bdb2:	ee10 5a10 	vmov	r5, s0
 800bdb6:	ee10 8a10 	vmov	r8, s0
 800bdba:	460c      	mov	r4, r1
 800bdbc:	dc32      	bgt.n	800be24 <floor+0x84>
 800bdbe:	2e00      	cmp	r6, #0
 800bdc0:	da14      	bge.n	800bdec <floor+0x4c>
 800bdc2:	a333      	add	r3, pc, #204	; (adr r3, 800be90 <floor+0xf0>)
 800bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc8:	f7f4 fa18 	bl	80001fc <__adddf3>
 800bdcc:	2200      	movs	r2, #0
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f7f4 fe5a 	bl	8000a88 <__aeabi_dcmpgt>
 800bdd4:	b138      	cbz	r0, 800bde6 <floor+0x46>
 800bdd6:	2c00      	cmp	r4, #0
 800bdd8:	da57      	bge.n	800be8a <floor+0xea>
 800bdda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bdde:	431d      	orrs	r5, r3
 800bde0:	d001      	beq.n	800bde6 <floor+0x46>
 800bde2:	4c2d      	ldr	r4, [pc, #180]	; (800be98 <floor+0xf8>)
 800bde4:	2500      	movs	r5, #0
 800bde6:	4621      	mov	r1, r4
 800bde8:	4628      	mov	r0, r5
 800bdea:	e025      	b.n	800be38 <floor+0x98>
 800bdec:	4f2b      	ldr	r7, [pc, #172]	; (800be9c <floor+0xfc>)
 800bdee:	4137      	asrs	r7, r6
 800bdf0:	ea01 0307 	and.w	r3, r1, r7
 800bdf4:	4303      	orrs	r3, r0
 800bdf6:	d01f      	beq.n	800be38 <floor+0x98>
 800bdf8:	a325      	add	r3, pc, #148	; (adr r3, 800be90 <floor+0xf0>)
 800bdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfe:	f7f4 f9fd 	bl	80001fc <__adddf3>
 800be02:	2200      	movs	r2, #0
 800be04:	2300      	movs	r3, #0
 800be06:	f7f4 fe3f 	bl	8000a88 <__aeabi_dcmpgt>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d0eb      	beq.n	800bde6 <floor+0x46>
 800be0e:	2c00      	cmp	r4, #0
 800be10:	bfbe      	ittt	lt
 800be12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800be16:	fa43 f606 	asrlt.w	r6, r3, r6
 800be1a:	19a4      	addlt	r4, r4, r6
 800be1c:	ea24 0407 	bic.w	r4, r4, r7
 800be20:	2500      	movs	r5, #0
 800be22:	e7e0      	b.n	800bde6 <floor+0x46>
 800be24:	2e33      	cmp	r6, #51	; 0x33
 800be26:	dd0b      	ble.n	800be40 <floor+0xa0>
 800be28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800be2c:	d104      	bne.n	800be38 <floor+0x98>
 800be2e:	ee10 2a10 	vmov	r2, s0
 800be32:	460b      	mov	r3, r1
 800be34:	f7f4 f9e2 	bl	80001fc <__adddf3>
 800be38:	ec41 0b10 	vmov	d0, r0, r1
 800be3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800be44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be48:	fa23 f707 	lsr.w	r7, r3, r7
 800be4c:	4207      	tst	r7, r0
 800be4e:	d0f3      	beq.n	800be38 <floor+0x98>
 800be50:	a30f      	add	r3, pc, #60	; (adr r3, 800be90 <floor+0xf0>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f7f4 f9d1 	bl	80001fc <__adddf3>
 800be5a:	2200      	movs	r2, #0
 800be5c:	2300      	movs	r3, #0
 800be5e:	f7f4 fe13 	bl	8000a88 <__aeabi_dcmpgt>
 800be62:	2800      	cmp	r0, #0
 800be64:	d0bf      	beq.n	800bde6 <floor+0x46>
 800be66:	2c00      	cmp	r4, #0
 800be68:	da02      	bge.n	800be70 <floor+0xd0>
 800be6a:	2e14      	cmp	r6, #20
 800be6c:	d103      	bne.n	800be76 <floor+0xd6>
 800be6e:	3401      	adds	r4, #1
 800be70:	ea25 0507 	bic.w	r5, r5, r7
 800be74:	e7b7      	b.n	800bde6 <floor+0x46>
 800be76:	2301      	movs	r3, #1
 800be78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800be7c:	fa03 f606 	lsl.w	r6, r3, r6
 800be80:	4435      	add	r5, r6
 800be82:	4545      	cmp	r5, r8
 800be84:	bf38      	it	cc
 800be86:	18e4      	addcc	r4, r4, r3
 800be88:	e7f2      	b.n	800be70 <floor+0xd0>
 800be8a:	2500      	movs	r5, #0
 800be8c:	462c      	mov	r4, r5
 800be8e:	e7aa      	b.n	800bde6 <floor+0x46>
 800be90:	8800759c 	.word	0x8800759c
 800be94:	7e37e43c 	.word	0x7e37e43c
 800be98:	bff00000 	.word	0xbff00000
 800be9c:	000fffff 	.word	0x000fffff

0800bea0 <nan>:
 800bea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bea8 <nan+0x8>
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	00000000 	.word	0x00000000
 800beac:	7ff80000 	.word	0x7ff80000

0800beb0 <rint>:
 800beb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beb2:	ec51 0b10 	vmov	r0, r1, d0
 800beb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800beba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800bebe:	2e13      	cmp	r6, #19
 800bec0:	ee10 4a10 	vmov	r4, s0
 800bec4:	460b      	mov	r3, r1
 800bec6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800beca:	dc58      	bgt.n	800bf7e <rint+0xce>
 800becc:	2e00      	cmp	r6, #0
 800bece:	da2b      	bge.n	800bf28 <rint+0x78>
 800bed0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bed4:	4302      	orrs	r2, r0
 800bed6:	d023      	beq.n	800bf20 <rint+0x70>
 800bed8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800bedc:	4302      	orrs	r2, r0
 800bede:	4254      	negs	r4, r2
 800bee0:	4314      	orrs	r4, r2
 800bee2:	0c4b      	lsrs	r3, r1, #17
 800bee4:	0b24      	lsrs	r4, r4, #12
 800bee6:	045b      	lsls	r3, r3, #17
 800bee8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800beec:	ea44 0103 	orr.w	r1, r4, r3
 800bef0:	4b32      	ldr	r3, [pc, #200]	; (800bfbc <rint+0x10c>)
 800bef2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bef6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	4630      	mov	r0, r6
 800bf00:	4639      	mov	r1, r7
 800bf02:	f7f4 f97b 	bl	80001fc <__adddf3>
 800bf06:	e9cd 0100 	strd	r0, r1, [sp]
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf10:	4632      	mov	r2, r6
 800bf12:	f7f4 f971 	bl	80001f8 <__aeabi_dsub>
 800bf16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf1a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800bf1e:	4639      	mov	r1, r7
 800bf20:	ec41 0b10 	vmov	d0, r0, r1
 800bf24:	b003      	add	sp, #12
 800bf26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf28:	4a25      	ldr	r2, [pc, #148]	; (800bfc0 <rint+0x110>)
 800bf2a:	4132      	asrs	r2, r6
 800bf2c:	ea01 0702 	and.w	r7, r1, r2
 800bf30:	4307      	orrs	r7, r0
 800bf32:	d0f5      	beq.n	800bf20 <rint+0x70>
 800bf34:	0851      	lsrs	r1, r2, #1
 800bf36:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800bf3a:	4314      	orrs	r4, r2
 800bf3c:	d00c      	beq.n	800bf58 <rint+0xa8>
 800bf3e:	ea23 0201 	bic.w	r2, r3, r1
 800bf42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bf46:	2e13      	cmp	r6, #19
 800bf48:	fa43 f606 	asr.w	r6, r3, r6
 800bf4c:	bf0c      	ite	eq
 800bf4e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800bf52:	2400      	movne	r4, #0
 800bf54:	ea42 0306 	orr.w	r3, r2, r6
 800bf58:	4918      	ldr	r1, [pc, #96]	; (800bfbc <rint+0x10c>)
 800bf5a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800bf5e:	4622      	mov	r2, r4
 800bf60:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf64:	4620      	mov	r0, r4
 800bf66:	4629      	mov	r1, r5
 800bf68:	f7f4 f948 	bl	80001fc <__adddf3>
 800bf6c:	e9cd 0100 	strd	r0, r1, [sp]
 800bf70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf74:	4622      	mov	r2, r4
 800bf76:	462b      	mov	r3, r5
 800bf78:	f7f4 f93e 	bl	80001f8 <__aeabi_dsub>
 800bf7c:	e7d0      	b.n	800bf20 <rint+0x70>
 800bf7e:	2e33      	cmp	r6, #51	; 0x33
 800bf80:	dd07      	ble.n	800bf92 <rint+0xe2>
 800bf82:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bf86:	d1cb      	bne.n	800bf20 <rint+0x70>
 800bf88:	ee10 2a10 	vmov	r2, s0
 800bf8c:	f7f4 f936 	bl	80001fc <__adddf3>
 800bf90:	e7c6      	b.n	800bf20 <rint+0x70>
 800bf92:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800bf96:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800bf9a:	40d6      	lsrs	r6, r2
 800bf9c:	4230      	tst	r0, r6
 800bf9e:	d0bf      	beq.n	800bf20 <rint+0x70>
 800bfa0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800bfa4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800bfa8:	bf1f      	itttt	ne
 800bfaa:	ea24 0101 	bicne.w	r1, r4, r1
 800bfae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800bfb2:	fa44 f202 	asrne.w	r2, r4, r2
 800bfb6:	ea41 0402 	orrne.w	r4, r1, r2
 800bfba:	e7cd      	b.n	800bf58 <rint+0xa8>
 800bfbc:	0800c3a8 	.word	0x0800c3a8
 800bfc0:	000fffff 	.word	0x000fffff
 800bfc4:	00000000 	.word	0x00000000

0800bfc8 <scalbn>:
 800bfc8:	b570      	push	{r4, r5, r6, lr}
 800bfca:	ec55 4b10 	vmov	r4, r5, d0
 800bfce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	462b      	mov	r3, r5
 800bfd6:	b99a      	cbnz	r2, 800c000 <scalbn+0x38>
 800bfd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bfdc:	4323      	orrs	r3, r4
 800bfde:	d036      	beq.n	800c04e <scalbn+0x86>
 800bfe0:	4b39      	ldr	r3, [pc, #228]	; (800c0c8 <scalbn+0x100>)
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	ee10 0a10 	vmov	r0, s0
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f7f4 fabd 	bl	8000568 <__aeabi_dmul>
 800bfee:	4b37      	ldr	r3, [pc, #220]	; (800c0cc <scalbn+0x104>)
 800bff0:	429e      	cmp	r6, r3
 800bff2:	4604      	mov	r4, r0
 800bff4:	460d      	mov	r5, r1
 800bff6:	da10      	bge.n	800c01a <scalbn+0x52>
 800bff8:	a32b      	add	r3, pc, #172	; (adr r3, 800c0a8 <scalbn+0xe0>)
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	e03a      	b.n	800c076 <scalbn+0xae>
 800c000:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c004:	428a      	cmp	r2, r1
 800c006:	d10c      	bne.n	800c022 <scalbn+0x5a>
 800c008:	ee10 2a10 	vmov	r2, s0
 800c00c:	4620      	mov	r0, r4
 800c00e:	4629      	mov	r1, r5
 800c010:	f7f4 f8f4 	bl	80001fc <__adddf3>
 800c014:	4604      	mov	r4, r0
 800c016:	460d      	mov	r5, r1
 800c018:	e019      	b.n	800c04e <scalbn+0x86>
 800c01a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c01e:	460b      	mov	r3, r1
 800c020:	3a36      	subs	r2, #54	; 0x36
 800c022:	4432      	add	r2, r6
 800c024:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c028:	428a      	cmp	r2, r1
 800c02a:	dd08      	ble.n	800c03e <scalbn+0x76>
 800c02c:	2d00      	cmp	r5, #0
 800c02e:	a120      	add	r1, pc, #128	; (adr r1, 800c0b0 <scalbn+0xe8>)
 800c030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c034:	da1c      	bge.n	800c070 <scalbn+0xa8>
 800c036:	a120      	add	r1, pc, #128	; (adr r1, 800c0b8 <scalbn+0xf0>)
 800c038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c03c:	e018      	b.n	800c070 <scalbn+0xa8>
 800c03e:	2a00      	cmp	r2, #0
 800c040:	dd08      	ble.n	800c054 <scalbn+0x8c>
 800c042:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c046:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c04a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c04e:	ec45 4b10 	vmov	d0, r4, r5
 800c052:	bd70      	pop	{r4, r5, r6, pc}
 800c054:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c058:	da19      	bge.n	800c08e <scalbn+0xc6>
 800c05a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c05e:	429e      	cmp	r6, r3
 800c060:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c064:	dd0a      	ble.n	800c07c <scalbn+0xb4>
 800c066:	a112      	add	r1, pc, #72	; (adr r1, 800c0b0 <scalbn+0xe8>)
 800c068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1e2      	bne.n	800c036 <scalbn+0x6e>
 800c070:	a30f      	add	r3, pc, #60	; (adr r3, 800c0b0 <scalbn+0xe8>)
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	f7f4 fa77 	bl	8000568 <__aeabi_dmul>
 800c07a:	e7cb      	b.n	800c014 <scalbn+0x4c>
 800c07c:	a10a      	add	r1, pc, #40	; (adr r1, 800c0a8 <scalbn+0xe0>)
 800c07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d0b8      	beq.n	800bff8 <scalbn+0x30>
 800c086:	a10e      	add	r1, pc, #56	; (adr r1, 800c0c0 <scalbn+0xf8>)
 800c088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c08c:	e7b4      	b.n	800bff8 <scalbn+0x30>
 800c08e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c092:	3236      	adds	r2, #54	; 0x36
 800c094:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c098:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c09c:	4620      	mov	r0, r4
 800c09e:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <scalbn+0x108>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	e7e8      	b.n	800c076 <scalbn+0xae>
 800c0a4:	f3af 8000 	nop.w
 800c0a8:	c2f8f359 	.word	0xc2f8f359
 800c0ac:	01a56e1f 	.word	0x01a56e1f
 800c0b0:	8800759c 	.word	0x8800759c
 800c0b4:	7e37e43c 	.word	0x7e37e43c
 800c0b8:	8800759c 	.word	0x8800759c
 800c0bc:	fe37e43c 	.word	0xfe37e43c
 800c0c0:	c2f8f359 	.word	0xc2f8f359
 800c0c4:	81a56e1f 	.word	0x81a56e1f
 800c0c8:	43500000 	.word	0x43500000
 800c0cc:	ffff3cb0 	.word	0xffff3cb0
 800c0d0:	3c900000 	.word	0x3c900000

0800c0d4 <_init>:
 800c0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d6:	bf00      	nop
 800c0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0da:	bc08      	pop	{r3}
 800c0dc:	469e      	mov	lr, r3
 800c0de:	4770      	bx	lr

0800c0e0 <_fini>:
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	bf00      	nop
 800c0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0e6:	bc08      	pop	{r3}
 800c0e8:	469e      	mov	lr, r3
 800c0ea:	4770      	bx	lr
