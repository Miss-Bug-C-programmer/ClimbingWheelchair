
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008514  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080086c4  080086c4  000186c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086e4  080086e4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086ec  080086ec  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086ec  080086ec  000186ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080086f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  200000b0  080087a4  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  080087a4  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f56a  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e52  00000000  00000000  0003f64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  000434a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  00044a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ea9  00000000  00000000  00045eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca7f  00000000  00000000  0004ad59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e39be  00000000  00000000  000677d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b196  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b58  00000000  00000000  0014b1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080086ac 	.word	0x080086ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	080086ac 	.word	0x080086ac

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2uiz>:
 80009dc:	004a      	lsls	r2, r1, #1
 80009de:	d211      	bcs.n	8000a04 <__aeabi_d2uiz+0x28>
 80009e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009e4:	d211      	bcs.n	8000a0a <__aeabi_d2uiz+0x2e>
 80009e6:	d50d      	bpl.n	8000a04 <__aeabi_d2uiz+0x28>
 80009e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009f0:	d40e      	bmi.n	8000a10 <__aeabi_d2uiz+0x34>
 80009f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009fe:	fa23 f002 	lsr.w	r0, r3, r2
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a0e:	d102      	bne.n	8000a16 <__aeabi_d2uiz+0x3a>
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a14:	4770      	bx	lr
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	4770      	bx	lr

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <MotorInit>:
 * param [targetNumber]	1 or 2, or a Simplified Serial character like '1' or '2'.
 * return		None.
 */
static void writeSabertoothGetCommand(Sabertooth_Handler *st_handler, uint8_t getType, uint8_t targetType, uint8_t targetNumber);

void MotorInit(Sabertooth_Handler* st_handler, uint8_t address, UART_HandleTypeDef* huart){
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	72fb      	strb	r3, [r7, #11]
	st_handler->address = address;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	7afa      	ldrb	r2, [r7, #11]
 8000dc6:	701a      	strb	r2, [r3, #0]
	st_handler->huart = huart;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	605a      	str	r2, [r3, #4]
	st_handler->motor1.battery = 0;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	815a      	strh	r2, [r3, #10]
	st_handler->motor1.duty_cycle = 0;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	811a      	strh	r2, [r3, #8]
	st_handler->motor1.current = 0;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	819a      	strh	r2, [r3, #12]
	st_handler->motor1.temp = 0;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	81da      	strh	r2, [r3, #14]
	st_handler->motor2.battery = 0;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2200      	movs	r2, #0
 8000dea:	825a      	strh	r2, [r3, #18]
	st_handler->motor2.duty_cycle = 0;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2200      	movs	r2, #0
 8000df0:	821a      	strh	r2, [r3, #16]
	st_handler->motor2.current = 0;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2200      	movs	r2, #0
 8000df6:	829a      	strh	r2, [r3, #20]
	st_handler->motor2.temp = 0;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	82da      	strh	r2, [r3, #22]
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <MotorReadBattery>:
void MotorTimeout(Sabertooth_Handler *st_handler, int16_t value) {
	clamp(value, MIN_ALLOWABLE_VALUE, MAX_ALLOWABLE_VALUE);
	writeSabertoothSetCommand(st_handler, SET_VALUE, TYPE_MOTOR, TARGET_BOTH, value);
}

void MotorReadBattery(Sabertooth_Handler *st_handler) {
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	writeSabertoothGetCommand(st_handler, GET_BATTERY, TYPE_MOTOR, TARGET_1);
 8000e12:	2301      	movs	r3, #1
 8000e14:	224d      	movs	r2, #77	; 0x4d
 8000e16:	2110      	movs	r1, #16
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f9b3 	bl	8001184 <writeSabertoothGetCommand>
	writeSabertoothGetCommand(st_handler, GET_BATTERY, TYPE_MOTOR, TARGET_2);
 8000e1e:	2302      	movs	r3, #2
 8000e20:	224d      	movs	r2, #77	; 0x4d
 8000e22:	2110      	movs	r1, #16
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f9ad 	bl	8001184 <writeSabertoothGetCommand>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <MotorProcessReply>:
		return;
	uint8_t target_number = (motor == 1) ? TARGET_1 : TARGET_2;
	writeSabertoothGetCommand(st_handler, GET_DUTY_CYCLE, TYPE_MOTOR, target_number);
}

void MotorProcessReply(Sabertooth_Handler *st_handler, uint8_t *receive_buf, uint8_t size) {
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	71fb      	strb	r3, [r7, #7]
	//make sure the byte is have the right reply number
	if (receive_buf[IDX_COMMAND] != SABERTOOTH_REPLY)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3301      	adds	r3, #1
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b49      	cmp	r3, #73	; 0x49
 8000e4a:	f040 810b 	bne.w	8001064 <MotorProcessReply+0x230>
		return;
	//Checksum to make sure data receive is in the corrent form
	uint8_t dataChecksum = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	77fb      	strb	r3, [r7, #31]
	dataChecksum = (receive_buf[IDX_ADDRESS] + receive_buf[IDX_COMMAND] + receive_buf[IDX_COMMAND_VALUE]) & 127;
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	3302      	adds	r3, #2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e6e:	77fb      	strb	r3, [r7, #31]
	if (dataChecksum != receive_buf[IDX_CHECKSUM_1])
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	3303      	adds	r3, #3
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	7ffa      	ldrb	r2, [r7, #31]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 80f5 	bne.w	8001068 <MotorProcessReply+0x234>
		return;
	dataChecksum = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	77fb      	strb	r3, [r7, #31]
	for (int i = 4; i < size - 1; i++)
 8000e82:	2304      	movs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	e009      	b.n	8000e9c <MotorProcessReply+0x68>
		dataChecksum += receive_buf[i];
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	7ffb      	ldrb	r3, [r7, #31]
 8000e92:	4413      	add	r3, r2
 8000e94:	77fb      	strb	r3, [r7, #31]
	for (int i = 4; i < size - 1; i++)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	dbf0      	blt.n	8000e88 <MotorProcessReply+0x54>
	dataChecksum &= 127;
 8000ea6:	7ffb      	ldrb	r3, [r7, #31]
 8000ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eac:	77fb      	strb	r3, [r7, #31]
	if (dataChecksum != receive_buf[IDX_CHECKSUM_2(SABERTOOTH_REPLY)])
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	7ffa      	ldrb	r2, [r7, #31]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	f040 80d8 	bne.w	800106c <MotorProcessReply+0x238>
		return;

	int16_t reply_value = (receive_buf[IDX_VALUE_LOW] & 0x7F) + ((receive_buf[IDX_VALUE_HIGH] & 0x7F) << 7);
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	3305      	adds	r3, #5
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	01db      	lsls	r3, r3, #7
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	827b      	strh	r3, [r7, #18]

	//Create a pointer to hold the motor handler
	Sabertooth_Motor_Handler* pMotor;
	if ((receive_buf[IDX_TARGET_TYPE(SABERTOOTH_REPLY)] == TYPE_MOTOR ) && (receive_buf[IDX_TARGET_ID(SABERTOOTH_REPLY)] == TARGET_1))
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	3306      	adds	r3, #6
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b4d      	cmp	r3, #77	; 0x4d
 8000ee6:	d107      	bne.n	8000ef8 <MotorProcessReply+0xc4>
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	3307      	adds	r3, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d102      	bne.n	8000ef8 <MotorProcessReply+0xc4>
		pMotor = &(st_handler->motor1);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3308      	adds	r3, #8
 8000ef6:	617b      	str	r3, [r7, #20]
	if ((receive_buf[IDX_TARGET_TYPE(SABERTOOTH_REPLY)] == TYPE_MOTOR ) && (receive_buf[IDX_TARGET_ID(SABERTOOTH_REPLY)] == TARGET_2))
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	3306      	adds	r3, #6
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b4d      	cmp	r3, #77	; 0x4d
 8000f00:	d107      	bne.n	8000f12 <MotorProcessReply+0xde>
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3307      	adds	r3, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d102      	bne.n	8000f12 <MotorProcessReply+0xde>
		pMotor = &(st_handler->motor2);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3310      	adds	r3, #16
 8000f10:	617b      	str	r3, [r7, #20]

	//Check reply from which command
	switch (receive_buf[IDX_COMMAND_VALUE]) {
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	3302      	adds	r3, #2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b31      	cmp	r3, #49	; 0x31
 8000f1a:	f200 80a9 	bhi.w	8001070 <MotorProcessReply+0x23c>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <MotorProcessReply+0xf0>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08001047 	.word	0x08001047
 8000f28:	08001047 	.word	0x08001047
 8000f2c:	08001071 	.word	0x08001071
 8000f30:	08001071 	.word	0x08001071
 8000f34:	08001071 	.word	0x08001071
 8000f38:	08001071 	.word	0x08001071
 8000f3c:	08001071 	.word	0x08001071
 8000f40:	08001071 	.word	0x08001071
 8000f44:	08001071 	.word	0x08001071
 8000f48:	08001071 	.word	0x08001071
 8000f4c:	08001071 	.word	0x08001071
 8000f50:	08001071 	.word	0x08001071
 8000f54:	08001071 	.word	0x08001071
 8000f58:	08001071 	.word	0x08001071
 8000f5c:	08001071 	.word	0x08001071
 8000f60:	08001071 	.word	0x08001071
 8000f64:	08000fed 	.word	0x08000fed
 8000f68:	08000fed 	.word	0x08000fed
 8000f6c:	08001071 	.word	0x08001071
 8000f70:	08001071 	.word	0x08001071
 8000f74:	08001071 	.word	0x08001071
 8000f78:	08001071 	.word	0x08001071
 8000f7c:	08001071 	.word	0x08001071
 8000f80:	08001071 	.word	0x08001071
 8000f84:	08001071 	.word	0x08001071
 8000f88:	08001071 	.word	0x08001071
 8000f8c:	08001071 	.word	0x08001071
 8000f90:	08001071 	.word	0x08001071
 8000f94:	08001071 	.word	0x08001071
 8000f98:	08001071 	.word	0x08001071
 8000f9c:	08001071 	.word	0x08001071
 8000fa0:	08001071 	.word	0x08001071
 8000fa4:	0800100b 	.word	0x0800100b
 8000fa8:	0800100b 	.word	0x0800100b
 8000fac:	08001071 	.word	0x08001071
 8000fb0:	08001071 	.word	0x08001071
 8000fb4:	08001071 	.word	0x08001071
 8000fb8:	08001071 	.word	0x08001071
 8000fbc:	08001071 	.word	0x08001071
 8000fc0:	08001071 	.word	0x08001071
 8000fc4:	08001071 	.word	0x08001071
 8000fc8:	08001071 	.word	0x08001071
 8000fcc:	08001071 	.word	0x08001071
 8000fd0:	08001071 	.word	0x08001071
 8000fd4:	08001071 	.word	0x08001071
 8000fd8:	08001071 	.word	0x08001071
 8000fdc:	08001071 	.word	0x08001071
 8000fe0:	08001071 	.word	0x08001071
 8000fe4:	08001029 	.word	0x08001029
 8000fe8:	08001029 	.word	0x08001029
		case GET_BATTERY:
		case GET_BATTERY + 1:
			pMotor->battery = (receive_buf[IDX_COMMAND_VALUE] == GET_BATTERY) ? reply_value : -reply_value;
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	3302      	adds	r3, #2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b10      	cmp	r3, #16
 8000ff4:	d004      	beq.n	8001000 <MotorProcessReply+0x1cc>
 8000ff6:	8a7b      	ldrh	r3, [r7, #18]
 8000ff8:	425b      	negs	r3, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	e001      	b.n	8001004 <MotorProcessReply+0x1d0>
 8001000:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	8053      	strh	r3, [r2, #2]
			break;
 8001008:	e033      	b.n	8001072 <MotorProcessReply+0x23e>
		case GET_CURRENT:
		case GET_CURRENT + 1:
			pMotor->current = (receive_buf[IDX_COMMAND_VALUE] == GET_CURRENT) ? reply_value : -reply_value;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	3302      	adds	r3, #2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b20      	cmp	r3, #32
 8001012:	d004      	beq.n	800101e <MotorProcessReply+0x1ea>
 8001014:	8a7b      	ldrh	r3, [r7, #18]
 8001016:	425b      	negs	r3, r3
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21b      	sxth	r3, r3
 800101c:	e001      	b.n	8001022 <MotorProcessReply+0x1ee>
 800101e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	8093      	strh	r3, [r2, #4]
			break;
 8001026:	e024      	b.n	8001072 <MotorProcessReply+0x23e>
		case GET_TEMP:
		case GET_TEMP + 1:
			pMotor->temp = (receive_buf[IDX_COMMAND_VALUE] == GET_TEMP) ? reply_value : -reply_value;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3302      	adds	r3, #2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b30      	cmp	r3, #48	; 0x30
 8001030:	d004      	beq.n	800103c <MotorProcessReply+0x208>
 8001032:	8a7b      	ldrh	r3, [r7, #18]
 8001034:	425b      	negs	r3, r3
 8001036:	b29b      	uxth	r3, r3
 8001038:	b21b      	sxth	r3, r3
 800103a:	e001      	b.n	8001040 <MotorProcessReply+0x20c>
 800103c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	80d3      	strh	r3, [r2, #6]
			break;
 8001044:	e015      	b.n	8001072 <MotorProcessReply+0x23e>
		case GET_DUTY_CYCLE:
		case GET_DUTY_CYCLE + 1:
			pMotor->temp = (receive_buf[IDX_COMMAND_VALUE] == GET_TEMP) ? reply_value : -reply_value;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3302      	adds	r3, #2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b30      	cmp	r3, #48	; 0x30
 800104e:	d004      	beq.n	800105a <MotorProcessReply+0x226>
 8001050:	8a7b      	ldrh	r3, [r7, #18]
 8001052:	425b      	negs	r3, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	b21b      	sxth	r3, r3
 8001058:	e001      	b.n	800105e <MotorProcessReply+0x22a>
 800105a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	80d3      	strh	r3, [r2, #6]
			break;
 8001062:	e006      	b.n	8001072 <MotorProcessReply+0x23e>
		return;
 8001064:	bf00      	nop
 8001066:	e004      	b.n	8001072 <MotorProcessReply+0x23e>
		return;
 8001068:	bf00      	nop
 800106a:	e002      	b.n	8001072 <MotorProcessReply+0x23e>
		return;
 800106c:	bf00      	nop
 800106e:	e000      	b.n	8001072 <MotorProcessReply+0x23e>
		default:
			return;
 8001070:	bf00      	nop
		}
}
 8001072:	3724      	adds	r7, #36	; 0x24
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <writeSabertoothCommand>:

static int clamp(int x, int min, int max) {
	return MIN(MAX(min, x), max);
}

static void writeSabertoothCommand(Sabertooth_Handler *st_handler, uint8_t command, uint8_t value, const uint8_t *data, uint8_t length) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	72fb      	strb	r3, [r7, #11]
 800108a:	4613      	mov	r3, r2
 800108c:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	uint8_t dataChecksum;
	send_buf[IDX_ADDRESS] = st_handler->address;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <writeSabertoothCommand+0x100>)
 8001094:	701a      	strb	r2, [r3, #0]
	send_buf[IDX_COMMAND] = command;
 8001096:	4a39      	ldr	r2, [pc, #228]	; (800117c <writeSabertoothCommand+0x100>)
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	7053      	strb	r3, [r2, #1]
	send_buf[IDX_COMMAND_VALUE] = value;
 800109c:	4a37      	ldr	r2, [pc, #220]	; (800117c <writeSabertoothCommand+0x100>)
 800109e:	7abb      	ldrb	r3, [r7, #10]
 80010a0:	7093      	strb	r3, [r2, #2]
	send_buf[IDX_CHECKSUM_1] = (st_handler->address + command + value) & 127;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	7afb      	ldrb	r3, [r7, #11]
 80010a8:	4413      	add	r3, r2
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	7abb      	ldrb	r3, [r7, #10]
 80010ae:	4413      	add	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b30      	ldr	r3, [pc, #192]	; (800117c <writeSabertoothCommand+0x100>)
 80010ba:	70da      	strb	r2, [r3, #3]
	if (length == 0) {
 80010bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d057      	beq.n	8001174 <writeSabertoothCommand+0xf8>
		return;
	}

	dataChecksum = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < length; i++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]
 80010cc:	e011      	b.n	80010f2 <writeSabertoothCommand+0x76>
		send_buf[4 + i] = data[i];
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	441a      	add	r2, r3
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	3304      	adds	r3, #4
 80010d8:	7811      	ldrb	r1, [r2, #0]
 80010da:	4a28      	ldr	r2, [pc, #160]	; (800117c <writeSabertoothCommand+0x100>)
 80010dc:	54d1      	strb	r1, [r2, r3]
		dataChecksum += data[i];
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	7dbb      	ldrb	r3, [r7, #22]
 80010e8:	4413      	add	r3, r2
 80010ea:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < length; i++) {
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	3301      	adds	r3, #1
 80010f0:	75fb      	strb	r3, [r7, #23]
 80010f2:	7dfa      	ldrb	r2, [r7, #23]
 80010f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3e8      	bcc.n	80010ce <writeSabertoothCommand+0x52>
	}
	send_buf[IDX_CHECKSUM_2(command)] = dataChecksum & 127;
 80010fc:	7afb      	ldrb	r3, [r7, #11]
 80010fe:	2b28      	cmp	r3, #40	; 0x28
 8001100:	d002      	beq.n	8001108 <writeSabertoothCommand+0x8c>
 8001102:	7afb      	ldrb	r3, [r7, #11]
 8001104:	2b49      	cmp	r3, #73	; 0x49
 8001106:	d101      	bne.n	800110c <writeSabertoothCommand+0x90>
 8001108:	2308      	movs	r3, #8
 800110a:	e000      	b.n	800110e <writeSabertoothCommand+0x92>
 800110c:	2306      	movs	r3, #6
 800110e:	7dba      	ldrb	r2, [r7, #22]
 8001110:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001114:	b2d1      	uxtb	r1, r2
 8001116:	4a19      	ldr	r2, [pc, #100]	; (800117c <writeSabertoothCommand+0x100>)
 8001118:	54d1      	strb	r1, [r2, r3]
	if (command == SABERTOOTH_SET) {
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	2b28      	cmp	r3, #40	; 0x28
 800111e:	d107      	bne.n	8001130 <writeSabertoothCommand+0xb4>
		HAL_UART_Transmit(st_handler->huart, send_buf, SEND_BUF_SIZE_SET,1);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6858      	ldr	r0, [r3, #4]
 8001124:	2301      	movs	r3, #1
 8001126:	2209      	movs	r2, #9
 8001128:	4914      	ldr	r1, [pc, #80]	; (800117c <writeSabertoothCommand+0x100>)
 800112a:	f006 f998 	bl	800745e <HAL_UART_Transmit>
 800112e:	e022      	b.n	8001176 <writeSabertoothCommand+0xfa>
	} else if (command == SABERTOOTH_GET) {
 8001130:	7afb      	ldrb	r3, [r7, #11]
 8001132:	2b29      	cmp	r3, #41	; 0x29
 8001134:	d11f      	bne.n	8001176 <writeSabertoothCommand+0xfa>
		HAL_UART_Transmit(st_handler->huart, send_buf, SEND_BUF_SIZE_GET,1);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6858      	ldr	r0, [r3, #4]
 800113a:	2301      	movs	r3, #1
 800113c:	2207      	movs	r2, #7
 800113e:	490f      	ldr	r1, [pc, #60]	; (800117c <writeSabertoothCommand+0x100>)
 8001140:	f006 f98d 	bl	800745e <HAL_UART_Transmit>
		uint32_t t = HAL_GetTick();
 8001144:	f001 feaa 	bl	8002e9c <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]
		while(HAL_UART_Receive_DMA(st_handler->huart, motor_receive_buf, 9) != HAL_OK
 800114a:	bf00      	nop
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2209      	movs	r2, #9
 8001152:	490b      	ldr	r1, [pc, #44]	; (8001180 <writeSabertoothCommand+0x104>)
 8001154:	4618      	mov	r0, r3
 8001156:	f006 fa14 	bl	8007582 <HAL_UART_Receive_DMA>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f5      	bne.n	800114c <writeSabertoothCommand+0xd0>
				|| HAL_GetTick() - t > 5000);
 8001160:	f001 fe9c 	bl	8002e9c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	f241 3288 	movw	r2, #5000	; 0x1388
 800116e:	4293      	cmp	r3, r2
 8001170:	d8ec      	bhi.n	800114c <writeSabertoothCommand+0xd0>
 8001172:	e000      	b.n	8001176 <writeSabertoothCommand+0xfa>
		return;
 8001174:	bf00      	nop

	}
}
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200000cc 	.word	0x200000cc
 8001180:	200000e0 	.word	0x200000e0

08001184 <writeSabertoothGetCommand>:
		data[1] = (uint8_t) ((value >> 7) & 127);
		return writeSabertoothCommand(st_handler, SABERTOOTH_SET, setType, data, sizeof(data));
	}
}

static void writeSabertoothGetCommand(Sabertooth_Handler *st_handler, uint8_t getType, uint8_t targetType, uint8_t targetNumber) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	4608      	mov	r0, r1
 800118e:	4611      	mov	r1, r2
 8001190:	461a      	mov	r2, r3
 8001192:	4603      	mov	r3, r0
 8001194:	70fb      	strb	r3, [r7, #3]
 8001196:	460b      	mov	r3, r1
 8001198:	70bb      	strb	r3, [r7, #2]
 800119a:	4613      	mov	r3, r2
 800119c:	707b      	strb	r3, [r7, #1]
	uint8_t data[2];
	data[0] = targetType;
 800119e:	78bb      	ldrb	r3, [r7, #2]
 80011a0:	733b      	strb	r3, [r7, #12]
	data[1] = targetNumber;
 80011a2:	787b      	ldrb	r3, [r7, #1]
 80011a4:	737b      	strb	r3, [r7, #13]
	return writeSabertoothCommand(st_handler, SABERTOOTH_GET, getType, data, sizeof(data));
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	78fa      	ldrb	r2, [r7, #3]
 80011ac:	2102      	movs	r1, #2
 80011ae:	9100      	str	r1, [sp, #0]
 80011b0:	2129      	movs	r1, #41	; 0x29
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff62 	bl	800107c <writeSabertoothCommand>
}
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 80011c4:	2201      	movs	r2, #1
 80011c6:	2110      	movs	r1, #16
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <ADC_Init+0x7c>)
 80011ca:	f003 fbed 	bl	80049a8 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 80011ce:	2200      	movs	r2, #0
 80011d0:	2120      	movs	r1, #32
 80011d2:	481b      	ldr	r0, [pc, #108]	; (8001240 <ADC_Init+0x80>)
 80011d4:	f003 fbe8 	bl	80049a8 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 80011d8:	2200      	movs	r2, #0
 80011da:	2110      	movs	r1, #16
 80011dc:	4818      	ldr	r0, [pc, #96]	; (8001240 <ADC_Init+0x80>)
 80011de:	f003 fbe3 	bl	80049a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f001 fe66 	bl	8002eb4 <HAL_Delay>
	AD7606_RST_HIGH;
 80011e8:	2201      	movs	r2, #1
 80011ea:	2110      	movs	r1, #16
 80011ec:	4814      	ldr	r0, [pc, #80]	; (8001240 <ADC_Init+0x80>)
 80011ee:	f003 fbdb 	bl	80049a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f001 fe5e 	bl	8002eb4 <HAL_Delay>
	AD7606_RST_LOW;
 80011f8:	2200      	movs	r2, #0
 80011fa:	2110      	movs	r1, #16
 80011fc:	4810      	ldr	r0, [pc, #64]	; (8001240 <ADC_Init+0x80>)
 80011fe:	f003 fbd3 	bl	80049a8 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 8001202:	2200      	movs	r2, #0
 8001204:	2101      	movs	r1, #1
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <ADC_Init+0x80>)
 8001208:	f003 fbce 	bl	80049a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f001 fe51 	bl	8002eb4 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2102      	movs	r1, #2
 8001216:	480a      	ldr	r0, [pc, #40]	; (8001240 <ADC_Init+0x80>)
 8001218:	f003 fbc6 	bl	80049a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2104      	movs	r1, #4
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <ADC_Init+0x80>)
 8001222:	f003 fbc1 	bl	80049a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2108      	movs	r1, #8
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <ADC_Init+0x80>)
 800122c:	f003 fbbc 	bl	80049a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f001 fe3f 	bl	8002eb4 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40020000 	.word	0x40020000
 8001240:	40020800 	.word	0x40020800

08001244 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 8001248:	2200      	movs	r2, #0
 800124a:	2120      	movs	r1, #32
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <ADC_DataRequest+0x1c>)
 800124e:	f003 fbab 	bl	80049a8 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 8001252:	2201      	movs	r2, #1
 8001254:	2120      	movs	r1, #32
 8001256:	4802      	ldr	r0, [pc, #8]	; (8001260 <ADC_DataRequest+0x1c>)
 8001258:	f003 fba6 	bl	80049a8 <HAL_GPIO_WritePin>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40020800 	.word	0x40020800

08001264 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 800126c:	2200      	movs	r2, #0
 800126e:	2110      	movs	r1, #16
 8001270:	4808      	ldr	r0, [pc, #32]	; (8001294 <ADC_Read+0x30>)
 8001272:	f003 fb99 	bl	80049a8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8001276:	2302      	movs	r3, #2
 8001278:	2208      	movs	r2, #8
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <ADC_Read+0x34>)
 800127e:	f004 fad0 	bl	8005822 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8001282:	2201      	movs	r2, #1
 8001284:	2110      	movs	r1, #16
 8001286:	4803      	ldr	r0, [pc, #12]	; (8001294 <ADC_Read+0x30>)
 8001288:	f003 fb8e 	bl	80049a8 <HAL_GPIO_WritePin>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40020000 	.word	0x40020000
 8001298:	20000130 	.word	0x20000130

0800129c <emBrakeMotor>:

void enableMotor(Motor_TypeDef* motor, uint8_t state){
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
}

void emBrakeMotor(uint8_t state){
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	461a      	mov	r2, r3
 80012aa:	2108      	movs	r1, #8
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <emBrakeMotor+0x20>)
 80012ae:	f003 fb7b 	bl	80049a8 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020c00 	.word	0x40020c00

080012c0 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69d8      	ldr	r0, [r3, #28]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	8c1b      	ldrh	r3, [r3, #32]
 80012d4:	78fa      	ldrb	r2, [r7, #3]
 80012d6:	4619      	mov	r1, r3
 80012d8:	f003 fb66 	bl	80049a8 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->outputPWM, motor->PWM_channel);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	8b1b      	ldrh	r3, [r3, #24]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4610      	mov	r0, r2
 80012e8:	f004 ff26 	bl	8006138 <HAL_TIM_PWM_Stop>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	889b      	ldrh	r3, [r3, #4]
 8001306:	4619      	mov	r1, r3
 8001308:	4610      	mov	r0, r2
 800130a:	f003 fb35 	bl	8004978 <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799a      	ldrb	r2, [r3, #6]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	79db      	ldrb	r3, [r3, #7]
 800131e:	429a      	cmp	r2, r3
 8001320:	d004      	beq.n	800132c <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 8001322:	f001 fdbb 	bl	8002e9c <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 800132c:	f001 fdb6 	bl	8002e9c <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d209      	bcs.n	8001352 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	799a      	ldrb	r2, [r3, #6]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7a1b      	ldrb	r3, [r3, #8]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 800134e:	2301      	movs	r3, #1
 8001350:	e004      	b.n	800135c <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	799a      	ldrb	r2, [r3, #6]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <MX_CAN1_Init+0xc8>)
 800136c:	4a30      	ldr	r2, [pc, #192]	; (8001430 <MX_CAN1_Init+0xcc>)
 800136e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <MX_CAN1_Init+0xc8>)
 8001372:	2209      	movs	r2, #9
 8001374:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <MX_CAN1_Init+0xc8>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <MX_CAN1_Init+0xc8>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <MX_CAN1_Init+0xc8>)
 8001384:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001388:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <MX_CAN1_Init+0xc8>)
 800138c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001390:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <MX_CAN1_Init+0xc8>)
 8001394:	2200      	movs	r2, #0
 8001396:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <MX_CAN1_Init+0xc8>)
 800139a:	2200      	movs	r2, #0
 800139c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <MX_CAN1_Init+0xc8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_CAN1_Init+0xc8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_CAN1_Init+0xc8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_CAN1_Init+0xc8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013b6:	481d      	ldr	r0, [pc, #116]	; (800142c <MX_CAN1_Init+0xc8>)
 80013b8:	f001 fda0 	bl	8002efc <HAL_CAN_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80013c2:	f000 ffc7 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil_1;
	canfil_1.FilterBank = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61fb      	str	r3, [r7, #28]
	canfil_1.FilterIdHigh = 0x0000;
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
	canfil_1.FilterIdLow = 0x0000;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 80013e6:	2301      	movs	r3, #1
 80013e8:	623b      	str	r3, [r7, #32]
	canfil_1.SlaveStartFilterBank = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	480e      	ldr	r0, [pc, #56]	; (800142c <MX_CAN1_Init+0xc8>)
 80013f4:	f001 fe7e 	bl	80030f4 <HAL_CAN_ConfigFilter>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_CAN1_Init+0x9e>
				Error_Handler();
 80013fe:	f000 ffa9 	bl	8002354 <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001402:	2102      	movs	r1, #2
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <MX_CAN1_Init+0xc8>)
 8001406:	f002 f986 	bl	8003716 <HAL_CAN_ActivateNotification>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <MX_CAN1_Init+0xb2>
				return Error_Handler();
 8001410:	f000 ffa0 	bl	8002354 <Error_Handler>
 8001414:	e007      	b.n	8001426 <MX_CAN1_Init+0xc2>

	if (HAL_CAN_Start(&hcan1))
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_CAN1_Init+0xc8>)
 8001418:	f001 ff4c 	bl	80032b4 <HAL_CAN_Start>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_CAN1_Init+0xc2>
					return Error_Handler();
 8001422:	f000 ff97 	bl	8002354 <Error_Handler>


  /* USER CODE END CAN1_Init 2 */

}
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000188 	.word	0x20000188
 8001430:	40006400 	.word	0x40006400

08001434 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_CAN_MspInit+0x94>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d133      	bne.n	80014be <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_CAN_MspInit+0x98>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_CAN_MspInit+0x98>)
 8001460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_CAN_MspInit+0x98>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_CAN_MspInit+0x98>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a14      	ldr	r2, [pc, #80]	; (80014cc <HAL_CAN_MspInit+0x98>)
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_CAN_MspInit+0x98>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800148e:	2303      	movs	r3, #3
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800149e:	2309      	movs	r3, #9
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <HAL_CAN_MspInit+0x9c>)
 80014aa:	f003 f8b9 	bl	8004620 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2014      	movs	r0, #20
 80014b4:	f002 fc5f 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014b8:	2014      	movs	r0, #20
 80014ba:	f002 fc78 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40006400 	.word	0x40006400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020c00 	.word	0x40020c00

080014d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_DMA_Init+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a1e      	ldr	r2, [pc, #120]	; (800155c <MX_DMA_Init+0x88>)
 80014e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_DMA_Init+0x88>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_DMA_Init+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <MX_DMA_Init+0x88>)
 8001500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_DMA_Init+0x88>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	200c      	movs	r0, #12
 8001518:	f002 fc2d 	bl	8003d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800151c:	200c      	movs	r0, #12
 800151e:	f002 fc46 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	200e      	movs	r0, #14
 8001528:	f002 fc25 	bl	8003d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800152c:	200e      	movs	r0, #14
 800152e:	f002 fc3e 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2039      	movs	r0, #57	; 0x39
 8001538:	f002 fc1d 	bl	8003d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800153c:	2039      	movs	r0, #57	; 0x39
 800153e:	f002 fc36 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2045      	movs	r0, #69	; 0x45
 8001548:	f002 fc15 	bl	8003d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800154c:	2045      	movs	r0, #69	; 0x45
 800154e:	f002 fc2e 	bl	8003dae <HAL_NVIC_EnableIRQ>

}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <ENCODER_Init+0x24>)
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <ENCODER_Init+0x28>)
 8001568:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <ENCODER_Init+0x2c>)
 800156c:	4a06      	ldr	r2, [pc, #24]	; (8001588 <ENCODER_Init+0x28>)
 800156e:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001570:	2101      	movs	r1, #1
 8001572:	4804      	ldr	r0, [pc, #16]	; (8001584 <ENCODER_Init+0x24>)
 8001574:	f000 f83f 	bl	80015f6 <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001578:	2102      	movs	r1, #2
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <ENCODER_Init+0x2c>)
 800157c:	f000 f83b 	bl	80015f6 <ENCODER_Set_TxHeader>

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000230 	.word	0x20000230
 8001588:	20000188 	.word	0x20000188
 800158c:	200001d8 	.word	0x200001d8

08001590 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[1] = incoming_array[1];
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	785a      	ldrb	r2, [r3, #1]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[2] = incoming_array[2];
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	789a      	ldrb	r2, [r3, #2]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[3] = incoming_array[3];
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	78da      	ldrb	r2, [r3, #3]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Encoder_ptr->rawRead[4] = incoming_array[4];
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	791a      	ldrb	r2, [r3, #4]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Encoder_ptr->rawRead[5] = incoming_array[5];
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	795a      	ldrb	r2, [r3, #5]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Encoder_ptr->rawRead[6] = incoming_array[6];
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	799a      	ldrb	r2, [r3, #6]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Encoder_ptr->rawRead[7] = incoming_array[7];
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	79da      	ldrb	r2, [r3, #7]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2204      	movs	r2, #4
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	b2da      	uxtb	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->sendData[2] = 0x01;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->sendData[3] = 0x00;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f103 0120 	add.w	r1, r3, #32
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3338      	adds	r3, #56	; 0x38
 8001676:	f001 fe61 	bl	800333c <HAL_CAN_AddTxMessage>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffd1 	bl	8001632 <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80016c6:	461a      	mov	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	441a      	add	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80016d8:	041b      	lsls	r3, r3, #16
 80016da:	4413      	add	r3, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	; 0x30
 80016f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	4b8a      	ldr	r3, [pc, #552]	; (8001930 <MX_GPIO_Init+0x244>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a89      	ldr	r2, [pc, #548]	; (8001930 <MX_GPIO_Init+0x244>)
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b87      	ldr	r3, [pc, #540]	; (8001930 <MX_GPIO_Init+0x244>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	4b83      	ldr	r3, [pc, #524]	; (8001930 <MX_GPIO_Init+0x244>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a82      	ldr	r2, [pc, #520]	; (8001930 <MX_GPIO_Init+0x244>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b80      	ldr	r3, [pc, #512]	; (8001930 <MX_GPIO_Init+0x244>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <MX_GPIO_Init+0x244>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a7b      	ldr	r2, [pc, #492]	; (8001930 <MX_GPIO_Init+0x244>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b79      	ldr	r3, [pc, #484]	; (8001930 <MX_GPIO_Init+0x244>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b75      	ldr	r3, [pc, #468]	; (8001930 <MX_GPIO_Init+0x244>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a74      	ldr	r2, [pc, #464]	; (8001930 <MX_GPIO_Init+0x244>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b72      	ldr	r3, [pc, #456]	; (8001930 <MX_GPIO_Init+0x244>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b6e      	ldr	r3, [pc, #440]	; (8001930 <MX_GPIO_Init+0x244>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a6d      	ldr	r2, [pc, #436]	; (8001930 <MX_GPIO_Init+0x244>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b6b      	ldr	r3, [pc, #428]	; (8001930 <MX_GPIO_Init+0x244>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b67      	ldr	r3, [pc, #412]	; (8001930 <MX_GPIO_Init+0x244>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a66      	ldr	r2, [pc, #408]	; (8001930 <MX_GPIO_Init+0x244>)
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b64      	ldr	r3, [pc, #400]	; (8001930 <MX_GPIO_Init+0x244>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 80017aa:	2200      	movs	r2, #0
 80017ac:	213f      	movs	r1, #63	; 0x3f
 80017ae:	4861      	ldr	r0, [pc, #388]	; (8001934 <MX_GPIO_Init+0x248>)
 80017b0:	f003 f8fa 	bl	80049a8 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2110      	movs	r1, #16
 80017b8:	485f      	ldr	r0, [pc, #380]	; (8001938 <MX_GPIO_Init+0x24c>)
 80017ba:	f003 f8f5 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 80017be:	2200      	movs	r2, #0
 80017c0:	219b      	movs	r1, #155	; 0x9b
 80017c2:	485e      	ldr	r0, [pc, #376]	; (800193c <MX_GPIO_Init+0x250>)
 80017c4:	f003 f8f0 	bl	80049a8 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 80017ce:	485c      	ldr	r0, [pc, #368]	; (8001940 <MX_GPIO_Init+0x254>)
 80017d0:	f003 f8ea 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 80017d4:	2200      	movs	r2, #0
 80017d6:	f64e 4108 	movw	r1, #60424	; 0xec08
 80017da:	485a      	ldr	r0, [pc, #360]	; (8001944 <MX_GPIO_Init+0x258>)
 80017dc:	f003 f8e4 	bl	80049a8 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 80017e0:	2307      	movs	r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017e8:	2302      	movs	r3, #2
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	4853      	ldr	r0, [pc, #332]	; (8001940 <MX_GPIO_Init+0x254>)
 80017f4:	f002 ff14 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 80017f8:	f248 1378 	movw	r3, #33144	; 0x8178
 80017fc:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001802:	2301      	movs	r3, #1
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	484c      	ldr	r0, [pc, #304]	; (8001940 <MX_GPIO_Init+0x254>)
 800180e:	f002 ff07 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001812:	233f      	movs	r3, #63	; 0x3f
 8001814:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181a:	2301      	movs	r3, #1
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	4842      	ldr	r0, [pc, #264]	; (8001934 <MX_GPIO_Init+0x248>)
 800182a:	f002 fef9 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 800182e:	2310      	movs	r3, #16
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001836:	2301      	movs	r3, #1
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	483c      	ldr	r0, [pc, #240]	; (8001938 <MX_GPIO_Init+0x24c>)
 8001846:	f002 feeb 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800184e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	4836      	ldr	r0, [pc, #216]	; (8001938 <MX_GPIO_Init+0x24c>)
 8001860:	f002 fede 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001864:	239b      	movs	r3, #155	; 0x9b
 8001866:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186c:	2301      	movs	r3, #1
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	4830      	ldr	r0, [pc, #192]	; (800193c <MX_GPIO_Init+0x250>)
 800187c:	f002 fed0 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001880:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188a:	2301      	movs	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4829      	ldr	r0, [pc, #164]	; (8001940 <MX_GPIO_Init+0x254>)
 800189a:	f002 fec1 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin;
 800189e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b0:	2305      	movs	r3, #5
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4619      	mov	r1, r3
 80018ba:	4820      	ldr	r0, [pc, #128]	; (800193c <MX_GPIO_Init+0x250>)
 80018bc:	f002 feb0 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 80018c0:	f64e 4308 	movw	r3, #60424	; 0xec08
 80018c4:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	481a      	ldr	r0, [pc, #104]	; (8001944 <MX_GPIO_Init+0x258>)
 80018da:	f002 fea1 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 80018de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4814      	ldr	r0, [pc, #80]	; (8001944 <MX_GPIO_Init+0x258>)
 80018f4:	f002 fe94 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018f8:	2320      	movs	r3, #32
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001908:	2309      	movs	r3, #9
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	480a      	ldr	r0, [pc, #40]	; (800193c <MX_GPIO_Init+0x250>)
 8001914:	f002 fe84 	bl	8004620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	2017      	movs	r0, #23
 800191e:	f002 fa2a 	bl	8003d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001922:	2017      	movs	r0, #23
 8001924:	f002 fa43 	bl	8003dae <HAL_NVIC_EnableIRQ>

}
 8001928:	bf00      	nop
 800192a:	3730      	adds	r7, #48	; 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	40020800 	.word	0x40020800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40021000 	.word	0x40021000
 8001944:	40020c00 	.word	0x40020c00

08001948 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <MX_I2C1_Init+0x74>)
 800194e:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <MX_I2C1_Init+0x78>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_I2C1_Init+0x74>)
 8001954:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <MX_I2C1_Init+0x7c>)
 8001956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <MX_I2C1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <MX_I2C1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <MX_I2C1_Init+0x74>)
 8001966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <MX_I2C1_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <MX_I2C1_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <MX_I2C1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_I2C1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <MX_I2C1_Init+0x74>)
 8001986:	f003 f841 	bl	8004a0c <HAL_I2C_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001990:	f000 fce0 	bl	8002354 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001994:	2100      	movs	r1, #0
 8001996:	4809      	ldr	r0, [pc, #36]	; (80019bc <MX_I2C1_Init+0x74>)
 8001998:	f003 f97c 	bl	8004c94 <HAL_I2CEx_ConfigAnalogFilter>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80019a2:	f000 fcd7 	bl	8002354 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019a6:	2100      	movs	r1, #0
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_I2C1_Init+0x74>)
 80019aa:	f003 f9af 	bl	8004d0c <HAL_I2CEx_ConfigDigitalFilter>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80019b4:	f000 fcce 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000288 	.word	0x20000288
 80019c0:	40005400 	.word	0x40005400
 80019c4:	00061a80 	.word	0x00061a80

080019c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <HAL_I2C_MspInit+0x84>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d12c      	bne.n	8001a44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_I2C_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <HAL_I2C_MspInit+0x88>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_I2C_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001a06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0c:	2312      	movs	r3, #18
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a18:	2304      	movs	r3, #4
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	480c      	ldr	r0, [pc, #48]	; (8001a54 <HAL_I2C_MspInit+0x8c>)
 8001a24:	f002 fdfc 	bl	8004620 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_I2C_MspInit+0x88>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_I2C_MspInit+0x88>)
 8001a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a36:	6413      	str	r3, [r2, #64]	; 0x40
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_I2C_MspInit+0x88>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a44:	bf00      	nop
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020400 	.word	0x40020400

08001a58 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001a5e:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <MX_SPI1_Init+0x6c>)
 8001a60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001a64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a70:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001a90:	2228      	movs	r2, #40	; 0x28
 8001a92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001aa8:	220a      	movs	r2, #10
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001aae:	f003 fe2f 	bl	8005710 <HAL_SPI_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001ab8:	f000 fc4c 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000130 	.word	0x20000130
 8001ac4:	40013000 	.word	0x40013000

08001ac8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <HAL_SPI_MspInit+0x84>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d12b      	bne.n	8001b42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_SPI_MspInit+0x88>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <HAL_SPI_MspInit+0x88>)
 8001af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_SPI_MspInit+0x88>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_SPI_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_SPI_MspInit+0x88>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_SPI_MspInit+0x88>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8001b22:	2360      	movs	r3, #96	; 0x60
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b32:	2305      	movs	r3, #5
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <HAL_SPI_MspInit+0x8c>)
 8001b3e:	f002 fd6f 	bl	8004620 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40013000 	.word	0x40013000
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020000 	.word	0x40020000

08001b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfc:	f001 f93a 	bl	8002e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA1_Stream1_IRQHandler+0x10>)
 8001c0a:	f002 fa9f 	bl	800414c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000057c 	.word	0x2000057c

08001c18 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <DMA1_Stream3_IRQHandler+0x10>)
 8001c1e:	f002 fa95 	bl	800414c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000620 	.word	0x20000620

08001c2c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <CAN1_RX0_IRQHandler+0x10>)
 8001c32:	f001 fd96 	bl	8003762 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000188 	.word	0x20000188

08001c40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001c44:	2080      	movs	r0, #128	; 0x80
 8001c46:	f002 fec9 	bl	80049dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <USART3_IRQHandler+0x10>)
 8001c56:	f005 fcc5 	bl	80075e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200005dc 	.word	0x200005dc

08001c64 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001c6a:	f004 fb2e 	bl	80062ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200003fc 	.word	0x200003fc

08001c78 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001c7e:	f004 fb24 	bl	80062ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200003fc 	.word	0x200003fc

08001c8c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001c92:	f004 fb1a 	bl	80062ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200003fc 	.word	0x200003fc

08001ca0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <TIM8_CC_IRQHandler+0x10>)
 8001ca6:	f004 fb10 	bl	80062ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200003fc 	.word	0x200003fc

08001cb4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <DMA2_Stream1_IRQHandler+0x10>)
 8001cba:	f002 fa47 	bl	800414c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000051c 	.word	0x2000051c

08001cc8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <DMA2_Stream6_IRQHandler+0x10>)
 8001cce:	f002 fa3d 	bl	800414c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000680 	.word	0x20000680

08001cdc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <USART6_IRQHandler+0x10>)
 8001ce2:	f005 fc7f 	bl	80075e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000724 	.word	0x20000724

08001cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <SystemInit+0x28>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <SystemInit+0x28>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SystemInit+0x28>)
 8001d06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d22:	f001 f855 	bl	8002dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d26:	f000 f89b 	bl	8001e60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001d2a:	f003 fcbd 	bl	80056a8 <HAL_RCC_GetHCLKFreq>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4a3e      	ldr	r2, [pc, #248]	; (8001e2c <main+0x110>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 f846 	bl	8003dca <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d3e:	2004      	movs	r0, #4
 8001d40:	f002 f850 	bl	8003de4 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d4c:	f002 f813 	bl	8003d76 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d50:	f7ff fccc 	bl	80016ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001d54:	f7ff fbbe 	bl	80014d4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001d58:	f7ff fdf6 	bl	8001948 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001d5c:	f000 fb12 	bl	8002384 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d60:	f000 fbb0 	bl	80024c4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001d64:	f000 fe18 	bl	8002998 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001d68:	f000 fc20 	bl	80025ac <MX_TIM3_Init>
  MX_TIM8_Init();
 8001d6c:	f000 fc6c 	bl	8002648 <MX_TIM8_Init>
  MX_CAN1_Init();
 8001d70:	f7ff faf8 	bl	8001364 <MX_CAN1_Init>
  MX_SPI1_Init();
 8001d74:	f7ff fe70 	bl	8001a58 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001d78:	f000 fde4 	bl	8002944 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001d7c:	f000 fe36 	bl	80029ec <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 8001d80:	f000 fff0 	bl	8002d64 <joystick_Init>
	ADC_Init();
 8001d84:	f7ff fa1c 	bl	80011c0 <ADC_Init>
	ADC_DataRequest();
 8001d88:	f7ff fa5c 	bl	8001244 <ADC_DataRequest>
	ENCODER_Init();
 8001d8c:	f7ff fbe8 	bl	8001560 <ENCODER_Init>

	MotorInit(&sabertooth_handler, 128, &huart6);
 8001d90:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <main+0x114>)
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	4827      	ldr	r0, [pc, #156]	; (8001e34 <main+0x118>)
 8001d96:	f7ff f80d 	bl	8000db4 <MotorInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 8001d9a:	f001 f87f 	bl	8002e9c <HAL_GetTick>
 8001d9e:	6078      	str	r0, [r7, #4]
	ENCODER_Get_Angle(&encoderBack);
 8001da0:	4825      	ldr	r0, [pc, #148]	; (8001e38 <main+0x11c>)
 8001da2:	f7ff fc6e 	bl	8001682 <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 8001da6:	4825      	ldr	r0, [pc, #148]	; (8001e3c <main+0x120>)
 8001da8:	f7ff fc6b 	bl	8001682 <ENCODER_Get_Angle>

//	while (state_count++ < 1000)
//		MPU6050_Read_All(&hi2c1, &MPU6050);
//	initial_angle = MPU6050.KalmanAngleX;
	state_count = 0;
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <main+0x124>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 8001db2:	2001      	movs	r0, #1
 8001db4:	f7ff fa72 	bl	800129c <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 8001db8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dbc:	f001 f87a 	bl	8002eb4 <HAL_Delay>
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick

		if (HAL_GetTick() - prev_time >= 1)
 8001dc0:	f001 f86c 	bl	8002e9c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d0f9      	beq.n	8001dc0 <main+0xa4>
		{
			ADC_DataRequest();
 8001dcc:	f7ff fa3a 	bl	8001244 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 8001dd0:	4819      	ldr	r0, [pc, #100]	; (8001e38 <main+0x11c>)
 8001dd2:	f7ff fc2e 	bl	8001632 <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 8001dd6:	4819      	ldr	r0, [pc, #100]	; (8001e3c <main+0x120>)
 8001dd8:	f7ff fc2b 	bl	8001632 <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
//			MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Input(&button1, 30);
 8001ddc:	211e      	movs	r1, #30
 8001dde:	4819      	ldr	r0, [pc, #100]	; (8001e44 <main+0x128>)
 8001de0:	f7ff fa88 	bl	80012f4 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 8001de4:	211e      	movs	r1, #30
 8001de6:	4818      	ldr	r0, [pc, #96]	; (8001e48 <main+0x12c>)
 8001de8:	f7ff fa84 	bl	80012f4 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 8001dec:	211e      	movs	r1, #30
 8001dee:	4817      	ldr	r0, [pc, #92]	; (8001e4c <main+0x130>)
 8001df0:	f7ff fa80 	bl	80012f4 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8001df4:	2105      	movs	r1, #5
 8001df6:	4816      	ldr	r0, [pc, #88]	; (8001e50 <main+0x134>)
 8001df8:	f7ff fa7c 	bl	80012f4 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8001dfc:	2105      	movs	r1, #5
 8001dfe:	4815      	ldr	r0, [pc, #84]	; (8001e54 <main+0x138>)
 8001e00:	f7ff fa78 	bl	80012f4 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 8001e04:	2105      	movs	r1, #5
 8001e06:	4814      	ldr	r0, [pc, #80]	; (8001e58 <main+0x13c>)
 8001e08:	f7ff fa74 	bl	80012f4 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	4813      	ldr	r0, [pc, #76]	; (8001e5c <main+0x140>)
 8001e10:	f7ff fa70 	bl	80012f4 <GPIO_Digital_Filtered_Input>
//			}
////				MotorShutdown(&sabertooth_handler);
//			else if (button2.state == GPIO_PIN_RESET)
//				MotorThrottle(&sabertooth_handler, 2, 0);

			MotorReadBattery(&sabertooth_handler);
 8001e14:	4807      	ldr	r0, [pc, #28]	; (8001e34 <main+0x118>)
 8001e16:	f7fe fff8 	bl	8000e0a <MotorReadBattery>
			HAL_Delay(1000);
 8001e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e1e:	f001 f849 	bl	8002eb4 <HAL_Delay>
//			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
//				emBrakeMotor(0);
//			else
//				emBrakeMotor(1);

			prev_time = HAL_GetTick();
 8001e22:	f001 f83b 	bl	8002e9c <HAL_GetTick>
 8001e26:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - prev_time >= 1)
 8001e28:	e7ca      	b.n	8001dc0 <main+0xa4>
 8001e2a:	bf00      	nop
 8001e2c:	10624dd3 	.word	0x10624dd3
 8001e30:	20000724 	.word	0x20000724
 8001e34:	200002e0 	.word	0x200002e0
 8001e38:	20000230 	.word	0x20000230
 8001e3c:	200001d8 	.word	0x200001d8
 8001e40:	200000dc 	.word	0x200000dc
 8001e44:	20000078 	.word	0x20000078
 8001e48:	20000088 	.word	0x20000088
 8001e4c:	20000098 	.word	0x20000098
 8001e50:	20000038 	.word	0x20000038
 8001e54:	20000048 	.word	0x20000048
 8001e58:	20000058 	.word	0x20000058
 8001e5c:	20000068 	.word	0x20000068

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b094      	sub	sp, #80	; 0x50
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	2230      	movs	r2, #48	; 0x30
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f006 fc14 	bl	800869c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <SystemClock_Config+0xd8>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <SystemClock_Config+0xd8>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <SystemClock_Config+0xd8>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <SystemClock_Config+0xdc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <SystemClock_Config+0xdc>)
 8001eaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <SystemClock_Config+0xdc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ed4:	23b4      	movs	r3, #180	; 0xb4
 8001ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001edc:	2304      	movs	r3, #4
 8001ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 ffa1 	bl	8004e2c <HAL_RCC_OscConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ef0:	f000 fa30 	bl	8002354 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ef4:	f002 ff4a 	bl	8004d8c <HAL_PWREx_EnableOverDrive>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001efe:	f000 fa29 	bl	8002354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f02:	230f      	movs	r3, #15
 8001f04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f06:	2302      	movs	r3, #2
 8001f08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	2105      	movs	r1, #5
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 f9fb 	bl	800531c <HAL_RCC_ClockConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001f2c:	f000 fa12 	bl	8002354 <Error_Handler>
  }
}
 8001f30:	bf00      	nop
 8001f32:	3750      	adds	r7, #80	; 0x50
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40007000 	.word	0x40007000

08001f40 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	2b80      	cmp	r3, #128	; 0x80
 8001f4e:	d11c      	bne.n	8001f8a <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8001f50:	f000 ffa4 	bl	8002e9c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_GPIO_EXTI_Callback+0x58>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d916      	bls.n	8001f8e <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8001f60:	480e      	ldr	r0, [pc, #56]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001f62:	f7ff f97f 	bl	8001264 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001f68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001f70:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001f7c:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8001f7e:	f000 ff8d 	bl	8002e9c <HAL_GetTick>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_GPIO_EXTI_Callback+0x58>)
 8001f86:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8001f88:	e001      	b.n	8001f8e <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8001f8a:	bf00      	nop
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8001f8e:	bf00      	nop
	}
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200000d8 	.word	0x200000d8
 8001f9c:	2000039c 	.word	0x2000039c
 8001fa0:	200003f4 	.word	0x200003f4
 8001fa4:	200002f8 	.word	0x200002f8

08001fa8 <HAL_UART_RxCpltCallback>:
//			HAL_UART_Receive_DMA(huart, motor_receive_buf, sizeof(motor_receive_buf));
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a43      	ldr	r2, [pc, #268]	; (80020c4 <HAL_UART_RxCpltCallback+0x11c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d175      	bne.n	80020a6 <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8001fba:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8001fc2:	785b      	ldrb	r3, [r3, #1]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8001fcc:	789b      	ldrb	r3, [r3, #2]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8001fd6:	78db      	ldrb	r3, [r3, #3]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8001fde:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8001fe0:	791b      	ldrb	r3, [r3, #4]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8001fea:	795b      	ldrb	r3, [r3, #5]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8001ff2:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8001ff4:	799b      	ldrb	r3, [r3, #6]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8001ffe:	79db      	ldrb	r3, [r3, #7]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4413      	add	r3, r2
 8002004:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8002006:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002008:	7a1b      	ldrb	r3, [r3, #8]
 800200a:	b29b      	uxth	r3, r3
 800200c:	4413      	add	r3, r2
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002012:	7a5b      	ldrb	r3, [r3, #9]
 8002014:	b29b      	uxth	r3, r3
 8002016:	4413      	add	r3, r2
 8002018:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 800201a:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 800201c:	7a9b      	ldrb	r3, [r3, #10]
 800201e:	b29b      	uxth	r3, r3
 8002020:	4413      	add	r3, r2
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002026:	7adb      	ldrb	r3, [r3, #11]
 8002028:	b29b      	uxth	r3, r3
 800202a:	4413      	add	r3, r2
 800202c:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002030:	7b1b      	ldrb	r3, [r3, #12]
 8002032:	b29b      	uxth	r3, r3
 8002034:	4413      	add	r3, r2
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 800203a:	7b5b      	ldrb	r3, [r3, #13]
 800203c:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 800203e:	4413      	add	r3, r2
 8002040:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 8002042:	89fb      	ldrh	r3, [r7, #14]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002048:	7b9b      	ldrb	r3, [r3, #14]
 800204a:	429a      	cmp	r2, r3
 800204c:	d12b      	bne.n	80020a6 <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2baa      	cmp	r3, #170	; 0xaa
 8002054:	d127      	bne.n	80020a6 <HAL_UART_RxCpltCallback+0xfe>
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002058:	785b      	ldrb	r3, [r3, #1]
 800205a:	2ba4      	cmp	r3, #164	; 0xa4
 800205c:	d123      	bne.n	80020a6 <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002060:	78db      	ldrb	r3, [r3, #3]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d11f      	bne.n	80020a6 <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002068:	7a5b      	ldrb	r3, [r3, #9]
 800206a:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 800206e:	7a1b      	ldrb	r3, [r3, #8]
 8002070:	041b      	lsls	r3, r3, #16
 8002072:	441a      	add	r2, r3
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002076:	79db      	ldrb	r3, [r3, #7]
 8002078:	021b      	lsls	r3, r3, #8
 800207a:	4413      	add	r3, r2
						+ (receive_buf[6]);
 800207c:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 800207e:	7992      	ldrb	r2, [r2, #6]
 8002080:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <HAL_UART_RxCpltCallback+0x124>)
 8002084:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002088:	7b5b      	ldrb	r3, [r3, #13]
 800208a:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 800208e:	7b1b      	ldrb	r3, [r3, #12]
 8002090:	041b      	lsls	r3, r3, #16
 8002092:	441a      	add	r2, r3
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 8002096:	7adb      	ldrb	r3, [r3, #11]
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	4413      	add	r3, r2
						+ (receive_buf[10]);
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_UART_RxCpltCallback+0x120>)
 800209e:	7a92      	ldrb	r2, [r2, #10]
 80020a0:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_UART_RxCpltCallback+0x124>)
 80020a4:	6053      	str	r3, [r2, #4]
			}
		}
	}
	//Motor drivercallback
	if (huart->Instance == USART6)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_UART_RxCpltCallback+0x128>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d104      	bne.n	80020ba <HAL_UART_RxCpltCallback+0x112>
	{
			MotorProcessReply(&sabertooth_handler, motor_receive_buf, sizeof(motor_receive_buf));
 80020b0:	2209      	movs	r2, #9
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <HAL_UART_RxCpltCallback+0x12c>)
 80020b4:	4808      	ldr	r0, [pc, #32]	; (80020d8 <HAL_UART_RxCpltCallback+0x130>)
 80020b6:	f7fe febd 	bl	8000e34 <MotorProcessReply>

	}

}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40004800 	.word	0x40004800
 80020c8:	200003e4 	.word	0x200003e4
 80020cc:	200002fc 	.word	0x200002fc
 80020d0:	40011400 	.word	0x40011400
 80020d4:	200000e0 	.word	0x200000e0
 80020d8:	200002e0 	.word	0x200002e0
 80020dc:	00000000 	.word	0x00000000

080020e0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a8d      	ldr	r2, [pc, #564]	; (8002320 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	f040 810b 	bne.w	8002308 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	4a8b      	ldr	r2, [pc, #556]	; (8002324 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 80020f8:	2100      	movs	r1, #0
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f001 f9f9 	bl	80034f2 <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8002100:	7a7b      	ldrb	r3, [r7, #9]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d150      	bne.n	80021a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	4987      	ldr	r1, [pc, #540]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fa3f 	bl	8001590 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8002112:	4885      	ldr	r0, [pc, #532]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002114:	f7ff fab5 	bl	8001682 <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos)
 8002118:	4b83      	ldr	r3, [pc, #524]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (4096 * BACK_GEAR_RATIO);
 800211c:	425b      	negs	r3, r3
 800211e:	f3c3 030c 	ubfx	r3, r3, #0, #13
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
 8002122:	4a81      	ldr	r2, [pc, #516]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002126:	4b80      	ldr	r3, [pc, #512]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8002132:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800232c <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 8002136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800213a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002330 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 800213e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002142:	ee17 0a90 	vmov	r0, s15
 8002146:	f7fe f9b7 	bl	80004b8 <__aeabi_f2d>
 800214a:	a371      	add	r3, pc, #452	; (adr r3, 8002310 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe f854 	bl	80001fc <__adddf3>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fc5e 	bl	8000a1c <__aeabi_d2f>
 8002160:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002162:	4a71      	ldr	r2, [pc, #452]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8002166:	4b70      	ldr	r3, [pc, #448]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002168:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800216c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002330 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	dd09      	ble.n	800218e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
				encoderBack.angleDeg -= 360;
 800217a:	4b6b      	ldr	r3, [pc, #428]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800217c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002180:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002330 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002188:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800218a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (encoderBack.encoder_pos >= MAX_BACK_ALLOWABLE_ENC)
 800218e:	4b66      	ldr	r3, [pc, #408]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002196:	4293      	cmp	r3, r2
 8002198:	d306      	bcc.n	80021a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 800219a:	4b63      	ldr	r3, [pc, #396]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * BACK_GEAR_RATIO;
 800219e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80021a2:	461a      	mov	r2, r3
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 80021a4:	4b60      	ldr	r3, [pc, #384]	; (8002328 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80021a6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 80021a8:	7a7b      	ldrb	r3, [r7, #9]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	f040 80ac 	bne.w	8002308 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	495f      	ldr	r1, [pc, #380]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f9ea 	bl	8001590 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 80021bc:	485d      	ldr	r0, [pc, #372]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80021be:	f7ff fa60 	bl	8001682 <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 80021c2:	4b5c      	ldr	r3, [pc, #368]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 80021ca:	f247 522f 	movw	r2, #29999	; 0x752f
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d839      	bhi.n	8002246 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 80021d2:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 80021da:	4b57      	ldr	r3, [pc, #348]	; (8002338 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 80021dc:	fba3 1302 	umull	r1, r3, r3, r2
 80021e0:	0b5b      	lsrs	r3, r3, #13
 80021e2:	f242 3133 	movw	r1, #9011	; 0x2333
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 80021ec:	4a51      	ldr	r2, [pc, #324]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80021ee:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80021f0:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021fc:	ee17 0a90 	vmov	r0, s15
 8002200:	f7fe f95a 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002204:	a344      	add	r3, pc, #272	; (adr r3, 8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	f7fe fad7 	bl	80007bc <__aeabi_ddiv>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4b48      	ldr	r3, [pc, #288]	; (800233c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800221c:	f7fe f9a4 	bl	8000568 <__aeabi_dmul>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	a339      	add	r3, pc, #228	; (adr r3, 8002310 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	f7fd ffe5 	bl	80001fc <__adddf3>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f7fe fbef 	bl	8000a1c <__aeabi_d2f>
 800223e:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002240:	4a3c      	ldr	r2, [pc, #240]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002242:	6413      	str	r3, [r2, #64]	; 0x40
 8002244:	e047      	b.n	80022d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
			}
			else
			{
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
						- encoderFront.encoder_pos;
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f912 	bl	8000474 <__aeabi_ui2d>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	a130      	add	r1, pc, #192	; (adr r1, 8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800225a:	f7fd ffcd 	bl	80001f8 <__aeabi_dsub>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	f7fe fbb9 	bl	80009dc <__aeabi_d2uiz>
 800226a:	4603      	mov	r3, r0
 800226c:	4a31      	ldr	r2, [pc, #196]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800226e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227c:	ee17 0a90 	vmov	r0, s15
 8002280:	f7fe f91a 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8002284:	a324      	add	r3, pc, #144	; (adr r3, 8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f7fe fa97 	bl	80007bc <__aeabi_ddiv>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	4b28      	ldr	r3, [pc, #160]	; (800233c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800229c:	f7fe f964 	bl	8000568 <__aeabi_dmul>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	a319      	add	r3, pc, #100	; (adr r3, 8002310 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f7fd ffa5 	bl	80001fc <__adddf3>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	4b1f      	ldr	r3, [pc, #124]	; (800233c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80022c0:	f7fd ff9a 	bl	80001f8 <__aeabi_dsub>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fe fba6 	bl	8000a1c <__aeabi_d2f>
 80022d0:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (encoderFront.encoder_pos >= MAX_FRONT_ALLOWABLE_ENC)
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f640 421c 	movw	r2, #3100	; 0xc1c
 80022de:	4293      	cmp	r3, r2
 80022e0:	d312      	bcc.n	8002308 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * FRONT_GEAR_RATIO;
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f8c4 	bl	8000474 <__aeabi_ui2d>
 80022ec:	a30a      	add	r3, pc, #40	; (adr r3, 8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fd ff81 	bl	80001f8 <__aeabi_dsub>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fb45 	bl	800098c <__aeabi_d2iz>
 8002302:	4603      	mov	r3, r0
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002306:	6493      	str	r3, [r2, #72]	; 0x48
		}
	}
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	d0e56042 	.word	0xd0e56042
 8002314:	40424b22 	.word	0x40424b22
 8002318:	9999999a 	.word	0x9999999a
 800231c:	40c19999 	.word	0x40c19999
 8002320:	20000188 	.word	0x20000188
 8002324:	200000ec 	.word	0x200000ec
 8002328:	20000230 	.word	0x20000230
 800232c:	46000000 	.word	0x46000000
 8002330:	43b40000 	.word	0x43b40000
 8002334:	200001d8 	.word	0x200001d8
 8002338:	e8bb8111 	.word	0xe8bb8111
 800233c:	40768000 	.word	0x40768000

08002340 <HAL_UART_ErrorCallback>:
		first_loop = true;
	return is_lifting;

}
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_1);
 8002358:	2100      	movs	r1, #0
 800235a:	4808      	ldr	r0, [pc, #32]	; (800237c <Error_Handler+0x28>)
 800235c:	f003 feec 	bl	8006138 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_2);
 8002360:	2104      	movs	r1, #4
 8002362:	4806      	ldr	r0, [pc, #24]	; (800237c <Error_Handler+0x28>)
 8002364:	f003 fee8 	bl	8006138 <HAL_TIM_PWM_Stop>
	brakeMotor(&backMotor, 1);
 8002368:	2101      	movs	r1, #1
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <Error_Handler+0x2c>)
 800236c:	f7fe ffa8 	bl	80012c0 <brakeMotor>
	brakeMotor(&backMotor, 1);
 8002370:	2101      	movs	r1, #1
 8002372:	4803      	ldr	r0, [pc, #12]	; (8002380 <Error_Handler+0x2c>)
 8002374:	f7fe ffa4 	bl	80012c0 <brakeMotor>
  /* USER CODE END Error_Handler_Debug */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000444 	.word	0x20000444
 8002380:	20000000 	.word	0x20000000

08002384 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b096      	sub	sp, #88	; 0x58
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002398:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	615a      	str	r2, [r3, #20]
 80023b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2220      	movs	r2, #32
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f006 f96d 	bl	800869c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023c2:	4b3e      	ldr	r3, [pc, #248]	; (80024bc <MX_TIM1_Init+0x138>)
 80023c4:	4a3e      	ldr	r2, [pc, #248]	; (80024c0 <MX_TIM1_Init+0x13c>)
 80023c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <MX_TIM1_Init+0x138>)
 80023ca:	22b3      	movs	r2, #179	; 0xb3
 80023cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <MX_TIM1_Init+0x138>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80023d4:	4b39      	ldr	r3, [pc, #228]	; (80024bc <MX_TIM1_Init+0x138>)
 80023d6:	2263      	movs	r2, #99	; 0x63
 80023d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <MX_TIM1_Init+0x138>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <MX_TIM1_Init+0x138>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e6:	4b35      	ldr	r3, [pc, #212]	; (80024bc <MX_TIM1_Init+0x138>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023ec:	4833      	ldr	r0, [pc, #204]	; (80024bc <MX_TIM1_Init+0x138>)
 80023ee:	f003 fdfb 	bl	8005fe8 <HAL_TIM_Base_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80023f8:	f7ff ffac 	bl	8002354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002400:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002402:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002406:	4619      	mov	r1, r3
 8002408:	482c      	ldr	r0, [pc, #176]	; (80024bc <MX_TIM1_Init+0x138>)
 800240a:	f004 f9c5 	bl	8006798 <HAL_TIM_ConfigClockSource>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002414:	f7ff ff9e 	bl	8002354 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002418:	4828      	ldr	r0, [pc, #160]	; (80024bc <MX_TIM1_Init+0x138>)
 800241a:	f003 fe34 	bl	8006086 <HAL_TIM_PWM_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002424:	f7ff ff96 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002430:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002434:	4619      	mov	r1, r3
 8002436:	4821      	ldr	r0, [pc, #132]	; (80024bc <MX_TIM1_Init+0x138>)
 8002438:	f004 fee2 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002442:	f7ff ff87 	bl	8002354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002446:	2360      	movs	r3, #96	; 0x60
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800244e:	2300      	movs	r3, #0
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002452:	2300      	movs	r3, #0
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002466:	2204      	movs	r2, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4814      	ldr	r0, [pc, #80]	; (80024bc <MX_TIM1_Init+0x138>)
 800246c:	f004 f8d2 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002476:	f7ff ff6d 	bl	8002354 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800248e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002492:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	4619      	mov	r1, r3
 800249c:	4807      	ldr	r0, [pc, #28]	; (80024bc <MX_TIM1_Init+0x138>)
 800249e:	f004 ff2b 	bl	80072f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80024a8:	f7ff ff54 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024ac:	4803      	ldr	r0, [pc, #12]	; (80024bc <MX_TIM1_Init+0x138>)
 80024ae:	f000 f9e7 	bl	8002880 <HAL_TIM_MspPostInit>

}
 80024b2:	bf00      	nop
 80024b4:	3758      	adds	r7, #88	; 0x58
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000048c 	.word	0x2000048c
 80024c0:	40010000 	.word	0x40010000

080024c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08e      	sub	sp, #56	; 0x38
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
 80024f0:	615a      	str	r2, [r3, #20]
 80024f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <MX_TIM2_Init+0xe4>)
 80024f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <MX_TIM2_Init+0xe4>)
 80024fe:	2259      	movs	r2, #89	; 0x59
 8002500:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <MX_TIM2_Init+0xe4>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <MX_TIM2_Init+0xe4>)
 800250a:	2263      	movs	r2, #99	; 0x63
 800250c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <MX_TIM2_Init+0xe4>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002514:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <MX_TIM2_Init+0xe4>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800251a:	4823      	ldr	r0, [pc, #140]	; (80025a8 <MX_TIM2_Init+0xe4>)
 800251c:	f003 fd64 	bl	8005fe8 <HAL_TIM_Base_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002526:	f7ff ff15 	bl	8002354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002534:	4619      	mov	r1, r3
 8002536:	481c      	ldr	r0, [pc, #112]	; (80025a8 <MX_TIM2_Init+0xe4>)
 8002538:	f004 f92e 	bl	8006798 <HAL_TIM_ConfigClockSource>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002542:	f7ff ff07 	bl	8002354 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002546:	4818      	ldr	r0, [pc, #96]	; (80025a8 <MX_TIM2_Init+0xe4>)
 8002548:	f003 fd9d 	bl	8006086 <HAL_TIM_PWM_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002552:	f7ff feff 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800255e:	f107 0320 	add.w	r3, r7, #32
 8002562:	4619      	mov	r1, r3
 8002564:	4810      	ldr	r0, [pc, #64]	; (80025a8 <MX_TIM2_Init+0xe4>)
 8002566:	f004 fe4b 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002570:	f7ff fef0 	bl	8002354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002574:	2360      	movs	r3, #96	; 0x60
 8002576:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	2208      	movs	r2, #8
 8002588:	4619      	mov	r1, r3
 800258a:	4807      	ldr	r0, [pc, #28]	; (80025a8 <MX_TIM2_Init+0xe4>)
 800258c:	f004 f842 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002596:	f7ff fedd 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800259a:	4803      	ldr	r0, [pc, #12]	; (80025a8 <MX_TIM2_Init+0xe4>)
 800259c:	f000 f970 	bl	8002880 <HAL_TIM_MspPostInit>

}
 80025a0:	bf00      	nop
 80025a2:	3738      	adds	r7, #56	; 0x38
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200004d4 	.word	0x200004d4

080025ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b2:	f107 0308 	add.w	r3, r7, #8
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	463b      	mov	r3, r7
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <MX_TIM3_Init+0x94>)
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <MX_TIM3_Init+0x98>)
 80025cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <MX_TIM3_Init+0x94>)
 80025d0:	2259      	movs	r2, #89	; 0x59
 80025d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_TIM3_Init+0x94>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <MX_TIM3_Init+0x94>)
 80025dc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80025e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <MX_TIM3_Init+0x94>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b15      	ldr	r3, [pc, #84]	; (8002640 <MX_TIM3_Init+0x94>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025ee:	4814      	ldr	r0, [pc, #80]	; (8002640 <MX_TIM3_Init+0x94>)
 80025f0:	f003 fcfa 	bl	8005fe8 <HAL_TIM_Base_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025fa:	f7ff feab 	bl	8002354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002602:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002604:	f107 0308 	add.w	r3, r7, #8
 8002608:	4619      	mov	r1, r3
 800260a:	480d      	ldr	r0, [pc, #52]	; (8002640 <MX_TIM3_Init+0x94>)
 800260c:	f004 f8c4 	bl	8006798 <HAL_TIM_ConfigClockSource>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002616:	f7ff fe9d 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002622:	463b      	mov	r3, r7
 8002624:	4619      	mov	r1, r3
 8002626:	4806      	ldr	r0, [pc, #24]	; (8002640 <MX_TIM3_Init+0x94>)
 8002628:	f004 fdea 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002632:	f7ff fe8f 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000444 	.word	0x20000444
 8002644:	40000400 	.word	0x40000400

08002648 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264e:	f107 0318 	add.w	r3, r7, #24
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265c:	f107 0310 	add.w	r3, r7, #16
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002666:	463b      	mov	r3, r7
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <MX_TIM8_Init+0xe0>)
 8002674:	4a2d      	ldr	r2, [pc, #180]	; (800272c <MX_TIM8_Init+0xe4>)
 8002676:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <MX_TIM8_Init+0xe0>)
 800267a:	2259      	movs	r2, #89	; 0x59
 800267c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267e:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <MX_TIM8_Init+0xe0>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002684:	4b28      	ldr	r3, [pc, #160]	; (8002728 <MX_TIM8_Init+0xe0>)
 8002686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268c:	4b26      	ldr	r3, [pc, #152]	; (8002728 <MX_TIM8_Init+0xe0>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002692:	4b25      	ldr	r3, [pc, #148]	; (8002728 <MX_TIM8_Init+0xe0>)
 8002694:	2200      	movs	r2, #0
 8002696:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002698:	4b23      	ldr	r3, [pc, #140]	; (8002728 <MX_TIM8_Init+0xe0>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800269e:	4822      	ldr	r0, [pc, #136]	; (8002728 <MX_TIM8_Init+0xe0>)
 80026a0:	f003 fca2 	bl	8005fe8 <HAL_TIM_Base_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80026aa:	f7ff fe53 	bl	8002354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026b4:	f107 0318 	add.w	r3, r7, #24
 80026b8:	4619      	mov	r1, r3
 80026ba:	481b      	ldr	r0, [pc, #108]	; (8002728 <MX_TIM8_Init+0xe0>)
 80026bc:	f004 f86c 	bl	8006798 <HAL_TIM_ConfigClockSource>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80026c6:	f7ff fe45 	bl	8002354 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80026ca:	4817      	ldr	r0, [pc, #92]	; (8002728 <MX_TIM8_Init+0xe0>)
 80026cc:	f003 fda4 	bl	8006218 <HAL_TIM_IC_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80026d6:	f7ff fe3d 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026e2:	f107 0310 	add.w	r3, r7, #16
 80026e6:	4619      	mov	r1, r3
 80026e8:	480f      	ldr	r0, [pc, #60]	; (8002728 <MX_TIM8_Init+0xe0>)
 80026ea:	f004 fd89 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 80026f4:	f7ff fe2e 	bl	8002354 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026f8:	2300      	movs	r3, #0
 80026fa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80026fc:	2301      	movs	r3, #1
 80026fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002708:	463b      	mov	r3, r7
 800270a:	220c      	movs	r2, #12
 800270c:	4619      	mov	r1, r3
 800270e:	4806      	ldr	r0, [pc, #24]	; (8002728 <MX_TIM8_Init+0xe0>)
 8002710:	f003 fee3 	bl	80064da <HAL_TIM_IC_ConfigChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800271a:	f7ff fe1b 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800271e:	bf00      	nop
 8002720:	3728      	adds	r7, #40	; 0x28
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200003fc 	.word	0x200003fc
 800272c:	40010400 	.word	0x40010400

08002730 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 031c 	add.w	r3, r7, #28
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a47      	ldr	r2, [pc, #284]	; (800286c <HAL_TIM_Base_MspInit+0x13c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10e      	bne.n	8002770 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	4a45      	ldr	r2, [pc, #276]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6453      	str	r3, [r2, #68]	; 0x44
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800276e:	e079      	b.n	8002864 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002778:	d10e      	bne.n	8002798 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a3b      	ldr	r2, [pc, #236]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b39      	ldr	r3, [pc, #228]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697b      	ldr	r3, [r7, #20]
}
 8002796:	e065      	b.n	8002864 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM3)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a35      	ldr	r2, [pc, #212]	; (8002874 <HAL_TIM_Base_MspInit+0x144>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10e      	bne.n	80027c0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a31      	ldr	r2, [pc, #196]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
}
 80027be:	e051      	b.n	8002864 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM8)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <HAL_TIM_Base_MspInit+0x148>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d14c      	bne.n	8002864 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a27      	ldr	r2, [pc, #156]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a20      	ldr	r2, [pc, #128]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_TIM_Base_MspInit+0x140>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002814:	2303      	movs	r3, #3
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	4817      	ldr	r0, [pc, #92]	; (800287c <HAL_TIM_Base_MspInit+0x14c>)
 8002820:	f001 fefe 	bl	8004620 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	2100      	movs	r1, #0
 8002828:	202b      	movs	r0, #43	; 0x2b
 800282a:	f001 faa4 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800282e:	202b      	movs	r0, #43	; 0x2b
 8002830:	f001 fabd 	bl	8003dae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2100      	movs	r1, #0
 8002838:	202c      	movs	r0, #44	; 0x2c
 800283a:	f001 fa9c 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800283e:	202c      	movs	r0, #44	; 0x2c
 8002840:	f001 fab5 	bl	8003dae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	202d      	movs	r0, #45	; 0x2d
 800284a:	f001 fa94 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800284e:	202d      	movs	r0, #45	; 0x2d
 8002850:	f001 faad 	bl	8003dae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	202e      	movs	r0, #46	; 0x2e
 800285a:	f001 fa8c 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800285e:	202e      	movs	r0, #46	; 0x2e
 8002860:	f001 faa5 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8002864:	bf00      	nop
 8002866:	3730      	adds	r7, #48	; 0x30
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40010000 	.word	0x40010000
 8002870:	40023800 	.word	0x40023800
 8002874:	40000400 	.word	0x40000400
 8002878:	40010400 	.word	0x40010400
 800287c:	40020800 	.word	0x40020800

08002880 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a25      	ldr	r2, [pc, #148]	; (8002934 <HAL_TIM_MspPostInit+0xb4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d11f      	bne.n	80028e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_TIM_MspPostInit+0xb8>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a23      	ldr	r2, [pc, #140]	; (8002938 <HAL_TIM_MspPostInit+0xb8>)
 80028ac:	f043 0310 	orr.w	r3, r3, #16
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_TIM_MspPostInit+0xb8>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 80028be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028d0:	2301      	movs	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4619      	mov	r1, r3
 80028da:	4818      	ldr	r0, [pc, #96]	; (800293c <HAL_TIM_MspPostInit+0xbc>)
 80028dc:	f001 fea0 	bl	8004620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028e0:	e023      	b.n	800292a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ea:	d11e      	bne.n	800292a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_TIM_MspPostInit+0xb8>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	4a10      	ldr	r2, [pc, #64]	; (8002938 <HAL_TIM_MspPostInit+0xb8>)
 80028f6:	f043 0302 	orr.w	r3, r3, #2
 80028fa:	6313      	str	r3, [r2, #48]	; 0x30
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <HAL_TIM_MspPostInit+0xb8>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 8002908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800290c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800291a:	2301      	movs	r3, #1
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	4806      	ldr	r0, [pc, #24]	; (8002940 <HAL_TIM_MspPostInit+0xc0>)
 8002926:	f001 fe7b 	bl	8004620 <HAL_GPIO_Init>
}
 800292a:	bf00      	nop
 800292c:	3728      	adds	r7, #40	; 0x28
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40023800 	.word	0x40023800
 800293c:	40021000 	.word	0x40021000
 8002940:	40020400 	.word	0x40020400

08002944 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <MX_USART1_UART_Init+0x50>)
 800294c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 8002950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800297a:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_USART1_UART_Init+0x4c>)
 800297c:	f004 fd22 	bl	80073c4 <HAL_UART_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002986:	f7ff fce5 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200006e0 	.word	0x200006e0
 8002994:	40011000 	.word	0x40011000

08002998 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <MX_USART3_UART_Init+0x50>)
 80029a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029be:	220c      	movs	r2, #12
 80029c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029ce:	4805      	ldr	r0, [pc, #20]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029d0:	f004 fcf8 	bl	80073c4 <HAL_UART_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029da:	f7ff fcbb 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200005dc 	.word	0x200005dc
 80029e8:	40004800 	.word	0x40004800

080029ec <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 80029f2:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <MX_USART6_UART_Init+0x50>)
 80029f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 80029f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a12:	220c      	movs	r2, #12
 8002a14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a22:	4805      	ldr	r0, [pc, #20]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a24:	f004 fcce 	bl	80073c4 <HAL_UART_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a2e:	f7ff fc91 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000724 	.word	0x20000724
 8002a3c:	40011400 	.word	0x40011400

08002a40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08e      	sub	sp, #56	; 0x38
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a64      	ldr	r2, [pc, #400]	; (8002bf0 <HAL_UART_MspInit+0x1b0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d12d      	bne.n	8002abe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a62      	ldr	r2, [pc, #392]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002a6c:	f043 0310 	orr.w	r3, r3, #16
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b60      	ldr	r3, [pc, #384]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	623b      	str	r3, [r7, #32]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a5b      	ldr	r2, [pc, #364]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aac:	2307      	movs	r3, #7
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4850      	ldr	r0, [pc, #320]	; (8002bf8 <HAL_UART_MspInit+0x1b8>)
 8002ab8:	f001 fdb2 	bl	8004620 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002abc:	e140      	b.n	8002d40 <HAL_UART_MspInit+0x300>
  else if(uartHandle->Instance==USART3)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a4e      	ldr	r2, [pc, #312]	; (8002bfc <HAL_UART_MspInit+0x1bc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	f040 80a5 	bne.w	8002c14 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	4b49      	ldr	r3, [pc, #292]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4a48      	ldr	r2, [pc, #288]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ada:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	4b42      	ldr	r3, [pc, #264]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a41      	ldr	r2, [pc, #260]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002af0:	f043 0308 	orr.w	r3, r3, #8
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <HAL_UART_MspInit+0x1b4>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8002b02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2303      	movs	r3, #3
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b14:	2307      	movs	r3, #7
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4838      	ldr	r0, [pc, #224]	; (8002c00 <HAL_UART_MspInit+0x1c0>)
 8002b20:	f001 fd7e 	bl	8004620 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002b24:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b26:	4a38      	ldr	r2, [pc, #224]	; (8002c08 <HAL_UART_MspInit+0x1c8>)
 8002b28:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b30:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b32:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b38:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b44:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b46:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002b52:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b64:	4827      	ldr	r0, [pc, #156]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b66:	f001 f959 	bl	8003e1c <HAL_DMA_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002b70:	f7ff fbf0 	bl	8002354 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a23      	ldr	r2, [pc, #140]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38
 8002b7a:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <HAL_UART_MspInit+0x1c4>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002b82:	4a23      	ldr	r2, [pc, #140]	; (8002c10 <HAL_UART_MspInit+0x1d0>)
 8002b84:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002b86:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002b88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b8c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b8e:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002b90:	2240      	movs	r2, #64	; 0x40
 8002b92:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b94:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba2:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ba8:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bb4:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002bc0:	4812      	ldr	r0, [pc, #72]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002bc2:	f001 f92b 	bl	8003e1c <HAL_DMA_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8002bcc:	f7ff fbc2 	bl	8002354 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd6:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <HAL_UART_MspInit+0x1cc>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2027      	movs	r0, #39	; 0x27
 8002be2:	f001 f8c8 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002be6:	2027      	movs	r0, #39	; 0x27
 8002be8:	f001 f8e1 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8002bec:	e0a8      	b.n	8002d40 <HAL_UART_MspInit+0x300>
 8002bee:	bf00      	nop
 8002bf0:	40011000 	.word	0x40011000
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	40004800 	.word	0x40004800
 8002c00:	40020c00 	.word	0x40020c00
 8002c04:	2000057c 	.word	0x2000057c
 8002c08:	40026028 	.word	0x40026028
 8002c0c:	20000620 	.word	0x20000620
 8002c10:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	; (8002d48 <HAL_UART_MspInit+0x308>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	f040 8090 	bne.w	8002d40 <HAL_UART_MspInit+0x300>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	4b49      	ldr	r3, [pc, #292]	; (8002d4c <HAL_UART_MspInit+0x30c>)
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	4a48      	ldr	r2, [pc, #288]	; (8002d4c <HAL_UART_MspInit+0x30c>)
 8002c2a:	f043 0320 	orr.w	r3, r3, #32
 8002c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c30:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <HAL_UART_MspInit+0x30c>)
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	4b42      	ldr	r3, [pc, #264]	; (8002d4c <HAL_UART_MspInit+0x30c>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	4a41      	ldr	r2, [pc, #260]	; (8002d4c <HAL_UART_MspInit+0x30c>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4c:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <HAL_UART_MspInit+0x30c>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c58:	23c0      	movs	r3, #192	; 0xc0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c64:	2303      	movs	r3, #3
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c68:	2308      	movs	r3, #8
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c70:	4619      	mov	r1, r3
 8002c72:	4837      	ldr	r0, [pc, #220]	; (8002d50 <HAL_UART_MspInit+0x310>)
 8002c74:	f001 fcd4 	bl	8004620 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002c78:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002c7a:	4a37      	ldr	r2, [pc, #220]	; (8002d58 <HAL_UART_MspInit+0x318>)
 8002c7c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002c7e:	4b35      	ldr	r3, [pc, #212]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002c80:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002c84:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c86:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c8c:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c92:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c98:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c9a:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cac:	4b29      	ldr	r3, [pc, #164]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002cb8:	4826      	ldr	r0, [pc, #152]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002cba:	f001 f8af 	bl	8003e1c <HAL_DMA_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_UART_MspInit+0x288>
      Error_Handler();
 8002cc4:	f7ff fb46 	bl	8002354 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a22      	ldr	r2, [pc, #136]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8002cce:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <HAL_UART_MspInit+0x314>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002cd6:	4a22      	ldr	r2, [pc, #136]	; (8002d60 <HAL_UART_MspInit+0x320>)
 8002cd8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002cdc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002ce0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002ce4:	2240      	movs	r2, #64	; 0x40
 8002ce6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cee:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cfc:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002d02:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002d14:	4811      	ldr	r0, [pc, #68]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002d16:	f001 f881 	bl	8003e1c <HAL_DMA_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_UART_MspInit+0x2e4>
      Error_Handler();
 8002d20:	f7ff fb18 	bl	8002354 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002d28:	635a      	str	r2, [r3, #52]	; 0x34
 8002d2a:	4a0c      	ldr	r2, [pc, #48]	; (8002d5c <HAL_UART_MspInit+0x31c>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2100      	movs	r1, #0
 8002d34:	2047      	movs	r0, #71	; 0x47
 8002d36:	f001 f81e 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002d3a:	2047      	movs	r0, #71	; 0x47
 8002d3c:	f001 f837 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8002d40:	bf00      	nop
 8002d42:	3738      	adds	r7, #56	; 0x38
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40011400 	.word	0x40011400
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020800 	.word	0x40020800
 8002d54:	2000051c 	.word	0x2000051c
 8002d58:	40026428 	.word	0x40026428
 8002d5c:	20000680 	.word	0x20000680
 8002d60:	400264a0 	.word	0x400264a0

08002d64 <joystick_Init>:
static const float JoyTurnAngleDeadzone = 0.2;

static const float JoyLeftTurnAngle = 3.142;
static const float JoyRightTurnAngle = 0;

void joystick_Init(void){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8002d68:	2228      	movs	r2, #40	; 0x28
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <joystick_Init+0x14>)
 8002d6e:	f005 fc95 	bl	800869c <memset>
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000108 	.word	0x20000108

08002d7c <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8002d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d82:	e003      	b.n	8002d8c <LoopCopyDataInit>

08002d84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d8a:	3104      	adds	r1, #4

08002d8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d8c:	480b      	ldr	r0, [pc, #44]	; (8002dbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d94:	d3f6      	bcc.n	8002d84 <CopyDataInit>
  ldr  r2, =_sbss
 8002d96:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d98:	e002      	b.n	8002da0 <LoopFillZerobss>

08002d9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d9c:	f842 3b04 	str.w	r3, [r2], #4

08002da0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002da2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002da4:	d3f9      	bcc.n	8002d9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002da6:	f7fe ffa3 	bl	8001cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002daa:	f005 fc53 	bl	8008654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dae:	f7fe ffb5 	bl	8001d1c <main>
  bx  lr    
 8002db2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002db4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002db8:	080086f4 	.word	0x080086f4
  ldr  r0, =_sdata
 8002dbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002dc0:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8002dc4:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8002dc8:	2000076c 	.word	0x2000076c

08002dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <ADC_IRQHandler>
	...

08002dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_Init+0x40>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <HAL_Init+0x40>)
 8002dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_Init+0x40>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_Init+0x40>)
 8002de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <HAL_Init+0x40>)
 8002df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df8:	2003      	movs	r0, #3
 8002dfa:	f000 ffb1 	bl	8003d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f000 f808 	bl	8002e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e04:	f7fe fea8 	bl	8001b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023c00 	.word	0x40023c00

08002e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_InitTick+0x54>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_InitTick+0x58>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 ffc9 	bl	8003dca <HAL_SYSTICK_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00e      	b.n	8002e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0f      	cmp	r3, #15
 8002e46:	d80a      	bhi.n	8002e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e50:	f000 ff91 	bl	8003d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e54:	4a06      	ldr	r2, [pc, #24]	; (8002e70 <HAL_InitTick+0x5c>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000034 	.word	0x20000034
 8002e6c:	200000ac 	.word	0x200000ac
 8002e70:	200000a8 	.word	0x200000a8

08002e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_IncTick+0x20>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_IncTick+0x24>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <HAL_IncTick+0x24>)
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	200000ac 	.word	0x200000ac
 8002e98:	20000768 	.word	0x20000768

08002e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <HAL_GetTick+0x14>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000768 	.word	0x20000768

08002eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff ffee 	bl	8002e9c <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ecc:	d005      	beq.n	8002eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_Delay+0x44>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eda:	bf00      	nop
 8002edc:	f7ff ffde 	bl	8002e9c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d8f7      	bhi.n	8002edc <HAL_Delay+0x28>
  {
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200000ac 	.word	0x200000ac

08002efc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0ed      	b.n	80030ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe fa8a 	bl	8001434 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f30:	f7ff ffb4 	bl	8002e9c <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f36:	e012      	b.n	8002f5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f38:	f7ff ffb0 	bl	8002e9c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b0a      	cmp	r3, #10
 8002f44:	d90b      	bls.n	8002f5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2205      	movs	r2, #5
 8002f56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0c5      	b.n	80030ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0e5      	beq.n	8002f38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0202 	bic.w	r2, r2, #2
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f7c:	f7ff ff8e 	bl	8002e9c <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f82:	e012      	b.n	8002faa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f84:	f7ff ff8a 	bl	8002e9c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b0a      	cmp	r3, #10
 8002f90:	d90b      	bls.n	8002faa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2205      	movs	r2, #5
 8002fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e09f      	b.n	80030ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e5      	bne.n	8002f84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7e1b      	ldrb	r3, [r3, #24]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d108      	bne.n	8002fd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e007      	b.n	8002fe2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7e5b      	ldrb	r3, [r3, #25]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d108      	bne.n	8002ffc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e007      	b.n	800300c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	7e9b      	ldrb	r3, [r3, #26]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d108      	bne.n	8003026 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0220 	orr.w	r2, r2, #32
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e007      	b.n	8003036 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0220 	bic.w	r2, r2, #32
 8003034:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7edb      	ldrb	r3, [r3, #27]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d108      	bne.n	8003050 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0210 	bic.w	r2, r2, #16
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e007      	b.n	8003060 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0210 	orr.w	r2, r2, #16
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7f1b      	ldrb	r3, [r3, #28]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d108      	bne.n	800307a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0208 	orr.w	r2, r2, #8
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e007      	b.n	800308a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0208 	bic.w	r2, r2, #8
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7f5b      	ldrb	r3, [r3, #29]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d108      	bne.n	80030a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0204 	orr.w	r2, r2, #4
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e007      	b.n	80030b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0204 	bic.w	r2, r2, #4
 80030b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	ea42 0103 	orr.w	r1, r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	1e5a      	subs	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800310a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d003      	beq.n	800311a <HAL_CAN_ConfigFilter+0x26>
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	2b02      	cmp	r3, #2
 8003116:	f040 80be 	bne.w	8003296 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800311a:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800311c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003124:	f043 0201 	orr.w	r2, r3, #1
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003134:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	431a      	orrs	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	2201      	movs	r2, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	43db      	mvns	r3, r3
 800316c:	401a      	ands	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d123      	bne.n	80031c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	43db      	mvns	r3, r3
 8003186:	401a      	ands	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800319e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3248      	adds	r2, #72	; 0x48
 80031a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	3348      	adds	r3, #72	; 0x48
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d122      	bne.n	8003212 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	3248      	adds	r2, #72	; 0x48
 80031f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003206:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003208:	6979      	ldr	r1, [r7, #20]
 800320a:	3348      	adds	r3, #72	; 0x48
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	440b      	add	r3, r1
 8003210:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	43db      	mvns	r3, r3
 8003224:	401a      	ands	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800322c:	e007      	b.n	800323e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	431a      	orrs	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43db      	mvns	r3, r3
 8003250:	401a      	ands	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003258:	e007      	b.n	800326a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	431a      	orrs	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d107      	bne.n	8003282 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	431a      	orrs	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003288:	f023 0201 	bic.w	r2, r3, #1
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	e006      	b.n	80032a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40006400 	.word	0x40006400

080032b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d12e      	bne.n	8003326 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032e0:	f7ff fddc 	bl	8002e9c <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032e6:	e012      	b.n	800330e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032e8:	f7ff fdd8 	bl	8002e9c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b0a      	cmp	r3, #10
 80032f4:	d90b      	bls.n	800330e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2205      	movs	r2, #5
 8003306:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e012      	b.n	8003334 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e5      	bne.n	80032e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e006      	b.n	8003334 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
  }
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003350:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800335a:	7ffb      	ldrb	r3, [r7, #31]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d003      	beq.n	8003368 <HAL_CAN_AddTxMessage+0x2c>
 8003360:	7ffb      	ldrb	r3, [r7, #31]
 8003362:	2b02      	cmp	r3, #2
 8003364:	f040 80b8 	bne.w	80034d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003378:	2b00      	cmp	r3, #0
 800337a:	d105      	bne.n	8003388 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80a0 	beq.w	80034c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	0e1b      	lsrs	r3, r3, #24
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d907      	bls.n	80033a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e09e      	b.n	80034e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80033a8:	2201      	movs	r2, #1
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	409a      	lsls	r2, r3
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10d      	bne.n	80033d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033c4:	68f9      	ldr	r1, [r7, #12]
 80033c6:	6809      	ldr	r1, [r1, #0]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	3318      	adds	r3, #24
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	440b      	add	r3, r1
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e00f      	b.n	80033f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033e6:	68f9      	ldr	r1, [r7, #12]
 80033e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3318      	adds	r3, #24
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	440b      	add	r3, r1
 80033f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3318      	adds	r3, #24
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	440b      	add	r3, r1
 8003406:	3304      	adds	r3, #4
 8003408:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	7d1b      	ldrb	r3, [r3, #20]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d111      	bne.n	8003436 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3318      	adds	r3, #24
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	4413      	add	r3, r2
 800341e:	3304      	adds	r3, #4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	6811      	ldr	r1, [r2, #0]
 8003426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3318      	adds	r3, #24
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	440b      	add	r3, r1
 8003432:	3304      	adds	r3, #4
 8003434:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3307      	adds	r3, #7
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	061a      	lsls	r2, r3, #24
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3306      	adds	r3, #6
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3305      	adds	r3, #5
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	4313      	orrs	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	3204      	adds	r2, #4
 8003456:	7812      	ldrb	r2, [r2, #0]
 8003458:	4610      	mov	r0, r2
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	6811      	ldr	r1, [r2, #0]
 800345e:	ea43 0200 	orr.w	r2, r3, r0
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	440b      	add	r3, r1
 8003468:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800346c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3303      	adds	r3, #3
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	061a      	lsls	r2, r3, #24
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3302      	adds	r3, #2
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	041b      	lsls	r3, r3, #16
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3301      	adds	r3, #1
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	4313      	orrs	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	4610      	mov	r0, r2
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	6811      	ldr	r1, [r2, #0]
 8003494:	ea43 0200 	orr.w	r2, r3, r0
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	440b      	add	r3, r1
 800349e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80034a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3318      	adds	r3, #24
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	4413      	add	r3, r2
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	6811      	ldr	r1, [r2, #0]
 80034b6:	f043 0201 	orr.w	r2, r3, #1
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	3318      	adds	r3, #24
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	440b      	add	r3, r1
 80034c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	e00e      	b.n	80034e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e006      	b.n	80034e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3724      	adds	r7, #36	; 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034f2:	b480      	push	{r7}
 80034f4:	b087      	sub	sp, #28
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003506:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d003      	beq.n	8003516 <HAL_CAN_GetRxMessage+0x24>
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b02      	cmp	r3, #2
 8003512:	f040 80f3 	bne.w	80036fc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10e      	bne.n	800353a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d116      	bne.n	8003558 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0e7      	b.n	800370a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0d8      	b.n	800370a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	331b      	adds	r3, #27
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	4413      	add	r3, r2
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0204 	and.w	r2, r3, #4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10c      	bne.n	8003590 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	331b      	adds	r3, #27
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	4413      	add	r3, r2
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0d5b      	lsrs	r3, r3, #21
 8003586:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e00b      	b.n	80035a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	331b      	adds	r3, #27
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	4413      	add	r3, r2
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	08db      	lsrs	r3, r3, #3
 80035a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	331b      	adds	r3, #27
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4413      	add	r3, r2
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0202 	and.w	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	331b      	adds	r3, #27
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4413      	add	r3, r2
 80035ca:	3304      	adds	r3, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 020f 	and.w	r2, r3, #15
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	331b      	adds	r3, #27
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	4413      	add	r3, r2
 80035e2:	3304      	adds	r3, #4
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	331b      	adds	r3, #27
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	4413      	add	r3, r2
 80035fa:	3304      	adds	r3, #4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0c1b      	lsrs	r3, r3, #16
 8003600:	b29a      	uxth	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	4413      	add	r3, r2
 8003610:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	4413      	add	r3, r2
 8003626:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0a1a      	lsrs	r2, r3, #8
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	4413      	add	r3, r2
 8003640:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0c1a      	lsrs	r2, r3, #16
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	3302      	adds	r3, #2
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	4413      	add	r3, r2
 800365a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	0e1a      	lsrs	r2, r3, #24
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	3303      	adds	r3, #3
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	4413      	add	r3, r2
 8003674:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	3304      	adds	r3, #4
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	4413      	add	r3, r2
 800368c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	0a1a      	lsrs	r2, r3, #8
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	3305      	adds	r3, #5
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0c1a      	lsrs	r2, r3, #16
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	3306      	adds	r3, #6
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	4413      	add	r3, r2
 80036c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0e1a      	lsrs	r2, r3, #24
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	3307      	adds	r3, #7
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0220 	orr.w	r2, r2, #32
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e007      	b.n	80036f8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0220 	orr.w	r2, r2, #32
 80036f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e006      	b.n	800370a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003726:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d002      	beq.n	8003734 <HAL_CAN_ActivateNotification+0x1e>
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d109      	bne.n	8003748 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6959      	ldr	r1, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e006      	b.n	8003756 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b08a      	sub	sp, #40	; 0x28
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d07c      	beq.n	80038a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d023      	beq.n	80037fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2201      	movs	r2, #1
 80037b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f983 	bl	8003ad0 <HAL_CAN_TxMailbox0CompleteCallback>
 80037ca:	e016      	b.n	80037fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
 80037de:	e00c      	b.n	80037fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d004      	beq.n	80037f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	e002      	b.n	80037fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f989 	bl	8003b0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d024      	beq.n	800384e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800380c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f963 	bl	8003ae4 <HAL_CAN_TxMailbox1CompleteCallback>
 800381e:	e016      	b.n	800384e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
 8003832:	e00c      	b.n	800384e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
 8003846:	e002      	b.n	800384e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f969 	bl	8003b20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d024      	beq.n	80038a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003860:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f943 	bl	8003af8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003872:	e016      	b.n	80038a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
 8003886:	e00c      	b.n	80038a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	e002      	b.n	80038a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f949 	bl	8003b34 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00c      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2210      	movs	r2, #16
 80038c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d006      	beq.n	80038e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2208      	movs	r2, #8
 80038e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f930 	bl	8003b48 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fe fbed 	bl	80020e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00c      	beq.n	800392a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003920:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2210      	movs	r2, #16
 8003928:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2208      	movs	r2, #8
 8003944:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f912 	bl	8003b70 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f8f9 	bl	8003b5c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2210      	movs	r2, #16
 8003984:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8fc 	bl	8003b84 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2208      	movs	r2, #8
 80039a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8f5 	bl	8003b98 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d07b      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d072      	beq.n	8003aa8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	f043 0302 	orr.w	r3, r3, #2
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	f043 0304 	orr.w	r3, r3, #4
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d043      	beq.n	8003aa8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d03e      	beq.n	8003aa8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a30:	2b60      	cmp	r3, #96	; 0x60
 8003a32:	d02b      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x32a>
 8003a34:	2b60      	cmp	r3, #96	; 0x60
 8003a36:	d82e      	bhi.n	8003a96 <HAL_CAN_IRQHandler+0x334>
 8003a38:	2b50      	cmp	r3, #80	; 0x50
 8003a3a:	d022      	beq.n	8003a82 <HAL_CAN_IRQHandler+0x320>
 8003a3c:	2b50      	cmp	r3, #80	; 0x50
 8003a3e:	d82a      	bhi.n	8003a96 <HAL_CAN_IRQHandler+0x334>
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d019      	beq.n	8003a78 <HAL_CAN_IRQHandler+0x316>
 8003a44:	2b40      	cmp	r3, #64	; 0x40
 8003a46:	d826      	bhi.n	8003a96 <HAL_CAN_IRQHandler+0x334>
 8003a48:	2b30      	cmp	r3, #48	; 0x30
 8003a4a:	d010      	beq.n	8003a6e <HAL_CAN_IRQHandler+0x30c>
 8003a4c:	2b30      	cmp	r3, #48	; 0x30
 8003a4e:	d822      	bhi.n	8003a96 <HAL_CAN_IRQHandler+0x334>
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d002      	beq.n	8003a5a <HAL_CAN_IRQHandler+0x2f8>
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d005      	beq.n	8003a64 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a58:	e01d      	b.n	8003a96 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f043 0308 	orr.w	r3, r3, #8
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a62:	e019      	b.n	8003a98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	f043 0310 	orr.w	r3, r3, #16
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a6c:	e014      	b.n	8003a98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	f043 0320 	orr.w	r3, r3, #32
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a76:	e00f      	b.n	8003a98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a80:	e00a      	b.n	8003a98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a8a:	e005      	b.n	8003a98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a94:	e000      	b.n	8003a98 <HAL_CAN_IRQHandler+0x336>
            break;
 8003a96:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003aa6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2204      	movs	r2, #4
 8003aae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f872 	bl	8003bac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3728      	adds	r7, #40	; 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	60d3      	str	r3, [r2, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <__NVIC_GetPriorityGrouping+0x18>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 0307 	and.w	r3, r3, #7
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	db0b      	blt.n	8003c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	f003 021f 	and.w	r2, r3, #31
 8003c3c:	4907      	ldr	r1, [pc, #28]	; (8003c5c <__NVIC_EnableIRQ+0x38>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2001      	movs	r0, #1
 8003c46:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	e000e100 	.word	0xe000e100

08003c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	db0a      	blt.n	8003c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	490c      	ldr	r1, [pc, #48]	; (8003cac <__NVIC_SetPriority+0x4c>)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	0112      	lsls	r2, r2, #4
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	440b      	add	r3, r1
 8003c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c88:	e00a      	b.n	8003ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <__NVIC_SetPriority+0x50>)
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	3b04      	subs	r3, #4
 8003c98:	0112      	lsls	r2, r2, #4
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	761a      	strb	r2, [r3, #24]
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000e100 	.word	0xe000e100
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	; 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f1c3 0307 	rsb	r3, r3, #7
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	bf28      	it	cs
 8003cd2:	2304      	movcs	r3, #4
 8003cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d902      	bls.n	8003ce4 <NVIC_EncodePriority+0x30>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3b03      	subs	r3, #3
 8003ce2:	e000      	b.n	8003ce6 <NVIC_EncodePriority+0x32>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	43d9      	mvns	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d0c:	4313      	orrs	r3, r2
         );
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d2c:	d301      	bcc.n	8003d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e00f      	b.n	8003d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <SysTick_Config+0x40>)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d3a:	210f      	movs	r1, #15
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d40:	f7ff ff8e 	bl	8003c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <SysTick_Config+0x40>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <SysTick_Config+0x40>)
 8003d4c:	2207      	movs	r2, #7
 8003d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	e000e010 	.word	0xe000e010

08003d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ff29 	bl	8003bc0 <__NVIC_SetPriorityGrouping>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b086      	sub	sp, #24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d88:	f7ff ff3e 	bl	8003c08 <__NVIC_GetPriorityGrouping>
 8003d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f7ff ff8e 	bl	8003cb4 <NVIC_EncodePriority>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff5d 	bl	8003c60 <__NVIC_SetPriority>
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4603      	mov	r3, r0
 8003db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff31 	bl	8003c24 <__NVIC_EnableIRQ>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ffa2 	bl	8003d1c <SysTick_Config>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d106      	bne.n	8003e00 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003df2:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003df8:	f043 0304 	orr.w	r3, r3, #4
 8003dfc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003dfe:	e005      	b.n	8003e0c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003e06:	f023 0304 	bic.w	r3, r3, #4
 8003e0a:	6013      	str	r3, [r2, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000e010 	.word	0xe000e010

08003e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e28:	f7ff f838 	bl	8002e9c <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e099      	b.n	8003f6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e58:	e00f      	b.n	8003e7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e5a:	f7ff f81f 	bl	8002e9c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	d908      	bls.n	8003e7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2203      	movs	r2, #3
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e078      	b.n	8003f6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e8      	bne.n	8003e5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4b38      	ldr	r3, [pc, #224]	; (8003f74 <HAL_DMA_Init+0x158>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d107      	bne.n	8003ee4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	4313      	orrs	r3, r2
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d117      	bne.n	8003f3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00e      	beq.n	8003f3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fb01 	bl	8004528 <DMA_CheckFifoParam>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2240      	movs	r2, #64	; 0x40
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e016      	b.n	8003f6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fab8 	bl	80044bc <DMA_CalcBaseAndBitshift>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	223f      	movs	r2, #63	; 0x3f
 8003f56:	409a      	lsls	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	f010803f 	.word	0xf010803f

08003f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_DMA_Start_IT+0x26>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e040      	b.n	8004020 <HAL_DMA_Start_IT+0xa8>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d12f      	bne.n	8004012 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fa4a 	bl	8004460 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	223f      	movs	r2, #63	; 0x3f
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0216 	orr.w	r2, r2, #22
 8003fe6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0208 	orr.w	r2, r2, #8
 8003ffe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e005      	b.n	800401e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800401a:	2302      	movs	r3, #2
 800401c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800401e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004036:	f7fe ff31 	bl	8002e9c <HAL_GetTick>
 800403a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d008      	beq.n	800405a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2280      	movs	r2, #128	; 0x80
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e052      	b.n	8004100 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0216 	bic.w	r2, r2, #22
 8004068:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004078:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <HAL_DMA_Abort+0x62>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0208 	bic.w	r2, r2, #8
 8004098:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0201 	bic.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040aa:	e013      	b.n	80040d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040ac:	f7fe fef6 	bl	8002e9c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d90c      	bls.n	80040d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2203      	movs	r2, #3
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e015      	b.n	8004100 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e4      	bne.n	80040ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e6:	223f      	movs	r2, #63	; 0x3f
 80040e8:	409a      	lsls	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d004      	beq.n	8004126 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2280      	movs	r2, #128	; 0x80
 8004120:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e00c      	b.n	8004140 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2205      	movs	r2, #5
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004158:	4b92      	ldr	r3, [pc, #584]	; (80043a4 <HAL_DMA_IRQHandler+0x258>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a92      	ldr	r2, [pc, #584]	; (80043a8 <HAL_DMA_IRQHandler+0x25c>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0a9b      	lsrs	r3, r3, #10
 8004164:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004176:	2208      	movs	r2, #8
 8004178:	409a      	lsls	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4013      	ands	r3, r2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d01a      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d013      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0204 	bic.w	r2, r2, #4
 800419e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	2208      	movs	r2, #8
 80041a6:	409a      	lsls	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f043 0201 	orr.w	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	2201      	movs	r2, #1
 80041be:	409a      	lsls	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d012      	beq.n	80041ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041da:	2201      	movs	r2, #1
 80041dc:	409a      	lsls	r2, r3
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f043 0202 	orr.w	r2, r3, #2
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	2204      	movs	r2, #4
 80041f4:	409a      	lsls	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d012      	beq.n	8004224 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00b      	beq.n	8004224 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	2204      	movs	r2, #4
 8004212:	409a      	lsls	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	f043 0204 	orr.w	r2, r3, #4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004228:	2210      	movs	r2, #16
 800422a:	409a      	lsls	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d043      	beq.n	80042bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d03c      	beq.n	80042bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	2210      	movs	r2, #16
 8004248:	409a      	lsls	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d018      	beq.n	800428e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d108      	bne.n	800427c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d024      	beq.n	80042bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
 800427a:	e01f      	b.n	80042bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01b      	beq.n	80042bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
 800428c:	e016      	b.n	80042bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d107      	bne.n	80042ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0208 	bic.w	r2, r2, #8
 80042aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	2220      	movs	r2, #32
 80042c2:	409a      	lsls	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 808e 	beq.w	80043ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8086 	beq.w	80043ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	2220      	movs	r2, #32
 80042e4:	409a      	lsls	r2, r3
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b05      	cmp	r3, #5
 80042f4:	d136      	bne.n	8004364 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0216 	bic.w	r2, r2, #22
 8004304:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004314:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <HAL_DMA_IRQHandler+0x1da>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0208 	bic.w	r2, r2, #8
 8004334:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433a:	223f      	movs	r2, #63	; 0x3f
 800433c:	409a      	lsls	r2, r3
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004356:	2b00      	cmp	r3, #0
 8004358:	d07d      	beq.n	8004456 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
        }
        return;
 8004362:	e078      	b.n	8004456 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01c      	beq.n	80043ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d108      	bne.n	8004392 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	2b00      	cmp	r3, #0
 8004386:	d030      	beq.n	80043ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
 8004390:	e02b      	b.n	80043ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d027      	beq.n	80043ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
 80043a2:	e022      	b.n	80043ea <HAL_DMA_IRQHandler+0x29e>
 80043a4:	20000034 	.word	0x20000034
 80043a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10f      	bne.n	80043da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0210 	bic.w	r2, r2, #16
 80043c8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d032      	beq.n	8004458 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d022      	beq.n	8004444 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2205      	movs	r2, #5
 8004402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0201 	bic.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3301      	adds	r3, #1
 800441a:	60bb      	str	r3, [r7, #8]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	429a      	cmp	r2, r3
 8004420:	d307      	bcc.n	8004432 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f2      	bne.n	8004416 <HAL_DMA_IRQHandler+0x2ca>
 8004430:	e000      	b.n	8004434 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004432:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
 8004454:	e000      	b.n	8004458 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004456:	bf00      	nop
    }
  }
}
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop

08004460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800447c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d108      	bne.n	80044a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800449e:	e007      	b.n	80044b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	60da      	str	r2, [r3, #12]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	3b10      	subs	r3, #16
 80044cc:	4a14      	ldr	r2, [pc, #80]	; (8004520 <DMA_CalcBaseAndBitshift+0x64>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044d6:	4a13      	ldr	r2, [pc, #76]	; (8004524 <DMA_CalcBaseAndBitshift+0x68>)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d909      	bls.n	80044fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	1d1a      	adds	r2, r3, #4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	659a      	str	r2, [r3, #88]	; 0x58
 80044fc:	e007      	b.n	800450e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004506:	f023 0303 	bic.w	r3, r3, #3
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	aaaaaaab 	.word	0xaaaaaaab
 8004524:	080086dc 	.word	0x080086dc

08004528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d11f      	bne.n	8004582 <DMA_CheckFifoParam+0x5a>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b03      	cmp	r3, #3
 8004546:	d856      	bhi.n	80045f6 <DMA_CheckFifoParam+0xce>
 8004548:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <DMA_CheckFifoParam+0x28>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004561 	.word	0x08004561
 8004554:	08004573 	.word	0x08004573
 8004558:	08004561 	.word	0x08004561
 800455c:	080045f7 	.word	0x080045f7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d046      	beq.n	80045fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004570:	e043      	b.n	80045fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800457a:	d140      	bne.n	80045fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004580:	e03d      	b.n	80045fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458a:	d121      	bne.n	80045d0 <DMA_CheckFifoParam+0xa8>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d837      	bhi.n	8004602 <DMA_CheckFifoParam+0xda>
 8004592:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <DMA_CheckFifoParam+0x70>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045af 	.word	0x080045af
 80045a0:	080045a9 	.word	0x080045a9
 80045a4:	080045c1 	.word	0x080045c1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      break;
 80045ac:	e030      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d025      	beq.n	8004606 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045be:	e022      	b.n	8004606 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045c8:	d11f      	bne.n	800460a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045ce:	e01c      	b.n	800460a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d903      	bls.n	80045de <DMA_CheckFifoParam+0xb6>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d003      	beq.n	80045e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045dc:	e018      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
      break;
 80045e2:	e015      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
      break;
 80045f4:	e00b      	b.n	800460e <DMA_CheckFifoParam+0xe6>
      break;
 80045f6:	bf00      	nop
 80045f8:	e00a      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;
 80045fa:	bf00      	nop
 80045fc:	e008      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;
 80045fe:	bf00      	nop
 8004600:	e006      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;
 8004602:	bf00      	nop
 8004604:	e004      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;
 8004606:	bf00      	nop
 8004608:	e002      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;   
 800460a:	bf00      	nop
 800460c:	e000      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;
 800460e:	bf00      	nop
    }
  } 
  
  return status; 
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop

08004620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004632:	2300      	movs	r3, #0
 8004634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	e177      	b.n	800492c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800463c:	2201      	movs	r2, #1
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	429a      	cmp	r2, r3
 8004656:	f040 8166 	bne.w	8004926 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b01      	cmp	r3, #1
 8004664:	d005      	beq.n	8004672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800466e:	2b02      	cmp	r3, #2
 8004670:	d130      	bne.n	80046d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	2203      	movs	r2, #3
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4013      	ands	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046a8:	2201      	movs	r2, #1
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 0201 	and.w	r2, r3, #1
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d017      	beq.n	8004710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	2203      	movs	r2, #3
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d123      	bne.n	8004764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	08da      	lsrs	r2, r3, #3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3208      	adds	r2, #8
 8004724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	220f      	movs	r2, #15
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	08da      	lsrs	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3208      	adds	r2, #8
 800475e:	69b9      	ldr	r1, [r7, #24]
 8004760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	2203      	movs	r2, #3
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4013      	ands	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0203 	and.w	r2, r3, #3
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80c0 	beq.w	8004926 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	4b66      	ldr	r3, [pc, #408]	; (8004944 <HAL_GPIO_Init+0x324>)
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	4a65      	ldr	r2, [pc, #404]	; (8004944 <HAL_GPIO_Init+0x324>)
 80047b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b4:	6453      	str	r3, [r2, #68]	; 0x44
 80047b6:	4b63      	ldr	r3, [pc, #396]	; (8004944 <HAL_GPIO_Init+0x324>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047c2:	4a61      	ldr	r2, [pc, #388]	; (8004948 <HAL_GPIO_Init+0x328>)
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	3302      	adds	r3, #2
 80047ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	220f      	movs	r2, #15
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a58      	ldr	r2, [pc, #352]	; (800494c <HAL_GPIO_Init+0x32c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d037      	beq.n	800485e <HAL_GPIO_Init+0x23e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a57      	ldr	r2, [pc, #348]	; (8004950 <HAL_GPIO_Init+0x330>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d031      	beq.n	800485a <HAL_GPIO_Init+0x23a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a56      	ldr	r2, [pc, #344]	; (8004954 <HAL_GPIO_Init+0x334>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d02b      	beq.n	8004856 <HAL_GPIO_Init+0x236>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a55      	ldr	r2, [pc, #340]	; (8004958 <HAL_GPIO_Init+0x338>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d025      	beq.n	8004852 <HAL_GPIO_Init+0x232>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a54      	ldr	r2, [pc, #336]	; (800495c <HAL_GPIO_Init+0x33c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01f      	beq.n	800484e <HAL_GPIO_Init+0x22e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a53      	ldr	r2, [pc, #332]	; (8004960 <HAL_GPIO_Init+0x340>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d019      	beq.n	800484a <HAL_GPIO_Init+0x22a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a52      	ldr	r2, [pc, #328]	; (8004964 <HAL_GPIO_Init+0x344>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_GPIO_Init+0x226>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a51      	ldr	r2, [pc, #324]	; (8004968 <HAL_GPIO_Init+0x348>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00d      	beq.n	8004842 <HAL_GPIO_Init+0x222>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a50      	ldr	r2, [pc, #320]	; (800496c <HAL_GPIO_Init+0x34c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <HAL_GPIO_Init+0x21e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a4f      	ldr	r2, [pc, #316]	; (8004970 <HAL_GPIO_Init+0x350>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d101      	bne.n	800483a <HAL_GPIO_Init+0x21a>
 8004836:	2309      	movs	r3, #9
 8004838:	e012      	b.n	8004860 <HAL_GPIO_Init+0x240>
 800483a:	230a      	movs	r3, #10
 800483c:	e010      	b.n	8004860 <HAL_GPIO_Init+0x240>
 800483e:	2308      	movs	r3, #8
 8004840:	e00e      	b.n	8004860 <HAL_GPIO_Init+0x240>
 8004842:	2307      	movs	r3, #7
 8004844:	e00c      	b.n	8004860 <HAL_GPIO_Init+0x240>
 8004846:	2306      	movs	r3, #6
 8004848:	e00a      	b.n	8004860 <HAL_GPIO_Init+0x240>
 800484a:	2305      	movs	r3, #5
 800484c:	e008      	b.n	8004860 <HAL_GPIO_Init+0x240>
 800484e:	2304      	movs	r3, #4
 8004850:	e006      	b.n	8004860 <HAL_GPIO_Init+0x240>
 8004852:	2303      	movs	r3, #3
 8004854:	e004      	b.n	8004860 <HAL_GPIO_Init+0x240>
 8004856:	2302      	movs	r3, #2
 8004858:	e002      	b.n	8004860 <HAL_GPIO_Init+0x240>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <HAL_GPIO_Init+0x240>
 800485e:	2300      	movs	r3, #0
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	f002 0203 	and.w	r2, r2, #3
 8004866:	0092      	lsls	r2, r2, #2
 8004868:	4093      	lsls	r3, r2
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004870:	4935      	ldr	r1, [pc, #212]	; (8004948 <HAL_GPIO_Init+0x328>)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	089b      	lsrs	r3, r3, #2
 8004876:	3302      	adds	r3, #2
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800487e:	4b3d      	ldr	r3, [pc, #244]	; (8004974 <HAL_GPIO_Init+0x354>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048a2:	4a34      	ldr	r2, [pc, #208]	; (8004974 <HAL_GPIO_Init+0x354>)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048a8:	4b32      	ldr	r3, [pc, #200]	; (8004974 <HAL_GPIO_Init+0x354>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048cc:	4a29      	ldr	r2, [pc, #164]	; (8004974 <HAL_GPIO_Init+0x354>)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048d2:	4b28      	ldr	r3, [pc, #160]	; (8004974 <HAL_GPIO_Init+0x354>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048f6:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <HAL_GPIO_Init+0x354>)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <HAL_GPIO_Init+0x354>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004920:	4a14      	ldr	r2, [pc, #80]	; (8004974 <HAL_GPIO_Init+0x354>)
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3301      	adds	r3, #1
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b0f      	cmp	r3, #15
 8004930:	f67f ae84 	bls.w	800463c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	3724      	adds	r7, #36	; 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	40013800 	.word	0x40013800
 800494c:	40020000 	.word	0x40020000
 8004950:	40020400 	.word	0x40020400
 8004954:	40020800 	.word	0x40020800
 8004958:	40020c00 	.word	0x40020c00
 800495c:	40021000 	.word	0x40021000
 8004960:	40021400 	.word	0x40021400
 8004964:	40021800 	.word	0x40021800
 8004968:	40021c00 	.word	0x40021c00
 800496c:	40022000 	.word	0x40022000
 8004970:	40022400 	.word	0x40022400
 8004974:	40013c00 	.word	0x40013c00

08004978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	887b      	ldrh	r3, [r7, #2]
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
 8004994:	e001      	b.n	800499a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	807b      	strh	r3, [r7, #2]
 80049b4:	4613      	mov	r3, r2
 80049b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049b8:	787b      	ldrb	r3, [r7, #1]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049c4:	e003      	b.n	80049ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049c6:	887b      	ldrh	r3, [r7, #2]
 80049c8:	041a      	lsls	r2, r3, #16
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	619a      	str	r2, [r3, #24]
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d006      	beq.n	8004a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049f2:	4a05      	ldr	r2, [pc, #20]	; (8004a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fd faa0 	bl	8001f40 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40013c00 	.word	0x40013c00

08004a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e12b      	b.n	8004c76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc ffc8 	bl	80019c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2224      	movs	r2, #36	; 0x24
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a70:	f000 fe26 	bl	80056c0 <HAL_RCC_GetPCLK1Freq>
 8004a74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4a81      	ldr	r2, [pc, #516]	; (8004c80 <HAL_I2C_Init+0x274>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d807      	bhi.n	8004a90 <HAL_I2C_Init+0x84>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a80      	ldr	r2, [pc, #512]	; (8004c84 <HAL_I2C_Init+0x278>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	bf94      	ite	ls
 8004a88:	2301      	movls	r3, #1
 8004a8a:	2300      	movhi	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e006      	b.n	8004a9e <HAL_I2C_Init+0x92>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a7d      	ldr	r2, [pc, #500]	; (8004c88 <HAL_I2C_Init+0x27c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	bf94      	ite	ls
 8004a98:	2301      	movls	r3, #1
 8004a9a:	2300      	movhi	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e0e7      	b.n	8004c76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a78      	ldr	r2, [pc, #480]	; (8004c8c <HAL_I2C_Init+0x280>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	0c9b      	lsrs	r3, r3, #18
 8004ab0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a6a      	ldr	r2, [pc, #424]	; (8004c80 <HAL_I2C_Init+0x274>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d802      	bhi.n	8004ae0 <HAL_I2C_Init+0xd4>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	3301      	adds	r3, #1
 8004ade:	e009      	b.n	8004af4 <HAL_I2C_Init+0xe8>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	4a69      	ldr	r2, [pc, #420]	; (8004c90 <HAL_I2C_Init+0x284>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	099b      	lsrs	r3, r3, #6
 8004af2:	3301      	adds	r3, #1
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	495c      	ldr	r1, [pc, #368]	; (8004c80 <HAL_I2C_Init+0x274>)
 8004b10:	428b      	cmp	r3, r1
 8004b12:	d819      	bhi.n	8004b48 <HAL_I2C_Init+0x13c>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1e59      	subs	r1, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b28:	400b      	ands	r3, r1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_I2C_Init+0x138>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1e59      	subs	r1, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b42:	e051      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004b44:	2304      	movs	r3, #4
 8004b46:	e04f      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d111      	bne.n	8004b74 <HAL_I2C_Init+0x168>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1e58      	subs	r0, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	440b      	add	r3, r1
 8004b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b62:	3301      	adds	r3, #1
 8004b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e012      	b.n	8004b9a <HAL_I2C_Init+0x18e>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1e58      	subs	r0, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	0099      	lsls	r1, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_I2C_Init+0x196>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e022      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_I2C_Init+0x1bc>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1e58      	subs	r0, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6859      	ldr	r1, [r3, #4]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	440b      	add	r3, r1
 8004bb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc6:	e00f      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1e58      	subs	r0, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	0099      	lsls	r1, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bde:	3301      	adds	r3, #1
 8004be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	6809      	ldr	r1, [r1, #0]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6911      	ldr	r1, [r2, #16]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68d2      	ldr	r2, [r2, #12]
 8004c22:	4311      	orrs	r1, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	000186a0 	.word	0x000186a0
 8004c84:	001e847f 	.word	0x001e847f
 8004c88:	003d08ff 	.word	0x003d08ff
 8004c8c:	431bde83 	.word	0x431bde83
 8004c90:	10624dd3 	.word	0x10624dd3

08004c94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d129      	bne.n	8004cfe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2224      	movs	r2, #36	; 0x24
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0210 	bic.w	r2, r2, #16
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0201 	orr.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e000      	b.n	8004d00 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d12a      	bne.n	8004d7c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2224      	movs	r2, #36	; 0x24
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004d46:	89fb      	ldrh	r3, [r7, #14]
 8004d48:	f023 030f 	bic.w	r3, r3, #15
 8004d4c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	89fb      	ldrh	r3, [r7, #14]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	89fa      	ldrh	r2, [r7, #14]
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e000      	b.n	8004d7e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004d7c:	2302      	movs	r3, #2
  }
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	603b      	str	r3, [r7, #0]
 8004d9a:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <HAL_PWREx_EnableOverDrive+0x90>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	4a1f      	ldr	r2, [pc, #124]	; (8004e1c <HAL_PWREx_EnableOverDrive+0x90>)
 8004da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da4:	6413      	str	r3, [r2, #64]	; 0x40
 8004da6:	4b1d      	ldr	r3, [pc, #116]	; (8004e1c <HAL_PWREx_EnableOverDrive+0x90>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004db2:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <HAL_PWREx_EnableOverDrive+0x94>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004db8:	f7fe f870 	bl	8002e9c <HAL_GetTick>
 8004dbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dbe:	e009      	b.n	8004dd4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dc0:	f7fe f86c 	bl	8002e9c <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dce:	d901      	bls.n	8004dd4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e01f      	b.n	8004e14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dd4:	4b13      	ldr	r3, [pc, #76]	; (8004e24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de0:	d1ee      	bne.n	8004dc0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004de8:	f7fe f858 	bl	8002e9c <HAL_GetTick>
 8004dec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dee:	e009      	b.n	8004e04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004df0:	f7fe f854 	bl	8002e9c <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dfe:	d901      	bls.n	8004e04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e007      	b.n	8004e14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e10:	d1ee      	bne.n	8004df0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	420e0040 	.word	0x420e0040
 8004e24:	40007000 	.word	0x40007000
 8004e28:	420e0044 	.word	0x420e0044

08004e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e264      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d075      	beq.n	8004f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e4a:	4ba3      	ldr	r3, [pc, #652]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d00c      	beq.n	8004e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e56:	4ba0      	ldr	r3, [pc, #640]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d112      	bne.n	8004e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e62:	4b9d      	ldr	r3, [pc, #628]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e6e:	d10b      	bne.n	8004e88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	4b99      	ldr	r3, [pc, #612]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d05b      	beq.n	8004f34 <HAL_RCC_OscConfig+0x108>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d157      	bne.n	8004f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e23f      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d106      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x74>
 8004e92:	4b91      	ldr	r3, [pc, #580]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a90      	ldr	r2, [pc, #576]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e01d      	b.n	8004edc <HAL_RCC_OscConfig+0xb0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x98>
 8004eaa:	4b8b      	ldr	r3, [pc, #556]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a8a      	ldr	r2, [pc, #552]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	4b88      	ldr	r3, [pc, #544]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a87      	ldr	r2, [pc, #540]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e00b      	b.n	8004edc <HAL_RCC_OscConfig+0xb0>
 8004ec4:	4b84      	ldr	r3, [pc, #528]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a83      	ldr	r2, [pc, #524]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	4b81      	ldr	r3, [pc, #516]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a80      	ldr	r2, [pc, #512]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d013      	beq.n	8004f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fd ffda 	bl	8002e9c <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eec:	f7fd ffd6 	bl	8002e9c <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b64      	cmp	r3, #100	; 0x64
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e204      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	4b76      	ldr	r3, [pc, #472]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f0      	beq.n	8004eec <HAL_RCC_OscConfig+0xc0>
 8004f0a:	e014      	b.n	8004f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fd ffc6 	bl	8002e9c <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f14:	f7fd ffc2 	bl	8002e9c <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	; 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e1f0      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f26:	4b6c      	ldr	r3, [pc, #432]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0xe8>
 8004f32:	e000      	b.n	8004f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d063      	beq.n	800500a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f42:	4b65      	ldr	r3, [pc, #404]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f4e:	4b62      	ldr	r3, [pc, #392]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d11c      	bne.n	8004f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5a:	4b5f      	ldr	r3, [pc, #380]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d116      	bne.n	8004f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f66:	4b5c      	ldr	r3, [pc, #368]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <HAL_RCC_OscConfig+0x152>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d001      	beq.n	8004f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e1c4      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7e:	4b56      	ldr	r3, [pc, #344]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4952      	ldr	r1, [pc, #328]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f92:	e03a      	b.n	800500a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d020      	beq.n	8004fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f9c:	4b4f      	ldr	r3, [pc, #316]	; (80050dc <HAL_RCC_OscConfig+0x2b0>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fd ff7b 	bl	8002e9c <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004faa:	f7fd ff77 	bl	8002e9c <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e1a5      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbc:	4b46      	ldr	r3, [pc, #280]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f0      	beq.n	8004faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc8:	4b43      	ldr	r3, [pc, #268]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4940      	ldr	r1, [pc, #256]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]
 8004fdc:	e015      	b.n	800500a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fde:	4b3f      	ldr	r3, [pc, #252]	; (80050dc <HAL_RCC_OscConfig+0x2b0>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fd ff5a 	bl	8002e9c <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fec:	f7fd ff56 	bl	8002e9c <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e184      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffe:	4b36      	ldr	r3, [pc, #216]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d030      	beq.n	8005078 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d016      	beq.n	800504c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501e:	4b30      	ldr	r3, [pc, #192]	; (80050e0 <HAL_RCC_OscConfig+0x2b4>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005024:	f7fd ff3a 	bl	8002e9c <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800502c:	f7fd ff36 	bl	8002e9c <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e164      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503e:	4b26      	ldr	r3, [pc, #152]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 8005040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x200>
 800504a:	e015      	b.n	8005078 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800504c:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_RCC_OscConfig+0x2b4>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005052:	f7fd ff23 	bl	8002e9c <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505a:	f7fd ff1f 	bl	8002e9c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e14d      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 800506e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f0      	bne.n	800505a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80a0 	beq.w	80051c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508a:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	4a0e      	ldr	r2, [pc, #56]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6413      	str	r3, [r2, #64]	; 0x40
 80050a6:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b2:	2301      	movs	r3, #1
 80050b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_OscConfig+0x2b8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d121      	bne.n	8005106 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050c2:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <HAL_RCC_OscConfig+0x2b8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a07      	ldr	r2, [pc, #28]	; (80050e4 <HAL_RCC_OscConfig+0x2b8>)
 80050c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ce:	f7fd fee5 	bl	8002e9c <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d4:	e011      	b.n	80050fa <HAL_RCC_OscConfig+0x2ce>
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800
 80050dc:	42470000 	.word	0x42470000
 80050e0:	42470e80 	.word	0x42470e80
 80050e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e8:	f7fd fed8 	bl	8002e9c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e106      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fa:	4b85      	ldr	r3, [pc, #532]	; (8005310 <HAL_RCC_OscConfig+0x4e4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d106      	bne.n	800511c <HAL_RCC_OscConfig+0x2f0>
 800510e:	4b81      	ldr	r3, [pc, #516]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	4a80      	ldr	r2, [pc, #512]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	6713      	str	r3, [r2, #112]	; 0x70
 800511a:	e01c      	b.n	8005156 <HAL_RCC_OscConfig+0x32a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b05      	cmp	r3, #5
 8005122:	d10c      	bne.n	800513e <HAL_RCC_OscConfig+0x312>
 8005124:	4b7b      	ldr	r3, [pc, #492]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	4a7a      	ldr	r2, [pc, #488]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 800512a:	f043 0304 	orr.w	r3, r3, #4
 800512e:	6713      	str	r3, [r2, #112]	; 0x70
 8005130:	4b78      	ldr	r3, [pc, #480]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	4a77      	ldr	r2, [pc, #476]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6713      	str	r3, [r2, #112]	; 0x70
 800513c:	e00b      	b.n	8005156 <HAL_RCC_OscConfig+0x32a>
 800513e:	4b75      	ldr	r3, [pc, #468]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	4a74      	ldr	r2, [pc, #464]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	6713      	str	r3, [r2, #112]	; 0x70
 800514a:	4b72      	ldr	r3, [pc, #456]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	4a71      	ldr	r2, [pc, #452]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d015      	beq.n	800518a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fd fe9d 	bl	8002e9c <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fd fe99 	bl	8002e9c <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e0c5      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517c:	4b65      	ldr	r3, [pc, #404]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0ee      	beq.n	8005166 <HAL_RCC_OscConfig+0x33a>
 8005188:	e014      	b.n	80051b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518a:	f7fd fe87 	bl	8002e9c <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005190:	e00a      	b.n	80051a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005192:	f7fd fe83 	bl	8002e9c <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e0af      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a8:	4b5a      	ldr	r3, [pc, #360]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ee      	bne.n	8005192 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d105      	bne.n	80051c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ba:	4b56      	ldr	r3, [pc, #344]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a55      	ldr	r2, [pc, #340]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 80051c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 809b 	beq.w	8005306 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051d0:	4b50      	ldr	r3, [pc, #320]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 030c 	and.w	r3, r3, #12
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d05c      	beq.n	8005296 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d141      	bne.n	8005268 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e4:	4b4c      	ldr	r3, [pc, #304]	; (8005318 <HAL_RCC_OscConfig+0x4ec>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ea:	f7fd fe57 	bl	8002e9c <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fd fe53 	bl	8002e9c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e081      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005204:	4b43      	ldr	r3, [pc, #268]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	019b      	lsls	r3, r3, #6
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	3b01      	subs	r3, #1
 800522a:	041b      	lsls	r3, r3, #16
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	4937      	ldr	r1, [pc, #220]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 8005236:	4313      	orrs	r3, r2
 8005238:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800523a:	4b37      	ldr	r3, [pc, #220]	; (8005318 <HAL_RCC_OscConfig+0x4ec>)
 800523c:	2201      	movs	r2, #1
 800523e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005240:	f7fd fe2c 	bl	8002e9c <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005248:	f7fd fe28 	bl	8002e9c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e056      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	4b2e      	ldr	r3, [pc, #184]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0f0      	beq.n	8005248 <HAL_RCC_OscConfig+0x41c>
 8005266:	e04e      	b.n	8005306 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005268:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <HAL_RCC_OscConfig+0x4ec>)
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526e:	f7fd fe15 	bl	8002e9c <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005276:	f7fd fe11 	bl	8002e9c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e03f      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005288:	4b22      	ldr	r3, [pc, #136]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f0      	bne.n	8005276 <HAL_RCC_OscConfig+0x44a>
 8005294:	e037      	b.n	8005306 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e032      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052a2:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <HAL_RCC_OscConfig+0x4e8>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d028      	beq.n	8005302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d121      	bne.n	8005302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d11a      	bne.n	8005302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052d2:	4013      	ands	r3, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052da:	4293      	cmp	r3, r2
 80052dc:	d111      	bne.n	8005302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	085b      	lsrs	r3, r3, #1
 80052ea:	3b01      	subs	r3, #1
 80052ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d107      	bne.n	8005302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052fe:	429a      	cmp	r2, r3
 8005300:	d001      	beq.n	8005306 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40007000 	.word	0x40007000
 8005314:	40023800 	.word	0x40023800
 8005318:	42470060 	.word	0x42470060

0800531c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0cc      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005330:	4b68      	ldr	r3, [pc, #416]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d90c      	bls.n	8005358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533e:	4b65      	ldr	r3, [pc, #404]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b63      	ldr	r3, [pc, #396]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0b8      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d020      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005370:	4b59      	ldr	r3, [pc, #356]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4a58      	ldr	r2, [pc, #352]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800537a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005388:	4b53      	ldr	r3, [pc, #332]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4a52      	ldr	r2, [pc, #328]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005394:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	494d      	ldr	r1, [pc, #308]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d044      	beq.n	800543c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ba:	4b47      	ldr	r3, [pc, #284]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d119      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e07f      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d003      	beq.n	80053da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053da:	4b3f      	ldr	r3, [pc, #252]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e06f      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ea:	4b3b      	ldr	r3, [pc, #236]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e067      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053fa:	4b37      	ldr	r3, [pc, #220]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f023 0203 	bic.w	r2, r3, #3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	4934      	ldr	r1, [pc, #208]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	4313      	orrs	r3, r2
 800540a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800540c:	f7fd fd46 	bl	8002e9c <HAL_GetTick>
 8005410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	e00a      	b.n	800542a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005414:	f7fd fd42 	bl	8002e9c <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e04f      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542a:	4b2b      	ldr	r3, [pc, #172]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 020c 	and.w	r2, r3, #12
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	429a      	cmp	r2, r3
 800543a:	d1eb      	bne.n	8005414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800543c:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d20c      	bcs.n	8005464 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	4b22      	ldr	r3, [pc, #136]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e032      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d008      	beq.n	8005482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005470:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	4916      	ldr	r1, [pc, #88]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	490e      	ldr	r1, [pc, #56]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054a2:	f000 f821 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 80054a6:	4602      	mov	r2, r0
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	490a      	ldr	r1, [pc, #40]	; (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 80054b4:	5ccb      	ldrb	r3, [r1, r3]
 80054b6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ba:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 80054bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054be:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <HAL_RCC_ClockConfig+0x1c8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fd fca6 	bl	8002e14 <HAL_InitTick>

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40023c00 	.word	0x40023c00
 80054d8:	40023800 	.word	0x40023800
 80054dc:	080086c4 	.word	0x080086c4
 80054e0:	20000034 	.word	0x20000034
 80054e4:	200000a8 	.word	0x200000a8

080054e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	2300      	movs	r3, #0
 80054fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005500:	4b67      	ldr	r3, [pc, #412]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 030c 	and.w	r3, r3, #12
 8005508:	2b08      	cmp	r3, #8
 800550a:	d00d      	beq.n	8005528 <HAL_RCC_GetSysClockFreq+0x40>
 800550c:	2b08      	cmp	r3, #8
 800550e:	f200 80bd 	bhi.w	800568c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x34>
 8005516:	2b04      	cmp	r3, #4
 8005518:	d003      	beq.n	8005522 <HAL_RCC_GetSysClockFreq+0x3a>
 800551a:	e0b7      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800551c:	4b61      	ldr	r3, [pc, #388]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800551e:	60bb      	str	r3, [r7, #8]
       break;
 8005520:	e0b7      	b.n	8005692 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005522:	4b60      	ldr	r3, [pc, #384]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005524:	60bb      	str	r3, [r7, #8]
      break;
 8005526:	e0b4      	b.n	8005692 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005528:	4b5d      	ldr	r3, [pc, #372]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005530:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005532:	4b5b      	ldr	r3, [pc, #364]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d04d      	beq.n	80055da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800553e:	4b58      	ldr	r3, [pc, #352]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	099b      	lsrs	r3, r3, #6
 8005544:	461a      	mov	r2, r3
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800554e:	f04f 0100 	mov.w	r1, #0
 8005552:	ea02 0800 	and.w	r8, r2, r0
 8005556:	ea03 0901 	and.w	r9, r3, r1
 800555a:	4640      	mov	r0, r8
 800555c:	4649      	mov	r1, r9
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	014b      	lsls	r3, r1, #5
 8005568:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800556c:	0142      	lsls	r2, r0, #5
 800556e:	4610      	mov	r0, r2
 8005570:	4619      	mov	r1, r3
 8005572:	ebb0 0008 	subs.w	r0, r0, r8
 8005576:	eb61 0109 	sbc.w	r1, r1, r9
 800557a:	f04f 0200 	mov.w	r2, #0
 800557e:	f04f 0300 	mov.w	r3, #0
 8005582:	018b      	lsls	r3, r1, #6
 8005584:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005588:	0182      	lsls	r2, r0, #6
 800558a:	1a12      	subs	r2, r2, r0
 800558c:	eb63 0301 	sbc.w	r3, r3, r1
 8005590:	f04f 0000 	mov.w	r0, #0
 8005594:	f04f 0100 	mov.w	r1, #0
 8005598:	00d9      	lsls	r1, r3, #3
 800559a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800559e:	00d0      	lsls	r0, r2, #3
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	eb12 0208 	adds.w	r2, r2, r8
 80055a8:	eb43 0309 	adc.w	r3, r3, r9
 80055ac:	f04f 0000 	mov.w	r0, #0
 80055b0:	f04f 0100 	mov.w	r1, #0
 80055b4:	0299      	lsls	r1, r3, #10
 80055b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055ba:	0290      	lsls	r0, r2, #10
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4610      	mov	r0, r2
 80055c2:	4619      	mov	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	f7fb fa76 	bl	8000abc <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4613      	mov	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e04a      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055da:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	099b      	lsrs	r3, r3, #6
 80055e0:	461a      	mov	r2, r3
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055ea:	f04f 0100 	mov.w	r1, #0
 80055ee:	ea02 0400 	and.w	r4, r2, r0
 80055f2:	ea03 0501 	and.w	r5, r3, r1
 80055f6:	4620      	mov	r0, r4
 80055f8:	4629      	mov	r1, r5
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	014b      	lsls	r3, r1, #5
 8005604:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005608:	0142      	lsls	r2, r0, #5
 800560a:	4610      	mov	r0, r2
 800560c:	4619      	mov	r1, r3
 800560e:	1b00      	subs	r0, r0, r4
 8005610:	eb61 0105 	sbc.w	r1, r1, r5
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	018b      	lsls	r3, r1, #6
 800561e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005622:	0182      	lsls	r2, r0, #6
 8005624:	1a12      	subs	r2, r2, r0
 8005626:	eb63 0301 	sbc.w	r3, r3, r1
 800562a:	f04f 0000 	mov.w	r0, #0
 800562e:	f04f 0100 	mov.w	r1, #0
 8005632:	00d9      	lsls	r1, r3, #3
 8005634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005638:	00d0      	lsls	r0, r2, #3
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	1912      	adds	r2, r2, r4
 8005640:	eb45 0303 	adc.w	r3, r5, r3
 8005644:	f04f 0000 	mov.w	r0, #0
 8005648:	f04f 0100 	mov.w	r1, #0
 800564c:	0299      	lsls	r1, r3, #10
 800564e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005652:	0290      	lsls	r0, r2, #10
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4610      	mov	r0, r2
 800565a:	4619      	mov	r1, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	461a      	mov	r2, r3
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	f7fb fa2a 	bl	8000abc <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4613      	mov	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	0c1b      	lsrs	r3, r3, #16
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	3301      	adds	r3, #1
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	fbb2 f3f3 	udiv	r3, r2, r3
 8005688:	60bb      	str	r3, [r7, #8]
      break;
 800568a:	e002      	b.n	8005692 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800568e:	60bb      	str	r3, [r7, #8]
      break;
 8005690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005692:	68bb      	ldr	r3, [r7, #8]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800569e:	bf00      	nop
 80056a0:	40023800 	.word	0x40023800
 80056a4:	00f42400 	.word	0x00f42400

080056a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <HAL_RCC_GetHCLKFreq+0x14>)
 80056ae:	681b      	ldr	r3, [r3, #0]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20000034 	.word	0x20000034

080056c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056c4:	f7ff fff0 	bl	80056a8 <HAL_RCC_GetHCLKFreq>
 80056c8:	4602      	mov	r2, r0
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	0a9b      	lsrs	r3, r3, #10
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	4903      	ldr	r1, [pc, #12]	; (80056e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056d6:	5ccb      	ldrb	r3, [r1, r3]
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40023800 	.word	0x40023800
 80056e4:	080086d4 	.word	0x080086d4

080056e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056ec:	f7ff ffdc 	bl	80056a8 <HAL_RCC_GetHCLKFreq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	0b5b      	lsrs	r3, r3, #13
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	4903      	ldr	r1, [pc, #12]	; (800570c <HAL_RCC_GetPCLK2Freq+0x24>)
 80056fe:	5ccb      	ldrb	r3, [r1, r3]
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005704:	4618      	mov	r0, r3
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40023800 	.word	0x40023800
 800570c:	080086d4 	.word	0x080086d4

08005710 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e07b      	b.n	800581a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d108      	bne.n	800573c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005732:	d009      	beq.n	8005748 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	61da      	str	r2, [r3, #28]
 800573a:	e005      	b.n	8005748 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fc f9b0 	bl	8001ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800577e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057cc:	ea42 0103 	orr.w	r1, r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	0c1b      	lsrs	r3, r3, #16
 80057e6:	f003 0104 	and.w	r1, r3, #4
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	f003 0210 	and.w	r2, r3, #16
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69da      	ldr	r2, [r3, #28]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005808:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b088      	sub	sp, #32
 8005826:	af02      	add	r7, sp, #8
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	4613      	mov	r3, r2
 8005830:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583e:	d112      	bne.n	8005866 <HAL_SPI_Receive+0x44>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10e      	bne.n	8005866 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2204      	movs	r2, #4
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005850:	88fa      	ldrh	r2, [r7, #6]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	4613      	mov	r3, r2
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f8f1 	bl	8005a44 <HAL_SPI_TransmitReceive>
 8005862:	4603      	mov	r3, r0
 8005864:	e0ea      	b.n	8005a3c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_SPI_Receive+0x52>
 8005870:	2302      	movs	r3, #2
 8005872:	e0e3      	b.n	8005a3c <HAL_SPI_Receive+0x21a>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800587c:	f7fd fb0e 	bl	8002e9c <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d002      	beq.n	8005894 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800588e:	2302      	movs	r3, #2
 8005890:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005892:	e0ca      	b.n	8005a2a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_SPI_Receive+0x7e>
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058a4:	e0c1      	b.n	8005a2a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2204      	movs	r2, #4
 80058aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	88fa      	ldrh	r2, [r7, #6]
 80058be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ec:	d10f      	bne.n	800590e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800590c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d007      	beq.n	800592c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800592a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d162      	bne.n	80059fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005934:	e02e      	b.n	8005994 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b01      	cmp	r3, #1
 8005942:	d115      	bne.n	8005970 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f103 020c 	add.w	r2, r3, #12
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800596e:	e011      	b.n	8005994 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005970:	f7fd fa94 	bl	8002e9c <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d803      	bhi.n	8005988 <HAL_SPI_Receive+0x166>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005986:	d102      	bne.n	800598e <HAL_SPI_Receive+0x16c>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005992:	e04a      	b.n	8005a2a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1cb      	bne.n	8005936 <HAL_SPI_Receive+0x114>
 800599e:	e031      	b.n	8005a04 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d113      	bne.n	80059d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	b292      	uxth	r2, r2
 80059ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	1c9a      	adds	r2, r3, #2
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059d4:	e011      	b.n	80059fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059d6:	f7fd fa61 	bl	8002e9c <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d803      	bhi.n	80059ee <HAL_SPI_Receive+0x1cc>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ec:	d102      	bne.n	80059f4 <HAL_SPI_Receive+0x1d2>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059f8:	e017      	b.n	8005a2a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1cd      	bne.n	80059a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fa45 	bl	8005e98 <SPI_EndRxTransaction>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	75fb      	strb	r3, [r7, #23]
 8005a26:	e000      	b.n	8005a2a <HAL_SPI_Receive+0x208>
  }

error :
 8005a28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08c      	sub	sp, #48	; 0x30
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a52:	2301      	movs	r3, #1
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_SPI_TransmitReceive+0x26>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e18a      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x33c>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a72:	f7fd fa13 	bl	8002e9c <HAL_GetTick>
 8005a76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a88:	887b      	ldrh	r3, [r7, #2]
 8005a8a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d00f      	beq.n	8005ab4 <HAL_SPI_TransmitReceive+0x70>
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a9a:	d107      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d103      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x68>
 8005aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d003      	beq.n	8005ab4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005aac:	2302      	movs	r3, #2
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ab2:	e15b      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <HAL_SPI_TransmitReceive+0x82>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_SPI_TransmitReceive+0x82>
 8005ac0:	887b      	ldrh	r3, [r7, #2]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d103      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005acc:	e14e      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d003      	beq.n	8005ae2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2205      	movs	r2, #5
 8005ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	887a      	ldrh	r2, [r7, #2]
 8005af2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	887a      	ldrh	r2, [r7, #2]
 8005af8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	887a      	ldrh	r2, [r7, #2]
 8005b04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	887a      	ldrh	r2, [r7, #2]
 8005b0a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d007      	beq.n	8005b36 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3e:	d178      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0x10a>
 8005b48:	8b7b      	ldrh	r3, [r7, #26]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d166      	bne.n	8005c1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	881a      	ldrh	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	1c9a      	adds	r2, r3, #2
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b72:	e053      	b.n	8005c1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d11b      	bne.n	8005bba <HAL_SPI_TransmitReceive+0x176>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d016      	beq.n	8005bba <HAL_SPI_TransmitReceive+0x176>
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d113      	bne.n	8005bba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	881a      	ldrh	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d119      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x1b8>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d014      	beq.n	8005bfc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	b292      	uxth	r2, r2
 8005bde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	1c9a      	adds	r2, r3, #2
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bfc:	f7fd f94e 	bl	8002e9c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d807      	bhi.n	8005c1c <HAL_SPI_TransmitReceive+0x1d8>
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c12:	d003      	beq.n	8005c1c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c1a:	e0a7      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1a6      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x130>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1a1      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x130>
 8005c30:	e07c      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_SPI_TransmitReceive+0x1fc>
 8005c3a:	8b7b      	ldrh	r3, [r7, #26]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d16b      	bne.n	8005d18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c66:	e057      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d11c      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x26c>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d017      	beq.n	8005cb0 <HAL_SPI_TransmitReceive+0x26c>
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d114      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	7812      	ldrb	r2, [r2, #0]
 8005c92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d119      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x2ae>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d014      	beq.n	8005cf2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cf2:	f7fd f8d3 	bl	8002e9c <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d803      	bhi.n	8005d0a <HAL_SPI_TransmitReceive+0x2c6>
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d08:	d102      	bne.n	8005d10 <HAL_SPI_TransmitReceive+0x2cc>
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d103      	bne.n	8005d18 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d16:	e029      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1a2      	bne.n	8005c68 <HAL_SPI_TransmitReceive+0x224>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d19d      	bne.n	8005c68 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f917 	bl	8005f64 <SPI_EndRxTxTransaction>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d006      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d48:	e010      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	e000      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3730      	adds	r7, #48	; 0x30
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	4613      	mov	r3, r2
 8005d96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d98:	f7fd f880 	bl	8002e9c <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	4413      	add	r3, r2
 8005da6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005da8:	f7fd f878 	bl	8002e9c <HAL_GetTick>
 8005dac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dae:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	015b      	lsls	r3, r3, #5
 8005db4:	0d1b      	lsrs	r3, r3, #20
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	fb02 f303 	mul.w	r3, r2, r3
 8005dbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dbe:	e054      	b.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc6:	d050      	beq.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dc8:	f7fd f868 	bl	8002e9c <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d902      	bls.n	8005dde <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d13d      	bne.n	8005e5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005df6:	d111      	bne.n	8005e1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e00:	d004      	beq.n	8005e0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0a:	d107      	bne.n	8005e1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e24:	d10f      	bne.n	8005e46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e017      	b.n	8005e8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4013      	ands	r3, r2
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	bf0c      	ite	eq
 8005e7a:	2301      	moveq	r3, #1
 8005e7c:	2300      	movne	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d19b      	bne.n	8005dc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3720      	adds	r7, #32
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000034 	.word	0x20000034

08005e98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eac:	d111      	bne.n	8005ed2 <SPI_EndRxTransaction+0x3a>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb6:	d004      	beq.n	8005ec2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec0:	d107      	bne.n	8005ed2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eda:	d12a      	bne.n	8005f32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee4:	d012      	beq.n	8005f0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2200      	movs	r2, #0
 8005eee:	2180      	movs	r1, #128	; 0x80
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7ff ff49 	bl	8005d88 <SPI_WaitFlagStateUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d02d      	beq.n	8005f58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	f043 0220 	orr.w	r2, r3, #32
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e026      	b.n	8005f5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2200      	movs	r2, #0
 8005f14:	2101      	movs	r1, #1
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7ff ff36 	bl	8005d88 <SPI_WaitFlagStateUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01a      	beq.n	8005f58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f26:	f043 0220 	orr.w	r2, r3, #32
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e013      	b.n	8005f5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff ff23 	bl	8005d88 <SPI_WaitFlagStateUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4c:	f043 0220 	orr.w	r2, r3, #32
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e000      	b.n	8005f5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f70:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <SPI_EndRxTxTransaction+0x7c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <SPI_EndRxTxTransaction+0x80>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0d5b      	lsrs	r3, r3, #21
 8005f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f80:	fb02 f303 	mul.w	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f8e:	d112      	bne.n	8005fb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2200      	movs	r2, #0
 8005f98:	2180      	movs	r1, #128	; 0x80
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7ff fef4 	bl	8005d88 <SPI_WaitFlagStateUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e00f      	b.n	8005fd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fcc:	2b80      	cmp	r3, #128	; 0x80
 8005fce:	d0f2      	beq.n	8005fb6 <SPI_EndRxTxTransaction+0x52>
 8005fd0:	e000      	b.n	8005fd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005fd2:	bf00      	nop
  }

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000034 	.word	0x20000034
 8005fe4:	165e9f81 	.word	0x165e9f81

08005fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e041      	b.n	800607e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fc fb8e 	bl	8002730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f000 fcb0 	bl	800698c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e041      	b.n	800611c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d106      	bne.n	80060b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f839 	bl	8006124 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2202      	movs	r2, #2
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3304      	adds	r3, #4
 80060c2:	4619      	mov	r1, r3
 80060c4:	4610      	mov	r0, r2
 80060c6:	f000 fc61 	bl	800698c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f001 f832 	bl	80071b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2e      	ldr	r2, [pc, #184]	; (8006210 <HAL_TIM_PWM_Stop+0xd8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d004      	beq.n	8006164 <HAL_TIM_PWM_Stop+0x2c>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a2d      	ldr	r2, [pc, #180]	; (8006214 <HAL_TIM_PWM_Stop+0xdc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d101      	bne.n	8006168 <HAL_TIM_PWM_Stop+0x30>
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <HAL_TIM_PWM_Stop+0x32>
 8006168:	2300      	movs	r3, #0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d017      	beq.n	800619e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a1a      	ldr	r2, [r3, #32]
 8006174:	f241 1311 	movw	r3, #4369	; 0x1111
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10f      	bne.n	800619e <HAL_TIM_PWM_Stop+0x66>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	f240 4344 	movw	r3, #1092	; 0x444
 8006188:	4013      	ands	r3, r2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d107      	bne.n	800619e <HAL_TIM_PWM_Stop+0x66>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800619c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6a1a      	ldr	r2, [r3, #32]
 80061a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10f      	bne.n	80061ce <HAL_TIM_PWM_Stop+0x96>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6a1a      	ldr	r2, [r3, #32]
 80061b4:	f240 4344 	movw	r3, #1092	; 0x444
 80061b8:	4013      	ands	r3, r2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d107      	bne.n	80061ce <HAL_TIM_PWM_Stop+0x96>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <HAL_TIM_PWM_Stop+0xa6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061dc:	e013      	b.n	8006206 <HAL_TIM_PWM_Stop+0xce>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_PWM_Stop+0xb6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ec:	e00b      	b.n	8006206 <HAL_TIM_PWM_Stop+0xce>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_PWM_Stop+0xc6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061fc:	e003      	b.n	8006206 <HAL_TIM_PWM_Stop+0xce>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400

08006218 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e041      	b.n	80062ae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f839 	bl	80062b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f000 fb98 	bl	800698c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d122      	bne.n	8006326 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d11b      	bne.n	8006326 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f06f 0202 	mvn.w	r2, #2
 80062f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	f003 0303 	and.w	r3, r3, #3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fb1e 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 8006312:	e005      	b.n	8006320 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fb10 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fb21 	bl	8006962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b04      	cmp	r3, #4
 8006332:	d122      	bne.n	800637a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b04      	cmp	r3, #4
 8006340:	d11b      	bne.n	800637a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f06f 0204 	mvn.w	r2, #4
 800634a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 faf4 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 8006366:	e005      	b.n	8006374 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fae6 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 faf7 	bl	8006962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b08      	cmp	r3, #8
 8006386:	d122      	bne.n	80063ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b08      	cmp	r3, #8
 8006394:	d11b      	bne.n	80063ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f06f 0208 	mvn.w	r2, #8
 800639e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2204      	movs	r2, #4
 80063a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	f003 0303 	and.w	r3, r3, #3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 faca 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 80063ba:	e005      	b.n	80063c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fabc 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 facd 	bl	8006962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b10      	cmp	r3, #16
 80063da:	d122      	bne.n	8006422 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0310 	and.w	r3, r3, #16
 80063e6:	2b10      	cmp	r3, #16
 80063e8:	d11b      	bne.n	8006422 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f06f 0210 	mvn.w	r2, #16
 80063f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2208      	movs	r2, #8
 80063f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 faa0 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 800640e:	e005      	b.n	800641c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fa92 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 faa3 	bl	8006962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b01      	cmp	r3, #1
 800642e:	d10e      	bne.n	800644e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b01      	cmp	r3, #1
 800643c:	d107      	bne.n	800644e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f06f 0201 	mvn.w	r2, #1
 8006446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fa6c 	bl	8006926 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006458:	2b80      	cmp	r3, #128	; 0x80
 800645a:	d10e      	bne.n	800647a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006466:	2b80      	cmp	r3, #128	; 0x80
 8006468:	d107      	bne.n	800647a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 ff9b 	bl	80073b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006484:	2b40      	cmp	r3, #64	; 0x40
 8006486:	d10e      	bne.n	80064a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006492:	2b40      	cmp	r3, #64	; 0x40
 8006494:	d107      	bne.n	80064a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800649e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fa68 	bl	8006976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d10e      	bne.n	80064d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d107      	bne.n	80064d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f06f 0220 	mvn.w	r2, #32
 80064ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 ff65 	bl	800739c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064d2:	bf00      	nop
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b086      	sub	sp, #24
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e088      	b.n	800660a <HAL_TIM_IC_ConfigChannel+0x130>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d11b      	bne.n	800653e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	6819      	ldr	r1, [r3, #0]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f000 fc89 	bl	8006e2c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	699a      	ldr	r2, [r3, #24]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 020c 	bic.w	r2, r2, #12
 8006528:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6999      	ldr	r1, [r3, #24]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	619a      	str	r2, [r3, #24]
 800653c:	e060      	b.n	8006600 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b04      	cmp	r3, #4
 8006542:	d11c      	bne.n	800657e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6819      	ldr	r1, [r3, #0]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f000 fd0d 	bl	8006f72 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006566:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6999      	ldr	r1, [r3, #24]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	021a      	lsls	r2, r3, #8
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	619a      	str	r2, [r3, #24]
 800657c:	e040      	b.n	8006600 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b08      	cmp	r3, #8
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6819      	ldr	r1, [r3, #0]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f000 fd5a 	bl	800704c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69da      	ldr	r2, [r3, #28]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 020c 	bic.w	r2, r2, #12
 80065a6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69d9      	ldr	r1, [r3, #28]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	61da      	str	r2, [r3, #28]
 80065ba:	e021      	b.n	8006600 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b0c      	cmp	r3, #12
 80065c0:	d11c      	bne.n	80065fc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6819      	ldr	r1, [r3, #0]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f000 fd77 	bl	80070c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80065e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69d9      	ldr	r1, [r3, #28]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	021a      	lsls	r2, r3, #8
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	61da      	str	r2, [r3, #28]
 80065fa:	e001      	b.n	8006600 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006608:	7dfb      	ldrb	r3, [r7, #23]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800662e:	2302      	movs	r3, #2
 8006630:	e0ae      	b.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b0c      	cmp	r3, #12
 800663e:	f200 809f 	bhi.w	8006780 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	0800667d 	.word	0x0800667d
 800664c:	08006781 	.word	0x08006781
 8006650:	08006781 	.word	0x08006781
 8006654:	08006781 	.word	0x08006781
 8006658:	080066bd 	.word	0x080066bd
 800665c:	08006781 	.word	0x08006781
 8006660:	08006781 	.word	0x08006781
 8006664:	08006781 	.word	0x08006781
 8006668:	080066ff 	.word	0x080066ff
 800666c:	08006781 	.word	0x08006781
 8006670:	08006781 	.word	0x08006781
 8006674:	08006781 	.word	0x08006781
 8006678:	0800673f 	.word	0x0800673f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fa22 	bl	8006acc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0208 	orr.w	r2, r2, #8
 8006696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0204 	bic.w	r2, r2, #4
 80066a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6999      	ldr	r1, [r3, #24]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	619a      	str	r2, [r3, #24]
      break;
 80066ba:	e064      	b.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fa72 	bl	8006bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6999      	ldr	r1, [r3, #24]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	021a      	lsls	r2, r3, #8
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	619a      	str	r2, [r3, #24]
      break;
 80066fc:	e043      	b.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68b9      	ldr	r1, [r7, #8]
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fac7 	bl	8006c98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69da      	ldr	r2, [r3, #28]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0208 	orr.w	r2, r2, #8
 8006718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69da      	ldr	r2, [r3, #28]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0204 	bic.w	r2, r2, #4
 8006728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69d9      	ldr	r1, [r3, #28]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	61da      	str	r2, [r3, #28]
      break;
 800673c:	e023      	b.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68b9      	ldr	r1, [r7, #8]
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fb1b 	bl	8006d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69d9      	ldr	r1, [r3, #28]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	021a      	lsls	r2, r3, #8
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	61da      	str	r2, [r3, #28]
      break;
 800677e:	e002      	b.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	75fb      	strb	r3, [r7, #23]
      break;
 8006784:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800678e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_TIM_ConfigClockSource+0x1c>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e0b4      	b.n	800691e <HAL_TIM_ConfigClockSource+0x186>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ec:	d03e      	beq.n	800686c <HAL_TIM_ConfigClockSource+0xd4>
 80067ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f2:	f200 8087 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fa:	f000 8086 	beq.w	800690a <HAL_TIM_ConfigClockSource+0x172>
 80067fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006802:	d87f      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006804:	2b70      	cmp	r3, #112	; 0x70
 8006806:	d01a      	beq.n	800683e <HAL_TIM_ConfigClockSource+0xa6>
 8006808:	2b70      	cmp	r3, #112	; 0x70
 800680a:	d87b      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 800680c:	2b60      	cmp	r3, #96	; 0x60
 800680e:	d050      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x11a>
 8006810:	2b60      	cmp	r3, #96	; 0x60
 8006812:	d877      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006814:	2b50      	cmp	r3, #80	; 0x50
 8006816:	d03c      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0xfa>
 8006818:	2b50      	cmp	r3, #80	; 0x50
 800681a:	d873      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d058      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x13a>
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d86f      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006824:	2b30      	cmp	r3, #48	; 0x30
 8006826:	d064      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006828:	2b30      	cmp	r3, #48	; 0x30
 800682a:	d86b      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 800682c:	2b20      	cmp	r3, #32
 800682e:	d060      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006830:	2b20      	cmp	r3, #32
 8006832:	d867      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d05c      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006838:	2b10      	cmp	r3, #16
 800683a:	d05a      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 800683c:	e062      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	6899      	ldr	r1, [r3, #8]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f000 fc91 	bl	8007174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	609a      	str	r2, [r3, #8]
      break;
 800686a:	e04f      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	6899      	ldr	r1, [r3, #8]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f000 fc7a 	bl	8007174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800688e:	609a      	str	r2, [r3, #8]
      break;
 8006890:	e03c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	461a      	mov	r2, r3
 80068a0:	f000 fb38 	bl	8006f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2150      	movs	r1, #80	; 0x50
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fc47 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 80068b0:	e02c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6859      	ldr	r1, [r3, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	461a      	mov	r2, r3
 80068c0:	f000 fb94 	bl	8006fec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2160      	movs	r1, #96	; 0x60
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fc37 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 80068d0:	e01c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	461a      	mov	r2, r3
 80068e0:	f000 fb18 	bl	8006f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2140      	movs	r1, #64	; 0x40
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fc27 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 80068f0:	e00c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f000 fc1e 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006902:	e003      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	e000      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800690a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a40      	ldr	r2, [pc, #256]	; (8006aa0 <TIM_Base_SetConfig+0x114>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d013      	beq.n	80069cc <TIM_Base_SetConfig+0x40>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069aa:	d00f      	beq.n	80069cc <TIM_Base_SetConfig+0x40>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a3d      	ldr	r2, [pc, #244]	; (8006aa4 <TIM_Base_SetConfig+0x118>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00b      	beq.n	80069cc <TIM_Base_SetConfig+0x40>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a3c      	ldr	r2, [pc, #240]	; (8006aa8 <TIM_Base_SetConfig+0x11c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d007      	beq.n	80069cc <TIM_Base_SetConfig+0x40>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a3b      	ldr	r2, [pc, #236]	; (8006aac <TIM_Base_SetConfig+0x120>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_Base_SetConfig+0x40>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a3a      	ldr	r2, [pc, #232]	; (8006ab0 <TIM_Base_SetConfig+0x124>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d108      	bne.n	80069de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a2f      	ldr	r2, [pc, #188]	; (8006aa0 <TIM_Base_SetConfig+0x114>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d02b      	beq.n	8006a3e <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ec:	d027      	beq.n	8006a3e <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a2c      	ldr	r2, [pc, #176]	; (8006aa4 <TIM_Base_SetConfig+0x118>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d023      	beq.n	8006a3e <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a2b      	ldr	r2, [pc, #172]	; (8006aa8 <TIM_Base_SetConfig+0x11c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d01f      	beq.n	8006a3e <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a2a      	ldr	r2, [pc, #168]	; (8006aac <TIM_Base_SetConfig+0x120>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d01b      	beq.n	8006a3e <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a29      	ldr	r2, [pc, #164]	; (8006ab0 <TIM_Base_SetConfig+0x124>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d017      	beq.n	8006a3e <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a28      	ldr	r2, [pc, #160]	; (8006ab4 <TIM_Base_SetConfig+0x128>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d013      	beq.n	8006a3e <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a27      	ldr	r2, [pc, #156]	; (8006ab8 <TIM_Base_SetConfig+0x12c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00f      	beq.n	8006a3e <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a26      	ldr	r2, [pc, #152]	; (8006abc <TIM_Base_SetConfig+0x130>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00b      	beq.n	8006a3e <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a25      	ldr	r2, [pc, #148]	; (8006ac0 <TIM_Base_SetConfig+0x134>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d007      	beq.n	8006a3e <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a24      	ldr	r2, [pc, #144]	; (8006ac4 <TIM_Base_SetConfig+0x138>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d003      	beq.n	8006a3e <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a23      	ldr	r2, [pc, #140]	; (8006ac8 <TIM_Base_SetConfig+0x13c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d108      	bne.n	8006a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a0a      	ldr	r2, [pc, #40]	; (8006aa0 <TIM_Base_SetConfig+0x114>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d003      	beq.n	8006a84 <TIM_Base_SetConfig+0xf8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a0c      	ldr	r2, [pc, #48]	; (8006ab0 <TIM_Base_SetConfig+0x124>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d103      	bne.n	8006a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	615a      	str	r2, [r3, #20]
}
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40010000 	.word	0x40010000
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40000800 	.word	0x40000800
 8006aac:	40000c00 	.word	0x40000c00
 8006ab0:	40010400 	.word	0x40010400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40014400 	.word	0x40014400
 8006abc:	40014800 	.word	0x40014800
 8006ac0:	40001800 	.word	0x40001800
 8006ac4:	40001c00 	.word	0x40001c00
 8006ac8:	40002000 	.word	0x40002000

08006acc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f023 0201 	bic.w	r2, r3, #1
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f023 0302 	bic.w	r3, r3, #2
 8006b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a20      	ldr	r2, [pc, #128]	; (8006ba4 <TIM_OC1_SetConfig+0xd8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_OC1_SetConfig+0x64>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a1f      	ldr	r2, [pc, #124]	; (8006ba8 <TIM_OC1_SetConfig+0xdc>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d10c      	bne.n	8006b4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 0308 	bic.w	r3, r3, #8
 8006b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f023 0304 	bic.w	r3, r3, #4
 8006b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a15      	ldr	r2, [pc, #84]	; (8006ba4 <TIM_OC1_SetConfig+0xd8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d003      	beq.n	8006b5a <TIM_OC1_SetConfig+0x8e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <TIM_OC1_SetConfig+0xdc>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d111      	bne.n	8006b7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	621a      	str	r2, [r3, #32]
}
 8006b98:	bf00      	nop
 8006b9a:	371c      	adds	r7, #28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	40010000 	.word	0x40010000
 8006ba8:	40010400 	.word	0x40010400

08006bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f023 0210 	bic.w	r2, r3, #16
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f023 0320 	bic.w	r3, r3, #32
 8006bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a22      	ldr	r2, [pc, #136]	; (8006c90 <TIM_OC2_SetConfig+0xe4>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d003      	beq.n	8006c14 <TIM_OC2_SetConfig+0x68>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a21      	ldr	r2, [pc, #132]	; (8006c94 <TIM_OC2_SetConfig+0xe8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d10d      	bne.n	8006c30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a17      	ldr	r2, [pc, #92]	; (8006c90 <TIM_OC2_SetConfig+0xe4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d003      	beq.n	8006c40 <TIM_OC2_SetConfig+0x94>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a16      	ldr	r2, [pc, #88]	; (8006c94 <TIM_OC2_SetConfig+0xe8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d113      	bne.n	8006c68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	621a      	str	r2, [r3, #32]
}
 8006c82:	bf00      	nop
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40010400 	.word	0x40010400

08006c98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0303 	bic.w	r3, r3, #3
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	021b      	lsls	r3, r3, #8
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a21      	ldr	r2, [pc, #132]	; (8006d78 <TIM_OC3_SetConfig+0xe0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d003      	beq.n	8006cfe <TIM_OC3_SetConfig+0x66>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a20      	ldr	r2, [pc, #128]	; (8006d7c <TIM_OC3_SetConfig+0xe4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d10d      	bne.n	8006d1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a16      	ldr	r2, [pc, #88]	; (8006d78 <TIM_OC3_SetConfig+0xe0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_OC3_SetConfig+0x92>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a15      	ldr	r2, [pc, #84]	; (8006d7c <TIM_OC3_SetConfig+0xe4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d113      	bne.n	8006d52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	621a      	str	r2, [r3, #32]
}
 8006d6c:	bf00      	nop
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	40010000 	.word	0x40010000
 8006d7c:	40010400 	.word	0x40010400

08006d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	031b      	lsls	r3, r3, #12
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a12      	ldr	r2, [pc, #72]	; (8006e24 <TIM_OC4_SetConfig+0xa4>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d003      	beq.n	8006de8 <TIM_OC4_SetConfig+0x68>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a11      	ldr	r2, [pc, #68]	; (8006e28 <TIM_OC4_SetConfig+0xa8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d109      	bne.n	8006dfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	019b      	lsls	r3, r3, #6
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	621a      	str	r2, [r3, #32]
}
 8006e16:	bf00      	nop
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40010000 	.word	0x40010000
 8006e28:	40010400 	.word	0x40010400

08006e2c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f023 0201 	bic.w	r2, r3, #1
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4a28      	ldr	r2, [pc, #160]	; (8006ef8 <TIM_TI1_SetConfig+0xcc>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d01b      	beq.n	8006e92 <TIM_TI1_SetConfig+0x66>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e60:	d017      	beq.n	8006e92 <TIM_TI1_SetConfig+0x66>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4a25      	ldr	r2, [pc, #148]	; (8006efc <TIM_TI1_SetConfig+0xd0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <TIM_TI1_SetConfig+0x66>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a24      	ldr	r2, [pc, #144]	; (8006f00 <TIM_TI1_SetConfig+0xd4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00f      	beq.n	8006e92 <TIM_TI1_SetConfig+0x66>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a23      	ldr	r2, [pc, #140]	; (8006f04 <TIM_TI1_SetConfig+0xd8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00b      	beq.n	8006e92 <TIM_TI1_SetConfig+0x66>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <TIM_TI1_SetConfig+0xdc>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d007      	beq.n	8006e92 <TIM_TI1_SetConfig+0x66>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <TIM_TI1_SetConfig+0xe0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d003      	beq.n	8006e92 <TIM_TI1_SetConfig+0x66>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <TIM_TI1_SetConfig+0xe4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d101      	bne.n	8006e96 <TIM_TI1_SetConfig+0x6a>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <TIM_TI1_SetConfig+0x6c>
 8006e96:	2300      	movs	r3, #0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f023 0303 	bic.w	r3, r3, #3
 8006ea2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	e003      	b.n	8006eb6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f043 0301 	orr.w	r3, r3, #1
 8006eb4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ebc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f023 030a 	bic.w	r3, r3, #10
 8006ed0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f003 030a 	and.w	r3, r3, #10
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	621a      	str	r2, [r3, #32]
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	40010000 	.word	0x40010000
 8006efc:	40000400 	.word	0x40000400
 8006f00:	40000800 	.word	0x40000800
 8006f04:	40000c00 	.word	0x40000c00
 8006f08:	40010400 	.word	0x40010400
 8006f0c:	40014000 	.word	0x40014000
 8006f10:	40001800 	.word	0x40001800

08006f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f023 0201 	bic.w	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f023 030a 	bic.w	r3, r3, #10
 8006f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	621a      	str	r2, [r3, #32]
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b087      	sub	sp, #28
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f023 0210 	bic.w	r2, r3, #16
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	031b      	lsls	r3, r3, #12
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	621a      	str	r2, [r3, #32]
}
 8006fe0:	bf00      	nop
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f023 0210 	bic.w	r2, r3, #16
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007016:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	031b      	lsls	r3, r3, #12
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007028:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	621a      	str	r2, [r3, #32]
}
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f023 0303 	bic.w	r3, r3, #3
 8007078:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007088:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	b2db      	uxtb	r3, r3
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800709c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	621a      	str	r2, [r3, #32]
}
 80070b8:	bf00      	nop
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007102:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	031b      	lsls	r3, r3, #12
 8007108:	b29b      	uxth	r3, r3
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007116:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	031b      	lsls	r3, r3, #12
 800711c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	f043 0307 	orr.w	r3, r3, #7
 8007160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	609a      	str	r2, [r3, #8]
}
 8007168:	bf00      	nop
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800718e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	021a      	lsls	r2, r3, #8
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	431a      	orrs	r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	4313      	orrs	r3, r2
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	609a      	str	r2, [r3, #8]
}
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	2201      	movs	r2, #1
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1a      	ldr	r2, [r3, #32]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	401a      	ands	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a1a      	ldr	r2, [r3, #32]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ec:	431a      	orrs	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	621a      	str	r2, [r3, #32]
}
 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007214:	2302      	movs	r3, #2
 8007216:	e05a      	b.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a21      	ldr	r2, [pc, #132]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d022      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007264:	d01d      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a1d      	ldr	r2, [pc, #116]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d018      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d013      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1a      	ldr	r2, [pc, #104]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00e      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a18      	ldr	r2, [pc, #96]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d009      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a17      	ldr	r2, [pc, #92]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d004      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d10c      	bne.n	80072bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40010000 	.word	0x40010000
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800
 80072e8:	40000c00 	.word	0x40000c00
 80072ec:	40010400 	.word	0x40010400
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40001800 	.word	0x40001800

080072f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007310:	2302      	movs	r3, #2
 8007312:	e03d      	b.n	8007390 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	4313      	orrs	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e03f      	b.n	8007456 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fb fb28 	bl	8002a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2224      	movs	r2, #36	; 0x24
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 ff5b 	bl	80082c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800741c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	695a      	ldr	r2, [r3, #20]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800742c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800743c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b08a      	sub	sp, #40	; 0x28
 8007462:	af02      	add	r7, sp, #8
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	603b      	str	r3, [r7, #0]
 800746a:	4613      	mov	r3, r2
 800746c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b20      	cmp	r3, #32
 800747c:	d17c      	bne.n	8007578 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <HAL_UART_Transmit+0x2c>
 8007484:	88fb      	ldrh	r3, [r7, #6]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e075      	b.n	800757a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <HAL_UART_Transmit+0x3e>
 8007498:	2302      	movs	r3, #2
 800749a:	e06e      	b.n	800757a <HAL_UART_Transmit+0x11c>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2221      	movs	r2, #33	; 0x21
 80074ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074b2:	f7fb fcf3 	bl	8002e9c <HAL_GetTick>
 80074b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	88fa      	ldrh	r2, [r7, #6]
 80074bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	88fa      	ldrh	r2, [r7, #6]
 80074c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074cc:	d108      	bne.n	80074e0 <HAL_UART_Transmit+0x82>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d104      	bne.n	80074e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	e003      	b.n	80074e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074f0:	e02a      	b.n	8007548 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2200      	movs	r2, #0
 80074fa:	2180      	movs	r1, #128	; 0x80
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fc17 	bl	8007d30 <UART_WaitOnFlagUntilTimeout>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e036      	b.n	800757a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10b      	bne.n	800752a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007520:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	3302      	adds	r3, #2
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	e007      	b.n	800753a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	781a      	ldrb	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	3301      	adds	r3, #1
 8007538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1cf      	bne.n	80074f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2200      	movs	r2, #0
 800755a:	2140      	movs	r1, #64	; 0x40
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 fbe7 	bl	8007d30 <UART_WaitOnFlagUntilTimeout>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e006      	b.n	800757a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	e000      	b.n	800757a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007578:	2302      	movs	r3, #2
  }
}
 800757a:	4618      	mov	r0, r3
 800757c:	3720      	adds	r7, #32
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	4613      	mov	r3, r2
 800758e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b20      	cmp	r3, #32
 800759a:	d11d      	bne.n	80075d8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_UART_Receive_DMA+0x26>
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e016      	b.n	80075da <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d101      	bne.n	80075ba <HAL_UART_Receive_DMA+0x38>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e00f      	b.n	80075da <HAL_UART_Receive_DMA+0x58>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075c8:	88fb      	ldrh	r3, [r7, #6]
 80075ca:	461a      	mov	r2, r3
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fc1c 	bl	8007e0c <UART_Start_Receive_DMA>
 80075d4:	4603      	mov	r3, r0
 80075d6:	e000      	b.n	80075da <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80075d8:	2302      	movs	r3, #2
  }
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b0ba      	sub	sp, #232	; 0xe8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800760a:	2300      	movs	r3, #0
 800760c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007610:	2300      	movs	r3, #0
 8007612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007622:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10f      	bne.n	800764a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800762a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <HAL_UART_IRQHandler+0x66>
 8007636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fd83 	bl	800814e <UART_Receive_IT>
      return;
 8007648:	e256      	b.n	8007af8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800764a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 80de 	beq.w	8007810 <HAL_UART_IRQHandler+0x22c>
 8007654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	d106      	bne.n	800766e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007664:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 80d1 	beq.w	8007810 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800766e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <HAL_UART_IRQHandler+0xae>
 800767a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007682:	2b00      	cmp	r3, #0
 8007684:	d005      	beq.n	8007692 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	f043 0201 	orr.w	r2, r3, #1
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <HAL_UART_IRQHandler+0xd2>
 800769e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	f043 0202 	orr.w	r2, r3, #2
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <HAL_UART_IRQHandler+0xf6>
 80076c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d005      	beq.n	80076da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	f043 0204 	orr.w	r2, r3, #4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d011      	beq.n	800770a <HAL_UART_IRQHandler+0x126>
 80076e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ea:	f003 0320 	and.w	r3, r3, #32
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d105      	bne.n	80076fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	f043 0208 	orr.w	r2, r3, #8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 81ed 	beq.w	8007aee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <HAL_UART_IRQHandler+0x14e>
 8007720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007724:	f003 0320 	and.w	r3, r3, #32
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fd0e 	bl	800814e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773c:	2b40      	cmp	r3, #64	; 0x40
 800773e:	bf0c      	ite	eq
 8007740:	2301      	moveq	r3, #1
 8007742:	2300      	movne	r3, #0
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	f003 0308 	and.w	r3, r3, #8
 8007752:	2b00      	cmp	r3, #0
 8007754:	d103      	bne.n	800775e <HAL_UART_IRQHandler+0x17a>
 8007756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800775a:	2b00      	cmp	r3, #0
 800775c:	d04f      	beq.n	80077fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fc16 	bl	8007f90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d141      	bne.n	80077f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3314      	adds	r3, #20
 8007778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007788:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800778c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3314      	adds	r3, #20
 800779a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800779e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077ae:	e841 2300 	strex	r3, r2, [r1]
 80077b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1d9      	bne.n	8007772 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d013      	beq.n	80077ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	4a7d      	ldr	r2, [pc, #500]	; (80079c0 <HAL_UART_IRQHandler+0x3dc>)
 80077cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fc fc98 	bl	8004108 <HAL_DMA_Abort_IT>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d016      	beq.n	800780c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ec:	e00e      	b.n	800780c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fa fda6 	bl	8002340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f4:	e00a      	b.n	800780c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fa fda2 	bl	8002340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077fc:	e006      	b.n	800780c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7fa fd9e 	bl	8002340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800780a:	e170      	b.n	8007aee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780c:	bf00      	nop
    return;
 800780e:	e16e      	b.n	8007aee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007814:	2b01      	cmp	r3, #1
 8007816:	f040 814a 	bne.w	8007aae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800781a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781e:	f003 0310 	and.w	r3, r3, #16
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 8143 	beq.w	8007aae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782c:	f003 0310 	and.w	r3, r3, #16
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 813c 	beq.w	8007aae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007836:	2300      	movs	r3, #0
 8007838:	60bb      	str	r3, [r7, #8]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60bb      	str	r3, [r7, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	60bb      	str	r3, [r7, #8]
 800784a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007856:	2b40      	cmp	r3, #64	; 0x40
 8007858:	f040 80b4 	bne.w	80079c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007868:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8140 	beq.w	8007af2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800787a:	429a      	cmp	r2, r3
 800787c:	f080 8139 	bcs.w	8007af2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007886:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007892:	f000 8088 	beq.w	80079a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	330c      	adds	r3, #12
 800789c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	330c      	adds	r3, #12
 80078be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1d9      	bne.n	8007896 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3314      	adds	r3, #20
 80078e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078f4:	f023 0301 	bic.w	r3, r3, #1
 80078f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3314      	adds	r3, #20
 8007902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007906:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800790a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800790e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e1      	bne.n	80078e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3314      	adds	r3, #20
 8007924:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800792e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3314      	adds	r3, #20
 800793e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007942:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007944:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007948:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e3      	bne.n	800791e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2220      	movs	r2, #32
 800795a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	330c      	adds	r3, #12
 800796a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007976:	f023 0310 	bic.w	r3, r3, #16
 800797a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	330c      	adds	r3, #12
 8007984:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007988:	65ba      	str	r2, [r7, #88]	; 0x58
 800798a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800798e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e3      	bne.n	8007964 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fc fb41 	bl	8004028 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f8b6 	bl	8007b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079bc:	e099      	b.n	8007af2 <HAL_UART_IRQHandler+0x50e>
 80079be:	bf00      	nop
 80079c0:	08008057 	.word	0x08008057
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 808b 	beq.w	8007af6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8086 	beq.w	8007af6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	330c      	adds	r3, #12
 80079f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a0e:	647a      	str	r2, [r7, #68]	; 0x44
 8007a10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e3      	bne.n	80079ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3314      	adds	r3, #20
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	623b      	str	r3, [r7, #32]
   return(result);
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	f023 0301 	bic.w	r3, r3, #1
 8007a38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3314      	adds	r3, #20
 8007a42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a46:	633a      	str	r2, [r7, #48]	; 0x30
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e3      	bne.n	8007a22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0310 	bic.w	r3, r3, #16
 8007a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	330c      	adds	r3, #12
 8007a88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a8c:	61fa      	str	r2, [r7, #28]
 8007a8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a90:	69b9      	ldr	r1, [r7, #24]
 8007a92:	69fa      	ldr	r2, [r7, #28]
 8007a94:	e841 2300 	strex	r3, r2, [r1]
 8007a98:	617b      	str	r3, [r7, #20]
   return(result);
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e3      	bne.n	8007a68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007aa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f83e 	bl	8007b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aac:	e023      	b.n	8007af6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <HAL_UART_IRQHandler+0x4ea>
 8007aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fad9 	bl	800807e <UART_Transmit_IT>
    return;
 8007acc:	e014      	b.n	8007af8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00e      	beq.n	8007af8 <HAL_UART_IRQHandler+0x514>
 8007ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d008      	beq.n	8007af8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fb19 	bl	800811e <UART_EndTransmit_IT>
    return;
 8007aec:	e004      	b.n	8007af8 <HAL_UART_IRQHandler+0x514>
    return;
 8007aee:	bf00      	nop
 8007af0:	e002      	b.n	8007af8 <HAL_UART_IRQHandler+0x514>
      return;
 8007af2:	bf00      	nop
 8007af4:	e000      	b.n	8007af8 <HAL_UART_IRQHandler+0x514>
      return;
 8007af6:	bf00      	nop
  }
}
 8007af8:	37e8      	adds	r7, #232	; 0xe8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop

08007b00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b09c      	sub	sp, #112	; 0x70
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d172      	bne.n	8007c42 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5e:	2200      	movs	r2, #0
 8007b60:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	330c      	adds	r3, #12
 8007b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b82:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b84:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e5      	bne.n	8007b62 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3314      	adds	r3, #20
 8007b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba8:	f023 0301 	bic.w	r3, r3, #1
 8007bac:	667b      	str	r3, [r7, #100]	; 0x64
 8007bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3314      	adds	r3, #20
 8007bb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bb6:	647a      	str	r2, [r7, #68]	; 0x44
 8007bb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e5      	bne.n	8007b96 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3314      	adds	r3, #20
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	663b      	str	r3, [r7, #96]	; 0x60
 8007be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3314      	adds	r3, #20
 8007be8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bea:	633a      	str	r2, [r7, #48]	; 0x30
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e5      	bne.n	8007bca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d119      	bne.n	8007c42 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	330c      	adds	r3, #12
 8007c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f023 0310 	bic.w	r3, r3, #16
 8007c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c2e:	61fa      	str	r2, [r7, #28]
 8007c30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	69b9      	ldr	r1, [r7, #24]
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e5      	bne.n	8007c0e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d106      	bne.n	8007c58 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c52:	f7ff ff69 	bl	8007b28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c56:	e002      	b.n	8007c5e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007c58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c5a:	f7fa f9a5 	bl	8001fa8 <HAL_UART_RxCpltCallback>
}
 8007c5e:	bf00      	nop
 8007c60:	3770      	adds	r7, #112	; 0x70
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d108      	bne.n	8007c8e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c80:	085b      	lsrs	r3, r3, #1
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	4619      	mov	r1, r3
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7ff ff4e 	bl	8007b28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c8c:	e002      	b.n	8007c94 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7ff ff40 	bl	8007b14 <HAL_UART_RxHalfCpltCallback>
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb8:	2b80      	cmp	r3, #128	; 0x80
 8007cba:	bf0c      	ite	eq
 8007cbc:	2301      	moveq	r3, #1
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b21      	cmp	r3, #33	; 0x21
 8007cce:	d108      	bne.n	8007ce2 <UART_DMAError+0x46>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007cdc:	68b8      	ldr	r0, [r7, #8]
 8007cde:	f000 f92f 	bl	8007f40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cec:	2b40      	cmp	r3, #64	; 0x40
 8007cee:	bf0c      	ite	eq
 8007cf0:	2301      	moveq	r3, #1
 8007cf2:	2300      	movne	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b22      	cmp	r3, #34	; 0x22
 8007d02:	d108      	bne.n	8007d16 <UART_DMAError+0x7a>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d10:	68b8      	ldr	r0, [r7, #8]
 8007d12:	f000 f93d 	bl	8007f90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	f043 0210 	orr.w	r2, r3, #16
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d22:	68b8      	ldr	r0, [r7, #8]
 8007d24:	f7fa fb0c 	bl	8002340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b090      	sub	sp, #64	; 0x40
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	603b      	str	r3, [r7, #0]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d40:	e050      	b.n	8007de4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d48:	d04c      	beq.n	8007de4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d50:	f7fb f8a4 	bl	8002e9c <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d241      	bcs.n	8007de4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	330c      	adds	r3, #12
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d80:	637a      	str	r2, [r7, #52]	; 0x34
 8007d82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e5      	bne.n	8007d60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3314      	adds	r3, #20
 8007d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	613b      	str	r3, [r7, #16]
   return(result);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3314      	adds	r3, #20
 8007db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007db4:	623a      	str	r2, [r7, #32]
 8007db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	69f9      	ldr	r1, [r7, #28]
 8007dba:	6a3a      	ldr	r2, [r7, #32]
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e5      	bne.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e00f      	b.n	8007e04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	4013      	ands	r3, r2
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	bf0c      	ite	eq
 8007df4:	2301      	moveq	r3, #1
 8007df6:	2300      	movne	r3, #0
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d09f      	beq.n	8007d42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3740      	adds	r7, #64	; 0x40
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b098      	sub	sp, #96	; 0x60
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	88fa      	ldrh	r2, [r7, #6]
 8007e24:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2222      	movs	r2, #34	; 0x22
 8007e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	4a3e      	ldr	r2, [pc, #248]	; (8007f34 <UART_Start_Receive_DMA+0x128>)
 8007e3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	4a3d      	ldr	r2, [pc, #244]	; (8007f38 <UART_Start_Receive_DMA+0x12c>)
 8007e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	4a3c      	ldr	r2, [pc, #240]	; (8007f3c <UART_Start_Receive_DMA+0x130>)
 8007e4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	2200      	movs	r2, #0
 8007e52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e54:	f107 0308 	add.w	r3, r7, #8
 8007e58:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	88fb      	ldrh	r3, [r7, #6]
 8007e6c:	f7fc f884 	bl	8003f78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e70:	2300      	movs	r3, #0
 8007e72:	613b      	str	r3, [r7, #16]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	613b      	str	r3, [r7, #16]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	613b      	str	r3, [r7, #16]
 8007e84:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	330c      	adds	r3, #12
 8007e94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ea4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	330c      	adds	r3, #12
 8007eac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eae:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007eb0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007eb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e5      	bne.n	8007e8e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3314      	adds	r3, #20
 8007ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	f043 0301 	orr.w	r3, r3, #1
 8007ed8:	657b      	str	r3, [r7, #84]	; 0x54
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3314      	adds	r3, #20
 8007ee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ee2:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e5      	bne.n	8007ec2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3314      	adds	r3, #20
 8007efc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	617b      	str	r3, [r7, #20]
   return(result);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3314      	adds	r3, #20
 8007f14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f16:	627a      	str	r2, [r7, #36]	; 0x24
 8007f18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6a39      	ldr	r1, [r7, #32]
 8007f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e5      	bne.n	8007ef6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3760      	adds	r7, #96	; 0x60
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	08007b41 	.word	0x08007b41
 8007f38:	08007c67 	.word	0x08007c67
 8007f3c:	08007c9d 	.word	0x08007c9d

08007f40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b089      	sub	sp, #36	; 0x24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	330c      	adds	r3, #12
 8007f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f5e:	61fb      	str	r3, [r7, #28]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	330c      	adds	r3, #12
 8007f66:	69fa      	ldr	r2, [r7, #28]
 8007f68:	61ba      	str	r2, [r7, #24]
 8007f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6979      	ldr	r1, [r7, #20]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	613b      	str	r3, [r7, #16]
   return(result);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e5      	bne.n	8007f48 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007f84:	bf00      	nop
 8007f86:	3724      	adds	r7, #36	; 0x24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b095      	sub	sp, #84	; 0x54
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	330c      	adds	r3, #12
 8007f9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	330c      	adds	r3, #12
 8007fb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fb8:	643a      	str	r2, [r7, #64]	; 0x40
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e5      	bne.n	8007f98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3314      	adds	r3, #20
 8007fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f023 0301 	bic.w	r3, r3, #1
 8007fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3314      	adds	r3, #20
 8007fea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e5      	bne.n	8007fcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008004:	2b01      	cmp	r3, #1
 8008006:	d119      	bne.n	800803c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	330c      	adds	r3, #12
 800800e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	60bb      	str	r3, [r7, #8]
   return(result);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f023 0310 	bic.w	r3, r3, #16
 800801e:	647b      	str	r3, [r7, #68]	; 0x44
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	330c      	adds	r3, #12
 8008026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008028:	61ba      	str	r2, [r7, #24]
 800802a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6979      	ldr	r1, [r7, #20]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	613b      	str	r3, [r7, #16]
   return(result);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e5      	bne.n	8008008 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	631a      	str	r2, [r3, #48]	; 0x30
}
 800804a:	bf00      	nop
 800804c:	3754      	adds	r7, #84	; 0x54
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7fa f965 	bl	8002340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b21      	cmp	r3, #33	; 0x21
 8008090:	d13e      	bne.n	8008110 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800809a:	d114      	bne.n	80080c6 <UART_Transmit_IT+0x48>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d110      	bne.n	80080c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	1c9a      	adds	r2, r3, #2
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	621a      	str	r2, [r3, #32]
 80080c4:	e008      	b.n	80080d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	1c59      	adds	r1, r3, #1
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6211      	str	r1, [r2, #32]
 80080d0:	781a      	ldrb	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3b01      	subs	r3, #1
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	4619      	mov	r1, r3
 80080e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10f      	bne.n	800810c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800810a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e000      	b.n	8008112 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008110:	2302      	movs	r3, #2
  }
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008134:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff fcde 	bl	8007b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b08c      	sub	sp, #48	; 0x30
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b22      	cmp	r3, #34	; 0x22
 8008160:	f040 80ab 	bne.w	80082ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800816c:	d117      	bne.n	800819e <UART_Receive_IT+0x50>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d113      	bne.n	800819e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008176:	2300      	movs	r3, #0
 8008178:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	b29b      	uxth	r3, r3
 8008188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818c:	b29a      	uxth	r2, r3
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	1c9a      	adds	r2, r3, #2
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	629a      	str	r2, [r3, #40]	; 0x28
 800819c:	e026      	b.n	80081ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b0:	d007      	beq.n	80081c2 <UART_Receive_IT+0x74>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10a      	bne.n	80081d0 <UART_Receive_IT+0x82>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d106      	bne.n	80081d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	e008      	b.n	80081e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	4619      	mov	r1, r3
 80081fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d15a      	bne.n	80082b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0220 	bic.w	r2, r2, #32
 800820e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800821e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695a      	ldr	r2, [r3, #20]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0201 	bic.w	r2, r2, #1
 800822e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823c:	2b01      	cmp	r3, #1
 800823e:	d135      	bne.n	80082ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	330c      	adds	r3, #12
 800824c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	613b      	str	r3, [r7, #16]
   return(result);
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f023 0310 	bic.w	r3, r3, #16
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	330c      	adds	r3, #12
 8008264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008266:	623a      	str	r2, [r7, #32]
 8008268:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	69f9      	ldr	r1, [r7, #28]
 800826c:	6a3a      	ldr	r2, [r7, #32]
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	61bb      	str	r3, [r7, #24]
   return(result);
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e5      	bne.n	8008246 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0310 	and.w	r3, r3, #16
 8008284:	2b10      	cmp	r3, #16
 8008286:	d10a      	bne.n	800829e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008288:	2300      	movs	r3, #0
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7ff fc3f 	bl	8007b28 <HAL_UARTEx_RxEventCallback>
 80082aa:	e002      	b.n	80082b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7f9 fe7b 	bl	8001fa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e002      	b.n	80082bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	e000      	b.n	80082bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082ba:	2302      	movs	r3, #2
  }
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3730      	adds	r7, #48	; 0x30
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c8:	b09f      	sub	sp, #124	; 0x7c
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082da:	68d9      	ldr	r1, [r3, #12]
 80082dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	ea40 0301 	orr.w	r3, r0, r1
 80082e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e8:	689a      	ldr	r2, [r3, #8]
 80082ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	431a      	orrs	r2, r3
 80082f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	431a      	orrs	r2, r3
 80082f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80082fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008308:	f021 010c 	bic.w	r1, r1, #12
 800830c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008312:	430b      	orrs	r3, r1
 8008314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008322:	6999      	ldr	r1, [r3, #24]
 8008324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	ea40 0301 	orr.w	r3, r0, r1
 800832c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800832e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4bc5      	ldr	r3, [pc, #788]	; (8008648 <UART_SetConfig+0x384>)
 8008334:	429a      	cmp	r2, r3
 8008336:	d004      	beq.n	8008342 <UART_SetConfig+0x7e>
 8008338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	4bc3      	ldr	r3, [pc, #780]	; (800864c <UART_SetConfig+0x388>)
 800833e:	429a      	cmp	r2, r3
 8008340:	d103      	bne.n	800834a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008342:	f7fd f9d1 	bl	80056e8 <HAL_RCC_GetPCLK2Freq>
 8008346:	6778      	str	r0, [r7, #116]	; 0x74
 8008348:	e002      	b.n	8008350 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800834a:	f7fd f9b9 	bl	80056c0 <HAL_RCC_GetPCLK1Freq>
 800834e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008358:	f040 80b6 	bne.w	80084c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800835c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800835e:	461c      	mov	r4, r3
 8008360:	f04f 0500 	mov.w	r5, #0
 8008364:	4622      	mov	r2, r4
 8008366:	462b      	mov	r3, r5
 8008368:	1891      	adds	r1, r2, r2
 800836a:	6439      	str	r1, [r7, #64]	; 0x40
 800836c:	415b      	adcs	r3, r3
 800836e:	647b      	str	r3, [r7, #68]	; 0x44
 8008370:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008374:	1912      	adds	r2, r2, r4
 8008376:	eb45 0303 	adc.w	r3, r5, r3
 800837a:	f04f 0000 	mov.w	r0, #0
 800837e:	f04f 0100 	mov.w	r1, #0
 8008382:	00d9      	lsls	r1, r3, #3
 8008384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008388:	00d0      	lsls	r0, r2, #3
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	1911      	adds	r1, r2, r4
 8008390:	6639      	str	r1, [r7, #96]	; 0x60
 8008392:	416b      	adcs	r3, r5
 8008394:	667b      	str	r3, [r7, #100]	; 0x64
 8008396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	461a      	mov	r2, r3
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	1891      	adds	r1, r2, r2
 80083a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80083a4:	415b      	adcs	r3, r3
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80083b0:	f7f8 fb84 	bl	8000abc <__aeabi_uldivmod>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4ba5      	ldr	r3, [pc, #660]	; (8008650 <UART_SetConfig+0x38c>)
 80083ba:	fba3 2302 	umull	r2, r3, r3, r2
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	011e      	lsls	r6, r3, #4
 80083c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083c4:	461c      	mov	r4, r3
 80083c6:	f04f 0500 	mov.w	r5, #0
 80083ca:	4622      	mov	r2, r4
 80083cc:	462b      	mov	r3, r5
 80083ce:	1891      	adds	r1, r2, r2
 80083d0:	6339      	str	r1, [r7, #48]	; 0x30
 80083d2:	415b      	adcs	r3, r3
 80083d4:	637b      	str	r3, [r7, #52]	; 0x34
 80083d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083da:	1912      	adds	r2, r2, r4
 80083dc:	eb45 0303 	adc.w	r3, r5, r3
 80083e0:	f04f 0000 	mov.w	r0, #0
 80083e4:	f04f 0100 	mov.w	r1, #0
 80083e8:	00d9      	lsls	r1, r3, #3
 80083ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083ee:	00d0      	lsls	r0, r2, #3
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	1911      	adds	r1, r2, r4
 80083f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80083f8:	416b      	adcs	r3, r5
 80083fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	461a      	mov	r2, r3
 8008402:	f04f 0300 	mov.w	r3, #0
 8008406:	1891      	adds	r1, r2, r2
 8008408:	62b9      	str	r1, [r7, #40]	; 0x28
 800840a:	415b      	adcs	r3, r3
 800840c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800840e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008412:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008416:	f7f8 fb51 	bl	8000abc <__aeabi_uldivmod>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4b8c      	ldr	r3, [pc, #560]	; (8008650 <UART_SetConfig+0x38c>)
 8008420:	fba3 1302 	umull	r1, r3, r3, r2
 8008424:	095b      	lsrs	r3, r3, #5
 8008426:	2164      	movs	r1, #100	; 0x64
 8008428:	fb01 f303 	mul.w	r3, r1, r3
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	00db      	lsls	r3, r3, #3
 8008430:	3332      	adds	r3, #50	; 0x32
 8008432:	4a87      	ldr	r2, [pc, #540]	; (8008650 <UART_SetConfig+0x38c>)
 8008434:	fba2 2303 	umull	r2, r3, r2, r3
 8008438:	095b      	lsrs	r3, r3, #5
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008440:	441e      	add	r6, r3
 8008442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008444:	4618      	mov	r0, r3
 8008446:	f04f 0100 	mov.w	r1, #0
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	1894      	adds	r4, r2, r2
 8008450:	623c      	str	r4, [r7, #32]
 8008452:	415b      	adcs	r3, r3
 8008454:	627b      	str	r3, [r7, #36]	; 0x24
 8008456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800845a:	1812      	adds	r2, r2, r0
 800845c:	eb41 0303 	adc.w	r3, r1, r3
 8008460:	f04f 0400 	mov.w	r4, #0
 8008464:	f04f 0500 	mov.w	r5, #0
 8008468:	00dd      	lsls	r5, r3, #3
 800846a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800846e:	00d4      	lsls	r4, r2, #3
 8008470:	4622      	mov	r2, r4
 8008472:	462b      	mov	r3, r5
 8008474:	1814      	adds	r4, r2, r0
 8008476:	653c      	str	r4, [r7, #80]	; 0x50
 8008478:	414b      	adcs	r3, r1
 800847a:	657b      	str	r3, [r7, #84]	; 0x54
 800847c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	461a      	mov	r2, r3
 8008482:	f04f 0300 	mov.w	r3, #0
 8008486:	1891      	adds	r1, r2, r2
 8008488:	61b9      	str	r1, [r7, #24]
 800848a:	415b      	adcs	r3, r3
 800848c:	61fb      	str	r3, [r7, #28]
 800848e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008492:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008496:	f7f8 fb11 	bl	8000abc <__aeabi_uldivmod>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4b6c      	ldr	r3, [pc, #432]	; (8008650 <UART_SetConfig+0x38c>)
 80084a0:	fba3 1302 	umull	r1, r3, r3, r2
 80084a4:	095b      	lsrs	r3, r3, #5
 80084a6:	2164      	movs	r1, #100	; 0x64
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	3332      	adds	r3, #50	; 0x32
 80084b2:	4a67      	ldr	r2, [pc, #412]	; (8008650 <UART_SetConfig+0x38c>)
 80084b4:	fba2 2303 	umull	r2, r3, r2, r3
 80084b8:	095b      	lsrs	r3, r3, #5
 80084ba:	f003 0207 	and.w	r2, r3, #7
 80084be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4432      	add	r2, r6
 80084c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084c6:	e0b9      	b.n	800863c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ca:	461c      	mov	r4, r3
 80084cc:	f04f 0500 	mov.w	r5, #0
 80084d0:	4622      	mov	r2, r4
 80084d2:	462b      	mov	r3, r5
 80084d4:	1891      	adds	r1, r2, r2
 80084d6:	6139      	str	r1, [r7, #16]
 80084d8:	415b      	adcs	r3, r3
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80084e0:	1912      	adds	r2, r2, r4
 80084e2:	eb45 0303 	adc.w	r3, r5, r3
 80084e6:	f04f 0000 	mov.w	r0, #0
 80084ea:	f04f 0100 	mov.w	r1, #0
 80084ee:	00d9      	lsls	r1, r3, #3
 80084f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084f4:	00d0      	lsls	r0, r2, #3
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	eb12 0804 	adds.w	r8, r2, r4
 80084fe:	eb43 0905 	adc.w	r9, r3, r5
 8008502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	4618      	mov	r0, r3
 8008508:	f04f 0100 	mov.w	r1, #0
 800850c:	f04f 0200 	mov.w	r2, #0
 8008510:	f04f 0300 	mov.w	r3, #0
 8008514:	008b      	lsls	r3, r1, #2
 8008516:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800851a:	0082      	lsls	r2, r0, #2
 800851c:	4640      	mov	r0, r8
 800851e:	4649      	mov	r1, r9
 8008520:	f7f8 facc 	bl	8000abc <__aeabi_uldivmod>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4b49      	ldr	r3, [pc, #292]	; (8008650 <UART_SetConfig+0x38c>)
 800852a:	fba3 2302 	umull	r2, r3, r3, r2
 800852e:	095b      	lsrs	r3, r3, #5
 8008530:	011e      	lsls	r6, r3, #4
 8008532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008534:	4618      	mov	r0, r3
 8008536:	f04f 0100 	mov.w	r1, #0
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	1894      	adds	r4, r2, r2
 8008540:	60bc      	str	r4, [r7, #8]
 8008542:	415b      	adcs	r3, r3
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800854a:	1812      	adds	r2, r2, r0
 800854c:	eb41 0303 	adc.w	r3, r1, r3
 8008550:	f04f 0400 	mov.w	r4, #0
 8008554:	f04f 0500 	mov.w	r5, #0
 8008558:	00dd      	lsls	r5, r3, #3
 800855a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800855e:	00d4      	lsls	r4, r2, #3
 8008560:	4622      	mov	r2, r4
 8008562:	462b      	mov	r3, r5
 8008564:	1814      	adds	r4, r2, r0
 8008566:	64bc      	str	r4, [r7, #72]	; 0x48
 8008568:	414b      	adcs	r3, r1
 800856a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800856c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	4618      	mov	r0, r3
 8008572:	f04f 0100 	mov.w	r1, #0
 8008576:	f04f 0200 	mov.w	r2, #0
 800857a:	f04f 0300 	mov.w	r3, #0
 800857e:	008b      	lsls	r3, r1, #2
 8008580:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008584:	0082      	lsls	r2, r0, #2
 8008586:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800858a:	f7f8 fa97 	bl	8000abc <__aeabi_uldivmod>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4b2f      	ldr	r3, [pc, #188]	; (8008650 <UART_SetConfig+0x38c>)
 8008594:	fba3 1302 	umull	r1, r3, r3, r2
 8008598:	095b      	lsrs	r3, r3, #5
 800859a:	2164      	movs	r1, #100	; 0x64
 800859c:	fb01 f303 	mul.w	r3, r1, r3
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	3332      	adds	r3, #50	; 0x32
 80085a6:	4a2a      	ldr	r2, [pc, #168]	; (8008650 <UART_SetConfig+0x38c>)
 80085a8:	fba2 2303 	umull	r2, r3, r2, r3
 80085ac:	095b      	lsrs	r3, r3, #5
 80085ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085b2:	441e      	add	r6, r3
 80085b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085b6:	4618      	mov	r0, r3
 80085b8:	f04f 0100 	mov.w	r1, #0
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	1894      	adds	r4, r2, r2
 80085c2:	603c      	str	r4, [r7, #0]
 80085c4:	415b      	adcs	r3, r3
 80085c6:	607b      	str	r3, [r7, #4]
 80085c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085cc:	1812      	adds	r2, r2, r0
 80085ce:	eb41 0303 	adc.w	r3, r1, r3
 80085d2:	f04f 0400 	mov.w	r4, #0
 80085d6:	f04f 0500 	mov.w	r5, #0
 80085da:	00dd      	lsls	r5, r3, #3
 80085dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085e0:	00d4      	lsls	r4, r2, #3
 80085e2:	4622      	mov	r2, r4
 80085e4:	462b      	mov	r3, r5
 80085e6:	eb12 0a00 	adds.w	sl, r2, r0
 80085ea:	eb43 0b01 	adc.w	fp, r3, r1
 80085ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f04f 0100 	mov.w	r1, #0
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	008b      	lsls	r3, r1, #2
 8008602:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008606:	0082      	lsls	r2, r0, #2
 8008608:	4650      	mov	r0, sl
 800860a:	4659      	mov	r1, fp
 800860c:	f7f8 fa56 	bl	8000abc <__aeabi_uldivmod>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4b0e      	ldr	r3, [pc, #56]	; (8008650 <UART_SetConfig+0x38c>)
 8008616:	fba3 1302 	umull	r1, r3, r3, r2
 800861a:	095b      	lsrs	r3, r3, #5
 800861c:	2164      	movs	r1, #100	; 0x64
 800861e:	fb01 f303 	mul.w	r3, r1, r3
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	011b      	lsls	r3, r3, #4
 8008626:	3332      	adds	r3, #50	; 0x32
 8008628:	4a09      	ldr	r2, [pc, #36]	; (8008650 <UART_SetConfig+0x38c>)
 800862a:	fba2 2303 	umull	r2, r3, r2, r3
 800862e:	095b      	lsrs	r3, r3, #5
 8008630:	f003 020f 	and.w	r2, r3, #15
 8008634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4432      	add	r2, r6
 800863a:	609a      	str	r2, [r3, #8]
}
 800863c:	bf00      	nop
 800863e:	377c      	adds	r7, #124	; 0x7c
 8008640:	46bd      	mov	sp, r7
 8008642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008646:	bf00      	nop
 8008648:	40011000 	.word	0x40011000
 800864c:	40011400 	.word	0x40011400
 8008650:	51eb851f 	.word	0x51eb851f

08008654 <__libc_init_array>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	4d0d      	ldr	r5, [pc, #52]	; (800868c <__libc_init_array+0x38>)
 8008658:	4c0d      	ldr	r4, [pc, #52]	; (8008690 <__libc_init_array+0x3c>)
 800865a:	1b64      	subs	r4, r4, r5
 800865c:	10a4      	asrs	r4, r4, #2
 800865e:	2600      	movs	r6, #0
 8008660:	42a6      	cmp	r6, r4
 8008662:	d109      	bne.n	8008678 <__libc_init_array+0x24>
 8008664:	4d0b      	ldr	r5, [pc, #44]	; (8008694 <__libc_init_array+0x40>)
 8008666:	4c0c      	ldr	r4, [pc, #48]	; (8008698 <__libc_init_array+0x44>)
 8008668:	f000 f820 	bl	80086ac <_init>
 800866c:	1b64      	subs	r4, r4, r5
 800866e:	10a4      	asrs	r4, r4, #2
 8008670:	2600      	movs	r6, #0
 8008672:	42a6      	cmp	r6, r4
 8008674:	d105      	bne.n	8008682 <__libc_init_array+0x2e>
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	f855 3b04 	ldr.w	r3, [r5], #4
 800867c:	4798      	blx	r3
 800867e:	3601      	adds	r6, #1
 8008680:	e7ee      	b.n	8008660 <__libc_init_array+0xc>
 8008682:	f855 3b04 	ldr.w	r3, [r5], #4
 8008686:	4798      	blx	r3
 8008688:	3601      	adds	r6, #1
 800868a:	e7f2      	b.n	8008672 <__libc_init_array+0x1e>
 800868c:	080086ec 	.word	0x080086ec
 8008690:	080086ec 	.word	0x080086ec
 8008694:	080086ec 	.word	0x080086ec
 8008698:	080086f0 	.word	0x080086f0

0800869c <memset>:
 800869c:	4402      	add	r2, r0
 800869e:	4603      	mov	r3, r0
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d100      	bne.n	80086a6 <memset+0xa>
 80086a4:	4770      	bx	lr
 80086a6:	f803 1b01 	strb.w	r1, [r3], #1
 80086aa:	e7f9      	b.n	80086a0 <memset+0x4>

080086ac <_init>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	bf00      	nop
 80086b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b2:	bc08      	pop	{r3}
 80086b4:	469e      	mov	lr, r3
 80086b6:	4770      	bx	lr

080086b8 <_fini>:
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ba:	bf00      	nop
 80086bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086be:	bc08      	pop	{r3}
 80086c0:	469e      	mov	lr, r3
 80086c2:	4770      	bx	lr
