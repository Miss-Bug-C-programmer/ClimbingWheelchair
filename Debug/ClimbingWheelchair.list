
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba04  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800bbb8  0800bbb8  0001bbb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be98  0800be98  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800be98  0800be98  0001be98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bea0  0800bea0  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bea0  0800bea0  0001bea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bea4  0800bea4  0001bea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800bea8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000258  0800c0fc  00020258  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  0800c0fc  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c854  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004041  00000000  00000000  0003cad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00040b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  00042068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279d0  00000000  00000000  000433d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae05  00000000  00000000  0006ada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1f54  00000000  00000000  00085ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167af9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dbc  00000000  00000000  00167b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000258 	.word	0x20000258
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bb9c 	.word	0x0800bb9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000025c 	.word	0x2000025c
 80001ec:	0800bb9c 	.word	0x0800bb9c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f8c3 	bl	80010b8 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 f95e 	bl	80011fc <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f811 	bl	8000f74 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f003 f86b 	bl	800402c <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <PID_tune>:
	pid->lastin = in;
	pid->lasttime = HAL_GetTick();
}

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f80:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f84:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 8000f88:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	d452      	bmi.n	800103c <PID_tune+0xc8>
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa2:	d44b      	bmi.n	800103c <PID_tune+0xc8>
 8000fa4:	edd7 7a00 	vldr	s15, [r7]
 8000fa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	d444      	bmi.n	800103c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fbe:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001048 <PID_tune+0xd4>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8000fd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8000fe2:	edd7 6a00 	vldr	s13, [r7]
 8000fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d11f      	bne.n	800103e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	edd3 7a03 	vldr	s15, [r3, #12]
 8001004:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800104c <PID_tune+0xd8>
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a04 	vldr	s15, [r3, #16]
 8001018:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800104c <PID_tune+0xd8>
 800101c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	edd3 7a05 	vldr	s15, [r3, #20]
 800102c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800104c <PID_tune+0xd8>
 8001030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	edc3 7a05 	vstr	s15, [r3, #20]
 800103a:	e000      	b.n	800103e <PID_tune+0xca>
		return;
 800103c:	bf00      	nop
	}
}
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	447a0000 	.word	0x447a0000
 800104c:	00000000 	.word	0x00000000

08001050 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d025      	beq.n	80010ac <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107a:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	ed93 7a04 	vldr	s14, [r3, #16]
 8001084:	edd7 7a03 	vldr	s15, [r7, #12]
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	edd3 6a05 	vldr	s13, [r3, #20]
 8001098:	ed97 7a03 	vldr	s14, [r7, #12]
 800109c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80010c4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 80010c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80010cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	da4d      	bge.n	8001176 <pid_limits+0xbe>
	pid->omin = min;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d043      	beq.n	8001178 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	ed93 7a00 	vldr	s14, [r3]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80010fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd05      	ble.n	8001114 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	69d2      	ldr	r2, [r2, #28]
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e010      	b.n	8001136 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	d504      	bpl.n	8001136 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	6992      	ldr	r2, [r2, #24]
 8001134:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	ed93 7a08 	vldr	s14, [r3, #32]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	dd04      	ble.n	8001156 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	69da      	ldr	r2, [r3, #28]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	621a      	str	r2, [r3, #32]
 8001154:	e010      	b.n	8001178 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	ed93 7a08 	vldr	s14, [r3, #32]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d505      	bpl.n	8001178 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	621a      	str	r2, [r3, #32]
 8001174:	e000      	b.n	8001178 <pid_limits+0xc0>
	if (min >= max) return;
 8001176:	bf00      	nop
	}
}
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <pid_auto>:

void pid_auto(PID_t pid)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001190:	2b00      	cmp	r3, #0
 8001192:	d12c      	bne.n	80011ee <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80011b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	dd04      	ble.n	80011c8 <pid_auto+0x46>
			pid->iterm = pid->omax;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69da      	ldr	r2, [r3, #28]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	621a      	str	r2, [r3, #32]
 80011c6:	e00e      	b.n	80011e6 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d503      	bpl.n	80011e6 <pid_auto+0x64>
			pid->iterm = pid->omin;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800120e:	2b00      	cmp	r3, #0
 8001210:	d023      	beq.n	800125a <pid_direction+0x5e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	429a      	cmp	r2, r3
 800121c:	d01d      	beq.n	800125a <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edd3 7a03 	vldr	s15, [r3, #12]
 8001224:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001270 <pid_direction+0x74>
 8001228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	edd3 7a04 	vldr	s15, [r3, #16]
 8001238:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001270 <pid_direction+0x74>
 800123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edd3 7a05 	vldr	s15, [r3, #20]
 800124c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001270 <pid_direction+0x74>
 8001250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	78fa      	ldrb	r2, [r7, #3]
 800125e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	00000000 	.word	0x00000000

08001274 <hubMotor_Init>:
 */

#include "X2_6010S.h"
extern uint8_t receive_buf[15];

void hubMotor_Init(){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <hubMotor_Init+0x2c>)
 8001280:	f004 fa7a 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <hubMotor_Init+0x2c>)
 800128c:	f004 fa74 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001296:	4802      	ldr	r0, [pc, #8]	; (80012a0 <hubMotor_Init+0x2c>)
 8001298:	f004 fa6e 	bl	8005778 <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40020c00 	.word	0x40020c00

080012a4 <send_HubMotor>:

void send_HubMotor(float m1_speed, float m2_speed){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ae:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
//	motor1_speed = -(int16_t)(m1_speed * 4096.0);
//	motor2_speed = (int16_t)(m2_speed * 4096.0);
	motor1_speed = -(int16_t)(m1_speed);
 80012b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ba:	ee17 3a90 	vmov	r3, s15
 80012be:	b21b      	sxth	r3, r3
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	425b      	negs	r3, r3
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_speed);
 80012c8:	edd7 7a00 	vldr	s15, [r7]
 80012cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d0:	ee17 3a90 	vmov	r3, s15
 80012d4:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 80012d6:	23aa      	movs	r3, #170	; 0xaa
 80012d8:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 80012da:	23a4      	movs	r3, #164	; 0xa4
 80012dc:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 80012de:	230e      	movs	r3, #14
 80012e0:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 80012ee:	23c8      	movs	r3, #200	; 0xc8
 80012f0:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 80012f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 80012fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 8001302:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001306:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 8001308:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800130c:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 300;
 800130e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001312:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 8001314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	b29b      	uxth	r3, r3
 800131a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 800131e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001320:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 800132a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800132e:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 8001330:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001334:	121b      	asrs	r3, r3, #8
 8001336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 800133a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800133c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 8001340:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001344:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 8001346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800134a:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 800134c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001350:	121b      	asrs	r3, r3, #8
 8001352:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 8001356:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001358:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 800135c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001360:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 8001362:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001366:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001368:	7b3b      	ldrb	r3, [r7, #12]
 800136a:	b29a      	uxth	r2, r3
 800136c:	7b7b      	ldrb	r3, [r7, #13]
 800136e:	b29b      	uxth	r3, r3
 8001370:	4413      	add	r3, r2
 8001372:	b29a      	uxth	r2, r3
 8001374:	7bbb      	ldrb	r3, [r7, #14]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4413      	add	r3, r2
 800137a:	b29a      	uxth	r2, r3
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 8001384:	7c3b      	ldrb	r3, [r7, #16]
 8001386:	b29b      	uxth	r3, r3
 8001388:	4413      	add	r3, r2
 800138a:	b29a      	uxth	r2, r3
 800138c:	7c7b      	ldrb	r3, [r7, #17]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4413      	add	r3, r2
 8001392:	b29a      	uxth	r2, r3
 8001394:	7cbb      	ldrb	r3, [r7, #18]
 8001396:	b29b      	uxth	r3, r3
 8001398:	4413      	add	r3, r2
 800139a:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 800139c:	7cfb      	ldrb	r3, [r7, #19]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	7d3b      	ldrb	r3, [r7, #20]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	7d7b      	ldrb	r3, [r7, #21]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4413      	add	r3, r2
 80013b2:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 80013b4:	7dbb      	ldrb	r3, [r7, #22]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	7e3b      	ldrb	r3, [r7, #24]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 80013cc:	7e7b      	ldrb	r3, [r7, #25]
 80013ce:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 80013d0:	4413      	add	r3, r2
 80013d2:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 80013d4:	8bfb      	ldrh	r3, [r7, #30]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15, 50);
 80013da:	f107 010c 	add.w	r1, r7, #12
 80013de:	2332      	movs	r3, #50	; 0x32
 80013e0:	220f      	movs	r2, #15
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <send_HubMotor+0x158>)
 80013e4:	f007 fb81 	bl	8008aea <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 80013e8:	220f      	movs	r2, #15
 80013ea:	4905      	ldr	r1, [pc, #20]	; (8001400 <send_HubMotor+0x15c>)
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <send_HubMotor+0x158>)
 80013ee:	f007 fc15 	bl	8008c1c <HAL_UART_Receive_DMA>
}
 80013f2:	bf00      	nop
 80013f4:	3730      	adds	r7, #48	; 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000070c 	.word	0x2000070c
 8001400:	20000594 	.word	0x20000594

08001404 <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 8001408:	2201      	movs	r2, #1
 800140a:	2110      	movs	r1, #16
 800140c:	481c      	ldr	r0, [pc, #112]	; (8001480 <ADC_Init+0x7c>)
 800140e:	f004 f9b3 	bl	8005778 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 8001412:	2200      	movs	r2, #0
 8001414:	2120      	movs	r1, #32
 8001416:	481b      	ldr	r0, [pc, #108]	; (8001484 <ADC_Init+0x80>)
 8001418:	f004 f9ae 	bl	8005778 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 800141c:	2200      	movs	r2, #0
 800141e:	2110      	movs	r1, #16
 8001420:	4818      	ldr	r0, [pc, #96]	; (8001484 <ADC_Init+0x80>)
 8001422:	f004 f9a9 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f002 fe0c 	bl	8004044 <HAL_Delay>
	AD7606_RST_HIGH;
 800142c:	2201      	movs	r2, #1
 800142e:	2110      	movs	r1, #16
 8001430:	4814      	ldr	r0, [pc, #80]	; (8001484 <ADC_Init+0x80>)
 8001432:	f004 f9a1 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f002 fe04 	bl	8004044 <HAL_Delay>
	AD7606_RST_LOW;
 800143c:	2200      	movs	r2, #0
 800143e:	2110      	movs	r1, #16
 8001440:	4810      	ldr	r0, [pc, #64]	; (8001484 <ADC_Init+0x80>)
 8001442:	f004 f999 	bl	8005778 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 8001446:	2200      	movs	r2, #0
 8001448:	2101      	movs	r1, #1
 800144a:	480e      	ldr	r0, [pc, #56]	; (8001484 <ADC_Init+0x80>)
 800144c:	f004 f994 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001450:	2001      	movs	r0, #1
 8001452:	f002 fdf7 	bl	8004044 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	2102      	movs	r1, #2
 800145a:	480a      	ldr	r0, [pc, #40]	; (8001484 <ADC_Init+0x80>)
 800145c:	f004 f98c 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2104      	movs	r1, #4
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <ADC_Init+0x80>)
 8001466:	f004 f987 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2108      	movs	r1, #8
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <ADC_Init+0x80>)
 8001470:	f004 f982 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f002 fde5 	bl	8004044 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40020000 	.word	0x40020000
 8001484:	40020800 	.word	0x40020800

08001488 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 800148c:	2200      	movs	r2, #0
 800148e:	2120      	movs	r1, #32
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <ADC_DataRequest+0x1c>)
 8001492:	f004 f971 	bl	8005778 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 8001496:	2201      	movs	r2, #1
 8001498:	2120      	movs	r1, #32
 800149a:	4802      	ldr	r0, [pc, #8]	; (80014a4 <ADC_DataRequest+0x1c>)
 800149c:	f004 f96c 	bl	8005778 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//		HAL_Delay(500);
//		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
//		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
//		      HAL_Delay(5000);
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40020800 	.word	0x40020800

080014a8 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 80014b0:	2200      	movs	r2, #0
 80014b2:	2110      	movs	r1, #16
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <ADC_Read+0x30>)
 80014b6:	f004 f95f 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 80014ba:	2302      	movs	r3, #2
 80014bc:	2208      	movs	r2, #8
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4806      	ldr	r0, [pc, #24]	; (80014dc <ADC_Read+0x34>)
 80014c2:	f005 fee3 	bl	800728c <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 80014c6:	2201      	movs	r2, #1
 80014c8:	2110      	movs	r1, #16
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <ADC_Read+0x30>)
 80014cc:	f004 f954 	bl	8005778 <HAL_GPIO_WritePin>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020000 	.word	0x40020000
 80014dc:	200002c0 	.word	0x200002c0

080014e0 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 80014e8:	2100      	movs	r1, #0
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f808 	bl	8001500 <enableMotor>
	brakeMotor(motor, 0);
 80014f0:	2100      	movs	r1, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f828 	bl	8001548 <brakeMotor>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	4619      	mov	r1, r3
 8001518:	f004 f92e 	bl	8005778 <HAL_GPIO_WritePin>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	461a      	mov	r2, r3
 8001532:	2108      	movs	r1, #8
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <emBrakeMotor+0x20>)
 8001536:	f004 f91f 	bl	8005778 <HAL_GPIO_WritePin>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40020c00 	.word	0x40020c00

08001548 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69d8      	ldr	r0, [r3, #28]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8c1b      	ldrh	r3, [r3, #32]
 800155c:	78fa      	ldrb	r2, [r7, #3]
 800155e:	4619      	mov	r1, r3
 8001560:	f004 f90a 	bl	8005778 <HAL_GPIO_WritePin>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001580:	78fa      	ldrb	r2, [r7, #3]
 8001582:	4619      	mov	r1, r3
 8001584:	f004 f8f8 	bl	8005778 <HAL_GPIO_WritePin>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 80015a2:	edd7 7a00 	vldr	s15, [r7]
 80015a6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80016d8 <setMotorSpeed+0x148>
 80015aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	dd01      	ble.n	80015b8 <setMotorSpeed+0x28>
 80015b4:	4b49      	ldr	r3, [pc, #292]	; (80016dc <setMotorSpeed+0x14c>)
 80015b6:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 80015b8:	6838      	ldr	r0, [r7, #0]
 80015ba:	f7fe ff7d 	bl	80004b8 <__aeabi_f2d>
 80015be:	a340      	add	r3, pc, #256	; (adr r3, 80016c0 <setMotorSpeed+0x130>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7fe fe18 	bl	80001f8 <__aeabi_dsub>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	a33d      	add	r3, pc, #244	; (adr r3, 80016c8 <setMotorSpeed+0x138>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7ff f8f1 	bl	80007bc <__aeabi_ddiv>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fa99 	bl	8000b18 <__aeabi_d2uiz>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f2:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7fe ff5e 	bl	80004b8 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	a133      	add	r1, pc, #204	; (adr r1, 80016d0 <setMotorSpeed+0x140>)
 8001602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001606:	f7ff f8d9 	bl	80007bc <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fa59 	bl	8000ac8 <__aeabi_d2iz>
 8001616:	4603      	mov	r3, r0
 8001618:	b29b      	uxth	r3, r3
 800161a:	3301      	adds	r3, #1
 800161c:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 800161e:	8a7b      	ldrh	r3, [r7, #18]
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	b29b      	uxth	r3, r3
 8001624:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 8001626:	edd7 7a00 	vldr	s15, [r7]
 800162a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800162e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	d503      	bpl.n	8001640 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001638:	2101      	movs	r1, #1
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff84 	bl	8001548 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	8a7a      	ldrh	r2, [r7, #18]
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	8b1b      	ldrh	r3, [r3, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
 800165c:	e01c      	b.n	8001698 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	8b1b      	ldrh	r3, [r3, #24]
 8001662:	2b04      	cmp	r3, #4
 8001664:	d105      	bne.n	8001672 <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
 8001670:	e012      	b.n	8001698 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	8b1b      	ldrh	r3, [r3, #24]
 8001676:	2b08      	cmp	r3, #8
 8001678:	d105      	bne.n	8001686 <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c
 8001684:	e008      	b.n	8001698 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	8b1b      	ldrh	r3, [r3, #24]
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d104      	bne.n	8001698 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	8b1b      	ldrh	r3, [r3, #24]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f006 fa32 	bl	8007b0c <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	f3af 8000 	nop.w
 80016c0:	bfb15b57 	.word	0xbfb15b57
 80016c4:	3fd09eec 	.word	0x3fd09eec
 80016c8:	1172ef0b 	.word	0x1172ef0b
 80016cc:	3f9989df 	.word	0x3f9989df
 80016d0:	00000000 	.word	0x00000000
 80016d4:	412e8480 	.word	0x412e8480
 80016d8:	42c80000 	.word	0x42c80000
 80016dc:	42c80000 	.word	0x42c80000

080016e0 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d129      	bne.n	800174a <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 80016f6:	edd7 7a00 	vldr	s15, [r7]
 80016fa:	eef0 7ae7 	vabs.f32	s15, s15
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f7fe fed9 	bl	80004b8 <__aeabi_f2d>
 8001706:	4604      	mov	r4, r0
 8001708:	460d      	mov	r5, r1
 800170a:	6838      	ldr	r0, [r7, #0]
 800170c:	f7fe fed4 	bl	80004b8 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4620      	mov	r0, r4
 8001716:	4629      	mov	r1, r5
 8001718:	f7ff f850 	bl	80007bc <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	f7ff f9a2 	bl	8000a74 <__aeabi_dcmpge>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <runMotor+0x60>
	      setMotorDir(motor, 0);
 8001736:	2100      	movs	r1, #0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff17 	bl	800156c <setMotorDir>
 800173e:	e032      	b.n	80017a6 <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001740:	2101      	movs	r1, #1
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff12 	bl	800156c <setMotorDir>
 8001748:	e02d      	b.n	80017a6 <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001750:	2b02      	cmp	r3, #2
 8001752:	d128      	bne.n	80017a6 <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 8001754:	edd7 7a00 	vldr	s15, [r7]
 8001758:	eef0 7ae7 	vabs.f32	s15, s15
 800175c:	ee17 0a90 	vmov	r0, s15
 8001760:	f7fe feaa 	bl	80004b8 <__aeabi_f2d>
 8001764:	4604      	mov	r4, r0
 8001766:	460d      	mov	r5, r1
 8001768:	6838      	ldr	r0, [r7, #0]
 800176a:	f7fe fea5 	bl	80004b8 <__aeabi_f2d>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7ff f821 	bl	80007bc <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	f7ff f973 	bl	8000a74 <__aeabi_dcmpge>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d004      	beq.n	800179e <runMotor+0xbe>
	  setMotorDir(motor, 1);
 8001794:	2101      	movs	r1, #1
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fee8 	bl	800156c <setMotorDir>
 800179c:	e003      	b.n	80017a6 <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 800179e:	2100      	movs	r1, #0
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fee3 	bl	800156c <setMotorDir>
    }

    HAL_Delay(50);
 80017a6:	2032      	movs	r0, #50	; 0x32
 80017a8:	f002 fc4c 	bl	8004044 <HAL_Delay>
    brakeMotor(motor, 0);
 80017ac:	2100      	movs	r1, #0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff feca 	bl	8001548 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 80017b4:	edd7 7a00 	vldr	s15, [r7]
 80017b8:	eef0 7ae7 	vabs.f32	s15, s15
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fee5 	bl	8001590 <setMotorSpeed>

}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bdb0      	pop	{r4, r5, r7, pc}

080017ce <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	889b      	ldrh	r3, [r3, #4]
 80017e0:	4619      	mov	r1, r3
 80017e2:	4610      	mov	r0, r2
 80017e4:	f003 ffb0 	bl	8005748 <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	799a      	ldrb	r2, [r3, #6]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	79db      	ldrb	r3, [r3, #7]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d004      	beq.n	8001806 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 80017fc:	f002 fc16 	bl	800402c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 8001806:	f002 fc11 	bl	800402c <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d209      	bcs.n	800182c <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	799a      	ldrb	r2, [r3, #6]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7a1b      	ldrb	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8001828:	2301      	movs	r3, #1
 800182a:	e004      	b.n	8001836 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	799a      	ldrb	r2, [r3, #6]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <MX_CAN1_Init+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_CAN1_Init+0x64>)
 800184c:	2209      	movs	r2, #9
 800184e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_CAN1_Init+0x64>)
 800185e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001862:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001866:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800186a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <MX_CAN1_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <MX_CAN1_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_CAN1_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001892:	f002 fbfb 	bl	800408c <HAL_CAN_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800189c:	f000 fe8c 	bl	80025b8 <Error_Handler>
  }

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000340 	.word	0x20000340
 80018a8:	40006400 	.word	0x40006400

080018ac <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_CAN2_Init+0x64>)
 80018b2:	4a18      	ldr	r2, [pc, #96]	; (8001914 <MX_CAN2_Init+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <MX_CAN2_Init+0x64>)
 80018b8:	2209      	movs	r2, #9
 80018ba:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_CAN2_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_CAN2_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_CAN2_Init+0x64>)
 80018ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018ce:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_CAN2_Init+0x64>)
 80018d2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80018d6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <MX_CAN2_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_CAN2_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <MX_CAN2_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_CAN2_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <MX_CAN2_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_CAN2_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_CAN2_Init+0x64>)
 80018fe:	f002 fbc5 	bl	800408c <HAL_CAN_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001908:	f000 fe56 	bl	80025b8 <Error_Handler>
  }

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000318 	.word	0x20000318
 8001914:	40006800 	.word	0x40006800

08001918 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a4a      	ldr	r2, [pc, #296]	; (8001a60 <HAL_CAN_MspInit+0x148>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d13d      	bne.n	80019b6 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	4a48      	ldr	r2, [pc, #288]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 8001942:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d10d      	bne.n	8001968 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	4b45      	ldr	r3, [pc, #276]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	4a44      	ldr	r2, [pc, #272]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a3d      	ldr	r2, [pc, #244]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001984:	2303      	movs	r3, #3
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001994:	2309      	movs	r3, #9
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	4833      	ldr	r0, [pc, #204]	; (8001a6c <HAL_CAN_MspInit+0x154>)
 80019a0:	f003 fd26 	bl	80053f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	2014      	movs	r0, #20
 80019aa:	f003 f95e 	bl	8004c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019ae:	2014      	movs	r0, #20
 80019b0:	f003 f977 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80019b4:	e04f      	b.n	8001a56 <HAL_CAN_MspInit+0x13e>
  else if(canHandle->Instance==CAN2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2d      	ldr	r2, [pc, #180]	; (8001a70 <HAL_CAN_MspInit+0x158>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d14a      	bne.n	8001a56 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	4a27      	ldr	r2, [pc, #156]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 80019ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019ce:	6413      	str	r3, [r2, #64]	; 0x40
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 80019e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d10d      	bne.n	8001a0a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 80019f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001a26:	2360      	movs	r3, #96	; 0x60
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001a36:	2309      	movs	r3, #9
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <HAL_CAN_MspInit+0x15c>)
 8001a42:	f003 fcd5 	bl	80053f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2041      	movs	r0, #65	; 0x41
 8001a4c:	f003 f90d 	bl	8004c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001a50:	2041      	movs	r0, #65	; 0x41
 8001a52:	f003 f926 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3730      	adds	r7, #48	; 0x30
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40006400 	.word	0x40006400
 8001a64:	20000274 	.word	0x20000274
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40006800 	.word	0x40006800
 8001a74:	40020400 	.word	0x40020400

08001a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_DMA_Init+0x3c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <MX_DMA_Init+0x3c>)
 8001a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_DMA_Init+0x3c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	200c      	movs	r0, #12
 8001aa0:	f003 f8e3 	bl	8004c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001aa4:	200c      	movs	r0, #12
 8001aa6:	f003 f8fc 	bl	8004ca2 <HAL_NVIC_EnableIRQ>

}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <ENCODER_Init>:
CAN_FilterTypeDef canfil_2;
uint8_t incoming[8];
CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderLeft.hcan = &hcan1;
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <ENCODER_Init+0xc0>)
 8001abe:	4a2f      	ldr	r2, [pc, #188]	; (8001b7c <ENCODER_Init+0xc4>)
 8001ac0:	601a      	str	r2, [r3, #0]
	encoderRight.hcan = &hcan2;
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <ENCODER_Init+0xc8>)
 8001ac4:	4a2f      	ldr	r2, [pc, #188]	; (8001b84 <ENCODER_Init+0xcc>)
 8001ac6:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderLeft, ENC_ADDR_LEFT);
 8001ac8:	2102      	movs	r1, #2
 8001aca:	482b      	ldr	r0, [pc, #172]	; (8001b78 <ENCODER_Init+0xc0>)
 8001acc:	f000 f893 	bl	8001bf6 <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderRight, ENC_ADDR_RIGHT);
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	482b      	ldr	r0, [pc, #172]	; (8001b80 <ENCODER_Init+0xc8>)
 8001ad4:	f000 f88f 	bl	8001bf6 <ENCODER_Set_TxHeader>
	 
	//Filter Config - FIFO1 is assigned to hcan1_right and FIFO1 is assigned to hcan2_left
	canfil_1.FilterBank = 0;
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <ENCODER_Init+0xd0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	615a      	str	r2, [r3, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <ENCODER_Init+0xd0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <ENCODER_Init+0xd0>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	61da      	str	r2, [r3, #28]
	canfil_1.FilterIdHigh = 0x0000;
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <ENCODER_Init+0xd0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
	canfil_1.FilterIdLow = 0x0000;
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <ENCODER_Init+0xd0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <ENCODER_Init+0xd0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <ENCODER_Init+0xd0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <ENCODER_Init+0xd0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
	canfil_1.FilterActivation = ENABLE;
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <ENCODER_Init+0xd0>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	621a      	str	r2, [r3, #32]
	canfil_1.SlaveStartFilterBank = 14;
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <ENCODER_Init+0xd0>)
 8001b10:	220e      	movs	r2, #14
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24

	
	canfil_2.FilterBank = 14;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <ENCODER_Init+0xd4>)
 8001b16:	220e      	movs	r2, #14
 8001b18:	615a      	str	r2, [r3, #20]
	canfil_2.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <ENCODER_Init+0xd4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
	canfil_2.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <ENCODER_Init+0xd4>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	61da      	str	r2, [r3, #28]
	canfil_2.FilterIdHigh = 0x0000;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <ENCODER_Init+0xd4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
	canfil_2.FilterIdLow = 0x0000;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <ENCODER_Init+0xd4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
	canfil_2.FilterMaskIdHigh = 0x0000;
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <ENCODER_Init+0xd4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
	canfil_2.FilterMaskIdLow = 0x0000;
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <ENCODER_Init+0xd4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
	canfil_2.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <ENCODER_Init+0xd4>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	611a      	str	r2, [r3, #16]
	canfil_2.FilterActivation = ENABLE;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <ENCODER_Init+0xd4>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	621a      	str	r2, [r3, #32]
	canfil_2.SlaveStartFilterBank = 14;
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <ENCODER_Init+0xd4>)
 8001b4c:	220e      	movs	r2, #14
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK )	return Error_Handler();;
 8001b50:	490d      	ldr	r1, [pc, #52]	; (8001b88 <ENCODER_Init+0xd0>)
 8001b52:	480a      	ldr	r0, [pc, #40]	; (8001b7c <ENCODER_Init+0xc4>)
 8001b54:	f002 fb96 	bl	8004284 <HAL_CAN_ConfigFilter>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <ENCODER_Init+0xac>
 8001b5e:	f000 fd2b 	bl	80025b8 <Error_Handler>
 8001b62:	e008      	b.n	8001b76 <ENCODER_Init+0xbe>
	if(HAL_CAN_ConfigFilter(&hcan2, &canfil_2) != HAL_OK )	return Error_Handler();;
 8001b64:	4909      	ldr	r1, [pc, #36]	; (8001b8c <ENCODER_Init+0xd4>)
 8001b66:	4807      	ldr	r0, [pc, #28]	; (8001b84 <ENCODER_Init+0xcc>)
 8001b68:	f002 fb8c 	bl	8004284 <HAL_CAN_ConfigFilter>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <ENCODER_Init+0xbe>
 8001b72:	f000 fd21 	bl	80025b8 <Error_Handler>
}
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000390 	.word	0x20000390
 8001b7c:	20000340 	.word	0x20000340
 8001b80:	200003e8 	.word	0x200003e8
 8001b84:	20000318 	.word	0x20000318
 8001b88:	20000454 	.word	0x20000454
 8001b8c:	20000368 	.word	0x20000368

08001b90 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	785a      	ldrb	r2, [r3, #1]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	789a      	ldrb	r2, [r3, #2]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	78da      	ldrb	r2, [r3, #3]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	791a      	ldrb	r2, [r3, #4]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	795a      	ldrb	r2, [r3, #5]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	799a      	ldrb	r2, [r3, #6]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	79da      	ldrb	r2, [r3, #7]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2204      	movs	r2, #4
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	4b82      	ldr	r3, [pc, #520]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a81      	ldr	r2, [pc, #516]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001c4c:	f043 0310 	orr.w	r3, r3, #16
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b7f      	ldr	r3, [pc, #508]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a7a      	ldr	r2, [pc, #488]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b74      	ldr	r3, [pc, #464]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a73      	ldr	r2, [pc, #460]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a6c      	ldr	r2, [pc, #432]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b66      	ldr	r3, [pc, #408]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a65      	ldr	r2, [pc, #404]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	4b5f      	ldr	r3, [pc, #380]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a5e      	ldr	r2, [pc, #376]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <MX_GPIO_Init+0x224>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001cea:	2200      	movs	r2, #0
 8001cec:	213f      	movs	r1, #63	; 0x3f
 8001cee:	4859      	ldr	r0, [pc, #356]	; (8001e54 <MX_GPIO_Init+0x228>)
 8001cf0:	f003 fd42 	bl	8005778 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2110      	movs	r1, #16
 8001cf8:	4857      	ldr	r0, [pc, #348]	; (8001e58 <MX_GPIO_Init+0x22c>)
 8001cfa:	f003 fd3d 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001cfe:	2200      	movs	r2, #0
 8001d00:	219b      	movs	r1, #155	; 0x9b
 8001d02:	4856      	ldr	r0, [pc, #344]	; (8001e5c <MX_GPIO_Init+0x230>)
 8001d04:	f003 fd38 	bl	8005778 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001d0e:	4854      	ldr	r0, [pc, #336]	; (8001e60 <MX_GPIO_Init+0x234>)
 8001d10:	f003 fd32 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001d14:	2200      	movs	r2, #0
 8001d16:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001d1a:	4852      	ldr	r0, [pc, #328]	; (8001e64 <MX_GPIO_Init+0x238>)
 8001d1c:	f003 fd2c 	bl	8005778 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001d20:	2307      	movs	r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	484b      	ldr	r0, [pc, #300]	; (8001e60 <MX_GPIO_Init+0x234>)
 8001d34:	f003 fb5c 	bl	80053f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001d38:	f248 1378 	movw	r3, #33144	; 0x8178
 8001d3c:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4844      	ldr	r0, [pc, #272]	; (8001e60 <MX_GPIO_Init+0x234>)
 8001d4e:	f003 fb4f 	bl	80053f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001d52:	233f      	movs	r3, #63	; 0x3f
 8001d54:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	4619      	mov	r1, r3
 8001d68:	483a      	ldr	r0, [pc, #232]	; (8001e54 <MX_GPIO_Init+0x228>)
 8001d6a:	f003 fb41 	bl	80053f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001d6e:	2310      	movs	r3, #16
 8001d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4834      	ldr	r0, [pc, #208]	; (8001e58 <MX_GPIO_Init+0x22c>)
 8001d86:	f003 fb33 	bl	80053f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <MX_GPIO_Init+0x23c>)
 8001d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	482e      	ldr	r0, [pc, #184]	; (8001e58 <MX_GPIO_Init+0x22c>)
 8001d9e:	f003 fb27 	bl	80053f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001da2:	239b      	movs	r3, #155	; 0x9b
 8001da4:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4828      	ldr	r0, [pc, #160]	; (8001e5c <MX_GPIO_Init+0x230>)
 8001dba:	f003 fb19 	bl	80053f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001dbe:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4822      	ldr	r0, [pc, #136]	; (8001e60 <MX_GPIO_Init+0x234>)
 8001dd8:	f003 fb0a 	bl	80053f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001ddc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dee:	2305      	movs	r3, #5
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4818      	ldr	r0, [pc, #96]	; (8001e5c <MX_GPIO_Init+0x230>)
 8001dfa:	f003 faf9 	bl	80053f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001dfe:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001e02:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	4813      	ldr	r0, [pc, #76]	; (8001e64 <MX_GPIO_Init+0x238>)
 8001e18:	f003 faea 	bl	80053f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480c      	ldr	r0, [pc, #48]	; (8001e64 <MX_GPIO_Init+0x238>)
 8001e32:	f003 fadd 	bl	80053f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2017      	movs	r0, #23
 8001e3c:	f002 ff15 	bl	8004c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e40:	2017      	movs	r0, #23
 8001e42:	f002 ff2e 	bl	8004ca2 <HAL_NVIC_EnableIRQ>

}
 8001e46:	bf00      	nop
 8001e48:	3730      	adds	r7, #48	; 0x30
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020000 	.word	0x40020000
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40020c00 	.word	0x40020c00
 8001e68:	10210000 	.word	0x10210000

08001e6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <MX_I2C1_Init+0x78>)
 8001e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <MX_I2C1_Init+0x7c>)
 8001e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001eaa:	f003 fc97 	bl	80057dc <HAL_I2C_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001eb4:	f000 fb80 	bl	80025b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001ebc:	f004 fc4d 	bl	800675a <HAL_I2CEx_ConfigAnalogFilter>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001ec6:	f000 fb77 	bl	80025b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <MX_I2C1_Init+0x74>)
 8001ece:	f004 fc80 	bl	80067d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001ed8:	f000 fb6e 	bl	80025b8 <Error_Handler>
  }

}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000047c 	.word	0x2000047c
 8001ee4:	40005400 	.word	0x40005400
 8001ee8:	00061a80 	.word	0x00061a80

08001eec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_I2C_MspInit+0x84>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d12c      	bne.n	8001f68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001f2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f30:	2312      	movs	r3, #18
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	480c      	ldr	r0, [pc, #48]	; (8001f78 <HAL_I2C_MspInit+0x8c>)
 8001f48:	f003 fa52 	bl	80053f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40005400 	.word	0x40005400
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020400 	.word	0x40020400

08001f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f82:	f001 ffed 	bl	8003f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f86:	f000 f98f 	bl	80022a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001f8a:	f005 f8e7 	bl	800715c <HAL_RCC_GetHCLKFreq>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4aa4      	ldr	r2, [pc, #656]	; (8002224 <main+0x2a8>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	099b      	lsrs	r3, r3, #6
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 fe90 	bl	8004cbe <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f9e:	2004      	movs	r0, #4
 8001fa0:	f002 fe9a 	bl	8004cd8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fac:	f002 fe5d 	bl	8004c6a <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fb0:	f7ff fe3c 	bl	8001c2c <MX_GPIO_Init>
  MX_DMA_Init();
 8001fb4:	f7ff fd60 	bl	8001a78 <MX_DMA_Init>
  MX_I2C1_Init();
 8001fb8:	f7ff ff58 	bl	8001e6c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001fbc:	f000 ffb0 	bl	8002f20 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001fc0:	f001 f84e 	bl	8003060 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001fc4:	f001 faf8 	bl	80035b8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001fc8:	f001 f8c4 	bl	8003154 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001fcc:	f001 f944 	bl	8003258 <MX_TIM8_Init>
  MX_CAN1_Init();
 8001fd0:	f7ff fc36 	bl	8001840 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001fd4:	f7ff fc6a 	bl	80018ac <MX_CAN2_Init>
  MX_SPI1_Init();
 8001fd8:	f000 fe90 	bl	8002cfc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //Initialize hardware communication
  joystick_Init();
 8001fdc:	f001 fb90 	bl	8003700 <joystick_Init>
  ADC_Init();
 8001fe0:	f7ff fa10 	bl	8001404 <ADC_Init>
  ADC_DataRequest();
 8001fe4:	f7ff fa50 	bl	8001488 <ADC_DataRequest>
  ENCODER_Init();
 8001fe8:	f7ff fd66 	bl	8001ab8 <ENCODER_Init>
//  DWT_Init();
  while(MPU6050_Init(&hi2c1)==1);
 8001fec:	bf00      	nop
 8001fee:	488e      	ldr	r0, [pc, #568]	; (8002228 <main+0x2ac>)
 8001ff0:	f000 fae9 	bl	80025c6 <MPU6050_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d0f9      	beq.n	8001fee <main+0x72>
  HAL_Delay(100);
 8001ffa:	2064      	movs	r0, #100	; 0x64
 8001ffc:	f002 f822 	bl	8004044 <HAL_Delay>

  //Start base wheel pwm pin
  wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel], base_angSpeedLevel[base_speedLevel]);
 8002000:	4b8a      	ldr	r3, [pc, #552]	; (800222c <main+0x2b0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <main+0x2b4>)
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	4b87      	ldr	r3, [pc, #540]	; (800222c <main+0x2b0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a88      	ldr	r2, [pc, #544]	; (8002234 <main+0x2b8>)
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	ed93 7a00 	vldr	s14, [r3]
 800201c:	eef0 0a47 	vmov.f32	s1, s14
 8002020:	eeb0 0a67 	vmov.f32	s0, s15
 8002024:	4884      	ldr	r0, [pc, #528]	; (8002238 <main+0x2bc>)
 8002026:	f001 fd11 	bl	8003a4c <wheelSpeedControl_Init>
  HAL_TIM_Base_Start(&MOTOR_TIM);
 800202a:	4884      	ldr	r0, [pc, #528]	; (800223c <main+0x2c0>)
 800202c:	f005 fd15 	bl	8007a5a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8002030:	2100      	movs	r1, #0
 8002032:	4882      	ldr	r0, [pc, #520]	; (800223c <main+0x2c0>)
 8002034:	f005 fd6a 	bl	8007b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8002038:	2104      	movs	r1, #4
 800203a:	4880      	ldr	r0, [pc, #512]	; (800223c <main+0x2c0>)
 800203c:	f005 fd66 	bl	8007b0c <HAL_TIM_PWM_Start>
  MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8002040:	4b7e      	ldr	r3, [pc, #504]	; (800223c <main+0x2c0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002048:	635a      	str	r2, [r3, #52]	; 0x34
  MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 800204a:	4b7c      	ldr	r3, [pc, #496]	; (800223c <main+0x2c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002052:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(100);
 8002054:	2064      	movs	r0, #100	; 0x64
 8002056:	f001 fff5 	bl	8004044 <HAL_Delay>

  //Initialize rear and back motor
  bd25l_Init(&rearMotor);
 800205a:	4879      	ldr	r0, [pc, #484]	; (8002240 <main+0x2c4>)
 800205c:	f7ff fa40 	bl	80014e0 <bd25l_Init>
  bd25l_Init(&backMotor);
 8002060:	4878      	ldr	r0, [pc, #480]	; (8002244 <main+0x2c8>)
 8002062:	f7ff fa3d 	bl	80014e0 <bd25l_Init>
  runMotor(&rearMotor, 0);
 8002066:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8002248 <main+0x2cc>
 800206a:	4875      	ldr	r0, [pc, #468]	; (8002240 <main+0x2c4>)
 800206c:	f7ff fb38 	bl	80016e0 <runMotor>
  runMotor(&backMotor, 0);
 8002070:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8002248 <main+0x2cc>
 8002074:	4873      	ldr	r0, [pc, #460]	; (8002244 <main+0x2c8>)
 8002076:	f7ff fb33 	bl	80016e0 <runMotor>
  emBrakeMotor(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f7ff fa52 	bl	8001524 <emBrakeMotor>

  //Initialize hub motor provdided joystick control
  hubMotor_Init();
 8002080:	f7ff f8f8 	bl	8001274 <hubMotor_Init>
  wheelSpeedControl_Init(&climbWheelSpeed, climb_linSpeedLevel[climb_speedLevel], climb_angSpeedLevel[climb_speedLevel]);
 8002084:	4b71      	ldr	r3, [pc, #452]	; (800224c <main+0x2d0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a71      	ldr	r2, [pc, #452]	; (8002250 <main+0x2d4>)
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	4b6e      	ldr	r3, [pc, #440]	; (800224c <main+0x2d0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6f      	ldr	r2, [pc, #444]	; (8002254 <main+0x2d8>)
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	ed93 7a00 	vldr	s14, [r3]
 80020a0:	eef0 0a47 	vmov.f32	s1, s14
 80020a4:	eeb0 0a67 	vmov.f32	s0, s15
 80020a8:	486b      	ldr	r0, [pc, #428]	; (8002258 <main+0x2dc>)
 80020aa:	f001 fccf 	bl	8003a4c <wheelSpeedControl_Init>

  //Initialize balance controller
  // Prepare PID controller for operation
  balance_pid = pid_create(&balance_ctrl, &climbUp_input, &climbUp_output, &climbUp_setpoint, climbUp_kp, climbUp_ki, climbUp_kd);
 80020ae:	4b6b      	ldr	r3, [pc, #428]	; (800225c <main+0x2e0>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <main+0x2e4>)
 80020b6:	ed93 7a00 	vldr	s14, [r3]
 80020ba:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <main+0x2e8>)
 80020bc:	edd3 6a00 	vldr	s13, [r3]
 80020c0:	eeb0 1a66 	vmov.f32	s2, s13
 80020c4:	eef0 0a47 	vmov.f32	s1, s14
 80020c8:	eeb0 0a67 	vmov.f32	s0, s15
 80020cc:	4b66      	ldr	r3, [pc, #408]	; (8002268 <main+0x2ec>)
 80020ce:	4a67      	ldr	r2, [pc, #412]	; (800226c <main+0x2f0>)
 80020d0:	4967      	ldr	r1, [pc, #412]	; (8002270 <main+0x2f4>)
 80020d2:	4868      	ldr	r0, [pc, #416]	; (8002274 <main+0x2f8>)
 80020d4:	f7fe ff0c 	bl	8000ef0 <pid_create>
 80020d8:	4603      	mov	r3, r0
 80020da:	4a67      	ldr	r2, [pc, #412]	; (8002278 <main+0x2fc>)
 80020dc:	6013      	str	r3, [r2, #0]
  // Set controler output limits from 0 to 200
  pid_limits(balance_pid, -30, 30);
 80020de:	4b66      	ldr	r3, [pc, #408]	; (8002278 <main+0x2fc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80020e6:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe ffe4 	bl	80010b8 <pid_limits>
  //Sample time is 1ms
  pid_sample(balance_pid, 1);
 80020f0:	4b61      	ldr	r3, [pc, #388]	; (8002278 <main+0x2fc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2101      	movs	r1, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe ffaa 	bl	8001050 <pid_sample>
  // Allow PID to compute and change output
  pid_auto(balance_pid);
 80020fc:	4b5e      	ldr	r3, [pc, #376]	; (8002278 <main+0x2fc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f83e 	bl	8001182 <pid_auto>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t prev_time = HAL_GetTick();
 8002106:	f001 ff91 	bl	800402c <HAL_GetTick>
 800210a:	6078      	str	r0, [r7, #4]
//      runMotor(&backMotor, 100, 1);

//      runMotor(&backMotor, speed++, 1);

    //Loop should execute once every 1 tick
    if(HAL_GetTick() - prev_time >= 1)
 800210c:	f001 ff8e 	bl	800402c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4293      	cmp	r3, r2
 8002116:	d0f9      	beq.n	800210c <main+0x190>
    {
	ADC_DataRequest();
 8002118:	f7ff f9b6 	bl	8001488 <ADC_DataRequest>

	//Get kamlan filtered angle from MPU6050
	MPU6050_Read_All(&hi2c1, &MPU6050);
 800211c:	4957      	ldr	r1, [pc, #348]	; (800227c <main+0x300>)
 800211e:	4842      	ldr	r0, [pc, #264]	; (8002228 <main+0x2ac>)
 8002120:	f000 faaa 	bl	8002678 <MPU6050_Read_All>


	GPIO_Digital_Filtered_Input(&button1, 30);
 8002124:	211e      	movs	r1, #30
 8002126:	4856      	ldr	r0, [pc, #344]	; (8002280 <main+0x304>)
 8002128:	f7ff fb51 	bl	80017ce <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button2, 30);
 800212c:	211e      	movs	r1, #30
 800212e:	4855      	ldr	r0, [pc, #340]	; (8002284 <main+0x308>)
 8002130:	f7ff fb4d 	bl	80017ce <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button3, 30);
 8002134:	211e      	movs	r1, #30
 8002136:	4854      	ldr	r0, [pc, #336]	; (8002288 <main+0x30c>)
 8002138:	f7ff fb49 	bl	80017ce <GPIO_Digital_Filtered_Input>

	GPIO_Digital_Filtered_Input(&rearLS1, 5);
 800213c:	2105      	movs	r1, #5
 800213e:	4853      	ldr	r0, [pc, #332]	; (800228c <main+0x310>)
 8002140:	f7ff fb45 	bl	80017ce <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8002144:	2105      	movs	r1, #5
 8002146:	4852      	ldr	r0, [pc, #328]	; (8002290 <main+0x314>)
 8002148:	f7ff fb41 	bl	80017ce <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS1, 5);
 800214c:	2105      	movs	r1, #5
 800214e:	4851      	ldr	r0, [pc, #324]	; (8002294 <main+0x318>)
 8002150:	f7ff fb3d 	bl	80017ce <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS2, 5);
 8002154:	2105      	movs	r1, #5
 8002156:	4850      	ldr	r0, [pc, #320]	; (8002298 <main+0x31c>)
 8002158:	f7ff fb39 	bl	80017ce <GPIO_Digital_Filtered_Input>

//---------------------------------------------------------------------------------------------------
//3-button control climbing mechanism
//---------------------------------------------------------------------------------------------------
	if (button1.state == GPIO_PIN_SET && button3.state == GPIO_PIN_RESET)
 800215c:	4b48      	ldr	r3, [pc, #288]	; (8002280 <main+0x304>)
 800215e:	7a1b      	ldrb	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d107      	bne.n	8002174 <main+0x1f8>
 8002164:	4b48      	ldr	r3, [pc, #288]	; (8002288 <main+0x30c>)
 8002166:	7a1b      	ldrb	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <main+0x1f8>
	    speed[FRONT_INDEX] = 30;
 800216c:	4b4b      	ldr	r3, [pc, #300]	; (800229c <main+0x320>)
 800216e:	4a4c      	ldr	r2, [pc, #304]	; (80022a0 <main+0x324>)
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e013      	b.n	800219c <main+0x220>
	else if(button1.state == GPIO_PIN_SET && button3.state == GPIO_PIN_SET)
 8002174:	4b42      	ldr	r3, [pc, #264]	; (8002280 <main+0x304>)
 8002176:	7a1b      	ldrb	r3, [r3, #8]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <main+0x210>
 800217c:	4b42      	ldr	r3, [pc, #264]	; (8002288 <main+0x30c>)
 800217e:	7a1b      	ldrb	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d103      	bne.n	800218c <main+0x210>
	    speed[FRONT_INDEX] = -30;
 8002184:	4b45      	ldr	r3, [pc, #276]	; (800229c <main+0x320>)
 8002186:	4a47      	ldr	r2, [pc, #284]	; (80022a4 <main+0x328>)
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e007      	b.n	800219c <main+0x220>
	else if (button1.state == GPIO_PIN_RESET)
 800218c:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <main+0x304>)
 800218e:	7a1b      	ldrb	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d103      	bne.n	800219c <main+0x220>
	    speed[FRONT_INDEX] = 0;
 8002194:	4b41      	ldr	r3, [pc, #260]	; (800229c <main+0x320>)
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

	if(button2.state == GPIO_PIN_SET && button3.state == GPIO_PIN_RESET)
 800219c:	4b39      	ldr	r3, [pc, #228]	; (8002284 <main+0x308>)
 800219e:	7a1b      	ldrb	r3, [r3, #8]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <main+0x238>
 80021a4:	4b38      	ldr	r3, [pc, #224]	; (8002288 <main+0x30c>)
 80021a6:	7a1b      	ldrb	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d103      	bne.n	80021b4 <main+0x238>
	    speed[BACK_INDEX] = 30;
 80021ac:	4b3b      	ldr	r3, [pc, #236]	; (800229c <main+0x320>)
 80021ae:	4a3c      	ldr	r2, [pc, #240]	; (80022a0 <main+0x324>)
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	e013      	b.n	80021dc <main+0x260>
	else if(button2.state == GPIO_PIN_SET && button3.state == GPIO_PIN_SET)
 80021b4:	4b33      	ldr	r3, [pc, #204]	; (8002284 <main+0x308>)
 80021b6:	7a1b      	ldrb	r3, [r3, #8]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <main+0x250>
 80021bc:	4b32      	ldr	r3, [pc, #200]	; (8002288 <main+0x30c>)
 80021be:	7a1b      	ldrb	r3, [r3, #8]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d103      	bne.n	80021cc <main+0x250>
	    speed[BACK_INDEX] = -30;
 80021c4:	4b35      	ldr	r3, [pc, #212]	; (800229c <main+0x320>)
 80021c6:	4a37      	ldr	r2, [pc, #220]	; (80022a4 <main+0x328>)
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	e007      	b.n	80021dc <main+0x260>
	else if (button2.state == GPIO_PIN_RESET)
 80021cc:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <main+0x308>)
 80021ce:	7a1b      	ldrb	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d103      	bne.n	80021dc <main+0x260>
	    speed[BACK_INDEX] = 0;
 80021d4:	4b31      	ldr	r3, [pc, #196]	; (800229c <main+0x320>)
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	605a      	str	r2, [r3, #4]
//
	runMotor(&rearMotor, speed[FRONT_INDEX]);
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <main+0x320>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	eeb0 0a67 	vmov.f32	s0, s15
 80021e6:	4816      	ldr	r0, [pc, #88]	; (8002240 <main+0x2c4>)
 80021e8:	f7ff fa7a 	bl	80016e0 <runMotor>
	runMotor(&backMotor, speed[BACK_INDEX]);
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <main+0x320>)
 80021ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80021f2:	eeb0 0a67 	vmov.f32	s0, s15
 80021f6:	4813      	ldr	r0, [pc, #76]	; (8002244 <main+0x2c8>)
 80021f8:	f7ff fa72 	bl	80016e0 <runMotor>
//	else
//		emBrakeMotor(1);
//	runMotor(&rearMotor, speed[FRONT_INDEX]);
//	runMotor(&backMotor, speed[BACK_INDEX]);

	wheel_Control(&climbWheelSpeed);
 80021fc:	4816      	ldr	r0, [pc, #88]	; (8002258 <main+0x2dc>)
 80021fe:	f001 fc4f 	bl	8003aa0 <wheel_Control>
	send_HubMotor(climbWheelSpeed.cur_l, climbWheelSpeed.cur_r);
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <main+0x2dc>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <main+0x2dc>)
 800220a:	ed93 7a01 	vldr	s14, [r3, #4]
 800220e:	eef0 0a47 	vmov.f32	s1, s14
 8002212:	eeb0 0a67 	vmov.f32	s0, s15
 8002216:	f7ff f845 	bl	80012a4 <send_HubMotor>
//
//	//Climbing phase start



	prev_time = HAL_GetTick();
 800221a:	f001 ff07 	bl	800402c <HAL_GetTick>
 800221e:	6078      	str	r0, [r7, #4]
    if(HAL_GetTick() - prev_time >= 1)
 8002220:	e774      	b.n	800210c <main+0x190>
 8002222:	bf00      	nop
 8002224:	10624dd3 	.word	0x10624dd3
 8002228:	2000047c 	.word	0x2000047c
 800222c:	20000098 	.word	0x20000098
 8002230:	0800bbb8 	.word	0x0800bbb8
 8002234:	0800bbc4 	.word	0x0800bbc4
 8002238:	20000068 	.word	0x20000068
 800223c:	200005ec 	.word	0x200005ec
 8002240:	20000000 	.word	0x20000000
 8002244:	20000034 	.word	0x20000034
 8002248:	00000000 	.word	0x00000000
 800224c:	20000284 	.word	0x20000284
 8002250:	0800bbd0 	.word	0x0800bbd0
 8002254:	0800bbdc 	.word	0x0800bbdc
 8002258:	200000a0 	.word	0x200000a0
 800225c:	20000140 	.word	0x20000140
 8002260:	20000144 	.word	0x20000144
 8002264:	20000148 	.word	0x20000148
 8002268:	20000290 	.word	0x20000290
 800226c:	2000028c 	.word	0x2000028c
 8002270:	20000288 	.word	0x20000288
 8002274:	20000558 	.word	0x20000558
 8002278:	20000540 	.word	0x20000540
 800227c:	200004e0 	.word	0x200004e0
 8002280:	20000110 	.word	0x20000110
 8002284:	20000120 	.word	0x20000120
 8002288:	20000130 	.word	0x20000130
 800228c:	200000d0 	.word	0x200000d0
 8002290:	200000e0 	.word	0x200000e0
 8002294:	200000f0 	.word	0x200000f0
 8002298:	20000100 	.word	0x20000100
 800229c:	2000027c 	.word	0x2000027c
 80022a0:	41f00000 	.word	0x41f00000
 80022a4:	c1f00000 	.word	0xc1f00000

080022a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b094      	sub	sp, #80	; 0x50
 80022ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ae:	f107 0320 	add.w	r3, r7, #32
 80022b2:	2230      	movs	r2, #48	; 0x30
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f007 fa14 	bl	80096e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <SystemClock_Config+0xd8>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <SystemClock_Config+0xd8>)
 80022d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022da:	6413      	str	r3, [r2, #64]	; 0x40
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <SystemClock_Config+0xd8>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e8:	2300      	movs	r3, #0
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <SystemClock_Config+0xdc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a24      	ldr	r2, [pc, #144]	; (8002384 <SystemClock_Config+0xdc>)
 80022f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <SystemClock_Config+0xdc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002304:	2301      	movs	r3, #1
 8002306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800230e:	2302      	movs	r3, #2
 8002310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002312:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002318:	2308      	movs	r3, #8
 800231a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800231c:	23b4      	movs	r3, #180	; 0xb4
 800231e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002320:	2302      	movs	r3, #2
 8002322:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002324:	2304      	movs	r3, #4
 8002326:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002328:	f107 0320 	add.w	r3, r7, #32
 800232c:	4618      	mov	r0, r3
 800232e:	f004 fadf 	bl	80068f0 <HAL_RCC_OscConfig>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002338:	f000 f93e 	bl	80025b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800233c:	f004 fa88 	bl	8006850 <HAL_PWREx_EnableOverDrive>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002346:	f000 f937 	bl	80025b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234a:	230f      	movs	r3, #15
 800234c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234e:	2302      	movs	r3, #2
 8002350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002356:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800235a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800235c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002360:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	2105      	movs	r1, #5
 8002368:	4618      	mov	r0, r3
 800236a:	f004 fd31 	bl	8006dd0 <HAL_RCC_ClockConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002374:	f000 f920 	bl	80025b8 <Error_Handler>
  }
}
 8002378:	bf00      	nop
 800237a:	3750      	adds	r7, #80	; 0x50
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000

08002388 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	2b80      	cmp	r3, #128	; 0x80
 8002396:	d11c      	bne.n	80023d2 <HAL_GPIO_EXTI_Callback+0x4a>
    case AD_BUSY_Pin:{
      if (HAL_GetTick()-prev_adc_time > 1){
 8002398:	f001 fe48 	bl	800402c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_GPIO_EXTI_Callback+0x58>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d916      	bls.n	80023d6 <HAL_GPIO_EXTI_Callback+0x4e>
	  ADC_Read(&adc_rawData[0]);
 80023a8:	480e      	ldr	r0, [pc, #56]	; (80023e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80023aa:	f7ff f87d 	bl	80014a8 <ADC_Read>
	  tempJoyRawDataX = adc_rawData[0];
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80023b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_GPIO_EXTI_Callback+0x60>)
 80023b8:	601a      	str	r2, [r3, #0]
	  tempJoyRawDataY = adc_rawData[1];
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80023bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_GPIO_EXTI_Callback+0x64>)
 80023c4:	601a      	str	r2, [r3, #0]
	  prev_adc_time = HAL_GetTick();
 80023c6:	f001 fe31 	bl	800402c <HAL_GetTick>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_GPIO_EXTI_Callback+0x58>)
 80023ce:	6013      	str	r3, [r2, #0]
      }
    }

      break;
 80023d0:	e001      	b.n	80023d6 <HAL_GPIO_EXTI_Callback+0x4e>
    default:
      break;
 80023d2:	bf00      	nop
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_EXTI_Callback+0x50>
      break;
 80023d6:	bf00      	nop
  }
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000278 	.word	0x20000278
 80023e4:	20000548 	.word	0x20000548
 80023e8:	200005a4 	.word	0x200005a4
 80023ec:	200004d0 	.word	0x200004d0

080023f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3){
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a47      	ldr	r2, [pc, #284]	; (800251c <HAL_UART_RxCpltCallback+0x12c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	f040 8085 	bne.w	800250e <HAL_UART_RxCpltCallback+0x11e>
		//Checksum, make sure that response is correct
		  uint16_t sum = (uint16_t)receive_buf[0] + (uint16_t)receive_buf[1] + (uint16_t)receive_buf[2] + (uint16_t)receive_buf[3]
 8002404:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b29a      	uxth	r2, r3
 800240a:	4b45      	ldr	r3, [pc, #276]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 800240c:	785b      	ldrb	r3, [r3, #1]
 800240e:	b29b      	uxth	r3, r3
 8002410:	4413      	add	r3, r2
 8002412:	b29a      	uxth	r2, r3
 8002414:	4b42      	ldr	r3, [pc, #264]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 8002416:	789b      	ldrb	r3, [r3, #2]
 8002418:	b29b      	uxth	r3, r3
 800241a:	4413      	add	r3, r2
 800241c:	b29a      	uxth	r2, r3
 800241e:	4b40      	ldr	r3, [pc, #256]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 8002420:	78db      	ldrb	r3, [r3, #3]
 8002422:	b29b      	uxth	r3, r3
 8002424:	4413      	add	r3, r2
 8002426:	b29a      	uxth	r2, r3
		  		+ (uint16_t)receive_buf[4] + (uint16_t)receive_buf[5] + (uint16_t)receive_buf[6]
 8002428:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 800242a:	791b      	ldrb	r3, [r3, #4]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4413      	add	r3, r2
 8002430:	b29a      	uxth	r2, r3
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 8002434:	795b      	ldrb	r3, [r3, #5]
 8002436:	b29b      	uxth	r3, r3
 8002438:	4413      	add	r3, r2
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 800243e:	799b      	ldrb	r3, [r3, #6]
 8002440:	b29b      	uxth	r3, r3
 8002442:	4413      	add	r3, r2
 8002444:	b29a      	uxth	r2, r3
		  		+ (uint16_t)receive_buf[7] + (uint16_t)receive_buf[8] + (uint16_t)receive_buf[9]
 8002446:	4b36      	ldr	r3, [pc, #216]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 8002448:	79db      	ldrb	r3, [r3, #7]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4413      	add	r3, r2
 800244e:	b29a      	uxth	r2, r3
 8002450:	4b33      	ldr	r3, [pc, #204]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 8002452:	7a1b      	ldrb	r3, [r3, #8]
 8002454:	b29b      	uxth	r3, r3
 8002456:	4413      	add	r3, r2
 8002458:	b29a      	uxth	r2, r3
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 800245c:	7a5b      	ldrb	r3, [r3, #9]
 800245e:	b29b      	uxth	r3, r3
 8002460:	4413      	add	r3, r2
 8002462:	b29a      	uxth	r2, r3
		  		+ (uint16_t)receive_buf[10] + (uint16_t)receive_buf[11] + (uint16_t)receive_buf[12]
 8002464:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 8002466:	7a9b      	ldrb	r3, [r3, #10]
 8002468:	b29b      	uxth	r3, r3
 800246a:	4413      	add	r3, r2
 800246c:	b29a      	uxth	r2, r3
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 8002470:	7adb      	ldrb	r3, [r3, #11]
 8002472:	b29b      	uxth	r3, r3
 8002474:	4413      	add	r3, r2
 8002476:	b29a      	uxth	r2, r3
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 800247a:	7b1b      	ldrb	r3, [r3, #12]
 800247c:	b29b      	uxth	r3, r3
 800247e:	4413      	add	r3, r2
 8002480:	b29a      	uxth	r2, r3
		  		+ (uint16_t)receive_buf[13];
 8002482:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 8002484:	7b5b      	ldrb	r3, [r3, #13]
 8002486:	b29b      	uxth	r3, r3
		  uint16_t sum = (uint16_t)receive_buf[0] + (uint16_t)receive_buf[1] + (uint16_t)receive_buf[2] + (uint16_t)receive_buf[3]
 8002488:	4413      	add	r3, r2
 800248a:	81fb      	strh	r3, [r7, #14]
		  if ((uint8_t)sum == receive_buf[14]){
 800248c:	89fb      	ldrh	r3, [r7, #14]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 8002492:	7b9b      	ldrb	r3, [r3, #14]
 8002494:	429a      	cmp	r2, r3
 8002496:	d13a      	bne.n	800250e <HAL_UART_RxCpltCallback+0x11e>
		//      && receive_buf[4] == 0x00
			  //Encoder Feedback
		      if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4 && receive_buf[3] == 0x00 ){
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2baa      	cmp	r3, #170	; 0xaa
 800249e:	d136      	bne.n	800250e <HAL_UART_RxCpltCallback+0x11e>
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 80024a2:	785b      	ldrb	r3, [r3, #1]
 80024a4:	2ba4      	cmp	r3, #164	; 0xa4
 80024a6:	d132      	bne.n	800250e <HAL_UART_RxCpltCallback+0x11e>
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 80024aa:	78db      	ldrb	r3, [r3, #3]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d12e      	bne.n	800250e <HAL_UART_RxCpltCallback+0x11e>
		    	  hub_encoder_feedback.encoder_1 = 	(receive_buf[9] << 24) + (receive_buf[8] << 16) +
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 80024b2:	7a5b      	ldrb	r3, [r3, #9]
 80024b4:	061a      	lsls	r2, r3, #24
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 80024b8:	7a1b      	ldrb	r3, [r3, #8]
 80024ba:	041b      	lsls	r3, r3, #16
 80024bc:	441a      	add	r2, r3
		    	  			      	  	  	  	  	  (receive_buf[7] << 8)+ (receive_buf[6] );
 80024be:	4b18      	ldr	r3, [pc, #96]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 80024c0:	79db      	ldrb	r3, [r3, #7]
 80024c2:	021b      	lsls	r3, r3, #8
		    	  hub_encoder_feedback.encoder_1 = 	(receive_buf[9] << 24) + (receive_buf[8] << 16) +
 80024c4:	4413      	add	r3, r2
		    	  			      	  	  	  	  	  (receive_buf[7] << 8)+ (receive_buf[6] );
 80024c6:	4a16      	ldr	r2, [pc, #88]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 80024c8:	7992      	ldrb	r2, [r2, #6]
 80024ca:	4413      	add	r3, r2
		    	  hub_encoder_feedback.encoder_1 = 	(receive_buf[9] << 24) + (receive_buf[8] << 16) +
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <HAL_UART_RxCpltCallback+0x134>)
 80024ce:	6013      	str	r3, [r2, #0]
		    	  hub_encoder_feedback.encoder_2 = 	(receive_buf[13] << 24) + (receive_buf[12] << 16) +
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 80024d2:	7b5b      	ldrb	r3, [r3, #13]
 80024d4:	061a      	lsls	r2, r3, #24
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 80024d8:	7b1b      	ldrb	r3, [r3, #12]
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	441a      	add	r2, r3
		    	  				      	  	  	  	  (receive_buf[11] << 8) + (receive_buf[10] );
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 80024e0:	7adb      	ldrb	r3, [r3, #11]
 80024e2:	021b      	lsls	r3, r3, #8
		    	  hub_encoder_feedback.encoder_2 = 	(receive_buf[13] << 24) + (receive_buf[12] << 16) +
 80024e4:	4413      	add	r3, r2
		    	  				      	  	  	  	  (receive_buf[11] << 8) + (receive_buf[10] );
 80024e6:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <HAL_UART_RxCpltCallback+0x130>)
 80024e8:	7a92      	ldrb	r2, [r2, #10]
 80024ea:	4413      	add	r3, r2
		    	  hub_encoder_feedback.encoder_2 = 	(receive_buf[13] << 24) + (receive_buf[12] << 16) +
 80024ec:	4a0d      	ldr	r2, [pc, #52]	; (8002524 <HAL_UART_RxCpltCallback+0x134>)
 80024ee:	6053      	str	r3, [r2, #4]
		    	  if(first_encoder_callback){
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_UART_RxCpltCallback+0x138>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_UART_RxCpltCallback+0x11e>
		    		  prev_hub_encoder_feedback.encoder_1 = hub_encoder_feedback.encoder_1;
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_UART_RxCpltCallback+0x134>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0b      	ldr	r2, [pc, #44]	; (800252c <HAL_UART_RxCpltCallback+0x13c>)
 80024fe:	6013      	str	r3, [r2, #0]
		    		  prev_hub_encoder_feedback.encoder_2 = hub_encoder_feedback.encoder_2;
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_UART_RxCpltCallback+0x134>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_UART_RxCpltCallback+0x13c>)
 8002506:	6053      	str	r3, [r2, #4]
		    		  first_encoder_callback = false;
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <HAL_UART_RxCpltCallback+0x138>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
//		      if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4 && receive_buf[3] == 0x83 ){
//				}
		  }
	}

}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40004800 	.word	0x40004800
 8002520:	20000594 	.word	0x20000594
 8002524:	200004d4 	.word	0x200004d4
 8002528:	2000009c 	.word	0x2000009c
 800252c:	2000058c 	.word	0x2000058c

08002530 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	if (hcan == &hcan1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d10d      	bne.n	800255c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, incoming);
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002544:	2100      	movs	r1, #0
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f001 ff7c 	bl	8004444 <HAL_CAN_GetRxMessage>
		if(incoming[1] == ENC_ADDR_LEFT)
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d103      	bne.n	800255c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
			ENCODER_Sort_Incoming(incoming, &encoderLeft);
 8002554:	4906      	ldr	r1, [pc, #24]	; (8002570 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8002556:	4804      	ldr	r0, [pc, #16]	; (8002568 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002558:	f7ff fb1a 	bl	8001b90 <ENCODER_Sort_Incoming>
	}
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000340 	.word	0x20000340
 8002568:	200003e0 	.word	0x200003e0
 800256c:	20000438 	.word	0x20000438
 8002570:	20000390 	.word	0x20000390

08002574 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	if (hcan == &hcan2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d10d      	bne.n	80025a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, incoming);
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8002588:	2101      	movs	r1, #1
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f001 ff5a 	bl	8004444 <HAL_CAN_GetRxMessage>
		if(incoming[1] == ENC_ADDR_RIGHT)
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8002592:	785b      	ldrb	r3, [r3, #1]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d103      	bne.n	80025a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
			ENCODER_Sort_Incoming(incoming, &encoderRight);
 8002598:	4906      	ldr	r1, [pc, #24]	; (80025b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 800259a:	4804      	ldr	r0, [pc, #16]	; (80025ac <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800259c:	f7ff faf8 	bl	8001b90 <ENCODER_Sort_Incoming>
	}
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000318 	.word	0x20000318
 80025ac:	200003e0 	.word	0x200003e0
 80025b0:	20000438 	.word	0x20000438
 80025b4:	200003e8 	.word	0x200003e8

080025b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b088      	sub	sp, #32
 80025ca:	af04      	add	r7, sp, #16
 80025cc:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80025ce:	2364      	movs	r3, #100	; 0x64
 80025d0:	9302      	str	r3, [sp, #8]
 80025d2:	2301      	movs	r3, #1
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	f107 030f 	add.w	r3, r7, #15
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2301      	movs	r3, #1
 80025de:	2275      	movs	r2, #117	; 0x75
 80025e0:	21d0      	movs	r1, #208	; 0xd0
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f003 fb38 	bl	8005c58 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b68      	cmp	r3, #104	; 0x68
 80025ec:	d13d      	bne.n	800266a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80025f2:	2364      	movs	r3, #100	; 0x64
 80025f4:	9302      	str	r3, [sp, #8]
 80025f6:	2301      	movs	r3, #1
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	f107 030e 	add.w	r3, r7, #14
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	226b      	movs	r2, #107	; 0x6b
 8002604:	21d0      	movs	r1, #208	; 0xd0
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f003 fa2c 	bl	8005a64 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800260c:	2307      	movs	r3, #7
 800260e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002610:	2364      	movs	r3, #100	; 0x64
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	2301      	movs	r3, #1
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	f107 030e 	add.w	r3, r7, #14
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2301      	movs	r3, #1
 8002620:	2219      	movs	r2, #25
 8002622:	21d0      	movs	r1, #208	; 0xd0
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f003 fa1d 	bl	8005a64 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800262a:	2300      	movs	r3, #0
 800262c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800262e:	2364      	movs	r3, #100	; 0x64
 8002630:	9302      	str	r3, [sp, #8]
 8002632:	2301      	movs	r3, #1
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	f107 030e 	add.w	r3, r7, #14
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2301      	movs	r3, #1
 800263e:	221c      	movs	r2, #28
 8002640:	21d0      	movs	r1, #208	; 0xd0
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f003 fa0e 	bl	8005a64 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002648:	2300      	movs	r3, #0
 800264a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800264c:	2364      	movs	r3, #100	; 0x64
 800264e:	9302      	str	r3, [sp, #8]
 8002650:	2301      	movs	r3, #1
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	f107 030e 	add.w	r3, r7, #14
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2301      	movs	r3, #1
 800265c:	221b      	movs	r2, #27
 800265e:	21d0      	movs	r1, #208	; 0xd0
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f003 f9ff 	bl	8005a64 <HAL_I2C_Mem_Write>
        return 0;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <MPU6050_Init+0xa6>
    }
    return 1;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	0000      	movs	r0, r0
	...

08002678 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b094      	sub	sp, #80	; 0x50
 800267e:	af04      	add	r7, sp, #16
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002684:	2364      	movs	r3, #100	; 0x64
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	230e      	movs	r3, #14
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	f107 0308 	add.w	r3, r7, #8
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2301      	movs	r3, #1
 8002694:	223b      	movs	r2, #59	; 0x3b
 8002696:	21d0      	movs	r1, #208	; 0xd0
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f003 fadd 	bl	8005c58 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800269e:	7a3b      	ldrb	r3, [r7, #8]
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	b21a      	sxth	r2, r3
 80026a4:	7a7b      	ldrb	r3, [r7, #9]
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80026b0:	7abb      	ldrb	r3, [r7, #10]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	b21a      	sxth	r2, r3
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	4313      	orrs	r3, r2
 80026bc:	b21a      	sxth	r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80026c2:	7b3b      	ldrb	r3, [r7, #12]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	7b7b      	ldrb	r3, [r7, #13]
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	b21a      	sxth	r2, r3
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	b21b      	sxth	r3, r3
 80026de:	4313      	orrs	r3, r2
 80026e0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80026e2:	7c3b      	ldrb	r3, [r7, #16]
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	b21a      	sxth	r2, r3
 80026e8:	7c7b      	ldrb	r3, [r7, #17]
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80026f4:	7cbb      	ldrb	r3, [r7, #18]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	b21a      	sxth	r2, r3
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	4313      	orrs	r3, r2
 8002700:	b21a      	sxth	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002706:	7d3b      	ldrb	r3, [r7, #20]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	b21a      	sxth	r2, r3
 800270c:	7d7b      	ldrb	r3, [r7, #21]
 800270e:	b21b      	sxth	r3, r3
 8002710:	4313      	orrs	r3, r2
 8002712:	b21a      	sxth	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd feb8 	bl	8000494 <__aeabi_i2d>
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4bbd      	ldr	r3, [pc, #756]	; (8002a20 <MPU6050_Read_All+0x3a8>)
 800272a:	f7fe f847 	bl	80007bc <__aeabi_ddiv>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	6839      	ldr	r1, [r7, #0]
 8002734:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fea8 	bl	8000494 <__aeabi_i2d>
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	4bb5      	ldr	r3, [pc, #724]	; (8002a20 <MPU6050_Read_All+0x3a8>)
 800274a:	f7fe f837 	bl	80007bc <__aeabi_ddiv>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	6839      	ldr	r1, [r7, #0]
 8002754:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fe98 	bl	8000494 <__aeabi_i2d>
 8002764:	a3a8      	add	r3, pc, #672	; (adr r3, 8002a08 <MPU6050_Read_All+0x390>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	f7fe f827 	bl	80007bc <__aeabi_ddiv>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	6839      	ldr	r1, [r7, #0]
 8002774:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002778:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002784:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002a24 <MPU6050_Read_All+0x3ac>
 8002788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800278c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002a28 <MPU6050_Read_All+0x3b0>
 8002790:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd fe77 	bl	8000494 <__aeabi_i2d>
 80027a6:	a39a      	add	r3, pc, #616	; (adr r3, 8002a10 <MPU6050_Read_All+0x398>)
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	f7fe f806 	bl	80007bc <__aeabi_ddiv>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	6839      	ldr	r1, [r7, #0]
 80027b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fe67 	bl	8000494 <__aeabi_i2d>
 80027c6:	a392      	add	r3, pc, #584	; (adr r3, 8002a10 <MPU6050_Read_All+0x398>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f7fd fff6 	bl	80007bc <__aeabi_ddiv>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	6839      	ldr	r1, [r7, #0]
 80027d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fe57 	bl	8000494 <__aeabi_i2d>
 80027e6:	a38a      	add	r3, pc, #552	; (adr r3, 8002a10 <MPU6050_Read_All+0x398>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd ffe6 	bl	80007bc <__aeabi_ddiv>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80027fa:	f001 fc17 	bl	800402c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b8a      	ldr	r3, [pc, #552]	; (8002a2c <MPU6050_Read_All+0x3b4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fe34 	bl	8000474 <__aeabi_ui2d>
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	4b87      	ldr	r3, [pc, #540]	; (8002a30 <MPU6050_Read_All+0x3b8>)
 8002812:	f7fd ffd3 	bl	80007bc <__aeabi_ddiv>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800281e:	f001 fc05 	bl	800402c <HAL_GetTick>
 8002822:	4603      	mov	r3, r0
 8002824:	4a81      	ldr	r2, [pc, #516]	; (8002a2c <MPU6050_Read_All+0x3b4>)
 8002826:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800282e:	461a      	mov	r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002836:	fb03 f202 	mul.w	r2, r3, r2
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002840:	4619      	mov	r1, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002848:	fb03 f301 	mul.w	r3, r3, r1
 800284c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe20 	bl	8000494 <__aeabi_i2d>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	ec43 2b10 	vmov	d0, r2, r3
 800285c:	f007 fa4c 	bl	8009cf8 <sqrt>
 8002860:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002870:	f7fe f8e2 	bl	8000a38 <__aeabi_dcmpeq>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11f      	bne.n	80028ba <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fe07 	bl	8000494 <__aeabi_i2d>
 8002886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800288a:	f7fd ff97 	bl	80007bc <__aeabi_ddiv>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	ec43 2b17 	vmov	d7, r2, r3
 8002896:	eeb0 0a47 	vmov.f32	s0, s14
 800289a:	eef0 0a67 	vmov.f32	s1, s15
 800289e:	f006 ff2b 	bl	80096f8 <atan>
 80028a2:	ec51 0b10 	vmov	r0, r1, d0
 80028a6:	a35c      	add	r3, pc, #368	; (adr r3, 8002a18 <MPU6050_Read_All+0x3a0>)
 80028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ac:	f7fd fe5c 	bl	8000568 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80028b8:	e005      	b.n	80028c6 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028cc:	425b      	negs	r3, r3
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fde0 	bl	8000494 <__aeabi_i2d>
 80028d4:	4682      	mov	sl, r0
 80028d6:	468b      	mov	fp, r1
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fdd8 	bl	8000494 <__aeabi_i2d>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	ec43 2b11 	vmov	d1, r2, r3
 80028ec:	ec4b ab10 	vmov	d0, sl, fp
 80028f0:	f007 f952 	bl	8009b98 <atan2>
 80028f4:	ec51 0b10 	vmov	r0, r1, d0
 80028f8:	a347      	add	r3, pc, #284	; (adr r3, 8002a18 <MPU6050_Read_All+0x3a0>)
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f7fd fe33 	bl	8000568 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <MPU6050_Read_All+0x3bc>)
 8002910:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002914:	f7fe f89a 	bl	8000a4c <__aeabi_dcmplt>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <MPU6050_Read_All+0x2bc>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <MPU6050_Read_All+0x3c0>)
 800292a:	f7fe f8ad 	bl	8000a88 <__aeabi_dcmpgt>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d114      	bne.n	800295e <MPU6050_Read_All+0x2e6>
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <MPU6050_Read_All+0x3c0>)
 800293a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800293e:	f7fe f8a3 	bl	8000a88 <__aeabi_dcmpgt>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <MPU6050_Read_All+0x2fc>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <MPU6050_Read_All+0x3bc>)
 8002954:	f7fe f87a 	bl	8000a4c <__aeabi_dcmplt>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 800295e:	4937      	ldr	r1, [pc, #220]	; (8002a3c <MPU6050_Read_All+0x3c4>)
 8002960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002964:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002968:	6839      	ldr	r1, [r7, #0]
 800296a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800296e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002972:	e014      	b.n	800299e <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800297a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800297e:	eeb0 1a47 	vmov.f32	s2, s14
 8002982:	eef0 1a67 	vmov.f32	s3, s15
 8002986:	ed97 0b06 	vldr	d0, [r7, #24]
 800298a:	482c      	ldr	r0, [pc, #176]	; (8002a3c <MPU6050_Read_All+0x3c4>)
 800298c:	f000 f85a 	bl	8002a44 <Kalman_getAngle>
 8002990:	eeb0 7a40 	vmov.f32	s14, s0
 8002994:	eef0 7a60 	vmov.f32	s15, s1
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80029a4:	4690      	mov	r8, r2
 80029a6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <MPU6050_Read_All+0x3c0>)
 80029b0:	4640      	mov	r0, r8
 80029b2:	4649      	mov	r1, r9
 80029b4:	f7fe f868 	bl	8000a88 <__aeabi_dcmpgt>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80029c4:	4614      	mov	r4, r2
 80029c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80029d6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80029da:	eeb0 1a47 	vmov.f32	s2, s14
 80029de:	eef0 1a67 	vmov.f32	s3, s15
 80029e2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80029e6:	4816      	ldr	r0, [pc, #88]	; (8002a40 <MPU6050_Read_All+0x3c8>)
 80029e8:	f000 f82c 	bl	8002a44 <Kalman_getAngle>
 80029ec:	eeb0 7a40 	vmov.f32	s14, s0
 80029f0:	eef0 7a60 	vmov.f32	s15, s1
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 80029fa:	bf00      	nop
 80029fc:	3740      	adds	r7, #64	; 0x40
 80029fe:	46bd      	mov	sp, r7
 8002a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a04:	f3af 8000 	nop.w
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	40cc2900 	.word	0x40cc2900
 8002a10:	00000000 	.word	0x00000000
 8002a14:	40606000 	.word	0x40606000
 8002a18:	1a63c1f8 	.word	0x1a63c1f8
 8002a1c:	404ca5dc 	.word	0x404ca5dc
 8002a20:	40d00000 	.word	0x40d00000
 8002a24:	43aa0000 	.word	0x43aa0000
 8002a28:	42121eb8 	.word	0x42121eb8
 8002a2c:	200005a8 	.word	0x200005a8
 8002a30:	408f4000 	.word	0x408f4000
 8002a34:	c0568000 	.word	0xc0568000
 8002a38:	40568000 	.word	0x40568000
 8002a3c:	20000198 	.word	0x20000198
 8002a40:	20000150 	.word	0x20000150

08002a44 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002a44:	b5b0      	push	{r4, r5, r7, lr}
 8002a46:	b096      	sub	sp, #88	; 0x58
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	61f8      	str	r0, [r7, #28]
 8002a4c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002a50:	ed87 1b02 	vstr	d1, [r7, #8]
 8002a54:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a62:	f7fd fbc9 	bl	80001f8 <__aeabi_dsub>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002a74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a7c:	f7fd fd74 	bl	8000568 <__aeabi_dmul>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4620      	mov	r0, r4
 8002a86:	4629      	mov	r1, r5
 8002a88:	f7fd fbb8 	bl	80001fc <__adddf3>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	69f9      	ldr	r1, [r7, #28]
 8002a92:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa6:	f7fd fd5f 	bl	8000568 <__aeabi_dmul>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ab8:	f7fd fb9e 	bl	80001f8 <__aeabi_dsub>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002aca:	f7fd fb95 	bl	80001f8 <__aeabi_dsub>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	f7fd fb8e 	bl	80001fc <__adddf3>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aec:	f7fd fd3c 	bl	8000568 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4620      	mov	r0, r4
 8002af6:	4629      	mov	r1, r5
 8002af8:	f7fd fb80 	bl	80001fc <__adddf3>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	69f9      	ldr	r1, [r7, #28]
 8002b02:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b16:	f7fd fd27 	bl	8000568 <__aeabi_dmul>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4620      	mov	r0, r4
 8002b20:	4629      	mov	r1, r5
 8002b22:	f7fd fb69 	bl	80001f8 <__aeabi_dsub>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	69f9      	ldr	r1, [r7, #28]
 8002b2c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b40:	f7fd fd12 	bl	8000568 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4620      	mov	r0, r4
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	f7fd fb54 	bl	80001f8 <__aeabi_dsub>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	69f9      	ldr	r1, [r7, #28]
 8002b56:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b6a:	f7fd fcfd 	bl	8000568 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4620      	mov	r0, r4
 8002b74:	4629      	mov	r1, r5
 8002b76:	f7fd fb41 	bl	80001fc <__adddf3>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	69f9      	ldr	r1, [r7, #28]
 8002b80:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b90:	f7fd fb34 	bl	80001fc <__adddf3>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002ba2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ba6:	f7fd fe09 	bl	80007bc <__aeabi_ddiv>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002bb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bbc:	f7fd fdfe 	bl	80007bc <__aeabi_ddiv>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002bce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bd2:	f7fd fb11 	bl	80001f8 <__aeabi_dsub>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002be4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002be8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bec:	f7fd fcbc 	bl	8000568 <__aeabi_dmul>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	f7fd fb00 	bl	80001fc <__adddf3>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	69f9      	ldr	r1, [r7, #28]
 8002c02:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002c0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c14:	f7fd fca8 	bl	8000568 <__aeabi_dmul>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	4629      	mov	r1, r5
 8002c20:	f7fd faec 	bl	80001fc <__adddf3>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	69f9      	ldr	r1, [r7, #28]
 8002c2a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002c48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c50:	f7fd fc8a 	bl	8000568 <__aeabi_dmul>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4620      	mov	r0, r4
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	f7fd facc 	bl	80001f8 <__aeabi_dsub>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	69f9      	ldr	r1, [r7, #28]
 8002c66:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002c70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c78:	f7fd fc76 	bl	8000568 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4620      	mov	r0, r4
 8002c82:	4629      	mov	r1, r5
 8002c84:	f7fd fab8 	bl	80001f8 <__aeabi_dsub>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	69f9      	ldr	r1, [r7, #28]
 8002c8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002c98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ca0:	f7fd fc62 	bl	8000568 <__aeabi_dmul>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4620      	mov	r0, r4
 8002caa:	4629      	mov	r1, r5
 8002cac:	f7fd faa4 	bl	80001f8 <__aeabi_dsub>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	69f9      	ldr	r1, [r7, #28]
 8002cb6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002cc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cc8:	f7fd fc4e 	bl	8000568 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	f7fd fa90 	bl	80001f8 <__aeabi_dsub>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	69f9      	ldr	r1, [r7, #28]
 8002cde:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ce8:	ec43 2b17 	vmov	d7, r2, r3
};
 8002cec:	eeb0 0a47 	vmov.f32	s0, s14
 8002cf0:	eef0 0a67 	vmov.f32	s1, s15
 8002cf4:	3758      	adds	r7, #88	; 0x58
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002cfc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d02:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <MX_SPI1_Init+0x6c>)
 8002d04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d14:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d20:	2202      	movs	r2, #2
 8002d22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d34:	2228      	movs	r2, #40	; 0x28
 8002d36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d4c:	220a      	movs	r2, #10
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d50:	4804      	ldr	r0, [pc, #16]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d52:	f004 fa37 	bl	80071c4 <HAL_SPI_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002d5c:	f7ff fc2c 	bl	80025b8 <Error_Handler>
  }

}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	200002c0 	.word	0x200002c0
 8002d68:	40013000 	.word	0x40013000

08002d6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_SPI_MspInit+0x84>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d12b      	bne.n	8002de6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_SPI_MspInit+0x88>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8002dc6:	2360      	movs	r3, #96	; 0x60
 8002dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dd6:	2305      	movs	r3, #5
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dda:	f107 0314 	add.w	r3, r7, #20
 8002dde:	4619      	mov	r1, r3
 8002de0:	4805      	ldr	r0, [pc, #20]	; (8002df8 <HAL_SPI_MspInit+0x8c>)
 8002de2:	f002 fb05 	bl	80053f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002de6:	bf00      	nop
 8002de8:	3728      	adds	r7, #40	; 0x28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40013000 	.word	0x40013000
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020000 	.word	0x40020000

08002dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a08      	ldr	r2, [pc, #32]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e5e:	e7fe      	b.n	8002e5e <HardFault_Handler+0x4>

08002e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e64:	e7fe      	b.n	8002e64 <MemManage_Handler+0x4>

08002e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e6a:	e7fe      	b.n	8002e6a <BusFault_Handler+0x4>

08002e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e70:	e7fe      	b.n	8002e70 <UsageFault_Handler+0x4>

08002e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e72:	b480      	push	{r7}
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea0:	f001 f8b0 	bl	8004004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002eac:	4802      	ldr	r0, [pc, #8]	; (8002eb8 <DMA1_Stream1_IRQHandler+0x10>)
 8002eae:	f002 f835 	bl	8004f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200006ac 	.word	0x200006ac

08002ebc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <CAN1_RX0_IRQHandler+0x10>)
 8002ec2:	f001 fbd1 	bl	8004668 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000340 	.word	0x20000340

08002ed0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002ed4:	2080      	movs	r0, #128	; 0x80
 8002ed6:	f002 fc69 	bl	80057ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <CAN2_RX1_IRQHandler+0x10>)
 8002ee6:	f001 fbbf 	bl	8004668 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000318 	.word	0x20000318

08002ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <SystemInit+0x28>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <SystemInit+0x28>)
 8002f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <SystemInit+0x28>)
 8002f0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f0e:	609a      	str	r2, [r3, #8]
#endif
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b096      	sub	sp, #88	; 0x58
 8002f24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
 8002f4c:	611a      	str	r2, [r3, #16]
 8002f4e:	615a      	str	r2, [r3, #20]
 8002f50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	2220      	movs	r2, #32
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f006 fbc3 	bl	80096e4 <memset>

  htim1.Instance = TIM1;
 8002f5e:	4b3e      	ldr	r3, [pc, #248]	; (8003058 <MX_TIM1_Init+0x138>)
 8002f60:	4a3e      	ldr	r2, [pc, #248]	; (800305c <MX_TIM1_Init+0x13c>)
 8002f62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8002f64:	4b3c      	ldr	r3, [pc, #240]	; (8003058 <MX_TIM1_Init+0x138>)
 8002f66:	22b3      	movs	r2, #179	; 0xb3
 8002f68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <MX_TIM1_Init+0x138>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002f70:	4b39      	ldr	r3, [pc, #228]	; (8003058 <MX_TIM1_Init+0x138>)
 8002f72:	2263      	movs	r2, #99	; 0x63
 8002f74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f76:	4b38      	ldr	r3, [pc, #224]	; (8003058 <MX_TIM1_Init+0x138>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f7c:	4b36      	ldr	r3, [pc, #216]	; (8003058 <MX_TIM1_Init+0x138>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <MX_TIM1_Init+0x138>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f88:	4833      	ldr	r0, [pc, #204]	; (8003058 <MX_TIM1_Init+0x138>)
 8002f8a:	f004 fd3b 	bl	8007a04 <HAL_TIM_Base_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002f94:	f7ff fb10 	bl	80025b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	482c      	ldr	r0, [pc, #176]	; (8003058 <MX_TIM1_Init+0x138>)
 8002fa6:	f004 ff87 	bl	8007eb8 <HAL_TIM_ConfigClockSource>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002fb0:	f7ff fb02 	bl	80025b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fb4:	4828      	ldr	r0, [pc, #160]	; (8003058 <MX_TIM1_Init+0x138>)
 8002fb6:	f004 fd74 	bl	8007aa2 <HAL_TIM_PWM_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002fc0:	f7ff fafa 	bl	80025b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4821      	ldr	r0, [pc, #132]	; (8003058 <MX_TIM1_Init+0x138>)
 8002fd4:	f005 fc6e 	bl	80088b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002fde:	f7ff faeb 	bl	80025b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fe2:	2360      	movs	r3, #96	; 0x60
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fea:	2300      	movs	r3, #0
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003002:	2204      	movs	r2, #4
 8003004:	4619      	mov	r1, r3
 8003006:	4814      	ldr	r0, [pc, #80]	; (8003058 <MX_TIM1_Init+0x138>)
 8003008:	f004 fe90 	bl	8007d2c <HAL_TIM_PWM_ConfigChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003012:	f7ff fad1 	bl	80025b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800302a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800302e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003030:	2300      	movs	r3, #0
 8003032:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	4619      	mov	r1, r3
 8003038:	4807      	ldr	r0, [pc, #28]	; (8003058 <MX_TIM1_Init+0x138>)
 800303a:	f005 fcb7 	bl	80089ac <HAL_TIMEx_ConfigBreakDeadTime>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003044:	f7ff fab8 	bl	80025b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003048:	4803      	ldr	r0, [pc, #12]	; (8003058 <MX_TIM1_Init+0x138>)
 800304a:	f000 fa2b 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 800304e:	bf00      	nop
 8003050:	3758      	adds	r7, #88	; 0x58
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000062c 	.word	0x2000062c
 800305c:	40010000 	.word	0x40010000

08003060 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	; 0x28
 8003064:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003066:	f107 0318 	add.w	r3, r7, #24
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800307e:	463b      	mov	r3, r7
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800308a:	4b31      	ldr	r3, [pc, #196]	; (8003150 <MX_TIM2_Init+0xf0>)
 800308c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003090:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8003092:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <MX_TIM2_Init+0xf0>)
 8003094:	22b3      	movs	r2, #179	; 0xb3
 8003096:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003098:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <MX_TIM2_Init+0xf0>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 800309e:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <MX_TIM2_Init+0xf0>)
 80030a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <MX_TIM2_Init+0xf0>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ac:	4b28      	ldr	r3, [pc, #160]	; (8003150 <MX_TIM2_Init+0xf0>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030b2:	4827      	ldr	r0, [pc, #156]	; (8003150 <MX_TIM2_Init+0xf0>)
 80030b4:	f004 fca6 	bl	8007a04 <HAL_TIM_Base_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80030be:	f7ff fa7b 	bl	80025b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030c8:	f107 0318 	add.w	r3, r7, #24
 80030cc:	4619      	mov	r1, r3
 80030ce:	4820      	ldr	r0, [pc, #128]	; (8003150 <MX_TIM2_Init+0xf0>)
 80030d0:	f004 fef2 	bl	8007eb8 <HAL_TIM_ConfigClockSource>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80030da:	f7ff fa6d 	bl	80025b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80030de:	481c      	ldr	r0, [pc, #112]	; (8003150 <MX_TIM2_Init+0xf0>)
 80030e0:	f004 fd52 	bl	8007b88 <HAL_TIM_IC_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80030ea:	f7ff fa65 	bl	80025b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030f6:	f107 0310 	add.w	r3, r7, #16
 80030fa:	4619      	mov	r1, r3
 80030fc:	4814      	ldr	r0, [pc, #80]	; (8003150 <MX_TIM2_Init+0xf0>)
 80030fe:	f005 fbd9 	bl	80088b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8003108:	f7ff fa56 	bl	80025b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800310c:	2300      	movs	r3, #0
 800310e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003110:	2301      	movs	r3, #1
 8003112:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800311c:	463b      	mov	r3, r7
 800311e:	2208      	movs	r2, #8
 8003120:	4619      	mov	r1, r3
 8003122:	480b      	ldr	r0, [pc, #44]	; (8003150 <MX_TIM2_Init+0xf0>)
 8003124:	f004 fd65 	bl	8007bf2 <HAL_TIM_IC_ConfigChannel>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800312e:	f7ff fa43 	bl	80025b8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003132:	463b      	mov	r3, r7
 8003134:	220c      	movs	r2, #12
 8003136:	4619      	mov	r1, r3
 8003138:	4805      	ldr	r0, [pc, #20]	; (8003150 <MX_TIM2_Init+0xf0>)
 800313a:	f004 fd5a 	bl	8007bf2 <HAL_TIM_IC_ConfigChannel>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8003144:	f7ff fa38 	bl	80025b8 <Error_Handler>
  }

}
 8003148:	bf00      	nop
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	2000066c 	.word	0x2000066c

08003154 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	; 0x38
 8003158:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800315a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	609a      	str	r2, [r3, #8]
 8003166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003168:	f107 0320 	add.w	r3, r7, #32
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	611a      	str	r2, [r3, #16]
 8003180:	615a      	str	r2, [r3, #20]
 8003182:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <MX_TIM3_Init+0xfc>)
 8003186:	4a33      	ldr	r2, [pc, #204]	; (8003254 <MX_TIM3_Init+0x100>)
 8003188:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800318a:	4b31      	ldr	r3, [pc, #196]	; (8003250 <MX_TIM3_Init+0xfc>)
 800318c:	2259      	movs	r2, #89	; 0x59
 800318e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003190:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <MX_TIM3_Init+0xfc>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003196:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <MX_TIM3_Init+0xfc>)
 8003198:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800319c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800319e:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <MX_TIM3_Init+0xfc>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a4:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <MX_TIM3_Init+0xfc>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031aa:	4829      	ldr	r0, [pc, #164]	; (8003250 <MX_TIM3_Init+0xfc>)
 80031ac:	f004 fc2a 	bl	8007a04 <HAL_TIM_Base_Init>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80031b6:	f7ff f9ff 	bl	80025b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80031c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031c4:	4619      	mov	r1, r3
 80031c6:	4822      	ldr	r0, [pc, #136]	; (8003250 <MX_TIM3_Init+0xfc>)
 80031c8:	f004 fe76 	bl	8007eb8 <HAL_TIM_ConfigClockSource>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80031d2:	f7ff f9f1 	bl	80025b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80031d6:	481e      	ldr	r0, [pc, #120]	; (8003250 <MX_TIM3_Init+0xfc>)
 80031d8:	f004 fc63 	bl	8007aa2 <HAL_TIM_PWM_Init>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80031e2:	f7ff f9e9 	bl	80025b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031ee:	f107 0320 	add.w	r3, r7, #32
 80031f2:	4619      	mov	r1, r3
 80031f4:	4816      	ldr	r0, [pc, #88]	; (8003250 <MX_TIM3_Init+0xfc>)
 80031f6:	f005 fb5d 	bl	80088b4 <HAL_TIMEx_MasterConfigSynchronization>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003200:	f7ff f9da 	bl	80025b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003204:	2360      	movs	r3, #96	; 0x60
 8003206:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003208:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800320c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	2200      	movs	r2, #0
 800321a:	4619      	mov	r1, r3
 800321c:	480c      	ldr	r0, [pc, #48]	; (8003250 <MX_TIM3_Init+0xfc>)
 800321e:	f004 fd85 	bl	8007d2c <HAL_TIM_PWM_ConfigChannel>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003228:	f7ff f9c6 	bl	80025b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	2204      	movs	r2, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4807      	ldr	r0, [pc, #28]	; (8003250 <MX_TIM3_Init+0xfc>)
 8003234:	f004 fd7a 	bl	8007d2c <HAL_TIM_PWM_ConfigChannel>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800323e:	f7ff f9bb 	bl	80025b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003242:	4803      	ldr	r0, [pc, #12]	; (8003250 <MX_TIM3_Init+0xfc>)
 8003244:	f000 f92e 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 8003248:	bf00      	nop
 800324a:	3738      	adds	r7, #56	; 0x38
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200005ec 	.word	0x200005ec
 8003254:	40000400 	.word	0x40000400

08003258 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b096      	sub	sp, #88	; 0x58
 800325c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800325e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800326c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	60da      	str	r2, [r3, #12]
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	615a      	str	r2, [r3, #20]
 8003288:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	2220      	movs	r2, #32
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f006 fa27 	bl	80096e4 <memset>

  htim8.Instance = TIM8;
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <MX_TIM8_Init+0x134>)
 8003298:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <MX_TIM8_Init+0x138>)
 800329a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 800329c:	4b3b      	ldr	r3, [pc, #236]	; (800338c <MX_TIM8_Init+0x134>)
 800329e:	22b3      	movs	r2, #179	; 0xb3
 80032a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a2:	4b3a      	ldr	r3, [pc, #232]	; (800338c <MX_TIM8_Init+0x134>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80032a8:	4b38      	ldr	r3, [pc, #224]	; (800338c <MX_TIM8_Init+0x134>)
 80032aa:	2263      	movs	r2, #99	; 0x63
 80032ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ae:	4b37      	ldr	r3, [pc, #220]	; (800338c <MX_TIM8_Init+0x134>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80032b4:	4b35      	ldr	r3, [pc, #212]	; (800338c <MX_TIM8_Init+0x134>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ba:	4b34      	ldr	r3, [pc, #208]	; (800338c <MX_TIM8_Init+0x134>)
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80032c0:	4832      	ldr	r0, [pc, #200]	; (800338c <MX_TIM8_Init+0x134>)
 80032c2:	f004 fb9f 	bl	8007a04 <HAL_TIM_Base_Init>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80032cc:	f7ff f974 	bl	80025b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80032d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032da:	4619      	mov	r1, r3
 80032dc:	482b      	ldr	r0, [pc, #172]	; (800338c <MX_TIM8_Init+0x134>)
 80032de:	f004 fdeb 	bl	8007eb8 <HAL_TIM_ConfigClockSource>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80032e8:	f7ff f966 	bl	80025b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80032ec:	4827      	ldr	r0, [pc, #156]	; (800338c <MX_TIM8_Init+0x134>)
 80032ee:	f004 fbd8 	bl	8007aa2 <HAL_TIM_PWM_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80032f8:	f7ff f95e 	bl	80025b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032fc:	2300      	movs	r3, #0
 80032fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003300:	2300      	movs	r3, #0
 8003302:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003304:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003308:	4619      	mov	r1, r3
 800330a:	4820      	ldr	r0, [pc, #128]	; (800338c <MX_TIM8_Init+0x134>)
 800330c:	f005 fad2 	bl	80088b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003316:	f7ff f94f 	bl	80025b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800331a:	2360      	movs	r3, #96	; 0x60
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003322:	2300      	movs	r3, #0
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003326:	2300      	movs	r3, #0
 8003328:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003336:	220c      	movs	r2, #12
 8003338:	4619      	mov	r1, r3
 800333a:	4814      	ldr	r0, [pc, #80]	; (800338c <MX_TIM8_Init+0x134>)
 800333c:	f004 fcf6 	bl	8007d2c <HAL_TIM_PWM_ConfigChannel>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8003346:	f7ff f937 	bl	80025b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800335e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003362:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003364:	2300      	movs	r3, #0
 8003366:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	4619      	mov	r1, r3
 800336c:	4807      	ldr	r0, [pc, #28]	; (800338c <MX_TIM8_Init+0x134>)
 800336e:	f005 fb1d 	bl	80089ac <HAL_TIMEx_ConfigBreakDeadTime>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8003378:	f7ff f91e 	bl	80025b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800337c:	4803      	ldr	r0, [pc, #12]	; (800338c <MX_TIM8_Init+0x134>)
 800337e:	f000 f891 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 8003382:	bf00      	nop
 8003384:	3758      	adds	r7, #88	; 0x58
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	200005ac 	.word	0x200005ac
 8003390:	40010400 	.word	0x40010400

08003394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08c      	sub	sp, #48	; 0x30
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 031c 	add.w	r3, r7, #28
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a37      	ldr	r2, [pc, #220]	; (8003490 <HAL_TIM_Base_MspInit+0xfc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d10e      	bne.n	80033d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	4a35      	ldr	r2, [pc, #212]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6453      	str	r3, [r2, #68]	; 0x44
 80033c6:	4b33      	ldr	r3, [pc, #204]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80033d2:	e059      	b.n	8003488 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033dc:	d12d      	bne.n	800343a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	4b2c      	ldr	r3, [pc, #176]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	6413      	str	r3, [r2, #64]	; 0x40
 80033ee:	4b29      	ldr	r3, [pc, #164]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	4b25      	ldr	r3, [pc, #148]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a24      	ldr	r2, [pc, #144]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b22      	ldr	r3, [pc, #136]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 8003416:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800341a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003428:	2301      	movs	r3, #1
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342c:	f107 031c 	add.w	r3, r7, #28
 8003430:	4619      	mov	r1, r3
 8003432:	4819      	ldr	r0, [pc, #100]	; (8003498 <HAL_TIM_Base_MspInit+0x104>)
 8003434:	f001 ffdc 	bl	80053f0 <HAL_GPIO_Init>
}
 8003438:	e026      	b.n	8003488 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_TIM_Base_MspInit+0x108>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d10e      	bne.n	8003462 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	4a11      	ldr	r2, [pc, #68]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	6413      	str	r3, [r2, #64]	; 0x40
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	e012      	b.n	8003488 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a0e      	ldr	r2, [pc, #56]	; (80034a0 <HAL_TIM_Base_MspInit+0x10c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10d      	bne.n	8003488 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	4a07      	ldr	r2, [pc, #28]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 8003476:	f043 0302 	orr.w	r3, r3, #2
 800347a:	6453      	str	r3, [r2, #68]	; 0x44
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_TIM_Base_MspInit+0x100>)
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]
}
 8003488:	bf00      	nop
 800348a:	3730      	adds	r7, #48	; 0x30
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40010000 	.word	0x40010000
 8003494:	40023800 	.word	0x40023800
 8003498:	40020400 	.word	0x40020400
 800349c:	40000400 	.word	0x40000400
 80034a0:	40010400 	.word	0x40010400

080034a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a37      	ldr	r2, [pc, #220]	; (80035a0 <HAL_TIM_MspPostInit+0xfc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d11f      	bne.n	8003506 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_TIM_MspPostInit+0x100>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a35      	ldr	r2, [pc, #212]	; (80035a4 <HAL_TIM_MspPostInit+0x100>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_TIM_MspPostInit+0x100>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 80034e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034f4:	2301      	movs	r3, #1
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	4619      	mov	r1, r3
 80034fe:	482a      	ldr	r0, [pc, #168]	; (80035a8 <HAL_TIM_MspPostInit+0x104>)
 8003500:	f001 ff76 	bl	80053f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003504:	e047      	b.n	8003596 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a28      	ldr	r2, [pc, #160]	; (80035ac <HAL_TIM_MspPostInit+0x108>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d11e      	bne.n	800354e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	4b23      	ldr	r3, [pc, #140]	; (80035a4 <HAL_TIM_MspPostInit+0x100>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <HAL_TIM_MspPostInit+0x100>)
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	6313      	str	r3, [r2, #48]	; 0x30
 8003520:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_TIM_MspPostInit+0x100>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 800352c:	23c0      	movs	r3, #192	; 0xc0
 800352e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003538:	2300      	movs	r3, #0
 800353a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800353c:	2302      	movs	r3, #2
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	4619      	mov	r1, r3
 8003546:	481a      	ldr	r0, [pc, #104]	; (80035b0 <HAL_TIM_MspPostInit+0x10c>)
 8003548:	f001 ff52 	bl	80053f0 <HAL_GPIO_Init>
}
 800354c:	e023      	b.n	8003596 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a18      	ldr	r2, [pc, #96]	; (80035b4 <HAL_TIM_MspPostInit+0x110>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d11e      	bne.n	8003596 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_TIM_MspPostInit+0x100>)
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <HAL_TIM_MspPostInit+0x100>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	6313      	str	r3, [r2, #48]	; 0x30
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <HAL_TIM_MspPostInit+0x100>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8003574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357a:	2302      	movs	r3, #2
 800357c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003582:	2300      	movs	r3, #0
 8003584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003586:	2303      	movs	r3, #3
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 800358a:	f107 0314 	add.w	r3, r7, #20
 800358e:	4619      	mov	r1, r3
 8003590:	4807      	ldr	r0, [pc, #28]	; (80035b0 <HAL_TIM_MspPostInit+0x10c>)
 8003592:	f001 ff2d 	bl	80053f0 <HAL_GPIO_Init>
}
 8003596:	bf00      	nop
 8003598:	3728      	adds	r7, #40	; 0x28
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40010000 	.word	0x40010000
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40020000 	.word	0x40020000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40020800 	.word	0x40020800
 80035b4:	40010400 	.word	0x40010400

080035b8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <MX_USART3_UART_Init+0x4c>)
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <MX_USART3_UART_Init+0x50>)
 80035c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <MX_USART3_UART_Init+0x4c>)
 80035c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <MX_USART3_UART_Init+0x4c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <MX_USART3_UART_Init+0x4c>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <MX_USART3_UART_Init+0x4c>)
 80035d8:	2200      	movs	r2, #0
 80035da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <MX_USART3_UART_Init+0x4c>)
 80035de:	220c      	movs	r2, #12
 80035e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <MX_USART3_UART_Init+0x4c>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <MX_USART3_UART_Init+0x4c>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035ee:	4805      	ldr	r0, [pc, #20]	; (8003604 <MX_USART3_UART_Init+0x4c>)
 80035f0:	f005 fa2e 	bl	8008a50 <HAL_UART_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80035fa:	f7fe ffdd 	bl	80025b8 <Error_Handler>
  }

}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	2000070c 	.word	0x2000070c
 8003608:	40004800 	.word	0x40004800

0800360c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a30      	ldr	r2, [pc, #192]	; (80036ec <HAL_UART_MspInit+0xe0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d15a      	bne.n	80036e4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <HAL_UART_MspInit+0xe4>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a2e      	ldr	r2, [pc, #184]	; (80036f0 <HAL_UART_MspInit+0xe4>)
 8003638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_UART_MspInit+0xe4>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b28      	ldr	r3, [pc, #160]	; (80036f0 <HAL_UART_MspInit+0xe4>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <HAL_UART_MspInit+0xe4>)
 8003654:	f043 0308 	orr.w	r3, r3, #8
 8003658:	6313      	str	r3, [r2, #48]	; 0x30
 800365a:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <HAL_UART_MspInit+0xe4>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8003666:	f44f 7340 	mov.w	r3, #768	; 0x300
 800366a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003674:	2303      	movs	r3, #3
 8003676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003678:	2307      	movs	r3, #7
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800367c:	f107 0314 	add.w	r3, r7, #20
 8003680:	4619      	mov	r1, r3
 8003682:	481c      	ldr	r0, [pc, #112]	; (80036f4 <HAL_UART_MspInit+0xe8>)
 8003684:	f001 feb4 	bl	80053f0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_UART_MspInit+0xec>)
 800368a:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <HAL_UART_MspInit+0xf0>)
 800368c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800368e:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <HAL_UART_MspInit+0xec>)
 8003690:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003694:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003696:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <HAL_UART_MspInit+0xec>)
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800369c:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <HAL_UART_MspInit+0xec>)
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <HAL_UART_MspInit+0xec>)
 80036a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <HAL_UART_MspInit+0xec>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_UART_MspInit+0xec>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_UART_MspInit+0xec>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036bc:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <HAL_UART_MspInit+0xec>)
 80036be:	2200      	movs	r2, #0
 80036c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <HAL_UART_MspInit+0xec>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80036c8:	480b      	ldr	r0, [pc, #44]	; (80036f8 <HAL_UART_MspInit+0xec>)
 80036ca:	f001 fb21 	bl	8004d10 <HAL_DMA_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80036d4:	f7fe ff70 	bl	80025b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <HAL_UART_MspInit+0xec>)
 80036dc:	635a      	str	r2, [r3, #52]	; 0x34
 80036de:	4a06      	ldr	r2, [pc, #24]	; (80036f8 <HAL_UART_MspInit+0xec>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80036e4:	bf00      	nop
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40004800 	.word	0x40004800
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40020c00 	.word	0x40020c00
 80036f8:	200006ac 	.word	0x200006ac
 80036fc:	40026028 	.word	0x40026028

08003700 <joystick_Init>:
static int joyPosBuffer[2][5] = {0};
static int joy_pos_buffer_cnt = 0;
static const float JoyForwardAngle = 1.57;
static const float JoyForwardAngleDeadzone = 0.1;

void joystick_Init(void){
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8003704:	2228      	movs	r2, #40	; 0x28
 8003706:	2100      	movs	r1, #0
 8003708:	4802      	ldr	r0, [pc, #8]	; (8003714 <joystick_Init+0x14>)
 800370a:	f005 ffeb 	bl	80096e4 <memset>
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000294 	.word	0x20000294

08003718 <joystickCalculatePos>:

void joystickCalculatePos(void)
{
 8003718:	b5b0      	push	{r4, r5, r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
  // update joystick reading into buffer array
  if (joy_pos_buffer_cnt == JoyPosBufferSize)
 800371e:	4bc2      	ldr	r3, [pc, #776]	; (8003a28 <joystickCalculatePos+0x310>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2205      	movs	r2, #5
 8003724:	4293      	cmp	r3, r2
 8003726:	d102      	bne.n	800372e <joystickCalculatePos+0x16>
    joy_pos_buffer_cnt = 0;
 8003728:	4bbf      	ldr	r3, [pc, #764]	; (8003a28 <joystickCalculatePos+0x310>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]

  joyPosBuffer[0][joy_pos_buffer_cnt] = tempJoyRawDataX - JoystickCenterX;
 800372e:	4bbf      	ldr	r3, [pc, #764]	; (8003a2c <joystickCalculatePos+0x314>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	f643 7148 	movw	r1, #16200	; 0x3f48
 8003736:	4bbc      	ldr	r3, [pc, #752]	; (8003a28 <joystickCalculatePos+0x310>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	1a52      	subs	r2, r2, r1
 800373c:	49bc      	ldr	r1, [pc, #752]	; (8003a30 <joystickCalculatePos+0x318>)
 800373e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  joyPosBuffer[1][joy_pos_buffer_cnt] = tempJoyRawDataY - JoystickCenterY;
 8003742:	4bbc      	ldr	r3, [pc, #752]	; (8003a34 <joystickCalculatePos+0x31c>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800374a:	4bb7      	ldr	r3, [pc, #732]	; (8003a28 <joystickCalculatePos+0x310>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	1a52      	subs	r2, r2, r1
 8003750:	49b7      	ldr	r1, [pc, #732]	; (8003a30 <joystickCalculatePos+0x318>)
 8003752:	3305      	adds	r3, #5
 8003754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // calculate joystick position average from the buffer
  int sum_x = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
  int sum_y = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 8003760:	2300      	movs	r3, #0
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	e011      	b.n	800378a <joystickCalculatePos+0x72>
  {
    sum_x += joyPosBuffer[0][i];
 8003766:	4ab2      	ldr	r2, [pc, #712]	; (8003a30 <joystickCalculatePos+0x318>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4413      	add	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
    sum_y += joyPosBuffer[1][i];
 8003774:	4aae      	ldr	r2, [pc, #696]	; (8003a30 <joystickCalculatePos+0x318>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3305      	adds	r3, #5
 800377a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	4413      	add	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3301      	adds	r3, #1
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	2205      	movs	r2, #5
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4293      	cmp	r3, r2
 8003790:	dbe9      	blt.n	8003766 <joystickCalculatePos+0x4e>
  }

  hJoystick.x = sum_x / JoyPosBufferSize;
 8003792:	2205      	movs	r2, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	fb93 f3f2 	sdiv	r3, r3, r2
 800379a:	b21a      	sxth	r2, r3
 800379c:	4ba6      	ldr	r3, [pc, #664]	; (8003a38 <joystickCalculatePos+0x320>)
 800379e:	801a      	strh	r2, [r3, #0]
  hJoystick.y = sum_y / JoyPosBufferSize;
 80037a0:	2205      	movs	r2, #5
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80037a8:	b21a      	sxth	r2, r3
 80037aa:	4ba3      	ldr	r3, [pc, #652]	; (8003a38 <joystickCalculatePos+0x320>)
 80037ac:	805a      	strh	r2, [r3, #2]

  // calculate magnitude and angle
  hJoystick.magnitude = sqrt(pow(hJoystick.x, 2) + pow(hJoystick.y,2));
 80037ae:	4ba2      	ldr	r3, [pc, #648]	; (8003a38 <joystickCalculatePos+0x320>)
 80037b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fc fe6d 	bl	8000494 <__aeabi_i2d>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8003a18 <joystickCalculatePos+0x300>
 80037c2:	ec43 2b10 	vmov	d0, r2, r3
 80037c6:	f006 f9e9 	bl	8009b9c <pow>
 80037ca:	ec55 4b10 	vmov	r4, r5, d0
 80037ce:	4b9a      	ldr	r3, [pc, #616]	; (8003a38 <joystickCalculatePos+0x320>)
 80037d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fc fe5d 	bl	8000494 <__aeabi_i2d>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	ed9f 1b8e 	vldr	d1, [pc, #568]	; 8003a18 <joystickCalculatePos+0x300>
 80037e2:	ec43 2b10 	vmov	d0, r2, r3
 80037e6:	f006 f9d9 	bl	8009b9c <pow>
 80037ea:	ec53 2b10 	vmov	r2, r3, d0
 80037ee:	4620      	mov	r0, r4
 80037f0:	4629      	mov	r1, r5
 80037f2:	f7fc fd03 	bl	80001fc <__adddf3>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	ec43 2b17 	vmov	d7, r2, r3
 80037fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003802:	eef0 0a67 	vmov.f32	s1, s15
 8003806:	f006 fa77 	bl	8009cf8 <sqrt>
 800380a:	ec53 2b10 	vmov	r2, r3, d0
 800380e:	4610      	mov	r0, r2
 8003810:	4619      	mov	r1, r3
 8003812:	f7fd f9a1 	bl	8000b58 <__aeabi_d2f>
 8003816:	4603      	mov	r3, r0
 8003818:	4a87      	ldr	r2, [pc, #540]	; (8003a38 <joystickCalculatePos+0x320>)
 800381a:	6053      	str	r3, [r2, #4]
  hJoystick.angle = atan2(hJoystick.y, hJoystick.x);
 800381c:	4b86      	ldr	r3, [pc, #536]	; (8003a38 <joystickCalculatePos+0x320>)
 800381e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fc fe36 	bl	8000494 <__aeabi_i2d>
 8003828:	4604      	mov	r4, r0
 800382a:	460d      	mov	r5, r1
 800382c:	4b82      	ldr	r3, [pc, #520]	; (8003a38 <joystickCalculatePos+0x320>)
 800382e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fc fe2e 	bl	8000494 <__aeabi_i2d>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	ec43 2b11 	vmov	d1, r2, r3
 8003840:	ec45 4b10 	vmov	d0, r4, r5
 8003844:	f006 f9a8 	bl	8009b98 <atan2>
 8003848:	ec53 2b10 	vmov	r2, r3, d0
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	f7fd f982 	bl	8000b58 <__aeabi_d2f>
 8003854:	4603      	mov	r3, r0
 8003856:	4a78      	ldr	r2, [pc, #480]	; (8003a38 <joystickCalculatePos+0x320>)
 8003858:	6093      	str	r3, [r2, #8]

  // limit magnitude
  if (hJoystick.magnitude > JoystickMagnitudeMax)
 800385a:	4b77      	ldr	r3, [pc, #476]	; (8003a38 <joystickCalculatePos+0x320>)
 800385c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003860:	eddf 7a76 	vldr	s15, [pc, #472]	; 8003a3c <joystickCalculatePos+0x324>
 8003864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003870:	dd06      	ble.n	8003880 <joystickCalculatePos+0x168>
    hJoystick.magnitude = JoystickMagnitudeMax;
 8003872:	eddf 7a72 	vldr	s15, [pc, #456]	; 8003a3c <joystickCalculatePos+0x324>
 8003876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800387a:	4b6f      	ldr	r3, [pc, #444]	; (8003a38 <joystickCalculatePos+0x320>)
 800387c:	edc3 7a01 	vstr	s15, [r3, #4]

  // filter joystick forward deadzone
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 8003880:	4b6d      	ldr	r3, [pc, #436]	; (8003a38 <joystickCalculatePos+0x320>)
 8003882:	ed93 7a02 	vldr	s14, [r3, #8]
 8003886:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003a40 <joystickCalculatePos+0x328>
 800388a:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8003a44 <joystickCalculatePos+0x32c>
 800388e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003892:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389a:	dd10      	ble.n	80038be <joystickCalculatePos+0x1a6>
      hJoystick.angle < JoyForwardAngle + JoyForwardAngleDeadzone)
 800389c:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <joystickCalculatePos+0x320>)
 800389e:	ed93 7a02 	vldr	s14, [r3, #8]
 80038a2:	eddf 6a67 	vldr	s13, [pc, #412]	; 8003a40 <joystickCalculatePos+0x328>
 80038a6:	eddf 7a67 	vldr	s15, [pc, #412]	; 8003a44 <joystickCalculatePos+0x32c>
 80038aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 80038ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b6:	d502      	bpl.n	80038be <joystickCalculatePos+0x1a6>
    hJoystick.angle = JoyForwardAngle;
 80038b8:	4a63      	ldr	r2, [pc, #396]	; (8003a48 <joystickCalculatePos+0x330>)
 80038ba:	4b5f      	ldr	r3, [pc, #380]	; (8003a38 <joystickCalculatePos+0x320>)
 80038bc:	609a      	str	r2, [r3, #8]

  // filter joystick backward deadzone
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 80038be:	4b5e      	ldr	r3, [pc, #376]	; (8003a38 <joystickCalculatePos+0x320>)
 80038c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80038c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003a40 <joystickCalculatePos+0x328>
 80038c8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8003a44 <joystickCalculatePos+0x32c>
 80038cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d0:	eef1 7a67 	vneg.f32	s15, s15
 80038d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038dc:	dd16      	ble.n	800390c <joystickCalculatePos+0x1f4>
      hJoystick.angle < -(JoyForwardAngle - JoyForwardAngleDeadzone))
 80038de:	4b56      	ldr	r3, [pc, #344]	; (8003a38 <joystickCalculatePos+0x320>)
 80038e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80038e4:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003a40 <joystickCalculatePos+0x328>
 80038e8:	eddf 7a56 	vldr	s15, [pc, #344]	; 8003a44 <joystickCalculatePos+0x32c>
 80038ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80038f0:	eef1 7a67 	vneg.f32	s15, s15
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 80038f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fc:	d506      	bpl.n	800390c <joystickCalculatePos+0x1f4>
    hJoystick.angle = -JoyForwardAngle;
 80038fe:	eddf 7a50 	vldr	s15, [pc, #320]	; 8003a40 <joystickCalculatePos+0x328>
 8003902:	eef1 7a67 	vneg.f32	s15, s15
 8003906:	4b4c      	ldr	r3, [pc, #304]	; (8003a38 <joystickCalculatePos+0x320>)
 8003908:	edc3 7a02 	vstr	s15, [r3, #8]

  // normalize joystick reading
  hJoystick.linear = hJoystick.magnitude/JoystickMagnitudeMax * sin(hJoystick.angle);
 800390c:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <joystickCalculatePos+0x320>)
 800390e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003912:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8003a3c <joystickCalculatePos+0x324>
 8003916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800391a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800391e:	ee16 0a90 	vmov	r0, s13
 8003922:	f7fc fdc9 	bl	80004b8 <__aeabi_f2d>
 8003926:	4604      	mov	r4, r0
 8003928:	460d      	mov	r5, r1
 800392a:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <joystickCalculatePos+0x320>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fdc2 	bl	80004b8 <__aeabi_f2d>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	ec43 2b10 	vmov	d0, r2, r3
 800393c:	f006 f8d8 	bl	8009af0 <sin>
 8003940:	ec53 2b10 	vmov	r2, r3, d0
 8003944:	4620      	mov	r0, r4
 8003946:	4629      	mov	r1, r5
 8003948:	f7fc fe0e 	bl	8000568 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	f7fd f900 	bl	8000b58 <__aeabi_d2f>
 8003958:	4603      	mov	r3, r0
 800395a:	4a37      	ldr	r2, [pc, #220]	; (8003a38 <joystickCalculatePos+0x320>)
 800395c:	60d3      	str	r3, [r2, #12]
  hJoystick.angular = hJoystick.magnitude/JoystickMagnitudeMax * cos(hJoystick.angle);
 800395e:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <joystickCalculatePos+0x320>)
 8003960:	ed93 7a01 	vldr	s14, [r3, #4]
 8003964:	eddf 7a35 	vldr	s15, [pc, #212]	; 8003a3c <joystickCalculatePos+0x324>
 8003968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800396c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003970:	ee16 0a90 	vmov	r0, s13
 8003974:	f7fc fda0 	bl	80004b8 <__aeabi_f2d>
 8003978:	4604      	mov	r4, r0
 800397a:	460d      	mov	r5, r1
 800397c:	4b2e      	ldr	r3, [pc, #184]	; (8003a38 <joystickCalculatePos+0x320>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc fd99 	bl	80004b8 <__aeabi_f2d>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	ec43 2b10 	vmov	d0, r2, r3
 800398e:	f006 f853 	bl	8009a38 <cos>
 8003992:	ec53 2b10 	vmov	r2, r3, d0
 8003996:	4620      	mov	r0, r4
 8003998:	4629      	mov	r1, r5
 800399a:	f7fc fde5 	bl	8000568 <__aeabi_dmul>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4610      	mov	r0, r2
 80039a4:	4619      	mov	r1, r3
 80039a6:	f7fd f8d7 	bl	8000b58 <__aeabi_d2f>
 80039aa:	4603      	mov	r3, r0
 80039ac:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <joystickCalculatePos+0x320>)
 80039ae:	6113      	str	r3, [r2, #16]

  if (fabs(hJoystick.linear) < 0.05)
 80039b0:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <joystickCalculatePos+0x320>)
 80039b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80039b6:	eef0 7ae7 	vabs.f32	s15, s15
 80039ba:	ee17 0a90 	vmov	r0, s15
 80039be:	f7fc fd7b 	bl	80004b8 <__aeabi_f2d>
 80039c2:	a317      	add	r3, pc, #92	; (adr r3, 8003a20 <joystickCalculatePos+0x308>)
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f7fd f840 	bl	8000a4c <__aeabi_dcmplt>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <joystickCalculatePos+0x2c2>
    hJoystick.linear = 0;
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <joystickCalculatePos+0x320>)
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	60da      	str	r2, [r3, #12]
  if (fabs(hJoystick.angular) < 0.05)
 80039da:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <joystickCalculatePos+0x320>)
 80039dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80039e0:	eef0 7ae7 	vabs.f32	s15, s15
 80039e4:	ee17 0a90 	vmov	r0, s15
 80039e8:	f7fc fd66 	bl	80004b8 <__aeabi_f2d>
 80039ec:	a30c      	add	r3, pc, #48	; (adr r3, 8003a20 <joystickCalculatePos+0x308>)
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f7fd f82b 	bl	8000a4c <__aeabi_dcmplt>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <joystickCalculatePos+0x2ec>
    hJoystick.angular = 0;
 80039fc:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <joystickCalculatePos+0x320>)
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]

  joy_pos_buffer_cnt++;
 8003a04:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <joystickCalculatePos+0x310>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	4a07      	ldr	r2, [pc, #28]	; (8003a28 <joystickCalculatePos+0x310>)
 8003a0c:	6013      	str	r3, [r2, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bdb0      	pop	{r4, r5, r7, pc}
 8003a16:	bf00      	nop
 8003a18:	00000000 	.word	0x00000000
 8003a1c:	40000000 	.word	0x40000000
 8003a20:	9999999a 	.word	0x9999999a
 8003a24:	3fa99999 	.word	0x3fa99999
 8003a28:	200002bc 	.word	0x200002bc
 8003a2c:	200005a4 	.word	0x200005a4
 8003a30:	20000294 	.word	0x20000294
 8003a34:	200004d0 	.word	0x200004d0
 8003a38:	2000074c 	.word	0x2000074c
 8003a3c:	00002af8 	.word	0x00002af8
 8003a40:	3fc8f5c3 	.word	0x3fc8f5c3
 8003a44:	3dcccccd 	.word	0x3dcccccd
 8003a48:	3fc8f5c3 	.word	0x3fc8f5c3

08003a4c <wheelSpeedControl_Init>:

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a58:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <wheel_Control>:

void wheel_Control(WheelSpeed* wheel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  if (wheel->stable_cnt < 100)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b63      	cmp	r3, #99	; 0x63
 8003aae:	dc05      	bgt.n	8003abc <wheel_Control+0x1c>
  {
      wheel->stable_cnt++;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	611a      	str	r2, [r3, #16]
    return;
 8003aba:	e1cd      	b.n	8003e58 <wheel_Control+0x3b8>
  }

  joystickCalculatePos();
 8003abc:	f7ff fe2c 	bl	8003718 <joystickCalculatePos>
  wheelCalculateSpeed(wheel);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f9cd 	bl	8003e60 <wheelCalculateSpeed>

  if (wheel->pre_l == 0 && wheel->pre_r == 0)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003acc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	d10a      	bne.n	8003aec <wheel_Control+0x4c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	edd3 7a03 	vldr	s15, [r3, #12]
 8003adc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae4:	d102      	bne.n	8003aec <wheel_Control+0x4c>
    wheel->start_from_stationary = true;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	771a      	strb	r2, [r3, #28]

  if (hJoystick.magnitude > JoystickMagnitudeMin)
 8003aec:	4bae      	ldr	r3, [pc, #696]	; (8003da8 <wheel_Control+0x308>)
 8003aee:	ed93 7a01 	vldr	s14, [r3, #4]
 8003af2:	eddf 7aae 	vldr	s15, [pc, #696]	; 8003dac <wheel_Control+0x30c>
 8003af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b02:	f340 80b3 	ble.w	8003c6c <wheel_Control+0x1cc>
  {
    float left_speed_step = wheel->left_speed_step;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	61fb      	str	r3, [r7, #28]
    float right_speed_step = wheel->right_speed_step;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	61bb      	str	r3, [r7, #24]

    if (wheel->start_from_stationary)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	7f1b      	ldrb	r3, [r3, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d03c      	beq.n	8003b94 <wheel_Control+0xf4>
    {
//      float accel_loop = 100.0f;
      left_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	edd3 7a00 	vldr	s15, [r3]
 8003b20:	eef0 6ae7 	vabs.f32	s13, s15
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      right_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	edd3 7a00 	vldr	s15, [r3]
 8003b38:	eef0 6ae7 	vabs.f32	s13, s15
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b46:	edc7 7a06 	vstr	s15, [r7, #24]

      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b50:	eeb0 7ae7 	vabs.f32	s14, s15
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b5a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003b5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6a:	dd13      	ble.n	8003b94 <wheel_Control+0xf4>
          fabs(wheel->pre_r) > 0.5f * wheel->max_angular_speed)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b72:	eeb0 7ae7 	vabs.f32	s14, s15
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b7c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003b80:	ee67 7aa6 	vmul.f32	s15, s15, s13
      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8003b84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8c:	dd02      	ble.n	8003b94 <wheel_Control+0xf4>
      {
	  wheel->start_from_stationary = false;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]
      }
    }

    if (( wheel->cur_l - wheel->pre_l) > left_speed_step)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	ed93 7a00 	vldr	s14, [r3]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ba4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb0:	d50a      	bpl.n	8003bc8 <wheel_Control+0x128>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	edc3 7a00 	vstr	s15, [r3]
 8003bc6:	e01a      	b.n	8003bfe <wheel_Control+0x15e>
    else if ((wheel->cur_l - wheel->pre_l) < -left_speed_step)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	ed93 7a00 	vldr	s14, [r3]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bdc:	eef1 7a67 	vneg.f32	s15, s15
 8003be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be8:	d509      	bpl.n	8003bfe <wheel_Control+0x15e>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	edc3 7a00 	vstr	s15, [r3]

    if ((wheel->cur_r - wheel->pre_r) > right_speed_step)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c0e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1a:	d50a      	bpl.n	8003c32 <wheel_Control+0x192>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c22:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	edc3 7a01 	vstr	s15, [r3, #4]
 8003c30:	e0c2      	b.n	8003db8 <wheel_Control+0x318>
    else if ((wheel->cur_r - wheel->pre_r) < -right_speed_step)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c46:	eef1 7a67 	vneg.f32	s15, s15
 8003c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c52:	f140 80b1 	bpl.w	8003db8 <wheel_Control+0x318>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	edc3 7a01 	vstr	s15, [r3, #4]
 8003c6a:	e0a5      	b.n	8003db8 <wheel_Control+0x318>
  }
  else
  {
//    float decel_loop = 150.0f;

    float zero_speed = wheel->max_linear_speed / wheel->decel_loop;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	edd3 6a05 	vldr	s13, [r3, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c7c:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(wheel->cur_l) < zero_speed)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	edd3 7a00 	vldr	s15, [r3]
 8003c86:	eef0 7ae7 	vabs.f32	s15, s15
 8003c8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c96:	dd03      	ble.n	8003ca0 <wheel_Control+0x200>
      wheel->cur_l = 0;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
    if (fabs(wheel->cur_r) < zero_speed)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ca6:	eef0 7ae7 	vabs.f32	s15, s15
 8003caa:	ed97 7a05 	vldr	s14, [r7, #20]
 8003cae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb6:	dd03      	ble.n	8003cc0 <wheel_Control+0x220>
      wheel->cur_r = 0;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	605a      	str	r2, [r3, #4]

    float left_speed_step = fabs(wheel->cur_l) / wheel->decel_loop;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	edd3 7a00 	vldr	s15, [r3]
 8003cc6:	eef0 6ae7 	vabs.f32	s13, s15
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd4:	edc7 7a04 	vstr	s15, [r7, #16]
    float right_speed_step = fabs(wheel->cur_r) / wheel->decel_loop;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cde:	eef0 6ae7 	vabs.f32	s13, s15
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cec:	edc7 7a03 	vstr	s15, [r7, #12]
    
    if (wheel->cur_l > left_speed_step)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	edd3 7a00 	vldr	s15, [r3]
 8003cf6:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	d50a      	bpl.n	8003d1a <wheel_Control+0x27a>
      wheel->cur_l = wheel->pre_r - left_speed_step;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	edc3 7a00 	vstr	s15, [r3]
 8003d18:	e01a      	b.n	8003d50 <wheel_Control+0x2b0>
    else if (wheel->cur_l < -left_speed_step)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	ed93 7a00 	vldr	s14, [r3]
 8003d20:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d24:	eef1 7a67 	vneg.f32	s15, s15
 8003d28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d30:	d50a      	bpl.n	8003d48 <wheel_Control+0x2a8>
      wheel->cur_l = wheel->pre_r + left_speed_step;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d38:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	edc3 7a00 	vstr	s15, [r3]
 8003d46:	e003      	b.n	8003d50 <wheel_Control+0x2b0>
    else
      wheel->cur_l = 0;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
    
    if (wheel->cur_r > right_speed_step)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d56:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d62:	d50a      	bpl.n	8003d7a <wheel_Control+0x2da>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	edc3 7a01 	vstr	s15, [r3, #4]
 8003d78:	e01e      	b.n	8003db8 <wheel_Control+0x318>
    else if (wheel->cur_r < -right_speed_step)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d80:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d84:	eef1 7a67 	vneg.f32	s15, s15
 8003d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d90:	d50e      	bpl.n	8003db0 <wheel_Control+0x310>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d98:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	edc3 7a01 	vstr	s15, [r3, #4]
 8003da6:	e007      	b.n	8003db8 <wheel_Control+0x318>
 8003da8:	2000074c 	.word	0x2000074c
 8003dac:	00000bb8 	.word	0x00000bb8
    else
      wheel->cur_r = 0;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	605a      	str	r2, [r3, #4]
  }

  if (wheel->cur_l > wheel->max_linear_speed)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	ed93 7a00 	vldr	s14, [r3]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8003dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dcc:	dd03      	ble.n	8003dd6 <wheel_Control+0x336>
    wheel->cur_l = wheel->max_linear_speed;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	601a      	str	r2, [r3, #0]
  if (wheel->cur_r > wheel->max_linear_speed)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	edd3 7a05 	vldr	s15, [r3, #20]
 8003de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dea:	dd03      	ble.n	8003df4 <wheel_Control+0x354>
    wheel->cur_r = wheel->max_linear_speed;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	605a      	str	r2, [r3, #4]

  if (wheel->cur_l < -wheel->max_linear_speed)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	ed93 7a00 	vldr	s14, [r3]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e00:	eef1 7a67 	vneg.f32	s15, s15
 8003e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0c:	d507      	bpl.n	8003e1e <wheel_Control+0x37e>
    wheel->cur_l = -wheel->max_linear_speed;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e14:	eef1 7a67 	vneg.f32	s15, s15
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	edc3 7a00 	vstr	s15, [r3]
  if (wheel->cur_r < -wheel->max_linear_speed)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e2a:	eef1 7a67 	vneg.f32	s15, s15
 8003e2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e36:	d507      	bpl.n	8003e48 <wheel_Control+0x3a8>
    wheel->cur_r = -wheel->max_linear_speed;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e3e:	eef1 7a67 	vneg.f32	s15, s15
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	edc3 7a01 	vstr	s15, [r3, #4]

  wheel->pre_l = wheel->cur_l;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
  wheel->pre_r = wheel->cur_r;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]
  
}
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop

08003e60 <wheelCalculateSpeed>:



void wheelCalculateSpeed(WheelSpeed* wheel)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  float linearSpeed = wheel->max_linear_speed * hJoystick.linear;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	ed93 7a05 	vldr	s14, [r3, #20]
 8003e6e:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <wheelCalculateSpeed+0xa4>)
 8003e70:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e78:	edc7 7a03 	vstr	s15, [r7, #12]
  float angularSpeed = wheel->max_angular_speed *  hJoystick.angular;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003e82:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <wheelCalculateSpeed+0xa4>)
 8003e84:	edd3 7a04 	vldr	s15, [r3, #16]
 8003e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8c:	edc7 7a02 	vstr	s15, [r7, #8]

  wheel->cur_l = linearSpeed + angularSpeed;
 8003e90:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	edc3 7a00 	vstr	s15, [r3]
  wheel->cur_r = linearSpeed - angularSpeed;
 8003ea2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ea6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	edc3 7a01 	vstr	s15, [r3, #4]

  // direct step to 0 if speed is small enough
  if(fabs(wheel->cur_l) < 50)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	edd3 7a00 	vldr	s15, [r3]
 8003eba:	eef0 7ae7 	vabs.f32	s15, s15
 8003ebe:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003f08 <wheelCalculateSpeed+0xa8>
 8003ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eca:	d503      	bpl.n	8003ed4 <wheelCalculateSpeed+0x74>
    wheel->cur_l = 0;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
  if(fabs(  wheel->cur_r) < 50)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eda:	eef0 7ae7 	vabs.f32	s15, s15
 8003ede:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003f08 <wheelCalculateSpeed+0xa8>
 8003ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eea:	d400      	bmi.n	8003eee <wheelCalculateSpeed+0x8e>
    wheel->cur_r = 0;
}
 8003eec:	e003      	b.n	8003ef6 <wheelCalculateSpeed+0x96>
    wheel->cur_r = 0;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	605a      	str	r2, [r3, #4]
}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	2000074c 	.word	0x2000074c
 8003f08:	42480000 	.word	0x42480000

08003f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f44 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f12:	e003      	b.n	8003f1c <LoopCopyDataInit>

08003f14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f1a:	3104      	adds	r1, #4

08003f1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f1c:	480b      	ldr	r0, [pc, #44]	; (8003f4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f24:	d3f6      	bcc.n	8003f14 <CopyDataInit>
  ldr  r2, =_sbss
 8003f26:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f28:	e002      	b.n	8003f30 <LoopFillZerobss>

08003f2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f2c:	f842 3b04 	str.w	r3, [r2], #4

08003f30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f34:	d3f9      	bcc.n	8003f2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f36:	f7fe ffdd 	bl	8002ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f3a:	f005 fbaf 	bl	800969c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f3e:	f7fe f81d 	bl	8001f7c <main>
  bx  lr    
 8003f42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003f44:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003f48:	0800bea8 	.word	0x0800bea8
  ldr  r0, =_sdata
 8003f4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f50:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 8003f54:	20000258 	.word	0x20000258
  ldr  r3, = _ebss
 8003f58:	20000764 	.word	0x20000764

08003f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f5c:	e7fe      	b.n	8003f5c <ADC_IRQHandler>
	...

08003f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <HAL_Init+0x40>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a0d      	ldr	r2, [pc, #52]	; (8003fa0 <HAL_Init+0x40>)
 8003f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_Init+0x40>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <HAL_Init+0x40>)
 8003f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f7c:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <HAL_Init+0x40>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a07      	ldr	r2, [pc, #28]	; (8003fa0 <HAL_Init+0x40>)
 8003f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f88:	2003      	movs	r0, #3
 8003f8a:	f000 fe63 	bl	8004c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f8e:	2000      	movs	r0, #0
 8003f90:	f000 f808 	bl	8003fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f94:	f7fe ff32 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023c00 	.word	0x40023c00

08003fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fac:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <HAL_InitTick+0x54>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_InitTick+0x58>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fe7b 	bl	8004cbe <HAL_SYSTICK_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e00e      	b.n	8003ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b0f      	cmp	r3, #15
 8003fd6:	d80a      	bhi.n	8003fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fd8:	2200      	movs	r2, #0
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe0:	f000 fe43 	bl	8004c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fe4:	4a06      	ldr	r2, [pc, #24]	; (8004000 <HAL_InitTick+0x5c>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	200001e0 	.word	0x200001e0
 8003ffc:	200001e8 	.word	0x200001e8
 8004000:	200001e4 	.word	0x200001e4

08004004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_IncTick+0x20>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_IncTick+0x24>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4413      	add	r3, r2
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_IncTick+0x24>)
 8004016:	6013      	str	r3, [r2, #0]
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	200001e8 	.word	0x200001e8
 8004028:	20000760 	.word	0x20000760

0800402c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return uwTick;
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_GetTick+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000760 	.word	0x20000760

08004044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800404c:	f7ff ffee 	bl	800402c <HAL_GetTick>
 8004050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800405c:	d005      	beq.n	800406a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_Delay+0x44>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800406a:	bf00      	nop
 800406c:	f7ff ffde 	bl	800402c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	429a      	cmp	r2, r3
 800407a:	d8f7      	bhi.n	800406c <HAL_Delay+0x28>
  {
  }
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200001e8 	.word	0x200001e8

0800408c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e0ed      	b.n	800427a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fd fc34 	bl	8001918 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0202 	bic.w	r2, r2, #2
 80040be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040c0:	f7ff ffb4 	bl	800402c <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040c6:	e012      	b.n	80040ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040c8:	f7ff ffb0 	bl	800402c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b0a      	cmp	r3, #10
 80040d4:	d90b      	bls.n	80040ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2205      	movs	r2, #5
 80040e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e0c5      	b.n	800427a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e5      	bne.n	80040c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800410c:	f7ff ff8e 	bl	800402c <HAL_GetTick>
 8004110:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004112:	e012      	b.n	800413a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004114:	f7ff ff8a 	bl	800402c <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b0a      	cmp	r3, #10
 8004120:	d90b      	bls.n	800413a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2205      	movs	r2, #5
 8004132:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e09f      	b.n	800427a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0e5      	beq.n	8004114 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	7e1b      	ldrb	r3, [r3, #24]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d108      	bne.n	8004162 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e007      	b.n	8004172 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004170:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	7e5b      	ldrb	r3, [r3, #25]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d108      	bne.n	800418c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e007      	b.n	800419c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7e9b      	ldrb	r3, [r3, #26]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d108      	bne.n	80041b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0220 	orr.w	r2, r2, #32
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e007      	b.n	80041c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0220 	bic.w	r2, r2, #32
 80041c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	7edb      	ldrb	r3, [r3, #27]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d108      	bne.n	80041e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0210 	bic.w	r2, r2, #16
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e007      	b.n	80041f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0210 	orr.w	r2, r2, #16
 80041ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7f1b      	ldrb	r3, [r3, #28]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d108      	bne.n	800420a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0208 	orr.w	r2, r2, #8
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e007      	b.n	800421a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0208 	bic.w	r2, r2, #8
 8004218:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7f5b      	ldrb	r3, [r3, #29]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d108      	bne.n	8004234 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0204 	orr.w	r2, r2, #4
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e007      	b.n	8004244 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0204 	bic.w	r2, r2, #4
 8004242:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	ea42 0103 	orr.w	r1, r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800429a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d003      	beq.n	80042aa <HAL_CAN_ConfigFilter+0x26>
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	f040 80be 	bne.w	8004426 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80042aa:	4b65      	ldr	r3, [pc, #404]	; (8004440 <HAL_CAN_ConfigFilter+0x1bc>)
 80042ac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042b4:	f043 0201 	orr.w	r2, r3, #1
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	431a      	orrs	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	2201      	movs	r2, #1
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	401a      	ands	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d123      	bne.n	8004354 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	43db      	mvns	r3, r3
 8004316:	401a      	ands	r2, r3
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800432e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3248      	adds	r2, #72	; 0x48
 8004334:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004348:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800434a:	6979      	ldr	r1, [r7, #20]
 800434c:	3348      	adds	r3, #72	; 0x48
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	440b      	add	r3, r1
 8004352:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d122      	bne.n	80043a2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	431a      	orrs	r2, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800437c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3248      	adds	r2, #72	; 0x48
 8004382:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004396:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004398:	6979      	ldr	r1, [r7, #20]
 800439a:	3348      	adds	r3, #72	; 0x48
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	440b      	add	r3, r1
 80043a0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	43db      	mvns	r3, r3
 80043b4:	401a      	ands	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80043bc:	e007      	b.n	80043ce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	43db      	mvns	r3, r3
 80043e0:	401a      	ands	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80043e8:	e007      	b.n	80043fa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d107      	bne.n	8004412 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	431a      	orrs	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004418:	f023 0201 	bic.w	r2, r3, #1
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e006      	b.n	8004434 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
  }
}
 8004434:	4618      	mov	r0, r3
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40006400 	.word	0x40006400

08004444 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004458:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d003      	beq.n	8004468 <HAL_CAN_GetRxMessage+0x24>
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	2b02      	cmp	r3, #2
 8004464:	f040 80f3 	bne.w	800464e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10e      	bne.n	800448c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d116      	bne.n	80044aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0e7      	b.n	800465c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0d8      	b.n	800465c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	331b      	adds	r3, #27
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	4413      	add	r3, r2
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0204 	and.w	r2, r3, #4
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10c      	bne.n	80044e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	331b      	adds	r3, #27
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	4413      	add	r3, r2
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	0d5b      	lsrs	r3, r3, #21
 80044d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	e00b      	b.n	80044fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	331b      	adds	r3, #27
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	4413      	add	r3, r2
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	08db      	lsrs	r3, r3, #3
 80044f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	331b      	adds	r3, #27
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	4413      	add	r3, r2
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0202 	and.w	r2, r3, #2
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	331b      	adds	r3, #27
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	4413      	add	r3, r2
 800451c:	3304      	adds	r3, #4
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	331b      	adds	r3, #27
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	4413      	add	r3, r2
 8004534:	3304      	adds	r3, #4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0a1b      	lsrs	r3, r3, #8
 800453a:	b2da      	uxtb	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	331b      	adds	r3, #27
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	4413      	add	r3, r2
 800454c:	3304      	adds	r3, #4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	4413      	add	r3, r2
 8004562:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	4413      	add	r3, r2
 8004578:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	0a1a      	lsrs	r2, r3, #8
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	4413      	add	r3, r2
 8004592:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	0c1a      	lsrs	r2, r3, #16
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	3302      	adds	r3, #2
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	0e1a      	lsrs	r2, r3, #24
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	3303      	adds	r3, #3
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	3304      	adds	r3, #4
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	4413      	add	r3, r2
 80045de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	0a1a      	lsrs	r2, r3, #8
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	3305      	adds	r3, #5
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	0c1a      	lsrs	r2, r3, #16
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	3306      	adds	r3, #6
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	4413      	add	r3, r2
 8004612:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	0e1a      	lsrs	r2, r3, #24
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	3307      	adds	r3, #7
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d108      	bne.n	800463a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0220 	orr.w	r2, r2, #32
 8004636:	60da      	str	r2, [r3, #12]
 8004638:	e007      	b.n	800464a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0220 	orr.w	r2, r2, #32
 8004648:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e006      	b.n	800465c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004670:	2300      	movs	r3, #0
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d07c      	beq.n	80047a8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d023      	beq.n	8004700 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2201      	movs	r2, #1
 80046be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f983 	bl	80049d6 <HAL_CAN_TxMailbox0CompleteCallback>
 80046d0:	e016      	b.n	8004700 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
 80046e4:	e00c      	b.n	8004700 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d004      	beq.n	80046fa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
 80046f8:	e002      	b.n	8004700 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f989 	bl	8004a12 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d024      	beq.n	8004754 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004712:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f963 	bl	80049ea <HAL_CAN_TxMailbox1CompleteCallback>
 8004724:	e016      	b.n	8004754 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472c:	2b00      	cmp	r3, #0
 800472e:	d004      	beq.n	800473a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
 8004738:	e00c      	b.n	8004754 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
 800474c:	e002      	b.n	8004754 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f969 	bl	8004a26 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d024      	beq.n	80047a8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004766:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f943 	bl	80049fe <HAL_CAN_TxMailbox2CompleteCallback>
 8004778:	e016      	b.n	80047a8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d004      	beq.n	800478e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
 800478c:	e00c      	b.n	80047a8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
 80047a0:	e002      	b.n	80047a8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f949 	bl	8004a3a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00c      	beq.n	80047cc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2210      	movs	r2, #16
 80047ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d006      	beq.n	80047ee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2208      	movs	r2, #8
 80047e6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f930 	bl	8004a4e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d009      	beq.n	800480c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fd fe92 	bl	8002530 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004826:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2210      	movs	r2, #16
 800482e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2208      	movs	r2, #8
 800484a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f908 	bl	8004a62 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d009      	beq.n	8004870 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd fe82 	bl	8002574 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2210      	movs	r2, #16
 800488a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f8f2 	bl	8004a76 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00b      	beq.n	80048b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2208      	movs	r2, #8
 80048ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f8eb 	bl	8004a8a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d07b      	beq.n	80049b6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d072      	beq.n	80049ae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	f043 0302 	orr.w	r3, r3, #2
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004906:	2b00      	cmp	r3, #0
 8004908:	d008      	beq.n	800491c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	f043 0304 	orr.w	r3, r3, #4
 800491a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004922:	2b00      	cmp	r3, #0
 8004924:	d043      	beq.n	80049ae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800492c:	2b00      	cmp	r3, #0
 800492e:	d03e      	beq.n	80049ae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004936:	2b60      	cmp	r3, #96	; 0x60
 8004938:	d02b      	beq.n	8004992 <HAL_CAN_IRQHandler+0x32a>
 800493a:	2b60      	cmp	r3, #96	; 0x60
 800493c:	d82e      	bhi.n	800499c <HAL_CAN_IRQHandler+0x334>
 800493e:	2b50      	cmp	r3, #80	; 0x50
 8004940:	d022      	beq.n	8004988 <HAL_CAN_IRQHandler+0x320>
 8004942:	2b50      	cmp	r3, #80	; 0x50
 8004944:	d82a      	bhi.n	800499c <HAL_CAN_IRQHandler+0x334>
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d019      	beq.n	800497e <HAL_CAN_IRQHandler+0x316>
 800494a:	2b40      	cmp	r3, #64	; 0x40
 800494c:	d826      	bhi.n	800499c <HAL_CAN_IRQHandler+0x334>
 800494e:	2b30      	cmp	r3, #48	; 0x30
 8004950:	d010      	beq.n	8004974 <HAL_CAN_IRQHandler+0x30c>
 8004952:	2b30      	cmp	r3, #48	; 0x30
 8004954:	d822      	bhi.n	800499c <HAL_CAN_IRQHandler+0x334>
 8004956:	2b10      	cmp	r3, #16
 8004958:	d002      	beq.n	8004960 <HAL_CAN_IRQHandler+0x2f8>
 800495a:	2b20      	cmp	r3, #32
 800495c:	d005      	beq.n	800496a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800495e:	e01d      	b.n	800499c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	f043 0308 	orr.w	r3, r3, #8
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004968:	e019      	b.n	800499e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	f043 0310 	orr.w	r3, r3, #16
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004972:	e014      	b.n	800499e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	f043 0320 	orr.w	r3, r3, #32
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800497c:	e00f      	b.n	800499e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004986:	e00a      	b.n	800499e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004990:	e005      	b.n	800499e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800499a:	e000      	b.n	800499e <HAL_CAN_IRQHandler+0x336>
            break;
 800499c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80049ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2204      	movs	r2, #4
 80049b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f868 	bl	8004a9e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80049ce:	bf00      	nop
 80049d0:	3728      	adds	r7, #40	; 0x28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ae6:	4a04      	ldr	r2, [pc, #16]	; (8004af8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	60d3      	str	r3, [r2, #12]
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b00:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <__NVIC_GetPriorityGrouping+0x18>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	f003 0307 	and.w	r3, r3, #7
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	e000ed00 	.word	0xe000ed00

08004b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	db0b      	blt.n	8004b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	f003 021f 	and.w	r2, r3, #31
 8004b30:	4907      	ldr	r1, [pc, #28]	; (8004b50 <__NVIC_EnableIRQ+0x38>)
 8004b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2001      	movs	r0, #1
 8004b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	e000e100 	.word	0xe000e100

08004b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	6039      	str	r1, [r7, #0]
 8004b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	db0a      	blt.n	8004b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	490c      	ldr	r1, [pc, #48]	; (8004ba0 <__NVIC_SetPriority+0x4c>)
 8004b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b72:	0112      	lsls	r2, r2, #4
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	440b      	add	r3, r1
 8004b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b7c:	e00a      	b.n	8004b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4908      	ldr	r1, [pc, #32]	; (8004ba4 <__NVIC_SetPriority+0x50>)
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	3b04      	subs	r3, #4
 8004b8c:	0112      	lsls	r2, r2, #4
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	440b      	add	r3, r1
 8004b92:	761a      	strb	r2, [r3, #24]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	e000e100 	.word	0xe000e100
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b089      	sub	sp, #36	; 0x24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f1c3 0307 	rsb	r3, r3, #7
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	bf28      	it	cs
 8004bc6:	2304      	movcs	r3, #4
 8004bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	2b06      	cmp	r3, #6
 8004bd0:	d902      	bls.n	8004bd8 <NVIC_EncodePriority+0x30>
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3b03      	subs	r3, #3
 8004bd6:	e000      	b.n	8004bda <NVIC_EncodePriority+0x32>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43da      	mvns	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	401a      	ands	r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfa:	43d9      	mvns	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c00:	4313      	orrs	r3, r2
         );
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3724      	adds	r7, #36	; 0x24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c20:	d301      	bcc.n	8004c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c22:	2301      	movs	r3, #1
 8004c24:	e00f      	b.n	8004c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c26:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <SysTick_Config+0x40>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c2e:	210f      	movs	r1, #15
 8004c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c34:	f7ff ff8e 	bl	8004b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <SysTick_Config+0x40>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c3e:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <SysTick_Config+0x40>)
 8004c40:	2207      	movs	r2, #7
 8004c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	e000e010 	.word	0xe000e010

08004c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ff29 	bl	8004ab4 <__NVIC_SetPriorityGrouping>
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	4603      	mov	r3, r0
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c7c:	f7ff ff3e 	bl	8004afc <__NVIC_GetPriorityGrouping>
 8004c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	6978      	ldr	r0, [r7, #20]
 8004c88:	f7ff ff8e 	bl	8004ba8 <NVIC_EncodePriority>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff ff5d 	bl	8004b54 <__NVIC_SetPriority>
}
 8004c9a:	bf00      	nop
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	4603      	mov	r3, r0
 8004caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ff31 	bl	8004b18 <__NVIC_EnableIRQ>
}
 8004cb6:	bf00      	nop
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7ff ffa2 	bl	8004c10 <SysTick_Config>
 8004ccc:	4603      	mov	r3, r0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d106      	bne.n	8004cf4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004ce6:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004cec:	f043 0304 	orr.w	r3, r3, #4
 8004cf0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004cf2:	e005      	b.n	8004d00 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a04      	ldr	r2, [pc, #16]	; (8004d0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004cfa:	f023 0304 	bic.w	r3, r3, #4
 8004cfe:	6013      	str	r3, [r2, #0]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	e000e010 	.word	0xe000e010

08004d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d1c:	f7ff f986 	bl	800402c <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e099      	b.n	8004e60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d4c:	e00f      	b.n	8004d6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d4e:	f7ff f96d 	bl	800402c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b05      	cmp	r3, #5
 8004d5a:	d908      	bls.n	8004d6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2203      	movs	r2, #3
 8004d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e078      	b.n	8004e60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e8      	bne.n	8004d4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4b38      	ldr	r3, [pc, #224]	; (8004e68 <HAL_DMA_Init+0x158>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d107      	bne.n	8004dd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f023 0307 	bic.w	r3, r3, #7
 8004dee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d117      	bne.n	8004e32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00e      	beq.n	8004e32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fa6f 	bl	80052f8 <DMA_CheckFifoParam>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2240      	movs	r2, #64	; 0x40
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e016      	b.n	8004e60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa26 	bl	800528c <DMA_CalcBaseAndBitshift>
 8004e40:	4603      	mov	r3, r0
 8004e42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e48:	223f      	movs	r2, #63	; 0x3f
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	f010803f 	.word	0xf010803f

08004e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_DMA_Start_IT+0x26>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e040      	b.n	8004f14 <HAL_DMA_Start_IT+0xa8>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d12f      	bne.n	8004f06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f9b8 	bl	8005230 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	223f      	movs	r2, #63	; 0x3f
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0216 	orr.w	r2, r2, #22
 8004eda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0208 	orr.w	r2, r2, #8
 8004ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e005      	b.n	8004f12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f28:	4b92      	ldr	r3, [pc, #584]	; (8005174 <HAL_DMA_IRQHandler+0x258>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a92      	ldr	r2, [pc, #584]	; (8005178 <HAL_DMA_IRQHandler+0x25c>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	0a9b      	lsrs	r3, r3, #10
 8004f34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f46:	2208      	movs	r2, #8
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01a      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0204 	bic.w	r2, r2, #4
 8004f6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f74:	2208      	movs	r2, #8
 8004f76:	409a      	lsls	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	f043 0201 	orr.w	r2, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d012      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	2201      	movs	r2, #1
 8004fac:	409a      	lsls	r2, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb6:	f043 0202 	orr.w	r2, r3, #2
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d012      	beq.n	8004ff4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fec:	f043 0204 	orr.w	r2, r3, #4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff8:	2210      	movs	r2, #16
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d043      	beq.n	800508c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d03c      	beq.n	800508c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005016:	2210      	movs	r2, #16
 8005018:	409a      	lsls	r2, r3
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d018      	beq.n	800505e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d108      	bne.n	800504c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d024      	beq.n	800508c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
 800504a:	e01f      	b.n	800508c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	4798      	blx	r3
 800505c:	e016      	b.n	800508c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d107      	bne.n	800507c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0208 	bic.w	r2, r2, #8
 800507a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005090:	2220      	movs	r2, #32
 8005092:	409a      	lsls	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4013      	ands	r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 808e 	beq.w	80051ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8086 	beq.w	80051ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b2:	2220      	movs	r2, #32
 80050b4:	409a      	lsls	r2, r3
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b05      	cmp	r3, #5
 80050c4:	d136      	bne.n	8005134 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0216 	bic.w	r2, r2, #22
 80050d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <HAL_DMA_IRQHandler+0x1da>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0208 	bic.w	r2, r2, #8
 8005104:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510a:	223f      	movs	r2, #63	; 0x3f
 800510c:	409a      	lsls	r2, r3
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005126:	2b00      	cmp	r3, #0
 8005128:	d07d      	beq.n	8005226 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
        }
        return;
 8005132:	e078      	b.n	8005226 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d01c      	beq.n	800517c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d108      	bne.n	8005162 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005154:	2b00      	cmp	r3, #0
 8005156:	d030      	beq.n	80051ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
 8005160:	e02b      	b.n	80051ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d027      	beq.n	80051ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
 8005172:	e022      	b.n	80051ba <HAL_DMA_IRQHandler+0x29e>
 8005174:	200001e0 	.word	0x200001e0
 8005178:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10f      	bne.n	80051aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0210 	bic.w	r2, r2, #16
 8005198:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d032      	beq.n	8005228 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d022      	beq.n	8005214 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2205      	movs	r2, #5
 80051d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	3301      	adds	r3, #1
 80051ea:	60bb      	str	r3, [r7, #8]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d307      	bcc.n	8005202 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f2      	bne.n	80051e6 <HAL_DMA_IRQHandler+0x2ca>
 8005200:	e000      	b.n	8005204 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005202:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	4798      	blx	r3
 8005224:	e000      	b.n	8005228 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005226:	bf00      	nop
    }
  }
}
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop

08005230 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800524c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d108      	bne.n	8005270 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800526e:	e007      	b.n	8005280 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	60da      	str	r2, [r3, #12]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	3b10      	subs	r3, #16
 800529c:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <DMA_CalcBaseAndBitshift+0x64>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052a6:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <DMA_CalcBaseAndBitshift+0x68>)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d909      	bls.n	80052ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	1d1a      	adds	r2, r3, #4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	659a      	str	r2, [r3, #88]	; 0x58
 80052cc:	e007      	b.n	80052de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	aaaaaaab 	.word	0xaaaaaaab
 80052f4:	0800bc00 	.word	0x0800bc00

080052f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d11f      	bne.n	8005352 <DMA_CheckFifoParam+0x5a>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d856      	bhi.n	80053c6 <DMA_CheckFifoParam+0xce>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <DMA_CheckFifoParam+0x28>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005331 	.word	0x08005331
 8005324:	08005343 	.word	0x08005343
 8005328:	08005331 	.word	0x08005331
 800532c:	080053c7 	.word	0x080053c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d046      	beq.n	80053ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005340:	e043      	b.n	80053ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800534a:	d140      	bne.n	80053ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005350:	e03d      	b.n	80053ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535a:	d121      	bne.n	80053a0 <DMA_CheckFifoParam+0xa8>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b03      	cmp	r3, #3
 8005360:	d837      	bhi.n	80053d2 <DMA_CheckFifoParam+0xda>
 8005362:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <DMA_CheckFifoParam+0x70>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	08005379 	.word	0x08005379
 800536c:	0800537f 	.word	0x0800537f
 8005370:	08005379 	.word	0x08005379
 8005374:	08005391 	.word	0x08005391
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
      break;
 800537c:	e030      	b.n	80053e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d025      	beq.n	80053d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800538e:	e022      	b.n	80053d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005398:	d11f      	bne.n	80053da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800539e:	e01c      	b.n	80053da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d903      	bls.n	80053ae <DMA_CheckFifoParam+0xb6>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d003      	beq.n	80053b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053ac:	e018      	b.n	80053e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	73fb      	strb	r3, [r7, #15]
      break;
 80053b2:	e015      	b.n	80053e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00e      	beq.n	80053de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
      break;
 80053c4:	e00b      	b.n	80053de <DMA_CheckFifoParam+0xe6>
      break;
 80053c6:	bf00      	nop
 80053c8:	e00a      	b.n	80053e0 <DMA_CheckFifoParam+0xe8>
      break;
 80053ca:	bf00      	nop
 80053cc:	e008      	b.n	80053e0 <DMA_CheckFifoParam+0xe8>
      break;
 80053ce:	bf00      	nop
 80053d0:	e006      	b.n	80053e0 <DMA_CheckFifoParam+0xe8>
      break;
 80053d2:	bf00      	nop
 80053d4:	e004      	b.n	80053e0 <DMA_CheckFifoParam+0xe8>
      break;
 80053d6:	bf00      	nop
 80053d8:	e002      	b.n	80053e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80053da:	bf00      	nop
 80053dc:	e000      	b.n	80053e0 <DMA_CheckFifoParam+0xe8>
      break;
 80053de:	bf00      	nop
    }
  } 
  
  return status; 
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop

080053f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	; 0x24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053fe:	2300      	movs	r3, #0
 8005400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005406:	2300      	movs	r3, #0
 8005408:	61fb      	str	r3, [r7, #28]
 800540a:	e177      	b.n	80056fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800540c:	2201      	movs	r2, #1
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4013      	ands	r3, r2
 800541e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	429a      	cmp	r2, r3
 8005426:	f040 8166 	bne.w	80056f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d00b      	beq.n	800544a <HAL_GPIO_Init+0x5a>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d007      	beq.n	800544a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800543e:	2b11      	cmp	r3, #17
 8005440:	d003      	beq.n	800544a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b12      	cmp	r3, #18
 8005448:	d130      	bne.n	80054ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	2203      	movs	r2, #3
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	43db      	mvns	r3, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4013      	ands	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4313      	orrs	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005480:	2201      	movs	r2, #1
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	4013      	ands	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 0201 	and.w	r2, r3, #1
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	2203      	movs	r2, #3
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	43db      	mvns	r3, r3
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	4013      	ands	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d003      	beq.n	80054ec <HAL_GPIO_Init+0xfc>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b12      	cmp	r3, #18
 80054ea:	d123      	bne.n	8005534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	08da      	lsrs	r2, r3, #3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3208      	adds	r2, #8
 80054f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	220f      	movs	r2, #15
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	43db      	mvns	r3, r3
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4013      	ands	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	08da      	lsrs	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3208      	adds	r2, #8
 800552e:	69b9      	ldr	r1, [r7, #24]
 8005530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	2203      	movs	r2, #3
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4013      	ands	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f003 0203 	and.w	r2, r3, #3
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80c0 	beq.w	80056f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	4b66      	ldr	r3, [pc, #408]	; (8005714 <HAL_GPIO_Init+0x324>)
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	4a65      	ldr	r2, [pc, #404]	; (8005714 <HAL_GPIO_Init+0x324>)
 8005580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005584:	6453      	str	r3, [r2, #68]	; 0x44
 8005586:	4b63      	ldr	r3, [pc, #396]	; (8005714 <HAL_GPIO_Init+0x324>)
 8005588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005592:	4a61      	ldr	r2, [pc, #388]	; (8005718 <HAL_GPIO_Init+0x328>)
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	089b      	lsrs	r3, r3, #2
 8005598:	3302      	adds	r3, #2
 800559a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	220f      	movs	r2, #15
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43db      	mvns	r3, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4013      	ands	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a58      	ldr	r2, [pc, #352]	; (800571c <HAL_GPIO_Init+0x32c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d037      	beq.n	800562e <HAL_GPIO_Init+0x23e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a57      	ldr	r2, [pc, #348]	; (8005720 <HAL_GPIO_Init+0x330>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d031      	beq.n	800562a <HAL_GPIO_Init+0x23a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a56      	ldr	r2, [pc, #344]	; (8005724 <HAL_GPIO_Init+0x334>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d02b      	beq.n	8005626 <HAL_GPIO_Init+0x236>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a55      	ldr	r2, [pc, #340]	; (8005728 <HAL_GPIO_Init+0x338>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d025      	beq.n	8005622 <HAL_GPIO_Init+0x232>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a54      	ldr	r2, [pc, #336]	; (800572c <HAL_GPIO_Init+0x33c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01f      	beq.n	800561e <HAL_GPIO_Init+0x22e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a53      	ldr	r2, [pc, #332]	; (8005730 <HAL_GPIO_Init+0x340>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d019      	beq.n	800561a <HAL_GPIO_Init+0x22a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a52      	ldr	r2, [pc, #328]	; (8005734 <HAL_GPIO_Init+0x344>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <HAL_GPIO_Init+0x226>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a51      	ldr	r2, [pc, #324]	; (8005738 <HAL_GPIO_Init+0x348>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00d      	beq.n	8005612 <HAL_GPIO_Init+0x222>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a50      	ldr	r2, [pc, #320]	; (800573c <HAL_GPIO_Init+0x34c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d007      	beq.n	800560e <HAL_GPIO_Init+0x21e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a4f      	ldr	r2, [pc, #316]	; (8005740 <HAL_GPIO_Init+0x350>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d101      	bne.n	800560a <HAL_GPIO_Init+0x21a>
 8005606:	2309      	movs	r3, #9
 8005608:	e012      	b.n	8005630 <HAL_GPIO_Init+0x240>
 800560a:	230a      	movs	r3, #10
 800560c:	e010      	b.n	8005630 <HAL_GPIO_Init+0x240>
 800560e:	2308      	movs	r3, #8
 8005610:	e00e      	b.n	8005630 <HAL_GPIO_Init+0x240>
 8005612:	2307      	movs	r3, #7
 8005614:	e00c      	b.n	8005630 <HAL_GPIO_Init+0x240>
 8005616:	2306      	movs	r3, #6
 8005618:	e00a      	b.n	8005630 <HAL_GPIO_Init+0x240>
 800561a:	2305      	movs	r3, #5
 800561c:	e008      	b.n	8005630 <HAL_GPIO_Init+0x240>
 800561e:	2304      	movs	r3, #4
 8005620:	e006      	b.n	8005630 <HAL_GPIO_Init+0x240>
 8005622:	2303      	movs	r3, #3
 8005624:	e004      	b.n	8005630 <HAL_GPIO_Init+0x240>
 8005626:	2302      	movs	r3, #2
 8005628:	e002      	b.n	8005630 <HAL_GPIO_Init+0x240>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <HAL_GPIO_Init+0x240>
 800562e:	2300      	movs	r3, #0
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	f002 0203 	and.w	r2, r2, #3
 8005636:	0092      	lsls	r2, r2, #2
 8005638:	4093      	lsls	r3, r2
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4313      	orrs	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005640:	4935      	ldr	r1, [pc, #212]	; (8005718 <HAL_GPIO_Init+0x328>)
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	089b      	lsrs	r3, r3, #2
 8005646:	3302      	adds	r3, #2
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800564e:	4b3d      	ldr	r3, [pc, #244]	; (8005744 <HAL_GPIO_Init+0x354>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	43db      	mvns	r3, r3
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4013      	ands	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005672:	4a34      	ldr	r2, [pc, #208]	; (8005744 <HAL_GPIO_Init+0x354>)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005678:	4b32      	ldr	r3, [pc, #200]	; (8005744 <HAL_GPIO_Init+0x354>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	43db      	mvns	r3, r3
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4013      	ands	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800569c:	4a29      	ldr	r2, [pc, #164]	; (8005744 <HAL_GPIO_Init+0x354>)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056a2:	4b28      	ldr	r3, [pc, #160]	; (8005744 <HAL_GPIO_Init+0x354>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	43db      	mvns	r3, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4013      	ands	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056c6:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <HAL_GPIO_Init+0x354>)
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HAL_GPIO_Init+0x354>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056f0:	4a14      	ldr	r2, [pc, #80]	; (8005744 <HAL_GPIO_Init+0x354>)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	3301      	adds	r3, #1
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2b0f      	cmp	r3, #15
 8005700:	f67f ae84 	bls.w	800540c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	3724      	adds	r7, #36	; 0x24
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40023800 	.word	0x40023800
 8005718:	40013800 	.word	0x40013800
 800571c:	40020000 	.word	0x40020000
 8005720:	40020400 	.word	0x40020400
 8005724:	40020800 	.word	0x40020800
 8005728:	40020c00 	.word	0x40020c00
 800572c:	40021000 	.word	0x40021000
 8005730:	40021400 	.word	0x40021400
 8005734:	40021800 	.word	0x40021800
 8005738:	40021c00 	.word	0x40021c00
 800573c:	40022000 	.word	0x40022000
 8005740:	40022400 	.word	0x40022400
 8005744:	40013c00 	.word	0x40013c00

08005748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	887b      	ldrh	r3, [r7, #2]
 800575a:	4013      	ands	r3, r2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	e001      	b.n	800576a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
 8005784:	4613      	mov	r3, r2
 8005786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005788:	787b      	ldrb	r3, [r7, #1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800578e:	887a      	ldrh	r2, [r7, #2]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005794:	e003      	b.n	800579e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005796:	887b      	ldrh	r3, [r7, #2]
 8005798:	041a      	lsls	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	619a      	str	r2, [r3, #24]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057b6:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	4013      	ands	r3, r2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d006      	beq.n	80057d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057c2:	4a05      	ldr	r2, [pc, #20]	; (80057d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fc fddc 	bl	8002388 <HAL_GPIO_EXTI_Callback>
  }
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40013c00 	.word	0x40013c00

080057dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e12b      	b.n	8005a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fc fb72 	bl	8001eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2224      	movs	r2, #36	; 0x24
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800582e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800583e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005840:	f001 fc98 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8005844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4a81      	ldr	r2, [pc, #516]	; (8005a50 <HAL_I2C_Init+0x274>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d807      	bhi.n	8005860 <HAL_I2C_Init+0x84>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a80      	ldr	r2, [pc, #512]	; (8005a54 <HAL_I2C_Init+0x278>)
 8005854:	4293      	cmp	r3, r2
 8005856:	bf94      	ite	ls
 8005858:	2301      	movls	r3, #1
 800585a:	2300      	movhi	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	e006      	b.n	800586e <HAL_I2C_Init+0x92>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a7d      	ldr	r2, [pc, #500]	; (8005a58 <HAL_I2C_Init+0x27c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	bf94      	ite	ls
 8005868:	2301      	movls	r3, #1
 800586a:	2300      	movhi	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e0e7      	b.n	8005a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a78      	ldr	r2, [pc, #480]	; (8005a5c <HAL_I2C_Init+0x280>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	0c9b      	lsrs	r3, r3, #18
 8005880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4a6a      	ldr	r2, [pc, #424]	; (8005a50 <HAL_I2C_Init+0x274>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d802      	bhi.n	80058b0 <HAL_I2C_Init+0xd4>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	3301      	adds	r3, #1
 80058ae:	e009      	b.n	80058c4 <HAL_I2C_Init+0xe8>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058b6:	fb02 f303 	mul.w	r3, r2, r3
 80058ba:	4a69      	ldr	r2, [pc, #420]	; (8005a60 <HAL_I2C_Init+0x284>)
 80058bc:	fba2 2303 	umull	r2, r3, r2, r3
 80058c0:	099b      	lsrs	r3, r3, #6
 80058c2:	3301      	adds	r3, #1
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	495c      	ldr	r1, [pc, #368]	; (8005a50 <HAL_I2C_Init+0x274>)
 80058e0:	428b      	cmp	r3, r1
 80058e2:	d819      	bhi.n	8005918 <HAL_I2C_Init+0x13c>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1e59      	subs	r1, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80058f2:	1c59      	adds	r1, r3, #1
 80058f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058f8:	400b      	ands	r3, r1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_I2C_Init+0x138>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1e59      	subs	r1, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	fbb1 f3f3 	udiv	r3, r1, r3
 800590c:	3301      	adds	r3, #1
 800590e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005912:	e051      	b.n	80059b8 <HAL_I2C_Init+0x1dc>
 8005914:	2304      	movs	r3, #4
 8005916:	e04f      	b.n	80059b8 <HAL_I2C_Init+0x1dc>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d111      	bne.n	8005944 <HAL_I2C_Init+0x168>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	1e58      	subs	r0, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6859      	ldr	r1, [r3, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	440b      	add	r3, r1
 800592e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005932:	3301      	adds	r3, #1
 8005934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005938:	2b00      	cmp	r3, #0
 800593a:	bf0c      	ite	eq
 800593c:	2301      	moveq	r3, #1
 800593e:	2300      	movne	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	e012      	b.n	800596a <HAL_I2C_Init+0x18e>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1e58      	subs	r0, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6859      	ldr	r1, [r3, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	0099      	lsls	r1, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	fbb0 f3f3 	udiv	r3, r0, r3
 800595a:	3301      	adds	r3, #1
 800595c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005960:	2b00      	cmp	r3, #0
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_I2C_Init+0x196>
 800596e:	2301      	movs	r3, #1
 8005970:	e022      	b.n	80059b8 <HAL_I2C_Init+0x1dc>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10e      	bne.n	8005998 <HAL_I2C_Init+0x1bc>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1e58      	subs	r0, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6859      	ldr	r1, [r3, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	440b      	add	r3, r1
 8005988:	fbb0 f3f3 	udiv	r3, r0, r3
 800598c:	3301      	adds	r3, #1
 800598e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005996:	e00f      	b.n	80059b8 <HAL_I2C_Init+0x1dc>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	1e58      	subs	r0, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6859      	ldr	r1, [r3, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	0099      	lsls	r1, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ae:	3301      	adds	r3, #1
 80059b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	6809      	ldr	r1, [r1, #0]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6911      	ldr	r1, [r2, #16]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68d2      	ldr	r2, [r2, #12]
 80059f2:	4311      	orrs	r1, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	000186a0 	.word	0x000186a0
 8005a54:	001e847f 	.word	0x001e847f
 8005a58:	003d08ff 	.word	0x003d08ff
 8005a5c:	431bde83 	.word	0x431bde83
 8005a60:	10624dd3 	.word	0x10624dd3

08005a64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	4611      	mov	r1, r2
 8005a70:	461a      	mov	r2, r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	817b      	strh	r3, [r7, #10]
 8005a76:	460b      	mov	r3, r1
 8005a78:	813b      	strh	r3, [r7, #8]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a7e:	f7fe fad5 	bl	800402c <HAL_GetTick>
 8005a82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	f040 80d9 	bne.w	8005c44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	2319      	movs	r3, #25
 8005a98:	2201      	movs	r2, #1
 8005a9a:	496d      	ldr	r1, [pc, #436]	; (8005c50 <HAL_I2C_Mem_Write+0x1ec>)
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fc7f 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e0cc      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_I2C_Mem_Write+0x56>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e0c5      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d007      	beq.n	8005ae0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2221      	movs	r2, #33	; 0x21
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2240      	movs	r2, #64	; 0x40
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a3a      	ldr	r2, [r7, #32]
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4a4d      	ldr	r2, [pc, #308]	; (8005c54 <HAL_I2C_Mem_Write+0x1f0>)
 8005b20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b22:	88f8      	ldrh	r0, [r7, #6]
 8005b24:	893a      	ldrh	r2, [r7, #8]
 8005b26:	8979      	ldrh	r1, [r7, #10]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	4603      	mov	r3, r0
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fab6 	bl	80060a4 <I2C_RequestMemoryWrite>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d052      	beq.n	8005be4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e081      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fd00 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d107      	bne.n	8005b6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e06b      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d11b      	bne.n	8005be4 <HAL_I2C_Mem_Write+0x180>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d017      	beq.n	8005be4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1aa      	bne.n	8005b42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fcec 	bl	80065ce <I2C_WaitOnBTFFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00d      	beq.n	8005c18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d107      	bne.n	8005c14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e016      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e000      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	00100002 	.word	0x00100002
 8005c54:	ffff0000 	.word	0xffff0000

08005c58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08c      	sub	sp, #48	; 0x30
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	4608      	mov	r0, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	461a      	mov	r2, r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	817b      	strh	r3, [r7, #10]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	813b      	strh	r3, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c72:	f7fe f9db 	bl	800402c <HAL_GetTick>
 8005c76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	f040 8208 	bne.w	8006096 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2319      	movs	r3, #25
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	497b      	ldr	r1, [pc, #492]	; (8005e7c <HAL_I2C_Mem_Read+0x224>)
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 fb85 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e1fb      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_I2C_Mem_Read+0x56>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e1f4      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d007      	beq.n	8005cd4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2222      	movs	r2, #34	; 0x22
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2240      	movs	r2, #64	; 0x40
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4a5b      	ldr	r2, [pc, #364]	; (8005e80 <HAL_I2C_Mem_Read+0x228>)
 8005d14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d16:	88f8      	ldrh	r0, [r7, #6]
 8005d18:	893a      	ldrh	r2, [r7, #8]
 8005d1a:	8979      	ldrh	r1, [r7, #10]
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	4603      	mov	r3, r0
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fa52 	bl	80061d0 <I2C_RequestMemoryRead>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e1b0      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d113      	bne.n	8005d66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3e:	2300      	movs	r3, #0
 8005d40:	623b      	str	r3, [r7, #32]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	623b      	str	r3, [r7, #32]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	623b      	str	r3, [r7, #32]
 8005d52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e184      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d11b      	bne.n	8005da6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	61fb      	str	r3, [r7, #28]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e164      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d11b      	bne.n	8005de6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	e144      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005dfc:	e138      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	f200 80f1 	bhi.w	8005fea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d123      	bne.n	8005e58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 fc1b 	bl	8006650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e139      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e56:	e10b      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d14e      	bne.n	8005efe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	2200      	movs	r2, #0
 8005e68:	4906      	ldr	r1, [pc, #24]	; (8005e84 <HAL_I2C_Mem_Read+0x22c>)
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fa98 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d008      	beq.n	8005e88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e10e      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
 8005e7a:	bf00      	nop
 8005e7c:	00100002 	.word	0x00100002
 8005e80:	ffff0000 	.word	0xffff0000
 8005e84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005efc:	e0b8      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	2200      	movs	r2, #0
 8005f06:	4966      	ldr	r1, [pc, #408]	; (80060a0 <HAL_I2C_Mem_Read+0x448>)
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fa49 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0bf      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	2200      	movs	r2, #0
 8005f62:	494f      	ldr	r1, [pc, #316]	; (80060a0 <HAL_I2C_Mem_Read+0x448>)
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fa1b 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e091      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fe8:	e042      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fb2e 	bl	8006650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e04c      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b04      	cmp	r3, #4
 800603c:	d118      	bne.n	8006070 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006074:	2b00      	cmp	r3, #0
 8006076:	f47f aec2 	bne.w	8005dfe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	e000      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006096:	2302      	movs	r3, #2
  }
}
 8006098:	4618      	mov	r0, r3
 800609a:	3728      	adds	r7, #40	; 0x28
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	00010004 	.word	0x00010004

080060a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	4608      	mov	r0, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	461a      	mov	r2, r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	817b      	strh	r3, [r7, #10]
 80060b6:	460b      	mov	r3, r1
 80060b8:	813b      	strh	r3, [r7, #8]
 80060ba:	4613      	mov	r3, r2
 80060bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f960 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f4:	d103      	bne.n	80060fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e05f      	b.n	80061c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006102:	897b      	ldrh	r3, [r7, #10]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	492d      	ldr	r1, [pc, #180]	; (80061cc <I2C_RequestMemoryWrite+0x128>)
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f998 	bl	800644e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e04c      	b.n	80061c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800613e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006140:	6a39      	ldr	r1, [r7, #32]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fa02 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00d      	beq.n	800616a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	2b04      	cmp	r3, #4
 8006154:	d107      	bne.n	8006166 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e02b      	b.n	80061c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d105      	bne.n	800617c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006170:	893b      	ldrh	r3, [r7, #8]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	611a      	str	r2, [r3, #16]
 800617a:	e021      	b.n	80061c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800617c:	893b      	ldrh	r3, [r7, #8]
 800617e:	0a1b      	lsrs	r3, r3, #8
 8006180:	b29b      	uxth	r3, r3
 8006182:	b2da      	uxtb	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800618a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618c:	6a39      	ldr	r1, [r7, #32]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f9dc 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00d      	beq.n	80061b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d107      	bne.n	80061b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e005      	b.n	80061c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061b6:	893b      	ldrh	r3, [r7, #8]
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	00010002 	.word	0x00010002

080061d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	4608      	mov	r0, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	461a      	mov	r2, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	817b      	strh	r3, [r7, #10]
 80061e2:	460b      	mov	r3, r1
 80061e4:	813b      	strh	r3, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006208:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	2200      	movs	r2, #0
 8006212:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 f8c2 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00d      	beq.n	800623e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006230:	d103      	bne.n	800623a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006238:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e0aa      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800623e:	897b      	ldrh	r3, [r7, #10]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	461a      	mov	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800624c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	6a3a      	ldr	r2, [r7, #32]
 8006252:	4952      	ldr	r1, [pc, #328]	; (800639c <I2C_RequestMemoryRead+0x1cc>)
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f8fa 	bl	800644e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e097      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800627a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627c:	6a39      	ldr	r1, [r7, #32]
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f964 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00d      	beq.n	80062a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	2b04      	cmp	r3, #4
 8006290:	d107      	bne.n	80062a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e076      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d105      	bne.n	80062b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ac:	893b      	ldrh	r3, [r7, #8]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	611a      	str	r2, [r3, #16]
 80062b6:	e021      	b.n	80062fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062b8:	893b      	ldrh	r3, [r7, #8]
 80062ba:	0a1b      	lsrs	r3, r3, #8
 80062bc:	b29b      	uxth	r3, r3
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c8:	6a39      	ldr	r1, [r7, #32]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f93e 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00d      	beq.n	80062f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d107      	bne.n	80062ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e050      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062f2:	893b      	ldrh	r3, [r7, #8]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fe:	6a39      	ldr	r1, [r7, #32]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f923 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006310:	2b04      	cmp	r3, #4
 8006312:	d107      	bne.n	8006324 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006322:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e035      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006336:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	2200      	movs	r2, #0
 8006340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f82b 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00d      	beq.n	800636c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635e:	d103      	bne.n	8006368 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e013      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800636c:	897b      	ldrh	r3, [r7, #10]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	b2da      	uxtb	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	6a3a      	ldr	r2, [r7, #32]
 8006380:	4906      	ldr	r1, [pc, #24]	; (800639c <I2C_RequestMemoryRead+0x1cc>)
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f863 	bl	800644e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	00010002 	.word	0x00010002

080063a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063b0:	e025      	b.n	80063fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063b8:	d021      	beq.n	80063fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ba:	f7fd fe37 	bl	800402c <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d302      	bcc.n	80063d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d116      	bne.n	80063fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f043 0220 	orr.w	r2, r3, #32
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e023      	b.n	8006446 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	0c1b      	lsrs	r3, r3, #16
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	d10d      	bne.n	8006424 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	43da      	mvns	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4013      	ands	r3, r2
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	bf0c      	ite	eq
 800641a:	2301      	moveq	r3, #1
 800641c:	2300      	movne	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	e00c      	b.n	800643e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	43da      	mvns	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4013      	ands	r3, r2
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	bf0c      	ite	eq
 8006436:	2301      	moveq	r3, #1
 8006438:	2300      	movne	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	79fb      	ldrb	r3, [r7, #7]
 8006440:	429a      	cmp	r2, r3
 8006442:	d0b6      	beq.n	80063b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800645c:	e051      	b.n	8006502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646c:	d123      	bne.n	80064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006486:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	f043 0204 	orr.w	r2, r3, #4
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e046      	b.n	8006544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064bc:	d021      	beq.n	8006502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064be:	f7fd fdb5 	bl	800402c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d302      	bcc.n	80064d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d116      	bne.n	8006502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f043 0220 	orr.w	r2, r3, #32
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e020      	b.n	8006544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	0c1b      	lsrs	r3, r3, #16
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	d10c      	bne.n	8006526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	43da      	mvns	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4013      	ands	r3, r2
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	bf14      	ite	ne
 800651e:	2301      	movne	r3, #1
 8006520:	2300      	moveq	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	e00b      	b.n	800653e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	43da      	mvns	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4013      	ands	r3, r2
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	bf14      	ite	ne
 8006538:	2301      	movne	r3, #1
 800653a:	2300      	moveq	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d18d      	bne.n	800645e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006558:	e02d      	b.n	80065b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f8ce 	bl	80066fc <I2C_IsAcknowledgeFailed>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e02d      	b.n	80065c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006570:	d021      	beq.n	80065b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006572:	f7fd fd5b 	bl	800402c <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	429a      	cmp	r2, r3
 8006580:	d302      	bcc.n	8006588 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d116      	bne.n	80065b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f043 0220 	orr.w	r2, r3, #32
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e007      	b.n	80065c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c0:	2b80      	cmp	r3, #128	; 0x80
 80065c2:	d1ca      	bne.n	800655a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065da:	e02d      	b.n	8006638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f88d 	bl	80066fc <I2C_IsAcknowledgeFailed>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e02d      	b.n	8006648 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065f2:	d021      	beq.n	8006638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f4:	f7fd fd1a 	bl	800402c <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	429a      	cmp	r2, r3
 8006602:	d302      	bcc.n	800660a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d116      	bne.n	8006638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e007      	b.n	8006648 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b04      	cmp	r3, #4
 8006644:	d1ca      	bne.n	80065dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800665c:	e042      	b.n	80066e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b10      	cmp	r3, #16
 800666a:	d119      	bne.n	80066a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0210 	mvn.w	r2, #16
 8006674:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e029      	b.n	80066f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a0:	f7fd fcc4 	bl	800402c <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d302      	bcc.n	80066b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d116      	bne.n	80066e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	f043 0220 	orr.w	r2, r3, #32
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e007      	b.n	80066f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ee:	2b40      	cmp	r3, #64	; 0x40
 80066f0:	d1b5      	bne.n	800665e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006712:	d11b      	bne.n	800674c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800671c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	f043 0204 	orr.w	r2, r3, #4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b20      	cmp	r3, #32
 800676e:	d129      	bne.n	80067c4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2224      	movs	r2, #36	; 0x24
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0210 	bic.w	r2, r2, #16
 8006796:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0201 	orr.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e000      	b.n	80067c6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80067c4:	2302      	movs	r3, #2
  }
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d12a      	bne.n	8006842 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2224      	movs	r2, #36	; 0x24
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0201 	bic.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800680c:	89fb      	ldrh	r3, [r7, #14]
 800680e:	f023 030f 	bic.w	r3, r3, #15
 8006812:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	b29a      	uxth	r2, r3
 8006818:	89fb      	ldrh	r3, [r7, #14]
 800681a:	4313      	orrs	r3, r2
 800681c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	89fa      	ldrh	r2, [r7, #14]
 8006824:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f042 0201 	orr.w	r2, r2, #1
 8006834:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e000      	b.n	8006844 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006842:	2302      	movs	r3, #2
  }
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800685a:	2300      	movs	r3, #0
 800685c:	603b      	str	r3, [r7, #0]
 800685e:	4b20      	ldr	r3, [pc, #128]	; (80068e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006868:	6413      	str	r3, [r2, #64]	; 0x40
 800686a:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006876:	4b1b      	ldr	r3, [pc, #108]	; (80068e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006878:	2201      	movs	r2, #1
 800687a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800687c:	f7fd fbd6 	bl	800402c <HAL_GetTick>
 8006880:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006882:	e009      	b.n	8006898 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006884:	f7fd fbd2 	bl	800402c <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006892:	d901      	bls.n	8006898 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e01f      	b.n	80068d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006898:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a4:	d1ee      	bne.n	8006884 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80068a6:	4b11      	ldr	r3, [pc, #68]	; (80068ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068ac:	f7fd fbbe 	bl	800402c <HAL_GetTick>
 80068b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068b2:	e009      	b.n	80068c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068b4:	f7fd fbba 	bl	800402c <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068c2:	d901      	bls.n	80068c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e007      	b.n	80068d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068c8:	4b07      	ldr	r3, [pc, #28]	; (80068e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d4:	d1ee      	bne.n	80068b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	40023800 	.word	0x40023800
 80068e4:	420e0040 	.word	0x420e0040
 80068e8:	40007000 	.word	0x40007000
 80068ec:	420e0044 	.word	0x420e0044

080068f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e25b      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d075      	beq.n	80069fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800690e:	4ba3      	ldr	r3, [pc, #652]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
 8006916:	2b04      	cmp	r3, #4
 8006918:	d00c      	beq.n	8006934 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800691a:	4ba0      	ldr	r3, [pc, #640]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006922:	2b08      	cmp	r3, #8
 8006924:	d112      	bne.n	800694c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006926:	4b9d      	ldr	r3, [pc, #628]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006932:	d10b      	bne.n	800694c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006934:	4b99      	ldr	r3, [pc, #612]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d05b      	beq.n	80069f8 <HAL_RCC_OscConfig+0x108>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d157      	bne.n	80069f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e236      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006954:	d106      	bne.n	8006964 <HAL_RCC_OscConfig+0x74>
 8006956:	4b91      	ldr	r3, [pc, #580]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a90      	ldr	r2, [pc, #576]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 800695c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	e01d      	b.n	80069a0 <HAL_RCC_OscConfig+0xb0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800696c:	d10c      	bne.n	8006988 <HAL_RCC_OscConfig+0x98>
 800696e:	4b8b      	ldr	r3, [pc, #556]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a8a      	ldr	r2, [pc, #552]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	4b88      	ldr	r3, [pc, #544]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a87      	ldr	r2, [pc, #540]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	e00b      	b.n	80069a0 <HAL_RCC_OscConfig+0xb0>
 8006988:	4b84      	ldr	r3, [pc, #528]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a83      	ldr	r2, [pc, #524]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 800698e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	4b81      	ldr	r3, [pc, #516]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a80      	ldr	r2, [pc, #512]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 800699a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800699e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d013      	beq.n	80069d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a8:	f7fd fb40 	bl	800402c <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069b0:	f7fd fb3c 	bl	800402c <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b64      	cmp	r3, #100	; 0x64
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e1fb      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c2:	4b76      	ldr	r3, [pc, #472]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0f0      	beq.n	80069b0 <HAL_RCC_OscConfig+0xc0>
 80069ce:	e014      	b.n	80069fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d0:	f7fd fb2c 	bl	800402c <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069d8:	f7fd fb28 	bl	800402c <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b64      	cmp	r3, #100	; 0x64
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e1e7      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ea:	4b6c      	ldr	r3, [pc, #432]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0xe8>
 80069f6:	e000      	b.n	80069fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d063      	beq.n	8006ace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a06:	4b65      	ldr	r3, [pc, #404]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 030c 	and.w	r3, r3, #12
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a12:	4b62      	ldr	r3, [pc, #392]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d11c      	bne.n	8006a58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a1e:	4b5f      	ldr	r3, [pc, #380]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d116      	bne.n	8006a58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a2a:	4b5c      	ldr	r3, [pc, #368]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_RCC_OscConfig+0x152>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d001      	beq.n	8006a42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e1bb      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a42:	4b56      	ldr	r3, [pc, #344]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4952      	ldr	r1, [pc, #328]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a56:	e03a      	b.n	8006ace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d020      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a60:	4b4f      	ldr	r3, [pc, #316]	; (8006ba0 <HAL_RCC_OscConfig+0x2b0>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a66:	f7fd fae1 	bl	800402c <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a6e:	f7fd fadd 	bl	800402c <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e19c      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a80:	4b46      	ldr	r3, [pc, #280]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f0      	beq.n	8006a6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a8c:	4b43      	ldr	r3, [pc, #268]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	4940      	ldr	r1, [pc, #256]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	600b      	str	r3, [r1, #0]
 8006aa0:	e015      	b.n	8006ace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aa2:	4b3f      	ldr	r3, [pc, #252]	; (8006ba0 <HAL_RCC_OscConfig+0x2b0>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fd fac0 	bl	800402c <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ab0:	f7fd fabc 	bl	800402c <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e17b      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ac2:	4b36      	ldr	r3, [pc, #216]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f0      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d030      	beq.n	8006b3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d016      	beq.n	8006b10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ae2:	4b30      	ldr	r3, [pc, #192]	; (8006ba4 <HAL_RCC_OscConfig+0x2b4>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae8:	f7fd faa0 	bl	800402c <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006af0:	f7fd fa9c 	bl	800402c <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e15b      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b02:	4b26      	ldr	r3, [pc, #152]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCC_OscConfig+0x200>
 8006b0e:	e015      	b.n	8006b3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b10:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <HAL_RCC_OscConfig+0x2b4>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b16:	f7fd fa89 	bl	800402c <HAL_GetTick>
 8006b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b1e:	f7fd fa85 	bl	800402c <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e144      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b30:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f0      	bne.n	8006b1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 80a0 	beq.w	8006c8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b4e:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10f      	bne.n	8006b7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]
 8006b5e:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	4a0e      	ldr	r2, [pc, #56]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b68:	6413      	str	r3, [r2, #64]	; 0x40
 8006b6a:	4b0c      	ldr	r3, [pc, #48]	; (8006b9c <HAL_RCC_OscConfig+0x2ac>)
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b72:	60bb      	str	r3, [r7, #8]
 8006b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b76:	2301      	movs	r3, #1
 8006b78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <HAL_RCC_OscConfig+0x2b8>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d121      	bne.n	8006bca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b86:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <HAL_RCC_OscConfig+0x2b8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a07      	ldr	r2, [pc, #28]	; (8006ba8 <HAL_RCC_OscConfig+0x2b8>)
 8006b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b92:	f7fd fa4b 	bl	800402c <HAL_GetTick>
 8006b96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b98:	e011      	b.n	8006bbe <HAL_RCC_OscConfig+0x2ce>
 8006b9a:	bf00      	nop
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	42470000 	.word	0x42470000
 8006ba4:	42470e80 	.word	0x42470e80
 8006ba8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bac:	f7fd fa3e 	bl	800402c <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e0fd      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bbe:	4b81      	ldr	r3, [pc, #516]	; (8006dc4 <HAL_RCC_OscConfig+0x4d4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f0      	beq.n	8006bac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d106      	bne.n	8006be0 <HAL_RCC_OscConfig+0x2f0>
 8006bd2:	4b7d      	ldr	r3, [pc, #500]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	4a7c      	ldr	r2, [pc, #496]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006bd8:	f043 0301 	orr.w	r3, r3, #1
 8006bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8006bde:	e01c      	b.n	8006c1a <HAL_RCC_OscConfig+0x32a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	d10c      	bne.n	8006c02 <HAL_RCC_OscConfig+0x312>
 8006be8:	4b77      	ldr	r3, [pc, #476]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bec:	4a76      	ldr	r2, [pc, #472]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006bee:	f043 0304 	orr.w	r3, r3, #4
 8006bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf4:	4b74      	ldr	r3, [pc, #464]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf8:	4a73      	ldr	r2, [pc, #460]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8006c00:	e00b      	b.n	8006c1a <HAL_RCC_OscConfig+0x32a>
 8006c02:	4b71      	ldr	r3, [pc, #452]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	4a70      	ldr	r2, [pc, #448]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c0e:	4b6e      	ldr	r3, [pc, #440]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c12:	4a6d      	ldr	r2, [pc, #436]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006c14:	f023 0304 	bic.w	r3, r3, #4
 8006c18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d015      	beq.n	8006c4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c22:	f7fd fa03 	bl	800402c <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c28:	e00a      	b.n	8006c40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c2a:	f7fd f9ff 	bl	800402c <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e0bc      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c40:	4b61      	ldr	r3, [pc, #388]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0ee      	beq.n	8006c2a <HAL_RCC_OscConfig+0x33a>
 8006c4c:	e014      	b.n	8006c78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c4e:	f7fd f9ed 	bl	800402c <HAL_GetTick>
 8006c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c54:	e00a      	b.n	8006c6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c56:	f7fd f9e9 	bl	800402c <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e0a6      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c6c:	4b56      	ldr	r3, [pc, #344]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1ee      	bne.n	8006c56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d105      	bne.n	8006c8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c7e:	4b52      	ldr	r3, [pc, #328]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	4a51      	ldr	r2, [pc, #324]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 8092 	beq.w	8006db8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c94:	4b4c      	ldr	r3, [pc, #304]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 030c 	and.w	r3, r3, #12
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d05c      	beq.n	8006d5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d141      	bne.n	8006d2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ca8:	4b48      	ldr	r3, [pc, #288]	; (8006dcc <HAL_RCC_OscConfig+0x4dc>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cae:	f7fd f9bd 	bl	800402c <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cb6:	f7fd f9b9 	bl	800402c <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e078      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cc8:	4b3f      	ldr	r3, [pc, #252]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f0      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	019b      	lsls	r3, r3, #6
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	3b01      	subs	r3, #1
 8006cee:	041b      	lsls	r3, r3, #16
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	061b      	lsls	r3, r3, #24
 8006cf8:	4933      	ldr	r1, [pc, #204]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cfe:	4b33      	ldr	r3, [pc, #204]	; (8006dcc <HAL_RCC_OscConfig+0x4dc>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d04:	f7fd f992 	bl	800402c <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d0c:	f7fd f98e 	bl	800402c <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e04d      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d1e:	4b2a      	ldr	r3, [pc, #168]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0f0      	beq.n	8006d0c <HAL_RCC_OscConfig+0x41c>
 8006d2a:	e045      	b.n	8006db8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d2c:	4b27      	ldr	r3, [pc, #156]	; (8006dcc <HAL_RCC_OscConfig+0x4dc>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d32:	f7fd f97b 	bl	800402c <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d3a:	f7fd f977 	bl	800402c <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e036      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d4c:	4b1e      	ldr	r3, [pc, #120]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f0      	bne.n	8006d3a <HAL_RCC_OscConfig+0x44a>
 8006d58:	e02e      	b.n	8006db8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e029      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d66:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <HAL_RCC_OscConfig+0x4d8>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d11c      	bne.n	8006db4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d115      	bne.n	8006db4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d8e:	4013      	ands	r3, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d10d      	bne.n	8006db4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d106      	bne.n	8006db4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d001      	beq.n	8006db8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40007000 	.word	0x40007000
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	42470060 	.word	0x42470060

08006dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0cc      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006de4:	4b68      	ldr	r3, [pc, #416]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d90c      	bls.n	8006e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df2:	4b65      	ldr	r3, [pc, #404]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfa:	4b63      	ldr	r3, [pc, #396]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d001      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e0b8      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d020      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e24:	4b59      	ldr	r3, [pc, #356]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	4a58      	ldr	r2, [pc, #352]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e3c:	4b53      	ldr	r3, [pc, #332]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	4a52      	ldr	r2, [pc, #328]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e48:	4b50      	ldr	r3, [pc, #320]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	494d      	ldr	r1, [pc, #308]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d044      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e6e:	4b47      	ldr	r3, [pc, #284]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d119      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e07f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d003      	beq.n	8006e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d107      	bne.n	8006e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8e:	4b3f      	ldr	r3, [pc, #252]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e06f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e9e:	4b3b      	ldr	r3, [pc, #236]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e067      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eae:	4b37      	ldr	r3, [pc, #220]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f023 0203 	bic.w	r2, r3, #3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4934      	ldr	r1, [pc, #208]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ec0:	f7fd f8b4 	bl	800402c <HAL_GetTick>
 8006ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec6:	e00a      	b.n	8006ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec8:	f7fd f8b0 	bl	800402c <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e04f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ede:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 020c 	and.w	r2, r3, #12
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d1eb      	bne.n	8006ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ef0:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d20c      	bcs.n	8006f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efe:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f06:	4b20      	ldr	r3, [pc, #128]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d001      	beq.n	8006f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e032      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f24:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	4916      	ldr	r1, [pc, #88]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d009      	beq.n	8006f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f42:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	490e      	ldr	r1, [pc, #56]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f56:	f000 f821 	bl	8006f9c <HAL_RCC_GetSysClockFreq>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	091b      	lsrs	r3, r3, #4
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	490a      	ldr	r1, [pc, #40]	; (8006f90 <HAL_RCC_ClockConfig+0x1c0>)
 8006f68:	5ccb      	ldrb	r3, [r1, r3]
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fd f814 	bl	8003fa4 <HAL_InitTick>

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40023c00 	.word	0x40023c00
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	0800bbe8 	.word	0x0800bbe8
 8006f94:	200001e0 	.word	0x200001e0
 8006f98:	200001e4 	.word	0x200001e4

08006f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	607b      	str	r3, [r7, #4]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	2300      	movs	r3, #0
 8006fae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fb4:	4b67      	ldr	r3, [pc, #412]	; (8007154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 030c 	and.w	r3, r3, #12
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d00d      	beq.n	8006fdc <HAL_RCC_GetSysClockFreq+0x40>
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	f200 80bd 	bhi.w	8007140 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d003      	beq.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006fce:	e0b7      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fd0:	4b61      	ldr	r3, [pc, #388]	; (8007158 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006fd2:	60bb      	str	r3, [r7, #8]
       break;
 8006fd4:	e0b7      	b.n	8007146 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fd6:	4b60      	ldr	r3, [pc, #384]	; (8007158 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006fd8:	60bb      	str	r3, [r7, #8]
      break;
 8006fda:	e0b4      	b.n	8007146 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fdc:	4b5d      	ldr	r3, [pc, #372]	; (8007154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fe4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fe6:	4b5b      	ldr	r3, [pc, #364]	; (8007154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d04d      	beq.n	800708e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ff2:	4b58      	ldr	r3, [pc, #352]	; (8007154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007002:	f04f 0100 	mov.w	r1, #0
 8007006:	ea02 0800 	and.w	r8, r2, r0
 800700a:	ea03 0901 	and.w	r9, r3, r1
 800700e:	4640      	mov	r0, r8
 8007010:	4649      	mov	r1, r9
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	014b      	lsls	r3, r1, #5
 800701c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007020:	0142      	lsls	r2, r0, #5
 8007022:	4610      	mov	r0, r2
 8007024:	4619      	mov	r1, r3
 8007026:	ebb0 0008 	subs.w	r0, r0, r8
 800702a:	eb61 0109 	sbc.w	r1, r1, r9
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	018b      	lsls	r3, r1, #6
 8007038:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800703c:	0182      	lsls	r2, r0, #6
 800703e:	1a12      	subs	r2, r2, r0
 8007040:	eb63 0301 	sbc.w	r3, r3, r1
 8007044:	f04f 0000 	mov.w	r0, #0
 8007048:	f04f 0100 	mov.w	r1, #0
 800704c:	00d9      	lsls	r1, r3, #3
 800704e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007052:	00d0      	lsls	r0, r2, #3
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	eb12 0208 	adds.w	r2, r2, r8
 800705c:	eb43 0309 	adc.w	r3, r3, r9
 8007060:	f04f 0000 	mov.w	r0, #0
 8007064:	f04f 0100 	mov.w	r1, #0
 8007068:	0299      	lsls	r1, r3, #10
 800706a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800706e:	0290      	lsls	r0, r2, #10
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4610      	mov	r0, r2
 8007076:	4619      	mov	r1, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	461a      	mov	r2, r3
 800707c:	f04f 0300 	mov.w	r3, #0
 8007080:	f7f9 fdba 	bl	8000bf8 <__aeabi_uldivmod>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4613      	mov	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	e04a      	b.n	8007124 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800708e:	4b31      	ldr	r3, [pc, #196]	; (8007154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	099b      	lsrs	r3, r3, #6
 8007094:	461a      	mov	r2, r3
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800709e:	f04f 0100 	mov.w	r1, #0
 80070a2:	ea02 0400 	and.w	r4, r2, r0
 80070a6:	ea03 0501 	and.w	r5, r3, r1
 80070aa:	4620      	mov	r0, r4
 80070ac:	4629      	mov	r1, r5
 80070ae:	f04f 0200 	mov.w	r2, #0
 80070b2:	f04f 0300 	mov.w	r3, #0
 80070b6:	014b      	lsls	r3, r1, #5
 80070b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070bc:	0142      	lsls	r2, r0, #5
 80070be:	4610      	mov	r0, r2
 80070c0:	4619      	mov	r1, r3
 80070c2:	1b00      	subs	r0, r0, r4
 80070c4:	eb61 0105 	sbc.w	r1, r1, r5
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	018b      	lsls	r3, r1, #6
 80070d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070d6:	0182      	lsls	r2, r0, #6
 80070d8:	1a12      	subs	r2, r2, r0
 80070da:	eb63 0301 	sbc.w	r3, r3, r1
 80070de:	f04f 0000 	mov.w	r0, #0
 80070e2:	f04f 0100 	mov.w	r1, #0
 80070e6:	00d9      	lsls	r1, r3, #3
 80070e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070ec:	00d0      	lsls	r0, r2, #3
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	1912      	adds	r2, r2, r4
 80070f4:	eb45 0303 	adc.w	r3, r5, r3
 80070f8:	f04f 0000 	mov.w	r0, #0
 80070fc:	f04f 0100 	mov.w	r1, #0
 8007100:	0299      	lsls	r1, r3, #10
 8007102:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007106:	0290      	lsls	r0, r2, #10
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4610      	mov	r0, r2
 800710e:	4619      	mov	r1, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	461a      	mov	r2, r3
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	f7f9 fd6e 	bl	8000bf8 <__aeabi_uldivmod>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4613      	mov	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007124:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	0c1b      	lsrs	r3, r3, #16
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	3301      	adds	r3, #1
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	fbb2 f3f3 	udiv	r3, r2, r3
 800713c:	60bb      	str	r3, [r7, #8]
      break;
 800713e:	e002      	b.n	8007146 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007142:	60bb      	str	r3, [r7, #8]
      break;
 8007144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007146:	68bb      	ldr	r3, [r7, #8]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007152:	bf00      	nop
 8007154:	40023800 	.word	0x40023800
 8007158:	00f42400 	.word	0x00f42400

0800715c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007160:	4b03      	ldr	r3, [pc, #12]	; (8007170 <HAL_RCC_GetHCLKFreq+0x14>)
 8007162:	681b      	ldr	r3, [r3, #0]
}
 8007164:	4618      	mov	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	200001e0 	.word	0x200001e0

08007174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007178:	f7ff fff0 	bl	800715c <HAL_RCC_GetHCLKFreq>
 800717c:	4602      	mov	r2, r0
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	0a9b      	lsrs	r3, r3, #10
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	4903      	ldr	r1, [pc, #12]	; (8007198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800718a:	5ccb      	ldrb	r3, [r1, r3]
 800718c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007190:	4618      	mov	r0, r3
 8007192:	bd80      	pop	{r7, pc}
 8007194:	40023800 	.word	0x40023800
 8007198:	0800bbf8 	.word	0x0800bbf8

0800719c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071a0:	f7ff ffdc 	bl	800715c <HAL_RCC_GetHCLKFreq>
 80071a4:	4602      	mov	r2, r0
 80071a6:	4b05      	ldr	r3, [pc, #20]	; (80071bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	0b5b      	lsrs	r3, r3, #13
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	4903      	ldr	r1, [pc, #12]	; (80071c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071b2:	5ccb      	ldrb	r3, [r1, r3]
 80071b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40023800 	.word	0x40023800
 80071c0:	0800bbf8 	.word	0x0800bbf8

080071c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e056      	b.n	8007284 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d106      	bne.n	80071f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7fb fdbb 	bl	8002d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2202      	movs	r2, #2
 80071fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800720c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	431a      	orrs	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	431a      	orrs	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	ea42 0103 	orr.w	r1, r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	0c1b      	lsrs	r3, r3, #16
 8007254:	f003 0104 	and.w	r1, r3, #4
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69da      	ldr	r2, [r3, #28]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007272:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af02      	add	r7, sp, #8
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	603b      	str	r3, [r7, #0]
 8007298:	4613      	mov	r3, r2
 800729a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072a8:	d112      	bne.n	80072d0 <HAL_SPI_Receive+0x44>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10e      	bne.n	80072d0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2204      	movs	r2, #4
 80072b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072ba:	88fa      	ldrh	r2, [r7, #6]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4613      	mov	r3, r2
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	68b9      	ldr	r1, [r7, #8]
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 f8e9 	bl	800749e <HAL_SPI_TransmitReceive>
 80072cc:	4603      	mov	r3, r0
 80072ce:	e0e2      	b.n	8007496 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_SPI_Receive+0x52>
 80072da:	2302      	movs	r3, #2
 80072dc:	e0db      	b.n	8007496 <HAL_SPI_Receive+0x20a>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072e6:	f7fc fea1 	bl	800402c <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d002      	beq.n	80072fe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80072f8:	2302      	movs	r3, #2
 80072fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072fc:	e0c2      	b.n	8007484 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <HAL_SPI_Receive+0x7e>
 8007304:	88fb      	ldrh	r3, [r7, #6]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d102      	bne.n	8007310 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800730e:	e0b9      	b.n	8007484 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2204      	movs	r2, #4
 8007314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	88fa      	ldrh	r2, [r7, #6]
 800732e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007356:	d107      	bne.n	8007368 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007366:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d007      	beq.n	8007386 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007384:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d162      	bne.n	8007454 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800738e:	e02e      	b.n	80073ee <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b01      	cmp	r3, #1
 800739c:	d115      	bne.n	80073ca <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f103 020c 	add.w	r2, r3, #12
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	7812      	ldrb	r2, [r2, #0]
 80073ac:	b2d2      	uxtb	r2, r2
 80073ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073c8:	e011      	b.n	80073ee <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ca:	f7fc fe2f 	bl	800402c <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d803      	bhi.n	80073e2 <HAL_SPI_Receive+0x156>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073e0:	d102      	bne.n	80073e8 <HAL_SPI_Receive+0x15c>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d102      	bne.n	80073ee <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073ec:	e04a      	b.n	8007484 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1cb      	bne.n	8007390 <HAL_SPI_Receive+0x104>
 80073f8:	e031      	b.n	800745e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b01      	cmp	r3, #1
 8007406:	d113      	bne.n	8007430 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	b292      	uxth	r2, r2
 8007414:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	1c9a      	adds	r2, r3, #2
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800742e:	e011      	b.n	8007454 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007430:	f7fc fdfc 	bl	800402c <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d803      	bhi.n	8007448 <HAL_SPI_Receive+0x1bc>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007446:	d102      	bne.n	800744e <HAL_SPI_Receive+0x1c2>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007452:	e017      	b.n	8007484 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007458:	b29b      	uxth	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1cd      	bne.n	80073fa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fa27 	bl	80078b6 <SPI_EndRxTransaction>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2220      	movs	r2, #32
 8007472:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
 8007480:	e000      	b.n	8007484 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007482:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007494:	7dfb      	ldrb	r3, [r7, #23]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b08c      	sub	sp, #48	; 0x30
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	60f8      	str	r0, [r7, #12]
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	607a      	str	r2, [r7, #4]
 80074aa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074ac:	2301      	movs	r3, #1
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_SPI_TransmitReceive+0x26>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e18a      	b.n	80077da <HAL_SPI_TransmitReceive+0x33c>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074cc:	f7fc fdae 	bl	800402c <HAL_GetTick>
 80074d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074e2:	887b      	ldrh	r3, [r7, #2]
 80074e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d00f      	beq.n	800750e <HAL_SPI_TransmitReceive+0x70>
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074f4:	d107      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d103      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x68>
 80074fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007502:	2b04      	cmp	r3, #4
 8007504:	d003      	beq.n	800750e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007506:	2302      	movs	r3, #2
 8007508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800750c:	e15b      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_SPI_TransmitReceive+0x82>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <HAL_SPI_TransmitReceive+0x82>
 800751a:	887b      	ldrh	r3, [r7, #2]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d103      	bne.n	8007528 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007526:	e14e      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b04      	cmp	r3, #4
 8007532:	d003      	beq.n	800753c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2205      	movs	r2, #5
 8007538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	887a      	ldrh	r2, [r7, #2]
 800754c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	887a      	ldrh	r2, [r7, #2]
 8007552:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	887a      	ldrh	r2, [r7, #2]
 800755e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	887a      	ldrh	r2, [r7, #2]
 8007564:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757c:	2b40      	cmp	r3, #64	; 0x40
 800757e:	d007      	beq.n	8007590 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800758e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007598:	d178      	bne.n	800768c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_SPI_TransmitReceive+0x10a>
 80075a2:	8b7b      	ldrh	r3, [r7, #26]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d166      	bne.n	8007676 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	881a      	ldrh	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	1c9a      	adds	r2, r3, #2
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075cc:	e053      	b.n	8007676 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d11b      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x176>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d016      	beq.n	8007614 <HAL_SPI_TransmitReceive+0x176>
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d113      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	881a      	ldrh	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	1c9a      	adds	r2, r3, #2
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b01      	cmp	r3, #1
 8007620:	d119      	bne.n	8007656 <HAL_SPI_TransmitReceive+0x1b8>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d014      	beq.n	8007656 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	b292      	uxth	r2, r2
 8007638:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	1c9a      	adds	r2, r3, #2
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007648:	b29b      	uxth	r3, r3
 800764a:	3b01      	subs	r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007652:	2301      	movs	r3, #1
 8007654:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007656:	f7fc fce9 	bl	800402c <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007662:	429a      	cmp	r2, r3
 8007664:	d807      	bhi.n	8007676 <HAL_SPI_TransmitReceive+0x1d8>
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800766c:	d003      	beq.n	8007676 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007674:	e0a7      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1a6      	bne.n	80075ce <HAL_SPI_TransmitReceive+0x130>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1a1      	bne.n	80075ce <HAL_SPI_TransmitReceive+0x130>
 800768a:	e07c      	b.n	8007786 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <HAL_SPI_TransmitReceive+0x1fc>
 8007694:	8b7b      	ldrh	r3, [r7, #26]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d16b      	bne.n	8007772 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	7812      	ldrb	r2, [r2, #0]
 80076a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076c0:	e057      	b.n	8007772 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d11c      	bne.n	800770a <HAL_SPI_TransmitReceive+0x26c>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d017      	beq.n	800770a <HAL_SPI_TransmitReceive+0x26c>
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d114      	bne.n	800770a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	7812      	ldrb	r2, [r2, #0]
 80076ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b01      	cmp	r3, #1
 8007716:	d119      	bne.n	800774c <HAL_SPI_TransmitReceive+0x2ae>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d014      	beq.n	800774c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007748:	2301      	movs	r3, #1
 800774a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800774c:	f7fc fc6e 	bl	800402c <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007758:	429a      	cmp	r2, r3
 800775a:	d803      	bhi.n	8007764 <HAL_SPI_TransmitReceive+0x2c6>
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007762:	d102      	bne.n	800776a <HAL_SPI_TransmitReceive+0x2cc>
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	2b00      	cmp	r3, #0
 8007768:	d103      	bne.n	8007772 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007770:	e029      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007776:	b29b      	uxth	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1a2      	bne.n	80076c2 <HAL_SPI_TransmitReceive+0x224>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d19d      	bne.n	80076c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007788:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f8f8 	bl	8007980 <SPI_EndRxTxTransaction>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d006      	beq.n	80077a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80077a2:	e010      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10b      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ac:	2300      	movs	r3, #0
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	e000      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80077c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3730      	adds	r7, #48	; 0x30
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077f2:	e04c      	b.n	800788e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077fa:	d048      	beq.n	800788e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80077fc:	f7fc fc16 	bl	800402c <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d902      	bls.n	8007812 <SPI_WaitFlagStateUntilTimeout+0x30>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d13d      	bne.n	800788e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007820:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782a:	d111      	bne.n	8007850 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007834:	d004      	beq.n	8007840 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800783e:	d107      	bne.n	8007850 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800784e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007858:	d10f      	bne.n	800787a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007878:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e00f      	b.n	80078ae <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	4013      	ands	r3, r2
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	429a      	cmp	r2, r3
 800789c:	bf0c      	ite	eq
 800789e:	2301      	moveq	r3, #1
 80078a0:	2300      	movne	r3, #0
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	461a      	mov	r2, r3
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d1a3      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b086      	sub	sp, #24
 80078ba:	af02      	add	r7, sp, #8
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ca:	d111      	bne.n	80078f0 <SPI_EndRxTransaction+0x3a>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d4:	d004      	beq.n	80078e0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078de:	d107      	bne.n	80078f0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ee:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f8:	d12a      	bne.n	8007950 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007902:	d012      	beq.n	800792a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	2180      	movs	r1, #128	; 0x80
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff ff67 	bl	80077e2 <SPI_WaitFlagStateUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d02d      	beq.n	8007976 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791e:	f043 0220 	orr.w	r2, r3, #32
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e026      	b.n	8007978 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2200      	movs	r2, #0
 8007932:	2101      	movs	r1, #1
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff ff54 	bl	80077e2 <SPI_WaitFlagStateUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01a      	beq.n	8007976 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007944:	f043 0220 	orr.w	r2, r3, #32
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e013      	b.n	8007978 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2200      	movs	r2, #0
 8007958:	2101      	movs	r1, #1
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7ff ff41 	bl	80077e2 <SPI_WaitFlagStateUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796a:	f043 0220 	orr.w	r2, r3, #32
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e000      	b.n	8007978 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af02      	add	r7, sp, #8
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800798c:	4b1b      	ldr	r3, [pc, #108]	; (80079fc <SPI_EndRxTxTransaction+0x7c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a1b      	ldr	r2, [pc, #108]	; (8007a00 <SPI_EndRxTxTransaction+0x80>)
 8007992:	fba2 2303 	umull	r2, r3, r2, r3
 8007996:	0d5b      	lsrs	r3, r3, #21
 8007998:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800799c:	fb02 f303 	mul.w	r3, r2, r3
 80079a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079aa:	d112      	bne.n	80079d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2200      	movs	r2, #0
 80079b4:	2180      	movs	r1, #128	; 0x80
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7ff ff13 	bl	80077e2 <SPI_WaitFlagStateUntilTimeout>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d016      	beq.n	80079f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c6:	f043 0220 	orr.w	r2, r3, #32
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e00f      	b.n	80079f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	3b01      	subs	r3, #1
 80079dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e8:	2b80      	cmp	r3, #128	; 0x80
 80079ea:	d0f2      	beq.n	80079d2 <SPI_EndRxTxTransaction+0x52>
 80079ec:	e000      	b.n	80079f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80079ee:	bf00      	nop
  }

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	200001e0 	.word	0x200001e0
 8007a00:	165e9f81 	.word	0x165e9f81

08007a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e01d      	b.n	8007a52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d106      	bne.n	8007a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7fb fcb2 	bl	8003394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	4619      	mov	r1, r3
 8007a42:	4610      	mov	r0, r2
 8007a44:	f000 fafc 	bl	8008040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2202      	movs	r2, #2
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2b06      	cmp	r3, #6
 8007a7a:	d007      	beq.n	8007a8c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0201 	orr.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e01d      	b.n	8007af0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d106      	bne.n	8007ace <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f815 	bl	8007af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3304      	adds	r3, #4
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f000 faad 	bl	8008040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fea2 	bl	8008868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <HAL_TIM_PWM_Start+0x74>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d004      	beq.n	8007b38 <HAL_TIM_PWM_Start+0x2c>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a14      	ldr	r2, [pc, #80]	; (8007b84 <HAL_TIM_PWM_Start+0x78>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d101      	bne.n	8007b3c <HAL_TIM_PWM_Start+0x30>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <HAL_TIM_PWM_Start+0x32>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d007      	beq.n	8007b52 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b06      	cmp	r3, #6
 8007b62:	d007      	beq.n	8007b74 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f042 0201 	orr.w	r2, r2, #1
 8007b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40010000 	.word	0x40010000
 8007b84:	40010400 	.word	0x40010400

08007b88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e01d      	b.n	8007bd6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f815 	bl	8007bde <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	f000 fa3a 	bl	8008040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d101      	bne.n	8007c0c <HAL_TIM_IC_ConfigChannel+0x1a>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e08a      	b.n	8007d22 <HAL_TIM_IC_ConfigChannel+0x130>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d11b      	bne.n	8007c5a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6819      	ldr	r1, [r3, #0]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f000 fc55 	bl	80084e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 020c 	bic.w	r2, r2, #12
 8007c44:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6999      	ldr	r1, [r3, #24]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	619a      	str	r2, [r3, #24]
 8007c58:	e05a      	b.n	8007d10 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d11c      	bne.n	8007c9a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	6819      	ldr	r1, [r3, #0]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f000 fcd9 	bl	8008626 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	699a      	ldr	r2, [r3, #24]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c82:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6999      	ldr	r1, [r3, #24]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	021a      	lsls	r2, r3, #8
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	619a      	str	r2, [r3, #24]
 8007c98:	e03a      	b.n	8007d10 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	d11b      	bne.n	8007cd8 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6819      	ldr	r1, [r3, #0]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f000 fd26 	bl	8008700 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69da      	ldr	r2, [r3, #28]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 020c 	bic.w	r2, r2, #12
 8007cc2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	69d9      	ldr	r1, [r3, #28]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	61da      	str	r2, [r3, #28]
 8007cd6:	e01b      	b.n	8007d10 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	6819      	ldr	r1, [r3, #0]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f000 fd46 	bl	8008778 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69da      	ldr	r2, [r3, #28]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007cfa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69d9      	ldr	r1, [r3, #28]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	021a      	lsls	r2, r3, #8
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007d42:	2302      	movs	r3, #2
 8007d44:	e0b4      	b.n	8007eb0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b0c      	cmp	r3, #12
 8007d5a:	f200 809f 	bhi.w	8007e9c <HAL_TIM_PWM_ConfigChannel+0x170>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d99 	.word	0x08007d99
 8007d68:	08007e9d 	.word	0x08007e9d
 8007d6c:	08007e9d 	.word	0x08007e9d
 8007d70:	08007e9d 	.word	0x08007e9d
 8007d74:	08007dd9 	.word	0x08007dd9
 8007d78:	08007e9d 	.word	0x08007e9d
 8007d7c:	08007e9d 	.word	0x08007e9d
 8007d80:	08007e9d 	.word	0x08007e9d
 8007d84:	08007e1b 	.word	0x08007e1b
 8007d88:	08007e9d 	.word	0x08007e9d
 8007d8c:	08007e9d 	.word	0x08007e9d
 8007d90:	08007e9d 	.word	0x08007e9d
 8007d94:	08007e5b 	.word	0x08007e5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 f9ee 	bl	8008180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0208 	orr.w	r2, r2, #8
 8007db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 0204 	bic.w	r2, r2, #4
 8007dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6999      	ldr	r1, [r3, #24]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	691a      	ldr	r2, [r3, #16]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	619a      	str	r2, [r3, #24]
      break;
 8007dd6:	e062      	b.n	8007e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68b9      	ldr	r1, [r7, #8]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fa3e 	bl	8008260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699a      	ldr	r2, [r3, #24]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6999      	ldr	r1, [r3, #24]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	021a      	lsls	r2, r3, #8
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	619a      	str	r2, [r3, #24]
      break;
 8007e18:	e041      	b.n	8007e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68b9      	ldr	r1, [r7, #8]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 fa93 	bl	800834c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69da      	ldr	r2, [r3, #28]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f042 0208 	orr.w	r2, r2, #8
 8007e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69da      	ldr	r2, [r3, #28]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0204 	bic.w	r2, r2, #4
 8007e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69d9      	ldr	r1, [r3, #28]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	61da      	str	r2, [r3, #28]
      break;
 8007e58:	e021      	b.n	8007e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68b9      	ldr	r1, [r7, #8]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fae7 	bl	8008434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	69da      	ldr	r2, [r3, #28]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69da      	ldr	r2, [r3, #28]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69d9      	ldr	r1, [r3, #28]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	021a      	lsls	r2, r3, #8
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	61da      	str	r2, [r3, #28]
      break;
 8007e9a:	e000      	b.n	8007e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007e9c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d101      	bne.n	8007ed0 <HAL_TIM_ConfigClockSource+0x18>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	e0b3      	b.n	8008038 <HAL_TIM_ConfigClockSource+0x180>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007eee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ef6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f08:	d03e      	beq.n	8007f88 <HAL_TIM_ConfigClockSource+0xd0>
 8007f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f0e:	f200 8087 	bhi.w	8008020 <HAL_TIM_ConfigClockSource+0x168>
 8007f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f16:	f000 8085 	beq.w	8008024 <HAL_TIM_ConfigClockSource+0x16c>
 8007f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f1e:	d87f      	bhi.n	8008020 <HAL_TIM_ConfigClockSource+0x168>
 8007f20:	2b70      	cmp	r3, #112	; 0x70
 8007f22:	d01a      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0xa2>
 8007f24:	2b70      	cmp	r3, #112	; 0x70
 8007f26:	d87b      	bhi.n	8008020 <HAL_TIM_ConfigClockSource+0x168>
 8007f28:	2b60      	cmp	r3, #96	; 0x60
 8007f2a:	d050      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x116>
 8007f2c:	2b60      	cmp	r3, #96	; 0x60
 8007f2e:	d877      	bhi.n	8008020 <HAL_TIM_ConfigClockSource+0x168>
 8007f30:	2b50      	cmp	r3, #80	; 0x50
 8007f32:	d03c      	beq.n	8007fae <HAL_TIM_ConfigClockSource+0xf6>
 8007f34:	2b50      	cmp	r3, #80	; 0x50
 8007f36:	d873      	bhi.n	8008020 <HAL_TIM_ConfigClockSource+0x168>
 8007f38:	2b40      	cmp	r3, #64	; 0x40
 8007f3a:	d058      	beq.n	8007fee <HAL_TIM_ConfigClockSource+0x136>
 8007f3c:	2b40      	cmp	r3, #64	; 0x40
 8007f3e:	d86f      	bhi.n	8008020 <HAL_TIM_ConfigClockSource+0x168>
 8007f40:	2b30      	cmp	r3, #48	; 0x30
 8007f42:	d064      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x156>
 8007f44:	2b30      	cmp	r3, #48	; 0x30
 8007f46:	d86b      	bhi.n	8008020 <HAL_TIM_ConfigClockSource+0x168>
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d060      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x156>
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	d867      	bhi.n	8008020 <HAL_TIM_ConfigClockSource+0x168>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d05c      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x156>
 8007f54:	2b10      	cmp	r3, #16
 8007f56:	d05a      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f58:	e062      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6899      	ldr	r1, [r3, #8]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f000 fc5d 	bl	8008828 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	609a      	str	r2, [r3, #8]
      break;
 8007f86:	e04e      	b.n	8008026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	6899      	ldr	r1, [r3, #8]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f000 fc46 	bl	8008828 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007faa:	609a      	str	r2, [r3, #8]
      break;
 8007fac:	e03b      	b.n	8008026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	6859      	ldr	r1, [r3, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f000 fb04 	bl	80085c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2150      	movs	r1, #80	; 0x50
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fc13 	bl	80087f2 <TIM_ITRx_SetConfig>
      break;
 8007fcc:	e02b      	b.n	8008026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	6859      	ldr	r1, [r3, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f000 fb60 	bl	80086a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2160      	movs	r1, #96	; 0x60
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fc03 	bl	80087f2 <TIM_ITRx_SetConfig>
      break;
 8007fec:	e01b      	b.n	8008026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	6859      	ldr	r1, [r3, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f000 fae4 	bl	80085c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2140      	movs	r1, #64	; 0x40
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fbf3 	bl	80087f2 <TIM_ITRx_SetConfig>
      break;
 800800c:	e00b      	b.n	8008026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f000 fbea 	bl	80087f2 <TIM_ITRx_SetConfig>
      break;
 800801e:	e002      	b.n	8008026 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008020:	bf00      	nop
 8008022:	e000      	b.n	8008026 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008024:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a40      	ldr	r2, [pc, #256]	; (8008154 <TIM_Base_SetConfig+0x114>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d013      	beq.n	8008080 <TIM_Base_SetConfig+0x40>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800805e:	d00f      	beq.n	8008080 <TIM_Base_SetConfig+0x40>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a3d      	ldr	r2, [pc, #244]	; (8008158 <TIM_Base_SetConfig+0x118>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d00b      	beq.n	8008080 <TIM_Base_SetConfig+0x40>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a3c      	ldr	r2, [pc, #240]	; (800815c <TIM_Base_SetConfig+0x11c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d007      	beq.n	8008080 <TIM_Base_SetConfig+0x40>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a3b      	ldr	r2, [pc, #236]	; (8008160 <TIM_Base_SetConfig+0x120>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d003      	beq.n	8008080 <TIM_Base_SetConfig+0x40>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a3a      	ldr	r2, [pc, #232]	; (8008164 <TIM_Base_SetConfig+0x124>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d108      	bne.n	8008092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a2f      	ldr	r2, [pc, #188]	; (8008154 <TIM_Base_SetConfig+0x114>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d02b      	beq.n	80080f2 <TIM_Base_SetConfig+0xb2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a0:	d027      	beq.n	80080f2 <TIM_Base_SetConfig+0xb2>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a2c      	ldr	r2, [pc, #176]	; (8008158 <TIM_Base_SetConfig+0x118>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d023      	beq.n	80080f2 <TIM_Base_SetConfig+0xb2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a2b      	ldr	r2, [pc, #172]	; (800815c <TIM_Base_SetConfig+0x11c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d01f      	beq.n	80080f2 <TIM_Base_SetConfig+0xb2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a2a      	ldr	r2, [pc, #168]	; (8008160 <TIM_Base_SetConfig+0x120>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d01b      	beq.n	80080f2 <TIM_Base_SetConfig+0xb2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a29      	ldr	r2, [pc, #164]	; (8008164 <TIM_Base_SetConfig+0x124>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d017      	beq.n	80080f2 <TIM_Base_SetConfig+0xb2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a28      	ldr	r2, [pc, #160]	; (8008168 <TIM_Base_SetConfig+0x128>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d013      	beq.n	80080f2 <TIM_Base_SetConfig+0xb2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a27      	ldr	r2, [pc, #156]	; (800816c <TIM_Base_SetConfig+0x12c>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00f      	beq.n	80080f2 <TIM_Base_SetConfig+0xb2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a26      	ldr	r2, [pc, #152]	; (8008170 <TIM_Base_SetConfig+0x130>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d00b      	beq.n	80080f2 <TIM_Base_SetConfig+0xb2>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a25      	ldr	r2, [pc, #148]	; (8008174 <TIM_Base_SetConfig+0x134>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d007      	beq.n	80080f2 <TIM_Base_SetConfig+0xb2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a24      	ldr	r2, [pc, #144]	; (8008178 <TIM_Base_SetConfig+0x138>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d003      	beq.n	80080f2 <TIM_Base_SetConfig+0xb2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a23      	ldr	r2, [pc, #140]	; (800817c <TIM_Base_SetConfig+0x13c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d108      	bne.n	8008104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a0a      	ldr	r2, [pc, #40]	; (8008154 <TIM_Base_SetConfig+0x114>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d003      	beq.n	8008138 <TIM_Base_SetConfig+0xf8>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a0c      	ldr	r2, [pc, #48]	; (8008164 <TIM_Base_SetConfig+0x124>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d103      	bne.n	8008140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	615a      	str	r2, [r3, #20]
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	40010000 	.word	0x40010000
 8008158:	40000400 	.word	0x40000400
 800815c:	40000800 	.word	0x40000800
 8008160:	40000c00 	.word	0x40000c00
 8008164:	40010400 	.word	0x40010400
 8008168:	40014000 	.word	0x40014000
 800816c:	40014400 	.word	0x40014400
 8008170:	40014800 	.word	0x40014800
 8008174:	40001800 	.word	0x40001800
 8008178:	40001c00 	.word	0x40001c00
 800817c:	40002000 	.word	0x40002000

08008180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	f023 0201 	bic.w	r2, r3, #1
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f023 0303 	bic.w	r3, r3, #3
 80081b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f023 0302 	bic.w	r3, r3, #2
 80081c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a20      	ldr	r2, [pc, #128]	; (8008258 <TIM_OC1_SetConfig+0xd8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <TIM_OC1_SetConfig+0x64>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a1f      	ldr	r2, [pc, #124]	; (800825c <TIM_OC1_SetConfig+0xdc>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d10c      	bne.n	80081fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f023 0308 	bic.w	r3, r3, #8
 80081ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f023 0304 	bic.w	r3, r3, #4
 80081fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a15      	ldr	r2, [pc, #84]	; (8008258 <TIM_OC1_SetConfig+0xd8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d003      	beq.n	800820e <TIM_OC1_SetConfig+0x8e>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a14      	ldr	r2, [pc, #80]	; (800825c <TIM_OC1_SetConfig+0xdc>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d111      	bne.n	8008232 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800821c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	4313      	orrs	r3, r2
 8008226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	4313      	orrs	r3, r2
 8008230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	621a      	str	r2, [r3, #32]
}
 800824c:	bf00      	nop
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	40010000 	.word	0x40010000
 800825c:	40010400 	.word	0x40010400

08008260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	f023 0210 	bic.w	r2, r3, #16
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800828e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f023 0320 	bic.w	r3, r3, #32
 80082aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	011b      	lsls	r3, r3, #4
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a22      	ldr	r2, [pc, #136]	; (8008344 <TIM_OC2_SetConfig+0xe4>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d003      	beq.n	80082c8 <TIM_OC2_SetConfig+0x68>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a21      	ldr	r2, [pc, #132]	; (8008348 <TIM_OC2_SetConfig+0xe8>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d10d      	bne.n	80082e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	4313      	orrs	r3, r2
 80082da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a17      	ldr	r2, [pc, #92]	; (8008344 <TIM_OC2_SetConfig+0xe4>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d003      	beq.n	80082f4 <TIM_OC2_SetConfig+0x94>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a16      	ldr	r2, [pc, #88]	; (8008348 <TIM_OC2_SetConfig+0xe8>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d113      	bne.n	800831c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4313      	orrs	r3, r2
 800830e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	621a      	str	r2, [r3, #32]
}
 8008336:	bf00      	nop
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	40010000 	.word	0x40010000
 8008348:	40010400 	.word	0x40010400

0800834c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0303 	bic.w	r3, r3, #3
 8008382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4313      	orrs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a21      	ldr	r2, [pc, #132]	; (800842c <TIM_OC3_SetConfig+0xe0>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d003      	beq.n	80083b2 <TIM_OC3_SetConfig+0x66>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a20      	ldr	r2, [pc, #128]	; (8008430 <TIM_OC3_SetConfig+0xe4>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d10d      	bne.n	80083ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a16      	ldr	r2, [pc, #88]	; (800842c <TIM_OC3_SetConfig+0xe0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d003      	beq.n	80083de <TIM_OC3_SetConfig+0x92>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a15      	ldr	r2, [pc, #84]	; (8008430 <TIM_OC3_SetConfig+0xe4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d113      	bne.n	8008406 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	4313      	orrs	r3, r2
 8008404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	621a      	str	r2, [r3, #32]
}
 8008420:	bf00      	nop
 8008422:	371c      	adds	r7, #28
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	40010000 	.word	0x40010000
 8008430:	40010400 	.word	0x40010400

08008434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800846a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	021b      	lsls	r3, r3, #8
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	4313      	orrs	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800847e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	031b      	lsls	r3, r3, #12
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	4313      	orrs	r3, r2
 800848a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a12      	ldr	r2, [pc, #72]	; (80084d8 <TIM_OC4_SetConfig+0xa4>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d003      	beq.n	800849c <TIM_OC4_SetConfig+0x68>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a11      	ldr	r2, [pc, #68]	; (80084dc <TIM_OC4_SetConfig+0xa8>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d109      	bne.n	80084b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	019b      	lsls	r3, r3, #6
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	621a      	str	r2, [r3, #32]
}
 80084ca:	bf00      	nop
 80084cc:	371c      	adds	r7, #28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	40010000 	.word	0x40010000
 80084dc:	40010400 	.word	0x40010400

080084e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	f023 0201 	bic.w	r2, r3, #1
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4a28      	ldr	r2, [pc, #160]	; (80085ac <TIM_TI1_SetConfig+0xcc>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d01b      	beq.n	8008546 <TIM_TI1_SetConfig+0x66>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008514:	d017      	beq.n	8008546 <TIM_TI1_SetConfig+0x66>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4a25      	ldr	r2, [pc, #148]	; (80085b0 <TIM_TI1_SetConfig+0xd0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d013      	beq.n	8008546 <TIM_TI1_SetConfig+0x66>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4a24      	ldr	r2, [pc, #144]	; (80085b4 <TIM_TI1_SetConfig+0xd4>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00f      	beq.n	8008546 <TIM_TI1_SetConfig+0x66>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	4a23      	ldr	r2, [pc, #140]	; (80085b8 <TIM_TI1_SetConfig+0xd8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d00b      	beq.n	8008546 <TIM_TI1_SetConfig+0x66>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4a22      	ldr	r2, [pc, #136]	; (80085bc <TIM_TI1_SetConfig+0xdc>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d007      	beq.n	8008546 <TIM_TI1_SetConfig+0x66>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4a21      	ldr	r2, [pc, #132]	; (80085c0 <TIM_TI1_SetConfig+0xe0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d003      	beq.n	8008546 <TIM_TI1_SetConfig+0x66>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4a20      	ldr	r2, [pc, #128]	; (80085c4 <TIM_TI1_SetConfig+0xe4>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d101      	bne.n	800854a <TIM_TI1_SetConfig+0x6a>
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <TIM_TI1_SetConfig+0x6c>
 800854a:	2300      	movs	r3, #0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d008      	beq.n	8008562 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f023 0303 	bic.w	r3, r3, #3
 8008556:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4313      	orrs	r3, r2
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	e003      	b.n	800856a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f043 0301 	orr.w	r3, r3, #1
 8008568:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	b2db      	uxtb	r3, r3
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	4313      	orrs	r3, r2
 800857c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f023 030a 	bic.w	r3, r3, #10
 8008584:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f003 030a 	and.w	r3, r3, #10
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	40010000 	.word	0x40010000
 80085b0:	40000400 	.word	0x40000400
 80085b4:	40000800 	.word	0x40000800
 80085b8:	40000c00 	.word	0x40000c00
 80085bc:	40010400 	.word	0x40010400
 80085c0:	40014000 	.word	0x40014000
 80085c4:	40001800 	.word	0x40001800

080085c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	f023 0201 	bic.w	r2, r3, #1
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f023 030a 	bic.w	r3, r3, #10
 8008604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	621a      	str	r2, [r3, #32]
}
 800861a:	bf00      	nop
 800861c:	371c      	adds	r7, #28
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008626:	b480      	push	{r7}
 8008628:	b087      	sub	sp, #28
 800862a:	af00      	add	r7, sp, #0
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	607a      	str	r2, [r7, #4]
 8008632:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	f023 0210 	bic.w	r2, r3, #16
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008652:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	021b      	lsls	r3, r3, #8
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	031b      	lsls	r3, r3, #12
 800866a:	b29b      	uxth	r3, r3
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008678:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	4313      	orrs	r3, r2
 8008686:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	621a      	str	r2, [r3, #32]
}
 8008694:	bf00      	nop
 8008696:	371c      	adds	r7, #28
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	f023 0210 	bic.w	r2, r3, #16
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	031b      	lsls	r3, r3, #12
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	621a      	str	r2, [r3, #32]
}
 80086f4:	bf00      	nop
 80086f6:	371c      	adds	r7, #28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f023 0303 	bic.w	r3, r3, #3
 800872c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800873c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	011b      	lsls	r3, r3, #4
 8008742:	b2db      	uxtb	r3, r3
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008750:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	021b      	lsls	r3, r3, #8
 8008756:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	4313      	orrs	r3, r2
 800875e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	621a      	str	r2, [r3, #32]
}
 800876c:	bf00      	nop
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	021b      	lsls	r3, r3, #8
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	031b      	lsls	r3, r3, #12
 80087bc:	b29b      	uxth	r3, r3
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80087ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	031b      	lsls	r3, r3, #12
 80087d0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	621a      	str	r2, [r3, #32]
}
 80087e6:	bf00      	nop
 80087e8:	371c      	adds	r7, #28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b085      	sub	sp, #20
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	f043 0307 	orr.w	r3, r3, #7
 8008814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	609a      	str	r2, [r3, #8]
}
 800881c:	bf00      	nop
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	021a      	lsls	r2, r3, #8
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	431a      	orrs	r2, r3
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	4313      	orrs	r3, r2
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	609a      	str	r2, [r3, #8]
}
 800885c:	bf00      	nop
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f003 031f 	and.w	r3, r3, #31
 800887a:	2201      	movs	r2, #1
 800887c:	fa02 f303 	lsl.w	r3, r2, r3
 8008880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a1a      	ldr	r2, [r3, #32]
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	43db      	mvns	r3, r3
 800888a:	401a      	ands	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a1a      	ldr	r2, [r3, #32]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f003 031f 	and.w	r3, r3, #31
 800889a:	6879      	ldr	r1, [r7, #4]
 800889c:	fa01 f303 	lsl.w	r3, r1, r3
 80088a0:	431a      	orrs	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	621a      	str	r2, [r3, #32]
}
 80088a6:	bf00      	nop
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
	...

080088b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d101      	bne.n	80088cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088c8:	2302      	movs	r3, #2
 80088ca:	e05a      	b.n	8008982 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2202      	movs	r2, #2
 80088d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a21      	ldr	r2, [pc, #132]	; (8008990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d022      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008918:	d01d      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a1d      	ldr	r2, [pc, #116]	; (8008994 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d018      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a1b      	ldr	r2, [pc, #108]	; (8008998 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d013      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a1a      	ldr	r2, [pc, #104]	; (800899c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d00e      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a18      	ldr	r2, [pc, #96]	; (80089a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d009      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a17      	ldr	r2, [pc, #92]	; (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d004      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a15      	ldr	r2, [pc, #84]	; (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d10c      	bne.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800895c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	4313      	orrs	r3, r2
 8008966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	40010000 	.word	0x40010000
 8008994:	40000400 	.word	0x40000400
 8008998:	40000800 	.word	0x40000800
 800899c:	40000c00 	.word	0x40000c00
 80089a0:	40010400 	.word	0x40010400
 80089a4:	40014000 	.word	0x40014000
 80089a8:	40001800 	.word	0x40001800

080089ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e03d      	b.n	8008a44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e03f      	b.n	8008ae2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fa fdc8 	bl	800360c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2224      	movs	r2, #36	; 0x24
 8008a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68da      	ldr	r2, [r3, #12]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fa5f 	bl	8008f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68da      	ldr	r2, [r3, #12]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2220      	movs	r2, #32
 8008adc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b088      	sub	sp, #32
 8008aee:	af02      	add	r7, sp, #8
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	603b      	str	r3, [r7, #0]
 8008af6:	4613      	mov	r3, r2
 8008af8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	f040 8083 	bne.w	8008c12 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <HAL_UART_Transmit+0x2e>
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e07b      	b.n	8008c14 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d101      	bne.n	8008b2a <HAL_UART_Transmit+0x40>
 8008b26:	2302      	movs	r3, #2
 8008b28:	e074      	b.n	8008c14 <HAL_UART_Transmit+0x12a>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2221      	movs	r2, #33	; 0x21
 8008b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008b40:	f7fb fa74 	bl	800402c <HAL_GetTick>
 8008b44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	88fa      	ldrh	r2, [r7, #6]
 8008b4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	88fa      	ldrh	r2, [r7, #6]
 8008b50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008b5a:	e042      	b.n	8008be2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	3b01      	subs	r3, #1
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b72:	d122      	bne.n	8008bba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2180      	movs	r1, #128	; 0x80
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f96c 	bl	8008e5c <UART_WaitOnFlagUntilTimeout>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e042      	b.n	8008c14 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ba0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d103      	bne.n	8008bb2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	3302      	adds	r3, #2
 8008bae:	60bb      	str	r3, [r7, #8]
 8008bb0:	e017      	b.n	8008be2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	60bb      	str	r3, [r7, #8]
 8008bb8:	e013      	b.n	8008be2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2180      	movs	r1, #128	; 0x80
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 f949 	bl	8008e5c <UART_WaitOnFlagUntilTimeout>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e01f      	b.n	8008c14 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	60ba      	str	r2, [r7, #8]
 8008bda:	781a      	ldrb	r2, [r3, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1b7      	bne.n	8008b5c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2140      	movs	r1, #64	; 0x40
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 f930 	bl	8008e5c <UART_WaitOnFlagUntilTimeout>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e006      	b.n	8008c14 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e000      	b.n	8008c14 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008c12:	2302      	movs	r3, #2
  }
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4613      	mov	r3, r2
 8008c28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b20      	cmp	r3, #32
 8008c34:	d166      	bne.n	8008d04 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <HAL_UART_Receive_DMA+0x26>
 8008c3c:	88fb      	ldrh	r3, [r7, #6]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e05f      	b.n	8008d06 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d101      	bne.n	8008c54 <HAL_UART_Receive_DMA+0x38>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e058      	b.n	8008d06 <HAL_UART_Receive_DMA+0xea>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	88fa      	ldrh	r2, [r7, #6]
 8008c66:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2222      	movs	r2, #34	; 0x22
 8008c72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7a:	4a25      	ldr	r2, [pc, #148]	; (8008d10 <HAL_UART_Receive_DMA+0xf4>)
 8008c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c82:	4a24      	ldr	r2, [pc, #144]	; (8008d14 <HAL_UART_Receive_DMA+0xf8>)
 8008c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8a:	4a23      	ldr	r2, [pc, #140]	; (8008d18 <HAL_UART_Receive_DMA+0xfc>)
 8008c8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c92:	2200      	movs	r2, #0
 8008c94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8008c96:	f107 0308 	add.w	r3, r7, #8
 8008c9a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	88fb      	ldrh	r3, [r7, #6]
 8008cae:	f7fc f8dd 	bl	8004e6c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	613b      	str	r3, [r7, #16]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	613b      	str	r3, [r7, #16]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cde:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	695a      	ldr	r2, [r3, #20]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f042 0201 	orr.w	r2, r2, #1
 8008cee:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	695a      	ldr	r2, [r3, #20]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cfe:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e000      	b.n	8008d06 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008d04:	2302      	movs	r3, #2
  }
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	08008d45 	.word	0x08008d45
 8008d14:	08008dad 	.word	0x08008dad
 8008d18:	08008dc9 	.word	0x08008dc9

08008d1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d50:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d11e      	bne.n	8008d9e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2200      	movs	r2, #0
 8008d64:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68da      	ldr	r2, [r3, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d74:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	695a      	ldr	r2, [r3, #20]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 0201 	bic.w	r2, r2, #1
 8008d84:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	695a      	ldr	r2, [r3, #20]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d94:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f7f9 fb26 	bl	80023f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008da4:	bf00      	nop
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f7ff ffae 	bl	8008d1c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	695b      	ldr	r3, [r3, #20]
 8008de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de4:	2b80      	cmp	r3, #128	; 0x80
 8008de6:	bf0c      	ite	eq
 8008de8:	2301      	moveq	r3, #1
 8008dea:	2300      	movne	r3, #0
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b21      	cmp	r3, #33	; 0x21
 8008dfa:	d108      	bne.n	8008e0e <UART_DMAError+0x46>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2200      	movs	r2, #0
 8008e06:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008e08:	68b8      	ldr	r0, [r7, #8]
 8008e0a:	f000 f871 	bl	8008ef0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e18:	2b40      	cmp	r3, #64	; 0x40
 8008e1a:	bf0c      	ite	eq
 8008e1c:	2301      	moveq	r3, #1
 8008e1e:	2300      	movne	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b22      	cmp	r3, #34	; 0x22
 8008e2e:	d108      	bne.n	8008e42 <UART_DMAError+0x7a>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d005      	beq.n	8008e42 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008e3c:	68b8      	ldr	r0, [r7, #8]
 8008e3e:	f000 f86d 	bl	8008f1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e46:	f043 0210 	orr.w	r2, r3, #16
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e4e:	68b8      	ldr	r0, [r7, #8]
 8008e50:	f7ff ff6e 	bl	8008d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e54:	bf00      	nop
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e6c:	e02c      	b.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e74:	d028      	beq.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d007      	beq.n	8008e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8008e7c:	f7fb f8d6 	bl	800402c <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d21d      	bcs.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	695a      	ldr	r2, [r3, #20]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f022 0201 	bic.w	r2, r2, #1
 8008eaa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2220      	movs	r2, #32
 8008eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e00f      	b.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	bf0c      	ite	eq
 8008ed8:	2301      	moveq	r3, #1
 8008eda:	2300      	movne	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	461a      	mov	r2, r3
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d0c3      	beq.n	8008e6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008f06:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	695a      	ldr	r2, [r3, #20]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0201 	bic.w	r2, r2, #1
 8008f42:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	b0bd      	sub	sp, #244	; 0xf4
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f74:	68d9      	ldr	r1, [r3, #12]
 8008f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	ea40 0301 	orr.w	r3, r0, r1
 8008f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	431a      	orrs	r2, r3
 8008f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008fb0:	f021 010c 	bic.w	r1, r1, #12
 8008fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008fbe:	430b      	orrs	r3, r1
 8008fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd2:	6999      	ldr	r1, [r3, #24]
 8008fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	ea40 0301 	orr.w	r3, r0, r1
 8008fde:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fea:	f040 81a5 	bne.w	8009338 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	4bcd      	ldr	r3, [pc, #820]	; (800932c <UART_SetConfig+0x3d4>)
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d006      	beq.n	8009008 <UART_SetConfig+0xb0>
 8008ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	4bcb      	ldr	r3, [pc, #812]	; (8009330 <UART_SetConfig+0x3d8>)
 8009002:	429a      	cmp	r2, r3
 8009004:	f040 80cb 	bne.w	800919e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009008:	f7fe f8c8 	bl	800719c <HAL_RCC_GetPCLK2Freq>
 800900c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009010:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009014:	461c      	mov	r4, r3
 8009016:	f04f 0500 	mov.w	r5, #0
 800901a:	4622      	mov	r2, r4
 800901c:	462b      	mov	r3, r5
 800901e:	1891      	adds	r1, r2, r2
 8009020:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009024:	415b      	adcs	r3, r3
 8009026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800902a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800902e:	1912      	adds	r2, r2, r4
 8009030:	eb45 0303 	adc.w	r3, r5, r3
 8009034:	f04f 0000 	mov.w	r0, #0
 8009038:	f04f 0100 	mov.w	r1, #0
 800903c:	00d9      	lsls	r1, r3, #3
 800903e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009042:	00d0      	lsls	r0, r2, #3
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	1911      	adds	r1, r2, r4
 800904a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800904e:	416b      	adcs	r3, r5
 8009050:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	461a      	mov	r2, r3
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	1891      	adds	r1, r2, r2
 8009062:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009066:	415b      	adcs	r3, r3
 8009068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800906c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009070:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009074:	f7f7 fdc0 	bl	8000bf8 <__aeabi_uldivmod>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4bad      	ldr	r3, [pc, #692]	; (8009334 <UART_SetConfig+0x3dc>)
 800907e:	fba3 2302 	umull	r2, r3, r3, r2
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	011e      	lsls	r6, r3, #4
 8009086:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800908a:	461c      	mov	r4, r3
 800908c:	f04f 0500 	mov.w	r5, #0
 8009090:	4622      	mov	r2, r4
 8009092:	462b      	mov	r3, r5
 8009094:	1891      	adds	r1, r2, r2
 8009096:	67b9      	str	r1, [r7, #120]	; 0x78
 8009098:	415b      	adcs	r3, r3
 800909a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800909c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80090a0:	1912      	adds	r2, r2, r4
 80090a2:	eb45 0303 	adc.w	r3, r5, r3
 80090a6:	f04f 0000 	mov.w	r0, #0
 80090aa:	f04f 0100 	mov.w	r1, #0
 80090ae:	00d9      	lsls	r1, r3, #3
 80090b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090b4:	00d0      	lsls	r0, r2, #3
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	1911      	adds	r1, r2, r4
 80090bc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80090c0:	416b      	adcs	r3, r5
 80090c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	461a      	mov	r2, r3
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	1891      	adds	r1, r2, r2
 80090d4:	6739      	str	r1, [r7, #112]	; 0x70
 80090d6:	415b      	adcs	r3, r3
 80090d8:	677b      	str	r3, [r7, #116]	; 0x74
 80090da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80090de:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80090e2:	f7f7 fd89 	bl	8000bf8 <__aeabi_uldivmod>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4b92      	ldr	r3, [pc, #584]	; (8009334 <UART_SetConfig+0x3dc>)
 80090ec:	fba3 1302 	umull	r1, r3, r3, r2
 80090f0:	095b      	lsrs	r3, r3, #5
 80090f2:	2164      	movs	r1, #100	; 0x64
 80090f4:	fb01 f303 	mul.w	r3, r1, r3
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	3332      	adds	r3, #50	; 0x32
 80090fe:	4a8d      	ldr	r2, [pc, #564]	; (8009334 <UART_SetConfig+0x3dc>)
 8009100:	fba2 2303 	umull	r2, r3, r2, r3
 8009104:	095b      	lsrs	r3, r3, #5
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800910c:	441e      	add	r6, r3
 800910e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009112:	4618      	mov	r0, r3
 8009114:	f04f 0100 	mov.w	r1, #0
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	1894      	adds	r4, r2, r2
 800911e:	66bc      	str	r4, [r7, #104]	; 0x68
 8009120:	415b      	adcs	r3, r3
 8009122:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009124:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009128:	1812      	adds	r2, r2, r0
 800912a:	eb41 0303 	adc.w	r3, r1, r3
 800912e:	f04f 0400 	mov.w	r4, #0
 8009132:	f04f 0500 	mov.w	r5, #0
 8009136:	00dd      	lsls	r5, r3, #3
 8009138:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800913c:	00d4      	lsls	r4, r2, #3
 800913e:	4622      	mov	r2, r4
 8009140:	462b      	mov	r3, r5
 8009142:	1814      	adds	r4, r2, r0
 8009144:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009148:	414b      	adcs	r3, r1
 800914a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	461a      	mov	r2, r3
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	1891      	adds	r1, r2, r2
 800915c:	6639      	str	r1, [r7, #96]	; 0x60
 800915e:	415b      	adcs	r3, r3
 8009160:	667b      	str	r3, [r7, #100]	; 0x64
 8009162:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009166:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800916a:	f7f7 fd45 	bl	8000bf8 <__aeabi_uldivmod>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4b70      	ldr	r3, [pc, #448]	; (8009334 <UART_SetConfig+0x3dc>)
 8009174:	fba3 1302 	umull	r1, r3, r3, r2
 8009178:	095b      	lsrs	r3, r3, #5
 800917a:	2164      	movs	r1, #100	; 0x64
 800917c:	fb01 f303 	mul.w	r3, r1, r3
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	3332      	adds	r3, #50	; 0x32
 8009186:	4a6b      	ldr	r2, [pc, #428]	; (8009334 <UART_SetConfig+0x3dc>)
 8009188:	fba2 2303 	umull	r2, r3, r2, r3
 800918c:	095b      	lsrs	r3, r3, #5
 800918e:	f003 0207 	and.w	r2, r3, #7
 8009192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4432      	add	r2, r6
 800919a:	609a      	str	r2, [r3, #8]
 800919c:	e26d      	b.n	800967a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800919e:	f7fd ffe9 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 80091a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091aa:	461c      	mov	r4, r3
 80091ac:	f04f 0500 	mov.w	r5, #0
 80091b0:	4622      	mov	r2, r4
 80091b2:	462b      	mov	r3, r5
 80091b4:	1891      	adds	r1, r2, r2
 80091b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80091b8:	415b      	adcs	r3, r3
 80091ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091c0:	1912      	adds	r2, r2, r4
 80091c2:	eb45 0303 	adc.w	r3, r5, r3
 80091c6:	f04f 0000 	mov.w	r0, #0
 80091ca:	f04f 0100 	mov.w	r1, #0
 80091ce:	00d9      	lsls	r1, r3, #3
 80091d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091d4:	00d0      	lsls	r0, r2, #3
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	1911      	adds	r1, r2, r4
 80091dc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80091e0:	416b      	adcs	r3, r5
 80091e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	461a      	mov	r2, r3
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	1891      	adds	r1, r2, r2
 80091f4:	6539      	str	r1, [r7, #80]	; 0x50
 80091f6:	415b      	adcs	r3, r3
 80091f8:	657b      	str	r3, [r7, #84]	; 0x54
 80091fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80091fe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009202:	f7f7 fcf9 	bl	8000bf8 <__aeabi_uldivmod>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4b4a      	ldr	r3, [pc, #296]	; (8009334 <UART_SetConfig+0x3dc>)
 800920c:	fba3 2302 	umull	r2, r3, r3, r2
 8009210:	095b      	lsrs	r3, r3, #5
 8009212:	011e      	lsls	r6, r3, #4
 8009214:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009218:	461c      	mov	r4, r3
 800921a:	f04f 0500 	mov.w	r5, #0
 800921e:	4622      	mov	r2, r4
 8009220:	462b      	mov	r3, r5
 8009222:	1891      	adds	r1, r2, r2
 8009224:	64b9      	str	r1, [r7, #72]	; 0x48
 8009226:	415b      	adcs	r3, r3
 8009228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800922a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800922e:	1912      	adds	r2, r2, r4
 8009230:	eb45 0303 	adc.w	r3, r5, r3
 8009234:	f04f 0000 	mov.w	r0, #0
 8009238:	f04f 0100 	mov.w	r1, #0
 800923c:	00d9      	lsls	r1, r3, #3
 800923e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009242:	00d0      	lsls	r0, r2, #3
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	1911      	adds	r1, r2, r4
 800924a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800924e:	416b      	adcs	r3, r5
 8009250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	461a      	mov	r2, r3
 800925c:	f04f 0300 	mov.w	r3, #0
 8009260:	1891      	adds	r1, r2, r2
 8009262:	6439      	str	r1, [r7, #64]	; 0x40
 8009264:	415b      	adcs	r3, r3
 8009266:	647b      	str	r3, [r7, #68]	; 0x44
 8009268:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800926c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009270:	f7f7 fcc2 	bl	8000bf8 <__aeabi_uldivmod>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4b2e      	ldr	r3, [pc, #184]	; (8009334 <UART_SetConfig+0x3dc>)
 800927a:	fba3 1302 	umull	r1, r3, r3, r2
 800927e:	095b      	lsrs	r3, r3, #5
 8009280:	2164      	movs	r1, #100	; 0x64
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	3332      	adds	r3, #50	; 0x32
 800928c:	4a29      	ldr	r2, [pc, #164]	; (8009334 <UART_SetConfig+0x3dc>)
 800928e:	fba2 2303 	umull	r2, r3, r2, r3
 8009292:	095b      	lsrs	r3, r3, #5
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800929a:	441e      	add	r6, r3
 800929c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092a0:	4618      	mov	r0, r3
 80092a2:	f04f 0100 	mov.w	r1, #0
 80092a6:	4602      	mov	r2, r0
 80092a8:	460b      	mov	r3, r1
 80092aa:	1894      	adds	r4, r2, r2
 80092ac:	63bc      	str	r4, [r7, #56]	; 0x38
 80092ae:	415b      	adcs	r3, r3
 80092b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092b6:	1812      	adds	r2, r2, r0
 80092b8:	eb41 0303 	adc.w	r3, r1, r3
 80092bc:	f04f 0400 	mov.w	r4, #0
 80092c0:	f04f 0500 	mov.w	r5, #0
 80092c4:	00dd      	lsls	r5, r3, #3
 80092c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80092ca:	00d4      	lsls	r4, r2, #3
 80092cc:	4622      	mov	r2, r4
 80092ce:	462b      	mov	r3, r5
 80092d0:	1814      	adds	r4, r2, r0
 80092d2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80092d6:	414b      	adcs	r3, r1
 80092d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f04f 0300 	mov.w	r3, #0
 80092e8:	1891      	adds	r1, r2, r2
 80092ea:	6339      	str	r1, [r7, #48]	; 0x30
 80092ec:	415b      	adcs	r3, r3
 80092ee:	637b      	str	r3, [r7, #52]	; 0x34
 80092f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80092f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80092f8:	f7f7 fc7e 	bl	8000bf8 <__aeabi_uldivmod>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4b0c      	ldr	r3, [pc, #48]	; (8009334 <UART_SetConfig+0x3dc>)
 8009302:	fba3 1302 	umull	r1, r3, r3, r2
 8009306:	095b      	lsrs	r3, r3, #5
 8009308:	2164      	movs	r1, #100	; 0x64
 800930a:	fb01 f303 	mul.w	r3, r1, r3
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	3332      	adds	r3, #50	; 0x32
 8009314:	4a07      	ldr	r2, [pc, #28]	; (8009334 <UART_SetConfig+0x3dc>)
 8009316:	fba2 2303 	umull	r2, r3, r2, r3
 800931a:	095b      	lsrs	r3, r3, #5
 800931c:	f003 0207 	and.w	r2, r3, #7
 8009320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4432      	add	r2, r6
 8009328:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800932a:	e1a6      	b.n	800967a <UART_SetConfig+0x722>
 800932c:	40011000 	.word	0x40011000
 8009330:	40011400 	.word	0x40011400
 8009334:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	4bd1      	ldr	r3, [pc, #836]	; (8009684 <UART_SetConfig+0x72c>)
 8009340:	429a      	cmp	r2, r3
 8009342:	d006      	beq.n	8009352 <UART_SetConfig+0x3fa>
 8009344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4bcf      	ldr	r3, [pc, #828]	; (8009688 <UART_SetConfig+0x730>)
 800934c:	429a      	cmp	r2, r3
 800934e:	f040 80ca 	bne.w	80094e6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009352:	f7fd ff23 	bl	800719c <HAL_RCC_GetPCLK2Freq>
 8009356:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800935a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800935e:	461c      	mov	r4, r3
 8009360:	f04f 0500 	mov.w	r5, #0
 8009364:	4622      	mov	r2, r4
 8009366:	462b      	mov	r3, r5
 8009368:	1891      	adds	r1, r2, r2
 800936a:	62b9      	str	r1, [r7, #40]	; 0x28
 800936c:	415b      	adcs	r3, r3
 800936e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009370:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009374:	1912      	adds	r2, r2, r4
 8009376:	eb45 0303 	adc.w	r3, r5, r3
 800937a:	f04f 0000 	mov.w	r0, #0
 800937e:	f04f 0100 	mov.w	r1, #0
 8009382:	00d9      	lsls	r1, r3, #3
 8009384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009388:	00d0      	lsls	r0, r2, #3
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	eb12 0a04 	adds.w	sl, r2, r4
 8009392:	eb43 0b05 	adc.w	fp, r3, r5
 8009396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	4618      	mov	r0, r3
 800939e:	f04f 0100 	mov.w	r1, #0
 80093a2:	f04f 0200 	mov.w	r2, #0
 80093a6:	f04f 0300 	mov.w	r3, #0
 80093aa:	008b      	lsls	r3, r1, #2
 80093ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093b0:	0082      	lsls	r2, r0, #2
 80093b2:	4650      	mov	r0, sl
 80093b4:	4659      	mov	r1, fp
 80093b6:	f7f7 fc1f 	bl	8000bf8 <__aeabi_uldivmod>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	4bb3      	ldr	r3, [pc, #716]	; (800968c <UART_SetConfig+0x734>)
 80093c0:	fba3 2302 	umull	r2, r3, r3, r2
 80093c4:	095b      	lsrs	r3, r3, #5
 80093c6:	011e      	lsls	r6, r3, #4
 80093c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093cc:	4618      	mov	r0, r3
 80093ce:	f04f 0100 	mov.w	r1, #0
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	1894      	adds	r4, r2, r2
 80093d8:	623c      	str	r4, [r7, #32]
 80093da:	415b      	adcs	r3, r3
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
 80093de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093e2:	1812      	adds	r2, r2, r0
 80093e4:	eb41 0303 	adc.w	r3, r1, r3
 80093e8:	f04f 0400 	mov.w	r4, #0
 80093ec:	f04f 0500 	mov.w	r5, #0
 80093f0:	00dd      	lsls	r5, r3, #3
 80093f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80093f6:	00d4      	lsls	r4, r2, #3
 80093f8:	4622      	mov	r2, r4
 80093fa:	462b      	mov	r3, r5
 80093fc:	1814      	adds	r4, r2, r0
 80093fe:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009402:	414b      	adcs	r3, r1
 8009404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	4618      	mov	r0, r3
 8009410:	f04f 0100 	mov.w	r1, #0
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	f04f 0300 	mov.w	r3, #0
 800941c:	008b      	lsls	r3, r1, #2
 800941e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009422:	0082      	lsls	r2, r0, #2
 8009424:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009428:	f7f7 fbe6 	bl	8000bf8 <__aeabi_uldivmod>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4b96      	ldr	r3, [pc, #600]	; (800968c <UART_SetConfig+0x734>)
 8009432:	fba3 1302 	umull	r1, r3, r3, r2
 8009436:	095b      	lsrs	r3, r3, #5
 8009438:	2164      	movs	r1, #100	; 0x64
 800943a:	fb01 f303 	mul.w	r3, r1, r3
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	011b      	lsls	r3, r3, #4
 8009442:	3332      	adds	r3, #50	; 0x32
 8009444:	4a91      	ldr	r2, [pc, #580]	; (800968c <UART_SetConfig+0x734>)
 8009446:	fba2 2303 	umull	r2, r3, r2, r3
 800944a:	095b      	lsrs	r3, r3, #5
 800944c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009450:	441e      	add	r6, r3
 8009452:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009456:	4618      	mov	r0, r3
 8009458:	f04f 0100 	mov.w	r1, #0
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	1894      	adds	r4, r2, r2
 8009462:	61bc      	str	r4, [r7, #24]
 8009464:	415b      	adcs	r3, r3
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800946c:	1812      	adds	r2, r2, r0
 800946e:	eb41 0303 	adc.w	r3, r1, r3
 8009472:	f04f 0400 	mov.w	r4, #0
 8009476:	f04f 0500 	mov.w	r5, #0
 800947a:	00dd      	lsls	r5, r3, #3
 800947c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009480:	00d4      	lsls	r4, r2, #3
 8009482:	4622      	mov	r2, r4
 8009484:	462b      	mov	r3, r5
 8009486:	1814      	adds	r4, r2, r0
 8009488:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800948c:	414b      	adcs	r3, r1
 800948e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	4618      	mov	r0, r3
 800949a:	f04f 0100 	mov.w	r1, #0
 800949e:	f04f 0200 	mov.w	r2, #0
 80094a2:	f04f 0300 	mov.w	r3, #0
 80094a6:	008b      	lsls	r3, r1, #2
 80094a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094ac:	0082      	lsls	r2, r0, #2
 80094ae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80094b2:	f7f7 fba1 	bl	8000bf8 <__aeabi_uldivmod>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4b74      	ldr	r3, [pc, #464]	; (800968c <UART_SetConfig+0x734>)
 80094bc:	fba3 1302 	umull	r1, r3, r3, r2
 80094c0:	095b      	lsrs	r3, r3, #5
 80094c2:	2164      	movs	r1, #100	; 0x64
 80094c4:	fb01 f303 	mul.w	r3, r1, r3
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	011b      	lsls	r3, r3, #4
 80094cc:	3332      	adds	r3, #50	; 0x32
 80094ce:	4a6f      	ldr	r2, [pc, #444]	; (800968c <UART_SetConfig+0x734>)
 80094d0:	fba2 2303 	umull	r2, r3, r2, r3
 80094d4:	095b      	lsrs	r3, r3, #5
 80094d6:	f003 020f 	and.w	r2, r3, #15
 80094da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4432      	add	r2, r6
 80094e2:	609a      	str	r2, [r3, #8]
 80094e4:	e0c9      	b.n	800967a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80094e6:	f7fd fe45 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 80094ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094f2:	461c      	mov	r4, r3
 80094f4:	f04f 0500 	mov.w	r5, #0
 80094f8:	4622      	mov	r2, r4
 80094fa:	462b      	mov	r3, r5
 80094fc:	1891      	adds	r1, r2, r2
 80094fe:	6139      	str	r1, [r7, #16]
 8009500:	415b      	adcs	r3, r3
 8009502:	617b      	str	r3, [r7, #20]
 8009504:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009508:	1912      	adds	r2, r2, r4
 800950a:	eb45 0303 	adc.w	r3, r5, r3
 800950e:	f04f 0000 	mov.w	r0, #0
 8009512:	f04f 0100 	mov.w	r1, #0
 8009516:	00d9      	lsls	r1, r3, #3
 8009518:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800951c:	00d0      	lsls	r0, r2, #3
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	eb12 0804 	adds.w	r8, r2, r4
 8009526:	eb43 0905 	adc.w	r9, r3, r5
 800952a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	4618      	mov	r0, r3
 8009532:	f04f 0100 	mov.w	r1, #0
 8009536:	f04f 0200 	mov.w	r2, #0
 800953a:	f04f 0300 	mov.w	r3, #0
 800953e:	008b      	lsls	r3, r1, #2
 8009540:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009544:	0082      	lsls	r2, r0, #2
 8009546:	4640      	mov	r0, r8
 8009548:	4649      	mov	r1, r9
 800954a:	f7f7 fb55 	bl	8000bf8 <__aeabi_uldivmod>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4b4e      	ldr	r3, [pc, #312]	; (800968c <UART_SetConfig+0x734>)
 8009554:	fba3 2302 	umull	r2, r3, r3, r2
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	011e      	lsls	r6, r3, #4
 800955c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009560:	4618      	mov	r0, r3
 8009562:	f04f 0100 	mov.w	r1, #0
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	1894      	adds	r4, r2, r2
 800956c:	60bc      	str	r4, [r7, #8]
 800956e:	415b      	adcs	r3, r3
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009576:	1812      	adds	r2, r2, r0
 8009578:	eb41 0303 	adc.w	r3, r1, r3
 800957c:	f04f 0400 	mov.w	r4, #0
 8009580:	f04f 0500 	mov.w	r5, #0
 8009584:	00dd      	lsls	r5, r3, #3
 8009586:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800958a:	00d4      	lsls	r4, r2, #3
 800958c:	4622      	mov	r2, r4
 800958e:	462b      	mov	r3, r5
 8009590:	1814      	adds	r4, r2, r0
 8009592:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009596:	414b      	adcs	r3, r1
 8009598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800959c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f04f 0100 	mov.w	r1, #0
 80095a8:	f04f 0200 	mov.w	r2, #0
 80095ac:	f04f 0300 	mov.w	r3, #0
 80095b0:	008b      	lsls	r3, r1, #2
 80095b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095b6:	0082      	lsls	r2, r0, #2
 80095b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80095bc:	f7f7 fb1c 	bl	8000bf8 <__aeabi_uldivmod>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4b31      	ldr	r3, [pc, #196]	; (800968c <UART_SetConfig+0x734>)
 80095c6:	fba3 1302 	umull	r1, r3, r3, r2
 80095ca:	095b      	lsrs	r3, r3, #5
 80095cc:	2164      	movs	r1, #100	; 0x64
 80095ce:	fb01 f303 	mul.w	r3, r1, r3
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	011b      	lsls	r3, r3, #4
 80095d6:	3332      	adds	r3, #50	; 0x32
 80095d8:	4a2c      	ldr	r2, [pc, #176]	; (800968c <UART_SetConfig+0x734>)
 80095da:	fba2 2303 	umull	r2, r3, r2, r3
 80095de:	095b      	lsrs	r3, r3, #5
 80095e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095e4:	441e      	add	r6, r3
 80095e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095ea:	4618      	mov	r0, r3
 80095ec:	f04f 0100 	mov.w	r1, #0
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	1894      	adds	r4, r2, r2
 80095f6:	603c      	str	r4, [r7, #0]
 80095f8:	415b      	adcs	r3, r3
 80095fa:	607b      	str	r3, [r7, #4]
 80095fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009600:	1812      	adds	r2, r2, r0
 8009602:	eb41 0303 	adc.w	r3, r1, r3
 8009606:	f04f 0400 	mov.w	r4, #0
 800960a:	f04f 0500 	mov.w	r5, #0
 800960e:	00dd      	lsls	r5, r3, #3
 8009610:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009614:	00d4      	lsls	r4, r2, #3
 8009616:	4622      	mov	r2, r4
 8009618:	462b      	mov	r3, r5
 800961a:	1814      	adds	r4, r2, r0
 800961c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009620:	414b      	adcs	r3, r1
 8009622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	4618      	mov	r0, r3
 800962e:	f04f 0100 	mov.w	r1, #0
 8009632:	f04f 0200 	mov.w	r2, #0
 8009636:	f04f 0300 	mov.w	r3, #0
 800963a:	008b      	lsls	r3, r1, #2
 800963c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009640:	0082      	lsls	r2, r0, #2
 8009642:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009646:	f7f7 fad7 	bl	8000bf8 <__aeabi_uldivmod>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4b0f      	ldr	r3, [pc, #60]	; (800968c <UART_SetConfig+0x734>)
 8009650:	fba3 1302 	umull	r1, r3, r3, r2
 8009654:	095b      	lsrs	r3, r3, #5
 8009656:	2164      	movs	r1, #100	; 0x64
 8009658:	fb01 f303 	mul.w	r3, r1, r3
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	3332      	adds	r3, #50	; 0x32
 8009662:	4a0a      	ldr	r2, [pc, #40]	; (800968c <UART_SetConfig+0x734>)
 8009664:	fba2 2303 	umull	r2, r3, r2, r3
 8009668:	095b      	lsrs	r3, r3, #5
 800966a:	f003 020f 	and.w	r2, r3, #15
 800966e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4432      	add	r2, r6
 8009676:	609a      	str	r2, [r3, #8]
}
 8009678:	e7ff      	b.n	800967a <UART_SetConfig+0x722>
 800967a:	bf00      	nop
 800967c:	37f4      	adds	r7, #244	; 0xf4
 800967e:	46bd      	mov	sp, r7
 8009680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009684:	40011000 	.word	0x40011000
 8009688:	40011400 	.word	0x40011400
 800968c:	51eb851f 	.word	0x51eb851f

08009690 <__errno>:
 8009690:	4b01      	ldr	r3, [pc, #4]	; (8009698 <__errno+0x8>)
 8009692:	6818      	ldr	r0, [r3, #0]
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	200001ec 	.word	0x200001ec

0800969c <__libc_init_array>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	4d0d      	ldr	r5, [pc, #52]	; (80096d4 <__libc_init_array+0x38>)
 80096a0:	4c0d      	ldr	r4, [pc, #52]	; (80096d8 <__libc_init_array+0x3c>)
 80096a2:	1b64      	subs	r4, r4, r5
 80096a4:	10a4      	asrs	r4, r4, #2
 80096a6:	2600      	movs	r6, #0
 80096a8:	42a6      	cmp	r6, r4
 80096aa:	d109      	bne.n	80096c0 <__libc_init_array+0x24>
 80096ac:	4d0b      	ldr	r5, [pc, #44]	; (80096dc <__libc_init_array+0x40>)
 80096ae:	4c0c      	ldr	r4, [pc, #48]	; (80096e0 <__libc_init_array+0x44>)
 80096b0:	f002 fa74 	bl	800bb9c <_init>
 80096b4:	1b64      	subs	r4, r4, r5
 80096b6:	10a4      	asrs	r4, r4, #2
 80096b8:	2600      	movs	r6, #0
 80096ba:	42a6      	cmp	r6, r4
 80096bc:	d105      	bne.n	80096ca <__libc_init_array+0x2e>
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c4:	4798      	blx	r3
 80096c6:	3601      	adds	r6, #1
 80096c8:	e7ee      	b.n	80096a8 <__libc_init_array+0xc>
 80096ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ce:	4798      	blx	r3
 80096d0:	3601      	adds	r6, #1
 80096d2:	e7f2      	b.n	80096ba <__libc_init_array+0x1e>
 80096d4:	0800bea0 	.word	0x0800bea0
 80096d8:	0800bea0 	.word	0x0800bea0
 80096dc:	0800bea0 	.word	0x0800bea0
 80096e0:	0800bea4 	.word	0x0800bea4

080096e4 <memset>:
 80096e4:	4402      	add	r2, r0
 80096e6:	4603      	mov	r3, r0
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d100      	bne.n	80096ee <memset+0xa>
 80096ec:	4770      	bx	lr
 80096ee:	f803 1b01 	strb.w	r1, [r3], #1
 80096f2:	e7f9      	b.n	80096e8 <memset+0x4>
 80096f4:	0000      	movs	r0, r0
	...

080096f8 <atan>:
 80096f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	ec55 4b10 	vmov	r4, r5, d0
 8009700:	4bc3      	ldr	r3, [pc, #780]	; (8009a10 <atan+0x318>)
 8009702:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009706:	429e      	cmp	r6, r3
 8009708:	46ab      	mov	fp, r5
 800970a:	dd18      	ble.n	800973e <atan+0x46>
 800970c:	4bc1      	ldr	r3, [pc, #772]	; (8009a14 <atan+0x31c>)
 800970e:	429e      	cmp	r6, r3
 8009710:	dc01      	bgt.n	8009716 <atan+0x1e>
 8009712:	d109      	bne.n	8009728 <atan+0x30>
 8009714:	b144      	cbz	r4, 8009728 <atan+0x30>
 8009716:	4622      	mov	r2, r4
 8009718:	462b      	mov	r3, r5
 800971a:	4620      	mov	r0, r4
 800971c:	4629      	mov	r1, r5
 800971e:	f7f6 fd6d 	bl	80001fc <__adddf3>
 8009722:	4604      	mov	r4, r0
 8009724:	460d      	mov	r5, r1
 8009726:	e006      	b.n	8009736 <atan+0x3e>
 8009728:	f1bb 0f00 	cmp.w	fp, #0
 800972c:	f300 8131 	bgt.w	8009992 <atan+0x29a>
 8009730:	a59b      	add	r5, pc, #620	; (adr r5, 80099a0 <atan+0x2a8>)
 8009732:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009736:	ec45 4b10 	vmov	d0, r4, r5
 800973a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973e:	4bb6      	ldr	r3, [pc, #728]	; (8009a18 <atan+0x320>)
 8009740:	429e      	cmp	r6, r3
 8009742:	dc14      	bgt.n	800976e <atan+0x76>
 8009744:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009748:	429e      	cmp	r6, r3
 800974a:	dc0d      	bgt.n	8009768 <atan+0x70>
 800974c:	a396      	add	r3, pc, #600	; (adr r3, 80099a8 <atan+0x2b0>)
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	ee10 0a10 	vmov	r0, s0
 8009756:	4629      	mov	r1, r5
 8009758:	f7f6 fd50 	bl	80001fc <__adddf3>
 800975c:	4baf      	ldr	r3, [pc, #700]	; (8009a1c <atan+0x324>)
 800975e:	2200      	movs	r2, #0
 8009760:	f7f7 f992 	bl	8000a88 <__aeabi_dcmpgt>
 8009764:	2800      	cmp	r0, #0
 8009766:	d1e6      	bne.n	8009736 <atan+0x3e>
 8009768:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800976c:	e02b      	b.n	80097c6 <atan+0xce>
 800976e:	f000 f9b3 	bl	8009ad8 <fabs>
 8009772:	4bab      	ldr	r3, [pc, #684]	; (8009a20 <atan+0x328>)
 8009774:	429e      	cmp	r6, r3
 8009776:	ec55 4b10 	vmov	r4, r5, d0
 800977a:	f300 80bf 	bgt.w	80098fc <atan+0x204>
 800977e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009782:	429e      	cmp	r6, r3
 8009784:	f300 80a0 	bgt.w	80098c8 <atan+0x1d0>
 8009788:	ee10 2a10 	vmov	r2, s0
 800978c:	ee10 0a10 	vmov	r0, s0
 8009790:	462b      	mov	r3, r5
 8009792:	4629      	mov	r1, r5
 8009794:	f7f6 fd32 	bl	80001fc <__adddf3>
 8009798:	4ba0      	ldr	r3, [pc, #640]	; (8009a1c <atan+0x324>)
 800979a:	2200      	movs	r2, #0
 800979c:	f7f6 fd2c 	bl	80001f8 <__aeabi_dsub>
 80097a0:	2200      	movs	r2, #0
 80097a2:	4606      	mov	r6, r0
 80097a4:	460f      	mov	r7, r1
 80097a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097aa:	4620      	mov	r0, r4
 80097ac:	4629      	mov	r1, r5
 80097ae:	f7f6 fd25 	bl	80001fc <__adddf3>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4630      	mov	r0, r6
 80097b8:	4639      	mov	r1, r7
 80097ba:	f7f6 ffff 	bl	80007bc <__aeabi_ddiv>
 80097be:	f04f 0a00 	mov.w	sl, #0
 80097c2:	4604      	mov	r4, r0
 80097c4:	460d      	mov	r5, r1
 80097c6:	4622      	mov	r2, r4
 80097c8:	462b      	mov	r3, r5
 80097ca:	4620      	mov	r0, r4
 80097cc:	4629      	mov	r1, r5
 80097ce:	f7f6 fecb 	bl	8000568 <__aeabi_dmul>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4680      	mov	r8, r0
 80097d8:	4689      	mov	r9, r1
 80097da:	f7f6 fec5 	bl	8000568 <__aeabi_dmul>
 80097de:	a374      	add	r3, pc, #464	; (adr r3, 80099b0 <atan+0x2b8>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	4606      	mov	r6, r0
 80097e6:	460f      	mov	r7, r1
 80097e8:	f7f6 febe 	bl	8000568 <__aeabi_dmul>
 80097ec:	a372      	add	r3, pc, #456	; (adr r3, 80099b8 <atan+0x2c0>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f7f6 fd03 	bl	80001fc <__adddf3>
 80097f6:	4632      	mov	r2, r6
 80097f8:	463b      	mov	r3, r7
 80097fa:	f7f6 feb5 	bl	8000568 <__aeabi_dmul>
 80097fe:	a370      	add	r3, pc, #448	; (adr r3, 80099c0 <atan+0x2c8>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f6 fcfa 	bl	80001fc <__adddf3>
 8009808:	4632      	mov	r2, r6
 800980a:	463b      	mov	r3, r7
 800980c:	f7f6 feac 	bl	8000568 <__aeabi_dmul>
 8009810:	a36d      	add	r3, pc, #436	; (adr r3, 80099c8 <atan+0x2d0>)
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f7f6 fcf1 	bl	80001fc <__adddf3>
 800981a:	4632      	mov	r2, r6
 800981c:	463b      	mov	r3, r7
 800981e:	f7f6 fea3 	bl	8000568 <__aeabi_dmul>
 8009822:	a36b      	add	r3, pc, #428	; (adr r3, 80099d0 <atan+0x2d8>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f7f6 fce8 	bl	80001fc <__adddf3>
 800982c:	4632      	mov	r2, r6
 800982e:	463b      	mov	r3, r7
 8009830:	f7f6 fe9a 	bl	8000568 <__aeabi_dmul>
 8009834:	a368      	add	r3, pc, #416	; (adr r3, 80099d8 <atan+0x2e0>)
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	f7f6 fcdf 	bl	80001fc <__adddf3>
 800983e:	4642      	mov	r2, r8
 8009840:	464b      	mov	r3, r9
 8009842:	f7f6 fe91 	bl	8000568 <__aeabi_dmul>
 8009846:	a366      	add	r3, pc, #408	; (adr r3, 80099e0 <atan+0x2e8>)
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	4680      	mov	r8, r0
 800984e:	4689      	mov	r9, r1
 8009850:	4630      	mov	r0, r6
 8009852:	4639      	mov	r1, r7
 8009854:	f7f6 fe88 	bl	8000568 <__aeabi_dmul>
 8009858:	a363      	add	r3, pc, #396	; (adr r3, 80099e8 <atan+0x2f0>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fccb 	bl	80001f8 <__aeabi_dsub>
 8009862:	4632      	mov	r2, r6
 8009864:	463b      	mov	r3, r7
 8009866:	f7f6 fe7f 	bl	8000568 <__aeabi_dmul>
 800986a:	a361      	add	r3, pc, #388	; (adr r3, 80099f0 <atan+0x2f8>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7f6 fcc2 	bl	80001f8 <__aeabi_dsub>
 8009874:	4632      	mov	r2, r6
 8009876:	463b      	mov	r3, r7
 8009878:	f7f6 fe76 	bl	8000568 <__aeabi_dmul>
 800987c:	a35e      	add	r3, pc, #376	; (adr r3, 80099f8 <atan+0x300>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	f7f6 fcb9 	bl	80001f8 <__aeabi_dsub>
 8009886:	4632      	mov	r2, r6
 8009888:	463b      	mov	r3, r7
 800988a:	f7f6 fe6d 	bl	8000568 <__aeabi_dmul>
 800988e:	a35c      	add	r3, pc, #368	; (adr r3, 8009a00 <atan+0x308>)
 8009890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009894:	f7f6 fcb0 	bl	80001f8 <__aeabi_dsub>
 8009898:	4632      	mov	r2, r6
 800989a:	463b      	mov	r3, r7
 800989c:	f7f6 fe64 	bl	8000568 <__aeabi_dmul>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	4640      	mov	r0, r8
 80098a6:	4649      	mov	r1, r9
 80098a8:	f7f6 fca8 	bl	80001fc <__adddf3>
 80098ac:	4622      	mov	r2, r4
 80098ae:	462b      	mov	r3, r5
 80098b0:	f7f6 fe5a 	bl	8000568 <__aeabi_dmul>
 80098b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	d14b      	bne.n	8009956 <atan+0x25e>
 80098be:	4620      	mov	r0, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	f7f6 fc99 	bl	80001f8 <__aeabi_dsub>
 80098c6:	e72c      	b.n	8009722 <atan+0x2a>
 80098c8:	ee10 0a10 	vmov	r0, s0
 80098cc:	4b53      	ldr	r3, [pc, #332]	; (8009a1c <atan+0x324>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	4629      	mov	r1, r5
 80098d2:	f7f6 fc91 	bl	80001f8 <__aeabi_dsub>
 80098d6:	4b51      	ldr	r3, [pc, #324]	; (8009a1c <atan+0x324>)
 80098d8:	4606      	mov	r6, r0
 80098da:	460f      	mov	r7, r1
 80098dc:	2200      	movs	r2, #0
 80098de:	4620      	mov	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	f7f6 fc8b 	bl	80001fc <__adddf3>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f6 ff65 	bl	80007bc <__aeabi_ddiv>
 80098f2:	f04f 0a01 	mov.w	sl, #1
 80098f6:	4604      	mov	r4, r0
 80098f8:	460d      	mov	r5, r1
 80098fa:	e764      	b.n	80097c6 <atan+0xce>
 80098fc:	4b49      	ldr	r3, [pc, #292]	; (8009a24 <atan+0x32c>)
 80098fe:	429e      	cmp	r6, r3
 8009900:	da1d      	bge.n	800993e <atan+0x246>
 8009902:	ee10 0a10 	vmov	r0, s0
 8009906:	4b48      	ldr	r3, [pc, #288]	; (8009a28 <atan+0x330>)
 8009908:	2200      	movs	r2, #0
 800990a:	4629      	mov	r1, r5
 800990c:	f7f6 fc74 	bl	80001f8 <__aeabi_dsub>
 8009910:	4b45      	ldr	r3, [pc, #276]	; (8009a28 <atan+0x330>)
 8009912:	4606      	mov	r6, r0
 8009914:	460f      	mov	r7, r1
 8009916:	2200      	movs	r2, #0
 8009918:	4620      	mov	r0, r4
 800991a:	4629      	mov	r1, r5
 800991c:	f7f6 fe24 	bl	8000568 <__aeabi_dmul>
 8009920:	4b3e      	ldr	r3, [pc, #248]	; (8009a1c <atan+0x324>)
 8009922:	2200      	movs	r2, #0
 8009924:	f7f6 fc6a 	bl	80001fc <__adddf3>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4630      	mov	r0, r6
 800992e:	4639      	mov	r1, r7
 8009930:	f7f6 ff44 	bl	80007bc <__aeabi_ddiv>
 8009934:	f04f 0a02 	mov.w	sl, #2
 8009938:	4604      	mov	r4, r0
 800993a:	460d      	mov	r5, r1
 800993c:	e743      	b.n	80097c6 <atan+0xce>
 800993e:	462b      	mov	r3, r5
 8009940:	ee10 2a10 	vmov	r2, s0
 8009944:	4939      	ldr	r1, [pc, #228]	; (8009a2c <atan+0x334>)
 8009946:	2000      	movs	r0, #0
 8009948:	f7f6 ff38 	bl	80007bc <__aeabi_ddiv>
 800994c:	f04f 0a03 	mov.w	sl, #3
 8009950:	4604      	mov	r4, r0
 8009952:	460d      	mov	r5, r1
 8009954:	e737      	b.n	80097c6 <atan+0xce>
 8009956:	4b36      	ldr	r3, [pc, #216]	; (8009a30 <atan+0x338>)
 8009958:	4e36      	ldr	r6, [pc, #216]	; (8009a34 <atan+0x33c>)
 800995a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800995e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009962:	e9da 2300 	ldrd	r2, r3, [sl]
 8009966:	f7f6 fc47 	bl	80001f8 <__aeabi_dsub>
 800996a:	4622      	mov	r2, r4
 800996c:	462b      	mov	r3, r5
 800996e:	f7f6 fc43 	bl	80001f8 <__aeabi_dsub>
 8009972:	4602      	mov	r2, r0
 8009974:	460b      	mov	r3, r1
 8009976:	e9d6 0100 	ldrd	r0, r1, [r6]
 800997a:	f7f6 fc3d 	bl	80001f8 <__aeabi_dsub>
 800997e:	f1bb 0f00 	cmp.w	fp, #0
 8009982:	4604      	mov	r4, r0
 8009984:	460d      	mov	r5, r1
 8009986:	f6bf aed6 	bge.w	8009736 <atan+0x3e>
 800998a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800998e:	461d      	mov	r5, r3
 8009990:	e6d1      	b.n	8009736 <atan+0x3e>
 8009992:	a51d      	add	r5, pc, #116	; (adr r5, 8009a08 <atan+0x310>)
 8009994:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009998:	e6cd      	b.n	8009736 <atan+0x3e>
 800999a:	bf00      	nop
 800999c:	f3af 8000 	nop.w
 80099a0:	54442d18 	.word	0x54442d18
 80099a4:	bff921fb 	.word	0xbff921fb
 80099a8:	8800759c 	.word	0x8800759c
 80099ac:	7e37e43c 	.word	0x7e37e43c
 80099b0:	e322da11 	.word	0xe322da11
 80099b4:	3f90ad3a 	.word	0x3f90ad3a
 80099b8:	24760deb 	.word	0x24760deb
 80099bc:	3fa97b4b 	.word	0x3fa97b4b
 80099c0:	a0d03d51 	.word	0xa0d03d51
 80099c4:	3fb10d66 	.word	0x3fb10d66
 80099c8:	c54c206e 	.word	0xc54c206e
 80099cc:	3fb745cd 	.word	0x3fb745cd
 80099d0:	920083ff 	.word	0x920083ff
 80099d4:	3fc24924 	.word	0x3fc24924
 80099d8:	5555550d 	.word	0x5555550d
 80099dc:	3fd55555 	.word	0x3fd55555
 80099e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80099e4:	bfa2b444 	.word	0xbfa2b444
 80099e8:	52defd9a 	.word	0x52defd9a
 80099ec:	3fadde2d 	.word	0x3fadde2d
 80099f0:	af749a6d 	.word	0xaf749a6d
 80099f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80099f8:	fe231671 	.word	0xfe231671
 80099fc:	3fbc71c6 	.word	0x3fbc71c6
 8009a00:	9998ebc4 	.word	0x9998ebc4
 8009a04:	3fc99999 	.word	0x3fc99999
 8009a08:	54442d18 	.word	0x54442d18
 8009a0c:	3ff921fb 	.word	0x3ff921fb
 8009a10:	440fffff 	.word	0x440fffff
 8009a14:	7ff00000 	.word	0x7ff00000
 8009a18:	3fdbffff 	.word	0x3fdbffff
 8009a1c:	3ff00000 	.word	0x3ff00000
 8009a20:	3ff2ffff 	.word	0x3ff2ffff
 8009a24:	40038000 	.word	0x40038000
 8009a28:	3ff80000 	.word	0x3ff80000
 8009a2c:	bff00000 	.word	0xbff00000
 8009a30:	0800bc28 	.word	0x0800bc28
 8009a34:	0800bc08 	.word	0x0800bc08

08009a38 <cos>:
 8009a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a3a:	ec53 2b10 	vmov	r2, r3, d0
 8009a3e:	4824      	ldr	r0, [pc, #144]	; (8009ad0 <cos+0x98>)
 8009a40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a44:	4281      	cmp	r1, r0
 8009a46:	dc06      	bgt.n	8009a56 <cos+0x1e>
 8009a48:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8009ac8 <cos+0x90>
 8009a4c:	f001 fa38 	bl	800aec0 <__kernel_cos>
 8009a50:	ec51 0b10 	vmov	r0, r1, d0
 8009a54:	e007      	b.n	8009a66 <cos+0x2e>
 8009a56:	481f      	ldr	r0, [pc, #124]	; (8009ad4 <cos+0x9c>)
 8009a58:	4281      	cmp	r1, r0
 8009a5a:	dd09      	ble.n	8009a70 <cos+0x38>
 8009a5c:	ee10 0a10 	vmov	r0, s0
 8009a60:	4619      	mov	r1, r3
 8009a62:	f7f6 fbc9 	bl	80001f8 <__aeabi_dsub>
 8009a66:	ec41 0b10 	vmov	d0, r0, r1
 8009a6a:	b005      	add	sp, #20
 8009a6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a70:	4668      	mov	r0, sp
 8009a72:	f000 ff65 	bl	800a940 <__ieee754_rem_pio2>
 8009a76:	f000 0003 	and.w	r0, r0, #3
 8009a7a:	2801      	cmp	r0, #1
 8009a7c:	d007      	beq.n	8009a8e <cos+0x56>
 8009a7e:	2802      	cmp	r0, #2
 8009a80:	d012      	beq.n	8009aa8 <cos+0x70>
 8009a82:	b9c0      	cbnz	r0, 8009ab6 <cos+0x7e>
 8009a84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a88:	ed9d 0b00 	vldr	d0, [sp]
 8009a8c:	e7de      	b.n	8009a4c <cos+0x14>
 8009a8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a92:	ed9d 0b00 	vldr	d0, [sp]
 8009a96:	f001 fe1b 	bl	800b6d0 <__kernel_sin>
 8009a9a:	ec53 2b10 	vmov	r2, r3, d0
 8009a9e:	ee10 0a10 	vmov	r0, s0
 8009aa2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009aa6:	e7de      	b.n	8009a66 <cos+0x2e>
 8009aa8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009aac:	ed9d 0b00 	vldr	d0, [sp]
 8009ab0:	f001 fa06 	bl	800aec0 <__kernel_cos>
 8009ab4:	e7f1      	b.n	8009a9a <cos+0x62>
 8009ab6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009aba:	ed9d 0b00 	vldr	d0, [sp]
 8009abe:	2001      	movs	r0, #1
 8009ac0:	f001 fe06 	bl	800b6d0 <__kernel_sin>
 8009ac4:	e7c4      	b.n	8009a50 <cos+0x18>
 8009ac6:	bf00      	nop
	...
 8009ad0:	3fe921fb 	.word	0x3fe921fb
 8009ad4:	7fefffff 	.word	0x7fefffff

08009ad8 <fabs>:
 8009ad8:	ec51 0b10 	vmov	r0, r1, d0
 8009adc:	ee10 2a10 	vmov	r2, s0
 8009ae0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ae4:	ec43 2b10 	vmov	d0, r2, r3
 8009ae8:	4770      	bx	lr
 8009aea:	0000      	movs	r0, r0
 8009aec:	0000      	movs	r0, r0
	...

08009af0 <sin>:
 8009af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009af2:	ec53 2b10 	vmov	r2, r3, d0
 8009af6:	4826      	ldr	r0, [pc, #152]	; (8009b90 <sin+0xa0>)
 8009af8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009afc:	4281      	cmp	r1, r0
 8009afe:	dc07      	bgt.n	8009b10 <sin+0x20>
 8009b00:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009b88 <sin+0x98>
 8009b04:	2000      	movs	r0, #0
 8009b06:	f001 fde3 	bl	800b6d0 <__kernel_sin>
 8009b0a:	ec51 0b10 	vmov	r0, r1, d0
 8009b0e:	e007      	b.n	8009b20 <sin+0x30>
 8009b10:	4820      	ldr	r0, [pc, #128]	; (8009b94 <sin+0xa4>)
 8009b12:	4281      	cmp	r1, r0
 8009b14:	dd09      	ble.n	8009b2a <sin+0x3a>
 8009b16:	ee10 0a10 	vmov	r0, s0
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	f7f6 fb6c 	bl	80001f8 <__aeabi_dsub>
 8009b20:	ec41 0b10 	vmov	d0, r0, r1
 8009b24:	b005      	add	sp, #20
 8009b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b2a:	4668      	mov	r0, sp
 8009b2c:	f000 ff08 	bl	800a940 <__ieee754_rem_pio2>
 8009b30:	f000 0003 	and.w	r0, r0, #3
 8009b34:	2801      	cmp	r0, #1
 8009b36:	d008      	beq.n	8009b4a <sin+0x5a>
 8009b38:	2802      	cmp	r0, #2
 8009b3a:	d00d      	beq.n	8009b58 <sin+0x68>
 8009b3c:	b9d0      	cbnz	r0, 8009b74 <sin+0x84>
 8009b3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b42:	ed9d 0b00 	vldr	d0, [sp]
 8009b46:	2001      	movs	r0, #1
 8009b48:	e7dd      	b.n	8009b06 <sin+0x16>
 8009b4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b4e:	ed9d 0b00 	vldr	d0, [sp]
 8009b52:	f001 f9b5 	bl	800aec0 <__kernel_cos>
 8009b56:	e7d8      	b.n	8009b0a <sin+0x1a>
 8009b58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b5c:	ed9d 0b00 	vldr	d0, [sp]
 8009b60:	2001      	movs	r0, #1
 8009b62:	f001 fdb5 	bl	800b6d0 <__kernel_sin>
 8009b66:	ec53 2b10 	vmov	r2, r3, d0
 8009b6a:	ee10 0a10 	vmov	r0, s0
 8009b6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009b72:	e7d5      	b.n	8009b20 <sin+0x30>
 8009b74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b78:	ed9d 0b00 	vldr	d0, [sp]
 8009b7c:	f001 f9a0 	bl	800aec0 <__kernel_cos>
 8009b80:	e7f1      	b.n	8009b66 <sin+0x76>
 8009b82:	bf00      	nop
 8009b84:	f3af 8000 	nop.w
	...
 8009b90:	3fe921fb 	.word	0x3fe921fb
 8009b94:	7fefffff 	.word	0x7fefffff

08009b98 <atan2>:
 8009b98:	f000 b8e2 	b.w	8009d60 <__ieee754_atan2>

08009b9c <pow>:
 8009b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba0:	ec59 8b10 	vmov	r8, r9, d0
 8009ba4:	ec57 6b11 	vmov	r6, r7, d1
 8009ba8:	f000 f9a6 	bl	8009ef8 <__ieee754_pow>
 8009bac:	4b4e      	ldr	r3, [pc, #312]	; (8009ce8 <pow+0x14c>)
 8009bae:	f993 3000 	ldrsb.w	r3, [r3]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	ec55 4b10 	vmov	r4, r5, d0
 8009bb8:	d015      	beq.n	8009be6 <pow+0x4a>
 8009bba:	4632      	mov	r2, r6
 8009bbc:	463b      	mov	r3, r7
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	f7f6 ff6b 	bl	8000a9c <__aeabi_dcmpun>
 8009bc6:	b970      	cbnz	r0, 8009be6 <pow+0x4a>
 8009bc8:	4642      	mov	r2, r8
 8009bca:	464b      	mov	r3, r9
 8009bcc:	4640      	mov	r0, r8
 8009bce:	4649      	mov	r1, r9
 8009bd0:	f7f6 ff64 	bl	8000a9c <__aeabi_dcmpun>
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	b148      	cbz	r0, 8009bee <pow+0x52>
 8009bda:	4630      	mov	r0, r6
 8009bdc:	4639      	mov	r1, r7
 8009bde:	f7f6 ff2b 	bl	8000a38 <__aeabi_dcmpeq>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d17d      	bne.n	8009ce2 <pow+0x146>
 8009be6:	ec45 4b10 	vmov	d0, r4, r5
 8009bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bee:	4640      	mov	r0, r8
 8009bf0:	4649      	mov	r1, r9
 8009bf2:	f7f6 ff21 	bl	8000a38 <__aeabi_dcmpeq>
 8009bf6:	b1e0      	cbz	r0, 8009c32 <pow+0x96>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	4639      	mov	r1, r7
 8009c00:	f7f6 ff1a 	bl	8000a38 <__aeabi_dcmpeq>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d16c      	bne.n	8009ce2 <pow+0x146>
 8009c08:	ec47 6b10 	vmov	d0, r6, r7
 8009c0c:	f001 fe1e 	bl	800b84c <finite>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d0e8      	beq.n	8009be6 <pow+0x4a>
 8009c14:	2200      	movs	r2, #0
 8009c16:	2300      	movs	r3, #0
 8009c18:	4630      	mov	r0, r6
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	f7f6 ff16 	bl	8000a4c <__aeabi_dcmplt>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d0e0      	beq.n	8009be6 <pow+0x4a>
 8009c24:	f7ff fd34 	bl	8009690 <__errno>
 8009c28:	2321      	movs	r3, #33	; 0x21
 8009c2a:	6003      	str	r3, [r0, #0]
 8009c2c:	2400      	movs	r4, #0
 8009c2e:	4d2f      	ldr	r5, [pc, #188]	; (8009cec <pow+0x150>)
 8009c30:	e7d9      	b.n	8009be6 <pow+0x4a>
 8009c32:	ec45 4b10 	vmov	d0, r4, r5
 8009c36:	f001 fe09 	bl	800b84c <finite>
 8009c3a:	bbb8      	cbnz	r0, 8009cac <pow+0x110>
 8009c3c:	ec49 8b10 	vmov	d0, r8, r9
 8009c40:	f001 fe04 	bl	800b84c <finite>
 8009c44:	b390      	cbz	r0, 8009cac <pow+0x110>
 8009c46:	ec47 6b10 	vmov	d0, r6, r7
 8009c4a:	f001 fdff 	bl	800b84c <finite>
 8009c4e:	b368      	cbz	r0, 8009cac <pow+0x110>
 8009c50:	4622      	mov	r2, r4
 8009c52:	462b      	mov	r3, r5
 8009c54:	4620      	mov	r0, r4
 8009c56:	4629      	mov	r1, r5
 8009c58:	f7f6 ff20 	bl	8000a9c <__aeabi_dcmpun>
 8009c5c:	b160      	cbz	r0, 8009c78 <pow+0xdc>
 8009c5e:	f7ff fd17 	bl	8009690 <__errno>
 8009c62:	2321      	movs	r3, #33	; 0x21
 8009c64:	6003      	str	r3, [r0, #0]
 8009c66:	2200      	movs	r2, #0
 8009c68:	2300      	movs	r3, #0
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	f7f6 fda5 	bl	80007bc <__aeabi_ddiv>
 8009c72:	4604      	mov	r4, r0
 8009c74:	460d      	mov	r5, r1
 8009c76:	e7b6      	b.n	8009be6 <pow+0x4a>
 8009c78:	f7ff fd0a 	bl	8009690 <__errno>
 8009c7c:	2322      	movs	r3, #34	; 0x22
 8009c7e:	6003      	str	r3, [r0, #0]
 8009c80:	2200      	movs	r2, #0
 8009c82:	2300      	movs	r3, #0
 8009c84:	4640      	mov	r0, r8
 8009c86:	4649      	mov	r1, r9
 8009c88:	f7f6 fee0 	bl	8000a4c <__aeabi_dcmplt>
 8009c8c:	2400      	movs	r4, #0
 8009c8e:	b158      	cbz	r0, 8009ca8 <pow+0x10c>
 8009c90:	ec47 6b10 	vmov	d0, r6, r7
 8009c94:	f001 fe70 	bl	800b978 <rint>
 8009c98:	4632      	mov	r2, r6
 8009c9a:	ec51 0b10 	vmov	r0, r1, d0
 8009c9e:	463b      	mov	r3, r7
 8009ca0:	f7f6 feca 	bl	8000a38 <__aeabi_dcmpeq>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d0c2      	beq.n	8009c2e <pow+0x92>
 8009ca8:	4d11      	ldr	r5, [pc, #68]	; (8009cf0 <pow+0x154>)
 8009caa:	e79c      	b.n	8009be6 <pow+0x4a>
 8009cac:	2200      	movs	r2, #0
 8009cae:	2300      	movs	r3, #0
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	f7f6 fec0 	bl	8000a38 <__aeabi_dcmpeq>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d094      	beq.n	8009be6 <pow+0x4a>
 8009cbc:	ec49 8b10 	vmov	d0, r8, r9
 8009cc0:	f001 fdc4 	bl	800b84c <finite>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d08e      	beq.n	8009be6 <pow+0x4a>
 8009cc8:	ec47 6b10 	vmov	d0, r6, r7
 8009ccc:	f001 fdbe 	bl	800b84c <finite>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d088      	beq.n	8009be6 <pow+0x4a>
 8009cd4:	f7ff fcdc 	bl	8009690 <__errno>
 8009cd8:	2322      	movs	r3, #34	; 0x22
 8009cda:	6003      	str	r3, [r0, #0]
 8009cdc:	2400      	movs	r4, #0
 8009cde:	2500      	movs	r5, #0
 8009ce0:	e781      	b.n	8009be6 <pow+0x4a>
 8009ce2:	4d04      	ldr	r5, [pc, #16]	; (8009cf4 <pow+0x158>)
 8009ce4:	2400      	movs	r4, #0
 8009ce6:	e77e      	b.n	8009be6 <pow+0x4a>
 8009ce8:	20000250 	.word	0x20000250
 8009cec:	fff00000 	.word	0xfff00000
 8009cf0:	7ff00000 	.word	0x7ff00000
 8009cf4:	3ff00000 	.word	0x3ff00000

08009cf8 <sqrt>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	ed2d 8b02 	vpush	{d8}
 8009cfe:	ec55 4b10 	vmov	r4, r5, d0
 8009d02:	f001 f827 	bl	800ad54 <__ieee754_sqrt>
 8009d06:	4b15      	ldr	r3, [pc, #84]	; (8009d5c <sqrt+0x64>)
 8009d08:	eeb0 8a40 	vmov.f32	s16, s0
 8009d0c:	eef0 8a60 	vmov.f32	s17, s1
 8009d10:	f993 3000 	ldrsb.w	r3, [r3]
 8009d14:	3301      	adds	r3, #1
 8009d16:	d019      	beq.n	8009d4c <sqrt+0x54>
 8009d18:	4622      	mov	r2, r4
 8009d1a:	462b      	mov	r3, r5
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	4629      	mov	r1, r5
 8009d20:	f7f6 febc 	bl	8000a9c <__aeabi_dcmpun>
 8009d24:	b990      	cbnz	r0, 8009d4c <sqrt+0x54>
 8009d26:	2200      	movs	r2, #0
 8009d28:	2300      	movs	r3, #0
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	f7f6 fe8d 	bl	8000a4c <__aeabi_dcmplt>
 8009d32:	b158      	cbz	r0, 8009d4c <sqrt+0x54>
 8009d34:	f7ff fcac 	bl	8009690 <__errno>
 8009d38:	2321      	movs	r3, #33	; 0x21
 8009d3a:	6003      	str	r3, [r0, #0]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4610      	mov	r0, r2
 8009d42:	4619      	mov	r1, r3
 8009d44:	f7f6 fd3a 	bl	80007bc <__aeabi_ddiv>
 8009d48:	ec41 0b18 	vmov	d8, r0, r1
 8009d4c:	eeb0 0a48 	vmov.f32	s0, s16
 8009d50:	eef0 0a68 	vmov.f32	s1, s17
 8009d54:	ecbd 8b02 	vpop	{d8}
 8009d58:	bd38      	pop	{r3, r4, r5, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000250 	.word	0x20000250

08009d60 <__ieee754_atan2>:
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	ec57 6b11 	vmov	r6, r7, d1
 8009d68:	4273      	negs	r3, r6
 8009d6a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009ef0 <__ieee754_atan2+0x190>
 8009d6e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009d72:	4333      	orrs	r3, r6
 8009d74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009d78:	4573      	cmp	r3, lr
 8009d7a:	ec51 0b10 	vmov	r0, r1, d0
 8009d7e:	ee11 8a10 	vmov	r8, s2
 8009d82:	d80a      	bhi.n	8009d9a <__ieee754_atan2+0x3a>
 8009d84:	4244      	negs	r4, r0
 8009d86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d8a:	4304      	orrs	r4, r0
 8009d8c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009d90:	4574      	cmp	r4, lr
 8009d92:	ee10 9a10 	vmov	r9, s0
 8009d96:	468c      	mov	ip, r1
 8009d98:	d907      	bls.n	8009daa <__ieee754_atan2+0x4a>
 8009d9a:	4632      	mov	r2, r6
 8009d9c:	463b      	mov	r3, r7
 8009d9e:	f7f6 fa2d 	bl	80001fc <__adddf3>
 8009da2:	ec41 0b10 	vmov	d0, r0, r1
 8009da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009daa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009dae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009db2:	4334      	orrs	r4, r6
 8009db4:	d103      	bne.n	8009dbe <__ieee754_atan2+0x5e>
 8009db6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dba:	f7ff bc9d 	b.w	80096f8 <atan>
 8009dbe:	17bc      	asrs	r4, r7, #30
 8009dc0:	f004 0402 	and.w	r4, r4, #2
 8009dc4:	ea53 0909 	orrs.w	r9, r3, r9
 8009dc8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009dcc:	d107      	bne.n	8009dde <__ieee754_atan2+0x7e>
 8009dce:	2c02      	cmp	r4, #2
 8009dd0:	d060      	beq.n	8009e94 <__ieee754_atan2+0x134>
 8009dd2:	2c03      	cmp	r4, #3
 8009dd4:	d1e5      	bne.n	8009da2 <__ieee754_atan2+0x42>
 8009dd6:	a142      	add	r1, pc, #264	; (adr r1, 8009ee0 <__ieee754_atan2+0x180>)
 8009dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ddc:	e7e1      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009dde:	ea52 0808 	orrs.w	r8, r2, r8
 8009de2:	d106      	bne.n	8009df2 <__ieee754_atan2+0x92>
 8009de4:	f1bc 0f00 	cmp.w	ip, #0
 8009de8:	da5f      	bge.n	8009eaa <__ieee754_atan2+0x14a>
 8009dea:	a13f      	add	r1, pc, #252	; (adr r1, 8009ee8 <__ieee754_atan2+0x188>)
 8009dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009df0:	e7d7      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009df2:	4572      	cmp	r2, lr
 8009df4:	d10f      	bne.n	8009e16 <__ieee754_atan2+0xb6>
 8009df6:	4293      	cmp	r3, r2
 8009df8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009dfc:	d107      	bne.n	8009e0e <__ieee754_atan2+0xae>
 8009dfe:	2c02      	cmp	r4, #2
 8009e00:	d84c      	bhi.n	8009e9c <__ieee754_atan2+0x13c>
 8009e02:	4b35      	ldr	r3, [pc, #212]	; (8009ed8 <__ieee754_atan2+0x178>)
 8009e04:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009e08:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009e0c:	e7c9      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009e0e:	2c02      	cmp	r4, #2
 8009e10:	d848      	bhi.n	8009ea4 <__ieee754_atan2+0x144>
 8009e12:	4b32      	ldr	r3, [pc, #200]	; (8009edc <__ieee754_atan2+0x17c>)
 8009e14:	e7f6      	b.n	8009e04 <__ieee754_atan2+0xa4>
 8009e16:	4573      	cmp	r3, lr
 8009e18:	d0e4      	beq.n	8009de4 <__ieee754_atan2+0x84>
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009e20:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e24:	da1e      	bge.n	8009e64 <__ieee754_atan2+0x104>
 8009e26:	2f00      	cmp	r7, #0
 8009e28:	da01      	bge.n	8009e2e <__ieee754_atan2+0xce>
 8009e2a:	323c      	adds	r2, #60	; 0x3c
 8009e2c:	db1e      	blt.n	8009e6c <__ieee754_atan2+0x10c>
 8009e2e:	4632      	mov	r2, r6
 8009e30:	463b      	mov	r3, r7
 8009e32:	f7f6 fcc3 	bl	80007bc <__aeabi_ddiv>
 8009e36:	ec41 0b10 	vmov	d0, r0, r1
 8009e3a:	f7ff fe4d 	bl	8009ad8 <fabs>
 8009e3e:	f7ff fc5b 	bl	80096f8 <atan>
 8009e42:	ec51 0b10 	vmov	r0, r1, d0
 8009e46:	2c01      	cmp	r4, #1
 8009e48:	d013      	beq.n	8009e72 <__ieee754_atan2+0x112>
 8009e4a:	2c02      	cmp	r4, #2
 8009e4c:	d015      	beq.n	8009e7a <__ieee754_atan2+0x11a>
 8009e4e:	2c00      	cmp	r4, #0
 8009e50:	d0a7      	beq.n	8009da2 <__ieee754_atan2+0x42>
 8009e52:	a319      	add	r3, pc, #100	; (adr r3, 8009eb8 <__ieee754_atan2+0x158>)
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	f7f6 f9ce 	bl	80001f8 <__aeabi_dsub>
 8009e5c:	a318      	add	r3, pc, #96	; (adr r3, 8009ec0 <__ieee754_atan2+0x160>)
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	e014      	b.n	8009e8e <__ieee754_atan2+0x12e>
 8009e64:	a118      	add	r1, pc, #96	; (adr r1, 8009ec8 <__ieee754_atan2+0x168>)
 8009e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e6a:	e7ec      	b.n	8009e46 <__ieee754_atan2+0xe6>
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	2100      	movs	r1, #0
 8009e70:	e7e9      	b.n	8009e46 <__ieee754_atan2+0xe6>
 8009e72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e76:	4619      	mov	r1, r3
 8009e78:	e793      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009e7a:	a30f      	add	r3, pc, #60	; (adr r3, 8009eb8 <__ieee754_atan2+0x158>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7f6 f9ba 	bl	80001f8 <__aeabi_dsub>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	a10d      	add	r1, pc, #52	; (adr r1, 8009ec0 <__ieee754_atan2+0x160>)
 8009e8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e8e:	f7f6 f9b3 	bl	80001f8 <__aeabi_dsub>
 8009e92:	e786      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009e94:	a10a      	add	r1, pc, #40	; (adr r1, 8009ec0 <__ieee754_atan2+0x160>)
 8009e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e9a:	e782      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009e9c:	a10c      	add	r1, pc, #48	; (adr r1, 8009ed0 <__ieee754_atan2+0x170>)
 8009e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea2:	e77e      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	e77b      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009eaa:	a107      	add	r1, pc, #28	; (adr r1, 8009ec8 <__ieee754_atan2+0x168>)
 8009eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb0:	e777      	b.n	8009da2 <__ieee754_atan2+0x42>
 8009eb2:	bf00      	nop
 8009eb4:	f3af 8000 	nop.w
 8009eb8:	33145c07 	.word	0x33145c07
 8009ebc:	3ca1a626 	.word	0x3ca1a626
 8009ec0:	54442d18 	.word	0x54442d18
 8009ec4:	400921fb 	.word	0x400921fb
 8009ec8:	54442d18 	.word	0x54442d18
 8009ecc:	3ff921fb 	.word	0x3ff921fb
 8009ed0:	54442d18 	.word	0x54442d18
 8009ed4:	3fe921fb 	.word	0x3fe921fb
 8009ed8:	0800bc48 	.word	0x0800bc48
 8009edc:	0800bc60 	.word	0x0800bc60
 8009ee0:	54442d18 	.word	0x54442d18
 8009ee4:	c00921fb 	.word	0xc00921fb
 8009ee8:	54442d18 	.word	0x54442d18
 8009eec:	bff921fb 	.word	0xbff921fb
 8009ef0:	7ff00000 	.word	0x7ff00000
 8009ef4:	00000000 	.word	0x00000000

08009ef8 <__ieee754_pow>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	ed2d 8b06 	vpush	{d8-d10}
 8009f00:	b08d      	sub	sp, #52	; 0x34
 8009f02:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009f06:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8009f0a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009f0e:	ea56 0100 	orrs.w	r1, r6, r0
 8009f12:	ec53 2b10 	vmov	r2, r3, d0
 8009f16:	f000 84d1 	beq.w	800a8bc <__ieee754_pow+0x9c4>
 8009f1a:	497f      	ldr	r1, [pc, #508]	; (800a118 <__ieee754_pow+0x220>)
 8009f1c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009f20:	428c      	cmp	r4, r1
 8009f22:	ee10 8a10 	vmov	r8, s0
 8009f26:	4699      	mov	r9, r3
 8009f28:	dc09      	bgt.n	8009f3e <__ieee754_pow+0x46>
 8009f2a:	d103      	bne.n	8009f34 <__ieee754_pow+0x3c>
 8009f2c:	b97a      	cbnz	r2, 8009f4e <__ieee754_pow+0x56>
 8009f2e:	42a6      	cmp	r6, r4
 8009f30:	dd02      	ble.n	8009f38 <__ieee754_pow+0x40>
 8009f32:	e00c      	b.n	8009f4e <__ieee754_pow+0x56>
 8009f34:	428e      	cmp	r6, r1
 8009f36:	dc02      	bgt.n	8009f3e <__ieee754_pow+0x46>
 8009f38:	428e      	cmp	r6, r1
 8009f3a:	d110      	bne.n	8009f5e <__ieee754_pow+0x66>
 8009f3c:	b178      	cbz	r0, 8009f5e <__ieee754_pow+0x66>
 8009f3e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009f42:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009f46:	ea54 0308 	orrs.w	r3, r4, r8
 8009f4a:	f000 84b7 	beq.w	800a8bc <__ieee754_pow+0x9c4>
 8009f4e:	4873      	ldr	r0, [pc, #460]	; (800a11c <__ieee754_pow+0x224>)
 8009f50:	b00d      	add	sp, #52	; 0x34
 8009f52:	ecbd 8b06 	vpop	{d8-d10}
 8009f56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5a:	f001 bd05 	b.w	800b968 <nan>
 8009f5e:	f1b9 0f00 	cmp.w	r9, #0
 8009f62:	da36      	bge.n	8009fd2 <__ieee754_pow+0xda>
 8009f64:	496e      	ldr	r1, [pc, #440]	; (800a120 <__ieee754_pow+0x228>)
 8009f66:	428e      	cmp	r6, r1
 8009f68:	dc51      	bgt.n	800a00e <__ieee754_pow+0x116>
 8009f6a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009f6e:	428e      	cmp	r6, r1
 8009f70:	f340 84af 	ble.w	800a8d2 <__ieee754_pow+0x9da>
 8009f74:	1531      	asrs	r1, r6, #20
 8009f76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009f7a:	2914      	cmp	r1, #20
 8009f7c:	dd0f      	ble.n	8009f9e <__ieee754_pow+0xa6>
 8009f7e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8009f82:	fa20 fc01 	lsr.w	ip, r0, r1
 8009f86:	fa0c f101 	lsl.w	r1, ip, r1
 8009f8a:	4281      	cmp	r1, r0
 8009f8c:	f040 84a1 	bne.w	800a8d2 <__ieee754_pow+0x9da>
 8009f90:	f00c 0c01 	and.w	ip, ip, #1
 8009f94:	f1cc 0102 	rsb	r1, ip, #2
 8009f98:	9100      	str	r1, [sp, #0]
 8009f9a:	b180      	cbz	r0, 8009fbe <__ieee754_pow+0xc6>
 8009f9c:	e059      	b.n	800a052 <__ieee754_pow+0x15a>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d155      	bne.n	800a04e <__ieee754_pow+0x156>
 8009fa2:	f1c1 0114 	rsb	r1, r1, #20
 8009fa6:	fa46 fc01 	asr.w	ip, r6, r1
 8009faa:	fa0c f101 	lsl.w	r1, ip, r1
 8009fae:	42b1      	cmp	r1, r6
 8009fb0:	f040 848c 	bne.w	800a8cc <__ieee754_pow+0x9d4>
 8009fb4:	f00c 0c01 	and.w	ip, ip, #1
 8009fb8:	f1cc 0102 	rsb	r1, ip, #2
 8009fbc:	9100      	str	r1, [sp, #0]
 8009fbe:	4959      	ldr	r1, [pc, #356]	; (800a124 <__ieee754_pow+0x22c>)
 8009fc0:	428e      	cmp	r6, r1
 8009fc2:	d12d      	bne.n	800a020 <__ieee754_pow+0x128>
 8009fc4:	2f00      	cmp	r7, #0
 8009fc6:	da79      	bge.n	800a0bc <__ieee754_pow+0x1c4>
 8009fc8:	4956      	ldr	r1, [pc, #344]	; (800a124 <__ieee754_pow+0x22c>)
 8009fca:	2000      	movs	r0, #0
 8009fcc:	f7f6 fbf6 	bl	80007bc <__aeabi_ddiv>
 8009fd0:	e016      	b.n	800a000 <__ieee754_pow+0x108>
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	9100      	str	r1, [sp, #0]
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d13b      	bne.n	800a052 <__ieee754_pow+0x15a>
 8009fda:	494f      	ldr	r1, [pc, #316]	; (800a118 <__ieee754_pow+0x220>)
 8009fdc:	428e      	cmp	r6, r1
 8009fde:	d1ee      	bne.n	8009fbe <__ieee754_pow+0xc6>
 8009fe0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009fe4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009fe8:	ea53 0308 	orrs.w	r3, r3, r8
 8009fec:	f000 8466 	beq.w	800a8bc <__ieee754_pow+0x9c4>
 8009ff0:	4b4d      	ldr	r3, [pc, #308]	; (800a128 <__ieee754_pow+0x230>)
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	dd0d      	ble.n	800a012 <__ieee754_pow+0x11a>
 8009ff6:	2f00      	cmp	r7, #0
 8009ff8:	f280 8464 	bge.w	800a8c4 <__ieee754_pow+0x9cc>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	2100      	movs	r1, #0
 800a000:	ec41 0b10 	vmov	d0, r0, r1
 800a004:	b00d      	add	sp, #52	; 0x34
 800a006:	ecbd 8b06 	vpop	{d8-d10}
 800a00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00e:	2102      	movs	r1, #2
 800a010:	e7e0      	b.n	8009fd4 <__ieee754_pow+0xdc>
 800a012:	2f00      	cmp	r7, #0
 800a014:	daf2      	bge.n	8009ffc <__ieee754_pow+0x104>
 800a016:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800a01a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a01e:	e7ef      	b.n	800a000 <__ieee754_pow+0x108>
 800a020:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a024:	d104      	bne.n	800a030 <__ieee754_pow+0x138>
 800a026:	4610      	mov	r0, r2
 800a028:	4619      	mov	r1, r3
 800a02a:	f7f6 fa9d 	bl	8000568 <__aeabi_dmul>
 800a02e:	e7e7      	b.n	800a000 <__ieee754_pow+0x108>
 800a030:	493e      	ldr	r1, [pc, #248]	; (800a12c <__ieee754_pow+0x234>)
 800a032:	428f      	cmp	r7, r1
 800a034:	d10d      	bne.n	800a052 <__ieee754_pow+0x15a>
 800a036:	f1b9 0f00 	cmp.w	r9, #0
 800a03a:	db0a      	blt.n	800a052 <__ieee754_pow+0x15a>
 800a03c:	ec43 2b10 	vmov	d0, r2, r3
 800a040:	b00d      	add	sp, #52	; 0x34
 800a042:	ecbd 8b06 	vpop	{d8-d10}
 800a046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04a:	f000 be83 	b.w	800ad54 <__ieee754_sqrt>
 800a04e:	2100      	movs	r1, #0
 800a050:	9100      	str	r1, [sp, #0]
 800a052:	ec43 2b10 	vmov	d0, r2, r3
 800a056:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a05a:	f7ff fd3d 	bl	8009ad8 <fabs>
 800a05e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a062:	ec51 0b10 	vmov	r0, r1, d0
 800a066:	f1b8 0f00 	cmp.w	r8, #0
 800a06a:	d12a      	bne.n	800a0c2 <__ieee754_pow+0x1ca>
 800a06c:	b12c      	cbz	r4, 800a07a <__ieee754_pow+0x182>
 800a06e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a124 <__ieee754_pow+0x22c>
 800a072:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800a076:	45e6      	cmp	lr, ip
 800a078:	d123      	bne.n	800a0c2 <__ieee754_pow+0x1ca>
 800a07a:	2f00      	cmp	r7, #0
 800a07c:	da05      	bge.n	800a08a <__ieee754_pow+0x192>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	2000      	movs	r0, #0
 800a084:	4927      	ldr	r1, [pc, #156]	; (800a124 <__ieee754_pow+0x22c>)
 800a086:	f7f6 fb99 	bl	80007bc <__aeabi_ddiv>
 800a08a:	f1b9 0f00 	cmp.w	r9, #0
 800a08e:	dab7      	bge.n	800a000 <__ieee754_pow+0x108>
 800a090:	9b00      	ldr	r3, [sp, #0]
 800a092:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a096:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a09a:	4323      	orrs	r3, r4
 800a09c:	d108      	bne.n	800a0b0 <__ieee754_pow+0x1b8>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	f7f6 f8a7 	bl	80001f8 <__aeabi_dsub>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	e78d      	b.n	8009fcc <__ieee754_pow+0xd4>
 800a0b0:	9b00      	ldr	r3, [sp, #0]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d1a4      	bne.n	800a000 <__ieee754_pow+0x108>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0bc:	4610      	mov	r0, r2
 800a0be:	4619      	mov	r1, r3
 800a0c0:	e79e      	b.n	800a000 <__ieee754_pow+0x108>
 800a0c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800a0c6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800a0ca:	950a      	str	r5, [sp, #40]	; 0x28
 800a0cc:	9d00      	ldr	r5, [sp, #0]
 800a0ce:	46ac      	mov	ip, r5
 800a0d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a0d2:	ea5c 0505 	orrs.w	r5, ip, r5
 800a0d6:	d0e4      	beq.n	800a0a2 <__ieee754_pow+0x1aa>
 800a0d8:	4b15      	ldr	r3, [pc, #84]	; (800a130 <__ieee754_pow+0x238>)
 800a0da:	429e      	cmp	r6, r3
 800a0dc:	f340 80fc 	ble.w	800a2d8 <__ieee754_pow+0x3e0>
 800a0e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a0e4:	429e      	cmp	r6, r3
 800a0e6:	4b10      	ldr	r3, [pc, #64]	; (800a128 <__ieee754_pow+0x230>)
 800a0e8:	dd07      	ble.n	800a0fa <__ieee754_pow+0x202>
 800a0ea:	429c      	cmp	r4, r3
 800a0ec:	dc0a      	bgt.n	800a104 <__ieee754_pow+0x20c>
 800a0ee:	2f00      	cmp	r7, #0
 800a0f0:	da84      	bge.n	8009ffc <__ieee754_pow+0x104>
 800a0f2:	a307      	add	r3, pc, #28	; (adr r3, 800a110 <__ieee754_pow+0x218>)
 800a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f8:	e795      	b.n	800a026 <__ieee754_pow+0x12e>
 800a0fa:	429c      	cmp	r4, r3
 800a0fc:	dbf7      	blt.n	800a0ee <__ieee754_pow+0x1f6>
 800a0fe:	4b09      	ldr	r3, [pc, #36]	; (800a124 <__ieee754_pow+0x22c>)
 800a100:	429c      	cmp	r4, r3
 800a102:	dd17      	ble.n	800a134 <__ieee754_pow+0x23c>
 800a104:	2f00      	cmp	r7, #0
 800a106:	dcf4      	bgt.n	800a0f2 <__ieee754_pow+0x1fa>
 800a108:	e778      	b.n	8009ffc <__ieee754_pow+0x104>
 800a10a:	bf00      	nop
 800a10c:	f3af 8000 	nop.w
 800a110:	8800759c 	.word	0x8800759c
 800a114:	7e37e43c 	.word	0x7e37e43c
 800a118:	7ff00000 	.word	0x7ff00000
 800a11c:	0800bc78 	.word	0x0800bc78
 800a120:	433fffff 	.word	0x433fffff
 800a124:	3ff00000 	.word	0x3ff00000
 800a128:	3fefffff 	.word	0x3fefffff
 800a12c:	3fe00000 	.word	0x3fe00000
 800a130:	41e00000 	.word	0x41e00000
 800a134:	4b64      	ldr	r3, [pc, #400]	; (800a2c8 <__ieee754_pow+0x3d0>)
 800a136:	2200      	movs	r2, #0
 800a138:	f7f6 f85e 	bl	80001f8 <__aeabi_dsub>
 800a13c:	a356      	add	r3, pc, #344	; (adr r3, 800a298 <__ieee754_pow+0x3a0>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	4604      	mov	r4, r0
 800a144:	460d      	mov	r5, r1
 800a146:	f7f6 fa0f 	bl	8000568 <__aeabi_dmul>
 800a14a:	a355      	add	r3, pc, #340	; (adr r3, 800a2a0 <__ieee754_pow+0x3a8>)
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	4606      	mov	r6, r0
 800a152:	460f      	mov	r7, r1
 800a154:	4620      	mov	r0, r4
 800a156:	4629      	mov	r1, r5
 800a158:	f7f6 fa06 	bl	8000568 <__aeabi_dmul>
 800a15c:	4b5b      	ldr	r3, [pc, #364]	; (800a2cc <__ieee754_pow+0x3d4>)
 800a15e:	4682      	mov	sl, r0
 800a160:	468b      	mov	fp, r1
 800a162:	2200      	movs	r2, #0
 800a164:	4620      	mov	r0, r4
 800a166:	4629      	mov	r1, r5
 800a168:	f7f6 f9fe 	bl	8000568 <__aeabi_dmul>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	a14d      	add	r1, pc, #308	; (adr r1, 800a2a8 <__ieee754_pow+0x3b0>)
 800a172:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a176:	f7f6 f83f 	bl	80001f8 <__aeabi_dsub>
 800a17a:	4622      	mov	r2, r4
 800a17c:	462b      	mov	r3, r5
 800a17e:	f7f6 f9f3 	bl	8000568 <__aeabi_dmul>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	2000      	movs	r0, #0
 800a188:	4951      	ldr	r1, [pc, #324]	; (800a2d0 <__ieee754_pow+0x3d8>)
 800a18a:	f7f6 f835 	bl	80001f8 <__aeabi_dsub>
 800a18e:	4622      	mov	r2, r4
 800a190:	4680      	mov	r8, r0
 800a192:	4689      	mov	r9, r1
 800a194:	462b      	mov	r3, r5
 800a196:	4620      	mov	r0, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 f9e5 	bl	8000568 <__aeabi_dmul>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	f7f6 f9df 	bl	8000568 <__aeabi_dmul>
 800a1aa:	a341      	add	r3, pc, #260	; (adr r3, 800a2b0 <__ieee754_pow+0x3b8>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f7f6 f9da 	bl	8000568 <__aeabi_dmul>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	4659      	mov	r1, fp
 800a1bc:	f7f6 f81c 	bl	80001f8 <__aeabi_dsub>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4680      	mov	r8, r0
 800a1c6:	4689      	mov	r9, r1
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	f7f6 f816 	bl	80001fc <__adddf3>
 800a1d0:	2400      	movs	r4, #0
 800a1d2:	4632      	mov	r2, r6
 800a1d4:	463b      	mov	r3, r7
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	460d      	mov	r5, r1
 800a1da:	f7f6 f80d 	bl	80001f8 <__aeabi_dsub>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	f7f6 f807 	bl	80001f8 <__aeabi_dsub>
 800a1ea:	9b00      	ldr	r3, [sp, #0]
 800a1ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	4682      	mov	sl, r0
 800a1f4:	468b      	mov	fp, r1
 800a1f6:	f040 81f1 	bne.w	800a5dc <__ieee754_pow+0x6e4>
 800a1fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a2b8 <__ieee754_pow+0x3c0>
 800a1fe:	eeb0 8a47 	vmov.f32	s16, s14
 800a202:	eef0 8a67 	vmov.f32	s17, s15
 800a206:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a20a:	2600      	movs	r6, #0
 800a20c:	4632      	mov	r2, r6
 800a20e:	463b      	mov	r3, r7
 800a210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a214:	f7f5 fff0 	bl	80001f8 <__aeabi_dsub>
 800a218:	4622      	mov	r2, r4
 800a21a:	462b      	mov	r3, r5
 800a21c:	f7f6 f9a4 	bl	8000568 <__aeabi_dmul>
 800a220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a224:	4680      	mov	r8, r0
 800a226:	4689      	mov	r9, r1
 800a228:	4650      	mov	r0, sl
 800a22a:	4659      	mov	r1, fp
 800a22c:	f7f6 f99c 	bl	8000568 <__aeabi_dmul>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	4640      	mov	r0, r8
 800a236:	4649      	mov	r1, r9
 800a238:	f7f5 ffe0 	bl	80001fc <__adddf3>
 800a23c:	4632      	mov	r2, r6
 800a23e:	463b      	mov	r3, r7
 800a240:	4680      	mov	r8, r0
 800a242:	4689      	mov	r9, r1
 800a244:	4620      	mov	r0, r4
 800a246:	4629      	mov	r1, r5
 800a248:	f7f6 f98e 	bl	8000568 <__aeabi_dmul>
 800a24c:	460b      	mov	r3, r1
 800a24e:	4604      	mov	r4, r0
 800a250:	460d      	mov	r5, r1
 800a252:	4602      	mov	r2, r0
 800a254:	4649      	mov	r1, r9
 800a256:	4640      	mov	r0, r8
 800a258:	f7f5 ffd0 	bl	80001fc <__adddf3>
 800a25c:	4b1d      	ldr	r3, [pc, #116]	; (800a2d4 <__ieee754_pow+0x3dc>)
 800a25e:	4299      	cmp	r1, r3
 800a260:	ec45 4b19 	vmov	d9, r4, r5
 800a264:	4606      	mov	r6, r0
 800a266:	460f      	mov	r7, r1
 800a268:	468b      	mov	fp, r1
 800a26a:	f340 82fe 	ble.w	800a86a <__ieee754_pow+0x972>
 800a26e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a272:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a276:	4303      	orrs	r3, r0
 800a278:	f000 81f0 	beq.w	800a65c <__ieee754_pow+0x764>
 800a27c:	a310      	add	r3, pc, #64	; (adr r3, 800a2c0 <__ieee754_pow+0x3c8>)
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	ec51 0b18 	vmov	r0, r1, d8
 800a286:	f7f6 f96f 	bl	8000568 <__aeabi_dmul>
 800a28a:	a30d      	add	r3, pc, #52	; (adr r3, 800a2c0 <__ieee754_pow+0x3c8>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	e6cb      	b.n	800a02a <__ieee754_pow+0x132>
 800a292:	bf00      	nop
 800a294:	f3af 8000 	nop.w
 800a298:	60000000 	.word	0x60000000
 800a29c:	3ff71547 	.word	0x3ff71547
 800a2a0:	f85ddf44 	.word	0xf85ddf44
 800a2a4:	3e54ae0b 	.word	0x3e54ae0b
 800a2a8:	55555555 	.word	0x55555555
 800a2ac:	3fd55555 	.word	0x3fd55555
 800a2b0:	652b82fe 	.word	0x652b82fe
 800a2b4:	3ff71547 	.word	0x3ff71547
 800a2b8:	00000000 	.word	0x00000000
 800a2bc:	bff00000 	.word	0xbff00000
 800a2c0:	8800759c 	.word	0x8800759c
 800a2c4:	7e37e43c 	.word	0x7e37e43c
 800a2c8:	3ff00000 	.word	0x3ff00000
 800a2cc:	3fd00000 	.word	0x3fd00000
 800a2d0:	3fe00000 	.word	0x3fe00000
 800a2d4:	408fffff 	.word	0x408fffff
 800a2d8:	4bd7      	ldr	r3, [pc, #860]	; (800a638 <__ieee754_pow+0x740>)
 800a2da:	ea03 0309 	and.w	r3, r3, r9
 800a2de:	2200      	movs	r2, #0
 800a2e0:	b92b      	cbnz	r3, 800a2ee <__ieee754_pow+0x3f6>
 800a2e2:	4bd6      	ldr	r3, [pc, #856]	; (800a63c <__ieee754_pow+0x744>)
 800a2e4:	f7f6 f940 	bl	8000568 <__aeabi_dmul>
 800a2e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	1523      	asrs	r3, r4, #20
 800a2f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a2f4:	4413      	add	r3, r2
 800a2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f8:	4bd1      	ldr	r3, [pc, #836]	; (800a640 <__ieee754_pow+0x748>)
 800a2fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a2fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a302:	429c      	cmp	r4, r3
 800a304:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a308:	dd08      	ble.n	800a31c <__ieee754_pow+0x424>
 800a30a:	4bce      	ldr	r3, [pc, #824]	; (800a644 <__ieee754_pow+0x74c>)
 800a30c:	429c      	cmp	r4, r3
 800a30e:	f340 8163 	ble.w	800a5d8 <__ieee754_pow+0x6e0>
 800a312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a314:	3301      	adds	r3, #1
 800a316:	9309      	str	r3, [sp, #36]	; 0x24
 800a318:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a31c:	2400      	movs	r4, #0
 800a31e:	00e3      	lsls	r3, r4, #3
 800a320:	930b      	str	r3, [sp, #44]	; 0x2c
 800a322:	4bc9      	ldr	r3, [pc, #804]	; (800a648 <__ieee754_pow+0x750>)
 800a324:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a328:	ed93 7b00 	vldr	d7, [r3]
 800a32c:	4629      	mov	r1, r5
 800a32e:	ec53 2b17 	vmov	r2, r3, d7
 800a332:	eeb0 8a47 	vmov.f32	s16, s14
 800a336:	eef0 8a67 	vmov.f32	s17, s15
 800a33a:	4682      	mov	sl, r0
 800a33c:	f7f5 ff5c 	bl	80001f8 <__aeabi_dsub>
 800a340:	4652      	mov	r2, sl
 800a342:	4606      	mov	r6, r0
 800a344:	460f      	mov	r7, r1
 800a346:	462b      	mov	r3, r5
 800a348:	ec51 0b18 	vmov	r0, r1, d8
 800a34c:	f7f5 ff56 	bl	80001fc <__adddf3>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	2000      	movs	r0, #0
 800a356:	49bd      	ldr	r1, [pc, #756]	; (800a64c <__ieee754_pow+0x754>)
 800a358:	f7f6 fa30 	bl	80007bc <__aeabi_ddiv>
 800a35c:	ec41 0b19 	vmov	d9, r0, r1
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4630      	mov	r0, r6
 800a366:	4639      	mov	r1, r7
 800a368:	f7f6 f8fe 	bl	8000568 <__aeabi_dmul>
 800a36c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a370:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a374:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a378:	2300      	movs	r3, #0
 800a37a:	9304      	str	r3, [sp, #16]
 800a37c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a380:	46ab      	mov	fp, r5
 800a382:	106d      	asrs	r5, r5, #1
 800a384:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a388:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a38c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a390:	2200      	movs	r2, #0
 800a392:	4640      	mov	r0, r8
 800a394:	4649      	mov	r1, r9
 800a396:	4614      	mov	r4, r2
 800a398:	461d      	mov	r5, r3
 800a39a:	f7f6 f8e5 	bl	8000568 <__aeabi_dmul>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	f7f5 ff27 	bl	80001f8 <__aeabi_dsub>
 800a3aa:	ec53 2b18 	vmov	r2, r3, d8
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	f7f5 ff1f 	bl	80001f8 <__aeabi_dsub>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4650      	mov	r0, sl
 800a3c0:	4659      	mov	r1, fp
 800a3c2:	f7f5 ff19 	bl	80001f8 <__aeabi_dsub>
 800a3c6:	4642      	mov	r2, r8
 800a3c8:	464b      	mov	r3, r9
 800a3ca:	f7f6 f8cd 	bl	8000568 <__aeabi_dmul>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	f7f5 ff0f 	bl	80001f8 <__aeabi_dsub>
 800a3da:	ec53 2b19 	vmov	r2, r3, d9
 800a3de:	f7f6 f8c3 	bl	8000568 <__aeabi_dmul>
 800a3e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3e6:	ec41 0b18 	vmov	d8, r0, r1
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	f7f6 f8bb 	bl	8000568 <__aeabi_dmul>
 800a3f2:	a37d      	add	r3, pc, #500	; (adr r3, 800a5e8 <__ieee754_pow+0x6f0>)
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	460d      	mov	r5, r1
 800a3fc:	f7f6 f8b4 	bl	8000568 <__aeabi_dmul>
 800a400:	a37b      	add	r3, pc, #492	; (adr r3, 800a5f0 <__ieee754_pow+0x6f8>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	f7f5 fef9 	bl	80001fc <__adddf3>
 800a40a:	4622      	mov	r2, r4
 800a40c:	462b      	mov	r3, r5
 800a40e:	f7f6 f8ab 	bl	8000568 <__aeabi_dmul>
 800a412:	a379      	add	r3, pc, #484	; (adr r3, 800a5f8 <__ieee754_pow+0x700>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f7f5 fef0 	bl	80001fc <__adddf3>
 800a41c:	4622      	mov	r2, r4
 800a41e:	462b      	mov	r3, r5
 800a420:	f7f6 f8a2 	bl	8000568 <__aeabi_dmul>
 800a424:	a376      	add	r3, pc, #472	; (adr r3, 800a600 <__ieee754_pow+0x708>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	f7f5 fee7 	bl	80001fc <__adddf3>
 800a42e:	4622      	mov	r2, r4
 800a430:	462b      	mov	r3, r5
 800a432:	f7f6 f899 	bl	8000568 <__aeabi_dmul>
 800a436:	a374      	add	r3, pc, #464	; (adr r3, 800a608 <__ieee754_pow+0x710>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	f7f5 fede 	bl	80001fc <__adddf3>
 800a440:	4622      	mov	r2, r4
 800a442:	462b      	mov	r3, r5
 800a444:	f7f6 f890 	bl	8000568 <__aeabi_dmul>
 800a448:	a371      	add	r3, pc, #452	; (adr r3, 800a610 <__ieee754_pow+0x718>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	f7f5 fed5 	bl	80001fc <__adddf3>
 800a452:	4622      	mov	r2, r4
 800a454:	4606      	mov	r6, r0
 800a456:	460f      	mov	r7, r1
 800a458:	462b      	mov	r3, r5
 800a45a:	4620      	mov	r0, r4
 800a45c:	4629      	mov	r1, r5
 800a45e:	f7f6 f883 	bl	8000568 <__aeabi_dmul>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4630      	mov	r0, r6
 800a468:	4639      	mov	r1, r7
 800a46a:	f7f6 f87d 	bl	8000568 <__aeabi_dmul>
 800a46e:	4642      	mov	r2, r8
 800a470:	4604      	mov	r4, r0
 800a472:	460d      	mov	r5, r1
 800a474:	464b      	mov	r3, r9
 800a476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a47a:	f7f5 febf 	bl	80001fc <__adddf3>
 800a47e:	ec53 2b18 	vmov	r2, r3, d8
 800a482:	f7f6 f871 	bl	8000568 <__aeabi_dmul>
 800a486:	4622      	mov	r2, r4
 800a488:	462b      	mov	r3, r5
 800a48a:	f7f5 feb7 	bl	80001fc <__adddf3>
 800a48e:	4642      	mov	r2, r8
 800a490:	4682      	mov	sl, r0
 800a492:	468b      	mov	fp, r1
 800a494:	464b      	mov	r3, r9
 800a496:	4640      	mov	r0, r8
 800a498:	4649      	mov	r1, r9
 800a49a:	f7f6 f865 	bl	8000568 <__aeabi_dmul>
 800a49e:	4b6c      	ldr	r3, [pc, #432]	; (800a650 <__ieee754_pow+0x758>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	460f      	mov	r7, r1
 800a4a6:	f7f5 fea9 	bl	80001fc <__adddf3>
 800a4aa:	4652      	mov	r2, sl
 800a4ac:	465b      	mov	r3, fp
 800a4ae:	f7f5 fea5 	bl	80001fc <__adddf3>
 800a4b2:	9c04      	ldr	r4, [sp, #16]
 800a4b4:	460d      	mov	r5, r1
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4640      	mov	r0, r8
 800a4bc:	4649      	mov	r1, r9
 800a4be:	f7f6 f853 	bl	8000568 <__aeabi_dmul>
 800a4c2:	4b63      	ldr	r3, [pc, #396]	; (800a650 <__ieee754_pow+0x758>)
 800a4c4:	4680      	mov	r8, r0
 800a4c6:	4689      	mov	r9, r1
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	f7f5 fe93 	bl	80001f8 <__aeabi_dsub>
 800a4d2:	4632      	mov	r2, r6
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	f7f5 fe8f 	bl	80001f8 <__aeabi_dsub>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4650      	mov	r0, sl
 800a4e0:	4659      	mov	r1, fp
 800a4e2:	f7f5 fe89 	bl	80001f8 <__aeabi_dsub>
 800a4e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4ea:	f7f6 f83d 	bl	8000568 <__aeabi_dmul>
 800a4ee:	4622      	mov	r2, r4
 800a4f0:	4606      	mov	r6, r0
 800a4f2:	460f      	mov	r7, r1
 800a4f4:	462b      	mov	r3, r5
 800a4f6:	ec51 0b18 	vmov	r0, r1, d8
 800a4fa:	f7f6 f835 	bl	8000568 <__aeabi_dmul>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	4630      	mov	r0, r6
 800a504:	4639      	mov	r1, r7
 800a506:	f7f5 fe79 	bl	80001fc <__adddf3>
 800a50a:	4606      	mov	r6, r0
 800a50c:	460f      	mov	r7, r1
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4640      	mov	r0, r8
 800a514:	4649      	mov	r1, r9
 800a516:	f7f5 fe71 	bl	80001fc <__adddf3>
 800a51a:	9c04      	ldr	r4, [sp, #16]
 800a51c:	a33e      	add	r3, pc, #248	; (adr r3, 800a618 <__ieee754_pow+0x720>)
 800a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a522:	4620      	mov	r0, r4
 800a524:	460d      	mov	r5, r1
 800a526:	f7f6 f81f 	bl	8000568 <__aeabi_dmul>
 800a52a:	4642      	mov	r2, r8
 800a52c:	ec41 0b18 	vmov	d8, r0, r1
 800a530:	464b      	mov	r3, r9
 800a532:	4620      	mov	r0, r4
 800a534:	4629      	mov	r1, r5
 800a536:	f7f5 fe5f 	bl	80001f8 <__aeabi_dsub>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	4630      	mov	r0, r6
 800a540:	4639      	mov	r1, r7
 800a542:	f7f5 fe59 	bl	80001f8 <__aeabi_dsub>
 800a546:	a336      	add	r3, pc, #216	; (adr r3, 800a620 <__ieee754_pow+0x728>)
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	f7f6 f80c 	bl	8000568 <__aeabi_dmul>
 800a550:	a335      	add	r3, pc, #212	; (adr r3, 800a628 <__ieee754_pow+0x730>)
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	4606      	mov	r6, r0
 800a558:	460f      	mov	r7, r1
 800a55a:	4620      	mov	r0, r4
 800a55c:	4629      	mov	r1, r5
 800a55e:	f7f6 f803 	bl	8000568 <__aeabi_dmul>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	4630      	mov	r0, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f5 fe47 	bl	80001fc <__adddf3>
 800a56e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a570:	4b38      	ldr	r3, [pc, #224]	; (800a654 <__ieee754_pow+0x75c>)
 800a572:	4413      	add	r3, r2
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f7f5 fe40 	bl	80001fc <__adddf3>
 800a57c:	4682      	mov	sl, r0
 800a57e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a580:	468b      	mov	fp, r1
 800a582:	f7f5 ff87 	bl	8000494 <__aeabi_i2d>
 800a586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a588:	4b33      	ldr	r3, [pc, #204]	; (800a658 <__ieee754_pow+0x760>)
 800a58a:	4413      	add	r3, r2
 800a58c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a590:	4606      	mov	r6, r0
 800a592:	460f      	mov	r7, r1
 800a594:	4652      	mov	r2, sl
 800a596:	465b      	mov	r3, fp
 800a598:	ec51 0b18 	vmov	r0, r1, d8
 800a59c:	f7f5 fe2e 	bl	80001fc <__adddf3>
 800a5a0:	4642      	mov	r2, r8
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	f7f5 fe2a 	bl	80001fc <__adddf3>
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	463b      	mov	r3, r7
 800a5ac:	f7f5 fe26 	bl	80001fc <__adddf3>
 800a5b0:	9c04      	ldr	r4, [sp, #16]
 800a5b2:	4632      	mov	r2, r6
 800a5b4:	463b      	mov	r3, r7
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	460d      	mov	r5, r1
 800a5ba:	f7f5 fe1d 	bl	80001f8 <__aeabi_dsub>
 800a5be:	4642      	mov	r2, r8
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	f7f5 fe19 	bl	80001f8 <__aeabi_dsub>
 800a5c6:	ec53 2b18 	vmov	r2, r3, d8
 800a5ca:	f7f5 fe15 	bl	80001f8 <__aeabi_dsub>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	4659      	mov	r1, fp
 800a5d6:	e606      	b.n	800a1e6 <__ieee754_pow+0x2ee>
 800a5d8:	2401      	movs	r4, #1
 800a5da:	e6a0      	b.n	800a31e <__ieee754_pow+0x426>
 800a5dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a630 <__ieee754_pow+0x738>
 800a5e0:	e60d      	b.n	800a1fe <__ieee754_pow+0x306>
 800a5e2:	bf00      	nop
 800a5e4:	f3af 8000 	nop.w
 800a5e8:	4a454eef 	.word	0x4a454eef
 800a5ec:	3fca7e28 	.word	0x3fca7e28
 800a5f0:	93c9db65 	.word	0x93c9db65
 800a5f4:	3fcd864a 	.word	0x3fcd864a
 800a5f8:	a91d4101 	.word	0xa91d4101
 800a5fc:	3fd17460 	.word	0x3fd17460
 800a600:	518f264d 	.word	0x518f264d
 800a604:	3fd55555 	.word	0x3fd55555
 800a608:	db6fabff 	.word	0xdb6fabff
 800a60c:	3fdb6db6 	.word	0x3fdb6db6
 800a610:	33333303 	.word	0x33333303
 800a614:	3fe33333 	.word	0x3fe33333
 800a618:	e0000000 	.word	0xe0000000
 800a61c:	3feec709 	.word	0x3feec709
 800a620:	dc3a03fd 	.word	0xdc3a03fd
 800a624:	3feec709 	.word	0x3feec709
 800a628:	145b01f5 	.word	0x145b01f5
 800a62c:	be3e2fe0 	.word	0xbe3e2fe0
 800a630:	00000000 	.word	0x00000000
 800a634:	3ff00000 	.word	0x3ff00000
 800a638:	7ff00000 	.word	0x7ff00000
 800a63c:	43400000 	.word	0x43400000
 800a640:	0003988e 	.word	0x0003988e
 800a644:	000bb679 	.word	0x000bb679
 800a648:	0800bc80 	.word	0x0800bc80
 800a64c:	3ff00000 	.word	0x3ff00000
 800a650:	40080000 	.word	0x40080000
 800a654:	0800bca0 	.word	0x0800bca0
 800a658:	0800bc90 	.word	0x0800bc90
 800a65c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a934 <__ieee754_pow+0xa3c>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	4640      	mov	r0, r8
 800a664:	4649      	mov	r1, r9
 800a666:	f7f5 fdc9 	bl	80001fc <__adddf3>
 800a66a:	4622      	mov	r2, r4
 800a66c:	ec41 0b1a 	vmov	d10, r0, r1
 800a670:	462b      	mov	r3, r5
 800a672:	4630      	mov	r0, r6
 800a674:	4639      	mov	r1, r7
 800a676:	f7f5 fdbf 	bl	80001f8 <__aeabi_dsub>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	ec51 0b1a 	vmov	r0, r1, d10
 800a682:	f7f6 fa01 	bl	8000a88 <__aeabi_dcmpgt>
 800a686:	2800      	cmp	r0, #0
 800a688:	f47f adf8 	bne.w	800a27c <__ieee754_pow+0x384>
 800a68c:	4aa4      	ldr	r2, [pc, #656]	; (800a920 <__ieee754_pow+0xa28>)
 800a68e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a692:	4293      	cmp	r3, r2
 800a694:	f340 810b 	ble.w	800a8ae <__ieee754_pow+0x9b6>
 800a698:	151b      	asrs	r3, r3, #20
 800a69a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a69e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a6a2:	fa4a f303 	asr.w	r3, sl, r3
 800a6a6:	445b      	add	r3, fp
 800a6a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a6ac:	4e9d      	ldr	r6, [pc, #628]	; (800a924 <__ieee754_pow+0xa2c>)
 800a6ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a6b2:	4116      	asrs	r6, r2
 800a6b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	ea23 0106 	bic.w	r1, r3, r6
 800a6be:	f1c2 0214 	rsb	r2, r2, #20
 800a6c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a6c6:	fa4a fa02 	asr.w	sl, sl, r2
 800a6ca:	f1bb 0f00 	cmp.w	fp, #0
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	bfb8      	it	lt
 800a6d8:	f1ca 0a00 	rsblt	sl, sl, #0
 800a6dc:	f7f5 fd8c 	bl	80001f8 <__aeabi_dsub>
 800a6e0:	ec41 0b19 	vmov	d9, r0, r1
 800a6e4:	4642      	mov	r2, r8
 800a6e6:	464b      	mov	r3, r9
 800a6e8:	ec51 0b19 	vmov	r0, r1, d9
 800a6ec:	f7f5 fd86 	bl	80001fc <__adddf3>
 800a6f0:	2400      	movs	r4, #0
 800a6f2:	a379      	add	r3, pc, #484	; (adr r3, 800a8d8 <__ieee754_pow+0x9e0>)
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	460d      	mov	r5, r1
 800a6fc:	f7f5 ff34 	bl	8000568 <__aeabi_dmul>
 800a700:	ec53 2b19 	vmov	r2, r3, d9
 800a704:	4606      	mov	r6, r0
 800a706:	460f      	mov	r7, r1
 800a708:	4620      	mov	r0, r4
 800a70a:	4629      	mov	r1, r5
 800a70c:	f7f5 fd74 	bl	80001f8 <__aeabi_dsub>
 800a710:	4602      	mov	r2, r0
 800a712:	460b      	mov	r3, r1
 800a714:	4640      	mov	r0, r8
 800a716:	4649      	mov	r1, r9
 800a718:	f7f5 fd6e 	bl	80001f8 <__aeabi_dsub>
 800a71c:	a370      	add	r3, pc, #448	; (adr r3, 800a8e0 <__ieee754_pow+0x9e8>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	f7f5 ff21 	bl	8000568 <__aeabi_dmul>
 800a726:	a370      	add	r3, pc, #448	; (adr r3, 800a8e8 <__ieee754_pow+0x9f0>)
 800a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72c:	4680      	mov	r8, r0
 800a72e:	4689      	mov	r9, r1
 800a730:	4620      	mov	r0, r4
 800a732:	4629      	mov	r1, r5
 800a734:	f7f5 ff18 	bl	8000568 <__aeabi_dmul>
 800a738:	4602      	mov	r2, r0
 800a73a:	460b      	mov	r3, r1
 800a73c:	4640      	mov	r0, r8
 800a73e:	4649      	mov	r1, r9
 800a740:	f7f5 fd5c 	bl	80001fc <__adddf3>
 800a744:	4604      	mov	r4, r0
 800a746:	460d      	mov	r5, r1
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4630      	mov	r0, r6
 800a74e:	4639      	mov	r1, r7
 800a750:	f7f5 fd54 	bl	80001fc <__adddf3>
 800a754:	4632      	mov	r2, r6
 800a756:	463b      	mov	r3, r7
 800a758:	4680      	mov	r8, r0
 800a75a:	4689      	mov	r9, r1
 800a75c:	f7f5 fd4c 	bl	80001f8 <__aeabi_dsub>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4620      	mov	r0, r4
 800a766:	4629      	mov	r1, r5
 800a768:	f7f5 fd46 	bl	80001f8 <__aeabi_dsub>
 800a76c:	4642      	mov	r2, r8
 800a76e:	4606      	mov	r6, r0
 800a770:	460f      	mov	r7, r1
 800a772:	464b      	mov	r3, r9
 800a774:	4640      	mov	r0, r8
 800a776:	4649      	mov	r1, r9
 800a778:	f7f5 fef6 	bl	8000568 <__aeabi_dmul>
 800a77c:	a35c      	add	r3, pc, #368	; (adr r3, 800a8f0 <__ieee754_pow+0x9f8>)
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	4604      	mov	r4, r0
 800a784:	460d      	mov	r5, r1
 800a786:	f7f5 feef 	bl	8000568 <__aeabi_dmul>
 800a78a:	a35b      	add	r3, pc, #364	; (adr r3, 800a8f8 <__ieee754_pow+0xa00>)
 800a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a790:	f7f5 fd32 	bl	80001f8 <__aeabi_dsub>
 800a794:	4622      	mov	r2, r4
 800a796:	462b      	mov	r3, r5
 800a798:	f7f5 fee6 	bl	8000568 <__aeabi_dmul>
 800a79c:	a358      	add	r3, pc, #352	; (adr r3, 800a900 <__ieee754_pow+0xa08>)
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f7f5 fd2b 	bl	80001fc <__adddf3>
 800a7a6:	4622      	mov	r2, r4
 800a7a8:	462b      	mov	r3, r5
 800a7aa:	f7f5 fedd 	bl	8000568 <__aeabi_dmul>
 800a7ae:	a356      	add	r3, pc, #344	; (adr r3, 800a908 <__ieee754_pow+0xa10>)
 800a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b4:	f7f5 fd20 	bl	80001f8 <__aeabi_dsub>
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	462b      	mov	r3, r5
 800a7bc:	f7f5 fed4 	bl	8000568 <__aeabi_dmul>
 800a7c0:	a353      	add	r3, pc, #332	; (adr r3, 800a910 <__ieee754_pow+0xa18>)
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	f7f5 fd19 	bl	80001fc <__adddf3>
 800a7ca:	4622      	mov	r2, r4
 800a7cc:	462b      	mov	r3, r5
 800a7ce:	f7f5 fecb 	bl	8000568 <__aeabi_dmul>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	4649      	mov	r1, r9
 800a7da:	f7f5 fd0d 	bl	80001f8 <__aeabi_dsub>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	460d      	mov	r5, r1
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	f7f5 febd 	bl	8000568 <__aeabi_dmul>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	ec41 0b19 	vmov	d9, r0, r1
 800a7f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	f7f5 fcfc 	bl	80001f8 <__aeabi_dsub>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	ec51 0b19 	vmov	r0, r1, d9
 800a808:	f7f5 ffd8 	bl	80007bc <__aeabi_ddiv>
 800a80c:	4632      	mov	r2, r6
 800a80e:	4604      	mov	r4, r0
 800a810:	460d      	mov	r5, r1
 800a812:	463b      	mov	r3, r7
 800a814:	4640      	mov	r0, r8
 800a816:	4649      	mov	r1, r9
 800a818:	f7f5 fea6 	bl	8000568 <__aeabi_dmul>
 800a81c:	4632      	mov	r2, r6
 800a81e:	463b      	mov	r3, r7
 800a820:	f7f5 fcec 	bl	80001fc <__adddf3>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4620      	mov	r0, r4
 800a82a:	4629      	mov	r1, r5
 800a82c:	f7f5 fce4 	bl	80001f8 <__aeabi_dsub>
 800a830:	4642      	mov	r2, r8
 800a832:	464b      	mov	r3, r9
 800a834:	f7f5 fce0 	bl	80001f8 <__aeabi_dsub>
 800a838:	460b      	mov	r3, r1
 800a83a:	4602      	mov	r2, r0
 800a83c:	493a      	ldr	r1, [pc, #232]	; (800a928 <__ieee754_pow+0xa30>)
 800a83e:	2000      	movs	r0, #0
 800a840:	f7f5 fcda 	bl	80001f8 <__aeabi_dsub>
 800a844:	e9cd 0100 	strd	r0, r1, [sp]
 800a848:	9b01      	ldr	r3, [sp, #4]
 800a84a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a84e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a852:	da2f      	bge.n	800a8b4 <__ieee754_pow+0x9bc>
 800a854:	4650      	mov	r0, sl
 800a856:	ed9d 0b00 	vldr	d0, [sp]
 800a85a:	f001 f919 	bl	800ba90 <scalbn>
 800a85e:	ec51 0b10 	vmov	r0, r1, d0
 800a862:	ec53 2b18 	vmov	r2, r3, d8
 800a866:	f7ff bbe0 	b.w	800a02a <__ieee754_pow+0x132>
 800a86a:	4b30      	ldr	r3, [pc, #192]	; (800a92c <__ieee754_pow+0xa34>)
 800a86c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a870:	429e      	cmp	r6, r3
 800a872:	f77f af0b 	ble.w	800a68c <__ieee754_pow+0x794>
 800a876:	4b2e      	ldr	r3, [pc, #184]	; (800a930 <__ieee754_pow+0xa38>)
 800a878:	440b      	add	r3, r1
 800a87a:	4303      	orrs	r3, r0
 800a87c:	d00b      	beq.n	800a896 <__ieee754_pow+0x99e>
 800a87e:	a326      	add	r3, pc, #152	; (adr r3, 800a918 <__ieee754_pow+0xa20>)
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	ec51 0b18 	vmov	r0, r1, d8
 800a888:	f7f5 fe6e 	bl	8000568 <__aeabi_dmul>
 800a88c:	a322      	add	r3, pc, #136	; (adr r3, 800a918 <__ieee754_pow+0xa20>)
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	f7ff bbca 	b.w	800a02a <__ieee754_pow+0x132>
 800a896:	4622      	mov	r2, r4
 800a898:	462b      	mov	r3, r5
 800a89a:	f7f5 fcad 	bl	80001f8 <__aeabi_dsub>
 800a89e:	4642      	mov	r2, r8
 800a8a0:	464b      	mov	r3, r9
 800a8a2:	f7f6 f8e7 	bl	8000a74 <__aeabi_dcmpge>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f43f aef0 	beq.w	800a68c <__ieee754_pow+0x794>
 800a8ac:	e7e7      	b.n	800a87e <__ieee754_pow+0x986>
 800a8ae:	f04f 0a00 	mov.w	sl, #0
 800a8b2:	e717      	b.n	800a6e4 <__ieee754_pow+0x7ec>
 800a8b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	e7d2      	b.n	800a862 <__ieee754_pow+0x96a>
 800a8bc:	491a      	ldr	r1, [pc, #104]	; (800a928 <__ieee754_pow+0xa30>)
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f7ff bb9e 	b.w	800a000 <__ieee754_pow+0x108>
 800a8c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c8:	f7ff bb9a 	b.w	800a000 <__ieee754_pow+0x108>
 800a8cc:	9000      	str	r0, [sp, #0]
 800a8ce:	f7ff bb76 	b.w	8009fbe <__ieee754_pow+0xc6>
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	f7ff bb60 	b.w	8009f98 <__ieee754_pow+0xa0>
 800a8d8:	00000000 	.word	0x00000000
 800a8dc:	3fe62e43 	.word	0x3fe62e43
 800a8e0:	fefa39ef 	.word	0xfefa39ef
 800a8e4:	3fe62e42 	.word	0x3fe62e42
 800a8e8:	0ca86c39 	.word	0x0ca86c39
 800a8ec:	be205c61 	.word	0xbe205c61
 800a8f0:	72bea4d0 	.word	0x72bea4d0
 800a8f4:	3e663769 	.word	0x3e663769
 800a8f8:	c5d26bf1 	.word	0xc5d26bf1
 800a8fc:	3ebbbd41 	.word	0x3ebbbd41
 800a900:	af25de2c 	.word	0xaf25de2c
 800a904:	3f11566a 	.word	0x3f11566a
 800a908:	16bebd93 	.word	0x16bebd93
 800a90c:	3f66c16c 	.word	0x3f66c16c
 800a910:	5555553e 	.word	0x5555553e
 800a914:	3fc55555 	.word	0x3fc55555
 800a918:	c2f8f359 	.word	0xc2f8f359
 800a91c:	01a56e1f 	.word	0x01a56e1f
 800a920:	3fe00000 	.word	0x3fe00000
 800a924:	000fffff 	.word	0x000fffff
 800a928:	3ff00000 	.word	0x3ff00000
 800a92c:	4090cbff 	.word	0x4090cbff
 800a930:	3f6f3400 	.word	0x3f6f3400
 800a934:	652b82fe 	.word	0x652b82fe
 800a938:	3c971547 	.word	0x3c971547
 800a93c:	00000000 	.word	0x00000000

0800a940 <__ieee754_rem_pio2>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	ed2d 8b02 	vpush	{d8}
 800a948:	ec55 4b10 	vmov	r4, r5, d0
 800a94c:	4bca      	ldr	r3, [pc, #808]	; (800ac78 <__ieee754_rem_pio2+0x338>)
 800a94e:	b08b      	sub	sp, #44	; 0x2c
 800a950:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a954:	4598      	cmp	r8, r3
 800a956:	4682      	mov	sl, r0
 800a958:	9502      	str	r5, [sp, #8]
 800a95a:	dc08      	bgt.n	800a96e <__ieee754_rem_pio2+0x2e>
 800a95c:	2200      	movs	r2, #0
 800a95e:	2300      	movs	r3, #0
 800a960:	ed80 0b00 	vstr	d0, [r0]
 800a964:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a968:	f04f 0b00 	mov.w	fp, #0
 800a96c:	e028      	b.n	800a9c0 <__ieee754_rem_pio2+0x80>
 800a96e:	4bc3      	ldr	r3, [pc, #780]	; (800ac7c <__ieee754_rem_pio2+0x33c>)
 800a970:	4598      	cmp	r8, r3
 800a972:	dc78      	bgt.n	800aa66 <__ieee754_rem_pio2+0x126>
 800a974:	9b02      	ldr	r3, [sp, #8]
 800a976:	4ec2      	ldr	r6, [pc, #776]	; (800ac80 <__ieee754_rem_pio2+0x340>)
 800a978:	2b00      	cmp	r3, #0
 800a97a:	ee10 0a10 	vmov	r0, s0
 800a97e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ac40 <__ieee754_rem_pio2+0x300>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	4629      	mov	r1, r5
 800a986:	dd39      	ble.n	800a9fc <__ieee754_rem_pio2+0xbc>
 800a988:	f7f5 fc36 	bl	80001f8 <__aeabi_dsub>
 800a98c:	45b0      	cmp	r8, r6
 800a98e:	4604      	mov	r4, r0
 800a990:	460d      	mov	r5, r1
 800a992:	d01b      	beq.n	800a9cc <__ieee754_rem_pio2+0x8c>
 800a994:	a3ac      	add	r3, pc, #688	; (adr r3, 800ac48 <__ieee754_rem_pio2+0x308>)
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	f7f5 fc2d 	bl	80001f8 <__aeabi_dsub>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	e9ca 2300 	strd	r2, r3, [sl]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	f7f5 fc25 	bl	80001f8 <__aeabi_dsub>
 800a9ae:	a3a6      	add	r3, pc, #664	; (adr r3, 800ac48 <__ieee754_rem_pio2+0x308>)
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	f7f5 fc20 	bl	80001f8 <__aeabi_dsub>
 800a9b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9bc:	f04f 0b01 	mov.w	fp, #1
 800a9c0:	4658      	mov	r0, fp
 800a9c2:	b00b      	add	sp, #44	; 0x2c
 800a9c4:	ecbd 8b02 	vpop	{d8}
 800a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9cc:	a3a0      	add	r3, pc, #640	; (adr r3, 800ac50 <__ieee754_rem_pio2+0x310>)
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	f7f5 fc11 	bl	80001f8 <__aeabi_dsub>
 800a9d6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ac58 <__ieee754_rem_pio2+0x318>)
 800a9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9dc:	4604      	mov	r4, r0
 800a9de:	460d      	mov	r5, r1
 800a9e0:	f7f5 fc0a 	bl	80001f8 <__aeabi_dsub>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	e9ca 2300 	strd	r2, r3, [sl]
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f7f5 fc02 	bl	80001f8 <__aeabi_dsub>
 800a9f4:	a398      	add	r3, pc, #608	; (adr r3, 800ac58 <__ieee754_rem_pio2+0x318>)
 800a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fa:	e7db      	b.n	800a9b4 <__ieee754_rem_pio2+0x74>
 800a9fc:	f7f5 fbfe 	bl	80001fc <__adddf3>
 800aa00:	45b0      	cmp	r8, r6
 800aa02:	4604      	mov	r4, r0
 800aa04:	460d      	mov	r5, r1
 800aa06:	d016      	beq.n	800aa36 <__ieee754_rem_pio2+0xf6>
 800aa08:	a38f      	add	r3, pc, #572	; (adr r3, 800ac48 <__ieee754_rem_pio2+0x308>)
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	f7f5 fbf5 	bl	80001fc <__adddf3>
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	e9ca 2300 	strd	r2, r3, [sl]
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	f7f5 fbeb 	bl	80001f8 <__aeabi_dsub>
 800aa22:	a389      	add	r3, pc, #548	; (adr r3, 800ac48 <__ieee754_rem_pio2+0x308>)
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	f7f5 fbe8 	bl	80001fc <__adddf3>
 800aa2c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800aa30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa34:	e7c4      	b.n	800a9c0 <__ieee754_rem_pio2+0x80>
 800aa36:	a386      	add	r3, pc, #536	; (adr r3, 800ac50 <__ieee754_rem_pio2+0x310>)
 800aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3c:	f7f5 fbde 	bl	80001fc <__adddf3>
 800aa40:	a385      	add	r3, pc, #532	; (adr r3, 800ac58 <__ieee754_rem_pio2+0x318>)
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	4604      	mov	r4, r0
 800aa48:	460d      	mov	r5, r1
 800aa4a:	f7f5 fbd7 	bl	80001fc <__adddf3>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	e9ca 2300 	strd	r2, r3, [sl]
 800aa56:	4620      	mov	r0, r4
 800aa58:	4629      	mov	r1, r5
 800aa5a:	f7f5 fbcd 	bl	80001f8 <__aeabi_dsub>
 800aa5e:	a37e      	add	r3, pc, #504	; (adr r3, 800ac58 <__ieee754_rem_pio2+0x318>)
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	e7e0      	b.n	800aa28 <__ieee754_rem_pio2+0xe8>
 800aa66:	4b87      	ldr	r3, [pc, #540]	; (800ac84 <__ieee754_rem_pio2+0x344>)
 800aa68:	4598      	cmp	r8, r3
 800aa6a:	f300 80d9 	bgt.w	800ac20 <__ieee754_rem_pio2+0x2e0>
 800aa6e:	f7ff f833 	bl	8009ad8 <fabs>
 800aa72:	ec55 4b10 	vmov	r4, r5, d0
 800aa76:	ee10 0a10 	vmov	r0, s0
 800aa7a:	a379      	add	r3, pc, #484	; (adr r3, 800ac60 <__ieee754_rem_pio2+0x320>)
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	4629      	mov	r1, r5
 800aa82:	f7f5 fd71 	bl	8000568 <__aeabi_dmul>
 800aa86:	4b80      	ldr	r3, [pc, #512]	; (800ac88 <__ieee754_rem_pio2+0x348>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f7f5 fbb7 	bl	80001fc <__adddf3>
 800aa8e:	f7f6 f81b 	bl	8000ac8 <__aeabi_d2iz>
 800aa92:	4683      	mov	fp, r0
 800aa94:	f7f5 fcfe 	bl	8000494 <__aeabi_i2d>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	ec43 2b18 	vmov	d8, r2, r3
 800aaa0:	a367      	add	r3, pc, #412	; (adr r3, 800ac40 <__ieee754_rem_pio2+0x300>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fd5f 	bl	8000568 <__aeabi_dmul>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	4620      	mov	r0, r4
 800aab0:	4629      	mov	r1, r5
 800aab2:	f7f5 fba1 	bl	80001f8 <__aeabi_dsub>
 800aab6:	a364      	add	r3, pc, #400	; (adr r3, 800ac48 <__ieee754_rem_pio2+0x308>)
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	4606      	mov	r6, r0
 800aabe:	460f      	mov	r7, r1
 800aac0:	ec51 0b18 	vmov	r0, r1, d8
 800aac4:	f7f5 fd50 	bl	8000568 <__aeabi_dmul>
 800aac8:	f1bb 0f1f 	cmp.w	fp, #31
 800aacc:	4604      	mov	r4, r0
 800aace:	460d      	mov	r5, r1
 800aad0:	dc0d      	bgt.n	800aaee <__ieee754_rem_pio2+0x1ae>
 800aad2:	4b6e      	ldr	r3, [pc, #440]	; (800ac8c <__ieee754_rem_pio2+0x34c>)
 800aad4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800aad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aadc:	4543      	cmp	r3, r8
 800aade:	d006      	beq.n	800aaee <__ieee754_rem_pio2+0x1ae>
 800aae0:	4622      	mov	r2, r4
 800aae2:	462b      	mov	r3, r5
 800aae4:	4630      	mov	r0, r6
 800aae6:	4639      	mov	r1, r7
 800aae8:	f7f5 fb86 	bl	80001f8 <__aeabi_dsub>
 800aaec:	e00f      	b.n	800ab0e <__ieee754_rem_pio2+0x1ce>
 800aaee:	462b      	mov	r3, r5
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	4639      	mov	r1, r7
 800aaf6:	f7f5 fb7f 	bl	80001f8 <__aeabi_dsub>
 800aafa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aafe:	9303      	str	r3, [sp, #12]
 800ab00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab04:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ab08:	f1b8 0f10 	cmp.w	r8, #16
 800ab0c:	dc02      	bgt.n	800ab14 <__ieee754_rem_pio2+0x1d4>
 800ab0e:	e9ca 0100 	strd	r0, r1, [sl]
 800ab12:	e039      	b.n	800ab88 <__ieee754_rem_pio2+0x248>
 800ab14:	a34e      	add	r3, pc, #312	; (adr r3, 800ac50 <__ieee754_rem_pio2+0x310>)
 800ab16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1a:	ec51 0b18 	vmov	r0, r1, d8
 800ab1e:	f7f5 fd23 	bl	8000568 <__aeabi_dmul>
 800ab22:	4604      	mov	r4, r0
 800ab24:	460d      	mov	r5, r1
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	f7f5 fb63 	bl	80001f8 <__aeabi_dsub>
 800ab32:	4602      	mov	r2, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	4680      	mov	r8, r0
 800ab38:	4689      	mov	r9, r1
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	f7f5 fb5b 	bl	80001f8 <__aeabi_dsub>
 800ab42:	4622      	mov	r2, r4
 800ab44:	462b      	mov	r3, r5
 800ab46:	f7f5 fb57 	bl	80001f8 <__aeabi_dsub>
 800ab4a:	a343      	add	r3, pc, #268	; (adr r3, 800ac58 <__ieee754_rem_pio2+0x318>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	4604      	mov	r4, r0
 800ab52:	460d      	mov	r5, r1
 800ab54:	ec51 0b18 	vmov	r0, r1, d8
 800ab58:	f7f5 fd06 	bl	8000568 <__aeabi_dmul>
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	462b      	mov	r3, r5
 800ab60:	f7f5 fb4a 	bl	80001f8 <__aeabi_dsub>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4604      	mov	r4, r0
 800ab6a:	460d      	mov	r5, r1
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	4649      	mov	r1, r9
 800ab70:	f7f5 fb42 	bl	80001f8 <__aeabi_dsub>
 800ab74:	9a03      	ldr	r2, [sp, #12]
 800ab76:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	2b31      	cmp	r3, #49	; 0x31
 800ab7e:	dc24      	bgt.n	800abca <__ieee754_rem_pio2+0x28a>
 800ab80:	e9ca 0100 	strd	r0, r1, [sl]
 800ab84:	4646      	mov	r6, r8
 800ab86:	464f      	mov	r7, r9
 800ab88:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	4642      	mov	r2, r8
 800ab90:	464b      	mov	r3, r9
 800ab92:	4639      	mov	r1, r7
 800ab94:	f7f5 fb30 	bl	80001f8 <__aeabi_dsub>
 800ab98:	462b      	mov	r3, r5
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	f7f5 fb2c 	bl	80001f8 <__aeabi_dsub>
 800aba0:	9b02      	ldr	r3, [sp, #8]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aba8:	f6bf af0a 	bge.w	800a9c0 <__ieee754_rem_pio2+0x80>
 800abac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800abb0:	f8ca 3004 	str.w	r3, [sl, #4]
 800abb4:	f8ca 8000 	str.w	r8, [sl]
 800abb8:	f8ca 0008 	str.w	r0, [sl, #8]
 800abbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abc0:	f8ca 300c 	str.w	r3, [sl, #12]
 800abc4:	f1cb 0b00 	rsb	fp, fp, #0
 800abc8:	e6fa      	b.n	800a9c0 <__ieee754_rem_pio2+0x80>
 800abca:	a327      	add	r3, pc, #156	; (adr r3, 800ac68 <__ieee754_rem_pio2+0x328>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	ec51 0b18 	vmov	r0, r1, d8
 800abd4:	f7f5 fcc8 	bl	8000568 <__aeabi_dmul>
 800abd8:	4604      	mov	r4, r0
 800abda:	460d      	mov	r5, r1
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4640      	mov	r0, r8
 800abe2:	4649      	mov	r1, r9
 800abe4:	f7f5 fb08 	bl	80001f8 <__aeabi_dsub>
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	4606      	mov	r6, r0
 800abee:	460f      	mov	r7, r1
 800abf0:	4640      	mov	r0, r8
 800abf2:	4649      	mov	r1, r9
 800abf4:	f7f5 fb00 	bl	80001f8 <__aeabi_dsub>
 800abf8:	4622      	mov	r2, r4
 800abfa:	462b      	mov	r3, r5
 800abfc:	f7f5 fafc 	bl	80001f8 <__aeabi_dsub>
 800ac00:	a31b      	add	r3, pc, #108	; (adr r3, 800ac70 <__ieee754_rem_pio2+0x330>)
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	4604      	mov	r4, r0
 800ac08:	460d      	mov	r5, r1
 800ac0a:	ec51 0b18 	vmov	r0, r1, d8
 800ac0e:	f7f5 fcab 	bl	8000568 <__aeabi_dmul>
 800ac12:	4622      	mov	r2, r4
 800ac14:	462b      	mov	r3, r5
 800ac16:	f7f5 faef 	bl	80001f8 <__aeabi_dsub>
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	e75f      	b.n	800aae0 <__ieee754_rem_pio2+0x1a0>
 800ac20:	4b1b      	ldr	r3, [pc, #108]	; (800ac90 <__ieee754_rem_pio2+0x350>)
 800ac22:	4598      	cmp	r8, r3
 800ac24:	dd36      	ble.n	800ac94 <__ieee754_rem_pio2+0x354>
 800ac26:	ee10 2a10 	vmov	r2, s0
 800ac2a:	462b      	mov	r3, r5
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4629      	mov	r1, r5
 800ac30:	f7f5 fae2 	bl	80001f8 <__aeabi_dsub>
 800ac34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac38:	e9ca 0100 	strd	r0, r1, [sl]
 800ac3c:	e694      	b.n	800a968 <__ieee754_rem_pio2+0x28>
 800ac3e:	bf00      	nop
 800ac40:	54400000 	.word	0x54400000
 800ac44:	3ff921fb 	.word	0x3ff921fb
 800ac48:	1a626331 	.word	0x1a626331
 800ac4c:	3dd0b461 	.word	0x3dd0b461
 800ac50:	1a600000 	.word	0x1a600000
 800ac54:	3dd0b461 	.word	0x3dd0b461
 800ac58:	2e037073 	.word	0x2e037073
 800ac5c:	3ba3198a 	.word	0x3ba3198a
 800ac60:	6dc9c883 	.word	0x6dc9c883
 800ac64:	3fe45f30 	.word	0x3fe45f30
 800ac68:	2e000000 	.word	0x2e000000
 800ac6c:	3ba3198a 	.word	0x3ba3198a
 800ac70:	252049c1 	.word	0x252049c1
 800ac74:	397b839a 	.word	0x397b839a
 800ac78:	3fe921fb 	.word	0x3fe921fb
 800ac7c:	4002d97b 	.word	0x4002d97b
 800ac80:	3ff921fb 	.word	0x3ff921fb
 800ac84:	413921fb 	.word	0x413921fb
 800ac88:	3fe00000 	.word	0x3fe00000
 800ac8c:	0800bcb0 	.word	0x0800bcb0
 800ac90:	7fefffff 	.word	0x7fefffff
 800ac94:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ac98:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ac9c:	ee10 0a10 	vmov	r0, s0
 800aca0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800aca4:	ee10 6a10 	vmov	r6, s0
 800aca8:	460f      	mov	r7, r1
 800acaa:	f7f5 ff0d 	bl	8000ac8 <__aeabi_d2iz>
 800acae:	f7f5 fbf1 	bl	8000494 <__aeabi_i2d>
 800acb2:	4602      	mov	r2, r0
 800acb4:	460b      	mov	r3, r1
 800acb6:	4630      	mov	r0, r6
 800acb8:	4639      	mov	r1, r7
 800acba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800acbe:	f7f5 fa9b 	bl	80001f8 <__aeabi_dsub>
 800acc2:	4b22      	ldr	r3, [pc, #136]	; (800ad4c <__ieee754_rem_pio2+0x40c>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	f7f5 fc4f 	bl	8000568 <__aeabi_dmul>
 800acca:	460f      	mov	r7, r1
 800accc:	4606      	mov	r6, r0
 800acce:	f7f5 fefb 	bl	8000ac8 <__aeabi_d2iz>
 800acd2:	f7f5 fbdf 	bl	8000494 <__aeabi_i2d>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4630      	mov	r0, r6
 800acdc:	4639      	mov	r1, r7
 800acde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ace2:	f7f5 fa89 	bl	80001f8 <__aeabi_dsub>
 800ace6:	4b19      	ldr	r3, [pc, #100]	; (800ad4c <__ieee754_rem_pio2+0x40c>)
 800ace8:	2200      	movs	r2, #0
 800acea:	f7f5 fc3d 	bl	8000568 <__aeabi_dmul>
 800acee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800acf2:	ad04      	add	r5, sp, #16
 800acf4:	f04f 0803 	mov.w	r8, #3
 800acf8:	46a9      	mov	r9, r5
 800acfa:	2600      	movs	r6, #0
 800acfc:	2700      	movs	r7, #0
 800acfe:	4632      	mov	r2, r6
 800ad00:	463b      	mov	r3, r7
 800ad02:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ad06:	46c3      	mov	fp, r8
 800ad08:	3d08      	subs	r5, #8
 800ad0a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ad0e:	f7f5 fe93 	bl	8000a38 <__aeabi_dcmpeq>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d1f3      	bne.n	800acfe <__ieee754_rem_pio2+0x3be>
 800ad16:	4b0e      	ldr	r3, [pc, #56]	; (800ad50 <__ieee754_rem_pio2+0x410>)
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	2302      	movs	r3, #2
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	4622      	mov	r2, r4
 800ad20:	465b      	mov	r3, fp
 800ad22:	4651      	mov	r1, sl
 800ad24:	4648      	mov	r0, r9
 800ad26:	f000 f993 	bl	800b050 <__kernel_rem_pio2>
 800ad2a:	9b02      	ldr	r3, [sp, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	4683      	mov	fp, r0
 800ad30:	f6bf ae46 	bge.w	800a9c0 <__ieee754_rem_pio2+0x80>
 800ad34:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ad38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad3c:	f8ca 3004 	str.w	r3, [sl, #4]
 800ad40:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ad44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad48:	e73a      	b.n	800abc0 <__ieee754_rem_pio2+0x280>
 800ad4a:	bf00      	nop
 800ad4c:	41700000 	.word	0x41700000
 800ad50:	0800bd30 	.word	0x0800bd30

0800ad54 <__ieee754_sqrt>:
 800ad54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad58:	ec55 4b10 	vmov	r4, r5, d0
 800ad5c:	4e56      	ldr	r6, [pc, #344]	; (800aeb8 <__ieee754_sqrt+0x164>)
 800ad5e:	43ae      	bics	r6, r5
 800ad60:	ee10 0a10 	vmov	r0, s0
 800ad64:	ee10 3a10 	vmov	r3, s0
 800ad68:	4629      	mov	r1, r5
 800ad6a:	462a      	mov	r2, r5
 800ad6c:	d110      	bne.n	800ad90 <__ieee754_sqrt+0x3c>
 800ad6e:	ee10 2a10 	vmov	r2, s0
 800ad72:	462b      	mov	r3, r5
 800ad74:	f7f5 fbf8 	bl	8000568 <__aeabi_dmul>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	4629      	mov	r1, r5
 800ad80:	f7f5 fa3c 	bl	80001fc <__adddf3>
 800ad84:	4604      	mov	r4, r0
 800ad86:	460d      	mov	r5, r1
 800ad88:	ec45 4b10 	vmov	d0, r4, r5
 800ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad90:	2d00      	cmp	r5, #0
 800ad92:	dc10      	bgt.n	800adb6 <__ieee754_sqrt+0x62>
 800ad94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ad98:	4330      	orrs	r0, r6
 800ad9a:	d0f5      	beq.n	800ad88 <__ieee754_sqrt+0x34>
 800ad9c:	b15d      	cbz	r5, 800adb6 <__ieee754_sqrt+0x62>
 800ad9e:	ee10 2a10 	vmov	r2, s0
 800ada2:	462b      	mov	r3, r5
 800ada4:	ee10 0a10 	vmov	r0, s0
 800ada8:	f7f5 fa26 	bl	80001f8 <__aeabi_dsub>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	f7f5 fd04 	bl	80007bc <__aeabi_ddiv>
 800adb4:	e7e6      	b.n	800ad84 <__ieee754_sqrt+0x30>
 800adb6:	1509      	asrs	r1, r1, #20
 800adb8:	d076      	beq.n	800aea8 <__ieee754_sqrt+0x154>
 800adba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800adbe:	07ce      	lsls	r6, r1, #31
 800adc0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800adc4:	bf5e      	ittt	pl
 800adc6:	0fda      	lsrpl	r2, r3, #31
 800adc8:	005b      	lslpl	r3, r3, #1
 800adca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800adce:	0fda      	lsrs	r2, r3, #31
 800add0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800add4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800add8:	2000      	movs	r0, #0
 800adda:	106d      	asrs	r5, r5, #1
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	f04f 0e16 	mov.w	lr, #22
 800ade2:	4684      	mov	ip, r0
 800ade4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ade8:	eb0c 0401 	add.w	r4, ip, r1
 800adec:	4294      	cmp	r4, r2
 800adee:	bfde      	ittt	le
 800adf0:	1b12      	suble	r2, r2, r4
 800adf2:	eb04 0c01 	addle.w	ip, r4, r1
 800adf6:	1840      	addle	r0, r0, r1
 800adf8:	0052      	lsls	r2, r2, #1
 800adfa:	f1be 0e01 	subs.w	lr, lr, #1
 800adfe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ae02:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ae06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae0a:	d1ed      	bne.n	800ade8 <__ieee754_sqrt+0x94>
 800ae0c:	4671      	mov	r1, lr
 800ae0e:	2720      	movs	r7, #32
 800ae10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ae14:	4562      	cmp	r2, ip
 800ae16:	eb04 060e 	add.w	r6, r4, lr
 800ae1a:	dc02      	bgt.n	800ae22 <__ieee754_sqrt+0xce>
 800ae1c:	d113      	bne.n	800ae46 <__ieee754_sqrt+0xf2>
 800ae1e:	429e      	cmp	r6, r3
 800ae20:	d811      	bhi.n	800ae46 <__ieee754_sqrt+0xf2>
 800ae22:	2e00      	cmp	r6, #0
 800ae24:	eb06 0e04 	add.w	lr, r6, r4
 800ae28:	da43      	bge.n	800aeb2 <__ieee754_sqrt+0x15e>
 800ae2a:	f1be 0f00 	cmp.w	lr, #0
 800ae2e:	db40      	blt.n	800aeb2 <__ieee754_sqrt+0x15e>
 800ae30:	f10c 0801 	add.w	r8, ip, #1
 800ae34:	eba2 020c 	sub.w	r2, r2, ip
 800ae38:	429e      	cmp	r6, r3
 800ae3a:	bf88      	it	hi
 800ae3c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800ae40:	1b9b      	subs	r3, r3, r6
 800ae42:	4421      	add	r1, r4
 800ae44:	46c4      	mov	ip, r8
 800ae46:	0052      	lsls	r2, r2, #1
 800ae48:	3f01      	subs	r7, #1
 800ae4a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ae4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ae52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae56:	d1dd      	bne.n	800ae14 <__ieee754_sqrt+0xc0>
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	d006      	beq.n	800ae6a <__ieee754_sqrt+0x116>
 800ae5c:	1c4c      	adds	r4, r1, #1
 800ae5e:	bf13      	iteet	ne
 800ae60:	3101      	addne	r1, #1
 800ae62:	3001      	addeq	r0, #1
 800ae64:	4639      	moveq	r1, r7
 800ae66:	f021 0101 	bicne.w	r1, r1, #1
 800ae6a:	1043      	asrs	r3, r0, #1
 800ae6c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ae70:	0849      	lsrs	r1, r1, #1
 800ae72:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ae76:	07c2      	lsls	r2, r0, #31
 800ae78:	bf48      	it	mi
 800ae7a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ae7e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ae82:	460c      	mov	r4, r1
 800ae84:	463d      	mov	r5, r7
 800ae86:	e77f      	b.n	800ad88 <__ieee754_sqrt+0x34>
 800ae88:	0ada      	lsrs	r2, r3, #11
 800ae8a:	3815      	subs	r0, #21
 800ae8c:	055b      	lsls	r3, r3, #21
 800ae8e:	2a00      	cmp	r2, #0
 800ae90:	d0fa      	beq.n	800ae88 <__ieee754_sqrt+0x134>
 800ae92:	02d7      	lsls	r7, r2, #11
 800ae94:	d50a      	bpl.n	800aeac <__ieee754_sqrt+0x158>
 800ae96:	f1c1 0420 	rsb	r4, r1, #32
 800ae9a:	fa23 f404 	lsr.w	r4, r3, r4
 800ae9e:	1e4d      	subs	r5, r1, #1
 800aea0:	408b      	lsls	r3, r1
 800aea2:	4322      	orrs	r2, r4
 800aea4:	1b41      	subs	r1, r0, r5
 800aea6:	e788      	b.n	800adba <__ieee754_sqrt+0x66>
 800aea8:	4608      	mov	r0, r1
 800aeaa:	e7f0      	b.n	800ae8e <__ieee754_sqrt+0x13a>
 800aeac:	0052      	lsls	r2, r2, #1
 800aeae:	3101      	adds	r1, #1
 800aeb0:	e7ef      	b.n	800ae92 <__ieee754_sqrt+0x13e>
 800aeb2:	46e0      	mov	r8, ip
 800aeb4:	e7be      	b.n	800ae34 <__ieee754_sqrt+0xe0>
 800aeb6:	bf00      	nop
 800aeb8:	7ff00000 	.word	0x7ff00000
 800aebc:	00000000 	.word	0x00000000

0800aec0 <__kernel_cos>:
 800aec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	ec57 6b10 	vmov	r6, r7, d0
 800aec8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800aecc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800aed0:	ed8d 1b00 	vstr	d1, [sp]
 800aed4:	da07      	bge.n	800aee6 <__kernel_cos+0x26>
 800aed6:	ee10 0a10 	vmov	r0, s0
 800aeda:	4639      	mov	r1, r7
 800aedc:	f7f5 fdf4 	bl	8000ac8 <__aeabi_d2iz>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	f000 8088 	beq.w	800aff6 <__kernel_cos+0x136>
 800aee6:	4632      	mov	r2, r6
 800aee8:	463b      	mov	r3, r7
 800aeea:	4630      	mov	r0, r6
 800aeec:	4639      	mov	r1, r7
 800aeee:	f7f5 fb3b 	bl	8000568 <__aeabi_dmul>
 800aef2:	4b51      	ldr	r3, [pc, #324]	; (800b038 <__kernel_cos+0x178>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	460d      	mov	r5, r1
 800aefa:	f7f5 fb35 	bl	8000568 <__aeabi_dmul>
 800aefe:	a340      	add	r3, pc, #256	; (adr r3, 800b000 <__kernel_cos+0x140>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	4682      	mov	sl, r0
 800af06:	468b      	mov	fp, r1
 800af08:	4620      	mov	r0, r4
 800af0a:	4629      	mov	r1, r5
 800af0c:	f7f5 fb2c 	bl	8000568 <__aeabi_dmul>
 800af10:	a33d      	add	r3, pc, #244	; (adr r3, 800b008 <__kernel_cos+0x148>)
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	f7f5 f971 	bl	80001fc <__adddf3>
 800af1a:	4622      	mov	r2, r4
 800af1c:	462b      	mov	r3, r5
 800af1e:	f7f5 fb23 	bl	8000568 <__aeabi_dmul>
 800af22:	a33b      	add	r3, pc, #236	; (adr r3, 800b010 <__kernel_cos+0x150>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	f7f5 f966 	bl	80001f8 <__aeabi_dsub>
 800af2c:	4622      	mov	r2, r4
 800af2e:	462b      	mov	r3, r5
 800af30:	f7f5 fb1a 	bl	8000568 <__aeabi_dmul>
 800af34:	a338      	add	r3, pc, #224	; (adr r3, 800b018 <__kernel_cos+0x158>)
 800af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3a:	f7f5 f95f 	bl	80001fc <__adddf3>
 800af3e:	4622      	mov	r2, r4
 800af40:	462b      	mov	r3, r5
 800af42:	f7f5 fb11 	bl	8000568 <__aeabi_dmul>
 800af46:	a336      	add	r3, pc, #216	; (adr r3, 800b020 <__kernel_cos+0x160>)
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	f7f5 f954 	bl	80001f8 <__aeabi_dsub>
 800af50:	4622      	mov	r2, r4
 800af52:	462b      	mov	r3, r5
 800af54:	f7f5 fb08 	bl	8000568 <__aeabi_dmul>
 800af58:	a333      	add	r3, pc, #204	; (adr r3, 800b028 <__kernel_cos+0x168>)
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	f7f5 f94d 	bl	80001fc <__adddf3>
 800af62:	4622      	mov	r2, r4
 800af64:	462b      	mov	r3, r5
 800af66:	f7f5 faff 	bl	8000568 <__aeabi_dmul>
 800af6a:	4622      	mov	r2, r4
 800af6c:	462b      	mov	r3, r5
 800af6e:	f7f5 fafb 	bl	8000568 <__aeabi_dmul>
 800af72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af76:	4604      	mov	r4, r0
 800af78:	460d      	mov	r5, r1
 800af7a:	4630      	mov	r0, r6
 800af7c:	4639      	mov	r1, r7
 800af7e:	f7f5 faf3 	bl	8000568 <__aeabi_dmul>
 800af82:	460b      	mov	r3, r1
 800af84:	4602      	mov	r2, r0
 800af86:	4629      	mov	r1, r5
 800af88:	4620      	mov	r0, r4
 800af8a:	f7f5 f935 	bl	80001f8 <__aeabi_dsub>
 800af8e:	4b2b      	ldr	r3, [pc, #172]	; (800b03c <__kernel_cos+0x17c>)
 800af90:	4598      	cmp	r8, r3
 800af92:	4606      	mov	r6, r0
 800af94:	460f      	mov	r7, r1
 800af96:	dc10      	bgt.n	800afba <__kernel_cos+0xfa>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	4650      	mov	r0, sl
 800af9e:	4659      	mov	r1, fp
 800afa0:	f7f5 f92a 	bl	80001f8 <__aeabi_dsub>
 800afa4:	460b      	mov	r3, r1
 800afa6:	4926      	ldr	r1, [pc, #152]	; (800b040 <__kernel_cos+0x180>)
 800afa8:	4602      	mov	r2, r0
 800afaa:	2000      	movs	r0, #0
 800afac:	f7f5 f924 	bl	80001f8 <__aeabi_dsub>
 800afb0:	ec41 0b10 	vmov	d0, r0, r1
 800afb4:	b003      	add	sp, #12
 800afb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afba:	4b22      	ldr	r3, [pc, #136]	; (800b044 <__kernel_cos+0x184>)
 800afbc:	4920      	ldr	r1, [pc, #128]	; (800b040 <__kernel_cos+0x180>)
 800afbe:	4598      	cmp	r8, r3
 800afc0:	bfcc      	ite	gt
 800afc2:	4d21      	ldrgt	r5, [pc, #132]	; (800b048 <__kernel_cos+0x188>)
 800afc4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800afc8:	2400      	movs	r4, #0
 800afca:	4622      	mov	r2, r4
 800afcc:	462b      	mov	r3, r5
 800afce:	2000      	movs	r0, #0
 800afd0:	f7f5 f912 	bl	80001f8 <__aeabi_dsub>
 800afd4:	4622      	mov	r2, r4
 800afd6:	4680      	mov	r8, r0
 800afd8:	4689      	mov	r9, r1
 800afda:	462b      	mov	r3, r5
 800afdc:	4650      	mov	r0, sl
 800afde:	4659      	mov	r1, fp
 800afe0:	f7f5 f90a 	bl	80001f8 <__aeabi_dsub>
 800afe4:	4632      	mov	r2, r6
 800afe6:	463b      	mov	r3, r7
 800afe8:	f7f5 f906 	bl	80001f8 <__aeabi_dsub>
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	4640      	mov	r0, r8
 800aff2:	4649      	mov	r1, r9
 800aff4:	e7da      	b.n	800afac <__kernel_cos+0xec>
 800aff6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b030 <__kernel_cos+0x170>
 800affa:	e7db      	b.n	800afb4 <__kernel_cos+0xf4>
 800affc:	f3af 8000 	nop.w
 800b000:	be8838d4 	.word	0xbe8838d4
 800b004:	bda8fae9 	.word	0xbda8fae9
 800b008:	bdb4b1c4 	.word	0xbdb4b1c4
 800b00c:	3e21ee9e 	.word	0x3e21ee9e
 800b010:	809c52ad 	.word	0x809c52ad
 800b014:	3e927e4f 	.word	0x3e927e4f
 800b018:	19cb1590 	.word	0x19cb1590
 800b01c:	3efa01a0 	.word	0x3efa01a0
 800b020:	16c15177 	.word	0x16c15177
 800b024:	3f56c16c 	.word	0x3f56c16c
 800b028:	5555554c 	.word	0x5555554c
 800b02c:	3fa55555 	.word	0x3fa55555
 800b030:	00000000 	.word	0x00000000
 800b034:	3ff00000 	.word	0x3ff00000
 800b038:	3fe00000 	.word	0x3fe00000
 800b03c:	3fd33332 	.word	0x3fd33332
 800b040:	3ff00000 	.word	0x3ff00000
 800b044:	3fe90000 	.word	0x3fe90000
 800b048:	3fd20000 	.word	0x3fd20000
 800b04c:	00000000 	.word	0x00000000

0800b050 <__kernel_rem_pio2>:
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	ed2d 8b02 	vpush	{d8}
 800b058:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b05c:	f112 0f14 	cmn.w	r2, #20
 800b060:	9308      	str	r3, [sp, #32]
 800b062:	9101      	str	r1, [sp, #4]
 800b064:	4bc6      	ldr	r3, [pc, #792]	; (800b380 <__kernel_rem_pio2+0x330>)
 800b066:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b068:	9009      	str	r0, [sp, #36]	; 0x24
 800b06a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b06e:	9304      	str	r3, [sp, #16]
 800b070:	9b08      	ldr	r3, [sp, #32]
 800b072:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b076:	bfa8      	it	ge
 800b078:	1ed4      	subge	r4, r2, #3
 800b07a:	9306      	str	r3, [sp, #24]
 800b07c:	bfb2      	itee	lt
 800b07e:	2400      	movlt	r4, #0
 800b080:	2318      	movge	r3, #24
 800b082:	fb94 f4f3 	sdivge	r4, r4, r3
 800b086:	f06f 0317 	mvn.w	r3, #23
 800b08a:	fb04 3303 	mla	r3, r4, r3, r3
 800b08e:	eb03 0a02 	add.w	sl, r3, r2
 800b092:	9b04      	ldr	r3, [sp, #16]
 800b094:	9a06      	ldr	r2, [sp, #24]
 800b096:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b370 <__kernel_rem_pio2+0x320>
 800b09a:	eb03 0802 	add.w	r8, r3, r2
 800b09e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b0a0:	1aa7      	subs	r7, r4, r2
 800b0a2:	ae20      	add	r6, sp, #128	; 0x80
 800b0a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b0a8:	2500      	movs	r5, #0
 800b0aa:	4545      	cmp	r5, r8
 800b0ac:	dd18      	ble.n	800b0e0 <__kernel_rem_pio2+0x90>
 800b0ae:	9b08      	ldr	r3, [sp, #32]
 800b0b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b0b4:	aa20      	add	r2, sp, #128	; 0x80
 800b0b6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b370 <__kernel_rem_pio2+0x320>
 800b0ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b0be:	f1c3 0301 	rsb	r3, r3, #1
 800b0c2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b0c6:	9307      	str	r3, [sp, #28]
 800b0c8:	9b07      	ldr	r3, [sp, #28]
 800b0ca:	9a04      	ldr	r2, [sp, #16]
 800b0cc:	4443      	add	r3, r8
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	db2f      	blt.n	800b132 <__kernel_rem_pio2+0xe2>
 800b0d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b0d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b0da:	462f      	mov	r7, r5
 800b0dc:	2600      	movs	r6, #0
 800b0de:	e01b      	b.n	800b118 <__kernel_rem_pio2+0xc8>
 800b0e0:	42ef      	cmn	r7, r5
 800b0e2:	d407      	bmi.n	800b0f4 <__kernel_rem_pio2+0xa4>
 800b0e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b0e8:	f7f5 f9d4 	bl	8000494 <__aeabi_i2d>
 800b0ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b0f0:	3501      	adds	r5, #1
 800b0f2:	e7da      	b.n	800b0aa <__kernel_rem_pio2+0x5a>
 800b0f4:	ec51 0b18 	vmov	r0, r1, d8
 800b0f8:	e7f8      	b.n	800b0ec <__kernel_rem_pio2+0x9c>
 800b0fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0fe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b102:	f7f5 fa31 	bl	8000568 <__aeabi_dmul>
 800b106:	4602      	mov	r2, r0
 800b108:	460b      	mov	r3, r1
 800b10a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b10e:	f7f5 f875 	bl	80001fc <__adddf3>
 800b112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b116:	3601      	adds	r6, #1
 800b118:	9b06      	ldr	r3, [sp, #24]
 800b11a:	429e      	cmp	r6, r3
 800b11c:	f1a7 0708 	sub.w	r7, r7, #8
 800b120:	ddeb      	ble.n	800b0fa <__kernel_rem_pio2+0xaa>
 800b122:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b126:	3508      	adds	r5, #8
 800b128:	ecab 7b02 	vstmia	fp!, {d7}
 800b12c:	f108 0801 	add.w	r8, r8, #1
 800b130:	e7ca      	b.n	800b0c8 <__kernel_rem_pio2+0x78>
 800b132:	9b04      	ldr	r3, [sp, #16]
 800b134:	aa0c      	add	r2, sp, #48	; 0x30
 800b136:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b13a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b13c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b13e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b142:	9c04      	ldr	r4, [sp, #16]
 800b144:	930a      	str	r3, [sp, #40]	; 0x28
 800b146:	ab98      	add	r3, sp, #608	; 0x260
 800b148:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b14c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b150:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b154:	f8cd b008 	str.w	fp, [sp, #8]
 800b158:	4625      	mov	r5, r4
 800b15a:	2d00      	cmp	r5, #0
 800b15c:	dc78      	bgt.n	800b250 <__kernel_rem_pio2+0x200>
 800b15e:	ec47 6b10 	vmov	d0, r6, r7
 800b162:	4650      	mov	r0, sl
 800b164:	f000 fc94 	bl	800ba90 <scalbn>
 800b168:	ec57 6b10 	vmov	r6, r7, d0
 800b16c:	2200      	movs	r2, #0
 800b16e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b172:	ee10 0a10 	vmov	r0, s0
 800b176:	4639      	mov	r1, r7
 800b178:	f7f5 f9f6 	bl	8000568 <__aeabi_dmul>
 800b17c:	ec41 0b10 	vmov	d0, r0, r1
 800b180:	f000 fb72 	bl	800b868 <floor>
 800b184:	4b7f      	ldr	r3, [pc, #508]	; (800b384 <__kernel_rem_pio2+0x334>)
 800b186:	ec51 0b10 	vmov	r0, r1, d0
 800b18a:	2200      	movs	r2, #0
 800b18c:	f7f5 f9ec 	bl	8000568 <__aeabi_dmul>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 f82e 	bl	80001f8 <__aeabi_dsub>
 800b19c:	460f      	mov	r7, r1
 800b19e:	4606      	mov	r6, r0
 800b1a0:	f7f5 fc92 	bl	8000ac8 <__aeabi_d2iz>
 800b1a4:	9007      	str	r0, [sp, #28]
 800b1a6:	f7f5 f975 	bl	8000494 <__aeabi_i2d>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	4639      	mov	r1, r7
 800b1b2:	f7f5 f821 	bl	80001f8 <__aeabi_dsub>
 800b1b6:	f1ba 0f00 	cmp.w	sl, #0
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	460f      	mov	r7, r1
 800b1be:	dd70      	ble.n	800b2a2 <__kernel_rem_pio2+0x252>
 800b1c0:	1e62      	subs	r2, r4, #1
 800b1c2:	ab0c      	add	r3, sp, #48	; 0x30
 800b1c4:	9d07      	ldr	r5, [sp, #28]
 800b1c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b1ca:	f1ca 0118 	rsb	r1, sl, #24
 800b1ce:	fa40 f301 	asr.w	r3, r0, r1
 800b1d2:	441d      	add	r5, r3
 800b1d4:	408b      	lsls	r3, r1
 800b1d6:	1ac0      	subs	r0, r0, r3
 800b1d8:	ab0c      	add	r3, sp, #48	; 0x30
 800b1da:	9507      	str	r5, [sp, #28]
 800b1dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b1e0:	f1ca 0317 	rsb	r3, sl, #23
 800b1e4:	fa40 f303 	asr.w	r3, r0, r3
 800b1e8:	9302      	str	r3, [sp, #8]
 800b1ea:	9b02      	ldr	r3, [sp, #8]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	dd66      	ble.n	800b2be <__kernel_rem_pio2+0x26e>
 800b1f0:	9b07      	ldr	r3, [sp, #28]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	9307      	str	r3, [sp, #28]
 800b1f8:	4615      	mov	r5, r2
 800b1fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b1fe:	4294      	cmp	r4, r2
 800b200:	f300 8099 	bgt.w	800b336 <__kernel_rem_pio2+0x2e6>
 800b204:	f1ba 0f00 	cmp.w	sl, #0
 800b208:	dd07      	ble.n	800b21a <__kernel_rem_pio2+0x1ca>
 800b20a:	f1ba 0f01 	cmp.w	sl, #1
 800b20e:	f000 80a5 	beq.w	800b35c <__kernel_rem_pio2+0x30c>
 800b212:	f1ba 0f02 	cmp.w	sl, #2
 800b216:	f000 80c1 	beq.w	800b39c <__kernel_rem_pio2+0x34c>
 800b21a:	9b02      	ldr	r3, [sp, #8]
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d14e      	bne.n	800b2be <__kernel_rem_pio2+0x26e>
 800b220:	4632      	mov	r2, r6
 800b222:	463b      	mov	r3, r7
 800b224:	4958      	ldr	r1, [pc, #352]	; (800b388 <__kernel_rem_pio2+0x338>)
 800b226:	2000      	movs	r0, #0
 800b228:	f7f4 ffe6 	bl	80001f8 <__aeabi_dsub>
 800b22c:	4606      	mov	r6, r0
 800b22e:	460f      	mov	r7, r1
 800b230:	2d00      	cmp	r5, #0
 800b232:	d044      	beq.n	800b2be <__kernel_rem_pio2+0x26e>
 800b234:	4650      	mov	r0, sl
 800b236:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b378 <__kernel_rem_pio2+0x328>
 800b23a:	f000 fc29 	bl	800ba90 <scalbn>
 800b23e:	4630      	mov	r0, r6
 800b240:	4639      	mov	r1, r7
 800b242:	ec53 2b10 	vmov	r2, r3, d0
 800b246:	f7f4 ffd7 	bl	80001f8 <__aeabi_dsub>
 800b24a:	4606      	mov	r6, r0
 800b24c:	460f      	mov	r7, r1
 800b24e:	e036      	b.n	800b2be <__kernel_rem_pio2+0x26e>
 800b250:	4b4e      	ldr	r3, [pc, #312]	; (800b38c <__kernel_rem_pio2+0x33c>)
 800b252:	2200      	movs	r2, #0
 800b254:	4630      	mov	r0, r6
 800b256:	4639      	mov	r1, r7
 800b258:	f7f5 f986 	bl	8000568 <__aeabi_dmul>
 800b25c:	f7f5 fc34 	bl	8000ac8 <__aeabi_d2iz>
 800b260:	f7f5 f918 	bl	8000494 <__aeabi_i2d>
 800b264:	4b4a      	ldr	r3, [pc, #296]	; (800b390 <__kernel_rem_pio2+0x340>)
 800b266:	2200      	movs	r2, #0
 800b268:	4680      	mov	r8, r0
 800b26a:	4689      	mov	r9, r1
 800b26c:	f7f5 f97c 	bl	8000568 <__aeabi_dmul>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	4630      	mov	r0, r6
 800b276:	4639      	mov	r1, r7
 800b278:	f7f4 ffbe 	bl	80001f8 <__aeabi_dsub>
 800b27c:	f7f5 fc24 	bl	8000ac8 <__aeabi_d2iz>
 800b280:	9b02      	ldr	r3, [sp, #8]
 800b282:	f843 0b04 	str.w	r0, [r3], #4
 800b286:	3d01      	subs	r5, #1
 800b288:	9302      	str	r3, [sp, #8]
 800b28a:	ab70      	add	r3, sp, #448	; 0x1c0
 800b28c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	4640      	mov	r0, r8
 800b296:	4649      	mov	r1, r9
 800b298:	f7f4 ffb0 	bl	80001fc <__adddf3>
 800b29c:	4606      	mov	r6, r0
 800b29e:	460f      	mov	r7, r1
 800b2a0:	e75b      	b.n	800b15a <__kernel_rem_pio2+0x10a>
 800b2a2:	d105      	bne.n	800b2b0 <__kernel_rem_pio2+0x260>
 800b2a4:	1e63      	subs	r3, r4, #1
 800b2a6:	aa0c      	add	r2, sp, #48	; 0x30
 800b2a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b2ac:	15c3      	asrs	r3, r0, #23
 800b2ae:	e79b      	b.n	800b1e8 <__kernel_rem_pio2+0x198>
 800b2b0:	4b38      	ldr	r3, [pc, #224]	; (800b394 <__kernel_rem_pio2+0x344>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f7f5 fbde 	bl	8000a74 <__aeabi_dcmpge>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d139      	bne.n	800b330 <__kernel_rem_pio2+0x2e0>
 800b2bc:	9002      	str	r0, [sp, #8]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	f7f5 fbb7 	bl	8000a38 <__aeabi_dcmpeq>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	f000 80b4 	beq.w	800b438 <__kernel_rem_pio2+0x3e8>
 800b2d0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800b2d4:	465b      	mov	r3, fp
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	9904      	ldr	r1, [sp, #16]
 800b2da:	428b      	cmp	r3, r1
 800b2dc:	da65      	bge.n	800b3aa <__kernel_rem_pio2+0x35a>
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	d07b      	beq.n	800b3da <__kernel_rem_pio2+0x38a>
 800b2e2:	ab0c      	add	r3, sp, #48	; 0x30
 800b2e4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b2e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 80a0 	beq.w	800b432 <__kernel_rem_pio2+0x3e2>
 800b2f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b378 <__kernel_rem_pio2+0x328>
 800b2f6:	4650      	mov	r0, sl
 800b2f8:	f000 fbca 	bl	800ba90 <scalbn>
 800b2fc:	4f23      	ldr	r7, [pc, #140]	; (800b38c <__kernel_rem_pio2+0x33c>)
 800b2fe:	ec55 4b10 	vmov	r4, r5, d0
 800b302:	46d8      	mov	r8, fp
 800b304:	2600      	movs	r6, #0
 800b306:	f1b8 0f00 	cmp.w	r8, #0
 800b30a:	f280 80cf 	bge.w	800b4ac <__kernel_rem_pio2+0x45c>
 800b30e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b370 <__kernel_rem_pio2+0x320>
 800b312:	465f      	mov	r7, fp
 800b314:	f04f 0800 	mov.w	r8, #0
 800b318:	2f00      	cmp	r7, #0
 800b31a:	f2c0 80fd 	blt.w	800b518 <__kernel_rem_pio2+0x4c8>
 800b31e:	ab70      	add	r3, sp, #448	; 0x1c0
 800b320:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b398 <__kernel_rem_pio2+0x348>
 800b324:	ec55 4b18 	vmov	r4, r5, d8
 800b328:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b32c:	2600      	movs	r6, #0
 800b32e:	e0e5      	b.n	800b4fc <__kernel_rem_pio2+0x4ac>
 800b330:	2302      	movs	r3, #2
 800b332:	9302      	str	r3, [sp, #8]
 800b334:	e75c      	b.n	800b1f0 <__kernel_rem_pio2+0x1a0>
 800b336:	f8db 3000 	ldr.w	r3, [fp]
 800b33a:	b955      	cbnz	r5, 800b352 <__kernel_rem_pio2+0x302>
 800b33c:	b123      	cbz	r3, 800b348 <__kernel_rem_pio2+0x2f8>
 800b33e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b342:	f8cb 3000 	str.w	r3, [fp]
 800b346:	2301      	movs	r3, #1
 800b348:	3201      	adds	r2, #1
 800b34a:	f10b 0b04 	add.w	fp, fp, #4
 800b34e:	461d      	mov	r5, r3
 800b350:	e755      	b.n	800b1fe <__kernel_rem_pio2+0x1ae>
 800b352:	1acb      	subs	r3, r1, r3
 800b354:	f8cb 3000 	str.w	r3, [fp]
 800b358:	462b      	mov	r3, r5
 800b35a:	e7f5      	b.n	800b348 <__kernel_rem_pio2+0x2f8>
 800b35c:	1e62      	subs	r2, r4, #1
 800b35e:	ab0c      	add	r3, sp, #48	; 0x30
 800b360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b364:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b368:	a90c      	add	r1, sp, #48	; 0x30
 800b36a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b36e:	e754      	b.n	800b21a <__kernel_rem_pio2+0x1ca>
	...
 800b37c:	3ff00000 	.word	0x3ff00000
 800b380:	0800be78 	.word	0x0800be78
 800b384:	40200000 	.word	0x40200000
 800b388:	3ff00000 	.word	0x3ff00000
 800b38c:	3e700000 	.word	0x3e700000
 800b390:	41700000 	.word	0x41700000
 800b394:	3fe00000 	.word	0x3fe00000
 800b398:	0800be38 	.word	0x0800be38
 800b39c:	1e62      	subs	r2, r4, #1
 800b39e:	ab0c      	add	r3, sp, #48	; 0x30
 800b3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b3a8:	e7de      	b.n	800b368 <__kernel_rem_pio2+0x318>
 800b3aa:	a90c      	add	r1, sp, #48	; 0x30
 800b3ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	430a      	orrs	r2, r1
 800b3b4:	e790      	b.n	800b2d8 <__kernel_rem_pio2+0x288>
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b3bc:	2900      	cmp	r1, #0
 800b3be:	d0fa      	beq.n	800b3b6 <__kernel_rem_pio2+0x366>
 800b3c0:	9a08      	ldr	r2, [sp, #32]
 800b3c2:	18e3      	adds	r3, r4, r3
 800b3c4:	18a6      	adds	r6, r4, r2
 800b3c6:	aa20      	add	r2, sp, #128	; 0x80
 800b3c8:	1c65      	adds	r5, r4, #1
 800b3ca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b3ce:	9302      	str	r3, [sp, #8]
 800b3d0:	9b02      	ldr	r3, [sp, #8]
 800b3d2:	42ab      	cmp	r3, r5
 800b3d4:	da04      	bge.n	800b3e0 <__kernel_rem_pio2+0x390>
 800b3d6:	461c      	mov	r4, r3
 800b3d8:	e6b5      	b.n	800b146 <__kernel_rem_pio2+0xf6>
 800b3da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e7eb      	b.n	800b3b8 <__kernel_rem_pio2+0x368>
 800b3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3e6:	f7f5 f855 	bl	8000494 <__aeabi_i2d>
 800b3ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f0:	46b3      	mov	fp, r6
 800b3f2:	461c      	mov	r4, r3
 800b3f4:	2700      	movs	r7, #0
 800b3f6:	f04f 0800 	mov.w	r8, #0
 800b3fa:	f04f 0900 	mov.w	r9, #0
 800b3fe:	9b06      	ldr	r3, [sp, #24]
 800b400:	429f      	cmp	r7, r3
 800b402:	dd06      	ble.n	800b412 <__kernel_rem_pio2+0x3c2>
 800b404:	ab70      	add	r3, sp, #448	; 0x1c0
 800b406:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b40a:	e9c3 8900 	strd	r8, r9, [r3]
 800b40e:	3501      	adds	r5, #1
 800b410:	e7de      	b.n	800b3d0 <__kernel_rem_pio2+0x380>
 800b412:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b416:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b41a:	f7f5 f8a5 	bl	8000568 <__aeabi_dmul>
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4640      	mov	r0, r8
 800b424:	4649      	mov	r1, r9
 800b426:	f7f4 fee9 	bl	80001fc <__adddf3>
 800b42a:	3701      	adds	r7, #1
 800b42c:	4680      	mov	r8, r0
 800b42e:	4689      	mov	r9, r1
 800b430:	e7e5      	b.n	800b3fe <__kernel_rem_pio2+0x3ae>
 800b432:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b436:	e754      	b.n	800b2e2 <__kernel_rem_pio2+0x292>
 800b438:	ec47 6b10 	vmov	d0, r6, r7
 800b43c:	f1ca 0000 	rsb	r0, sl, #0
 800b440:	f000 fb26 	bl	800ba90 <scalbn>
 800b444:	ec57 6b10 	vmov	r6, r7, d0
 800b448:	4b9f      	ldr	r3, [pc, #636]	; (800b6c8 <__kernel_rem_pio2+0x678>)
 800b44a:	ee10 0a10 	vmov	r0, s0
 800b44e:	2200      	movs	r2, #0
 800b450:	4639      	mov	r1, r7
 800b452:	f7f5 fb0f 	bl	8000a74 <__aeabi_dcmpge>
 800b456:	b300      	cbz	r0, 800b49a <__kernel_rem_pio2+0x44a>
 800b458:	4b9c      	ldr	r3, [pc, #624]	; (800b6cc <__kernel_rem_pio2+0x67c>)
 800b45a:	2200      	movs	r2, #0
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	f7f5 f882 	bl	8000568 <__aeabi_dmul>
 800b464:	f7f5 fb30 	bl	8000ac8 <__aeabi_d2iz>
 800b468:	4605      	mov	r5, r0
 800b46a:	f7f5 f813 	bl	8000494 <__aeabi_i2d>
 800b46e:	4b96      	ldr	r3, [pc, #600]	; (800b6c8 <__kernel_rem_pio2+0x678>)
 800b470:	2200      	movs	r2, #0
 800b472:	f7f5 f879 	bl	8000568 <__aeabi_dmul>
 800b476:	460b      	mov	r3, r1
 800b478:	4602      	mov	r2, r0
 800b47a:	4639      	mov	r1, r7
 800b47c:	4630      	mov	r0, r6
 800b47e:	f7f4 febb 	bl	80001f8 <__aeabi_dsub>
 800b482:	f7f5 fb21 	bl	8000ac8 <__aeabi_d2iz>
 800b486:	f104 0b01 	add.w	fp, r4, #1
 800b48a:	ab0c      	add	r3, sp, #48	; 0x30
 800b48c:	f10a 0a18 	add.w	sl, sl, #24
 800b490:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b494:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b498:	e72b      	b.n	800b2f2 <__kernel_rem_pio2+0x2a2>
 800b49a:	4630      	mov	r0, r6
 800b49c:	4639      	mov	r1, r7
 800b49e:	f7f5 fb13 	bl	8000ac8 <__aeabi_d2iz>
 800b4a2:	ab0c      	add	r3, sp, #48	; 0x30
 800b4a4:	46a3      	mov	fp, r4
 800b4a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b4aa:	e722      	b.n	800b2f2 <__kernel_rem_pio2+0x2a2>
 800b4ac:	ab70      	add	r3, sp, #448	; 0x1c0
 800b4ae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b4b2:	ab0c      	add	r3, sp, #48	; 0x30
 800b4b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b4b8:	f7f4 ffec 	bl	8000494 <__aeabi_i2d>
 800b4bc:	4622      	mov	r2, r4
 800b4be:	462b      	mov	r3, r5
 800b4c0:	f7f5 f852 	bl	8000568 <__aeabi_dmul>
 800b4c4:	4632      	mov	r2, r6
 800b4c6:	e9c9 0100 	strd	r0, r1, [r9]
 800b4ca:	463b      	mov	r3, r7
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	f7f5 f84a 	bl	8000568 <__aeabi_dmul>
 800b4d4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b4d8:	4604      	mov	r4, r0
 800b4da:	460d      	mov	r5, r1
 800b4dc:	e713      	b.n	800b306 <__kernel_rem_pio2+0x2b6>
 800b4de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b4e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b4e6:	f7f5 f83f 	bl	8000568 <__aeabi_dmul>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	f7f4 fe83 	bl	80001fc <__adddf3>
 800b4f6:	3601      	adds	r6, #1
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	460d      	mov	r5, r1
 800b4fc:	9b04      	ldr	r3, [sp, #16]
 800b4fe:	429e      	cmp	r6, r3
 800b500:	dc01      	bgt.n	800b506 <__kernel_rem_pio2+0x4b6>
 800b502:	45b0      	cmp	r8, r6
 800b504:	daeb      	bge.n	800b4de <__kernel_rem_pio2+0x48e>
 800b506:	ab48      	add	r3, sp, #288	; 0x120
 800b508:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b50c:	e9c3 4500 	strd	r4, r5, [r3]
 800b510:	3f01      	subs	r7, #1
 800b512:	f108 0801 	add.w	r8, r8, #1
 800b516:	e6ff      	b.n	800b318 <__kernel_rem_pio2+0x2c8>
 800b518:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	dc0b      	bgt.n	800b536 <__kernel_rem_pio2+0x4e6>
 800b51e:	2b00      	cmp	r3, #0
 800b520:	dc6e      	bgt.n	800b600 <__kernel_rem_pio2+0x5b0>
 800b522:	d045      	beq.n	800b5b0 <__kernel_rem_pio2+0x560>
 800b524:	9b07      	ldr	r3, [sp, #28]
 800b526:	f003 0007 	and.w	r0, r3, #7
 800b52a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b52e:	ecbd 8b02 	vpop	{d8}
 800b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b536:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d1f3      	bne.n	800b524 <__kernel_rem_pio2+0x4d4>
 800b53c:	ab48      	add	r3, sp, #288	; 0x120
 800b53e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b542:	46d0      	mov	r8, sl
 800b544:	46d9      	mov	r9, fp
 800b546:	f1b9 0f00 	cmp.w	r9, #0
 800b54a:	f1a8 0808 	sub.w	r8, r8, #8
 800b54e:	dc64      	bgt.n	800b61a <__kernel_rem_pio2+0x5ca>
 800b550:	465c      	mov	r4, fp
 800b552:	2c01      	cmp	r4, #1
 800b554:	f1aa 0a08 	sub.w	sl, sl, #8
 800b558:	dc7e      	bgt.n	800b658 <__kernel_rem_pio2+0x608>
 800b55a:	2000      	movs	r0, #0
 800b55c:	2100      	movs	r1, #0
 800b55e:	f1bb 0f01 	cmp.w	fp, #1
 800b562:	f300 8097 	bgt.w	800b694 <__kernel_rem_pio2+0x644>
 800b566:	9b02      	ldr	r3, [sp, #8]
 800b568:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b56c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b570:	2b00      	cmp	r3, #0
 800b572:	f040 8099 	bne.w	800b6a8 <__kernel_rem_pio2+0x658>
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	e9c3 5600 	strd	r5, r6, [r3]
 800b57c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b580:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b584:	e7ce      	b.n	800b524 <__kernel_rem_pio2+0x4d4>
 800b586:	ab48      	add	r3, sp, #288	; 0x120
 800b588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f7f4 fe34 	bl	80001fc <__adddf3>
 800b594:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b598:	f1bb 0f00 	cmp.w	fp, #0
 800b59c:	daf3      	bge.n	800b586 <__kernel_rem_pio2+0x536>
 800b59e:	9b02      	ldr	r3, [sp, #8]
 800b5a0:	b113      	cbz	r3, 800b5a8 <__kernel_rem_pio2+0x558>
 800b5a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	9b01      	ldr	r3, [sp, #4]
 800b5aa:	e9c3 0100 	strd	r0, r1, [r3]
 800b5ae:	e7b9      	b.n	800b524 <__kernel_rem_pio2+0x4d4>
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	e7f0      	b.n	800b598 <__kernel_rem_pio2+0x548>
 800b5b6:	ab48      	add	r3, sp, #288	; 0x120
 800b5b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	f7f4 fe1c 	bl	80001fc <__adddf3>
 800b5c4:	3c01      	subs	r4, #1
 800b5c6:	2c00      	cmp	r4, #0
 800b5c8:	daf5      	bge.n	800b5b6 <__kernel_rem_pio2+0x566>
 800b5ca:	9b02      	ldr	r3, [sp, #8]
 800b5cc:	b1e3      	cbz	r3, 800b608 <__kernel_rem_pio2+0x5b8>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5d4:	9c01      	ldr	r4, [sp, #4]
 800b5d6:	e9c4 2300 	strd	r2, r3, [r4]
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b5e2:	f7f4 fe09 	bl	80001f8 <__aeabi_dsub>
 800b5e6:	ad4a      	add	r5, sp, #296	; 0x128
 800b5e8:	2401      	movs	r4, #1
 800b5ea:	45a3      	cmp	fp, r4
 800b5ec:	da0f      	bge.n	800b60e <__kernel_rem_pio2+0x5be>
 800b5ee:	9b02      	ldr	r3, [sp, #8]
 800b5f0:	b113      	cbz	r3, 800b5f8 <__kernel_rem_pio2+0x5a8>
 800b5f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	9b01      	ldr	r3, [sp, #4]
 800b5fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b5fe:	e791      	b.n	800b524 <__kernel_rem_pio2+0x4d4>
 800b600:	465c      	mov	r4, fp
 800b602:	2000      	movs	r0, #0
 800b604:	2100      	movs	r1, #0
 800b606:	e7de      	b.n	800b5c6 <__kernel_rem_pio2+0x576>
 800b608:	4602      	mov	r2, r0
 800b60a:	460b      	mov	r3, r1
 800b60c:	e7e2      	b.n	800b5d4 <__kernel_rem_pio2+0x584>
 800b60e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b612:	f7f4 fdf3 	bl	80001fc <__adddf3>
 800b616:	3401      	adds	r4, #1
 800b618:	e7e7      	b.n	800b5ea <__kernel_rem_pio2+0x59a>
 800b61a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b61e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b622:	4620      	mov	r0, r4
 800b624:	4632      	mov	r2, r6
 800b626:	463b      	mov	r3, r7
 800b628:	4629      	mov	r1, r5
 800b62a:	f7f4 fde7 	bl	80001fc <__adddf3>
 800b62e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4620      	mov	r0, r4
 800b638:	4629      	mov	r1, r5
 800b63a:	f7f4 fddd 	bl	80001f8 <__aeabi_dsub>
 800b63e:	4632      	mov	r2, r6
 800b640:	463b      	mov	r3, r7
 800b642:	f7f4 fddb 	bl	80001fc <__adddf3>
 800b646:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b64a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b64e:	ed88 7b00 	vstr	d7, [r8]
 800b652:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b656:	e776      	b.n	800b546 <__kernel_rem_pio2+0x4f6>
 800b658:	e9da 8900 	ldrd	r8, r9, [sl]
 800b65c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b660:	4640      	mov	r0, r8
 800b662:	4632      	mov	r2, r6
 800b664:	463b      	mov	r3, r7
 800b666:	4649      	mov	r1, r9
 800b668:	f7f4 fdc8 	bl	80001fc <__adddf3>
 800b66c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4640      	mov	r0, r8
 800b676:	4649      	mov	r1, r9
 800b678:	f7f4 fdbe 	bl	80001f8 <__aeabi_dsub>
 800b67c:	4632      	mov	r2, r6
 800b67e:	463b      	mov	r3, r7
 800b680:	f7f4 fdbc 	bl	80001fc <__adddf3>
 800b684:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b688:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b68c:	ed8a 7b00 	vstr	d7, [sl]
 800b690:	3c01      	subs	r4, #1
 800b692:	e75e      	b.n	800b552 <__kernel_rem_pio2+0x502>
 800b694:	ab48      	add	r3, sp, #288	; 0x120
 800b696:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	f7f4 fdad 	bl	80001fc <__adddf3>
 800b6a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b6a6:	e75a      	b.n	800b55e <__kernel_rem_pio2+0x50e>
 800b6a8:	9b01      	ldr	r3, [sp, #4]
 800b6aa:	9a01      	ldr	r2, [sp, #4]
 800b6ac:	601d      	str	r5, [r3, #0]
 800b6ae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b6b2:	605c      	str	r4, [r3, #4]
 800b6b4:	609f      	str	r7, [r3, #8]
 800b6b6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b6ba:	60d3      	str	r3, [r2, #12]
 800b6bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6c0:	6110      	str	r0, [r2, #16]
 800b6c2:	6153      	str	r3, [r2, #20]
 800b6c4:	e72e      	b.n	800b524 <__kernel_rem_pio2+0x4d4>
 800b6c6:	bf00      	nop
 800b6c8:	41700000 	.word	0x41700000
 800b6cc:	3e700000 	.word	0x3e700000

0800b6d0 <__kernel_sin>:
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	ed2d 8b04 	vpush	{d8-d9}
 800b6d8:	eeb0 8a41 	vmov.f32	s16, s2
 800b6dc:	eef0 8a61 	vmov.f32	s17, s3
 800b6e0:	ec55 4b10 	vmov	r4, r5, d0
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b6ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b6ee:	9001      	str	r0, [sp, #4]
 800b6f0:	da06      	bge.n	800b700 <__kernel_sin+0x30>
 800b6f2:	ee10 0a10 	vmov	r0, s0
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	f7f5 f9e6 	bl	8000ac8 <__aeabi_d2iz>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d051      	beq.n	800b7a4 <__kernel_sin+0xd4>
 800b700:	4622      	mov	r2, r4
 800b702:	462b      	mov	r3, r5
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f7f4 ff2e 	bl	8000568 <__aeabi_dmul>
 800b70c:	4682      	mov	sl, r0
 800b70e:	468b      	mov	fp, r1
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4620      	mov	r0, r4
 800b716:	4629      	mov	r1, r5
 800b718:	f7f4 ff26 	bl	8000568 <__aeabi_dmul>
 800b71c:	a341      	add	r3, pc, #260	; (adr r3, 800b824 <__kernel_sin+0x154>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	4680      	mov	r8, r0
 800b724:	4689      	mov	r9, r1
 800b726:	4650      	mov	r0, sl
 800b728:	4659      	mov	r1, fp
 800b72a:	f7f4 ff1d 	bl	8000568 <__aeabi_dmul>
 800b72e:	a33f      	add	r3, pc, #252	; (adr r3, 800b82c <__kernel_sin+0x15c>)
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	f7f4 fd60 	bl	80001f8 <__aeabi_dsub>
 800b738:	4652      	mov	r2, sl
 800b73a:	465b      	mov	r3, fp
 800b73c:	f7f4 ff14 	bl	8000568 <__aeabi_dmul>
 800b740:	a33c      	add	r3, pc, #240	; (adr r3, 800b834 <__kernel_sin+0x164>)
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	f7f4 fd59 	bl	80001fc <__adddf3>
 800b74a:	4652      	mov	r2, sl
 800b74c:	465b      	mov	r3, fp
 800b74e:	f7f4 ff0b 	bl	8000568 <__aeabi_dmul>
 800b752:	a33a      	add	r3, pc, #232	; (adr r3, 800b83c <__kernel_sin+0x16c>)
 800b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b758:	f7f4 fd4e 	bl	80001f8 <__aeabi_dsub>
 800b75c:	4652      	mov	r2, sl
 800b75e:	465b      	mov	r3, fp
 800b760:	f7f4 ff02 	bl	8000568 <__aeabi_dmul>
 800b764:	a337      	add	r3, pc, #220	; (adr r3, 800b844 <__kernel_sin+0x174>)
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	f7f4 fd47 	bl	80001fc <__adddf3>
 800b76e:	9b01      	ldr	r3, [sp, #4]
 800b770:	4606      	mov	r6, r0
 800b772:	460f      	mov	r7, r1
 800b774:	b9eb      	cbnz	r3, 800b7b2 <__kernel_sin+0xe2>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4650      	mov	r0, sl
 800b77c:	4659      	mov	r1, fp
 800b77e:	f7f4 fef3 	bl	8000568 <__aeabi_dmul>
 800b782:	a325      	add	r3, pc, #148	; (adr r3, 800b818 <__kernel_sin+0x148>)
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	f7f4 fd36 	bl	80001f8 <__aeabi_dsub>
 800b78c:	4642      	mov	r2, r8
 800b78e:	464b      	mov	r3, r9
 800b790:	f7f4 feea 	bl	8000568 <__aeabi_dmul>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	4620      	mov	r0, r4
 800b79a:	4629      	mov	r1, r5
 800b79c:	f7f4 fd2e 	bl	80001fc <__adddf3>
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	460d      	mov	r5, r1
 800b7a4:	ec45 4b10 	vmov	d0, r4, r5
 800b7a8:	b003      	add	sp, #12
 800b7aa:	ecbd 8b04 	vpop	{d8-d9}
 800b7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b2:	4b1b      	ldr	r3, [pc, #108]	; (800b820 <__kernel_sin+0x150>)
 800b7b4:	ec51 0b18 	vmov	r0, r1, d8
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f7f4 fed5 	bl	8000568 <__aeabi_dmul>
 800b7be:	4632      	mov	r2, r6
 800b7c0:	ec41 0b19 	vmov	d9, r0, r1
 800b7c4:	463b      	mov	r3, r7
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	f7f4 fecd 	bl	8000568 <__aeabi_dmul>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	ec51 0b19 	vmov	r0, r1, d9
 800b7d6:	f7f4 fd0f 	bl	80001f8 <__aeabi_dsub>
 800b7da:	4652      	mov	r2, sl
 800b7dc:	465b      	mov	r3, fp
 800b7de:	f7f4 fec3 	bl	8000568 <__aeabi_dmul>
 800b7e2:	ec53 2b18 	vmov	r2, r3, d8
 800b7e6:	f7f4 fd07 	bl	80001f8 <__aeabi_dsub>
 800b7ea:	a30b      	add	r3, pc, #44	; (adr r3, 800b818 <__kernel_sin+0x148>)
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	4606      	mov	r6, r0
 800b7f2:	460f      	mov	r7, r1
 800b7f4:	4640      	mov	r0, r8
 800b7f6:	4649      	mov	r1, r9
 800b7f8:	f7f4 feb6 	bl	8000568 <__aeabi_dmul>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4630      	mov	r0, r6
 800b802:	4639      	mov	r1, r7
 800b804:	f7f4 fcfa 	bl	80001fc <__adddf3>
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	4620      	mov	r0, r4
 800b80e:	4629      	mov	r1, r5
 800b810:	f7f4 fcf2 	bl	80001f8 <__aeabi_dsub>
 800b814:	e7c4      	b.n	800b7a0 <__kernel_sin+0xd0>
 800b816:	bf00      	nop
 800b818:	55555549 	.word	0x55555549
 800b81c:	3fc55555 	.word	0x3fc55555
 800b820:	3fe00000 	.word	0x3fe00000
 800b824:	5acfd57c 	.word	0x5acfd57c
 800b828:	3de5d93a 	.word	0x3de5d93a
 800b82c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b830:	3e5ae5e6 	.word	0x3e5ae5e6
 800b834:	57b1fe7d 	.word	0x57b1fe7d
 800b838:	3ec71de3 	.word	0x3ec71de3
 800b83c:	19c161d5 	.word	0x19c161d5
 800b840:	3f2a01a0 	.word	0x3f2a01a0
 800b844:	1110f8a6 	.word	0x1110f8a6
 800b848:	3f811111 	.word	0x3f811111

0800b84c <finite>:
 800b84c:	b082      	sub	sp, #8
 800b84e:	ed8d 0b00 	vstr	d0, [sp]
 800b852:	9801      	ldr	r0, [sp, #4]
 800b854:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b858:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b85c:	0fc0      	lsrs	r0, r0, #31
 800b85e:	b002      	add	sp, #8
 800b860:	4770      	bx	lr
 800b862:	0000      	movs	r0, r0
 800b864:	0000      	movs	r0, r0
	...

0800b868 <floor>:
 800b868:	ec51 0b10 	vmov	r0, r1, d0
 800b86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b870:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b874:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b878:	2e13      	cmp	r6, #19
 800b87a:	ee10 5a10 	vmov	r5, s0
 800b87e:	ee10 8a10 	vmov	r8, s0
 800b882:	460c      	mov	r4, r1
 800b884:	dc32      	bgt.n	800b8ec <floor+0x84>
 800b886:	2e00      	cmp	r6, #0
 800b888:	da14      	bge.n	800b8b4 <floor+0x4c>
 800b88a:	a333      	add	r3, pc, #204	; (adr r3, 800b958 <floor+0xf0>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f7f4 fcb4 	bl	80001fc <__adddf3>
 800b894:	2200      	movs	r2, #0
 800b896:	2300      	movs	r3, #0
 800b898:	f7f5 f8f6 	bl	8000a88 <__aeabi_dcmpgt>
 800b89c:	b138      	cbz	r0, 800b8ae <floor+0x46>
 800b89e:	2c00      	cmp	r4, #0
 800b8a0:	da57      	bge.n	800b952 <floor+0xea>
 800b8a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b8a6:	431d      	orrs	r5, r3
 800b8a8:	d001      	beq.n	800b8ae <floor+0x46>
 800b8aa:	4c2d      	ldr	r4, [pc, #180]	; (800b960 <floor+0xf8>)
 800b8ac:	2500      	movs	r5, #0
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	e025      	b.n	800b900 <floor+0x98>
 800b8b4:	4f2b      	ldr	r7, [pc, #172]	; (800b964 <floor+0xfc>)
 800b8b6:	4137      	asrs	r7, r6
 800b8b8:	ea01 0307 	and.w	r3, r1, r7
 800b8bc:	4303      	orrs	r3, r0
 800b8be:	d01f      	beq.n	800b900 <floor+0x98>
 800b8c0:	a325      	add	r3, pc, #148	; (adr r3, 800b958 <floor+0xf0>)
 800b8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c6:	f7f4 fc99 	bl	80001fc <__adddf3>
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f7f5 f8db 	bl	8000a88 <__aeabi_dcmpgt>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	d0eb      	beq.n	800b8ae <floor+0x46>
 800b8d6:	2c00      	cmp	r4, #0
 800b8d8:	bfbe      	ittt	lt
 800b8da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b8de:	fa43 f606 	asrlt.w	r6, r3, r6
 800b8e2:	19a4      	addlt	r4, r4, r6
 800b8e4:	ea24 0407 	bic.w	r4, r4, r7
 800b8e8:	2500      	movs	r5, #0
 800b8ea:	e7e0      	b.n	800b8ae <floor+0x46>
 800b8ec:	2e33      	cmp	r6, #51	; 0x33
 800b8ee:	dd0b      	ble.n	800b908 <floor+0xa0>
 800b8f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b8f4:	d104      	bne.n	800b900 <floor+0x98>
 800b8f6:	ee10 2a10 	vmov	r2, s0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	f7f4 fc7e 	bl	80001fc <__adddf3>
 800b900:	ec41 0b10 	vmov	d0, r0, r1
 800b904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b908:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b90c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b910:	fa23 f707 	lsr.w	r7, r3, r7
 800b914:	4207      	tst	r7, r0
 800b916:	d0f3      	beq.n	800b900 <floor+0x98>
 800b918:	a30f      	add	r3, pc, #60	; (adr r3, 800b958 <floor+0xf0>)
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	f7f4 fc6d 	bl	80001fc <__adddf3>
 800b922:	2200      	movs	r2, #0
 800b924:	2300      	movs	r3, #0
 800b926:	f7f5 f8af 	bl	8000a88 <__aeabi_dcmpgt>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d0bf      	beq.n	800b8ae <floor+0x46>
 800b92e:	2c00      	cmp	r4, #0
 800b930:	da02      	bge.n	800b938 <floor+0xd0>
 800b932:	2e14      	cmp	r6, #20
 800b934:	d103      	bne.n	800b93e <floor+0xd6>
 800b936:	3401      	adds	r4, #1
 800b938:	ea25 0507 	bic.w	r5, r5, r7
 800b93c:	e7b7      	b.n	800b8ae <floor+0x46>
 800b93e:	2301      	movs	r3, #1
 800b940:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b944:	fa03 f606 	lsl.w	r6, r3, r6
 800b948:	4435      	add	r5, r6
 800b94a:	4545      	cmp	r5, r8
 800b94c:	bf38      	it	cc
 800b94e:	18e4      	addcc	r4, r4, r3
 800b950:	e7f2      	b.n	800b938 <floor+0xd0>
 800b952:	2500      	movs	r5, #0
 800b954:	462c      	mov	r4, r5
 800b956:	e7aa      	b.n	800b8ae <floor+0x46>
 800b958:	8800759c 	.word	0x8800759c
 800b95c:	7e37e43c 	.word	0x7e37e43c
 800b960:	bff00000 	.word	0xbff00000
 800b964:	000fffff 	.word	0x000fffff

0800b968 <nan>:
 800b968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b970 <nan+0x8>
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	00000000 	.word	0x00000000
 800b974:	7ff80000 	.word	0x7ff80000

0800b978 <rint>:
 800b978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b97a:	ec51 0b10 	vmov	r0, r1, d0
 800b97e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b982:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b986:	2e13      	cmp	r6, #19
 800b988:	ee10 4a10 	vmov	r4, s0
 800b98c:	460b      	mov	r3, r1
 800b98e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b992:	dc58      	bgt.n	800ba46 <rint+0xce>
 800b994:	2e00      	cmp	r6, #0
 800b996:	da2b      	bge.n	800b9f0 <rint+0x78>
 800b998:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b99c:	4302      	orrs	r2, r0
 800b99e:	d023      	beq.n	800b9e8 <rint+0x70>
 800b9a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b9a4:	4302      	orrs	r2, r0
 800b9a6:	4254      	negs	r4, r2
 800b9a8:	4314      	orrs	r4, r2
 800b9aa:	0c4b      	lsrs	r3, r1, #17
 800b9ac:	0b24      	lsrs	r4, r4, #12
 800b9ae:	045b      	lsls	r3, r3, #17
 800b9b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b9b4:	ea44 0103 	orr.w	r1, r4, r3
 800b9b8:	4b32      	ldr	r3, [pc, #200]	; (800ba84 <rint+0x10c>)
 800b9ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b9be:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	f7f4 fc17 	bl	80001fc <__adddf3>
 800b9ce:	e9cd 0100 	strd	r0, r1, [sp]
 800b9d2:	463b      	mov	r3, r7
 800b9d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9d8:	4632      	mov	r2, r6
 800b9da:	f7f4 fc0d 	bl	80001f8 <__aeabi_dsub>
 800b9de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	ec41 0b10 	vmov	d0, r0, r1
 800b9ec:	b003      	add	sp, #12
 800b9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9f0:	4a25      	ldr	r2, [pc, #148]	; (800ba88 <rint+0x110>)
 800b9f2:	4132      	asrs	r2, r6
 800b9f4:	ea01 0702 	and.w	r7, r1, r2
 800b9f8:	4307      	orrs	r7, r0
 800b9fa:	d0f5      	beq.n	800b9e8 <rint+0x70>
 800b9fc:	0851      	lsrs	r1, r2, #1
 800b9fe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ba02:	4314      	orrs	r4, r2
 800ba04:	d00c      	beq.n	800ba20 <rint+0xa8>
 800ba06:	ea23 0201 	bic.w	r2, r3, r1
 800ba0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ba0e:	2e13      	cmp	r6, #19
 800ba10:	fa43 f606 	asr.w	r6, r3, r6
 800ba14:	bf0c      	ite	eq
 800ba16:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ba1a:	2400      	movne	r4, #0
 800ba1c:	ea42 0306 	orr.w	r3, r2, r6
 800ba20:	4918      	ldr	r1, [pc, #96]	; (800ba84 <rint+0x10c>)
 800ba22:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ba26:	4622      	mov	r2, r4
 800ba28:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	4629      	mov	r1, r5
 800ba30:	f7f4 fbe4 	bl	80001fc <__adddf3>
 800ba34:	e9cd 0100 	strd	r0, r1, [sp]
 800ba38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba3c:	4622      	mov	r2, r4
 800ba3e:	462b      	mov	r3, r5
 800ba40:	f7f4 fbda 	bl	80001f8 <__aeabi_dsub>
 800ba44:	e7d0      	b.n	800b9e8 <rint+0x70>
 800ba46:	2e33      	cmp	r6, #51	; 0x33
 800ba48:	dd07      	ble.n	800ba5a <rint+0xe2>
 800ba4a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ba4e:	d1cb      	bne.n	800b9e8 <rint+0x70>
 800ba50:	ee10 2a10 	vmov	r2, s0
 800ba54:	f7f4 fbd2 	bl	80001fc <__adddf3>
 800ba58:	e7c6      	b.n	800b9e8 <rint+0x70>
 800ba5a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ba5e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ba62:	40d6      	lsrs	r6, r2
 800ba64:	4230      	tst	r0, r6
 800ba66:	d0bf      	beq.n	800b9e8 <rint+0x70>
 800ba68:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800ba6c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800ba70:	bf1f      	itttt	ne
 800ba72:	ea24 0101 	bicne.w	r1, r4, r1
 800ba76:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ba7a:	fa44 f202 	asrne.w	r2, r4, r2
 800ba7e:	ea41 0402 	orrne.w	r4, r1, r2
 800ba82:	e7cd      	b.n	800ba20 <rint+0xa8>
 800ba84:	0800be88 	.word	0x0800be88
 800ba88:	000fffff 	.word	0x000fffff
 800ba8c:	00000000 	.word	0x00000000

0800ba90 <scalbn>:
 800ba90:	b570      	push	{r4, r5, r6, lr}
 800ba92:	ec55 4b10 	vmov	r4, r5, d0
 800ba96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	462b      	mov	r3, r5
 800ba9e:	b99a      	cbnz	r2, 800bac8 <scalbn+0x38>
 800baa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800baa4:	4323      	orrs	r3, r4
 800baa6:	d036      	beq.n	800bb16 <scalbn+0x86>
 800baa8:	4b39      	ldr	r3, [pc, #228]	; (800bb90 <scalbn+0x100>)
 800baaa:	4629      	mov	r1, r5
 800baac:	ee10 0a10 	vmov	r0, s0
 800bab0:	2200      	movs	r2, #0
 800bab2:	f7f4 fd59 	bl	8000568 <__aeabi_dmul>
 800bab6:	4b37      	ldr	r3, [pc, #220]	; (800bb94 <scalbn+0x104>)
 800bab8:	429e      	cmp	r6, r3
 800baba:	4604      	mov	r4, r0
 800babc:	460d      	mov	r5, r1
 800babe:	da10      	bge.n	800bae2 <scalbn+0x52>
 800bac0:	a32b      	add	r3, pc, #172	; (adr r3, 800bb70 <scalbn+0xe0>)
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	e03a      	b.n	800bb3e <scalbn+0xae>
 800bac8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bacc:	428a      	cmp	r2, r1
 800bace:	d10c      	bne.n	800baea <scalbn+0x5a>
 800bad0:	ee10 2a10 	vmov	r2, s0
 800bad4:	4620      	mov	r0, r4
 800bad6:	4629      	mov	r1, r5
 800bad8:	f7f4 fb90 	bl	80001fc <__adddf3>
 800badc:	4604      	mov	r4, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	e019      	b.n	800bb16 <scalbn+0x86>
 800bae2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bae6:	460b      	mov	r3, r1
 800bae8:	3a36      	subs	r2, #54	; 0x36
 800baea:	4432      	add	r2, r6
 800baec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800baf0:	428a      	cmp	r2, r1
 800baf2:	dd08      	ble.n	800bb06 <scalbn+0x76>
 800baf4:	2d00      	cmp	r5, #0
 800baf6:	a120      	add	r1, pc, #128	; (adr r1, 800bb78 <scalbn+0xe8>)
 800baf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bafc:	da1c      	bge.n	800bb38 <scalbn+0xa8>
 800bafe:	a120      	add	r1, pc, #128	; (adr r1, 800bb80 <scalbn+0xf0>)
 800bb00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb04:	e018      	b.n	800bb38 <scalbn+0xa8>
 800bb06:	2a00      	cmp	r2, #0
 800bb08:	dd08      	ble.n	800bb1c <scalbn+0x8c>
 800bb0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb16:	ec45 4b10 	vmov	d0, r4, r5
 800bb1a:	bd70      	pop	{r4, r5, r6, pc}
 800bb1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb20:	da19      	bge.n	800bb56 <scalbn+0xc6>
 800bb22:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb26:	429e      	cmp	r6, r3
 800bb28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bb2c:	dd0a      	ble.n	800bb44 <scalbn+0xb4>
 800bb2e:	a112      	add	r1, pc, #72	; (adr r1, 800bb78 <scalbn+0xe8>)
 800bb30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1e2      	bne.n	800bafe <scalbn+0x6e>
 800bb38:	a30f      	add	r3, pc, #60	; (adr r3, 800bb78 <scalbn+0xe8>)
 800bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3e:	f7f4 fd13 	bl	8000568 <__aeabi_dmul>
 800bb42:	e7cb      	b.n	800badc <scalbn+0x4c>
 800bb44:	a10a      	add	r1, pc, #40	; (adr r1, 800bb70 <scalbn+0xe0>)
 800bb46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d0b8      	beq.n	800bac0 <scalbn+0x30>
 800bb4e:	a10e      	add	r1, pc, #56	; (adr r1, 800bb88 <scalbn+0xf8>)
 800bb50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb54:	e7b4      	b.n	800bac0 <scalbn+0x30>
 800bb56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb5a:	3236      	adds	r2, #54	; 0x36
 800bb5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb64:	4620      	mov	r0, r4
 800bb66:	4b0c      	ldr	r3, [pc, #48]	; (800bb98 <scalbn+0x108>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	e7e8      	b.n	800bb3e <scalbn+0xae>
 800bb6c:	f3af 8000 	nop.w
 800bb70:	c2f8f359 	.word	0xc2f8f359
 800bb74:	01a56e1f 	.word	0x01a56e1f
 800bb78:	8800759c 	.word	0x8800759c
 800bb7c:	7e37e43c 	.word	0x7e37e43c
 800bb80:	8800759c 	.word	0x8800759c
 800bb84:	fe37e43c 	.word	0xfe37e43c
 800bb88:	c2f8f359 	.word	0xc2f8f359
 800bb8c:	81a56e1f 	.word	0x81a56e1f
 800bb90:	43500000 	.word	0x43500000
 800bb94:	ffff3cb0 	.word	0xffff3cb0
 800bb98:	3c900000 	.word	0x3c900000

0800bb9c <_init>:
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9e:	bf00      	nop
 800bba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bba2:	bc08      	pop	{r3}
 800bba4:	469e      	mov	lr, r3
 800bba6:	4770      	bx	lr

0800bba8 <_fini>:
 800bba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbaa:	bf00      	nop
 800bbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbae:	bc08      	pop	{r3}
 800bbb0:	469e      	mov	lr, r3
 800bbb2:	4770      	bx	lr
