
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6a0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800b84c  0800b84c  0001b84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8d0  0800b8d0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8d0  0800b8d0  0001b8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8d8  0800b8d8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8d8  0800b8d8  0001b8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8dc  0800b8dc  0001b8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b8e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002094  200001e8  0800bac8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000227c  0800bac8  0002227c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029f16  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000524b  00000000  00000000  0004a12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  0004f380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f8  00000000  00000000  00050e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000777f  00000000  00000000  00052770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000240e3  00000000  00000000  00059eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7732  00000000  00000000  0007dfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072c0  00000000  00000000  00165758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001e8 	.word	0x200001e8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800b834 	.word	0x0800b834

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001ec 	.word	0x200001ec
 80001e8:	0800b834 	.word	0x0800b834

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <getBatteryState>:
	free(battery_handler->huart);
	free(battery_handler->battery_info.NTC_content);

}

void getBatteryState(batteryHandler* battery_handler){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	send_buf[0] = SOI;
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <getBatteryState+0x60>)
 80004fe:	22dd      	movs	r2, #221	; 0xdd
 8000500:	701a      	strb	r2, [r3, #0]
	send_buf[1] = BATTERY_READ;
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <getBatteryState+0x60>)
 8000504:	22a5      	movs	r2, #165	; 0xa5
 8000506:	705a      	strb	r2, [r3, #1]
	send_buf[2] = BATTERY_BASIC_STATE;
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <getBatteryState+0x60>)
 800050a:	2203      	movs	r2, #3
 800050c:	709a      	strb	r2, [r3, #2]
	send_buf[3] = 0x00; //Length of info desired, 0 if want to get all info
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <getBatteryState+0x60>)
 8000510:	2200      	movs	r2, #0
 8000512:	70da      	strb	r2, [r3, #3]
	uint16_t checksum = CalculateCheckSum(send_buf, SEND_COMMAND_IDX, SEND_LENGTH_IDX);
 8000514:	2203      	movs	r2, #3
 8000516:	2102      	movs	r1, #2
 8000518:	480e      	ldr	r0, [pc, #56]	; (8000554 <getBatteryState+0x60>)
 800051a:	f000 f97c 	bl	8000816 <CalculateCheckSum>
 800051e:	4603      	mov	r3, r0
 8000520:	81fb      	strh	r3, [r7, #14]
	send_buf[4] = (checksum >> 8) & 0xFF;
 8000522:	89fb      	ldrh	r3, [r7, #14]
 8000524:	0a1b      	lsrs	r3, r3, #8
 8000526:	b29b      	uxth	r3, r3
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <getBatteryState+0x60>)
 800052c:	711a      	strb	r2, [r3, #4]
	send_buf[5] = checksum & 0xFF;
 800052e:	89fb      	ldrh	r3, [r7, #14]
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <getBatteryState+0x60>)
 8000534:	715a      	strb	r2, [r3, #5]
	send_buf[6] = EOI;
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <getBatteryState+0x60>)
 8000538:	2277      	movs	r2, #119	; 0x77
 800053a:	719a      	strb	r2, [r3, #6]
//	HAL_UART_Transmit(battery_handler->huart, send_buf, sizeof(send_buf),10);

	HAL_UART_Transmit_DMA(battery_handler->huart, send_buf, sizeof(send_buf));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2207      	movs	r2, #7
 8000542:	4904      	ldr	r1, [pc, #16]	; (8000554 <getBatteryState+0x60>)
 8000544:	4618      	mov	r0, r3
 8000546:	f006 f9f9 	bl	800693c <HAL_UART_Transmit_DMA>
//	uint8_t send_buf1 = 0xff;
//	HAL_UART_Transmit_DMA(battery_handler->huart, &send_buf1, 1);
//	HAL_UART_Transmit(battery_handler->huart, (uint8_t*)send_buf1, 1,10);
}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000204 	.word	0x20000204

08000558 <ReadBatteryState>:

void ReadBatteryState(batteryHandler* battery_handler, uint8_t receive_buf[]){
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	//Last index number in buffer
	uint8_t end_idx = REPLY_TOTAL_VOLTAGE_IDX + receive_buf[REPLY_LENGTH_IDX] + 2; //2 is account for checksum byte
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	3303      	adds	r3, #3
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3306      	adds	r3, #6
 800056a:	74fb      	strb	r3, [r7, #19]
	//check receive start, r/w state. flag and end buffer
	uint8_t tmp1 = (receive_buf[0] == SOI);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2bdd      	cmp	r3, #221	; 0xdd
 8000572:	bf0c      	ite	eq
 8000574:	2301      	moveq	r3, #1
 8000576:	2300      	movne	r3, #0
 8000578:	b2db      	uxtb	r3, r3
 800057a:	74bb      	strb	r3, [r7, #18]
	uint8_t tmp2 = (receive_buf[end_idx] == EOI);
 800057c:	7cfb      	ldrb	r3, [r7, #19]
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	4413      	add	r3, r2
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b77      	cmp	r3, #119	; 0x77
 8000586:	bf0c      	ite	eq
 8000588:	2301      	moveq	r3, #1
 800058a:	2300      	movne	r3, #0
 800058c:	b2db      	uxtb	r3, r3
 800058e:	747b      	strb	r3, [r7, #17]
	uint8_t tmp3 = ((receive_buf[1] == BATTERY_BASIC_STATE || receive_buf[1] == BATTERY_READ));
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	3301      	adds	r3, #1
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b03      	cmp	r3, #3
 8000598:	d004      	beq.n	80005a4 <ReadBatteryState+0x4c>
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2ba5      	cmp	r3, #165	; 0xa5
 80005a2:	d101      	bne.n	80005a8 <ReadBatteryState+0x50>
 80005a4:	2301      	movs	r3, #1
 80005a6:	e000      	b.n	80005aa <ReadBatteryState+0x52>
 80005a8:	2300      	movs	r3, #0
 80005aa:	743b      	strb	r3, [r7, #16]
	if (!(tmp1 && tmp2 && tmp3))
 80005ac:	7cbb      	ldrb	r3, [r7, #18]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	f000 812b 	beq.w	800080a <ReadBatteryState+0x2b2>
 80005b4:	7c7b      	ldrb	r3, [r7, #17]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	f000 8127 	beq.w	800080a <ReadBatteryState+0x2b2>
 80005bc:	7c3b      	ldrb	r3, [r7, #16]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f000 8123 	beq.w	800080a <ReadBatteryState+0x2b2>
		return;

	//Checksum_end_idx need to consider the length received from reply,
	uint8_t checksum_end_idx = REPLY_TOTAL_VOLTAGE_IDX + receive_buf[REPLY_LENGTH_IDX] - 1;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	3303      	adds	r3, #3
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	3303      	adds	r3, #3
 80005cc:	73fb      	strb	r3, [r7, #15]
	uint16_t checksum = CalculateCheckSum(receive_buf, REPLY_FLAG_IDX, checksum_end_idx);
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	461a      	mov	r2, r3
 80005d2:	2102      	movs	r1, #2
 80005d4:	6838      	ldr	r0, [r7, #0]
 80005d6:	f000 f91e 	bl	8000816 <CalculateCheckSum>
 80005da:	4603      	mov	r3, r0
 80005dc:	81bb      	strh	r3, [r7, #12]
	//Check the last second and third byte, if doesnt match the check sum, dispose the data
	if (	receive_buf[REPLY_TOTAL_VOLTAGE_IDX + receive_buf[REPLY_LENGTH_IDX] 	  ] != ((checksum >> 8) & 0xFF) ||
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	3303      	adds	r3, #3
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	3304      	adds	r3, #4
 80005e6:	461a      	mov	r2, r3
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	89bb      	ldrh	r3, [r7, #12]
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	429a      	cmp	r2, r3
 80005fa:	f040 8108 	bne.w	800080e <ReadBatteryState+0x2b6>
			receive_buf[REPLY_TOTAL_VOLTAGE_IDX + receive_buf[REPLY_LENGTH_IDX] +1 ] != (checksum & 0xFF)	)
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	3303      	adds	r3, #3
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	3305      	adds	r3, #5
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	89bb      	ldrh	r3, [r7, #12]
 8000610:	b2db      	uxtb	r3, r3
	if (	receive_buf[REPLY_TOTAL_VOLTAGE_IDX + receive_buf[REPLY_LENGTH_IDX] 	  ] != ((checksum >> 8) & 0xFF) ||
 8000612:	429a      	cmp	r2, r3
 8000614:	f040 80fb 	bne.w	800080e <ReadBatteryState+0x2b6>
			return;

	battery_handler->battery_info.total_voltage = (receive_buf[REPLY_TOTAL_VOLTAGE_IDX] << 8) | receive_buf[REPLY_TOTAL_VOLTAGE_IDX+1];
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	021b      	lsls	r3, r3, #8
 8000620:	b21a      	sxth	r2, r3
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3305      	adds	r3, #5
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b21b      	sxth	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	b29a      	uxth	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	809a      	strh	r2, [r3, #4]
	battery_handler->battery_info.current = (receive_buf[REPLY_CURRENT_IDX] << 8) | receive_buf[REPLY_CURRENT_IDX+1];
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	3306      	adds	r3, #6
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	b21a      	sxth	r2, r3
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	3307      	adds	r3, #7
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	b21b      	sxth	r3, r3
 8000646:	4313      	orrs	r3, r2
 8000648:	b21b      	sxth	r3, r3
 800064a:	b29a      	uxth	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	80da      	strh	r2, [r3, #6]
	battery_handler->battery_info.remaining_capacity = (receive_buf[REPLY_REMAINING_CAPACITY_IDX] << 8) | receive_buf[REPLY_REMAINING_CAPACITY_IDX+1];
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	3308      	adds	r3, #8
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	021b      	lsls	r3, r3, #8
 8000658:	b21a      	sxth	r2, r3
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	3309      	adds	r3, #9
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b21b      	sxth	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b21b      	sxth	r3, r3
 8000666:	b29a      	uxth	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	811a      	strh	r2, [r3, #8]
	battery_handler->battery_info.nominal_capacity = (receive_buf[REPLY_NOMINAL_CAPACITY_IDX] << 8) | receive_buf[REPLY_NOMINAL_CAPACITY_IDX+1];
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	330a      	adds	r3, #10
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	b21a      	sxth	r2, r3
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	330b      	adds	r3, #11
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b21b      	sxth	r3, r3
 800067e:	4313      	orrs	r3, r2
 8000680:	b21b      	sxth	r3, r3
 8000682:	b29a      	uxth	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	815a      	strh	r2, [r3, #10]
	battery_handler->battery_info.cycles = (receive_buf[REPLY_CYCLES_IDX] << 8) | receive_buf[REPLY_CYCLES_IDX+1];
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	330c      	adds	r3, #12
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	b21a      	sxth	r2, r3
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	330d      	adds	r3, #13
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b21b      	sxth	r3, r3
 800069a:	4313      	orrs	r3, r2
 800069c:	b21b      	sxth	r3, r3
 800069e:	b29a      	uxth	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	819a      	strh	r2, [r3, #12]
	battery_handler->battery_info.production_date = (receive_buf[REPLY_PRODUCTION_DATE_IDX] << 8) | receive_buf[REPLY_PRODUCTION_DATE_IDX+1];
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	330e      	adds	r3, #14
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	b21a      	sxth	r2, r3
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	330f      	adds	r3, #15
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b21b      	sxth	r3, r3
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	81da      	strh	r2, [r3, #14]
	battery_handler->battery_info.balanced_state[0] = (receive_buf[REPLY_BALANCE_LOW_IDX] << 8) | receive_buf[REPLY_BALANCE_LOW_IDX+1];
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	3310      	adds	r3, #16
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	021b      	lsls	r3, r3, #8
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	3311      	adds	r3, #17
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	821a      	strh	r2, [r3, #16]
	battery_handler->battery_info.balanced_state[1] = (receive_buf[REPLY_BALANCE_HIGH_IDX] << 8) | receive_buf[REPLY_BALANCE_HIGH_IDX+1];
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	3312      	adds	r3, #18
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	3313      	adds	r3, #19
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	825a      	strh	r2, [r3, #18]
	battery_handler->battery_info.protection_state = (receive_buf[REPLY_PROTECTION_IDX] << 8) | receive_buf[REPLY_PROTECTION_IDX+1];
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	3314      	adds	r3, #20
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	b21a      	sxth	r2, r3
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	3315      	adds	r3, #21
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b21b      	sxth	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	b21b      	sxth	r3, r3
 800070e:	b29a      	uxth	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	829a      	strh	r2, [r3, #20]
	battery_handler->battery_info.software_version = receive_buf[REPLY_SOFTWARE_IDX];
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	7d9a      	ldrb	r2, [r3, #22]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	759a      	strb	r2, [r3, #22]
	battery_handler->battery_info.remaining_capacity_RSOC = receive_buf[REPLY_REMAINING_CAPACITY_PERCENTAGE_IDX];
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	7dda      	ldrb	r2, [r3, #23]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	75da      	strb	r2, [r3, #23]
	battery_handler->battery_info.FET_control_status = receive_buf[REPLY_FET_CONTROL_IDX];
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	7e1a      	ldrb	r2, [r3, #24]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	761a      	strb	r2, [r3, #24]
	battery_handler->battery_info.battery_number = receive_buf[REPLY_BATTERY_IDX];
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	7e5a      	ldrb	r2, [r3, #25]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	765a      	strb	r2, [r3, #25]
	//Check if NTC number is the same
	//For first iteration
	if (battery_handler->battery_info.NTC_number == 0){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7e9b      	ldrb	r3, [r3, #26]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d10e      	bne.n	800075a <ReadBatteryState+0x202>
		battery_handler->battery_info.NTC_number = receive_buf[REPLY_NTC_IDX];
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	7e9a      	ldrb	r2, [r3, #26]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	769a      	strb	r2, [r3, #26]
		battery_handler->battery_info.NTC_content = (uint16_t*)malloc(battery_handler->battery_info.NTC_number*sizeof(uint16_t));
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	7e9b      	ldrb	r3, [r3, #26]
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f00a ff56 	bl	800b5fc <malloc>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	61da      	str	r2, [r3, #28]
 8000758:	e026      	b.n	80007a8 <ReadBatteryState+0x250>
	}
	//for second onward iteration
	//Check if NTC number is the same, do nothing
	else if (battery_handler->battery_info.NTC_number == receive_buf[REPLY_NTC_IDX]){
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7e9a      	ldrb	r2, [r3, #26]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	331a      	adds	r3, #26
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d104      	bne.n	8000772 <ReadBatteryState+0x21a>
		battery_handler->battery_info.NTC_number = receive_buf[REPLY_NTC_IDX];
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	7e9a      	ldrb	r2, [r3, #26]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	769a      	strb	r2, [r3, #26]
 8000770:	e01a      	b.n	80007a8 <ReadBatteryState+0x250>
	}
	//Check if NTC is different
	//realloc memory to change the size of array
	else if (battery_handler->battery_info.NTC_number != receive_buf[REPLY_NTC_IDX]){
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	7e9a      	ldrb	r2, [r3, #26]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	331a      	adds	r3, #26
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d013      	beq.n	80007a8 <ReadBatteryState+0x250>
		if(battery_handler->battery_info.NTC_content != NULL){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00f      	beq.n	80007a8 <ReadBatteryState+0x250>
			battery_handler->battery_info.NTC_number = receive_buf[REPLY_NTC_IDX];
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	7e9a      	ldrb	r2, [r3, #26]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	769a      	strb	r2, [r3, #26]
			battery_handler->battery_info.NTC_content = realloc(battery_handler->battery_info.NTC_content, battery_handler->battery_info.NTC_number*sizeof(uint16_t));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	69da      	ldr	r2, [r3, #28]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	7e9b      	ldrb	r3, [r3, #26]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4619      	mov	r1, r3
 800079c:	4610      	mov	r0, r2
 800079e:	f00a ffe7 	bl	800b770 <realloc>
 80007a2:	4602      	mov	r2, r0
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	61da      	str	r2, [r3, #28]
		}
	}
	for(int i = 0; i <= battery_handler->battery_info.NTC_number; i++){
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	e026      	b.n	80007fc <ReadBatteryState+0x2a4>
		battery_handler->battery_info.NTC_content[i] =  (receive_buf[REPLY_NTC_CONTENT_IDX + 2*i] << 8) & 0xFF00;
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	331b      	adds	r3, #27
 80007b4:	461a      	mov	r2, r3
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	0219      	lsls	r1, r3, #8
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	69da      	ldr	r2, [r3, #28]
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	b28a      	uxth	r2, r1
 80007ca:	801a      	strh	r2, [r3, #0]
		battery_handler->battery_info.NTC_content[i] |=  receive_buf[REPLY_NTC_CONTENT_IDX + 2*i + 1] & 0x00FF;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	69da      	ldr	r2, [r3, #28]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4413      	add	r3, r2
 80007d6:	8819      	ldrh	r1, [r3, #0]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	331c      	adds	r3, #28
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	4413      	add	r3, r2
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	69d8      	ldr	r0, [r3, #28]
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	4403      	add	r3, r0
 80007f0:	430a      	orrs	r2, r1
 80007f2:	b292      	uxth	r2, r2
 80007f4:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= battery_handler->battery_info.NTC_number; i++){
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	7e9b      	ldrb	r3, [r3, #26]
 8000800:	461a      	mov	r2, r3
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	4293      	cmp	r3, r2
 8000806:	ddd2      	ble.n	80007ae <ReadBatteryState+0x256>
 8000808:	e002      	b.n	8000810 <ReadBatteryState+0x2b8>
		return;
 800080a:	bf00      	nop
 800080c:	e000      	b.n	8000810 <ReadBatteryState+0x2b8>
			return;
 800080e:	bf00      	nop
	}

}
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <CalculateCheckSum>:

uint16_t CalculateCheckSum(uint8_t buf[], int start_pos, int end_pos){
 8000816:	b480      	push	{r7}
 8000818:	b087      	sub	sp, #28
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
	uint16_t checksum =0;
 8000822:	2300      	movs	r3, #0
 8000824:	82fb      	strh	r3, [r7, #22]
	for(int i = start_pos; i <= end_pos; i++){
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	e00a      	b.n	8000842 <CalculateCheckSum+0x2c>
		checksum += (uint16_t)buf[i];
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	4413      	add	r3, r2
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b29a      	uxth	r2, r3
 8000836:	8afb      	ldrh	r3, [r7, #22]
 8000838:	4413      	add	r3, r2
 800083a:	82fb      	strh	r3, [r7, #22]
	for(int i = start_pos; i <= end_pos; i++){
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	3301      	adds	r3, #1
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	429a      	cmp	r2, r3
 8000848:	ddf0      	ble.n	800082c <CalculateCheckSum+0x16>
	}
	//Formula given by datasheet
	checksum = 0xFFFF - checksum + 1;
 800084a:	8afb      	ldrh	r3, [r7, #22]
 800084c:	425b      	negs	r3, r3
 800084e:	82fb      	strh	r3, [r7, #22]
	return checksum;
 8000850:	8afb      	ldrh	r3, [r7, #22]
}
 8000852:	4618      	mov	r0, r3
 8000854:	371c      	adds	r7, #28
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000866:	4b30      	ldr	r3, [pc, #192]	; (8000928 <MX_CAN1_Init+0xc8>)
 8000868:	4a30      	ldr	r2, [pc, #192]	; (800092c <MX_CAN1_Init+0xcc>)
 800086a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <MX_CAN1_Init+0xc8>)
 800086e:	2209      	movs	r2, #9
 8000870:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <MX_CAN1_Init+0xc8>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000878:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_CAN1_Init+0xc8>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800087e:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_CAN1_Init+0xc8>)
 8000880:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000884:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_CAN1_Init+0xc8>)
 8000888:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800088c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_CAN1_Init+0xc8>)
 8000890:	2200      	movs	r2, #0
 8000892:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_CAN1_Init+0xc8>)
 8000896:	2200      	movs	r2, #0
 8000898:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_CAN1_Init+0xc8>)
 800089c:	2200      	movs	r2, #0
 800089e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_CAN1_Init+0xc8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_CAN1_Init+0xc8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_CAN1_Init+0xc8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008b2:	481d      	ldr	r0, [pc, #116]	; (8000928 <MX_CAN1_Init+0xc8>)
 80008b4:	f001 fac6 	bl	8001e44 <HAL_CAN_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80008be:	f000 fd11 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil_1;
	canfil_1.FilterBank = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
	canfil_1.FilterIdHigh = 0x0000;
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
	canfil_1.FilterIdLow = 0x0000;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
	canfil_1.SlaveStartFilterBank = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	480e      	ldr	r0, [pc, #56]	; (8000928 <MX_CAN1_Init+0xc8>)
 80008f0:	f001 fba4 	bl	800203c <HAL_CAN_ConfigFilter>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_CAN1_Init+0x9e>
				Error_Handler();
 80008fa:	f000 fcf3 	bl	80012e4 <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 80008fe:	2102      	movs	r1, #2
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <MX_CAN1_Init+0xc8>)
 8000902:	f001 fcbf 	bl	8002284 <HAL_CAN_ActivateNotification>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <MX_CAN1_Init+0xb2>
				return Error_Handler();
 800090c:	f000 fcea 	bl	80012e4 <Error_Handler>
 8000910:	e007      	b.n	8000922 <MX_CAN1_Init+0xc2>

	if (HAL_CAN_Start(&hcan1))
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_CAN1_Init+0xc8>)
 8000914:	f001 fc72 	bl	80021fc <HAL_CAN_Start>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_CAN1_Init+0xc2>
					return Error_Handler();
 800091e:	f000 fce1 	bl	80012e4 <Error_Handler>


  /* USER CODE END CAN1_Init 2 */

}
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000494 	.word	0x20000494
 800092c:	40006400 	.word	0x40006400

08000930 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <HAL_CAN_MspInit+0x94>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d133      	bne.n	80009ba <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <HAL_CAN_MspInit+0x98>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <HAL_CAN_MspInit+0x98>)
 800095c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <HAL_CAN_MspInit+0x98>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_CAN_MspInit+0x98>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <HAL_CAN_MspInit+0x98>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_CAN_MspInit+0x98>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800098a:	2303      	movs	r3, #3
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800099a:	2309      	movs	r3, #9
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <HAL_CAN_MspInit+0x9c>)
 80009a6:	f002 fbfd 	bl	80031a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2014      	movs	r0, #20
 80009b0:	f001 ffa3 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009b4:	2014      	movs	r0, #20
 80009b6:	f001 ffbc 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40006400 	.word	0x40006400
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020c00 	.word	0x40020c00

080009d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_DMA_Init+0x6c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <MX_DMA_Init+0x6c>)
 80009e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_DMA_Init+0x6c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	200c      	movs	r0, #12
 80009f8:	f001 ff7f 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009fc:	200c      	movs	r0, #12
 80009fe:	f001 ff98 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	200e      	movs	r0, #14
 8000a08:	f001 ff77 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a0c:	200e      	movs	r0, #14
 8000a0e:	f001 ff90 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2010      	movs	r0, #16
 8000a18:	f001 ff6f 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a1c:	2010      	movs	r0, #16
 8000a1e:	f001 ff88 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2011      	movs	r0, #17
 8000a28:	f001 ff67 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a2c:	2011      	movs	r0, #17
 8000a2e:	f001 ff80 	bl	8002932 <HAL_NVIC_EnableIRQ>

}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	4b8a      	ldr	r3, [pc, #552]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a89      	ldr	r2, [pc, #548]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b87      	ldr	r3, [pc, #540]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	4b83      	ldr	r3, [pc, #524]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a82      	ldr	r2, [pc, #520]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b80      	ldr	r3, [pc, #512]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b7c      	ldr	r3, [pc, #496]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a7b      	ldr	r2, [pc, #492]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b79      	ldr	r3, [pc, #484]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b75      	ldr	r3, [pc, #468]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a74      	ldr	r2, [pc, #464]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b72      	ldr	r3, [pc, #456]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	4b6e      	ldr	r3, [pc, #440]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a6d      	ldr	r2, [pc, #436]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b6b      	ldr	r3, [pc, #428]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b67      	ldr	r3, [pc, #412]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a66      	ldr	r2, [pc, #408]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <MX_GPIO_Init+0x244>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000afe:	2200      	movs	r2, #0
 8000b00:	213f      	movs	r1, #63	; 0x3f
 8000b02:	4861      	ldr	r0, [pc, #388]	; (8000c88 <MX_GPIO_Init+0x248>)
 8000b04:	f002 fcfa 	bl	80034fc <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	485f      	ldr	r0, [pc, #380]	; (8000c8c <MX_GPIO_Init+0x24c>)
 8000b0e:	f002 fcf5 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8000b12:	2200      	movs	r2, #0
 8000b14:	219b      	movs	r1, #155	; 0x9b
 8000b16:	485e      	ldr	r0, [pc, #376]	; (8000c90 <MX_GPIO_Init+0x250>)
 8000b18:	f002 fcf0 	bl	80034fc <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8000b22:	485c      	ldr	r0, [pc, #368]	; (8000c94 <MX_GPIO_Init+0x254>)
 8000b24:	f002 fcea 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f64e 4108 	movw	r1, #60424	; 0xec08
 8000b2e:	485a      	ldr	r0, [pc, #360]	; (8000c98 <MX_GPIO_Init+0x258>)
 8000b30:	f002 fce4 	bl	80034fc <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8000b34:	2307      	movs	r3, #7
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4853      	ldr	r0, [pc, #332]	; (8000c94 <MX_GPIO_Init+0x254>)
 8000b48:	f002 fb2c 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8000b4c:	f248 1378 	movw	r3, #33144	; 0x8178
 8000b50:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	484c      	ldr	r0, [pc, #304]	; (8000c94 <MX_GPIO_Init+0x254>)
 8000b62:	f002 fb1f 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000b66:	233f      	movs	r3, #63	; 0x3f
 8000b68:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4842      	ldr	r0, [pc, #264]	; (8000c88 <MX_GPIO_Init+0x248>)
 8000b7e:	f002 fb11 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8000b82:	2310      	movs	r3, #16
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	483c      	ldr	r0, [pc, #240]	; (8000c8c <MX_GPIO_Init+0x24c>)
 8000b9a:	f002 fb03 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4836      	ldr	r0, [pc, #216]	; (8000c8c <MX_GPIO_Init+0x24c>)
 8000bb4:	f002 faf6 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8000bb8:	239b      	movs	r3, #155	; 0x9b
 8000bba:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4830      	ldr	r0, [pc, #192]	; (8000c90 <MX_GPIO_Init+0x250>)
 8000bd0:	f002 fae8 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8000bd4:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4829      	ldr	r0, [pc, #164]	; (8000c94 <MX_GPIO_Init+0x254>)
 8000bee:	f002 fad9 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin;
 8000bf2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c04:	2305      	movs	r3, #5
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4820      	ldr	r0, [pc, #128]	; (8000c90 <MX_GPIO_Init+0x250>)
 8000c10:	f002 fac8 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8000c14:	f64e 4308 	movw	r3, #60424	; 0xec08
 8000c18:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481a      	ldr	r0, [pc, #104]	; (8000c98 <MX_GPIO_Init+0x258>)
 8000c2e:	f002 fab9 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8000c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4814      	ldr	r0, [pc, #80]	; (8000c98 <MX_GPIO_Init+0x258>)
 8000c48:	f002 faac 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c4c:	2320      	movs	r3, #32
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c5c:	2309      	movs	r3, #9
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	480a      	ldr	r0, [pc, #40]	; (8000c90 <MX_GPIO_Init+0x250>)
 8000c68:	f002 fa9c 	bl	80031a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2017      	movs	r0, #23
 8000c72:	f001 fe42 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c76:	2017      	movs	r0, #23
 8000c78:	f001 fe5b 	bl	8002932 <HAL_NVIC_EnableIRQ>

}
 8000c7c:	bf00      	nop
 8000c7e:	3730      	adds	r7, #48	; 0x30
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40020c00 	.word	0x40020c00

08000c9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <MX_I2C1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <MX_I2C1_Init+0x7c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cda:	f002 fc4d 	bl	8003578 <HAL_I2C_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce4:	f000 fafe 	bl	80012e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cec:	f002 fd88 	bl	8003800 <HAL_I2CEx_ConfigAnalogFilter>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000cf6:	f000 faf5 	bl	80012e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cfe:	f002 fdbb 	bl	8003878 <HAL_I2CEx_ConfigDigitalFilter>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d08:	f000 faec 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200004bc 	.word	0x200004bc
 8000d14:	40005400 	.word	0x40005400
 8000d18:	00061a80 	.word	0x00061a80

08000d1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <HAL_I2C_MspInit+0x84>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12c      	bne.n	8000d98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8000d5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d60:	2312      	movs	r3, #18
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	480c      	ldr	r0, [pc, #48]	; (8000da8 <HAL_I2C_MspInit+0x8c>)
 8000d78:	f002 fa14 	bl	80031a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40005400 	.word	0x40005400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400

08000dac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <MX_SPI1_Init+0x6c>)
 8000db4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000db8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000de4:	2228      	movs	r2, #40	; 0x28
 8000de6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000dfc:	220a      	movs	r2, #10
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <MX_SPI1_Init+0x68>)
 8000e02:	f004 fb6d 	bl	80054e0 <HAL_SPI_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000e0c:	f000 fa6a 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000043c 	.word	0x2000043c
 8000e18:	40013000 	.word	0x40013000

08000e1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <HAL_SPI_MspInit+0x84>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d12b      	bne.n	8000e96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_SPI_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8000e76:	2360      	movs	r3, #96	; 0x60
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e86:	2305      	movs	r3, #5
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_SPI_MspInit+0x8c>)
 8000e92:	f002 f987 	bl	80031a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40013000 	.word	0x40013000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f50:	f000 ff34 	bl	8001dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <DMA1_Stream1_IRQHandler+0x10>)
 8000f5e:	f001 feb7 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200007e8 	.word	0x200007e8

08000f6c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Stream3_IRQHandler+0x10>)
 8000f72:	f001 fead 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000088c 	.word	0x2000088c

08000f80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Stream5_IRQHandler+0x10>)
 8000f86:	f001 fea3 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000788 	.word	0x20000788

08000f94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <DMA1_Stream6_IRQHandler+0x10>)
 8000f9a:	f001 fe99 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200008ec 	.word	0x200008ec

08000fa8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <CAN1_RX0_IRQHandler+0x10>)
 8000fae:	f001 f98f 	bl	80022d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000494 	.word	0x20000494

08000fbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000fc0:	2080      	movs	r0, #128	; 0x80
 8000fc2:	f002 fab5 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <USART2_IRQHandler+0x10>)
 8000fd2:	f005 fd97 	bl	8006b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000094c 	.word	0x2000094c

08000fe0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <USART3_IRQHandler+0x10>)
 8000fe6:	f005 fd8d 	bl	8006b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000848 	.word	0x20000848

08000ff4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8000ffa:	f004 fbfb 	bl	80057f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000668 	.word	0x20000668

08001008 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800100e:	f004 fbf1 	bl	80057f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000668 	.word	0x20000668

0800101c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001022:	f004 fbe7 	bl	80057f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000668 	.word	0x20000668

08001030 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <TIM8_CC_IRQHandler+0x10>)
 8001036:	f004 fbdd 	bl	80057f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000668 	.word	0x20000668

08001044 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <OTG_FS_IRQHandler+0x10>)
 800104a:	f002 fda4 	bl	8003b96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20001e64 	.word	0x20001e64

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f00a fa8e 	bl	800b5a8 <__errno>
 800108c:	4603      	mov	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20030000 	.word	0x20030000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	2000020c 	.word	0x2000020c
 80010c0:	20002280 	.word	0x20002280

080010c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <SystemInit+0x28>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <SystemInit+0x28>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SystemInit+0x28>)
 80010da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010de:	609a      	str	r2, [r3, #8]
#endif
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b598      	push	{r3, r4, r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f000 fe10 	bl	8001d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f846 	bl	8001188 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 80010fc:	f004 f9bc 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 8001100:	4603      	mov	r3, r0
 8001102:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <main+0x90>)
 8001104:	fba2 2303 	umull	r2, r3, r2, r3
 8001108:	099b      	lsrs	r3, r3, #6
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fc1f 	bl	800294e <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001110:	2004      	movs	r0, #4
 8001112:	f001 fc29 	bl	8002968 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800111e:	f001 fbec 	bl	80028fa <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001122:	f7ff fc8d 	bl	8000a40 <MX_GPIO_Init>
  MX_DMA_Init();
 8001126:	f7ff fc53 	bl	80009d0 <MX_DMA_Init>
  MX_I2C1_Init();
 800112a:	f7ff fdb7 	bl	8000c9c <MX_I2C1_Init>
  MX_TIM1_Init();
 800112e:	f000 f8e1 	bl	80012f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001132:	f000 f97f 	bl	8001434 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001136:	f000 fc43 	bl	80019c0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800113a:	f000 f9ef 	bl	800151c <MX_TIM3_Init>
  MX_TIM8_Init();
 800113e:	f000 fa6f 	bl	8001620 <MX_TIM8_Init>
  MX_CAN1_Init();
 8001142:	f7ff fb8d 	bl	8000860 <MX_CAN1_Init>
  MX_SPI1_Init();
 8001146:	f7ff fe31 	bl	8000dac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800114a:	f000 fc0f 	bl	800196c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800114e:	f009 fd11 	bl	800ab74 <MX_USB_DEVICE_Init>
//	state_count = 0;
//	emBrakeMotor(1);
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 8001152:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001156:	f000 fe51 	bl	8001dfc <HAL_Delay>
//	getBatteryState(&main_power_supply);
	while (1)
	{
//		while(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET);
//		getBatteryState(&main_power_supply);
		CDC_Transmit_FS(data, strlen(data));
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <main+0x94>)
 800115c:	681c      	ldr	r4, [r3, #0]
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <main+0x94>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f842 	bl	80001ec <strlen>
 8001168:	4603      	mov	r3, r0
 800116a:	b29b      	uxth	r3, r3
 800116c:	4619      	mov	r1, r3
 800116e:	4620      	mov	r0, r4
 8001170:	f009 fdbe 	bl	800acf0 <CDC_Transmit_FS>
		HAL_Delay(500);
 8001174:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001178:	f000 fe40 	bl	8001dfc <HAL_Delay>
		CDC_Transmit_FS(data, strlen(data));
 800117c:	e7ed      	b.n	800115a <main+0x6a>
 800117e:	bf00      	nop
 8001180:	10624dd3 	.word	0x10624dd3
 8001184:	20000004 	.word	0x20000004

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f00a fa38 	bl	800b60c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <SystemClock_Config+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <SystemClock_Config+0xcc>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011d4:	4a20      	ldr	r2, [pc, #128]	; (8001258 <SystemClock_Config+0xd0>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <SystemClock_Config+0xd0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f2:	2302      	movs	r3, #2
 80011f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011fc:	2308      	movs	r3, #8
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001200:	2348      	movs	r3, #72	; 0x48
 8001202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001204:	2302      	movs	r3, #2
 8001206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001208:	2303      	movs	r3, #3
 800120a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fcf3 	bl	8004bfc <HAL_RCC_OscConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800121c:	f000 f862 	bl	80012e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001220:	230f      	movs	r3, #15
 8001222:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001224:	2302      	movs	r3, #2
 8001226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2102      	movs	r1, #2
 800123c:	4618      	mov	r0, r3
 800123e:	f003 ff55 	bl	80050ec <HAL_RCC_ClockConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001248:	f000 f84c 	bl	80012e4 <Error_Handler>
  }
}
 800124c:	bf00      	nop
 800124e:	3750      	adds	r7, #80	; 0x50
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <HAL_UART_TxCpltCallback>:
//
//	}
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a09      	ldr	r2, [pc, #36]	; (8001290 <HAL_UART_TxCpltCallback+0x34>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d10c      	bne.n	8001288 <HAL_UART_TxCpltCallback+0x2c>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, battery_receive_buf, sizeof(battery_receive_buf));
 800126e:	2232      	movs	r2, #50	; 0x32
 8001270:	4908      	ldr	r1, [pc, #32]	; (8001294 <HAL_UART_TxCpltCallback+0x38>)
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <HAL_UART_TxCpltCallback+0x3c>)
 8001274:	f005 fbe0 	bl	8006a38 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_UART_TxCpltCallback+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_UART_TxCpltCallback+0x40>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0208 	bic.w	r2, r2, #8
 8001286:	601a      	str	r2, [r3, #0]
	}
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40004400 	.word	0x40004400
 8001294:	200005e4 	.word	0x200005e4
 8001298:	2000094c 	.word	0x2000094c
 800129c:	20000788 	.word	0x20000788

080012a0 <HAL_UARTEx_RxEventCallback>:
//}



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_UARTEx_RxEventCallback+0x38>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d10b      	bne.n	80012ce <HAL_UARTEx_RxEventCallback+0x2e>
	{
		ReadBatteryState(&main_power_supply, battery_receive_buf);
 80012b6:	4909      	ldr	r1, [pc, #36]	; (80012dc <HAL_UARTEx_RxEventCallback+0x3c>)
 80012b8:	4809      	ldr	r0, [pc, #36]	; (80012e0 <HAL_UARTEx_RxEventCallback+0x40>)
 80012ba:	f7ff f94d 	bl	8000558 <ReadBatteryState>
		memset(battery_receive_buf, 0, sizeof(battery_receive_buf));
 80012be:	2232      	movs	r2, #50	; 0x32
 80012c0:	2100      	movs	r1, #0
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <HAL_UARTEx_RxEventCallback+0x3c>)
 80012c4:	f00a f9a2 	bl	800b60c <memset>
		getBatteryState(&main_power_supply);
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_UARTEx_RxEventCallback+0x40>)
 80012ca:	f7ff f913 	bl	80004f4 <getBatteryState>
	}
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40004400 	.word	0x40004400
 80012dc:	200005e4 	.word	0x200005e4
 80012e0:	20000510 	.word	0x20000510

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
//	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_2);
//	brakeMotor(&backMotor, 1);
//	brakeMotor(&backMotor, 1);
  /* USER CODE END Error_Handler_Debug */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b096      	sub	sp, #88	; 0x58
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2220      	movs	r2, #32
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f00a f96d 	bl	800b60c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001332:	4b3e      	ldr	r3, [pc, #248]	; (800142c <MX_TIM1_Init+0x138>)
 8001334:	4a3e      	ldr	r2, [pc, #248]	; (8001430 <MX_TIM1_Init+0x13c>)
 8001336:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001338:	4b3c      	ldr	r3, [pc, #240]	; (800142c <MX_TIM1_Init+0x138>)
 800133a:	22b3      	movs	r2, #179	; 0xb3
 800133c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <MX_TIM1_Init+0x138>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001344:	4b39      	ldr	r3, [pc, #228]	; (800142c <MX_TIM1_Init+0x138>)
 8001346:	2263      	movs	r2, #99	; 0x63
 8001348:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b38      	ldr	r3, [pc, #224]	; (800142c <MX_TIM1_Init+0x138>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001350:	4b36      	ldr	r3, [pc, #216]	; (800142c <MX_TIM1_Init+0x138>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b35      	ldr	r3, [pc, #212]	; (800142c <MX_TIM1_Init+0x138>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800135c:	4833      	ldr	r0, [pc, #204]	; (800142c <MX_TIM1_Init+0x138>)
 800135e:	f004 f948 	bl	80055f2 <HAL_TIM_Base_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001368:	f7ff ffbc 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001370:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001372:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001376:	4619      	mov	r1, r3
 8001378:	482c      	ldr	r0, [pc, #176]	; (800142c <MX_TIM1_Init+0x138>)
 800137a:	f004 fca1 	bl	8005cc0 <HAL_TIM_ConfigClockSource>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001384:	f7ff ffae 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001388:	4828      	ldr	r0, [pc, #160]	; (800142c <MX_TIM1_Init+0x138>)
 800138a:	f004 f981 	bl	8005690 <HAL_TIM_PWM_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001394:	f7ff ffa6 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a4:	4619      	mov	r1, r3
 80013a6:	4821      	ldr	r0, [pc, #132]	; (800142c <MX_TIM1_Init+0x138>)
 80013a8:	f005 f998 	bl	80066dc <HAL_TIMEx_MasterConfigSynchronization>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80013b2:	f7ff ff97 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b6:	2360      	movs	r3, #96	; 0x60
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013c2:	2300      	movs	r3, #0
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	2204      	movs	r2, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4814      	ldr	r0, [pc, #80]	; (800142c <MX_TIM1_Init+0x138>)
 80013dc:	f004 fbae 	bl	8005b3c <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013e6:	f7ff ff7d 	bl	80012e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001402:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_TIM1_Init+0x138>)
 800140e:	f005 f9e1 	bl	80067d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001418:	f7ff ff64 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM1_Init+0x138>)
 800141e:	f000 fa1b 	bl	8001858 <HAL_TIM_MspPostInit>

}
 8001422:	bf00      	nop
 8001424:	3758      	adds	r7, #88	; 0x58
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200006f8 	.word	0x200006f8
 8001430:	40010000 	.word	0x40010000

08001434 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	; 0x38
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001464:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <MX_TIM2_Init+0xe4>)
 8001466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800146a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 800146c:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <MX_TIM2_Init+0xe4>)
 800146e:	2259      	movs	r2, #89	; 0x59
 8001470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <MX_TIM2_Init+0xe4>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <MX_TIM2_Init+0xe4>)
 800147a:	2263      	movs	r2, #99	; 0x63
 800147c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <MX_TIM2_Init+0xe4>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <MX_TIM2_Init+0xe4>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800148a:	4823      	ldr	r0, [pc, #140]	; (8001518 <MX_TIM2_Init+0xe4>)
 800148c:	f004 f8b1 	bl	80055f2 <HAL_TIM_Base_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001496:	f7ff ff25 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a4:	4619      	mov	r1, r3
 80014a6:	481c      	ldr	r0, [pc, #112]	; (8001518 <MX_TIM2_Init+0xe4>)
 80014a8:	f004 fc0a 	bl	8005cc0 <HAL_TIM_ConfigClockSource>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80014b2:	f7ff ff17 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014b6:	4818      	ldr	r0, [pc, #96]	; (8001518 <MX_TIM2_Init+0xe4>)
 80014b8:	f004 f8ea 	bl	8005690 <HAL_TIM_PWM_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80014c2:	f7ff ff0f 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	4619      	mov	r1, r3
 80014d4:	4810      	ldr	r0, [pc, #64]	; (8001518 <MX_TIM2_Init+0xe4>)
 80014d6:	f005 f901 	bl	80066dc <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80014e0:	f7ff ff00 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e4:	2360      	movs	r3, #96	; 0x60
 80014e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2208      	movs	r2, #8
 80014f8:	4619      	mov	r1, r3
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <MX_TIM2_Init+0xe4>)
 80014fc:	f004 fb1e 	bl	8005b3c <HAL_TIM_PWM_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001506:	f7ff feed 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800150a:	4803      	ldr	r0, [pc, #12]	; (8001518 <MX_TIM2_Init+0xe4>)
 800150c:	f000 f9a4 	bl	8001858 <HAL_TIM_MspPostInit>

}
 8001510:	bf00      	nop
 8001512:	3738      	adds	r7, #56	; 0x38
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000740 	.word	0x20000740

0800151c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	; 0x38
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800154c:	4b32      	ldr	r3, [pc, #200]	; (8001618 <MX_TIM3_Init+0xfc>)
 800154e:	4a33      	ldr	r2, [pc, #204]	; (800161c <MX_TIM3_Init+0x100>)
 8001550:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001552:	4b31      	ldr	r3, [pc, #196]	; (8001618 <MX_TIM3_Init+0xfc>)
 8001554:	2259      	movs	r2, #89	; 0x59
 8001556:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <MX_TIM3_Init+0xfc>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <MX_TIM3_Init+0xfc>)
 8001560:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001564:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <MX_TIM3_Init+0xfc>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <MX_TIM3_Init+0xfc>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001572:	4829      	ldr	r0, [pc, #164]	; (8001618 <MX_TIM3_Init+0xfc>)
 8001574:	f004 f83d 	bl	80055f2 <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800157e:	f7ff feb1 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158c:	4619      	mov	r1, r3
 800158e:	4822      	ldr	r0, [pc, #136]	; (8001618 <MX_TIM3_Init+0xfc>)
 8001590:	f004 fb96 	bl	8005cc0 <HAL_TIM_ConfigClockSource>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800159a:	f7ff fea3 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800159e:	481e      	ldr	r0, [pc, #120]	; (8001618 <MX_TIM3_Init+0xfc>)
 80015a0:	f004 f876 	bl	8005690 <HAL_TIM_PWM_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015aa:	f7ff fe9b 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	4619      	mov	r1, r3
 80015bc:	4816      	ldr	r0, [pc, #88]	; (8001618 <MX_TIM3_Init+0xfc>)
 80015be:	f005 f88d 	bl	80066dc <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015c8:	f7ff fe8c 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015cc:	2360      	movs	r3, #96	; 0x60
 80015ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80015d0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80015d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <MX_TIM3_Init+0xfc>)
 80015e6:	f004 faa9 	bl	8005b3c <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80015f0:	f7ff fe78 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2204      	movs	r2, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <MX_TIM3_Init+0xfc>)
 80015fc:	f004 fa9e 	bl	8005b3c <HAL_TIM_PWM_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001606:	f7ff fe6d 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <MX_TIM3_Init+0xfc>)
 800160c:	f000 f924 	bl	8001858 <HAL_TIM_MspPostInit>

}
 8001610:	bf00      	nop
 8001612:	3738      	adds	r7, #56	; 0x38
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200006b0 	.word	0x200006b0
 800161c:	40000400 	.word	0x40000400

08001620 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800164a:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <MX_TIM8_Init+0xe0>)
 800164c:	4a2d      	ldr	r2, [pc, #180]	; (8001704 <MX_TIM8_Init+0xe4>)
 800164e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 8001650:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <MX_TIM8_Init+0xe0>)
 8001652:	2259      	movs	r2, #89	; 0x59
 8001654:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <MX_TIM8_Init+0xe0>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <MX_TIM8_Init+0xe0>)
 800165e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001662:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <MX_TIM8_Init+0xe0>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800166a:	4b25      	ldr	r3, [pc, #148]	; (8001700 <MX_TIM8_Init+0xe0>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <MX_TIM8_Init+0xe0>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001676:	4822      	ldr	r0, [pc, #136]	; (8001700 <MX_TIM8_Init+0xe0>)
 8001678:	f003 ffbb 	bl	80055f2 <HAL_TIM_Base_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001682:	f7ff fe2f 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	4619      	mov	r1, r3
 8001692:	481b      	ldr	r0, [pc, #108]	; (8001700 <MX_TIM8_Init+0xe0>)
 8001694:	f004 fb14 	bl	8005cc0 <HAL_TIM_ConfigClockSource>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800169e:	f7ff fe21 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80016a2:	4817      	ldr	r0, [pc, #92]	; (8001700 <MX_TIM8_Init+0xe0>)
 80016a4:	f004 f84d 	bl	8005742 <HAL_TIM_IC_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80016ae:	f7ff fe19 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	4619      	mov	r1, r3
 80016c0:	480f      	ldr	r0, [pc, #60]	; (8001700 <MX_TIM8_Init+0xe0>)
 80016c2:	f005 f80b 	bl	80066dc <HAL_TIMEx_MasterConfigSynchronization>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 80016cc:	f7ff fe0a 	bl	80012e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016d0:	2300      	movs	r3, #0
 80016d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016d4:	2301      	movs	r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	220c      	movs	r2, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <MX_TIM8_Init+0xe0>)
 80016e8:	f004 f98c 	bl	8005a04 <HAL_TIM_IC_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80016f2:	f7ff fdf7 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000668 	.word	0x20000668
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a47      	ldr	r2, [pc, #284]	; (8001844 <HAL_TIM_Base_MspInit+0x13c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d10e      	bne.n	8001748 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	4b46      	ldr	r3, [pc, #280]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a45      	ldr	r2, [pc, #276]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b43      	ldr	r3, [pc, #268]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001746:	e079      	b.n	800183c <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001750:	d10e      	bne.n	8001770 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a3b      	ldr	r2, [pc, #236]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
}
 800176e:	e065      	b.n	800183c <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a35      	ldr	r2, [pc, #212]	; (800184c <HAL_TIM_Base_MspInit+0x144>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d10e      	bne.n	8001798 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a31      	ldr	r2, [pc, #196]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
}
 8001796:	e051      	b.n	800183c <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM8)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <HAL_TIM_Base_MspInit+0x148>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d14c      	bne.n	800183c <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b28      	ldr	r3, [pc, #160]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a27      	ldr	r2, [pc, #156]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a20      	ldr	r2, [pc, #128]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_TIM_Base_MspInit+0x140>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017ec:	2303      	movs	r3, #3
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4817      	ldr	r0, [pc, #92]	; (8001854 <HAL_TIM_Base_MspInit+0x14c>)
 80017f8:	f001 fcd4 	bl	80031a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	202b      	movs	r0, #43	; 0x2b
 8001802:	f001 f87a 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001806:	202b      	movs	r0, #43	; 0x2b
 8001808:	f001 f893 	bl	8002932 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	202c      	movs	r0, #44	; 0x2c
 8001812:	f001 f872 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001816:	202c      	movs	r0, #44	; 0x2c
 8001818:	f001 f88b 	bl	8002932 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	202d      	movs	r0, #45	; 0x2d
 8001822:	f001 f86a 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001826:	202d      	movs	r0, #45	; 0x2d
 8001828:	f001 f883 	bl	8002932 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	2100      	movs	r1, #0
 8001830:	202e      	movs	r0, #46	; 0x2e
 8001832:	f001 f862 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001836:	202e      	movs	r0, #46	; 0x2e
 8001838:	f001 f87b 	bl	8002932 <HAL_NVIC_EnableIRQ>
}
 800183c:	bf00      	nop
 800183e:	3730      	adds	r7, #48	; 0x30
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40010000 	.word	0x40010000
 8001848:	40023800 	.word	0x40023800
 800184c:	40000400 	.word	0x40000400
 8001850:	40010400 	.word	0x40010400
 8001854:	40020800 	.word	0x40020800

08001858 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a37      	ldr	r2, [pc, #220]	; (8001954 <HAL_TIM_MspPostInit+0xfc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d11f      	bne.n	80018ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_TIM_MspPostInit+0x100>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a35      	ldr	r2, [pc, #212]	; (8001958 <HAL_TIM_MspPostInit+0x100>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_TIM_MspPostInit+0x100>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8001896:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	482a      	ldr	r0, [pc, #168]	; (800195c <HAL_TIM_MspPostInit+0x104>)
 80018b4:	f001 fc76 	bl	80031a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018b8:	e047      	b.n	800194a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c2:	d11f      	bne.n	8001904 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <HAL_TIM_MspPostInit+0x100>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <HAL_TIM_MspPostInit+0x100>)
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	6313      	str	r3, [r2, #48]	; 0x30
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_TIM_MspPostInit+0x100>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 80018e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018f2:	2301      	movs	r3, #1
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4818      	ldr	r0, [pc, #96]	; (8001960 <HAL_TIM_MspPostInit+0x108>)
 80018fe:	f001 fc51 	bl	80031a4 <HAL_GPIO_Init>
}
 8001902:	e022      	b.n	800194a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a16      	ldr	r2, [pc, #88]	; (8001964 <HAL_TIM_MspPostInit+0x10c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d11d      	bne.n	800194a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_TIM_MspPostInit+0x100>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a10      	ldr	r2, [pc, #64]	; (8001958 <HAL_TIM_MspPostInit+0x100>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_TIM_MspPostInit+0x100>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 800192a:	23c0      	movs	r3, #192	; 0xc0
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800193a:	2302      	movs	r3, #2
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4808      	ldr	r0, [pc, #32]	; (8001968 <HAL_TIM_MspPostInit+0x110>)
 8001946:	f001 fc2d 	bl	80031a4 <HAL_GPIO_Init>
}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40010000 	.word	0x40010000
 8001958:	40023800 	.word	0x40023800
 800195c:	40021000 	.word	0x40021000
 8001960:	40020400 	.word	0x40020400
 8001964:	40000400 	.word	0x40000400
 8001968:	40020800 	.word	0x40020800

0800196c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <MX_USART2_UART_Init+0x50>)
 8001974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001978:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800197c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_USART2_UART_Init+0x4c>)
 80019a4:	f004 ff7c 	bl	80068a0 <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ae:	f7ff fc99 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000094c 	.word	0x2000094c
 80019bc:	40004400 	.word	0x40004400

080019c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_USART3_UART_Init+0x4c>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <MX_USART3_UART_Init+0x50>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <MX_USART3_UART_Init+0x4c>)
 80019cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_USART3_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_USART3_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <MX_USART3_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_USART3_UART_Init+0x4c>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <MX_USART3_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_USART3_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_USART3_UART_Init+0x4c>)
 80019f8:	f004 ff52 	bl	80068a0 <HAL_UART_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a02:	f7ff fc6f 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000848 	.word	0x20000848
 8001a10:	40004800 	.word	0x40004800

08001a14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a97      	ldr	r2, [pc, #604]	; (8001c90 <HAL_UART_MspInit+0x27c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	f040 8091 	bne.w	8001b5a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	4b95      	ldr	r3, [pc, #596]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	4a94      	ldr	r2, [pc, #592]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a46:	6413      	str	r3, [r2, #64]	; 0x40
 8001a48:	4b92      	ldr	r3, [pc, #584]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	4b8e      	ldr	r3, [pc, #568]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	4a8d      	ldr	r2, [pc, #564]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6313      	str	r3, [r2, #48]	; 0x30
 8001a64:	4b8b      	ldr	r3, [pc, #556]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a70:	230c      	movs	r3, #12
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a80:	2307      	movs	r3, #7
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4883      	ldr	r0, [pc, #524]	; (8001c98 <HAL_UART_MspInit+0x284>)
 8001a8c:	f001 fb8a 	bl	80031a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001a90:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001a92:	4a83      	ldr	r2, [pc, #524]	; (8001ca0 <HAL_UART_MspInit+0x28c>)
 8001a94:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001a96:	4b81      	ldr	r3, [pc, #516]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001a98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9e:	4b7f      	ldr	r3, [pc, #508]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa4:	4b7d      	ldr	r3, [pc, #500]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ab0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab2:	4b7a      	ldr	r3, [pc, #488]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab8:	4b78      	ldr	r3, [pc, #480]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001abe:	4b77      	ldr	r3, [pc, #476]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac4:	4b75      	ldr	r3, [pc, #468]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aca:	4b74      	ldr	r3, [pc, #464]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ad0:	4872      	ldr	r0, [pc, #456]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001ad2:	f000 ff65 	bl	80029a0 <HAL_DMA_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001adc:	f7ff fc02 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a6e      	ldr	r2, [pc, #440]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ae6:	4a6d      	ldr	r2, [pc, #436]	; (8001c9c <HAL_UART_MspInit+0x288>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001aec:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001aee:	4a6e      	ldr	r2, [pc, #440]	; (8001ca8 <HAL_UART_MspInit+0x294>)
 8001af0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001af2:	4b6c      	ldr	r3, [pc, #432]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001af4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001af8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001afa:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b00:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b06:	4b67      	ldr	r3, [pc, #412]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0e:	4b65      	ldr	r3, [pc, #404]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b14:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b1a:	4b62      	ldr	r3, [pc, #392]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b20:	4b60      	ldr	r3, [pc, #384]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b26:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b2c:	485d      	ldr	r0, [pc, #372]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001b2e:	f000 ff37 	bl	80029a0 <HAL_DMA_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001b38:	f7ff fbd4 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a59      	ldr	r2, [pc, #356]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001b40:	635a      	str	r2, [r3, #52]	; 0x34
 8001b42:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_UART_MspInit+0x290>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2026      	movs	r0, #38	; 0x26
 8001b4e:	f000 fed4 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b52:	2026      	movs	r0, #38	; 0x26
 8001b54:	f000 feed 	bl	8002932 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b58:	e096      	b.n	8001c88 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a53      	ldr	r2, [pc, #332]	; (8001cac <HAL_UART_MspInit+0x298>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	f040 8091 	bne.w	8001c88 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a49      	ldr	r2, [pc, #292]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a42      	ldr	r2, [pc, #264]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b40      	ldr	r3, [pc, #256]	; (8001c94 <HAL_UART_MspInit+0x280>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8001b9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	483d      	ldr	r0, [pc, #244]	; (8001cb0 <HAL_UART_MspInit+0x29c>)
 8001bbc:	f001 faf2 	bl	80031a4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001bc0:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001bc2:	4a3d      	ldr	r2, [pc, #244]	; (8001cb8 <HAL_UART_MspInit+0x2a4>)
 8001bc4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001bc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bcc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd4:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bda:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be2:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be8:	4b32      	ldr	r3, [pc, #200]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001bee:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bf4:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c00:	482c      	ldr	r0, [pc, #176]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001c02:	f000 fecd 	bl	80029a0 <HAL_DMA_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001c0c:	f7ff fb6a 	bl	80012e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001c14:	639a      	str	r2, [r3, #56]	; 0x38
 8001c16:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <HAL_UART_MspInit+0x2a0>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c1e:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <HAL_UART_MspInit+0x2ac>)
 8001c20:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001c22:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c28:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c2c:	2240      	movs	r2, #64	; 0x40
 8001c2e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c30:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c36:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c3c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001c5c:	4817      	ldr	r0, [pc, #92]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c5e:	f000 fe9f 	bl	80029a0 <HAL_DMA_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_MspInit+0x258>
      Error_Handler();
 8001c68:	f7ff fb3c 	bl	80012e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <HAL_UART_MspInit+0x2a8>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2027      	movs	r0, #39	; 0x27
 8001c7e:	f000 fe3c 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c82:	2027      	movs	r0, #39	; 0x27
 8001c84:	f000 fe55 	bl	8002932 <HAL_NVIC_EnableIRQ>
}
 8001c88:	bf00      	nop
 8001c8a:	3730      	adds	r7, #48	; 0x30
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40004400 	.word	0x40004400
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	20000788 	.word	0x20000788
 8001ca0:	40026088 	.word	0x40026088
 8001ca4:	200008ec 	.word	0x200008ec
 8001ca8:	400260a0 	.word	0x400260a0
 8001cac:	40004800 	.word	0x40004800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	200007e8 	.word	0x200007e8
 8001cb8:	40026028 	.word	0x40026028
 8001cbc:	2000088c 	.word	0x2000088c
 8001cc0:	40026058 	.word	0x40026058

08001cc4 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cfc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cca:	e003      	b.n	8001cd4 <LoopCopyDataInit>

08001ccc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cd2:	3104      	adds	r1, #4

08001cd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cd4:	480b      	ldr	r0, [pc, #44]	; (8001d04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cdc:	d3f6      	bcc.n	8001ccc <CopyDataInit>
  ldr  r2, =_sbss
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ce0:	e002      	b.n	8001ce8 <LoopFillZerobss>

08001ce2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ce2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ce4:	f842 3b04 	str.w	r3, [r2], #4

08001ce8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cec:	d3f9      	bcc.n	8001ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cee:	f7ff f9e9 	bl	80010c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f009 fc5f 	bl	800b5b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf6:	f7ff f9fb 	bl	80010f0 <main>
  bx  lr    
 8001cfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cfc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001d00:	0800b8e0 	.word	0x0800b8e0
  ldr  r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d08:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8001d0c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8001d10:	2000227c 	.word	0x2000227c

08001d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC_IRQHandler>
	...

08001d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <HAL_Init+0x40>)
 8001d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_Init+0x40>)
 8001d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_Init+0x40>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f000 fdcf 	bl	80028e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f808 	bl	8001d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4c:	f7ff f8ae 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023c00 	.word	0x40023c00

08001d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_InitTick+0x54>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x58>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fde7 	bl	800294e <HAL_SYSTICK_Config>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00e      	b.n	8001da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b0f      	cmp	r3, #15
 8001d8e:	d80a      	bhi.n	8001da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d90:	2200      	movs	r2, #0
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d98:	f000 fdaf 	bl	80028fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d9c:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <HAL_InitTick+0x5c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e000      	b.n	8001da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000000 	.word	0x20000000
 8001db4:	2000000c 	.word	0x2000000c
 8001db8:	20000008 	.word	0x20000008

08001dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x20>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x24>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_IncTick+0x24>)
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	2000000c 	.word	0x2000000c
 8001de0:	20000990 	.word	0x20000990

08001de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return uwTick;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_GetTick+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000990 	.word	0x20000990

08001dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff ffee 	bl	8001de4 <HAL_GetTick>
 8001e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e14:	d005      	beq.n	8001e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_Delay+0x44>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e22:	bf00      	nop
 8001e24:	f7ff ffde 	bl	8001de4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d8f7      	bhi.n	8001e24 <HAL_Delay+0x28>
  {
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000000c 	.word	0x2000000c

08001e44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0ed      	b.n	8002032 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe fd64 	bl	8000930 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e78:	f7ff ffb4 	bl	8001de4 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e7e:	e012      	b.n	8001ea6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e80:	f7ff ffb0 	bl	8001de4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b0a      	cmp	r3, #10
 8001e8c:	d90b      	bls.n	8001ea6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2205      	movs	r2, #5
 8001e9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0c5      	b.n	8002032 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0e5      	beq.n	8001e80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0202 	bic.w	r2, r2, #2
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec4:	f7ff ff8e 	bl	8001de4 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eca:	e012      	b.n	8001ef2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ecc:	f7ff ff8a 	bl	8001de4 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b0a      	cmp	r3, #10
 8001ed8:	d90b      	bls.n	8001ef2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2205      	movs	r2, #5
 8001eea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e09f      	b.n	8002032 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e5      	bne.n	8001ecc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7e1b      	ldrb	r3, [r3, #24]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d108      	bne.n	8001f1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e007      	b.n	8001f2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7e5b      	ldrb	r3, [r3, #25]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e007      	b.n	8001f54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7e9b      	ldrb	r3, [r3, #26]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d108      	bne.n	8001f6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0220 	orr.w	r2, r2, #32
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e007      	b.n	8001f7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0220 	bic.w	r2, r2, #32
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7edb      	ldrb	r3, [r3, #27]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0210 	bic.w	r2, r2, #16
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e007      	b.n	8001fa8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0210 	orr.w	r2, r2, #16
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7f1b      	ldrb	r3, [r3, #28]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0208 	orr.w	r2, r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e007      	b.n	8001fd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0208 	bic.w	r2, r2, #8
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7f5b      	ldrb	r3, [r3, #29]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d108      	bne.n	8001fec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0204 	orr.w	r2, r2, #4
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e007      	b.n	8001ffc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0204 	bic.w	r2, r2, #4
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	ea42 0103 	orr.w	r1, r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002052:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d003      	beq.n	8002062 <HAL_CAN_ConfigFilter+0x26>
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	2b02      	cmp	r3, #2
 800205e:	f040 80be 	bne.w	80021de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002062:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002064:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800207c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	431a      	orrs	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2201      	movs	r2, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	401a      	ands	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d123      	bne.n	800210c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3248      	adds	r2, #72	; 0x48
 80020ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002100:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002102:	6979      	ldr	r1, [r7, #20]
 8002104:	3348      	adds	r3, #72	; 0x48
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d122      	bne.n	800215a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	431a      	orrs	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002134:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3248      	adds	r2, #72	; 0x48
 800213a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800214e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002150:	6979      	ldr	r1, [r7, #20]
 8002152:	3348      	adds	r3, #72	; 0x48
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43db      	mvns	r3, r3
 800216c:	401a      	ands	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002174:	e007      	b.n	8002186 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	431a      	orrs	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	401a      	ands	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80021a0:	e007      	b.n	80021b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021d0:	f023 0201 	bic.w	r2, r3, #1
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e006      	b.n	80021ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40006400 	.word	0x40006400

080021fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d12e      	bne.n	800226e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002228:	f7ff fddc 	bl	8001de4 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800222e:	e012      	b.n	8002256 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002230:	f7ff fdd8 	bl	8001de4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b0a      	cmp	r3, #10
 800223c:	d90b      	bls.n	8002256 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2205      	movs	r2, #5
 800224e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e012      	b.n	800227c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e5      	bne.n	8002230 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e006      	b.n	800227c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
  }
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002294:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d002      	beq.n	80022a2 <HAL_CAN_ActivateNotification+0x1e>
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d109      	bne.n	80022b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6959      	ldr	r1, [r3, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e006      	b.n	80022c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
  }
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d07c      	beq.n	8002410 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d023      	beq.n	8002368 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2201      	movs	r2, #1
 8002326:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f983 	bl	800263e <HAL_CAN_TxMailbox0CompleteCallback>
 8002338:	e016      	b.n	8002368 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
 800234c:	e00c      	b.n	8002368 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
 8002360:	e002      	b.n	8002368 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f989 	bl	800267a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d024      	beq.n	80023bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f963 	bl	8002652 <HAL_CAN_TxMailbox1CompleteCallback>
 800238c:	e016      	b.n	80023bc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	e00c      	b.n	80023bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	e002      	b.n	80023bc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f969 	bl	800268e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d024      	beq.n	8002410 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f943 	bl	8002666 <HAL_CAN_TxMailbox2CompleteCallback>
 80023e0:	e016      	b.n	8002410 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	e00c      	b.n	8002410 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d004      	beq.n	800240a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	e002      	b.n	8002410 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f949 	bl	80026a2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00c      	beq.n	8002434 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2210      	movs	r2, #16
 8002432:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2208      	movs	r2, #8
 800244e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f93a 	bl	80026ca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d009      	beq.n	8002474 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f921 	bl	80026b6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00c      	beq.n	8002498 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2210      	movs	r2, #16
 8002496:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d006      	beq.n	80024ba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2208      	movs	r2, #8
 80024b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f91c 	bl	80026f2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f903 	bl	80026de <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2210      	movs	r2, #16
 80024f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f906 	bl	8002706 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2208      	movs	r2, #8
 8002514:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8ff 	bl	800271a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d07b      	beq.n	800261e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d072      	beq.n	8002616 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	f043 0302 	orr.w	r3, r3, #2
 8002566:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258a:	2b00      	cmp	r3, #0
 800258c:	d043      	beq.n	8002616 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002594:	2b00      	cmp	r3, #0
 8002596:	d03e      	beq.n	8002616 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800259e:	2b60      	cmp	r3, #96	; 0x60
 80025a0:	d02b      	beq.n	80025fa <HAL_CAN_IRQHandler+0x32a>
 80025a2:	2b60      	cmp	r3, #96	; 0x60
 80025a4:	d82e      	bhi.n	8002604 <HAL_CAN_IRQHandler+0x334>
 80025a6:	2b50      	cmp	r3, #80	; 0x50
 80025a8:	d022      	beq.n	80025f0 <HAL_CAN_IRQHandler+0x320>
 80025aa:	2b50      	cmp	r3, #80	; 0x50
 80025ac:	d82a      	bhi.n	8002604 <HAL_CAN_IRQHandler+0x334>
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d019      	beq.n	80025e6 <HAL_CAN_IRQHandler+0x316>
 80025b2:	2b40      	cmp	r3, #64	; 0x40
 80025b4:	d826      	bhi.n	8002604 <HAL_CAN_IRQHandler+0x334>
 80025b6:	2b30      	cmp	r3, #48	; 0x30
 80025b8:	d010      	beq.n	80025dc <HAL_CAN_IRQHandler+0x30c>
 80025ba:	2b30      	cmp	r3, #48	; 0x30
 80025bc:	d822      	bhi.n	8002604 <HAL_CAN_IRQHandler+0x334>
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d002      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x2f8>
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d005      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025c6:	e01d      	b.n	8002604 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025d0:	e019      	b.n	8002606 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	f043 0310 	orr.w	r3, r3, #16
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025da:	e014      	b.n	8002606 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	f043 0320 	orr.w	r3, r3, #32
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025e4:	e00f      	b.n	8002606 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ee:	e00a      	b.n	8002606 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025f8:	e005      	b.n	8002606 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002602:	e000      	b.n	8002606 <HAL_CAN_IRQHandler+0x336>
            break;
 8002604:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699a      	ldr	r2, [r3, #24]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002614:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f87c 	bl	800272e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002636:	bf00      	nop
 8002638:	3728      	adds	r7, #40	; 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800276c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db0b      	blt.n	80027d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <__NVIC_EnableIRQ+0x38>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2001      	movs	r0, #1
 80027ca:	fa00 f202 	lsl.w	r2, r0, r2
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b0:	d301      	bcc.n	80028b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00f      	b.n	80028d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <SysTick_Config+0x40>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028be:	210f      	movs	r1, #15
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028c4:	f7ff ff8e 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <SysTick_Config+0x40>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <SysTick_Config+0x40>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff29 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800290c:	f7ff ff3e 	bl	800278c <__NVIC_GetPriorityGrouping>
 8002910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f7ff ff8e 	bl	8002838 <NVIC_EncodePriority>
 800291c:	4602      	mov	r2, r0
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff5d 	bl	80027e4 <__NVIC_SetPriority>
}
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff31 	bl	80027a8 <__NVIC_EnableIRQ>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ffa2 	bl	80028a0 <SysTick_Config>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b04      	cmp	r3, #4
 8002974:	d106      	bne.n	8002984 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002982:	e005      	b.n	8002990 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	6013      	str	r3, [r2, #0]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff fa1a 	bl	8001de4 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e099      	b.n	8002af0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029dc:	e00f      	b.n	80029fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029de:	f7ff fa01 	bl	8001de4 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d908      	bls.n	80029fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2203      	movs	r2, #3
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e078      	b.n	8002af0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e8      	bne.n	80029de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <HAL_DMA_Init+0x158>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d107      	bne.n	8002a68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4313      	orrs	r3, r2
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f023 0307 	bic.w	r3, r3, #7
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d117      	bne.n	8002ac2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fb01 	bl	80030ac <DMA_CheckFifoParam>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2240      	movs	r2, #64	; 0x40
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e016      	b.n	8002af0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fab8 	bl	8003040 <DMA_CalcBaseAndBitshift>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	223f      	movs	r2, #63	; 0x3f
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	f010803f 	.word	0xf010803f

08002afc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_DMA_Start_IT+0x26>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e040      	b.n	8002ba4 <HAL_DMA_Start_IT+0xa8>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d12f      	bne.n	8002b96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fa4a 	bl	8002fe4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	223f      	movs	r2, #63	; 0x3f
 8002b56:	409a      	lsls	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0216 	orr.w	r2, r2, #22
 8002b6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0208 	orr.w	r2, r2, #8
 8002b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e005      	b.n	8002ba2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bba:	f7ff f913 	bl	8001de4 <HAL_GetTick>
 8002bbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d008      	beq.n	8002bde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2280      	movs	r2, #128	; 0x80
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e052      	b.n	8002c84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0216 	bic.w	r2, r2, #22
 8002bec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d103      	bne.n	8002c0e <HAL_DMA_Abort+0x62>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0208 	bic.w	r2, r2, #8
 8002c1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2e:	e013      	b.n	8002c58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c30:	f7ff f8d8 	bl	8001de4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d90c      	bls.n	8002c58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2203      	movs	r2, #3
 8002c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e015      	b.n	8002c84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e4      	bne.n	8002c30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	223f      	movs	r2, #63	; 0x3f
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d004      	beq.n	8002caa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2280      	movs	r2, #128	; 0x80
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00c      	b.n	8002cc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2205      	movs	r2, #5
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cdc:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <HAL_DMA_IRQHandler+0x258>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a92      	ldr	r2, [pc, #584]	; (8002f2c <HAL_DMA_IRQHandler+0x25c>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a9b      	lsrs	r3, r3, #10
 8002ce8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d01a      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d013      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	2208      	movs	r2, #8
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	2201      	movs	r2, #1
 8002d42:	409a      	lsls	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d012      	beq.n	8002d72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	2201      	movs	r2, #1
 8002d60:	409a      	lsls	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f043 0202 	orr.w	r2, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	2204      	movs	r2, #4
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00b      	beq.n	8002da8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	2204      	movs	r2, #4
 8002d96:	409a      	lsls	r2, r3
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f043 0204 	orr.w	r2, r3, #4
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	2210      	movs	r2, #16
 8002dae:	409a      	lsls	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d043      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d03c      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	2210      	movs	r2, #16
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d018      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d024      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
 8002dfe:	e01f      	b.n	8002e40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01b      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
 8002e10:	e016      	b.n	8002e40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d107      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0208 	bic.w	r2, r2, #8
 8002e2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	2220      	movs	r2, #32
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 808e 	beq.w	8002f6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8086 	beq.w	8002f6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	2220      	movs	r2, #32
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d136      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0216 	bic.w	r2, r2, #22
 8002e88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_DMA_IRQHandler+0x1da>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0208 	bic.w	r2, r2, #8
 8002eb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	223f      	movs	r2, #63	; 0x3f
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d07d      	beq.n	8002fda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
        }
        return;
 8002ee6:	e078      	b.n	8002fda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01c      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d108      	bne.n	8002f16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d030      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
 8002f14:	e02b      	b.n	8002f6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d027      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
 8002f26:	e022      	b.n	8002f6e <HAL_DMA_IRQHandler+0x29e>
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10f      	bne.n	8002f5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0210 	bic.w	r2, r2, #16
 8002f4c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d032      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d022      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2205      	movs	r2, #5
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d307      	bcc.n	8002fb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f2      	bne.n	8002f9a <HAL_DMA_IRQHandler+0x2ca>
 8002fb4:	e000      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002fb6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
 8002fd8:	e000      	b.n	8002fdc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002fda:	bf00      	nop
    }
  }
}
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop

08002fe4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003000:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d108      	bne.n	8003024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003022:	e007      	b.n	8003034 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3b10      	subs	r3, #16
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800305a:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <DMA_CalcBaseAndBitshift+0x68>)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d909      	bls.n	8003082 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	1d1a      	adds	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	659a      	str	r2, [r3, #88]	; 0x58
 8003080:	e007      	b.n	8003092 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800308a:	f023 0303 	bic.w	r3, r3, #3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	aaaaaaab 	.word	0xaaaaaaab
 80030a8:	0800b8c8 	.word	0x0800b8c8

080030ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11f      	bne.n	8003106 <DMA_CheckFifoParam+0x5a>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d856      	bhi.n	800317a <DMA_CheckFifoParam+0xce>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <DMA_CheckFifoParam+0x28>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030f7 	.word	0x080030f7
 80030dc:	080030e5 	.word	0x080030e5
 80030e0:	0800317b 	.word	0x0800317b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d046      	beq.n	800317e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f4:	e043      	b.n	800317e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030fe:	d140      	bne.n	8003182 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003104:	e03d      	b.n	8003182 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310e:	d121      	bne.n	8003154 <DMA_CheckFifoParam+0xa8>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d837      	bhi.n	8003186 <DMA_CheckFifoParam+0xda>
 8003116:	a201      	add	r2, pc, #4	; (adr r2, 800311c <DMA_CheckFifoParam+0x70>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	0800312d 	.word	0x0800312d
 8003120:	08003133 	.word	0x08003133
 8003124:	0800312d 	.word	0x0800312d
 8003128:	08003145 	.word	0x08003145
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
      break;
 8003130:	e030      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d025      	beq.n	800318a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003142:	e022      	b.n	800318a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800314c:	d11f      	bne.n	800318e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003152:	e01c      	b.n	800318e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d903      	bls.n	8003162 <DMA_CheckFifoParam+0xb6>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d003      	beq.n	8003168 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003160:	e018      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
      break;
 8003166:	e015      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00e      	beq.n	8003192 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      break;
 8003178:	e00b      	b.n	8003192 <DMA_CheckFifoParam+0xe6>
      break;
 800317a:	bf00      	nop
 800317c:	e00a      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 800317e:	bf00      	nop
 8003180:	e008      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e006      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
 8003188:	e004      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
 800318c:	e002      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;   
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 8003192:	bf00      	nop
    }
  } 
  
  return status; 
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop

080031a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	; 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	e177      	b.n	80034b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c0:	2201      	movs	r2, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	429a      	cmp	r2, r3
 80031da:	f040 8166 	bne.w	80034aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d005      	beq.n	80031f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d130      	bne.n	8003258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800322c:	2201      	movs	r2, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 0201 	and.w	r2, r3, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b03      	cmp	r3, #3
 8003262:	d017      	beq.n	8003294 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d123      	bne.n	80032e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	08da      	lsrs	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3208      	adds	r2, #8
 80032a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	220f      	movs	r2, #15
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	08da      	lsrs	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3208      	adds	r2, #8
 80032e2:	69b9      	ldr	r1, [r7, #24]
 80032e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	2203      	movs	r2, #3
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0203 	and.w	r2, r3, #3
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80c0 	beq.w	80034aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	4b66      	ldr	r3, [pc, #408]	; (80034c8 <HAL_GPIO_Init+0x324>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	4a65      	ldr	r2, [pc, #404]	; (80034c8 <HAL_GPIO_Init+0x324>)
 8003334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003338:	6453      	str	r3, [r2, #68]	; 0x44
 800333a:	4b63      	ldr	r3, [pc, #396]	; (80034c8 <HAL_GPIO_Init+0x324>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003346:	4a61      	ldr	r2, [pc, #388]	; (80034cc <HAL_GPIO_Init+0x328>)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	220f      	movs	r2, #15
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_GPIO_Init+0x32c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d037      	beq.n	80033e2 <HAL_GPIO_Init+0x23e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a57      	ldr	r2, [pc, #348]	; (80034d4 <HAL_GPIO_Init+0x330>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d031      	beq.n	80033de <HAL_GPIO_Init+0x23a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a56      	ldr	r2, [pc, #344]	; (80034d8 <HAL_GPIO_Init+0x334>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d02b      	beq.n	80033da <HAL_GPIO_Init+0x236>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a55      	ldr	r2, [pc, #340]	; (80034dc <HAL_GPIO_Init+0x338>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d025      	beq.n	80033d6 <HAL_GPIO_Init+0x232>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a54      	ldr	r2, [pc, #336]	; (80034e0 <HAL_GPIO_Init+0x33c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01f      	beq.n	80033d2 <HAL_GPIO_Init+0x22e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a53      	ldr	r2, [pc, #332]	; (80034e4 <HAL_GPIO_Init+0x340>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d019      	beq.n	80033ce <HAL_GPIO_Init+0x22a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <HAL_GPIO_Init+0x344>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d013      	beq.n	80033ca <HAL_GPIO_Init+0x226>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a51      	ldr	r2, [pc, #324]	; (80034ec <HAL_GPIO_Init+0x348>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00d      	beq.n	80033c6 <HAL_GPIO_Init+0x222>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a50      	ldr	r2, [pc, #320]	; (80034f0 <HAL_GPIO_Init+0x34c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d007      	beq.n	80033c2 <HAL_GPIO_Init+0x21e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a4f      	ldr	r2, [pc, #316]	; (80034f4 <HAL_GPIO_Init+0x350>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <HAL_GPIO_Init+0x21a>
 80033ba:	2309      	movs	r3, #9
 80033bc:	e012      	b.n	80033e4 <HAL_GPIO_Init+0x240>
 80033be:	230a      	movs	r3, #10
 80033c0:	e010      	b.n	80033e4 <HAL_GPIO_Init+0x240>
 80033c2:	2308      	movs	r3, #8
 80033c4:	e00e      	b.n	80033e4 <HAL_GPIO_Init+0x240>
 80033c6:	2307      	movs	r3, #7
 80033c8:	e00c      	b.n	80033e4 <HAL_GPIO_Init+0x240>
 80033ca:	2306      	movs	r3, #6
 80033cc:	e00a      	b.n	80033e4 <HAL_GPIO_Init+0x240>
 80033ce:	2305      	movs	r3, #5
 80033d0:	e008      	b.n	80033e4 <HAL_GPIO_Init+0x240>
 80033d2:	2304      	movs	r3, #4
 80033d4:	e006      	b.n	80033e4 <HAL_GPIO_Init+0x240>
 80033d6:	2303      	movs	r3, #3
 80033d8:	e004      	b.n	80033e4 <HAL_GPIO_Init+0x240>
 80033da:	2302      	movs	r3, #2
 80033dc:	e002      	b.n	80033e4 <HAL_GPIO_Init+0x240>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_GPIO_Init+0x240>
 80033e2:	2300      	movs	r3, #0
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	f002 0203 	and.w	r2, r2, #3
 80033ea:	0092      	lsls	r2, r2, #2
 80033ec:	4093      	lsls	r3, r2
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f4:	4935      	ldr	r1, [pc, #212]	; (80034cc <HAL_GPIO_Init+0x328>)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	089b      	lsrs	r3, r3, #2
 80033fa:	3302      	adds	r3, #2
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003402:	4b3d      	ldr	r3, [pc, #244]	; (80034f8 <HAL_GPIO_Init+0x354>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003426:	4a34      	ldr	r2, [pc, #208]	; (80034f8 <HAL_GPIO_Init+0x354>)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800342c:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <HAL_GPIO_Init+0x354>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003450:	4a29      	ldr	r2, [pc, #164]	; (80034f8 <HAL_GPIO_Init+0x354>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003456:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_GPIO_Init+0x354>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347a:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <HAL_GPIO_Init+0x354>)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003480:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <HAL_GPIO_Init+0x354>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a4:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <HAL_GPIO_Init+0x354>)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3301      	adds	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	f67f ae84 	bls.w	80031c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3724      	adds	r7, #36	; 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40013800 	.word	0x40013800
 80034d0:	40020000 	.word	0x40020000
 80034d4:	40020400 	.word	0x40020400
 80034d8:	40020800 	.word	0x40020800
 80034dc:	40020c00 	.word	0x40020c00
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40021400 	.word	0x40021400
 80034e8:	40021800 	.word	0x40021800
 80034ec:	40021c00 	.word	0x40021c00
 80034f0:	40022000 	.word	0x40022000
 80034f4:	40022400 	.word	0x40022400
 80034f8:	40013c00 	.word	0x40013c00

080034fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
 8003508:	4613      	mov	r3, r2
 800350a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800350c:	787b      	ldrb	r3, [r7, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003512:	887a      	ldrh	r2, [r7, #2]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003518:	e003      	b.n	8003522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	041a      	lsls	r2, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	619a      	str	r2, [r3, #24]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f806 	bl	8003560 <HAL_GPIO_EXTI_Callback>
  }
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40013c00 	.word	0x40013c00

08003560 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e12b      	b.n	80037e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd fbbc 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2224      	movs	r2, #36	; 0x24
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035dc:	f001 ff58 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 80035e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4a81      	ldr	r2, [pc, #516]	; (80037ec <HAL_I2C_Init+0x274>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d807      	bhi.n	80035fc <HAL_I2C_Init+0x84>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a80      	ldr	r2, [pc, #512]	; (80037f0 <HAL_I2C_Init+0x278>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	bf94      	ite	ls
 80035f4:	2301      	movls	r3, #1
 80035f6:	2300      	movhi	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	e006      	b.n	800360a <HAL_I2C_Init+0x92>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a7d      	ldr	r2, [pc, #500]	; (80037f4 <HAL_I2C_Init+0x27c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	bf94      	ite	ls
 8003604:	2301      	movls	r3, #1
 8003606:	2300      	movhi	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0e7      	b.n	80037e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a78      	ldr	r2, [pc, #480]	; (80037f8 <HAL_I2C_Init+0x280>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0c9b      	lsrs	r3, r3, #18
 800361c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a6a      	ldr	r2, [pc, #424]	; (80037ec <HAL_I2C_Init+0x274>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d802      	bhi.n	800364c <HAL_I2C_Init+0xd4>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	3301      	adds	r3, #1
 800364a:	e009      	b.n	8003660 <HAL_I2C_Init+0xe8>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	4a69      	ldr	r2, [pc, #420]	; (80037fc <HAL_I2C_Init+0x284>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	3301      	adds	r3, #1
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	430b      	orrs	r3, r1
 8003666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	495c      	ldr	r1, [pc, #368]	; (80037ec <HAL_I2C_Init+0x274>)
 800367c:	428b      	cmp	r3, r1
 800367e:	d819      	bhi.n	80036b4 <HAL_I2C_Init+0x13c>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e59      	subs	r1, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	fbb1 f3f3 	udiv	r3, r1, r3
 800368e:	1c59      	adds	r1, r3, #1
 8003690:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003694:	400b      	ands	r3, r1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_I2C_Init+0x138>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1e59      	subs	r1, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ae:	e051      	b.n	8003754 <HAL_I2C_Init+0x1dc>
 80036b0:	2304      	movs	r3, #4
 80036b2:	e04f      	b.n	8003754 <HAL_I2C_Init+0x1dc>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d111      	bne.n	80036e0 <HAL_I2C_Init+0x168>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1e58      	subs	r0, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6859      	ldr	r1, [r3, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	440b      	add	r3, r1
 80036ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ce:	3301      	adds	r3, #1
 80036d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e012      	b.n	8003706 <HAL_I2C_Init+0x18e>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1e58      	subs	r0, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	0099      	lsls	r1, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_Init+0x196>
 800370a:	2301      	movs	r3, #1
 800370c:	e022      	b.n	8003754 <HAL_I2C_Init+0x1dc>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10e      	bne.n	8003734 <HAL_I2C_Init+0x1bc>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1e58      	subs	r0, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	460b      	mov	r3, r1
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	440b      	add	r3, r1
 8003724:	fbb0 f3f3 	udiv	r3, r0, r3
 8003728:	3301      	adds	r3, #1
 800372a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003732:	e00f      	b.n	8003754 <HAL_I2C_Init+0x1dc>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e58      	subs	r0, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	0099      	lsls	r1, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	fbb0 f3f3 	udiv	r3, r0, r3
 800374a:	3301      	adds	r3, #1
 800374c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	6809      	ldr	r1, [r1, #0]
 8003758:	4313      	orrs	r3, r2
 800375a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6911      	ldr	r1, [r2, #16]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68d2      	ldr	r2, [r2, #12]
 800378e:	4311      	orrs	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	430b      	orrs	r3, r1
 8003796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	000186a0 	.word	0x000186a0
 80037f0:	001e847f 	.word	0x001e847f
 80037f4:	003d08ff 	.word	0x003d08ff
 80037f8:	431bde83 	.word	0x431bde83
 80037fc:	10624dd3 	.word	0x10624dd3

08003800 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b20      	cmp	r3, #32
 8003814:	d129      	bne.n	800386a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2224      	movs	r2, #36	; 0x24
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0210 	bic.w	r2, r2, #16
 800383c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b20      	cmp	r3, #32
 8003890:	d12a      	bne.n	80038e8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2224      	movs	r2, #36	; 0x24
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80038b2:	89fb      	ldrh	r3, [r7, #14]
 80038b4:	f023 030f 	bic.w	r3, r3, #15
 80038b8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	b29a      	uxth	r2, r3
 80038be:	89fb      	ldrh	r3, [r7, #14]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	89fa      	ldrh	r2, [r7, #14]
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f8:	b08f      	sub	sp, #60	; 0x3c
 80038fa:	af0a      	add	r7, sp, #40	; 0x28
 80038fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e10f      	b.n	8003b28 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f007 fb2c 	bl	800af80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2203      	movs	r2, #3
 800392c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f004 fa1f 	bl	8007d8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	687e      	ldr	r6, [r7, #4]
 8003954:	466d      	mov	r5, sp
 8003956:	f106 0410 	add.w	r4, r6, #16
 800395a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800395c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800395e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003962:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003966:	e885 0003 	stmia.w	r5, {r0, r1}
 800396a:	1d33      	adds	r3, r6, #4
 800396c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800396e:	6838      	ldr	r0, [r7, #0]
 8003970:	f004 f8f6 	bl	8007b60 <USB_CoreInit>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e0d0      	b.n	8003b28 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f004 fa0d 	bl	8007dac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	e04a      	b.n	8003a2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	333d      	adds	r3, #61	; 0x3d
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039ac:	7bfa      	ldrb	r2, [r7, #15]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	333c      	adds	r3, #60	; 0x3c
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	b298      	uxth	r0, r3
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	3342      	adds	r3, #66	; 0x42
 80039d4:	4602      	mov	r2, r0
 80039d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	333f      	adds	r3, #63	; 0x3f
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3344      	adds	r3, #68	; 0x44
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3348      	adds	r3, #72	; 0x48
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a14:	7bfa      	ldrb	r2, [r7, #15]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	3350      	adds	r3, #80	; 0x50
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
 8003a2e:	7bfa      	ldrb	r2, [r7, #15]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d3af      	bcc.n	8003998 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	e044      	b.n	8003ac8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a3e:	7bfa      	ldrb	r2, [r7, #15]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a66:	7bfa      	ldrb	r2, [r7, #15]
 8003a68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a96:	7bfa      	ldrb	r2, [r7, #15]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003aac:	7bfa      	ldrb	r2, [r7, #15]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d3b5      	bcc.n	8003a3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	687e      	ldr	r6, [r7, #4]
 8003ada:	466d      	mov	r5, sp
 8003adc:	f106 0410 	add.w	r4, r6, #16
 8003ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ae2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ae8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aec:	e885 0003 	stmia.w	r5, {r0, r1}
 8003af0:	1d33      	adds	r3, r6, #4
 8003af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003af4:	6838      	ldr	r0, [r7, #0]
 8003af6:	f004 f9a5 	bl	8007e44 <USB_DevInit>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e00d      	b.n	8003b28 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f005 fa21 	bl	8008f68 <USB_DevDisconnect>

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_PCD_Start+0x1c>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e020      	b.n	8003b8e <HAL_PCD_Start+0x5e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d109      	bne.n	8003b70 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d005      	beq.n	8003b70 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f004 f8f7 	bl	8007d68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f005 f9d1 	bl	8008f26 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b96:	b590      	push	{r4, r7, lr}
 8003b98:	b08d      	sub	sp, #52	; 0x34
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f005 fa8f 	bl	80090d0 <USB_GetMode>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f040 839d 	bne.w	80042f4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f005 f9f3 	bl	8008faa <USB_ReadInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8393 	beq.w	80042f2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f005 f9ea 	bl	8008faa <USB_ReadInterrupts>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d107      	bne.n	8003bf0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f002 0202 	and.w	r2, r2, #2
 8003bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f005 f9d8 	bl	8008faa <USB_ReadInterrupts>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d161      	bne.n	8003cc8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0210 	bic.w	r2, r2, #16
 8003c12:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	3304      	adds	r3, #4
 8003c32:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	0c5b      	lsrs	r3, r3, #17
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d124      	bne.n	8003c8a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d035      	beq.n	8003cb8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6a38      	ldr	r0, [r7, #32]
 8003c60:	f005 f80f 	bl	8008c82 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c70:	441a      	add	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c82:	441a      	add	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	619a      	str	r2, [r3, #24]
 8003c88:	e016      	b.n	8003cb8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	0c5b      	lsrs	r3, r3, #17
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	2b06      	cmp	r3, #6
 8003c94:	d110      	bne.n	8003cb8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6a38      	ldr	r0, [r7, #32]
 8003ca2:	f004 ffee 	bl	8008c82 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cb2:	441a      	add	r2, r3
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0210 	orr.w	r2, r2, #16
 8003cc6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f005 f96c 	bl	8008faa <USB_ReadInterrupts>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cdc:	d16e      	bne.n	8003dbc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f005 f972 	bl	8008fd0 <USB_ReadDevAllOutEpInterrupt>
 8003cec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003cee:	e062      	b.n	8003db6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d057      	beq.n	8003daa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f005 f997 	bl	8009038 <USB_ReadDevOutEPInterrupt>
 8003d0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d22:	461a      	mov	r2, r3
 8003d24:	2301      	movs	r3, #1
 8003d26:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fdb0 	bl	8004890 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d46:	461a      	mov	r2, r3
 8003d48:	2308      	movs	r3, #8
 8003d4a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 feaa 	bl	8004aa8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d86:	461a      	mov	r2, r3
 8003d88:	2320      	movs	r3, #32
 8003d8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da2:	461a      	mov	r2, r3
 8003da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003da8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	3301      	adds	r3, #1
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d199      	bne.n	8003cf0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f005 f8f2 	bl	8008faa <USB_ReadInterrupts>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dd0:	f040 80c0 	bne.w	8003f54 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f005 f913 	bl	8009004 <USB_ReadDevAllInEpInterrupt>
 8003dde:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003de4:	e0b2      	b.n	8003f4c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a7 	beq.w	8003f40 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f005 f939 	bl	8009074 <USB_ReadDevInEPInterrupt>
 8003e02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d057      	beq.n	8003ebe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	2201      	movs	r2, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	69f9      	ldr	r1, [r7, #28]
 8003e2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e2e:	4013      	ands	r3, r2
 8003e30:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2301      	movs	r3, #1
 8003e42:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d132      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	3348      	adds	r3, #72	; 0x48
 8003e5c:	6819      	ldr	r1, [r3, #0]
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4403      	add	r3, r0
 8003e6c:	3344      	adds	r3, #68	; 0x44
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4419      	add	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4403      	add	r3, r0
 8003e80:	3348      	adds	r3, #72	; 0x48
 8003e82:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d113      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x31c>
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8e:	4613      	mov	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	3350      	adds	r3, #80	; 0x50
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d108      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2101      	movs	r1, #1
 8003eae:	f005 f941 	bl	8009134 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f007 f8e2 	bl	800b082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2310      	movs	r3, #16
 8003ef4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2340      	movs	r3, #64	; 0x40
 8003f10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fc1b 	bl	8004776 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	3301      	adds	r3, #1
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f47f af49 	bne.w	8003de6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f005 f826 	bl	8008faa <USB_ReadInterrupts>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f68:	d122      	bne.n	8003fb0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d108      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f90:	2100      	movs	r1, #0
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fe26 	bl	8004be4 <HAL_PCDEx_LPM_Callback>
 8003f98:	e002      	b.n	8003fa0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f007 f8e8 	bl	800b170 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003fae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f004 fff8 	bl	8008faa <USB_ReadInterrupts>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc4:	d112      	bne.n	8003fec <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d102      	bne.n	8003fdc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f007 f8a4 	bl	800b124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003fea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f004 ffda 	bl	8008faa <USB_ReadInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	f040 80c7 	bne.w	8004192 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2110      	movs	r1, #16
 800401e:	4618      	mov	r0, r3
 8004020:	f004 f874 	bl	800810c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004024:	2300      	movs	r3, #0
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004028:	e056      	b.n	80040d8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004036:	461a      	mov	r2, r3
 8004038:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800403c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800404e:	0151      	lsls	r1, r2, #5
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	440a      	add	r2, r1
 8004054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004058:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800405c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406e:	0151      	lsls	r1, r2, #5
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	440a      	add	r2, r1
 8004074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004078:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800407c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	461a      	mov	r2, r3
 800408c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004090:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a2:	0151      	lsls	r1, r2, #5
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	440a      	add	r2, r1
 80040a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c2:	0151      	lsls	r1, r2, #5
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	440a      	add	r2, r1
 80040c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	3301      	adds	r3, #1
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040de:	429a      	cmp	r2, r3
 80040e0:	d3a3      	bcc.n	800402a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80040f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800410e:	f043 030b 	orr.w	r3, r3, #11
 8004112:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004124:	f043 030b 	orr.w	r3, r3, #11
 8004128:	6453      	str	r3, [r2, #68]	; 0x44
 800412a:	e015      	b.n	8004158 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800413a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800413e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004142:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004152:	f043 030b 	orr.w	r3, r3, #11
 8004156:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004166:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800416a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800417c:	461a      	mov	r2, r3
 800417e:	f004 ffd9 	bl	8009134 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f004 ff07 	bl	8008faa <USB_ReadInterrupts>
 800419c:	4603      	mov	r3, r0
 800419e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a6:	d124      	bne.n	80041f2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f004 ff9d 	bl	80090ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f004 f805 	bl	80081c6 <USB_GetDevSpeed>
 80041bc:	4603      	mov	r3, r0
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681c      	ldr	r4, [r3, #0]
 80041c8:	f001 f956 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 80041cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	4620      	mov	r0, r4
 80041d8:	f003 fd24 	bl	8007c24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f006 ff78 	bl	800b0d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f004 fed7 	bl	8008faa <USB_ReadInterrupts>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b08      	cmp	r3, #8
 8004204:	d10a      	bne.n	800421c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f006 ff55 	bl	800b0b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f002 0208 	and.w	r2, r2, #8
 800421a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f004 fec2 	bl	8008faa <USB_ReadInterrupts>
 8004226:	4603      	mov	r3, r0
 8004228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004230:	d10f      	bne.n	8004252 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	b2db      	uxtb	r3, r3
 800423a:	4619      	mov	r1, r3
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f006 ffb7 	bl	800b1b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004250:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f004 fea7 	bl	8008faa <USB_ReadInterrupts>
 800425c:	4603      	mov	r3, r0
 800425e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004266:	d10f      	bne.n	8004288 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	b2db      	uxtb	r3, r3
 8004270:	4619      	mov	r1, r3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f006 ff8a 	bl	800b18c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004286:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f004 fe8c 	bl	8008faa <USB_ReadInterrupts>
 8004292:	4603      	mov	r3, r0
 8004294:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429c:	d10a      	bne.n	80042b4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f006 ff98 	bl	800b1d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80042b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f004 fe76 	bl	8008faa <USB_ReadInterrupts>
 80042be:	4603      	mov	r3, r0
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d115      	bne.n	80042f4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f006 ff88 	bl	800b1f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6859      	ldr	r1, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]
 80042f0:	e000      	b.n	80042f4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80042f2:	bf00      	nop
    }
  }
}
 80042f4:	3734      	adds	r7, #52	; 0x34
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd90      	pop	{r4, r7, pc}

080042fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	460b      	mov	r3, r1
 8004304:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_PCD_SetAddress+0x1a>
 8004310:	2302      	movs	r3, #2
 8004312:	e013      	b.n	800433c <HAL_PCD_SetAddress+0x42>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f004 fdd4 	bl	8008eda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	4608      	mov	r0, r1
 800434e:	4611      	mov	r1, r2
 8004350:	461a      	mov	r2, r3
 8004352:	4603      	mov	r3, r0
 8004354:	70fb      	strb	r3, [r7, #3]
 8004356:	460b      	mov	r3, r1
 8004358:	803b      	strh	r3, [r7, #0]
 800435a:	4613      	mov	r3, r2
 800435c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004366:	2b00      	cmp	r3, #0
 8004368:	da0f      	bge.n	800438a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	f003 020f 	and.w	r2, r3, #15
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	3338      	adds	r3, #56	; 0x38
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	3304      	adds	r3, #4
 8004380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	705a      	strb	r2, [r3, #1]
 8004388:	e00f      	b.n	80043aa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	f003 020f 	and.w	r2, r3, #15
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	3304      	adds	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043b6:	883a      	ldrh	r2, [r7, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	78ba      	ldrb	r2, [r7, #2]
 80043c0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	785b      	ldrb	r3, [r3, #1]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d004      	beq.n	80043d4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043d4:	78bb      	ldrb	r3, [r7, #2]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d102      	bne.n	80043e0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_PCD_EP_Open+0xaa>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e00e      	b.n	800440c <HAL_PCD_EP_Open+0xc8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68f9      	ldr	r1, [r7, #12]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f003 ff07 	bl	8008210 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800440a:	7afb      	ldrb	r3, [r7, #11]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004424:	2b00      	cmp	r3, #0
 8004426:	da0f      	bge.n	8004448 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	f003 020f 	and.w	r2, r3, #15
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	3338      	adds	r3, #56	; 0x38
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	3304      	adds	r3, #4
 800443e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	705a      	strb	r2, [r3, #1]
 8004446:	e00f      	b.n	8004468 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	f003 020f 	and.w	r2, r3, #15
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	3304      	adds	r3, #4
 8004460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	b2da      	uxtb	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_PCD_EP_Close+0x6e>
 800447e:	2302      	movs	r3, #2
 8004480:	e00e      	b.n	80044a0 <HAL_PCD_EP_Close+0x8c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	4618      	mov	r0, r3
 8004492:	f003 ff45 	bl	8008320 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	460b      	mov	r3, r1
 80044b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044b8:	7afb      	ldrb	r3, [r7, #11]
 80044ba:	f003 020f 	and.w	r2, r3, #15
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	3304      	adds	r3, #4
 80044d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2200      	movs	r2, #0
 80044e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044ea:	7afb      	ldrb	r3, [r7, #11]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d102      	bne.n	8004504 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004504:	7afb      	ldrb	r3, [r7, #11]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	6979      	ldr	r1, [r7, #20]
 800451c:	f004 fa20 	bl	8008960 <USB_EP0StartXfer>
 8004520:	e008      	b.n	8004534 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	f003 ffd2 	bl	80084d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	f003 020f 	and.w	r2, r3, #15
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004560:	681b      	ldr	r3, [r3, #0]
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	460b      	mov	r3, r1
 800457c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800457e:	7afb      	ldrb	r3, [r7, #11]
 8004580:	f003 020f 	and.w	r2, r3, #15
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	3338      	adds	r3, #56	; 0x38
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	3304      	adds	r3, #4
 8004594:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2201      	movs	r2, #1
 80045ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045ae:	7afb      	ldrb	r3, [r7, #11]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d102      	bne.n	80045c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045c8:	7afb      	ldrb	r3, [r7, #11]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	6979      	ldr	r1, [r7, #20]
 80045e0:	f004 f9be 	bl	8008960 <USB_EP0StartXfer>
 80045e4:	e008      	b.n	80045f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	6979      	ldr	r1, [r7, #20]
 80045f4:	f003 ff70 	bl	80084d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	460b      	mov	r3, r1
 800460c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	f003 020f 	and.w	r2, r3, #15
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	d901      	bls.n	8004620 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e050      	b.n	80046c2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004624:	2b00      	cmp	r3, #0
 8004626:	da0f      	bge.n	8004648 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	f003 020f 	and.w	r2, r3, #15
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	1a9b      	subs	r3, r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	3338      	adds	r3, #56	; 0x38
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	4413      	add	r3, r2
 800463c:	3304      	adds	r3, #4
 800463e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	705a      	strb	r2, [r3, #1]
 8004646:	e00d      	b.n	8004664 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004648:	78fa      	ldrb	r2, [r7, #3]
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	3304      	adds	r3, #4
 800465c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800466a:	78fb      	ldrb	r3, [r7, #3]
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_PCD_EP_SetStall+0x82>
 8004680:	2302      	movs	r3, #2
 8004682:	e01e      	b.n	80046c2 <HAL_PCD_EP_SetStall+0xc0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	4618      	mov	r0, r3
 8004694:	f004 fb4d 	bl	8008d32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	b2d9      	uxtb	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046b2:	461a      	mov	r2, r3
 80046b4:	f004 fd3e 	bl	8009134 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	460b      	mov	r3, r1
 80046d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046d6:	78fb      	ldrb	r3, [r7, #3]
 80046d8:	f003 020f 	and.w	r2, r3, #15
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d901      	bls.n	80046e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e042      	b.n	800476e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	da0f      	bge.n	8004710 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	f003 020f 	and.w	r2, r3, #15
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	3338      	adds	r3, #56	; 0x38
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	3304      	adds	r3, #4
 8004706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	705a      	strb	r2, [r3, #1]
 800470e:	e00f      	b.n	8004730 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	f003 020f 	and.w	r2, r3, #15
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	3304      	adds	r3, #4
 8004728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_PCD_EP_ClrStall+0x86>
 800474c:	2302      	movs	r3, #2
 800474e:	e00e      	b.n	800476e <HAL_PCD_EP_ClrStall+0xa4>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	4618      	mov	r0, r3
 8004760:	f004 fb55 	bl	8008e0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b08a      	sub	sp, #40	; 0x28
 800477a:	af02      	add	r7, sp, #8
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	3338      	adds	r3, #56	; 0x38
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	3304      	adds	r3, #4
 800479c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d901      	bls.n	80047ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e06c      	b.n	8004888 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d902      	bls.n	80047ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3303      	adds	r3, #3
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047d2:	e02b      	b.n	800482c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d902      	bls.n	80047f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	3303      	adds	r3, #3
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68d9      	ldr	r1, [r3, #12]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004808:	b2db      	uxtb	r3, r3
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	4603      	mov	r3, r0
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f004 f9f9 	bl	8008c06 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	441a      	add	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	441a      	add	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	b29b      	uxth	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	429a      	cmp	r2, r3
 8004840:	d809      	bhi.n	8004856 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800484a:	429a      	cmp	r2, r3
 800484c:	d203      	bcs.n	8004856 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1be      	bne.n	80047d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	429a      	cmp	r2, r3
 8004860:	d811      	bhi.n	8004886 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	2201      	movs	r2, #1
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	43db      	mvns	r3, r3
 800487c:	6939      	ldr	r1, [r7, #16]
 800487e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004882:	4013      	ands	r3, r2
 8004884:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3720      	adds	r7, #32
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	333c      	adds	r3, #60	; 0x3c
 80048a8:	3304      	adds	r3, #4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	f040 80a0 	bne.w	8004a08 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d015      	beq.n	80048fe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4a72      	ldr	r2, [pc, #456]	; (8004aa0 <PCD_EP_OutXfrComplete_int+0x210>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	f240 80dd 	bls.w	8004a96 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80d7 	beq.w	8004a96 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f4:	461a      	mov	r2, r3
 80048f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fa:	6093      	str	r3, [r2, #8]
 80048fc:	e0cb      	b.n	8004a96 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d009      	beq.n	800491c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004914:	461a      	mov	r2, r3
 8004916:	2320      	movs	r3, #32
 8004918:	6093      	str	r3, [r2, #8]
 800491a:	e0bc      	b.n	8004a96 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 80b7 	bne.w	8004a96 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a5d      	ldr	r2, [pc, #372]	; (8004aa0 <PCD_EP_OutXfrComplete_int+0x210>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d90f      	bls.n	8004950 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004946:	461a      	mov	r2, r3
 8004948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494c:	6093      	str	r3, [r2, #8]
 800494e:	e0a2      	b.n	8004a96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004962:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	0159      	lsls	r1, r3, #5
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	440b      	add	r3, r1
 800496c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004976:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4403      	add	r3, r0
 8004986:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800498a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800499e:	6819      	ldr	r1, [r3, #0]
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	4613      	mov	r3, r2
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	1a9b      	subs	r3, r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4403      	add	r3, r0
 80049ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4419      	add	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	4613      	mov	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4403      	add	r3, r0
 80049c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049c8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d114      	bne.n	80049fa <PCD_EP_OutXfrComplete_int+0x16a>
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d108      	bne.n	80049fa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049f2:	461a      	mov	r2, r3
 80049f4:	2101      	movs	r1, #1
 80049f6:	f004 fb9d 	bl	8009134 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	4619      	mov	r1, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f006 fb23 	bl	800b04c <HAL_PCD_DataOutStageCallback>
 8004a06:	e046      	b.n	8004a96 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <PCD_EP_OutXfrComplete_int+0x214>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d124      	bne.n	8004a5a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a26:	461a      	mov	r2, r3
 8004a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2c:	6093      	str	r3, [r2, #8]
 8004a2e:	e032      	b.n	8004a96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a46:	461a      	mov	r2, r3
 8004a48:	2320      	movs	r3, #32
 8004a4a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f006 fafa 	bl	800b04c <HAL_PCD_DataOutStageCallback>
 8004a58:	e01d      	b.n	8004a96 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d114      	bne.n	8004a8a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d108      	bne.n	8004a8a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a82:	461a      	mov	r2, r3
 8004a84:	2100      	movs	r1, #0
 8004a86:	f004 fb55 	bl	8009134 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f006 fadb 	bl	800b04c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	4f54300a 	.word	0x4f54300a
 8004aa4:	4f54310a 	.word	0x4f54310a

08004aa8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	333c      	adds	r3, #60	; 0x3c
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d90e      	bls.n	8004afc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d009      	beq.n	8004afc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	461a      	mov	r2, r3
 8004af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f006 fa93 	bl	800b028 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a0a      	ldr	r2, [pc, #40]	; (8004b30 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d90c      	bls.n	8004b24 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d108      	bne.n	8004b24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2101      	movs	r1, #1
 8004b20:	f004 fb08 	bl	8009134 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	4f54300a 	.word	0x4f54300a

08004b34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
 8004b40:	4613      	mov	r3, r2
 8004b42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d107      	bne.n	8004b62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b52:	883b      	ldrh	r3, [r7, #0]
 8004b54:	0419      	lsls	r1, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b60:	e028      	b.n	8004bb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b70:	2300      	movs	r3, #0
 8004b72:	73fb      	strb	r3, [r7, #15]
 8004b74:	e00d      	b.n	8004b92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	3340      	adds	r3, #64	; 0x40
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	0c1b      	lsrs	r3, r3, #16
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	4413      	add	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	7bfa      	ldrb	r2, [r7, #15]
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d3ec      	bcc.n	8004b76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b9c:	883b      	ldrh	r3, [r7, #0]
 8004b9e:	0418      	lsls	r0, r3, #16
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	4302      	orrs	r2, r0
 8004bac:	3340      	adds	r3, #64	; 0x40
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e264      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d075      	beq.n	8004d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c1a:	4ba3      	ldr	r3, [pc, #652]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d00c      	beq.n	8004c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c26:	4ba0      	ldr	r3, [pc, #640]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d112      	bne.n	8004c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c32:	4b9d      	ldr	r3, [pc, #628]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3e:	d10b      	bne.n	8004c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	4b99      	ldr	r3, [pc, #612]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d05b      	beq.n	8004d04 <HAL_RCC_OscConfig+0x108>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d157      	bne.n	8004d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e23f      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c60:	d106      	bne.n	8004c70 <HAL_RCC_OscConfig+0x74>
 8004c62:	4b91      	ldr	r3, [pc, #580]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a90      	ldr	r2, [pc, #576]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e01d      	b.n	8004cac <HAL_RCC_OscConfig+0xb0>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x98>
 8004c7a:	4b8b      	ldr	r3, [pc, #556]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a8a      	ldr	r2, [pc, #552]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b88      	ldr	r3, [pc, #544]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a87      	ldr	r2, [pc, #540]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e00b      	b.n	8004cac <HAL_RCC_OscConfig+0xb0>
 8004c94:	4b84      	ldr	r3, [pc, #528]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a83      	ldr	r2, [pc, #524]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	4b81      	ldr	r3, [pc, #516]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a80      	ldr	r2, [pc, #512]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fd f896 	bl	8001de4 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fd f892 	bl	8001de4 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e204      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cce:	4b76      	ldr	r3, [pc, #472]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0xc0>
 8004cda:	e014      	b.n	8004d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fd f882 	bl	8001de4 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ce4:	f7fd f87e 	bl	8001de4 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e1f0      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf6:	4b6c      	ldr	r3, [pc, #432]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0xe8>
 8004d02:	e000      	b.n	8004d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d063      	beq.n	8004dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d12:	4b65      	ldr	r3, [pc, #404]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1e:	4b62      	ldr	r3, [pc, #392]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d11c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d116      	bne.n	8004d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d36:	4b5c      	ldr	r3, [pc, #368]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_RCC_OscConfig+0x152>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d001      	beq.n	8004d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e1c4      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4e:	4b56      	ldr	r3, [pc, #344]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4952      	ldr	r1, [pc, #328]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d62:	e03a      	b.n	8004dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d020      	beq.n	8004dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d6c:	4b4f      	ldr	r3, [pc, #316]	; (8004eac <HAL_RCC_OscConfig+0x2b0>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d72:	f7fd f837 	bl	8001de4 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d7a:	f7fd f833 	bl	8001de4 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e1a5      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8c:	4b46      	ldr	r3, [pc, #280]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d98:	4b43      	ldr	r3, [pc, #268]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	4940      	ldr	r1, [pc, #256]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	600b      	str	r3, [r1, #0]
 8004dac:	e015      	b.n	8004dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dae:	4b3f      	ldr	r3, [pc, #252]	; (8004eac <HAL_RCC_OscConfig+0x2b0>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fd f816 	bl	8001de4 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dbc:	f7fd f812 	bl	8001de4 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e184      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dce:	4b36      	ldr	r3, [pc, #216]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d030      	beq.n	8004e48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d016      	beq.n	8004e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dee:	4b30      	ldr	r3, [pc, #192]	; (8004eb0 <HAL_RCC_OscConfig+0x2b4>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df4:	f7fc fff6 	bl	8001de4 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dfc:	f7fc fff2 	bl	8001de4 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e164      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0e:	4b26      	ldr	r3, [pc, #152]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x200>
 8004e1a:	e015      	b.n	8004e48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e1c:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <HAL_RCC_OscConfig+0x2b4>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fc ffdf 	bl	8001de4 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2a:	f7fc ffdb 	bl	8001de4 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e14d      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1f0      	bne.n	8004e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80a0 	beq.w	8004f96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5a:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10f      	bne.n	8004e86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e74:	6413      	str	r3, [r2, #64]	; 0x40
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_OscConfig+0x2b8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d121      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e92:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <HAL_RCC_OscConfig+0x2b8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a07      	ldr	r2, [pc, #28]	; (8004eb4 <HAL_RCC_OscConfig+0x2b8>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9e:	f7fc ffa1 	bl	8001de4 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea4:	e011      	b.n	8004eca <HAL_RCC_OscConfig+0x2ce>
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	42470000 	.word	0x42470000
 8004eb0:	42470e80 	.word	0x42470e80
 8004eb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb8:	f7fc ff94 	bl	8001de4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e106      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eca:	4b85      	ldr	r3, [pc, #532]	; (80050e0 <HAL_RCC_OscConfig+0x4e4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d106      	bne.n	8004eec <HAL_RCC_OscConfig+0x2f0>
 8004ede:	4b81      	ldr	r3, [pc, #516]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	4a80      	ldr	r2, [pc, #512]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eea:	e01c      	b.n	8004f26 <HAL_RCC_OscConfig+0x32a>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b05      	cmp	r3, #5
 8004ef2:	d10c      	bne.n	8004f0e <HAL_RCC_OscConfig+0x312>
 8004ef4:	4b7b      	ldr	r3, [pc, #492]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef8:	4a7a      	ldr	r2, [pc, #488]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004efa:	f043 0304 	orr.w	r3, r3, #4
 8004efe:	6713      	str	r3, [r2, #112]	; 0x70
 8004f00:	4b78      	ldr	r3, [pc, #480]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	4a77      	ldr	r2, [pc, #476]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f0c:	e00b      	b.n	8004f26 <HAL_RCC_OscConfig+0x32a>
 8004f0e:	4b75      	ldr	r3, [pc, #468]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	4a74      	ldr	r2, [pc, #464]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1a:	4b72      	ldr	r3, [pc, #456]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	4a71      	ldr	r2, [pc, #452]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004f20:	f023 0304 	bic.w	r3, r3, #4
 8004f24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d015      	beq.n	8004f5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2e:	f7fc ff59 	bl	8001de4 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f34:	e00a      	b.n	8004f4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f36:	f7fc ff55 	bl	8001de4 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e0c5      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4c:	4b65      	ldr	r3, [pc, #404]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0ee      	beq.n	8004f36 <HAL_RCC_OscConfig+0x33a>
 8004f58:	e014      	b.n	8004f84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5a:	f7fc ff43 	bl	8001de4 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f62:	f7fc ff3f 	bl	8001de4 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e0af      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f78:	4b5a      	ldr	r3, [pc, #360]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1ee      	bne.n	8004f62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d105      	bne.n	8004f96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8a:	4b56      	ldr	r3, [pc, #344]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	4a55      	ldr	r2, [pc, #340]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 809b 	beq.w	80050d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa0:	4b50      	ldr	r3, [pc, #320]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 030c 	and.w	r3, r3, #12
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d05c      	beq.n	8005066 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d141      	bne.n	8005038 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb4:	4b4c      	ldr	r3, [pc, #304]	; (80050e8 <HAL_RCC_OscConfig+0x4ec>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fba:	f7fc ff13 	bl	8001de4 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc2:	f7fc ff0f 	bl	8001de4 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e081      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd4:	4b43      	ldr	r3, [pc, #268]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1f0      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	019b      	lsls	r3, r3, #6
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	085b      	lsrs	r3, r3, #1
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	041b      	lsls	r3, r3, #16
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	061b      	lsls	r3, r3, #24
 8005004:	4937      	ldr	r1, [pc, #220]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800500a:	4b37      	ldr	r3, [pc, #220]	; (80050e8 <HAL_RCC_OscConfig+0x4ec>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005010:	f7fc fee8 	bl	8001de4 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005018:	f7fc fee4 	bl	8001de4 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e056      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800502a:	4b2e      	ldr	r3, [pc, #184]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x41c>
 8005036:	e04e      	b.n	80050d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005038:	4b2b      	ldr	r3, [pc, #172]	; (80050e8 <HAL_RCC_OscConfig+0x4ec>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503e:	f7fc fed1 	bl	8001de4 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005046:	f7fc fecd 	bl	8001de4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e03f      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005058:	4b22      	ldr	r3, [pc, #136]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f0      	bne.n	8005046 <HAL_RCC_OscConfig+0x44a>
 8005064:	e037      	b.n	80050d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e032      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005072:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <HAL_RCC_OscConfig+0x4e8>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d028      	beq.n	80050d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508a:	429a      	cmp	r2, r3
 800508c:	d121      	bne.n	80050d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d11a      	bne.n	80050d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050a2:	4013      	ands	r3, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d111      	bne.n	80050d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	3b01      	subs	r3, #1
 80050bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050be:	429a      	cmp	r2, r3
 80050c0:	d107      	bne.n	80050d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d001      	beq.n	80050d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40007000 	.word	0x40007000
 80050e4:	40023800 	.word	0x40023800
 80050e8:	42470060 	.word	0x42470060

080050ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0cc      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005100:	4b68      	ldr	r3, [pc, #416]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d90c      	bls.n	8005128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510e:	4b65      	ldr	r3, [pc, #404]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005116:	4b63      	ldr	r3, [pc, #396]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d001      	beq.n	8005128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0b8      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d020      	beq.n	8005176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005140:	4b59      	ldr	r3, [pc, #356]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a58      	ldr	r2, [pc, #352]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800514a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005158:	4b53      	ldr	r3, [pc, #332]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4a52      	ldr	r2, [pc, #328]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005164:	4b50      	ldr	r3, [pc, #320]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	494d      	ldr	r1, [pc, #308]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d044      	beq.n	800520c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d107      	bne.n	800519a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518a:	4b47      	ldr	r3, [pc, #284]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d119      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e07f      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d003      	beq.n	80051aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051aa:	4b3f      	ldr	r3, [pc, #252]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e06f      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ba:	4b3b      	ldr	r3, [pc, #236]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e067      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ca:	4b37      	ldr	r3, [pc, #220]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f023 0203 	bic.w	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4934      	ldr	r1, [pc, #208]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051dc:	f7fc fe02 	bl	8001de4 <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e4:	f7fc fdfe 	bl	8001de4 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e04f      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fa:	4b2b      	ldr	r3, [pc, #172]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 020c 	and.w	r2, r3, #12
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	429a      	cmp	r2, r3
 800520a:	d1eb      	bne.n	80051e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800520c:	4b25      	ldr	r3, [pc, #148]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d20c      	bcs.n	8005234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b20      	ldr	r3, [pc, #128]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e032      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005240:	4b19      	ldr	r3, [pc, #100]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4916      	ldr	r1, [pc, #88]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800525e:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	490e      	ldr	r1, [pc, #56]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005272:	f000 f821 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 8005276:	4602      	mov	r2, r0
 8005278:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	490a      	ldr	r1, [pc, #40]	; (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005284:	5ccb      	ldrb	r3, [r1, r3]
 8005286:	fa22 f303 	lsr.w	r3, r2, r3
 800528a:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fc fd62 	bl	8001d5c <HAL_InitTick>

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40023c00 	.word	0x40023c00
 80052a8:	40023800 	.word	0x40023800
 80052ac:	0800b8b0 	.word	0x0800b8b0
 80052b0:	20000000 	.word	0x20000000
 80052b4:	20000008 	.word	0x20000008

080052b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	2300      	movs	r3, #0
 80052ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052d0:	4b67      	ldr	r3, [pc, #412]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d00d      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x40>
 80052dc:	2b08      	cmp	r3, #8
 80052de:	f200 80bd 	bhi.w	800545c <HAL_RCC_GetSysClockFreq+0x1a4>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_RCC_GetSysClockFreq+0x34>
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d003      	beq.n	80052f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052ea:	e0b7      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052ec:	4b61      	ldr	r3, [pc, #388]	; (8005474 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052ee:	60bb      	str	r3, [r7, #8]
       break;
 80052f0:	e0b7      	b.n	8005462 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052f2:	4b60      	ldr	r3, [pc, #384]	; (8005474 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052f4:	60bb      	str	r3, [r7, #8]
      break;
 80052f6:	e0b4      	b.n	8005462 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052f8:	4b5d      	ldr	r3, [pc, #372]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005300:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005302:	4b5b      	ldr	r3, [pc, #364]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d04d      	beq.n	80053aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800530e:	4b58      	ldr	r3, [pc, #352]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	099b      	lsrs	r3, r3, #6
 8005314:	461a      	mov	r2, r3
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	ea02 0800 	and.w	r8, r2, r0
 8005326:	ea03 0901 	and.w	r9, r3, r1
 800532a:	4640      	mov	r0, r8
 800532c:	4649      	mov	r1, r9
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	014b      	lsls	r3, r1, #5
 8005338:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800533c:	0142      	lsls	r2, r0, #5
 800533e:	4610      	mov	r0, r2
 8005340:	4619      	mov	r1, r3
 8005342:	ebb0 0008 	subs.w	r0, r0, r8
 8005346:	eb61 0109 	sbc.w	r1, r1, r9
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	f04f 0300 	mov.w	r3, #0
 8005352:	018b      	lsls	r3, r1, #6
 8005354:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005358:	0182      	lsls	r2, r0, #6
 800535a:	1a12      	subs	r2, r2, r0
 800535c:	eb63 0301 	sbc.w	r3, r3, r1
 8005360:	f04f 0000 	mov.w	r0, #0
 8005364:	f04f 0100 	mov.w	r1, #0
 8005368:	00d9      	lsls	r1, r3, #3
 800536a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800536e:	00d0      	lsls	r0, r2, #3
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	eb12 0208 	adds.w	r2, r2, r8
 8005378:	eb43 0309 	adc.w	r3, r3, r9
 800537c:	f04f 0000 	mov.w	r0, #0
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	0299      	lsls	r1, r3, #10
 8005386:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800538a:	0290      	lsls	r0, r2, #10
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	461a      	mov	r2, r3
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	f7fa ff2e 	bl	80001fc <__aeabi_uldivmod>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4613      	mov	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e04a      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053aa:	4b31      	ldr	r3, [pc, #196]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	099b      	lsrs	r3, r3, #6
 80053b0:	461a      	mov	r2, r3
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053ba:	f04f 0100 	mov.w	r1, #0
 80053be:	ea02 0400 	and.w	r4, r2, r0
 80053c2:	ea03 0501 	and.w	r5, r3, r1
 80053c6:	4620      	mov	r0, r4
 80053c8:	4629      	mov	r1, r5
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	014b      	lsls	r3, r1, #5
 80053d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053d8:	0142      	lsls	r2, r0, #5
 80053da:	4610      	mov	r0, r2
 80053dc:	4619      	mov	r1, r3
 80053de:	1b00      	subs	r0, r0, r4
 80053e0:	eb61 0105 	sbc.w	r1, r1, r5
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	018b      	lsls	r3, r1, #6
 80053ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053f2:	0182      	lsls	r2, r0, #6
 80053f4:	1a12      	subs	r2, r2, r0
 80053f6:	eb63 0301 	sbc.w	r3, r3, r1
 80053fa:	f04f 0000 	mov.w	r0, #0
 80053fe:	f04f 0100 	mov.w	r1, #0
 8005402:	00d9      	lsls	r1, r3, #3
 8005404:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005408:	00d0      	lsls	r0, r2, #3
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	1912      	adds	r2, r2, r4
 8005410:	eb45 0303 	adc.w	r3, r5, r3
 8005414:	f04f 0000 	mov.w	r0, #0
 8005418:	f04f 0100 	mov.w	r1, #0
 800541c:	0299      	lsls	r1, r3, #10
 800541e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005422:	0290      	lsls	r0, r2, #10
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4610      	mov	r0, r2
 800542a:	4619      	mov	r1, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	461a      	mov	r2, r3
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	f7fa fee2 	bl	80001fc <__aeabi_uldivmod>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4613      	mov	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	3301      	adds	r3, #1
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	fbb2 f3f3 	udiv	r3, r2, r3
 8005458:	60bb      	str	r3, [r7, #8]
      break;
 800545a:	e002      	b.n	8005462 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800545e:	60bb      	str	r3, [r7, #8]
      break;
 8005460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005462:	68bb      	ldr	r3, [r7, #8]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800546e:	bf00      	nop
 8005470:	40023800 	.word	0x40023800
 8005474:	00f42400 	.word	0x00f42400

08005478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800547c:	4b03      	ldr	r3, [pc, #12]	; (800548c <HAL_RCC_GetHCLKFreq+0x14>)
 800547e:	681b      	ldr	r3, [r3, #0]
}
 8005480:	4618      	mov	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000000 	.word	0x20000000

08005490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005494:	f7ff fff0 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	0a9b      	lsrs	r3, r3, #10
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	4903      	ldr	r1, [pc, #12]	; (80054b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40023800 	.word	0x40023800
 80054b4:	0800b8c0 	.word	0x0800b8c0

080054b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054bc:	f7ff ffdc 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	0b5b      	lsrs	r3, r3, #13
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	4903      	ldr	r1, [pc, #12]	; (80054dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ce:	5ccb      	ldrb	r3, [r1, r3]
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40023800 	.word	0x40023800
 80054dc:	0800b8c0 	.word	0x0800b8c0

080054e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e07b      	b.n	80055ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d108      	bne.n	800550c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005502:	d009      	beq.n	8005518 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	61da      	str	r2, [r3, #28]
 800550a:	e005      	b.n	8005518 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fb fc72 	bl	8000e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800554e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559c:	ea42 0103 	orr.w	r1, r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	f003 0104 	and.w	r1, r3, #4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	f003 0210 	and.w	r2, r3, #16
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e041      	b.n	8005688 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d106      	bne.n	800561e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7fc f875 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3304      	adds	r3, #4
 800562e:	4619      	mov	r1, r3
 8005630:	4610      	mov	r0, r2
 8005632:	f000 fc3f 	bl	8005eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e041      	b.n	8005726 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f839 	bl	800572e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f000 fbf0 	bl	8005eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e041      	b.n	80057d8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f839 	bl	80057e0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3304      	adds	r3, #4
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f000 fb97 	bl	8005eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b02      	cmp	r3, #2
 8005808:	d122      	bne.n	8005850 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b02      	cmp	r3, #2
 8005816:	d11b      	bne.n	8005850 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0202 	mvn.w	r2, #2
 8005820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fb1d 	bl	8005e76 <HAL_TIM_IC_CaptureCallback>
 800583c:	e005      	b.n	800584a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fb0f 	bl	8005e62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fb20 	bl	8005e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b04      	cmp	r3, #4
 800585c:	d122      	bne.n	80058a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b04      	cmp	r3, #4
 800586a:	d11b      	bne.n	80058a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0204 	mvn.w	r2, #4
 8005874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 faf3 	bl	8005e76 <HAL_TIM_IC_CaptureCallback>
 8005890:	e005      	b.n	800589e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fae5 	bl	8005e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 faf6 	bl	8005e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d122      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d11b      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0208 	mvn.w	r2, #8
 80058c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2204      	movs	r2, #4
 80058ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fac9 	bl	8005e76 <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fabb 	bl	8005e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 facc 	bl	8005e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0310 	and.w	r3, r3, #16
 8005902:	2b10      	cmp	r3, #16
 8005904:	d122      	bne.n	800594c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b10      	cmp	r3, #16
 8005912:	d11b      	bne.n	800594c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0210 	mvn.w	r2, #16
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2208      	movs	r2, #8
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fa9f 	bl	8005e76 <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa91 	bl	8005e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 faa2 	bl	8005e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b01      	cmp	r3, #1
 8005958:	d10e      	bne.n	8005978 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b01      	cmp	r3, #1
 8005966:	d107      	bne.n	8005978 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0201 	mvn.w	r2, #1
 8005970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fa6b 	bl	8005e4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	2b80      	cmp	r3, #128	; 0x80
 8005984:	d10e      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005990:	2b80      	cmp	r3, #128	; 0x80
 8005992:	d107      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800599c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 ff74 	bl	800688c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ae:	2b40      	cmp	r3, #64	; 0x40
 80059b0:	d10e      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d107      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa67 	bl	8005e9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d10e      	bne.n	80059fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d107      	bne.n	80059fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0220 	mvn.w	r2, #32
 80059f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 ff3e 	bl	8006878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e088      	b.n	8005b34 <HAL_TIM_IC_ConfigChannel+0x130>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d11b      	bne.n	8005a68 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6819      	ldr	r1, [r3, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f000 fc88 	bl	8006354 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 020c 	bic.w	r2, r2, #12
 8005a52:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6999      	ldr	r1, [r3, #24]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	619a      	str	r2, [r3, #24]
 8005a66:	e060      	b.n	8005b2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d11c      	bne.n	8005aa8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6819      	ldr	r1, [r3, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f000 fd0c 	bl	800649a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a90:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6999      	ldr	r1, [r3, #24]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	021a      	lsls	r2, r3, #8
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	619a      	str	r2, [r3, #24]
 8005aa6:	e040      	b.n	8005b2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d11b      	bne.n	8005ae6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f000 fd59 	bl	8006574 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 020c 	bic.w	r2, r2, #12
 8005ad0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69d9      	ldr	r1, [r3, #28]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	61da      	str	r2, [r3, #28]
 8005ae4:	e021      	b.n	8005b2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b0c      	cmp	r3, #12
 8005aea:	d11c      	bne.n	8005b26 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f000 fd76 	bl	80065ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b0e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69d9      	ldr	r1, [r3, #28]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	021a      	lsls	r2, r3, #8
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	61da      	str	r2, [r3, #28]
 8005b24:	e001      	b.n	8005b2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e0ae      	b.n	8005cb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b0c      	cmp	r3, #12
 8005b66:	f200 809f 	bhi.w	8005ca8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005ba5 	.word	0x08005ba5
 8005b74:	08005ca9 	.word	0x08005ca9
 8005b78:	08005ca9 	.word	0x08005ca9
 8005b7c:	08005ca9 	.word	0x08005ca9
 8005b80:	08005be5 	.word	0x08005be5
 8005b84:	08005ca9 	.word	0x08005ca9
 8005b88:	08005ca9 	.word	0x08005ca9
 8005b8c:	08005ca9 	.word	0x08005ca9
 8005b90:	08005c27 	.word	0x08005c27
 8005b94:	08005ca9 	.word	0x08005ca9
 8005b98:	08005ca9 	.word	0x08005ca9
 8005b9c:	08005ca9 	.word	0x08005ca9
 8005ba0:	08005c67 	.word	0x08005c67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fa22 	bl	8005ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0208 	orr.w	r2, r2, #8
 8005bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0204 	bic.w	r2, r2, #4
 8005bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6999      	ldr	r1, [r3, #24]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	619a      	str	r2, [r3, #24]
      break;
 8005be2:	e064      	b.n	8005cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fa72 	bl	80060d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6999      	ldr	r1, [r3, #24]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	021a      	lsls	r2, r3, #8
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	619a      	str	r2, [r3, #24]
      break;
 8005c24:	e043      	b.n	8005cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fac7 	bl	80061c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0208 	orr.w	r2, r2, #8
 8005c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69da      	ldr	r2, [r3, #28]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0204 	bic.w	r2, r2, #4
 8005c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69d9      	ldr	r1, [r3, #28]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	61da      	str	r2, [r3, #28]
      break;
 8005c64:	e023      	b.n	8005cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fb1b 	bl	80062a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69da      	ldr	r2, [r3, #28]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69d9      	ldr	r1, [r3, #28]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	021a      	lsls	r2, r3, #8
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	61da      	str	r2, [r3, #28]
      break;
 8005ca6:	e002      	b.n	8005cae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	75fb      	strb	r3, [r7, #23]
      break;
 8005cac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_ConfigClockSource+0x1c>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e0b4      	b.n	8005e46 <HAL_TIM_ConfigClockSource+0x186>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d14:	d03e      	beq.n	8005d94 <HAL_TIM_ConfigClockSource+0xd4>
 8005d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d1a:	f200 8087 	bhi.w	8005e2c <HAL_TIM_ConfigClockSource+0x16c>
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d22:	f000 8086 	beq.w	8005e32 <HAL_TIM_ConfigClockSource+0x172>
 8005d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2a:	d87f      	bhi.n	8005e2c <HAL_TIM_ConfigClockSource+0x16c>
 8005d2c:	2b70      	cmp	r3, #112	; 0x70
 8005d2e:	d01a      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0xa6>
 8005d30:	2b70      	cmp	r3, #112	; 0x70
 8005d32:	d87b      	bhi.n	8005e2c <HAL_TIM_ConfigClockSource+0x16c>
 8005d34:	2b60      	cmp	r3, #96	; 0x60
 8005d36:	d050      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x11a>
 8005d38:	2b60      	cmp	r3, #96	; 0x60
 8005d3a:	d877      	bhi.n	8005e2c <HAL_TIM_ConfigClockSource+0x16c>
 8005d3c:	2b50      	cmp	r3, #80	; 0x50
 8005d3e:	d03c      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0xfa>
 8005d40:	2b50      	cmp	r3, #80	; 0x50
 8005d42:	d873      	bhi.n	8005e2c <HAL_TIM_ConfigClockSource+0x16c>
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d058      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0x13a>
 8005d48:	2b40      	cmp	r3, #64	; 0x40
 8005d4a:	d86f      	bhi.n	8005e2c <HAL_TIM_ConfigClockSource+0x16c>
 8005d4c:	2b30      	cmp	r3, #48	; 0x30
 8005d4e:	d064      	beq.n	8005e1a <HAL_TIM_ConfigClockSource+0x15a>
 8005d50:	2b30      	cmp	r3, #48	; 0x30
 8005d52:	d86b      	bhi.n	8005e2c <HAL_TIM_ConfigClockSource+0x16c>
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d060      	beq.n	8005e1a <HAL_TIM_ConfigClockSource+0x15a>
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d867      	bhi.n	8005e2c <HAL_TIM_ConfigClockSource+0x16c>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d05c      	beq.n	8005e1a <HAL_TIM_ConfigClockSource+0x15a>
 8005d60:	2b10      	cmp	r3, #16
 8005d62:	d05a      	beq.n	8005e1a <HAL_TIM_ConfigClockSource+0x15a>
 8005d64:	e062      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6899      	ldr	r1, [r3, #8]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f000 fc91 	bl	800669c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	609a      	str	r2, [r3, #8]
      break;
 8005d92:	e04f      	b.n	8005e34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	6899      	ldr	r1, [r3, #8]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f000 fc7a 	bl	800669c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005db6:	609a      	str	r2, [r3, #8]
      break;
 8005db8:	e03c      	b.n	8005e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6859      	ldr	r1, [r3, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f000 fb38 	bl	800643c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2150      	movs	r1, #80	; 0x50
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fc47 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005dd8:	e02c      	b.n	8005e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6859      	ldr	r1, [r3, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f000 fb94 	bl	8006514 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2160      	movs	r1, #96	; 0x60
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fc37 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005df8:	e01c      	b.n	8005e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	6859      	ldr	r1, [r3, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f000 fb18 	bl	800643c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2140      	movs	r1, #64	; 0x40
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fc27 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005e18:	e00c      	b.n	8005e34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f000 fc1e 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005e2a:	e003      	b.n	8005e34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e30:	e000      	b.n	8005e34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a40      	ldr	r2, [pc, #256]	; (8005fc8 <TIM_Base_SetConfig+0x114>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d013      	beq.n	8005ef4 <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed2:	d00f      	beq.n	8005ef4 <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a3d      	ldr	r2, [pc, #244]	; (8005fcc <TIM_Base_SetConfig+0x118>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00b      	beq.n	8005ef4 <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a3c      	ldr	r2, [pc, #240]	; (8005fd0 <TIM_Base_SetConfig+0x11c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d007      	beq.n	8005ef4 <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a3b      	ldr	r2, [pc, #236]	; (8005fd4 <TIM_Base_SetConfig+0x120>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a3a      	ldr	r2, [pc, #232]	; (8005fd8 <TIM_Base_SetConfig+0x124>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d108      	bne.n	8005f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2f      	ldr	r2, [pc, #188]	; (8005fc8 <TIM_Base_SetConfig+0x114>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d02b      	beq.n	8005f66 <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f14:	d027      	beq.n	8005f66 <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2c      	ldr	r2, [pc, #176]	; (8005fcc <TIM_Base_SetConfig+0x118>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d023      	beq.n	8005f66 <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a2b      	ldr	r2, [pc, #172]	; (8005fd0 <TIM_Base_SetConfig+0x11c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01f      	beq.n	8005f66 <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a2a      	ldr	r2, [pc, #168]	; (8005fd4 <TIM_Base_SetConfig+0x120>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d01b      	beq.n	8005f66 <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a29      	ldr	r2, [pc, #164]	; (8005fd8 <TIM_Base_SetConfig+0x124>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d017      	beq.n	8005f66 <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a28      	ldr	r2, [pc, #160]	; (8005fdc <TIM_Base_SetConfig+0x128>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d013      	beq.n	8005f66 <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a27      	ldr	r2, [pc, #156]	; (8005fe0 <TIM_Base_SetConfig+0x12c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00f      	beq.n	8005f66 <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a26      	ldr	r2, [pc, #152]	; (8005fe4 <TIM_Base_SetConfig+0x130>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00b      	beq.n	8005f66 <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a25      	ldr	r2, [pc, #148]	; (8005fe8 <TIM_Base_SetConfig+0x134>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d007      	beq.n	8005f66 <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a24      	ldr	r2, [pc, #144]	; (8005fec <TIM_Base_SetConfig+0x138>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a23      	ldr	r2, [pc, #140]	; (8005ff0 <TIM_Base_SetConfig+0x13c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d108      	bne.n	8005f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <TIM_Base_SetConfig+0x114>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_Base_SetConfig+0xf8>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a0c      	ldr	r2, [pc, #48]	; (8005fd8 <TIM_Base_SetConfig+0x124>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d103      	bne.n	8005fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	615a      	str	r2, [r3, #20]
}
 8005fba:	bf00      	nop
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40000400 	.word	0x40000400
 8005fd0:	40000800 	.word	0x40000800
 8005fd4:	40000c00 	.word	0x40000c00
 8005fd8:	40010400 	.word	0x40010400
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40014400 	.word	0x40014400
 8005fe4:	40014800 	.word	0x40014800
 8005fe8:	40001800 	.word	0x40001800
 8005fec:	40001c00 	.word	0x40001c00
 8005ff0:	40002000 	.word	0x40002000

08005ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f023 0201 	bic.w	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f023 0302 	bic.w	r3, r3, #2
 800603c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a20      	ldr	r2, [pc, #128]	; (80060cc <TIM_OC1_SetConfig+0xd8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC1_SetConfig+0x64>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a1f      	ldr	r2, [pc, #124]	; (80060d0 <TIM_OC1_SetConfig+0xdc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d10c      	bne.n	8006072 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f023 0308 	bic.w	r3, r3, #8
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f023 0304 	bic.w	r3, r3, #4
 8006070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a15      	ldr	r2, [pc, #84]	; (80060cc <TIM_OC1_SetConfig+0xd8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_OC1_SetConfig+0x8e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <TIM_OC1_SetConfig+0xdc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d111      	bne.n	80060a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	621a      	str	r2, [r3, #32]
}
 80060c0:	bf00      	nop
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	40010000 	.word	0x40010000
 80060d0:	40010400 	.word	0x40010400

080060d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0210 	bic.w	r2, r3, #16
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	021b      	lsls	r3, r3, #8
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 0320 	bic.w	r3, r3, #32
 800611e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a22      	ldr	r2, [pc, #136]	; (80061b8 <TIM_OC2_SetConfig+0xe4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_OC2_SetConfig+0x68>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a21      	ldr	r2, [pc, #132]	; (80061bc <TIM_OC2_SetConfig+0xe8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d10d      	bne.n	8006158 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <TIM_OC2_SetConfig+0xe4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d003      	beq.n	8006168 <TIM_OC2_SetConfig+0x94>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a16      	ldr	r2, [pc, #88]	; (80061bc <TIM_OC2_SetConfig+0xe8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d113      	bne.n	8006190 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800616e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40010400 	.word	0x40010400

080061c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0303 	bic.w	r3, r3, #3
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a21      	ldr	r2, [pc, #132]	; (80062a0 <TIM_OC3_SetConfig+0xe0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d003      	beq.n	8006226 <TIM_OC3_SetConfig+0x66>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a20      	ldr	r2, [pc, #128]	; (80062a4 <TIM_OC3_SetConfig+0xe4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d10d      	bne.n	8006242 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800622c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <TIM_OC3_SetConfig+0xe0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d003      	beq.n	8006252 <TIM_OC3_SetConfig+0x92>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <TIM_OC3_SetConfig+0xe4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d113      	bne.n	800627a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	621a      	str	r2, [r3, #32]
}
 8006294:	bf00      	nop
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	40010000 	.word	0x40010000
 80062a4:	40010400 	.word	0x40010400

080062a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	031b      	lsls	r3, r3, #12
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a12      	ldr	r2, [pc, #72]	; (800634c <TIM_OC4_SetConfig+0xa4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_OC4_SetConfig+0x68>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a11      	ldr	r2, [pc, #68]	; (8006350 <TIM_OC4_SetConfig+0xa8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d109      	bne.n	8006324 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	019b      	lsls	r3, r3, #6
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	621a      	str	r2, [r3, #32]
}
 800633e:	bf00      	nop
 8006340:	371c      	adds	r7, #28
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400

08006354 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f023 0201 	bic.w	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4a28      	ldr	r2, [pc, #160]	; (8006420 <TIM_TI1_SetConfig+0xcc>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d01b      	beq.n	80063ba <TIM_TI1_SetConfig+0x66>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006388:	d017      	beq.n	80063ba <TIM_TI1_SetConfig+0x66>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4a25      	ldr	r2, [pc, #148]	; (8006424 <TIM_TI1_SetConfig+0xd0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <TIM_TI1_SetConfig+0x66>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4a24      	ldr	r2, [pc, #144]	; (8006428 <TIM_TI1_SetConfig+0xd4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00f      	beq.n	80063ba <TIM_TI1_SetConfig+0x66>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a23      	ldr	r2, [pc, #140]	; (800642c <TIM_TI1_SetConfig+0xd8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00b      	beq.n	80063ba <TIM_TI1_SetConfig+0x66>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a22      	ldr	r2, [pc, #136]	; (8006430 <TIM_TI1_SetConfig+0xdc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d007      	beq.n	80063ba <TIM_TI1_SetConfig+0x66>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a21      	ldr	r2, [pc, #132]	; (8006434 <TIM_TI1_SetConfig+0xe0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d003      	beq.n	80063ba <TIM_TI1_SetConfig+0x66>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a20      	ldr	r2, [pc, #128]	; (8006438 <TIM_TI1_SetConfig+0xe4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d101      	bne.n	80063be <TIM_TI1_SetConfig+0x6a>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <TIM_TI1_SetConfig+0x6c>
 80063be:	2300      	movs	r3, #0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d008      	beq.n	80063d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f023 0303 	bic.w	r3, r3, #3
 80063ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	e003      	b.n	80063de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f023 030a 	bic.w	r3, r3, #10
 80063f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f003 030a 	and.w	r3, r3, #10
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40010000 	.word	0x40010000
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40000c00 	.word	0x40000c00
 8006430:	40010400 	.word	0x40010400
 8006434:	40014000 	.word	0x40014000
 8006438:	40001800 	.word	0x40001800

0800643c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f023 0201 	bic.w	r2, r3, #1
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f023 030a 	bic.w	r3, r3, #10
 8006478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4313      	orrs	r3, r2
 8006480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	621a      	str	r2, [r3, #32]
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800649a:	b480      	push	{r7}
 800649c:	b087      	sub	sp, #28
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	607a      	str	r2, [r7, #4]
 80064a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	f023 0210 	bic.w	r2, r3, #16
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	021b      	lsls	r3, r3, #8
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	031b      	lsls	r3, r3, #12
 80064de:	b29b      	uxth	r3, r3
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	621a      	str	r2, [r3, #32]
}
 8006508:	bf00      	nop
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f023 0210 	bic.w	r2, r3, #16
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800653e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	031b      	lsls	r3, r3, #12
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006550:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	621a      	str	r2, [r3, #32]
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f023 0303 	bic.w	r3, r3, #3
 80065a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80065c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	021b      	lsls	r3, r3, #8
 80065ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	621a      	str	r2, [r3, #32]
}
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006618:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800662a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	031b      	lsls	r3, r3, #12
 8006630:	b29b      	uxth	r3, r3
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800663e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	031b      	lsls	r3, r3, #12
 8006644:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	f043 0307 	orr.w	r3, r3, #7
 8006688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	609a      	str	r2, [r3, #8]
}
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
 80066a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	021a      	lsls	r2, r3, #8
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	431a      	orrs	r2, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	609a      	str	r2, [r3, #8]
}
 80066d0:	bf00      	nop
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e05a      	b.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a21      	ldr	r2, [pc, #132]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d022      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006740:	d01d      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1d      	ldr	r2, [pc, #116]	; (80067bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d018      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a1b      	ldr	r2, [pc, #108]	; (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d013      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a1a      	ldr	r2, [pc, #104]	; (80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d00e      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a18      	ldr	r2, [pc, #96]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d009      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a17      	ldr	r2, [pc, #92]	; (80067cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d004      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a15      	ldr	r2, [pc, #84]	; (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d10c      	bne.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	4313      	orrs	r3, r2
 800678e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800
 80067c4:	40000c00 	.word	0x40000c00
 80067c8:	40010400 	.word	0x40010400
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40001800 	.word	0x40001800

080067d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e03d      	b.n	800686c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e03f      	b.n	8006932 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fb f8a4 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2224      	movs	r2, #36	; 0x24
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 ff73 	bl	80077d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	695a      	ldr	r2, [r3, #20]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08c      	sub	sp, #48	; 0x30
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b20      	cmp	r3, #32
 8006954:	d165      	bne.n	8006a22 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <HAL_UART_Transmit_DMA+0x26>
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e05e      	b.n	8006a24 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_UART_Transmit_DMA+0x38>
 8006970:	2302      	movs	r3, #2
 8006972:	e057      	b.n	8006a24 <HAL_UART_Transmit_DMA+0xe8>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	88fa      	ldrh	r2, [r7, #6]
 8006986:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	88fa      	ldrh	r2, [r7, #6]
 800698c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2221      	movs	r2, #33	; 0x21
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a0:	4a22      	ldr	r2, [pc, #136]	; (8006a2c <HAL_UART_Transmit_DMA+0xf0>)
 80069a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a8:	4a21      	ldr	r2, [pc, #132]	; (8006a30 <HAL_UART_Transmit_DMA+0xf4>)
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b0:	4a20      	ldr	r2, [pc, #128]	; (8006a34 <HAL_UART_Transmit_DMA+0xf8>)
 80069b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b8:	2200      	movs	r2, #0
 80069ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80069bc:	f107 0308 	add.w	r3, r7, #8
 80069c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	6819      	ldr	r1, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3304      	adds	r3, #4
 80069d0:	461a      	mov	r2, r3
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	f7fc f892 	bl	8002afc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069e0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3314      	adds	r3, #20
 80069f0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	617b      	str	r3, [r7, #20]
   return(result);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3314      	adds	r3, #20
 8006a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a0a:	627a      	str	r2, [r7, #36]	; 0x24
 8006a0c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6a39      	ldr	r1, [r7, #32]
 8006a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e5      	bne.n	80069ea <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e000      	b.n	8006a24 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006a22:	2302      	movs	r3, #2
  }
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3730      	adds	r7, #48	; 0x30
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	08007071 	.word	0x08007071
 8006a30:	0800710b 	.word	0x0800710b
 8006a34:	08007283 	.word	0x08007283

08006a38 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08c      	sub	sp, #48	; 0x30
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d152      	bne.n	8006af8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e04b      	b.n	8006afa <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e044      	b.n	8006afa <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	461a      	mov	r2, r3
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fc47 	bl	8007318 <UART_Start_Receive_DMA>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d12c      	bne.n	8006af2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d125      	bne.n	8006aec <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	330c      	adds	r3, #12
 8006abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f043 0310 	orr.w	r3, r3, #16
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	330c      	adds	r3, #12
 8006ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6a39      	ldr	r1, [r7, #32]
 8006adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e5      	bne.n	8006ab6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006aea:	e002      	b.n	8006af2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006af6:	e000      	b.n	8006afa <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006af8:	2302      	movs	r3, #2
  }
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3730      	adds	r7, #48	; 0x30
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b0ba      	sub	sp, #232	; 0xe8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10f      	bne.n	8006b6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <HAL_UART_IRQHandler+0x66>
 8006b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fd79 	bl	800765a <UART_Receive_IT>
      return;
 8006b68:	e256      	b.n	8007018 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80de 	beq.w	8006d30 <HAL_UART_IRQHandler+0x22c>
 8006b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 80d1 	beq.w	8006d30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00b      	beq.n	8006bb2 <HAL_UART_IRQHandler+0xae>
 8006b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d005      	beq.n	8006bb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	f043 0201 	orr.w	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <HAL_UART_IRQHandler+0xd2>
 8006bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	f043 0202 	orr.w	r2, r3, #2
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <HAL_UART_IRQHandler+0xf6>
 8006be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f043 0204 	orr.w	r2, r3, #4
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d011      	beq.n	8006c2a <HAL_UART_IRQHandler+0x126>
 8006c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d105      	bne.n	8006c1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	f043 0208 	orr.w	r2, r3, #8
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 81ed 	beq.w	800700e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d008      	beq.n	8006c52 <HAL_UART_IRQHandler+0x14e>
 8006c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fd04 	bl	800765a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	bf0c      	ite	eq
 8006c60:	2301      	moveq	r3, #1
 8006c62:	2300      	movne	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d103      	bne.n	8006c7e <HAL_UART_IRQHandler+0x17a>
 8006c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d04f      	beq.n	8006d1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fc0c 	bl	800749c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8e:	2b40      	cmp	r3, #64	; 0x40
 8006c90:	d141      	bne.n	8006d16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3314      	adds	r3, #20
 8006c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3314      	adds	r3, #20
 8006cba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1d9      	bne.n	8006c92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d013      	beq.n	8006d0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	4a7d      	ldr	r2, [pc, #500]	; (8006ee0 <HAL_UART_IRQHandler+0x3dc>)
 8006cec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fb ffca 	bl	8002c8c <HAL_DMA_Abort_IT>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d016      	beq.n	8006d2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0c:	e00e      	b.n	8006d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f9a4 	bl	800705c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d14:	e00a      	b.n	8006d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f9a0 	bl	800705c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d1c:	e006      	b.n	8006d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f99c 	bl	800705c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d2a:	e170      	b.n	800700e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	bf00      	nop
    return;
 8006d2e:	e16e      	b.n	800700e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	f040 814a 	bne.w	8006fce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 8143 	beq.w	8006fce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4c:	f003 0310 	and.w	r3, r3, #16
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 813c 	beq.w	8006fce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60bb      	str	r3, [r7, #8]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	60bb      	str	r3, [r7, #8]
 8006d6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	f040 80b4 	bne.w	8006ee4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8140 	beq.w	8007012 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	f080 8139 	bcs.w	8007012 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006da6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db2:	f000 8088 	beq.w	8006ec6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	330c      	adds	r3, #12
 8006dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	330c      	adds	r3, #12
 8006dde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006de2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1d9      	bne.n	8006db6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3314      	adds	r3, #20
 8006e08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e14:	f023 0301 	bic.w	r3, r3, #1
 8006e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3314      	adds	r3, #20
 8006e22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e1      	bne.n	8006e02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3314      	adds	r3, #20
 8006e44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3314      	adds	r3, #20
 8006e5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e3      	bne.n	8006e3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e96:	f023 0310 	bic.w	r3, r3, #16
 8006e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	330c      	adds	r3, #12
 8006ea4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ea8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006eaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006eae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e3      	bne.n	8006e84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fb fe73 	bl	8002bac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fa f9e2 	bl	80012a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006edc:	e099      	b.n	8007012 <HAL_UART_IRQHandler+0x50e>
 8006ede:	bf00      	nop
 8006ee0:	08007563 	.word	0x08007563
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 808b 	beq.w	8007016 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8086 	beq.w	8007016 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f2e:	647a      	str	r2, [r7, #68]	; 0x44
 8006f30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e3      	bne.n	8006f0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3314      	adds	r3, #20
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	623b      	str	r3, [r7, #32]
   return(result);
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	f023 0301 	bic.w	r3, r3, #1
 8006f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3314      	adds	r3, #20
 8006f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f66:	633a      	str	r2, [r7, #48]	; 0x30
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e3      	bne.n	8006f42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	330c      	adds	r3, #12
 8006f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0310 	bic.w	r3, r3, #16
 8006f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	330c      	adds	r3, #12
 8006fa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006fac:	61fa      	str	r2, [r7, #28]
 8006fae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	69b9      	ldr	r1, [r7, #24]
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e3      	bne.n	8006f88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7fa f96a 	bl	80012a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fcc:	e023      	b.n	8007016 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <HAL_UART_IRQHandler+0x4ea>
 8006fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 facf 	bl	800758a <UART_Transmit_IT>
    return;
 8006fec:	e014      	b.n	8007018 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00e      	beq.n	8007018 <HAL_UART_IRQHandler+0x514>
 8006ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d008      	beq.n	8007018 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fb0f 	bl	800762a <UART_EndTransmit_IT>
    return;
 800700c:	e004      	b.n	8007018 <HAL_UART_IRQHandler+0x514>
    return;
 800700e:	bf00      	nop
 8007010:	e002      	b.n	8007018 <HAL_UART_IRQHandler+0x514>
      return;
 8007012:	bf00      	nop
 8007014:	e000      	b.n	8007018 <HAL_UART_IRQHandler+0x514>
      return;
 8007016:	bf00      	nop
  }
}
 8007018:	37e8      	adds	r7, #232	; 0xe8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b090      	sub	sp, #64	; 0x40
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	2b00      	cmp	r3, #0
 800708a:	d137      	bne.n	80070fc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800708c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708e:	2200      	movs	r2, #0
 8007090:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3314      	adds	r3, #20
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	623b      	str	r3, [r7, #32]
   return(result);
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80070aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3314      	adds	r3, #20
 80070b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070b2:	633a      	str	r2, [r7, #48]	; 0x30
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e5      	bne.n	8007092 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	330c      	adds	r3, #12
 80070cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070dc:	637b      	str	r3, [r7, #52]	; 0x34
 80070de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	330c      	adds	r3, #12
 80070e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070e6:	61fa      	str	r2, [r7, #28]
 80070e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	69b9      	ldr	r1, [r7, #24]
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	617b      	str	r3, [r7, #20]
   return(result);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e5      	bne.n	80070c6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070fa:	e002      	b.n	8007102 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80070fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80070fe:	f7fa f8ad 	bl	800125c <HAL_UART_TxCpltCallback>
}
 8007102:	bf00      	nop
 8007104:	3740      	adds	r7, #64	; 0x40
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff ff81 	bl	8007020 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b09c      	sub	sp, #112	; 0x70
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007132:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713e:	2b00      	cmp	r3, #0
 8007140:	d172      	bne.n	8007228 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007144:	2200      	movs	r2, #0
 8007146:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800715e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007168:	65ba      	str	r2, [r7, #88]	; 0x58
 800716a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800716e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e5      	bne.n	8007148 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3314      	adds	r3, #20
 8007182:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800718c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	667b      	str	r3, [r7, #100]	; 0x64
 8007194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3314      	adds	r3, #20
 800719a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800719c:	647a      	str	r2, [r7, #68]	; 0x44
 800719e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e5      	bne.n	800717c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3314      	adds	r3, #20
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	e853 3f00 	ldrex	r3, [r3]
 80071be:	623b      	str	r3, [r7, #32]
   return(result);
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c6:	663b      	str	r3, [r7, #96]	; 0x60
 80071c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3314      	adds	r3, #20
 80071ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071d0:	633a      	str	r2, [r7, #48]	; 0x30
 80071d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e5      	bne.n	80071b0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d119      	bne.n	8007228 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	330c      	adds	r3, #12
 80071fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	60fb      	str	r3, [r7, #12]
   return(result);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0310 	bic.w	r3, r3, #16
 800720a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800720c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	330c      	adds	r3, #12
 8007212:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007214:	61fa      	str	r2, [r7, #28]
 8007216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	69b9      	ldr	r1, [r7, #24]
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	e841 2300 	strex	r3, r2, [r1]
 8007220:	617b      	str	r3, [r7, #20]
   return(result);
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e5      	bne.n	80071f4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722c:	2b01      	cmp	r3, #1
 800722e:	d106      	bne.n	800723e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007232:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007234:	4619      	mov	r1, r3
 8007236:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007238:	f7fa f832 	bl	80012a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800723c:	e002      	b.n	8007244 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800723e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007240:	f7ff fef8 	bl	8007034 <HAL_UART_RxCpltCallback>
}
 8007244:	bf00      	nop
 8007246:	3770      	adds	r7, #112	; 0x70
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	2b01      	cmp	r3, #1
 8007260:	d108      	bne.n	8007274 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007266:	085b      	lsrs	r3, r3, #1
 8007268:	b29b      	uxth	r3, r3
 800726a:	4619      	mov	r1, r3
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7fa f817 	bl	80012a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007272:	e002      	b.n	800727a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7ff fee7 	bl	8007048 <HAL_UART_RxHalfCpltCallback>
}
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729e:	2b80      	cmp	r3, #128	; 0x80
 80072a0:	bf0c      	ite	eq
 80072a2:	2301      	moveq	r3, #1
 80072a4:	2300      	movne	r3, #0
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b21      	cmp	r3, #33	; 0x21
 80072b4:	d108      	bne.n	80072c8 <UART_DMAError+0x46>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80072c2:	68b8      	ldr	r0, [r7, #8]
 80072c4:	f000 f8c2 	bl	800744c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d2:	2b40      	cmp	r3, #64	; 0x40
 80072d4:	bf0c      	ite	eq
 80072d6:	2301      	moveq	r3, #1
 80072d8:	2300      	movne	r3, #0
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b22      	cmp	r3, #34	; 0x22
 80072e8:	d108      	bne.n	80072fc <UART_DMAError+0x7a>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2200      	movs	r2, #0
 80072f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80072f6:	68b8      	ldr	r0, [r7, #8]
 80072f8:	f000 f8d0 	bl	800749c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	f043 0210 	orr.w	r2, r3, #16
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007308:	68b8      	ldr	r0, [r7, #8]
 800730a:	f7ff fea7 	bl	800705c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b098      	sub	sp, #96	; 0x60
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4613      	mov	r3, r2
 8007324:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	88fa      	ldrh	r2, [r7, #6]
 8007330:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2222      	movs	r2, #34	; 0x22
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	4a3e      	ldr	r2, [pc, #248]	; (8007440 <UART_Start_Receive_DMA+0x128>)
 8007346:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	4a3d      	ldr	r2, [pc, #244]	; (8007444 <UART_Start_Receive_DMA+0x12c>)
 800734e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	4a3c      	ldr	r2, [pc, #240]	; (8007448 <UART_Start_Receive_DMA+0x130>)
 8007356:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	2200      	movs	r2, #0
 800735e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007360:	f107 0308 	add.w	r3, r7, #8
 8007364:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3304      	adds	r3, #4
 8007370:	4619      	mov	r1, r3
 8007372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	f7fb fbc0 	bl	8002afc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800737c:	2300      	movs	r3, #0
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	613b      	str	r3, [r7, #16]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	613b      	str	r3, [r7, #16]
 8007390:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	330c      	adds	r3, #12
 80073a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	330c      	adds	r3, #12
 80073b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80073bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80073c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80073c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e5      	bne.n	800739a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3314      	adds	r3, #20
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	f043 0301 	orr.w	r3, r3, #1
 80073e4:	657b      	str	r3, [r7, #84]	; 0x54
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3314      	adds	r3, #20
 80073ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e5      	bne.n	80073ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3314      	adds	r3, #20
 8007408:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	617b      	str	r3, [r7, #20]
   return(result);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007418:	653b      	str	r3, [r7, #80]	; 0x50
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3314      	adds	r3, #20
 8007420:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007422:	627a      	str	r2, [r7, #36]	; 0x24
 8007424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6a39      	ldr	r1, [r7, #32]
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e5      	bne.n	8007402 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3760      	adds	r7, #96	; 0x60
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	08007127 	.word	0x08007127
 8007444:	0800724d 	.word	0x0800724d
 8007448:	08007283 	.word	0x08007283

0800744c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b089      	sub	sp, #36	; 0x24
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	60bb      	str	r3, [r7, #8]
   return(result);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800746a:	61fb      	str	r3, [r7, #28]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	61ba      	str	r2, [r7, #24]
 8007476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6979      	ldr	r1, [r7, #20]
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	613b      	str	r3, [r7, #16]
   return(result);
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e5      	bne.n	8007454 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007490:	bf00      	nop
 8007492:	3724      	adds	r7, #36	; 0x24
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800749c:	b480      	push	{r7}
 800749e:	b095      	sub	sp, #84	; 0x54
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	330c      	adds	r3, #12
 80074aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	330c      	adds	r3, #12
 80074c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074c4:	643a      	str	r2, [r7, #64]	; 0x40
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e5      	bne.n	80074a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3314      	adds	r3, #20
 80074de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f023 0301 	bic.w	r3, r3, #1
 80074ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3314      	adds	r3, #20
 80074f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e5      	bne.n	80074d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007510:	2b01      	cmp	r3, #1
 8007512:	d119      	bne.n	8007548 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	e853 3f00 	ldrex	r3, [r3]
 8007522:	60bb      	str	r3, [r7, #8]
   return(result);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f023 0310 	bic.w	r3, r3, #16
 800752a:	647b      	str	r3, [r7, #68]	; 0x44
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	330c      	adds	r3, #12
 8007532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007534:	61ba      	str	r2, [r7, #24]
 8007536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	6979      	ldr	r1, [r7, #20]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	e841 2300 	strex	r3, r2, [r1]
 8007540:	613b      	str	r3, [r7, #16]
   return(result);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e5      	bne.n	8007514 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007556:	bf00      	nop
 8007558:	3754      	adds	r7, #84	; 0x54
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f7ff fd6d 	bl	800705c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800758a:	b480      	push	{r7}
 800758c:	b085      	sub	sp, #20
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b21      	cmp	r3, #33	; 0x21
 800759c:	d13e      	bne.n	800761c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a6:	d114      	bne.n	80075d2 <UART_Transmit_IT+0x48>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d110      	bne.n	80075d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	1c9a      	adds	r2, r3, #2
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	621a      	str	r2, [r3, #32]
 80075d0:	e008      	b.n	80075e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	1c59      	adds	r1, r3, #1
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	6211      	str	r1, [r2, #32]
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	4619      	mov	r1, r3
 80075f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10f      	bne.n	8007618 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007606:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007616:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e000      	b.n	800761e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800761c:	2302      	movs	r3, #2
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007640:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7f9 fe06 	bl	800125c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b08c      	sub	sp, #48	; 0x30
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b22      	cmp	r3, #34	; 0x22
 800766c:	f040 80ab 	bne.w	80077c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007678:	d117      	bne.n	80076aa <UART_Receive_IT+0x50>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d113      	bne.n	80076aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	b29b      	uxth	r3, r3
 8007694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007698:	b29a      	uxth	r2, r3
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	1c9a      	adds	r2, r3, #2
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	629a      	str	r2, [r3, #40]	; 0x28
 80076a8:	e026      	b.n	80076f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80076b0:	2300      	movs	r3, #0
 80076b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076bc:	d007      	beq.n	80076ce <UART_Receive_IT+0x74>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10a      	bne.n	80076dc <UART_Receive_IT+0x82>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	e008      	b.n	80076ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29b      	uxth	r3, r3
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	4619      	mov	r1, r3
 8007706:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007708:	2b00      	cmp	r3, #0
 800770a:	d15a      	bne.n	80077c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0220 	bic.w	r2, r2, #32
 800771a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800772a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695a      	ldr	r2, [r3, #20]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0201 	bic.w	r2, r2, #1
 800773a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2220      	movs	r2, #32
 8007740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	2b01      	cmp	r3, #1
 800774a:	d135      	bne.n	80077b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	613b      	str	r3, [r7, #16]
   return(result);
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f023 0310 	bic.w	r3, r3, #16
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	330c      	adds	r3, #12
 8007770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007772:	623a      	str	r2, [r7, #32]
 8007774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	69f9      	ldr	r1, [r7, #28]
 8007778:	6a3a      	ldr	r2, [r7, #32]
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e5      	bne.n	8007752 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0310 	and.w	r3, r3, #16
 8007790:	2b10      	cmp	r3, #16
 8007792:	d10a      	bne.n	80077aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7f9 fd75 	bl	80012a0 <HAL_UARTEx_RxEventCallback>
 80077b6:	e002      	b.n	80077be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff fc3b 	bl	8007034 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e002      	b.n	80077c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e000      	b.n	80077c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80077c6:	2302      	movs	r3, #2
  }
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3730      	adds	r7, #48	; 0x30
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	b09f      	sub	sp, #124	; 0x7c
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e6:	68d9      	ldr	r1, [r3, #12]
 80077e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	ea40 0301 	orr.w	r3, r0, r1
 80077f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	431a      	orrs	r2, r3
 8007802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	4313      	orrs	r3, r2
 8007808:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800780a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007814:	f021 010c 	bic.w	r1, r1, #12
 8007818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800781e:	430b      	orrs	r3, r1
 8007820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800782c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800782e:	6999      	ldr	r1, [r3, #24]
 8007830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	ea40 0301 	orr.w	r3, r0, r1
 8007838:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800783a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4bc5      	ldr	r3, [pc, #788]	; (8007b54 <UART_SetConfig+0x384>)
 8007840:	429a      	cmp	r2, r3
 8007842:	d004      	beq.n	800784e <UART_SetConfig+0x7e>
 8007844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	4bc3      	ldr	r3, [pc, #780]	; (8007b58 <UART_SetConfig+0x388>)
 800784a:	429a      	cmp	r2, r3
 800784c:	d103      	bne.n	8007856 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800784e:	f7fd fe33 	bl	80054b8 <HAL_RCC_GetPCLK2Freq>
 8007852:	6778      	str	r0, [r7, #116]	; 0x74
 8007854:	e002      	b.n	800785c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007856:	f7fd fe1b 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 800785a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800785c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007864:	f040 80b6 	bne.w	80079d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800786a:	461c      	mov	r4, r3
 800786c:	f04f 0500 	mov.w	r5, #0
 8007870:	4622      	mov	r2, r4
 8007872:	462b      	mov	r3, r5
 8007874:	1891      	adds	r1, r2, r2
 8007876:	6439      	str	r1, [r7, #64]	; 0x40
 8007878:	415b      	adcs	r3, r3
 800787a:	647b      	str	r3, [r7, #68]	; 0x44
 800787c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007880:	1912      	adds	r2, r2, r4
 8007882:	eb45 0303 	adc.w	r3, r5, r3
 8007886:	f04f 0000 	mov.w	r0, #0
 800788a:	f04f 0100 	mov.w	r1, #0
 800788e:	00d9      	lsls	r1, r3, #3
 8007890:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007894:	00d0      	lsls	r0, r2, #3
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	1911      	adds	r1, r2, r4
 800789c:	6639      	str	r1, [r7, #96]	; 0x60
 800789e:	416b      	adcs	r3, r5
 80078a0:	667b      	str	r3, [r7, #100]	; 0x64
 80078a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	1891      	adds	r1, r2, r2
 80078ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80078b0:	415b      	adcs	r3, r3
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80078bc:	f7f8 fc9e 	bl	80001fc <__aeabi_uldivmod>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	4ba5      	ldr	r3, [pc, #660]	; (8007b5c <UART_SetConfig+0x38c>)
 80078c6:	fba3 2302 	umull	r2, r3, r3, r2
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	011e      	lsls	r6, r3, #4
 80078ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d0:	461c      	mov	r4, r3
 80078d2:	f04f 0500 	mov.w	r5, #0
 80078d6:	4622      	mov	r2, r4
 80078d8:	462b      	mov	r3, r5
 80078da:	1891      	adds	r1, r2, r2
 80078dc:	6339      	str	r1, [r7, #48]	; 0x30
 80078de:	415b      	adcs	r3, r3
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
 80078e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80078e6:	1912      	adds	r2, r2, r4
 80078e8:	eb45 0303 	adc.w	r3, r5, r3
 80078ec:	f04f 0000 	mov.w	r0, #0
 80078f0:	f04f 0100 	mov.w	r1, #0
 80078f4:	00d9      	lsls	r1, r3, #3
 80078f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078fa:	00d0      	lsls	r0, r2, #3
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	1911      	adds	r1, r2, r4
 8007902:	65b9      	str	r1, [r7, #88]	; 0x58
 8007904:	416b      	adcs	r3, r5
 8007906:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	461a      	mov	r2, r3
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	1891      	adds	r1, r2, r2
 8007914:	62b9      	str	r1, [r7, #40]	; 0x28
 8007916:	415b      	adcs	r3, r3
 8007918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800791a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800791e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007922:	f7f8 fc6b 	bl	80001fc <__aeabi_uldivmod>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4b8c      	ldr	r3, [pc, #560]	; (8007b5c <UART_SetConfig+0x38c>)
 800792c:	fba3 1302 	umull	r1, r3, r3, r2
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	2164      	movs	r1, #100	; 0x64
 8007934:	fb01 f303 	mul.w	r3, r1, r3
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	3332      	adds	r3, #50	; 0x32
 800793e:	4a87      	ldr	r2, [pc, #540]	; (8007b5c <UART_SetConfig+0x38c>)
 8007940:	fba2 2303 	umull	r2, r3, r2, r3
 8007944:	095b      	lsrs	r3, r3, #5
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800794c:	441e      	add	r6, r3
 800794e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007950:	4618      	mov	r0, r3
 8007952:	f04f 0100 	mov.w	r1, #0
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	1894      	adds	r4, r2, r2
 800795c:	623c      	str	r4, [r7, #32]
 800795e:	415b      	adcs	r3, r3
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
 8007962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007966:	1812      	adds	r2, r2, r0
 8007968:	eb41 0303 	adc.w	r3, r1, r3
 800796c:	f04f 0400 	mov.w	r4, #0
 8007970:	f04f 0500 	mov.w	r5, #0
 8007974:	00dd      	lsls	r5, r3, #3
 8007976:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800797a:	00d4      	lsls	r4, r2, #3
 800797c:	4622      	mov	r2, r4
 800797e:	462b      	mov	r3, r5
 8007980:	1814      	adds	r4, r2, r0
 8007982:	653c      	str	r4, [r7, #80]	; 0x50
 8007984:	414b      	adcs	r3, r1
 8007986:	657b      	str	r3, [r7, #84]	; 0x54
 8007988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	461a      	mov	r2, r3
 800798e:	f04f 0300 	mov.w	r3, #0
 8007992:	1891      	adds	r1, r2, r2
 8007994:	61b9      	str	r1, [r7, #24]
 8007996:	415b      	adcs	r3, r3
 8007998:	61fb      	str	r3, [r7, #28]
 800799a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800799e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079a2:	f7f8 fc2b 	bl	80001fc <__aeabi_uldivmod>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4b6c      	ldr	r3, [pc, #432]	; (8007b5c <UART_SetConfig+0x38c>)
 80079ac:	fba3 1302 	umull	r1, r3, r3, r2
 80079b0:	095b      	lsrs	r3, r3, #5
 80079b2:	2164      	movs	r1, #100	; 0x64
 80079b4:	fb01 f303 	mul.w	r3, r1, r3
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	3332      	adds	r3, #50	; 0x32
 80079be:	4a67      	ldr	r2, [pc, #412]	; (8007b5c <UART_SetConfig+0x38c>)
 80079c0:	fba2 2303 	umull	r2, r3, r2, r3
 80079c4:	095b      	lsrs	r3, r3, #5
 80079c6:	f003 0207 	and.w	r2, r3, #7
 80079ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4432      	add	r2, r6
 80079d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079d2:	e0b9      	b.n	8007b48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d6:	461c      	mov	r4, r3
 80079d8:	f04f 0500 	mov.w	r5, #0
 80079dc:	4622      	mov	r2, r4
 80079de:	462b      	mov	r3, r5
 80079e0:	1891      	adds	r1, r2, r2
 80079e2:	6139      	str	r1, [r7, #16]
 80079e4:	415b      	adcs	r3, r3
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079ec:	1912      	adds	r2, r2, r4
 80079ee:	eb45 0303 	adc.w	r3, r5, r3
 80079f2:	f04f 0000 	mov.w	r0, #0
 80079f6:	f04f 0100 	mov.w	r1, #0
 80079fa:	00d9      	lsls	r1, r3, #3
 80079fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a00:	00d0      	lsls	r0, r2, #3
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	eb12 0804 	adds.w	r8, r2, r4
 8007a0a:	eb43 0905 	adc.w	r9, r3, r5
 8007a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f04f 0100 	mov.w	r1, #0
 8007a18:	f04f 0200 	mov.w	r2, #0
 8007a1c:	f04f 0300 	mov.w	r3, #0
 8007a20:	008b      	lsls	r3, r1, #2
 8007a22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a26:	0082      	lsls	r2, r0, #2
 8007a28:	4640      	mov	r0, r8
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	f7f8 fbe6 	bl	80001fc <__aeabi_uldivmod>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4b49      	ldr	r3, [pc, #292]	; (8007b5c <UART_SetConfig+0x38c>)
 8007a36:	fba3 2302 	umull	r2, r3, r3, r2
 8007a3a:	095b      	lsrs	r3, r3, #5
 8007a3c:	011e      	lsls	r6, r3, #4
 8007a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a40:	4618      	mov	r0, r3
 8007a42:	f04f 0100 	mov.w	r1, #0
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	1894      	adds	r4, r2, r2
 8007a4c:	60bc      	str	r4, [r7, #8]
 8007a4e:	415b      	adcs	r3, r3
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a56:	1812      	adds	r2, r2, r0
 8007a58:	eb41 0303 	adc.w	r3, r1, r3
 8007a5c:	f04f 0400 	mov.w	r4, #0
 8007a60:	f04f 0500 	mov.w	r5, #0
 8007a64:	00dd      	lsls	r5, r3, #3
 8007a66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a6a:	00d4      	lsls	r4, r2, #3
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	462b      	mov	r3, r5
 8007a70:	1814      	adds	r4, r2, r0
 8007a72:	64bc      	str	r4, [r7, #72]	; 0x48
 8007a74:	414b      	adcs	r3, r1
 8007a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f04f 0100 	mov.w	r1, #0
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	008b      	lsls	r3, r1, #2
 8007a8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a90:	0082      	lsls	r2, r0, #2
 8007a92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a96:	f7f8 fbb1 	bl	80001fc <__aeabi_uldivmod>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4b2f      	ldr	r3, [pc, #188]	; (8007b5c <UART_SetConfig+0x38c>)
 8007aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	2164      	movs	r1, #100	; 0x64
 8007aa8:	fb01 f303 	mul.w	r3, r1, r3
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	3332      	adds	r3, #50	; 0x32
 8007ab2:	4a2a      	ldr	r2, [pc, #168]	; (8007b5c <UART_SetConfig+0x38c>)
 8007ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007abe:	441e      	add	r6, r3
 8007ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f04f 0100 	mov.w	r1, #0
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	1894      	adds	r4, r2, r2
 8007ace:	603c      	str	r4, [r7, #0]
 8007ad0:	415b      	adcs	r3, r3
 8007ad2:	607b      	str	r3, [r7, #4]
 8007ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad8:	1812      	adds	r2, r2, r0
 8007ada:	eb41 0303 	adc.w	r3, r1, r3
 8007ade:	f04f 0400 	mov.w	r4, #0
 8007ae2:	f04f 0500 	mov.w	r5, #0
 8007ae6:	00dd      	lsls	r5, r3, #3
 8007ae8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007aec:	00d4      	lsls	r4, r2, #3
 8007aee:	4622      	mov	r2, r4
 8007af0:	462b      	mov	r3, r5
 8007af2:	eb12 0a00 	adds.w	sl, r2, r0
 8007af6:	eb43 0b01 	adc.w	fp, r3, r1
 8007afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f04f 0100 	mov.w	r1, #0
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	008b      	lsls	r3, r1, #2
 8007b0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b12:	0082      	lsls	r2, r0, #2
 8007b14:	4650      	mov	r0, sl
 8007b16:	4659      	mov	r1, fp
 8007b18:	f7f8 fb70 	bl	80001fc <__aeabi_uldivmod>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4b0e      	ldr	r3, [pc, #56]	; (8007b5c <UART_SetConfig+0x38c>)
 8007b22:	fba3 1302 	umull	r1, r3, r3, r2
 8007b26:	095b      	lsrs	r3, r3, #5
 8007b28:	2164      	movs	r1, #100	; 0x64
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	3332      	adds	r3, #50	; 0x32
 8007b34:	4a09      	ldr	r2, [pc, #36]	; (8007b5c <UART_SetConfig+0x38c>)
 8007b36:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	f003 020f 	and.w	r2, r3, #15
 8007b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4432      	add	r2, r6
 8007b46:	609a      	str	r2, [r3, #8]
}
 8007b48:	bf00      	nop
 8007b4a:	377c      	adds	r7, #124	; 0x7c
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b52:	bf00      	nop
 8007b54:	40011000 	.word	0x40011000
 8007b58:	40011400 	.word	0x40011400
 8007b5c:	51eb851f 	.word	0x51eb851f

08007b60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b60:	b084      	sub	sp, #16
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	f107 001c 	add.w	r0, r7, #28
 8007b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d122      	bne.n	8007bbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d105      	bne.n	8007bb2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 fb1c 	bl	80091f0 <USB_CoreReset>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73fb      	strb	r3, [r7, #15]
 8007bbc:	e01a      	b.n	8007bf4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f001 fb10 	bl	80091f0 <USB_CoreReset>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d106      	bne.n	8007be8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	639a      	str	r2, [r3, #56]	; 0x38
 8007be6:	e005      	b.n	8007bf4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d10b      	bne.n	8007c12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f043 0206 	orr.w	r2, r3, #6
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f043 0220 	orr.w	r2, r3, #32
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c1e:	b004      	add	sp, #16
 8007c20:	4770      	bx	lr
	...

08007c24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d165      	bne.n	8007d04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4a41      	ldr	r2, [pc, #260]	; (8007d40 <USB_SetTurnaroundTime+0x11c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d906      	bls.n	8007c4e <USB_SetTurnaroundTime+0x2a>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4a40      	ldr	r2, [pc, #256]	; (8007d44 <USB_SetTurnaroundTime+0x120>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d202      	bcs.n	8007c4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c48:	230f      	movs	r3, #15
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e062      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	4a3c      	ldr	r2, [pc, #240]	; (8007d44 <USB_SetTurnaroundTime+0x120>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d306      	bcc.n	8007c64 <USB_SetTurnaroundTime+0x40>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	4a3b      	ldr	r2, [pc, #236]	; (8007d48 <USB_SetTurnaroundTime+0x124>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d202      	bcs.n	8007c64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c5e:	230e      	movs	r3, #14
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e057      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4a38      	ldr	r2, [pc, #224]	; (8007d48 <USB_SetTurnaroundTime+0x124>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d306      	bcc.n	8007c7a <USB_SetTurnaroundTime+0x56>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4a37      	ldr	r2, [pc, #220]	; (8007d4c <USB_SetTurnaroundTime+0x128>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d202      	bcs.n	8007c7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c74:	230d      	movs	r3, #13
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e04c      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	4a33      	ldr	r2, [pc, #204]	; (8007d4c <USB_SetTurnaroundTime+0x128>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d306      	bcc.n	8007c90 <USB_SetTurnaroundTime+0x6c>
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	4a32      	ldr	r2, [pc, #200]	; (8007d50 <USB_SetTurnaroundTime+0x12c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d802      	bhi.n	8007c90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	e041      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4a2f      	ldr	r2, [pc, #188]	; (8007d50 <USB_SetTurnaroundTime+0x12c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d906      	bls.n	8007ca6 <USB_SetTurnaroundTime+0x82>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4a2e      	ldr	r2, [pc, #184]	; (8007d54 <USB_SetTurnaroundTime+0x130>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d802      	bhi.n	8007ca6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ca0:	230b      	movs	r3, #11
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e036      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	4a2a      	ldr	r2, [pc, #168]	; (8007d54 <USB_SetTurnaroundTime+0x130>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d906      	bls.n	8007cbc <USB_SetTurnaroundTime+0x98>
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	4a29      	ldr	r2, [pc, #164]	; (8007d58 <USB_SetTurnaroundTime+0x134>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d802      	bhi.n	8007cbc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007cb6:	230a      	movs	r3, #10
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	e02b      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4a26      	ldr	r2, [pc, #152]	; (8007d58 <USB_SetTurnaroundTime+0x134>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d906      	bls.n	8007cd2 <USB_SetTurnaroundTime+0xae>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4a25      	ldr	r2, [pc, #148]	; (8007d5c <USB_SetTurnaroundTime+0x138>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d202      	bcs.n	8007cd2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ccc:	2309      	movs	r3, #9
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	e020      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	4a21      	ldr	r2, [pc, #132]	; (8007d5c <USB_SetTurnaroundTime+0x138>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d306      	bcc.n	8007ce8 <USB_SetTurnaroundTime+0xc4>
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	4a20      	ldr	r2, [pc, #128]	; (8007d60 <USB_SetTurnaroundTime+0x13c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d802      	bhi.n	8007ce8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	617b      	str	r3, [r7, #20]
 8007ce6:	e015      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4a1d      	ldr	r2, [pc, #116]	; (8007d60 <USB_SetTurnaroundTime+0x13c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d906      	bls.n	8007cfe <USB_SetTurnaroundTime+0xda>
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	4a1c      	ldr	r2, [pc, #112]	; (8007d64 <USB_SetTurnaroundTime+0x140>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d202      	bcs.n	8007cfe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007cf8:	2307      	movs	r3, #7
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	e00a      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007cfe:	2306      	movs	r3, #6
 8007d00:	617b      	str	r3, [r7, #20]
 8007d02:	e007      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d0a:	2309      	movs	r3, #9
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	e001      	b.n	8007d14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d10:	2309      	movs	r3, #9
 8007d12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	029b      	lsls	r3, r3, #10
 8007d28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	371c      	adds	r7, #28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	00d8acbf 	.word	0x00d8acbf
 8007d44:	00e4e1c0 	.word	0x00e4e1c0
 8007d48:	00f42400 	.word	0x00f42400
 8007d4c:	01067380 	.word	0x01067380
 8007d50:	011a499f 	.word	0x011a499f
 8007d54:	01312cff 	.word	0x01312cff
 8007d58:	014ca43f 	.word	0x014ca43f
 8007d5c:	016e3600 	.word	0x016e3600
 8007d60:	01a6ab1f 	.word	0x01a6ab1f
 8007d64:	01e84800 	.word	0x01e84800

08007d68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f043 0201 	orr.w	r2, r3, #1
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f023 0201 	bic.w	r2, r3, #1
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007dc8:	78fb      	ldrb	r3, [r7, #3]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d115      	bne.n	8007dfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dda:	2001      	movs	r0, #1
 8007ddc:	f7fa f80e 	bl	8001dfc <HAL_Delay>
      ms++;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3301      	adds	r3, #1
 8007de4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 f972 	bl	80090d0 <USB_GetMode>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d01e      	beq.n	8007e30 <USB_SetCurrentMode+0x84>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b31      	cmp	r3, #49	; 0x31
 8007df6:	d9f0      	bls.n	8007dda <USB_SetCurrentMode+0x2e>
 8007df8:	e01a      	b.n	8007e30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dfa:	78fb      	ldrb	r3, [r7, #3]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d115      	bne.n	8007e2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	f7f9 fff5 	bl	8001dfc <HAL_Delay>
      ms++;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3301      	adds	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 f959 	bl	80090d0 <USB_GetMode>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d005      	beq.n	8007e30 <USB_SetCurrentMode+0x84>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b31      	cmp	r3, #49	; 0x31
 8007e28:	d9f0      	bls.n	8007e0c <USB_SetCurrentMode+0x60>
 8007e2a:	e001      	b.n	8007e30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e005      	b.n	8007e3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b32      	cmp	r3, #50	; 0x32
 8007e34:	d101      	bne.n	8007e3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e44:	b084      	sub	sp, #16
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b086      	sub	sp, #24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	e009      	b.n	8007e78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	3340      	adds	r3, #64	; 0x40
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3301      	adds	r3, #1
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b0e      	cmp	r3, #14
 8007e7c:	d9f2      	bls.n	8007e64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d11c      	bne.n	8007ebe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e92:	f043 0302 	orr.w	r3, r3, #2
 8007e96:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	639a      	str	r2, [r3, #56]	; 0x38
 8007ebc:	e00b      	b.n	8007ed6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007edc:	461a      	mov	r2, r3
 8007ede:	2300      	movs	r3, #0
 8007ee0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee8:	4619      	mov	r1, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	680b      	ldr	r3, [r1, #0]
 8007ef4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d10c      	bne.n	8007f16 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d104      	bne.n	8007f0c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f02:	2100      	movs	r1, #0
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f945 	bl	8008194 <USB_SetDevSpeed>
 8007f0a:	e008      	b.n	8007f1e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f940 	bl	8008194 <USB_SetDevSpeed>
 8007f14:	e003      	b.n	8007f1e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f16:	2103      	movs	r1, #3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f93b 	bl	8008194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f1e:	2110      	movs	r1, #16
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f8f3 	bl	800810c <USB_FlushTxFifo>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f90f 	bl	8008154 <USB_FlushRxFifo>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f46:	461a      	mov	r2, r3
 8007f48:	2300      	movs	r3, #0
 8007f4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f52:	461a      	mov	r2, r3
 8007f54:	2300      	movs	r3, #0
 8007f56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5e:	461a      	mov	r2, r3
 8007f60:	2300      	movs	r3, #0
 8007f62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]
 8007f68:	e043      	b.n	8007ff2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f80:	d118      	bne.n	8007fb4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f94:	461a      	mov	r2, r3
 8007f96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	e013      	b.n	8007fc6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007faa:	461a      	mov	r2, r3
 8007fac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fb0:	6013      	str	r3, [r2, #0]
 8007fb2:	e008      	b.n	8007fc6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	613b      	str	r3, [r7, #16]
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d3b7      	bcc.n	8007f6a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	e043      	b.n	8008088 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008016:	d118      	bne.n	800804a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	461a      	mov	r2, r3
 800802c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	e013      	b.n	800805c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008040:	461a      	mov	r2, r3
 8008042:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	e008      	b.n	800805c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008056:	461a      	mov	r2, r3
 8008058:	2300      	movs	r3, #0
 800805a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008068:	461a      	mov	r2, r3
 800806a:	2300      	movs	r3, #0
 800806c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807a:	461a      	mov	r2, r3
 800807c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008080:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	3301      	adds	r3, #1
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	429a      	cmp	r2, r3
 800808e:	d3b7      	bcc.n	8008000 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800809e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80080b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f043 0210 	orr.w	r2, r3, #16
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699a      	ldr	r2, [r3, #24]
 80080c8:	4b0f      	ldr	r3, [pc, #60]	; (8008108 <USB_DevInit+0x2c4>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	f043 0208 	orr.w	r2, r3, #8
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d107      	bne.n	80080f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080f0:	f043 0304 	orr.w	r3, r3, #4
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008104:	b004      	add	sp, #16
 8008106:	4770      	bx	lr
 8008108:	803c3800 	.word	0x803c3800

0800810c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	019b      	lsls	r3, r3, #6
 800811e:	f043 0220 	orr.w	r2, r3, #32
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3301      	adds	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	4a08      	ldr	r2, [pc, #32]	; (8008150 <USB_FlushTxFifo+0x44>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d901      	bls.n	8008136 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e006      	b.n	8008144 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b20      	cmp	r3, #32
 8008140:	d0f1      	beq.n	8008126 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	00030d40 	.word	0x00030d40

08008154 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2210      	movs	r2, #16
 8008164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	4a08      	ldr	r2, [pc, #32]	; (8008190 <USB_FlushRxFifo+0x3c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d901      	bls.n	8008176 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e006      	b.n	8008184 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f003 0310 	and.w	r3, r3, #16
 800817e:	2b10      	cmp	r3, #16
 8008180:	d0f1      	beq.n	8008166 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	00030d40 	.word	0x00030d40

08008194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	68f9      	ldr	r1, [r7, #12]
 80081b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081b4:	4313      	orrs	r3, r2
 80081b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b087      	sub	sp, #28
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f003 0306 	and.w	r3, r3, #6
 80081de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d102      	bne.n	80081ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]
 80081ea:	e00a      	b.n	8008202 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d002      	beq.n	80081f8 <USB_GetDevSpeed+0x32>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b06      	cmp	r3, #6
 80081f6:	d102      	bne.n	80081fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081f8:	2302      	movs	r3, #2
 80081fa:	75fb      	strb	r3, [r7, #23]
 80081fc:	e001      	b.n	8008202 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80081fe:	230f      	movs	r3, #15
 8008200:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
}
 8008204:	4618      	mov	r0, r3
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	785b      	ldrb	r3, [r3, #1]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d13a      	bne.n	80082a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 030f 	and.w	r3, r3, #15
 800823c:	2101      	movs	r1, #1
 800823e:	fa01 f303 	lsl.w	r3, r1, r3
 8008242:	b29b      	uxth	r3, r3
 8008244:	68f9      	ldr	r1, [r7, #12]
 8008246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800824a:	4313      	orrs	r3, r2
 800824c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d155      	bne.n	8008310 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	78db      	ldrb	r3, [r3, #3]
 800827e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008280:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	059b      	lsls	r3, r3, #22
 8008286:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008288:	4313      	orrs	r3, r2
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	0151      	lsls	r1, r2, #5
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	440a      	add	r2, r1
 8008292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800829a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	e036      	b.n	8008310 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a8:	69da      	ldr	r2, [r3, #28]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	2101      	movs	r1, #1
 80082b4:	fa01 f303 	lsl.w	r3, r1, r3
 80082b8:	041b      	lsls	r3, r3, #16
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082c0:	4313      	orrs	r3, r2
 80082c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d11a      	bne.n	8008310 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	78db      	ldrb	r3, [r3, #3]
 80082f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082f6:	430b      	orrs	r3, r1
 80082f8:	4313      	orrs	r3, r2
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	0151      	lsls	r1, r2, #5
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	440a      	add	r2, r1
 8008302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800830a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800830e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
	...

08008320 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d161      	bne.n	8008400 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800834e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008352:	d11f      	bne.n	8008394 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	0151      	lsls	r1, r2, #5
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	440a      	add	r2, r1
 800836a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800836e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008372:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	0151      	lsls	r1, r2, #5
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	440a      	add	r2, r1
 800838a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800838e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008392:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	f003 030f 	and.w	r3, r3, #15
 80083a4:	2101      	movs	r1, #1
 80083a6:	fa01 f303 	lsl.w	r3, r1, r3
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	43db      	mvns	r3, r3
 80083ae:	68f9      	ldr	r1, [r7, #12]
 80083b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083b4:	4013      	ands	r3, r2
 80083b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083be:	69da      	ldr	r2, [r3, #28]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	2101      	movs	r1, #1
 80083ca:	fa01 f303 	lsl.w	r3, r1, r3
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	43db      	mvns	r3, r3
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083d8:	4013      	ands	r3, r2
 80083da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	015a      	lsls	r2, r3, #5
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	0159      	lsls	r1, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	440b      	add	r3, r1
 80083f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f6:	4619      	mov	r1, r3
 80083f8:	4b35      	ldr	r3, [pc, #212]	; (80084d0 <USB_DeactivateEndpoint+0x1b0>)
 80083fa:	4013      	ands	r3, r2
 80083fc:	600b      	str	r3, [r1, #0]
 80083fe:	e060      	b.n	80084c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008416:	d11f      	bne.n	8008458 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	440a      	add	r2, r1
 800842e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008432:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008436:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	0151      	lsls	r1, r2, #5
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	440a      	add	r2, r1
 800844e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008456:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	2101      	movs	r1, #1
 800846a:	fa01 f303 	lsl.w	r3, r1, r3
 800846e:	041b      	lsls	r3, r3, #16
 8008470:	43db      	mvns	r3, r3
 8008472:	68f9      	ldr	r1, [r7, #12]
 8008474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008478:	4013      	ands	r3, r2
 800847a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008482:	69da      	ldr	r2, [r3, #28]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	f003 030f 	and.w	r3, r3, #15
 800848c:	2101      	movs	r1, #1
 800848e:	fa01 f303 	lsl.w	r3, r1, r3
 8008492:	041b      	lsls	r3, r3, #16
 8008494:	43db      	mvns	r3, r3
 8008496:	68f9      	ldr	r1, [r7, #12]
 8008498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800849c:	4013      	ands	r3, r2
 800849e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	0159      	lsls	r1, r3, #5
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	440b      	add	r3, r1
 80084b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ba:	4619      	mov	r1, r3
 80084bc:	4b05      	ldr	r3, [pc, #20]	; (80084d4 <USB_DeactivateEndpoint+0x1b4>)
 80084be:	4013      	ands	r3, r2
 80084c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	ec337800 	.word	0xec337800
 80084d4:	eff37800 	.word	0xeff37800

080084d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08a      	sub	sp, #40	; 0x28
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	f040 815c 	bne.w	80087b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d132      	bne.n	8008568 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	0151      	lsls	r1, r2, #5
 8008514:	69fa      	ldr	r2, [r7, #28]
 8008516:	440a      	add	r2, r1
 8008518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800851c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008520:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008524:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	0151      	lsls	r1, r2, #5
 8008538:	69fa      	ldr	r2, [r7, #28]
 800853a:	440a      	add	r2, r1
 800853c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008544:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	0151      	lsls	r1, r2, #5
 8008558:	69fa      	ldr	r2, [r7, #28]
 800855a:	440a      	add	r2, r1
 800855c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008560:	0cdb      	lsrs	r3, r3, #19
 8008562:	04db      	lsls	r3, r3, #19
 8008564:	6113      	str	r3, [r2, #16]
 8008566:	e074      	b.n	8008652 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	440a      	add	r2, r1
 800857e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008582:	0cdb      	lsrs	r3, r3, #19
 8008584:	04db      	lsls	r3, r3, #19
 8008586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6959      	ldr	r1, [r3, #20]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	440b      	add	r3, r1
 80085c4:	1e59      	subs	r1, r3, #1
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80085ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085d0:	4b9d      	ldr	r3, [pc, #628]	; (8008848 <USB_EPStartXfer+0x370>)
 80085d2:	400b      	ands	r3, r1
 80085d4:	69b9      	ldr	r1, [r7, #24]
 80085d6:	0148      	lsls	r0, r1, #5
 80085d8:	69f9      	ldr	r1, [r7, #28]
 80085da:	4401      	add	r1, r0
 80085dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085e0:	4313      	orrs	r3, r2
 80085e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085fa:	69b9      	ldr	r1, [r7, #24]
 80085fc:	0148      	lsls	r0, r1, #5
 80085fe:	69f9      	ldr	r1, [r7, #28]
 8008600:	4401      	add	r1, r0
 8008602:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008606:	4313      	orrs	r3, r2
 8008608:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	78db      	ldrb	r3, [r3, #3]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d11f      	bne.n	8008652 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	0151      	lsls	r1, r2, #5
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	440a      	add	r2, r1
 8008628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008630:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	0151      	lsls	r1, r2, #5
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	440a      	add	r2, r1
 8008648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008650:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d14b      	bne.n	80086f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d009      	beq.n	8008674 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866c:	461a      	mov	r2, r3
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	78db      	ldrb	r3, [r3, #3]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d128      	bne.n	80086ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008688:	2b00      	cmp	r3, #0
 800868a:	d110      	bne.n	80086ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	0151      	lsls	r1, r2, #5
 800869e:	69fa      	ldr	r2, [r7, #28]
 80086a0:	440a      	add	r2, r1
 80086a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	e00f      	b.n	80086ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	e12f      	b.n	8008950 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	0151      	lsls	r1, r2, #5
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	440a      	add	r2, r1
 8008706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800870a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800870e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	78db      	ldrb	r3, [r3, #3]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d015      	beq.n	8008744 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 8117 	beq.w	8008950 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	2101      	movs	r1, #1
 8008734:	fa01 f303 	lsl.w	r3, r1, r3
 8008738:	69f9      	ldr	r1, [r7, #28]
 800873a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800873e:	4313      	orrs	r3, r2
 8008740:	634b      	str	r3, [r1, #52]	; 0x34
 8008742:	e105      	b.n	8008950 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008750:	2b00      	cmp	r3, #0
 8008752:	d110      	bne.n	8008776 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	0151      	lsls	r1, r2, #5
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	440a      	add	r2, r1
 800876a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800876e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	e00f      	b.n	8008796 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	0151      	lsls	r1, r2, #5
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	440a      	add	r2, r1
 800878c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008794:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	68d9      	ldr	r1, [r3, #12]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	781a      	ldrb	r2, [r3, #0]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	b298      	uxth	r0, r3
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	4603      	mov	r3, r0
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 fa2b 	bl	8008c06 <USB_WritePacket>
 80087b0:	e0ce      	b.n	8008950 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	0151      	lsls	r1, r2, #5
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	440a      	add	r2, r1
 80087c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087cc:	0cdb      	lsrs	r3, r3, #19
 80087ce:	04db      	lsls	r3, r3, #19
 80087d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	0151      	lsls	r1, r2, #5
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	440a      	add	r2, r1
 80087e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d126      	bne.n	800884c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880a:	691a      	ldr	r2, [r3, #16]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008814:	69b9      	ldr	r1, [r7, #24]
 8008816:	0148      	lsls	r0, r1, #5
 8008818:	69f9      	ldr	r1, [r7, #28]
 800881a:	4401      	add	r1, r0
 800881c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008820:	4313      	orrs	r3, r2
 8008822:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	440a      	add	r2, r1
 800883a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800883e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008842:	6113      	str	r3, [r2, #16]
 8008844:	e036      	b.n	80088b4 <USB_EPStartXfer+0x3dc>
 8008846:	bf00      	nop
 8008848:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	695a      	ldr	r2, [r3, #20]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	4413      	add	r3, r2
 8008856:	1e5a      	subs	r2, r3, #1
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008860:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886e:	691a      	ldr	r2, [r3, #16]
 8008870:	8afb      	ldrh	r3, [r7, #22]
 8008872:	04d9      	lsls	r1, r3, #19
 8008874:	4b39      	ldr	r3, [pc, #228]	; (800895c <USB_EPStartXfer+0x484>)
 8008876:	400b      	ands	r3, r1
 8008878:	69b9      	ldr	r1, [r7, #24]
 800887a:	0148      	lsls	r0, r1, #5
 800887c:	69f9      	ldr	r1, [r7, #28]
 800887e:	4401      	add	r1, r0
 8008880:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008884:	4313      	orrs	r3, r2
 8008886:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008894:	691a      	ldr	r2, [r3, #16]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	8af9      	ldrh	r1, [r7, #22]
 800889c:	fb01 f303 	mul.w	r3, r1, r3
 80088a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a4:	69b9      	ldr	r1, [r7, #24]
 80088a6:	0148      	lsls	r0, r1, #5
 80088a8:	69f9      	ldr	r1, [r7, #28]
 80088aa:	4401      	add	r1, r0
 80088ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088b0:	4313      	orrs	r3, r2
 80088b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d10d      	bne.n	80088d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d009      	beq.n	80088d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	68d9      	ldr	r1, [r3, #12]
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d2:	460a      	mov	r2, r1
 80088d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	78db      	ldrb	r3, [r3, #3]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d128      	bne.n	8008930 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d110      	bne.n	8008910 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	0151      	lsls	r1, r2, #5
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	440a      	add	r2, r1
 8008904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008908:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	e00f      	b.n	8008930 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	0151      	lsls	r1, r2, #5
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	440a      	add	r2, r1
 8008926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800892a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800892e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	0151      	lsls	r1, r2, #5
 8008942:	69fa      	ldr	r2, [r7, #28]
 8008944:	440a      	add	r2, r1
 8008946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800894e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3720      	adds	r7, #32
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	1ff80000 	.word	0x1ff80000

08008960 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	4613      	mov	r3, r2
 800896c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b01      	cmp	r3, #1
 800897e:	f040 80cd 	bne.w	8008b1c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d132      	bne.n	80089f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	4413      	add	r3, r2
 8008992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	0151      	lsls	r1, r2, #5
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	440a      	add	r2, r1
 80089a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	0151      	lsls	r1, r2, #5
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	440a      	add	r2, r1
 80089c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	0151      	lsls	r1, r2, #5
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	440a      	add	r2, r1
 80089e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089e8:	0cdb      	lsrs	r3, r3, #19
 80089ea:	04db      	lsls	r3, r3, #19
 80089ec:	6113      	str	r3, [r2, #16]
 80089ee:	e04e      	b.n	8008a8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	0151      	lsls	r1, r2, #5
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	440a      	add	r2, r1
 8008a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a0a:	0cdb      	lsrs	r3, r3, #19
 8008a0c:	04db      	lsls	r3, r3, #19
 8008a0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	0151      	lsls	r1, r2, #5
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	440a      	add	r2, r1
 8008a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a32:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	695a      	ldr	r2, [r3, #20]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d903      	bls.n	8008a48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	0151      	lsls	r1, r2, #5
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	440a      	add	r2, r1
 8008a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a74:	691a      	ldr	r2, [r3, #16]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a7e:	6939      	ldr	r1, [r7, #16]
 8008a80:	0148      	lsls	r0, r1, #5
 8008a82:	6979      	ldr	r1, [r7, #20]
 8008a84:	4401      	add	r1, r0
 8008a86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d11e      	bne.n	8008ad2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d009      	beq.n	8008ab0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	0151      	lsls	r1, r2, #5
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	440a      	add	r2, r1
 8008ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	e092      	b.n	8008bf8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008af0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d07e      	beq.n	8008bf8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b10:	6979      	ldr	r1, [r7, #20]
 8008b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b16:	4313      	orrs	r3, r2
 8008b18:	634b      	str	r3, [r1, #52]	; 0x34
 8008b1a:	e06d      	b.n	8008bf8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	0151      	lsls	r1, r2, #5
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	440a      	add	r2, r1
 8008b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b36:	0cdb      	lsrs	r3, r3, #19
 8008b38:	04db      	lsls	r3, r3, #19
 8008b3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	0151      	lsls	r1, r2, #5
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	440a      	add	r2, r1
 8008b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b5e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	0151      	lsls	r1, r2, #5
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	440a      	add	r2, r1
 8008b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b9c:	691a      	ldr	r2, [r3, #16]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ba6:	6939      	ldr	r1, [r7, #16]
 8008ba8:	0148      	lsls	r0, r1, #5
 8008baa:	6979      	ldr	r1, [r7, #20]
 8008bac:	4401      	add	r1, r0
 8008bae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d10d      	bne.n	8008bd8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d009      	beq.n	8008bd8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	68d9      	ldr	r1, [r3, #12]
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd4:	460a      	mov	r2, r1
 8008bd6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b089      	sub	sp, #36	; 0x24
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	4611      	mov	r1, r2
 8008c12:	461a      	mov	r2, r3
 8008c14:	460b      	mov	r3, r1
 8008c16:	71fb      	strb	r3, [r7, #7]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d123      	bne.n	8008c74 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c2c:	88bb      	ldrh	r3, [r7, #4]
 8008c2e:	3303      	adds	r3, #3
 8008c30:	089b      	lsrs	r3, r3, #2
 8008c32:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c34:	2300      	movs	r3, #0
 8008c36:	61bb      	str	r3, [r7, #24]
 8008c38:	e018      	b.n	8008c6c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	031a      	lsls	r2, r3, #12
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c46:	461a      	mov	r2, r3
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	3301      	adds	r3, #1
 8008c52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	3301      	adds	r3, #1
 8008c58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	3301      	adds	r3, #1
 8008c64:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	61bb      	str	r3, [r7, #24]
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d3e2      	bcc.n	8008c3a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3724      	adds	r7, #36	; 0x24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b08b      	sub	sp, #44	; 0x2c
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c98:	88fb      	ldrh	r3, [r7, #6]
 8008c9a:	089b      	lsrs	r3, r3, #2
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008ca0:	88fb      	ldrh	r3, [r7, #6]
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	623b      	str	r3, [r7, #32]
 8008cac:	e014      	b.n	8008cd8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	3301      	adds	r3, #1
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	3301      	adds	r3, #1
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	623b      	str	r3, [r7, #32]
 8008cd8:	6a3a      	ldr	r2, [r7, #32]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d3e6      	bcc.n	8008cae <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ce0:	8bfb      	ldrh	r3, [r7, #30]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d01e      	beq.n	8008d24 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f107 0310 	add.w	r3, r7, #16
 8008cf6:	6812      	ldr	r2, [r2, #0]
 8008cf8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	fa22 f303 	lsr.w	r3, r2, r3
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	701a      	strb	r2, [r3, #0]
      i++;
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	3301      	adds	r3, #1
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008d18:	8bfb      	ldrh	r3, [r7, #30]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d1e:	8bfb      	ldrh	r3, [r7, #30]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1ea      	bne.n	8008cfa <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	372c      	adds	r7, #44	; 0x2c
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b085      	sub	sp, #20
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	785b      	ldrb	r3, [r3, #1]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d12c      	bne.n	8008da8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	db12      	blt.n	8008d86 <USB_EPSetStall+0x54>
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00f      	beq.n	8008d86 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d84:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	0151      	lsls	r1, r2, #5
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	440a      	add	r2, r1
 8008d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008da4:	6013      	str	r3, [r2, #0]
 8008da6:	e02b      	b.n	8008e00 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	db12      	blt.n	8008de0 <USB_EPSetStall+0xae>
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00f      	beq.n	8008de0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	0151      	lsls	r1, r2, #5
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	440a      	add	r2, r1
 8008dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008dde:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	0151      	lsls	r1, r2, #5
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	440a      	add	r2, r1
 8008df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008dfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b085      	sub	sp, #20
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d128      	bne.n	8008e7c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	0151      	lsls	r1, r2, #5
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	440a      	add	r2, r1
 8008e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	78db      	ldrb	r3, [r3, #3]
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d003      	beq.n	8008e5a <USB_EPClearStall+0x4c>
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	78db      	ldrb	r3, [r3, #3]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d138      	bne.n	8008ecc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	0151      	lsls	r1, r2, #5
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	440a      	add	r2, r1
 8008e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	e027      	b.n	8008ecc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	78db      	ldrb	r3, [r3, #3]
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d003      	beq.n	8008eac <USB_EPClearStall+0x9e>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	78db      	ldrb	r3, [r3, #3]
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d10f      	bne.n	8008ecc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	0151      	lsls	r1, r2, #5
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	440a      	add	r2, r1
 8008ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eca:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ef8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008efc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	78fb      	ldrb	r3, [r7, #3]
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008f0e:	68f9      	ldr	r1, [r7, #12]
 8008f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f14:	4313      	orrs	r3, r2
 8008f16:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b085      	sub	sp, #20
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f40:	f023 0303 	bic.w	r3, r3, #3
 8008f44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f54:	f023 0302 	bic.w	r3, r3, #2
 8008f58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f82:	f023 0303 	bic.w	r3, r3, #3
 8008f86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f96:	f043 0302 	orr.w	r3, r3, #2
 8008f9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	0c1b      	lsrs	r3, r3, #16
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	4013      	ands	r3, r2
 8009026:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	b29b      	uxth	r3, r3
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	4013      	ands	r3, r2
 8009064:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009066:	68bb      	ldr	r3, [r7, #8]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009096:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	f003 030f 	and.w	r3, r3, #15
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	01db      	lsls	r3, r3, #7
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80090ae:	78fb      	ldrb	r3, [r7, #3]
 80090b0:	015a      	lsls	r2, r3, #5
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	4413      	add	r3, r2
 80090b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	4013      	ands	r3, r2
 80090c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090c2:	68bb      	ldr	r3, [r7, #8]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	371c      	adds	r7, #28
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	f003 0301 	and.w	r3, r3, #1
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009106:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800910a:	f023 0307 	bic.w	r3, r3, #7
 800910e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800911e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009122:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
	...

08009134 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	460b      	mov	r3, r1
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	333c      	adds	r3, #60	; 0x3c
 800914a:	3304      	adds	r3, #4
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	4a26      	ldr	r2, [pc, #152]	; (80091ec <USB_EP0_OutStart+0xb8>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d90a      	bls.n	800916e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009168:	d101      	bne.n	800916e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	e037      	b.n	80091de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009174:	461a      	mov	r2, r3
 8009176:	2300      	movs	r3, #0
 8009178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800918c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800919c:	f043 0318 	orr.w	r3, r3, #24
 80091a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80091b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80091b6:	7afb      	ldrb	r3, [r7, #11]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d10f      	bne.n	80091dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c2:	461a      	mov	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80091da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	4f54300a 	.word	0x4f54300a

080091f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	3301      	adds	r3, #1
 8009200:	60fb      	str	r3, [r7, #12]
 8009202:	4a13      	ldr	r2, [pc, #76]	; (8009250 <USB_CoreReset+0x60>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d901      	bls.n	800920c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	e01a      	b.n	8009242 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	daf3      	bge.n	80091fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	f043 0201 	orr.w	r2, r3, #1
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	3301      	adds	r3, #1
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	4a09      	ldr	r2, [pc, #36]	; (8009250 <USB_CoreReset+0x60>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d901      	bls.n	8009234 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e006      	b.n	8009242 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f003 0301 	and.w	r3, r3, #1
 800923c:	2b01      	cmp	r3, #1
 800923e:	d0f1      	beq.n	8009224 <USB_CoreReset+0x34>

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	00030d40 	.word	0x00030d40

08009254 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009260:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009264:	f002 f95c 	bl	800b520 <USBD_static_malloc>
 8009268:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d105      	bne.n	800927c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009278:	2302      	movs	r3, #2
 800927a:	e066      	b.n	800934a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7c1b      	ldrb	r3, [r3, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d119      	bne.n	80092c0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800928c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009290:	2202      	movs	r2, #2
 8009292:	2181      	movs	r1, #129	; 0x81
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f002 f820 	bl	800b2da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80092a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092a4:	2202      	movs	r2, #2
 80092a6:	2101      	movs	r1, #1
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f002 f816 	bl	800b2da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2210      	movs	r2, #16
 80092ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80092be:	e016      	b.n	80092ee <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80092c0:	2340      	movs	r3, #64	; 0x40
 80092c2:	2202      	movs	r2, #2
 80092c4:	2181      	movs	r1, #129	; 0x81
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f002 f807 	bl	800b2da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80092d2:	2340      	movs	r3, #64	; 0x40
 80092d4:	2202      	movs	r2, #2
 80092d6:	2101      	movs	r1, #1
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 fffe 	bl	800b2da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2210      	movs	r2, #16
 80092ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092ee:	2308      	movs	r3, #8
 80092f0:	2203      	movs	r2, #3
 80092f2:	2182      	movs	r1, #130	; 0x82
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 fff0 	bl	800b2da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	7c1b      	ldrb	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d109      	bne.n	8009338 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800932a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800932e:	2101      	movs	r1, #1
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f002 f8c1 	bl	800b4b8 <USBD_LL_PrepareReceive>
 8009336:	e007      	b.n	8009348 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800933e:	2340      	movs	r3, #64	; 0x40
 8009340:	2101      	movs	r1, #1
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f002 f8b8 	bl	800b4b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800935e:	2181      	movs	r1, #129	; 0x81
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f001 ffe0 	bl	800b326 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800936c:	2101      	movs	r1, #1
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f001 ffd9 	bl	800b326 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800937c:	2182      	movs	r1, #130	; 0x82
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 ffd1 	bl	800b326 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00e      	beq.n	80093bc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093ae:	4618      	mov	r0, r3
 80093b0:	f002 f8c4 	bl	800b53c <USBD_static_free>
    pdev->pClassData = NULL;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e0af      	b.n	8009550 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d03f      	beq.n	800947c <USBD_CDC_Setup+0xb4>
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	f040 809f 	bne.w	8009540 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	88db      	ldrh	r3, [r3, #6]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d02e      	beq.n	8009468 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	b25b      	sxtb	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	da16      	bge.n	8009442 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009420:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	88d2      	ldrh	r2, [r2, #6]
 8009426:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	88db      	ldrh	r3, [r3, #6]
 800942c:	2b07      	cmp	r3, #7
 800942e:	bf28      	it	cs
 8009430:	2307      	movcs	r3, #7
 8009432:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	89fa      	ldrh	r2, [r7, #14]
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 fb19 	bl	800aa72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009440:	e085      	b.n	800954e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	785a      	ldrb	r2, [r3, #1]
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	88db      	ldrh	r3, [r3, #6]
 8009450:	b2da      	uxtb	r2, r3
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009458:	6939      	ldr	r1, [r7, #16]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	88db      	ldrh	r3, [r3, #6]
 800945e:	461a      	mov	r2, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 fb32 	bl	800aaca <USBD_CtlPrepareRx>
      break;
 8009466:	e072      	b.n	800954e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	7850      	ldrb	r0, [r2, #1]
 8009474:	2200      	movs	r2, #0
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	4798      	blx	r3
      break;
 800947a:	e068      	b.n	800954e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	785b      	ldrb	r3, [r3, #1]
 8009480:	2b0b      	cmp	r3, #11
 8009482:	d852      	bhi.n	800952a <USBD_CDC_Setup+0x162>
 8009484:	a201      	add	r2, pc, #4	; (adr r2, 800948c <USBD_CDC_Setup+0xc4>)
 8009486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948a:	bf00      	nop
 800948c:	080094bd 	.word	0x080094bd
 8009490:	08009539 	.word	0x08009539
 8009494:	0800952b 	.word	0x0800952b
 8009498:	0800952b 	.word	0x0800952b
 800949c:	0800952b 	.word	0x0800952b
 80094a0:	0800952b 	.word	0x0800952b
 80094a4:	0800952b 	.word	0x0800952b
 80094a8:	0800952b 	.word	0x0800952b
 80094ac:	0800952b 	.word	0x0800952b
 80094b0:	0800952b 	.word	0x0800952b
 80094b4:	080094e7 	.word	0x080094e7
 80094b8:	08009511 	.word	0x08009511
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d107      	bne.n	80094d8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094c8:	f107 030a 	add.w	r3, r7, #10
 80094cc:	2202      	movs	r2, #2
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 face 	bl	800aa72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094d6:	e032      	b.n	800953e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 fa58 	bl	800a990 <USBD_CtlError>
            ret = USBD_FAIL;
 80094e0:	2303      	movs	r3, #3
 80094e2:	75fb      	strb	r3, [r7, #23]
          break;
 80094e4:	e02b      	b.n	800953e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d107      	bne.n	8009502 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80094f2:	f107 030d 	add.w	r3, r7, #13
 80094f6:	2201      	movs	r2, #1
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 fab9 	bl	800aa72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009500:	e01d      	b.n	800953e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f001 fa43 	bl	800a990 <USBD_CtlError>
            ret = USBD_FAIL;
 800950a:	2303      	movs	r3, #3
 800950c:	75fb      	strb	r3, [r7, #23]
          break;
 800950e:	e016      	b.n	800953e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b03      	cmp	r3, #3
 800951a:	d00f      	beq.n	800953c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f001 fa36 	bl	800a990 <USBD_CtlError>
            ret = USBD_FAIL;
 8009524:	2303      	movs	r3, #3
 8009526:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009528:	e008      	b.n	800953c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 fa2f 	bl	800a990 <USBD_CtlError>
          ret = USBD_FAIL;
 8009532:	2303      	movs	r3, #3
 8009534:	75fb      	strb	r3, [r7, #23]
          break;
 8009536:	e002      	b.n	800953e <USBD_CDC_Setup+0x176>
          break;
 8009538:	bf00      	nop
 800953a:	e008      	b.n	800954e <USBD_CDC_Setup+0x186>
          break;
 800953c:	bf00      	nop
      }
      break;
 800953e:	e006      	b.n	800954e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f001 fa24 	bl	800a990 <USBD_CtlError>
      ret = USBD_FAIL;
 8009548:	2303      	movs	r3, #3
 800954a:	75fb      	strb	r3, [r7, #23]
      break;
 800954c:	bf00      	nop
  }

  return (uint8_t)ret;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800956a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009576:	2303      	movs	r3, #3
 8009578:	e04f      	b.n	800961a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009580:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009582:	78fa      	ldrb	r2, [r7, #3]
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	4613      	mov	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	440b      	add	r3, r1
 8009590:	3318      	adds	r3, #24
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d029      	beq.n	80095ec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009598:	78fa      	ldrb	r2, [r7, #3]
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	4613      	mov	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	3318      	adds	r3, #24
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	78f9      	ldrb	r1, [r7, #3]
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	460b      	mov	r3, r1
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	1a5b      	subs	r3, r3, r1
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4403      	add	r3, r0
 80095b8:	3344      	adds	r3, #68	; 0x44
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80095c0:	fb03 f301 	mul.w	r3, r3, r1
 80095c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d110      	bne.n	80095ec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80095ca:	78fa      	ldrb	r2, [r7, #3]
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	4613      	mov	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	440b      	add	r3, r1
 80095d8:	3318      	adds	r3, #24
 80095da:	2200      	movs	r2, #0
 80095dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095de:	78f9      	ldrb	r1, [r7, #3]
 80095e0:	2300      	movs	r3, #0
 80095e2:	2200      	movs	r2, #0
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 ff46 	bl	800b476 <USBD_LL_Transmit>
 80095ea:	e015      	b.n	8009618 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009614:	78fa      	ldrb	r2, [r7, #3]
 8009616:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009634:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009640:	2303      	movs	r3, #3
 8009642:	e015      	b.n	8009670 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f001 ff56 	bl	800b4fa <USBD_LL_GetRxDataSize>
 800964e:	4602      	mov	r2, r0
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800966a:	4611      	mov	r1, r2
 800966c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009686:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800968e:	2303      	movs	r3, #3
 8009690:	e01b      	b.n	80096ca <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d015      	beq.n	80096c8 <USBD_CDC_EP0_RxReady+0x50>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80096a2:	2bff      	cmp	r3, #255	; 0xff
 80096a4:	d010      	beq.n	80096c8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80096b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096bc:	b292      	uxth	r2, r2
 80096be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	22ff      	movs	r2, #255	; 0xff
 80096c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2243      	movs	r2, #67	; 0x43
 80096e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80096e2:	4b03      	ldr	r3, [pc, #12]	; (80096f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	20000098 	.word	0x20000098

080096f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2243      	movs	r2, #67	; 0x43
 8009700:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009702:	4b03      	ldr	r3, [pc, #12]	; (8009710 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009704:	4618      	mov	r0, r3
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	20000054 	.word	0x20000054

08009714 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2243      	movs	r2, #67	; 0x43
 8009720:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009722:	4b03      	ldr	r3, [pc, #12]	; (8009730 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009724:	4618      	mov	r0, r3
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	200000dc 	.word	0x200000dc

08009734 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	220a      	movs	r2, #10
 8009740:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009742:	4b03      	ldr	r3, [pc, #12]	; (8009750 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	20000010 	.word	0x20000010

08009754 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009764:	2303      	movs	r3, #3
 8009766:	e004      	b.n	8009772 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800977e:	b480      	push	{r7}
 8009780:	b087      	sub	sp, #28
 8009782:	af00      	add	r7, sp, #0
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	60b9      	str	r1, [r7, #8]
 8009788:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009790:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009798:	2303      	movs	r3, #3
 800979a:	e008      	b.n	80097ae <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b085      	sub	sp, #20
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e004      	b.n	80097e0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097fa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80097fc:	2301      	movs	r3, #1
 80097fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800980a:	2303      	movs	r3, #3
 800980c:	e01a      	b.n	8009844 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009814:	2b00      	cmp	r3, #0
 8009816:	d114      	bne.n	8009842 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2201      	movs	r2, #1
 800981c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009836:	2181      	movs	r1, #129	; 0x81
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 fe1c 	bl	800b476 <USBD_LL_Transmit>

    ret = USBD_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800985a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009866:	2303      	movs	r3, #3
 8009868:	e016      	b.n	8009898 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	7c1b      	ldrb	r3, [r3, #16]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d109      	bne.n	8009886 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800987c:	2101      	movs	r1, #1
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f001 fe1a 	bl	800b4b8 <USBD_LL_PrepareReceive>
 8009884:	e007      	b.n	8009896 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800988c:	2340      	movs	r3, #64	; 0x40
 800988e:	2101      	movs	r1, #1
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f001 fe11 	bl	800b4b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	4613      	mov	r3, r2
 80098ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e01f      	b.n	80098f8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	79fa      	ldrb	r2, [r7, #7]
 80098ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f001 fc8d 	bl	800b20c <USBD_LL_Init>
 80098f2:	4603      	mov	r3, r0
 80098f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009914:	2303      	movs	r3, #3
 8009916:	e016      	b.n	8009946 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00b      	beq.n	8009944 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	f107 020e 	add.w	r2, r7, #14
 8009938:	4610      	mov	r0, r2
 800993a:	4798      	blx	r3
 800993c:	4602      	mov	r2, r0
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b082      	sub	sp, #8
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f001 fca4 	bl	800b2a4 <USBD_LL_Start>
 800995c:	4603      	mov	r3, r0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009988:	2303      	movs	r3, #3
 800998a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009992:	2b00      	cmp	r3, #0
 8009994:	d009      	beq.n	80099aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	78fa      	ldrb	r2, [r7, #3]
 80099a0:	4611      	mov	r1, r2
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	4798      	blx	r3
 80099a6:	4603      	mov	r3, r0
 80099a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d007      	beq.n	80099da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	78fa      	ldrb	r2, [r7, #3]
 80099d4:	4611      	mov	r1, r2
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	4798      	blx	r3
  }

  return USBD_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 ff90 	bl	800a91c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a18:	f003 031f 	and.w	r3, r3, #31
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d01a      	beq.n	8009a56 <USBD_LL_SetupStage+0x72>
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d822      	bhi.n	8009a6a <USBD_LL_SetupStage+0x86>
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <USBD_LL_SetupStage+0x4a>
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d00a      	beq.n	8009a42 <USBD_LL_SetupStage+0x5e>
 8009a2c:	e01d      	b.n	8009a6a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fa62 	bl	8009f00 <USBD_StdDevReq>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a40:	e020      	b.n	8009a84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fac6 	bl	8009fdc <USBD_StdItfReq>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73fb      	strb	r3, [r7, #15]
      break;
 8009a54:	e016      	b.n	8009a84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fb05 	bl	800a06e <USBD_StdEPReq>
 8009a64:	4603      	mov	r3, r0
 8009a66:	73fb      	strb	r3, [r7, #15]
      break;
 8009a68:	e00c      	b.n	8009a84 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 fc73 	bl	800b364 <USBD_LL_StallEP>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73fb      	strb	r3, [r7, #15]
      break;
 8009a82:	bf00      	nop
  }

  return ret;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b086      	sub	sp, #24
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	460b      	mov	r3, r1
 8009a98:	607a      	str	r2, [r7, #4]
 8009a9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d138      	bne.n	8009b14 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009aa8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d14a      	bne.n	8009b4a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d913      	bls.n	8009ae8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	689a      	ldr	r2, [r3, #8]
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	1ad2      	subs	r2, r2, r3
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	68da      	ldr	r2, [r3, #12]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	bf28      	it	cs
 8009ada:	4613      	movcs	r3, r2
 8009adc:	461a      	mov	r2, r3
 8009ade:	6879      	ldr	r1, [r7, #4]
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f001 f80f 	bl	800ab04 <USBD_CtlContinueRx>
 8009ae6:	e030      	b.n	8009b4a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d10b      	bne.n	8009b0c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d005      	beq.n	8009b0c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f001 f80a 	bl	800ab26 <USBD_CtlSendStatus>
 8009b12:	e01a      	b.n	8009b4a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	d114      	bne.n	8009b4a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00e      	beq.n	8009b4a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	7afa      	ldrb	r2, [r7, #11]
 8009b36:	4611      	mov	r1, r2
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	4798      	blx	r3
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
 8009b48:	e000      	b.n	8009b4c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009b62:	7afb      	ldrb	r3, [r7, #11]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d16b      	bne.n	8009c40 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	3314      	adds	r3, #20
 8009b6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d156      	bne.n	8009c26 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	689a      	ldr	r2, [r3, #8]
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d914      	bls.n	8009bae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	1ad2      	subs	r2, r2, r3
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	461a      	mov	r2, r3
 8009b98:	6879      	ldr	r1, [r7, #4]
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 ff84 	bl	800aaa8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f001 fc86 	bl	800b4b8 <USBD_LL_PrepareReceive>
 8009bac:	e03b      	b.n	8009c26 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d11c      	bne.n	8009bf4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d316      	bcc.n	8009bf4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	685a      	ldr	r2, [r3, #4]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d20f      	bcs.n	8009bf4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 ff65 	bl	800aaa8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009be6:	2300      	movs	r3, #0
 8009be8:	2200      	movs	r2, #0
 8009bea:	2100      	movs	r1, #0
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f001 fc63 	bl	800b4b8 <USBD_LL_PrepareReceive>
 8009bf2:	e018      	b.n	8009c26 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d10b      	bne.n	8009c18 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d005      	beq.n	8009c18 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c18:	2180      	movs	r1, #128	; 0x80
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f001 fba2 	bl	800b364 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f000 ff93 	bl	800ab4c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d122      	bne.n	8009c76 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f7ff fe98 	bl	8009966 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009c3e:	e01a      	b.n	8009c76 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b03      	cmp	r3, #3
 8009c4a:	d114      	bne.n	8009c76 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00e      	beq.n	8009c76 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	7afa      	ldrb	r2, [r7, #11]
 8009c62:	4611      	mov	r1, r2
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	4798      	blx	r3
 8009c68:	4603      	mov	r3, r0
 8009c6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	e000      	b.n	8009c78 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d101      	bne.n	8009cb4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	e02f      	b.n	8009d14 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00f      	beq.n	8009cde <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d009      	beq.n	8009cde <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	6852      	ldr	r2, [r2, #4]
 8009cd6:	b2d2      	uxtb	r2, r2
 8009cd8:	4611      	mov	r1, r2
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cde:	2340      	movs	r3, #64	; 0x40
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 faf8 	bl	800b2da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2240      	movs	r2, #64	; 0x40
 8009cf6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cfa:	2340      	movs	r3, #64	; 0x40
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2180      	movs	r1, #128	; 0x80
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f001 faea 	bl	800b2da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2240      	movs	r2, #64	; 0x40
 8009d10:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	78fa      	ldrb	r2, [r7, #3]
 8009d2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2204      	movs	r2, #4
 8009d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d106      	bne.n	8009d8a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e012      	b.n	8009dd4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b03      	cmp	r3, #3
 8009db8:	d10b      	bne.n	8009dd2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d005      	beq.n	8009dd2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dcc:	69db      	ldr	r3, [r3, #28]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e014      	b.n	8009e20 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d10d      	bne.n	8009e1e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d007      	beq.n	8009e1e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	78fa      	ldrb	r2, [r7, #3]
 8009e18:	4611      	mov	r1, r2
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e014      	b.n	8009e6c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d10d      	bne.n	8009e6a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d007      	beq.n	8009e6a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	78fa      	ldrb	r2, [r7, #3]
 8009e64:	4611      	mov	r1, r2
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d009      	beq.n	8009eb8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	6852      	ldr	r2, [r2, #4]
 8009eb0:	b2d2      	uxtb	r2, r2
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	4798      	blx	r3
  }

  return USBD_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b087      	sub	sp, #28
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ee0:	8a3b      	ldrh	r3, [r7, #16]
 8009ee2:	021b      	lsls	r3, r3, #8
 8009ee4:	b21a      	sxth	r2, r3
 8009ee6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	b21b      	sxth	r3, r3
 8009eee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ef0:	89fb      	ldrh	r3, [r7, #14]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	371c      	adds	r7, #28
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
	...

08009f00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f16:	2b40      	cmp	r3, #64	; 0x40
 8009f18:	d005      	beq.n	8009f26 <USBD_StdDevReq+0x26>
 8009f1a:	2b40      	cmp	r3, #64	; 0x40
 8009f1c:	d853      	bhi.n	8009fc6 <USBD_StdDevReq+0xc6>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00b      	beq.n	8009f3a <USBD_StdDevReq+0x3a>
 8009f22:	2b20      	cmp	r3, #32
 8009f24:	d14f      	bne.n	8009fc6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	4798      	blx	r3
 8009f34:	4603      	mov	r3, r0
 8009f36:	73fb      	strb	r3, [r7, #15]
      break;
 8009f38:	e04a      	b.n	8009fd0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	2b09      	cmp	r3, #9
 8009f40:	d83b      	bhi.n	8009fba <USBD_StdDevReq+0xba>
 8009f42:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <USBD_StdDevReq+0x48>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f9d 	.word	0x08009f9d
 8009f4c:	08009fb1 	.word	0x08009fb1
 8009f50:	08009fbb 	.word	0x08009fbb
 8009f54:	08009fa7 	.word	0x08009fa7
 8009f58:	08009fbb 	.word	0x08009fbb
 8009f5c:	08009f7b 	.word	0x08009f7b
 8009f60:	08009f71 	.word	0x08009f71
 8009f64:	08009fbb 	.word	0x08009fbb
 8009f68:	08009f93 	.word	0x08009f93
 8009f6c:	08009f85 	.word	0x08009f85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f9de 	bl	800a334 <USBD_GetDescriptor>
          break;
 8009f78:	e024      	b.n	8009fc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fb43 	bl	800a608 <USBD_SetAddress>
          break;
 8009f82:	e01f      	b.n	8009fc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fb82 	bl	800a690 <USBD_SetConfig>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	73fb      	strb	r3, [r7, #15]
          break;
 8009f90:	e018      	b.n	8009fc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fc21 	bl	800a7dc <USBD_GetConfig>
          break;
 8009f9a:	e013      	b.n	8009fc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fc52 	bl	800a848 <USBD_GetStatus>
          break;
 8009fa4:	e00e      	b.n	8009fc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fc81 	bl	800a8b0 <USBD_SetFeature>
          break;
 8009fae:	e009      	b.n	8009fc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fc90 	bl	800a8d8 <USBD_ClrFeature>
          break;
 8009fb8:	e004      	b.n	8009fc4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fce7 	bl	800a990 <USBD_CtlError>
          break;
 8009fc2:	bf00      	nop
      }
      break;
 8009fc4:	e004      	b.n	8009fd0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fce1 	bl	800a990 <USBD_CtlError>
      break;
 8009fce:	bf00      	nop
  }

  return ret;
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop

08009fdc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ff2:	2b40      	cmp	r3, #64	; 0x40
 8009ff4:	d005      	beq.n	800a002 <USBD_StdItfReq+0x26>
 8009ff6:	2b40      	cmp	r3, #64	; 0x40
 8009ff8:	d82f      	bhi.n	800a05a <USBD_StdItfReq+0x7e>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <USBD_StdItfReq+0x26>
 8009ffe:	2b20      	cmp	r3, #32
 800a000:	d12b      	bne.n	800a05a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	3b01      	subs	r3, #1
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d81d      	bhi.n	800a04c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	889b      	ldrh	r3, [r3, #4]
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b01      	cmp	r3, #1
 800a018:	d813      	bhi.n	800a042 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	4798      	blx	r3
 800a028:	4603      	mov	r3, r0
 800a02a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	88db      	ldrh	r3, [r3, #6]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d110      	bne.n	800a056 <USBD_StdItfReq+0x7a>
 800a034:	7bfb      	ldrb	r3, [r7, #15]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10d      	bne.n	800a056 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fd73 	bl	800ab26 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a040:	e009      	b.n	800a056 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fca3 	bl	800a990 <USBD_CtlError>
          break;
 800a04a:	e004      	b.n	800a056 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fc9e 	bl	800a990 <USBD_CtlError>
          break;
 800a054:	e000      	b.n	800a058 <USBD_StdItfReq+0x7c>
          break;
 800a056:	bf00      	nop
      }
      break;
 800a058:	e004      	b.n	800a064 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fc97 	bl	800a990 <USBD_CtlError>
      break;
 800a062:	bf00      	nop
  }

  return ret;
 800a064:	7bfb      	ldrb	r3, [r7, #15]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	889b      	ldrh	r3, [r3, #4]
 800a080:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a08a:	2b40      	cmp	r3, #64	; 0x40
 800a08c:	d007      	beq.n	800a09e <USBD_StdEPReq+0x30>
 800a08e:	2b40      	cmp	r3, #64	; 0x40
 800a090:	f200 8145 	bhi.w	800a31e <USBD_StdEPReq+0x2b0>
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00c      	beq.n	800a0b2 <USBD_StdEPReq+0x44>
 800a098:	2b20      	cmp	r3, #32
 800a09a:	f040 8140 	bne.w	800a31e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	4798      	blx	r3
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b0:	e13a      	b.n	800a328 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	785b      	ldrb	r3, [r3, #1]
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d007      	beq.n	800a0ca <USBD_StdEPReq+0x5c>
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	f300 8129 	bgt.w	800a312 <USBD_StdEPReq+0x2a4>
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d07f      	beq.n	800a1c4 <USBD_StdEPReq+0x156>
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d03c      	beq.n	800a142 <USBD_StdEPReq+0xd4>
 800a0c8:	e123      	b.n	800a312 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d002      	beq.n	800a0dc <USBD_StdEPReq+0x6e>
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d016      	beq.n	800a108 <USBD_StdEPReq+0x9a>
 800a0da:	e02c      	b.n	800a136 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00d      	beq.n	800a0fe <USBD_StdEPReq+0x90>
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	2b80      	cmp	r3, #128	; 0x80
 800a0e6:	d00a      	beq.n	800a0fe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 f939 	bl	800b364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0f2:	2180      	movs	r1, #128	; 0x80
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 f935 	bl	800b364 <USBD_LL_StallEP>
 800a0fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0fc:	e020      	b.n	800a140 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fc45 	bl	800a990 <USBD_CtlError>
              break;
 800a106:	e01b      	b.n	800a140 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	885b      	ldrh	r3, [r3, #2]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10e      	bne.n	800a12e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00b      	beq.n	800a12e <USBD_StdEPReq+0xc0>
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	2b80      	cmp	r3, #128	; 0x80
 800a11a:	d008      	beq.n	800a12e <USBD_StdEPReq+0xc0>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	88db      	ldrh	r3, [r3, #6]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d104      	bne.n	800a12e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a124:	7bbb      	ldrb	r3, [r7, #14]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f001 f91b 	bl	800b364 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fcf9 	bl	800ab26 <USBD_CtlSendStatus>

              break;
 800a134:	e004      	b.n	800a140 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fc29 	bl	800a990 <USBD_CtlError>
              break;
 800a13e:	bf00      	nop
          }
          break;
 800a140:	e0ec      	b.n	800a31c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d002      	beq.n	800a154 <USBD_StdEPReq+0xe6>
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d016      	beq.n	800a180 <USBD_StdEPReq+0x112>
 800a152:	e030      	b.n	800a1b6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a154:	7bbb      	ldrb	r3, [r7, #14]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00d      	beq.n	800a176 <USBD_StdEPReq+0x108>
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	2b80      	cmp	r3, #128	; 0x80
 800a15e:	d00a      	beq.n	800a176 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 f8fd 	bl	800b364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a16a:	2180      	movs	r1, #128	; 0x80
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 f8f9 	bl	800b364 <USBD_LL_StallEP>
 800a172:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a174:	e025      	b.n	800a1c2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fc09 	bl	800a990 <USBD_CtlError>
              break;
 800a17e:	e020      	b.n	800a1c2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	885b      	ldrh	r3, [r3, #2]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d11b      	bne.n	800a1c0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a188:	7bbb      	ldrb	r3, [r7, #14]
 800a18a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d004      	beq.n	800a19c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a192:	7bbb      	ldrb	r3, [r7, #14]
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f001 f903 	bl	800b3a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fcc2 	bl	800ab26 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	4798      	blx	r3
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a1b4:	e004      	b.n	800a1c0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fbe9 	bl	800a990 <USBD_CtlError>
              break;
 800a1be:	e000      	b.n	800a1c2 <USBD_StdEPReq+0x154>
              break;
 800a1c0:	bf00      	nop
          }
          break;
 800a1c2:	e0ab      	b.n	800a31c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d002      	beq.n	800a1d6 <USBD_StdEPReq+0x168>
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d032      	beq.n	800a23a <USBD_StdEPReq+0x1cc>
 800a1d4:	e097      	b.n	800a306 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d007      	beq.n	800a1ec <USBD_StdEPReq+0x17e>
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	2b80      	cmp	r3, #128	; 0x80
 800a1e0:	d004      	beq.n	800a1ec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fbd3 	bl	800a990 <USBD_CtlError>
                break;
 800a1ea:	e091      	b.n	800a310 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	da0b      	bge.n	800a20c <USBD_StdEPReq+0x19e>
 800a1f4:	7bbb      	ldrb	r3, [r7, #14]
 800a1f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	3310      	adds	r3, #16
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	4413      	add	r3, r2
 800a208:	3304      	adds	r3, #4
 800a20a:	e00b      	b.n	800a224 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a20c:	7bbb      	ldrb	r3, [r7, #14]
 800a20e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a212:	4613      	mov	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	4413      	add	r3, r2
 800a222:	3304      	adds	r3, #4
 800a224:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2200      	movs	r2, #0
 800a22a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2202      	movs	r2, #2
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fc1d 	bl	800aa72 <USBD_CtlSendData>
              break;
 800a238:	e06a      	b.n	800a310 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a23a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	da11      	bge.n	800a266 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a242:	7bbb      	ldrb	r3, [r7, #14]
 800a244:	f003 020f 	and.w	r2, r3, #15
 800a248:	6879      	ldr	r1, [r7, #4]
 800a24a:	4613      	mov	r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	440b      	add	r3, r1
 800a254:	3324      	adds	r3, #36	; 0x24
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d117      	bne.n	800a28c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fb96 	bl	800a990 <USBD_CtlError>
                  break;
 800a264:	e054      	b.n	800a310 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a266:	7bbb      	ldrb	r3, [r7, #14]
 800a268:	f003 020f 	and.w	r2, r3, #15
 800a26c:	6879      	ldr	r1, [r7, #4]
 800a26e:	4613      	mov	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	440b      	add	r3, r1
 800a278:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d104      	bne.n	800a28c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fb83 	bl	800a990 <USBD_CtlError>
                  break;
 800a28a:	e041      	b.n	800a310 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a28c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a290:	2b00      	cmp	r3, #0
 800a292:	da0b      	bge.n	800a2ac <USBD_StdEPReq+0x23e>
 800a294:	7bbb      	ldrb	r3, [r7, #14]
 800a296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a29a:	4613      	mov	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	3310      	adds	r3, #16
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	e00b      	b.n	800a2c4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
 800a2ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <USBD_StdEPReq+0x264>
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	2b80      	cmp	r3, #128	; 0x80
 800a2d0:	d103      	bne.n	800a2da <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	601a      	str	r2, [r3, #0]
 800a2d8:	e00e      	b.n	800a2f8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a2da:	7bbb      	ldrb	r3, [r7, #14]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f001 f87e 	bl	800b3e0 <USBD_LL_IsStallEP>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	e002      	b.n	800a2f8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fbb7 	bl	800aa72 <USBD_CtlSendData>
              break;
 800a304:	e004      	b.n	800a310 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fb41 	bl	800a990 <USBD_CtlError>
              break;
 800a30e:	bf00      	nop
          }
          break;
 800a310:	e004      	b.n	800a31c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fb3b 	bl	800a990 <USBD_CtlError>
          break;
 800a31a:	bf00      	nop
      }
      break;
 800a31c:	e004      	b.n	800a328 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fb35 	bl	800a990 <USBD_CtlError>
      break;
 800a326:	bf00      	nop
  }

  return ret;
 800a328:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
	...

0800a334 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a33e:	2300      	movs	r3, #0
 800a340:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a346:	2300      	movs	r3, #0
 800a348:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	885b      	ldrh	r3, [r3, #2]
 800a34e:	0a1b      	lsrs	r3, r3, #8
 800a350:	b29b      	uxth	r3, r3
 800a352:	3b01      	subs	r3, #1
 800a354:	2b06      	cmp	r3, #6
 800a356:	f200 8128 	bhi.w	800a5aa <USBD_GetDescriptor+0x276>
 800a35a:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <USBD_GetDescriptor+0x2c>)
 800a35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a360:	0800a37d 	.word	0x0800a37d
 800a364:	0800a395 	.word	0x0800a395
 800a368:	0800a3d5 	.word	0x0800a3d5
 800a36c:	0800a5ab 	.word	0x0800a5ab
 800a370:	0800a5ab 	.word	0x0800a5ab
 800a374:	0800a54b 	.word	0x0800a54b
 800a378:	0800a577 	.word	0x0800a577
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	7c12      	ldrb	r2, [r2, #16]
 800a388:	f107 0108 	add.w	r1, r7, #8
 800a38c:	4610      	mov	r0, r2
 800a38e:	4798      	blx	r3
 800a390:	60f8      	str	r0, [r7, #12]
      break;
 800a392:	e112      	b.n	800a5ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	7c1b      	ldrb	r3, [r3, #16]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10d      	bne.n	800a3b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a4:	f107 0208 	add.w	r2, r7, #8
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	4798      	blx	r3
 800a3ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a3b6:	e100      	b.n	800a5ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	f107 0208 	add.w	r2, r7, #8
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4798      	blx	r3
 800a3c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	701a      	strb	r2, [r3, #0]
      break;
 800a3d2:	e0f2      	b.n	800a5ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	885b      	ldrh	r3, [r3, #2]
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b05      	cmp	r3, #5
 800a3dc:	f200 80ac 	bhi.w	800a538 <USBD_GetDescriptor+0x204>
 800a3e0:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <USBD_GetDescriptor+0xb4>)
 800a3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e6:	bf00      	nop
 800a3e8:	0800a401 	.word	0x0800a401
 800a3ec:	0800a435 	.word	0x0800a435
 800a3f0:	0800a469 	.word	0x0800a469
 800a3f4:	0800a49d 	.word	0x0800a49d
 800a3f8:	0800a4d1 	.word	0x0800a4d1
 800a3fc:	0800a505 	.word	0x0800a505
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00b      	beq.n	800a424 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	7c12      	ldrb	r2, [r2, #16]
 800a418:	f107 0108 	add.w	r1, r7, #8
 800a41c:	4610      	mov	r0, r2
 800a41e:	4798      	blx	r3
 800a420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a422:	e091      	b.n	800a548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fab2 	bl	800a990 <USBD_CtlError>
            err++;
 800a42c:	7afb      	ldrb	r3, [r7, #11]
 800a42e:	3301      	adds	r3, #1
 800a430:	72fb      	strb	r3, [r7, #11]
          break;
 800a432:	e089      	b.n	800a548 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00b      	beq.n	800a458 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	7c12      	ldrb	r2, [r2, #16]
 800a44c:	f107 0108 	add.w	r1, r7, #8
 800a450:	4610      	mov	r0, r2
 800a452:	4798      	blx	r3
 800a454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a456:	e077      	b.n	800a548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa98 	bl	800a990 <USBD_CtlError>
            err++;
 800a460:	7afb      	ldrb	r3, [r7, #11]
 800a462:	3301      	adds	r3, #1
 800a464:	72fb      	strb	r3, [r7, #11]
          break;
 800a466:	e06f      	b.n	800a548 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00b      	beq.n	800a48c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	7c12      	ldrb	r2, [r2, #16]
 800a480:	f107 0108 	add.w	r1, r7, #8
 800a484:	4610      	mov	r0, r2
 800a486:	4798      	blx	r3
 800a488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a48a:	e05d      	b.n	800a548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fa7e 	bl	800a990 <USBD_CtlError>
            err++;
 800a494:	7afb      	ldrb	r3, [r7, #11]
 800a496:	3301      	adds	r3, #1
 800a498:	72fb      	strb	r3, [r7, #11]
          break;
 800a49a:	e055      	b.n	800a548 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00b      	beq.n	800a4c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	7c12      	ldrb	r2, [r2, #16]
 800a4b4:	f107 0108 	add.w	r1, r7, #8
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4798      	blx	r3
 800a4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4be:	e043      	b.n	800a548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fa64 	bl	800a990 <USBD_CtlError>
            err++;
 800a4c8:	7afb      	ldrb	r3, [r7, #11]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ce:	e03b      	b.n	800a548 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00b      	beq.n	800a4f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	7c12      	ldrb	r2, [r2, #16]
 800a4e8:	f107 0108 	add.w	r1, r7, #8
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	4798      	blx	r3
 800a4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4f2:	e029      	b.n	800a548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fa4a 	bl	800a990 <USBD_CtlError>
            err++;
 800a4fc:	7afb      	ldrb	r3, [r7, #11]
 800a4fe:	3301      	adds	r3, #1
 800a500:	72fb      	strb	r3, [r7, #11]
          break;
 800a502:	e021      	b.n	800a548 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00b      	beq.n	800a528 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	7c12      	ldrb	r2, [r2, #16]
 800a51c:	f107 0108 	add.w	r1, r7, #8
 800a520:	4610      	mov	r0, r2
 800a522:	4798      	blx	r3
 800a524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a526:	e00f      	b.n	800a548 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fa30 	bl	800a990 <USBD_CtlError>
            err++;
 800a530:	7afb      	ldrb	r3, [r7, #11]
 800a532:	3301      	adds	r3, #1
 800a534:	72fb      	strb	r3, [r7, #11]
          break;
 800a536:	e007      	b.n	800a548 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fa28 	bl	800a990 <USBD_CtlError>
          err++;
 800a540:	7afb      	ldrb	r3, [r7, #11]
 800a542:	3301      	adds	r3, #1
 800a544:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a546:	bf00      	nop
      }
      break;
 800a548:	e037      	b.n	800a5ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	7c1b      	ldrb	r3, [r3, #16]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d109      	bne.n	800a566 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55a:	f107 0208 	add.w	r2, r7, #8
 800a55e:	4610      	mov	r0, r2
 800a560:	4798      	blx	r3
 800a562:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a564:	e029      	b.n	800a5ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fa11 	bl	800a990 <USBD_CtlError>
        err++;
 800a56e:	7afb      	ldrb	r3, [r7, #11]
 800a570:	3301      	adds	r3, #1
 800a572:	72fb      	strb	r3, [r7, #11]
      break;
 800a574:	e021      	b.n	800a5ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	7c1b      	ldrb	r3, [r3, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10d      	bne.n	800a59a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a586:	f107 0208 	add.w	r2, r7, #8
 800a58a:	4610      	mov	r0, r2
 800a58c:	4798      	blx	r3
 800a58e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	3301      	adds	r3, #1
 800a594:	2207      	movs	r2, #7
 800a596:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a598:	e00f      	b.n	800a5ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f9f7 	bl	800a990 <USBD_CtlError>
        err++;
 800a5a2:	7afb      	ldrb	r3, [r7, #11]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a5a8:	e007      	b.n	800a5ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f9ef 	bl	800a990 <USBD_CtlError>
      err++;
 800a5b2:	7afb      	ldrb	r3, [r7, #11]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a5b8:	bf00      	nop
  }

  if (err != 0U)
 800a5ba:	7afb      	ldrb	r3, [r7, #11]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d11e      	bne.n	800a5fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	88db      	ldrh	r3, [r3, #6]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d016      	beq.n	800a5f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a5c8:	893b      	ldrh	r3, [r7, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00e      	beq.n	800a5ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	88da      	ldrh	r2, [r3, #6]
 800a5d2:	893b      	ldrh	r3, [r7, #8]
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	bf28      	it	cs
 800a5d8:	4613      	movcs	r3, r2
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a5de:	893b      	ldrh	r3, [r7, #8]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	68f9      	ldr	r1, [r7, #12]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fa44 	bl	800aa72 <USBD_CtlSendData>
 800a5ea:	e009      	b.n	800a600 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f9ce 	bl	800a990 <USBD_CtlError>
 800a5f4:	e004      	b.n	800a600 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fa95 	bl	800ab26 <USBD_CtlSendStatus>
 800a5fc:	e000      	b.n	800a600 <USBD_GetDescriptor+0x2cc>
    return;
 800a5fe:	bf00      	nop
  }
}
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop

0800a608 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	889b      	ldrh	r3, [r3, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d131      	bne.n	800a67e <USBD_SetAddress+0x76>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	88db      	ldrh	r3, [r3, #6]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d12d      	bne.n	800a67e <USBD_SetAddress+0x76>
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	885b      	ldrh	r3, [r3, #2]
 800a626:	2b7f      	cmp	r3, #127	; 0x7f
 800a628:	d829      	bhi.n	800a67e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	885b      	ldrh	r3, [r3, #2]
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a634:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b03      	cmp	r3, #3
 800a640:	d104      	bne.n	800a64c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f9a3 	bl	800a990 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a64a:	e01d      	b.n	800a688 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	7bfa      	ldrb	r2, [r7, #15]
 800a650:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a654:	7bfb      	ldrb	r3, [r7, #15]
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 feed 	bl	800b438 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fa61 	bl	800ab26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2202      	movs	r2, #2
 800a66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a672:	e009      	b.n	800a688 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a67c:	e004      	b.n	800a688 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f985 	bl	800a990 <USBD_CtlError>
  }
}
 800a686:	bf00      	nop
 800a688:	bf00      	nop
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a69a:	2300      	movs	r3, #0
 800a69c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	885b      	ldrh	r3, [r3, #2]
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	4b4c      	ldr	r3, [pc, #304]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a6a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a6a8:	4b4b      	ldr	r3, [pc, #300]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d905      	bls.n	800a6bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a6b0:	6839      	ldr	r1, [r7, #0]
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f96c 	bl	800a990 <USBD_CtlError>
    return USBD_FAIL;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e088      	b.n	800a7ce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d002      	beq.n	800a6ce <USBD_SetConfig+0x3e>
 800a6c8:	2b03      	cmp	r3, #3
 800a6ca:	d025      	beq.n	800a718 <USBD_SetConfig+0x88>
 800a6cc:	e071      	b.n	800a7b2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a6ce:	4b42      	ldr	r3, [pc, #264]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d01c      	beq.n	800a710 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a6d6:	4b40      	ldr	r3, [pc, #256]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a6e0:	4b3d      	ldr	r3, [pc, #244]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7ff f948 	bl	800997c <USBD_SetClassConfig>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d004      	beq.n	800a700 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f949 	bl	800a990 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a6fe:	e065      	b.n	800a7cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fa10 	bl	800ab26 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2203      	movs	r2, #3
 800a70a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a70e:	e05d      	b.n	800a7cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fa08 	bl	800ab26 <USBD_CtlSendStatus>
      break;
 800a716:	e059      	b.n	800a7cc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a718:	4b2f      	ldr	r3, [pc, #188]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d112      	bne.n	800a746 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2202      	movs	r2, #2
 800a724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a728:	4b2b      	ldr	r3, [pc, #172]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	461a      	mov	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a732:	4b29      	ldr	r3, [pc, #164]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7ff f93b 	bl	80099b4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f9f1 	bl	800ab26 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a744:	e042      	b.n	800a7cc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a746:	4b24      	ldr	r3, [pc, #144]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	461a      	mov	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	429a      	cmp	r2, r3
 800a752:	d02a      	beq.n	800a7aa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	4619      	mov	r1, r3
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7ff f929 	bl	80099b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a762:	4b1d      	ldr	r3, [pc, #116]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a76c:	4b1a      	ldr	r3, [pc, #104]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff f902 	bl	800997c <USBD_SetClassConfig>
 800a778:	4603      	mov	r3, r0
 800a77a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a77c:	7bfb      	ldrb	r3, [r7, #15]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00f      	beq.n	800a7a2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f903 	bl	800a990 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	4619      	mov	r1, r3
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff f90e 	bl	80099b4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2202      	movs	r2, #2
 800a79c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a7a0:	e014      	b.n	800a7cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f9bf 	bl	800ab26 <USBD_CtlSendStatus>
      break;
 800a7a8:	e010      	b.n	800a7cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f9bb 	bl	800ab26 <USBD_CtlSendStatus>
      break;
 800a7b0:	e00c      	b.n	800a7cc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f8eb 	bl	800a990 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7ba:	4b07      	ldr	r3, [pc, #28]	; (800a7d8 <USBD_SetConfig+0x148>)
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7ff f8f7 	bl	80099b4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ca:	bf00      	nop
  }

  return ret;
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000210 	.word	0x20000210

0800a7dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	88db      	ldrh	r3, [r3, #6]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d004      	beq.n	800a7f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f8cd 	bl	800a990 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a7f6:	e023      	b.n	800a840 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	2b02      	cmp	r3, #2
 800a802:	dc02      	bgt.n	800a80a <USBD_GetConfig+0x2e>
 800a804:	2b00      	cmp	r3, #0
 800a806:	dc03      	bgt.n	800a810 <USBD_GetConfig+0x34>
 800a808:	e015      	b.n	800a836 <USBD_GetConfig+0x5a>
 800a80a:	2b03      	cmp	r3, #3
 800a80c:	d00b      	beq.n	800a826 <USBD_GetConfig+0x4a>
 800a80e:	e012      	b.n	800a836 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	3308      	adds	r3, #8
 800a81a:	2201      	movs	r2, #1
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f927 	bl	800aa72 <USBD_CtlSendData>
        break;
 800a824:	e00c      	b.n	800a840 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3304      	adds	r3, #4
 800a82a:	2201      	movs	r2, #1
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f91f 	bl	800aa72 <USBD_CtlSendData>
        break;
 800a834:	e004      	b.n	800a840 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f8a9 	bl	800a990 <USBD_CtlError>
        break;
 800a83e:	bf00      	nop
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	3b01      	subs	r3, #1
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d81e      	bhi.n	800a89e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	88db      	ldrh	r3, [r3, #6]
 800a864:	2b02      	cmp	r3, #2
 800a866:	d004      	beq.n	800a872 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f890 	bl	800a990 <USBD_CtlError>
        break;
 800a870:	e01a      	b.n	800a8a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d005      	beq.n	800a88e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f043 0202 	orr.w	r2, r3, #2
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	330c      	adds	r3, #12
 800a892:	2202      	movs	r2, #2
 800a894:	4619      	mov	r1, r3
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f8eb 	bl	800aa72 <USBD_CtlSendData>
      break;
 800a89c:	e004      	b.n	800a8a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f875 	bl	800a990 <USBD_CtlError>
      break;
 800a8a6:	bf00      	nop
  }
}
 800a8a8:	bf00      	nop
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	885b      	ldrh	r3, [r3, #2]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d106      	bne.n	800a8d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f92b 	bl	800ab26 <USBD_CtlSendStatus>
  }
}
 800a8d0:	bf00      	nop
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d80b      	bhi.n	800a908 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	885b      	ldrh	r3, [r3, #2]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d10c      	bne.n	800a912 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f910 	bl	800ab26 <USBD_CtlSendStatus>
      }
      break;
 800a906:	e004      	b.n	800a912 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f840 	bl	800a990 <USBD_CtlError>
      break;
 800a910:	e000      	b.n	800a914 <USBD_ClrFeature+0x3c>
      break;
 800a912:	bf00      	nop
  }
}
 800a914:	bf00      	nop
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	781a      	ldrb	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	3301      	adds	r3, #1
 800a936:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	781a      	ldrb	r2, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	3301      	adds	r3, #1
 800a944:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7ff fabb 	bl	8009ec2 <SWAPBYTE>
 800a94c:	4603      	mov	r3, r0
 800a94e:	461a      	mov	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3301      	adds	r3, #1
 800a958:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3301      	adds	r3, #1
 800a95e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f7ff faae 	bl	8009ec2 <SWAPBYTE>
 800a966:	4603      	mov	r3, r0
 800a968:	461a      	mov	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3301      	adds	r3, #1
 800a972:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3301      	adds	r3, #1
 800a978:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7ff faa1 	bl	8009ec2 <SWAPBYTE>
 800a980:	4603      	mov	r3, r0
 800a982:	461a      	mov	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	80da      	strh	r2, [r3, #6]
}
 800a988:	bf00      	nop
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a99a:	2180      	movs	r1, #128	; 0x80
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fce1 	bl	800b364 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fcdd 	bl	800b364 <USBD_LL_StallEP>
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b086      	sub	sp, #24
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	60f8      	str	r0, [r7, #12]
 800a9ba:	60b9      	str	r1, [r7, #8]
 800a9bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d036      	beq.n	800aa36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a9cc:	6938      	ldr	r0, [r7, #16]
 800a9ce:	f000 f836 	bl	800aa3e <USBD_GetLen>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	005b      	lsls	r3, r3, #1
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	7812      	ldrb	r2, [r2, #0]
 800a9ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9ec:	7dfb      	ldrb	r3, [r7, #23]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a9f2:	7dfb      	ldrb	r3, [r7, #23]
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	2203      	movs	r2, #3
 800a9fa:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9fc:	7dfb      	ldrb	r3, [r7, #23]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aa02:	e013      	b.n	800aa2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aa04:	7dfb      	ldrb	r3, [r7, #23]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	4413      	add	r3, r2
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	7812      	ldrb	r2, [r2, #0]
 800aa0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	3301      	adds	r3, #1
 800aa14:	613b      	str	r3, [r7, #16]
    idx++;
 800aa16:	7dfb      	ldrb	r3, [r7, #23]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aa1c:	7dfb      	ldrb	r3, [r7, #23]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	4413      	add	r3, r2
 800aa22:	2200      	movs	r2, #0
 800aa24:	701a      	strb	r2, [r3, #0]
    idx++;
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1e7      	bne.n	800aa04 <USBD_GetString+0x52>
 800aa34:	e000      	b.n	800aa38 <USBD_GetString+0x86>
    return;
 800aa36:	bf00      	nop
  }
}
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b085      	sub	sp, #20
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa46:	2300      	movs	r3, #0
 800aa48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aa4e:	e005      	b.n	800aa5c <USBD_GetLen+0x1e>
  {
    len++;
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	3301      	adds	r3, #1
 800aa54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1f5      	bne.n	800aa50 <USBD_GetLen+0x12>
  }

  return len;
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	60f8      	str	r0, [r7, #12]
 800aa7a:	60b9      	str	r1, [r7, #8]
 800aa7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2202      	movs	r2, #2
 800aa82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	2100      	movs	r1, #0
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f000 fcec 	bl	800b476 <USBD_LL_Transmit>

  return USBD_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	2100      	movs	r1, #0
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f000 fcdb 	bl	800b476 <USBD_LL_Transmit>

  return USBD_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b084      	sub	sp, #16
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	60b9      	str	r1, [r7, #8]
 800aad4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2203      	movs	r2, #3
 800aada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f000 fcdf 	bl	800b4b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	2100      	movs	r1, #0
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 fcce 	bl	800b4b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b082      	sub	sp, #8
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2204      	movs	r2, #4
 800ab32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab36:	2300      	movs	r3, #0
 800ab38:	2200      	movs	r2, #0
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fc9a 	bl	800b476 <USBD_LL_Transmit>

  return USBD_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2205      	movs	r2, #5
 800ab58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2100      	movs	r1, #0
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fca8 	bl	800b4b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
	...

0800ab74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4912      	ldr	r1, [pc, #72]	; (800abc4 <MX_USB_DEVICE_Init+0x50>)
 800ab7c:	4812      	ldr	r0, [pc, #72]	; (800abc8 <MX_USB_DEVICE_Init+0x54>)
 800ab7e:	f7fe fe8f 	bl	80098a0 <USBD_Init>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab88:	f7f6 fbac 	bl	80012e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ab8c:	490f      	ldr	r1, [pc, #60]	; (800abcc <MX_USB_DEVICE_Init+0x58>)
 800ab8e:	480e      	ldr	r0, [pc, #56]	; (800abc8 <MX_USB_DEVICE_Init+0x54>)
 800ab90:	f7fe feb6 	bl	8009900 <USBD_RegisterClass>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab9a:	f7f6 fba3 	bl	80012e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ab9e:	490c      	ldr	r1, [pc, #48]	; (800abd0 <MX_USB_DEVICE_Init+0x5c>)
 800aba0:	4809      	ldr	r0, [pc, #36]	; (800abc8 <MX_USB_DEVICE_Init+0x54>)
 800aba2:	f7fe fdd7 	bl	8009754 <USBD_CDC_RegisterInterface>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800abac:	f7f6 fb9a 	bl	80012e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800abb0:	4805      	ldr	r0, [pc, #20]	; (800abc8 <MX_USB_DEVICE_Init+0x54>)
 800abb2:	f7fe fecc 	bl	800994e <USBD_Start>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800abbc:	f7f6 fb92 	bl	80012e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800abc0:	bf00      	nop
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	20000134 	.word	0x20000134
 800abc8:	20000994 	.word	0x20000994
 800abcc:	2000001c 	.word	0x2000001c
 800abd0:	20000120 	.word	0x20000120

0800abd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800abd8:	2200      	movs	r2, #0
 800abda:	4905      	ldr	r1, [pc, #20]	; (800abf0 <CDC_Init_FS+0x1c>)
 800abdc:	4805      	ldr	r0, [pc, #20]	; (800abf4 <CDC_Init_FS+0x20>)
 800abde:	f7fe fdce 	bl	800977e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800abe2:	4905      	ldr	r1, [pc, #20]	; (800abf8 <CDC_Init_FS+0x24>)
 800abe4:	4803      	ldr	r0, [pc, #12]	; (800abf4 <CDC_Init_FS+0x20>)
 800abe6:	f7fe fde8 	bl	80097ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800abea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800abec:	4618      	mov	r0, r3
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	20001464 	.word	0x20001464
 800abf4:	20000994 	.word	0x20000994
 800abf8:	20000c64 	.word	0x20000c64

0800abfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800abfc:	b480      	push	{r7}
 800abfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ac00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	4603      	mov	r3, r0
 800ac14:	6039      	str	r1, [r7, #0]
 800ac16:	71fb      	strb	r3, [r7, #7]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ac1c:	79fb      	ldrb	r3, [r7, #7]
 800ac1e:	2b23      	cmp	r3, #35	; 0x23
 800ac20:	d84a      	bhi.n	800acb8 <CDC_Control_FS+0xac>
 800ac22:	a201      	add	r2, pc, #4	; (adr r2, 800ac28 <CDC_Control_FS+0x1c>)
 800ac24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac28:	0800acb9 	.word	0x0800acb9
 800ac2c:	0800acb9 	.word	0x0800acb9
 800ac30:	0800acb9 	.word	0x0800acb9
 800ac34:	0800acb9 	.word	0x0800acb9
 800ac38:	0800acb9 	.word	0x0800acb9
 800ac3c:	0800acb9 	.word	0x0800acb9
 800ac40:	0800acb9 	.word	0x0800acb9
 800ac44:	0800acb9 	.word	0x0800acb9
 800ac48:	0800acb9 	.word	0x0800acb9
 800ac4c:	0800acb9 	.word	0x0800acb9
 800ac50:	0800acb9 	.word	0x0800acb9
 800ac54:	0800acb9 	.word	0x0800acb9
 800ac58:	0800acb9 	.word	0x0800acb9
 800ac5c:	0800acb9 	.word	0x0800acb9
 800ac60:	0800acb9 	.word	0x0800acb9
 800ac64:	0800acb9 	.word	0x0800acb9
 800ac68:	0800acb9 	.word	0x0800acb9
 800ac6c:	0800acb9 	.word	0x0800acb9
 800ac70:	0800acb9 	.word	0x0800acb9
 800ac74:	0800acb9 	.word	0x0800acb9
 800ac78:	0800acb9 	.word	0x0800acb9
 800ac7c:	0800acb9 	.word	0x0800acb9
 800ac80:	0800acb9 	.word	0x0800acb9
 800ac84:	0800acb9 	.word	0x0800acb9
 800ac88:	0800acb9 	.word	0x0800acb9
 800ac8c:	0800acb9 	.word	0x0800acb9
 800ac90:	0800acb9 	.word	0x0800acb9
 800ac94:	0800acb9 	.word	0x0800acb9
 800ac98:	0800acb9 	.word	0x0800acb9
 800ac9c:	0800acb9 	.word	0x0800acb9
 800aca0:	0800acb9 	.word	0x0800acb9
 800aca4:	0800acb9 	.word	0x0800acb9
 800aca8:	0800acb9 	.word	0x0800acb9
 800acac:	0800acb9 	.word	0x0800acb9
 800acb0:	0800acb9 	.word	0x0800acb9
 800acb4:	0800acb9 	.word	0x0800acb9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800acb8:	bf00      	nop
  }

  return (USBD_OK);
 800acba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4805      	ldr	r0, [pc, #20]	; (800acec <CDC_Receive_FS+0x24>)
 800acd6:	f7fe fd70 	bl	80097ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800acda:	4804      	ldr	r0, [pc, #16]	; (800acec <CDC_Receive_FS+0x24>)
 800acdc:	f7fe fdb6 	bl	800984c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ace0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	20000994 	.word	0x20000994

0800acf0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ad00:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <CDC_Transmit_FS+0x48>)
 800ad02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e00b      	b.n	800ad2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ad16:	887b      	ldrh	r3, [r7, #2]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4806      	ldr	r0, [pc, #24]	; (800ad38 <CDC_Transmit_FS+0x48>)
 800ad1e:	f7fe fd2e 	bl	800977e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ad22:	4805      	ldr	r0, [pc, #20]	; (800ad38 <CDC_Transmit_FS+0x48>)
 800ad24:	f7fe fd62 	bl	80097ec <USBD_CDC_TransmitPacket>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20000994 	.word	0x20000994

0800ad3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	4613      	mov	r3, r2
 800ad48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ad4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
	...

0800ad60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	4603      	mov	r3, r0
 800ad68:	6039      	str	r1, [r7, #0]
 800ad6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	2212      	movs	r2, #18
 800ad70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ad72:	4b03      	ldr	r3, [pc, #12]	; (800ad80 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	20000150 	.word	0x20000150

0800ad84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	6039      	str	r1, [r7, #0]
 800ad8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	2204      	movs	r2, #4
 800ad94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad96:	4b03      	ldr	r3, [pc, #12]	; (800ada4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	20000164 	.word	0x20000164

0800ada8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	4603      	mov	r3, r0
 800adb0:	6039      	str	r1, [r7, #0]
 800adb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800adb4:	79fb      	ldrb	r3, [r7, #7]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d105      	bne.n	800adc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	4907      	ldr	r1, [pc, #28]	; (800addc <USBD_FS_ProductStrDescriptor+0x34>)
 800adbe:	4808      	ldr	r0, [pc, #32]	; (800ade0 <USBD_FS_ProductStrDescriptor+0x38>)
 800adc0:	f7ff fdf7 	bl	800a9b2 <USBD_GetString>
 800adc4:	e004      	b.n	800add0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	4904      	ldr	r1, [pc, #16]	; (800addc <USBD_FS_ProductStrDescriptor+0x34>)
 800adca:	4805      	ldr	r0, [pc, #20]	; (800ade0 <USBD_FS_ProductStrDescriptor+0x38>)
 800adcc:	f7ff fdf1 	bl	800a9b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800add0:	4b02      	ldr	r3, [pc, #8]	; (800addc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800add2:	4618      	mov	r0, r3
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20001c64 	.word	0x20001c64
 800ade0:	0800b868 	.word	0x0800b868

0800ade4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	6039      	str	r1, [r7, #0]
 800adee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	4904      	ldr	r1, [pc, #16]	; (800ae04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800adf4:	4804      	ldr	r0, [pc, #16]	; (800ae08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800adf6:	f7ff fddc 	bl	800a9b2 <USBD_GetString>
  return USBD_StrDesc;
 800adfa:	4b02      	ldr	r3, [pc, #8]	; (800ae04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	20001c64 	.word	0x20001c64
 800ae08:	0800b880 	.word	0x0800b880

0800ae0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	4603      	mov	r3, r0
 800ae14:	6039      	str	r1, [r7, #0]
 800ae16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	221a      	movs	r2, #26
 800ae1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ae1e:	f000 f843 	bl	800aea8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ae22:	4b02      	ldr	r3, [pc, #8]	; (800ae2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	20000168 	.word	0x20000168

0800ae30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	4603      	mov	r3, r0
 800ae38:	6039      	str	r1, [r7, #0]
 800ae3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ae3c:	79fb      	ldrb	r3, [r7, #7]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d105      	bne.n	800ae4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	4907      	ldr	r1, [pc, #28]	; (800ae64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ae46:	4808      	ldr	r0, [pc, #32]	; (800ae68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ae48:	f7ff fdb3 	bl	800a9b2 <USBD_GetString>
 800ae4c:	e004      	b.n	800ae58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	4904      	ldr	r1, [pc, #16]	; (800ae64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ae52:	4805      	ldr	r0, [pc, #20]	; (800ae68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ae54:	f7ff fdad 	bl	800a9b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae58:	4b02      	ldr	r3, [pc, #8]	; (800ae64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20001c64 	.word	0x20001c64
 800ae68:	0800b894 	.word	0x0800b894

0800ae6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	6039      	str	r1, [r7, #0]
 800ae76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae78:	79fb      	ldrb	r3, [r7, #7]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d105      	bne.n	800ae8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	4907      	ldr	r1, [pc, #28]	; (800aea0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae82:	4808      	ldr	r0, [pc, #32]	; (800aea4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae84:	f7ff fd95 	bl	800a9b2 <USBD_GetString>
 800ae88:	e004      	b.n	800ae94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	4904      	ldr	r1, [pc, #16]	; (800aea0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae8e:	4805      	ldr	r0, [pc, #20]	; (800aea4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae90:	f7ff fd8f 	bl	800a9b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae94:	4b02      	ldr	r3, [pc, #8]	; (800aea0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20001c64 	.word	0x20001c64
 800aea4:	0800b8a0 	.word	0x0800b8a0

0800aea8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aeae:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <Get_SerialNum+0x44>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aeb4:	4b0e      	ldr	r3, [pc, #56]	; (800aef0 <Get_SerialNum+0x48>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aeba:	4b0e      	ldr	r3, [pc, #56]	; (800aef4 <Get_SerialNum+0x4c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4413      	add	r3, r2
 800aec6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d009      	beq.n	800aee2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aece:	2208      	movs	r2, #8
 800aed0:	4909      	ldr	r1, [pc, #36]	; (800aef8 <Get_SerialNum+0x50>)
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f000 f814 	bl	800af00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aed8:	2204      	movs	r2, #4
 800aeda:	4908      	ldr	r1, [pc, #32]	; (800aefc <Get_SerialNum+0x54>)
 800aedc:	68b8      	ldr	r0, [r7, #8]
 800aede:	f000 f80f 	bl	800af00 <IntToUnicode>
  }
}
 800aee2:	bf00      	nop
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	1fff7a10 	.word	0x1fff7a10
 800aef0:	1fff7a14 	.word	0x1fff7a14
 800aef4:	1fff7a18 	.word	0x1fff7a18
 800aef8:	2000016a 	.word	0x2000016a
 800aefc:	2000017a 	.word	0x2000017a

0800af00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800af00:	b480      	push	{r7}
 800af02:	b087      	sub	sp, #28
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	4613      	mov	r3, r2
 800af0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800af12:	2300      	movs	r3, #0
 800af14:	75fb      	strb	r3, [r7, #23]
 800af16:	e027      	b.n	800af68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	0f1b      	lsrs	r3, r3, #28
 800af1c:	2b09      	cmp	r3, #9
 800af1e:	d80b      	bhi.n	800af38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	0f1b      	lsrs	r3, r3, #28
 800af24:	b2da      	uxtb	r2, r3
 800af26:	7dfb      	ldrb	r3, [r7, #23]
 800af28:	005b      	lsls	r3, r3, #1
 800af2a:	4619      	mov	r1, r3
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	440b      	add	r3, r1
 800af30:	3230      	adds	r2, #48	; 0x30
 800af32:	b2d2      	uxtb	r2, r2
 800af34:	701a      	strb	r2, [r3, #0]
 800af36:	e00a      	b.n	800af4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	0f1b      	lsrs	r3, r3, #28
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	7dfb      	ldrb	r3, [r7, #23]
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	4619      	mov	r1, r3
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	440b      	add	r3, r1
 800af48:	3237      	adds	r2, #55	; 0x37
 800af4a:	b2d2      	uxtb	r2, r2
 800af4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	011b      	lsls	r3, r3, #4
 800af52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800af54:	7dfb      	ldrb	r3, [r7, #23]
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	3301      	adds	r3, #1
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	4413      	add	r3, r2
 800af5e:	2200      	movs	r2, #0
 800af60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	3301      	adds	r3, #1
 800af66:	75fb      	strb	r3, [r7, #23]
 800af68:	7dfa      	ldrb	r2, [r7, #23]
 800af6a:	79fb      	ldrb	r3, [r7, #7]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d3d3      	bcc.n	800af18 <IntToUnicode+0x18>
  }
}
 800af70:	bf00      	nop
 800af72:	bf00      	nop
 800af74:	371c      	adds	r7, #28
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
	...

0800af80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b08a      	sub	sp, #40	; 0x28
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af88:	f107 0314 	add.w	r3, r7, #20
 800af8c:	2200      	movs	r2, #0
 800af8e:	601a      	str	r2, [r3, #0]
 800af90:	605a      	str	r2, [r3, #4]
 800af92:	609a      	str	r2, [r3, #8]
 800af94:	60da      	str	r2, [r3, #12]
 800af96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afa0:	d13a      	bne.n	800b018 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afa2:	2300      	movs	r3, #0
 800afa4:	613b      	str	r3, [r7, #16]
 800afa6:	4b1e      	ldr	r3, [pc, #120]	; (800b020 <HAL_PCD_MspInit+0xa0>)
 800afa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afaa:	4a1d      	ldr	r2, [pc, #116]	; (800b020 <HAL_PCD_MspInit+0xa0>)
 800afac:	f043 0301 	orr.w	r3, r3, #1
 800afb0:	6313      	str	r3, [r2, #48]	; 0x30
 800afb2:	4b1b      	ldr	r3, [pc, #108]	; (800b020 <HAL_PCD_MspInit+0xa0>)
 800afb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	613b      	str	r3, [r7, #16]
 800afbc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800afbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800afc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afc4:	2302      	movs	r3, #2
 800afc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc8:	2300      	movs	r3, #0
 800afca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afcc:	2303      	movs	r3, #3
 800afce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800afd0:	230a      	movs	r3, #10
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afd4:	f107 0314 	add.w	r3, r7, #20
 800afd8:	4619      	mov	r1, r3
 800afda:	4812      	ldr	r0, [pc, #72]	; (800b024 <HAL_PCD_MspInit+0xa4>)
 800afdc:	f7f8 f8e2 	bl	80031a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800afe0:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <HAL_PCD_MspInit+0xa0>)
 800afe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe4:	4a0e      	ldr	r2, [pc, #56]	; (800b020 <HAL_PCD_MspInit+0xa0>)
 800afe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afea:	6353      	str	r3, [r2, #52]	; 0x34
 800afec:	2300      	movs	r3, #0
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	4b0b      	ldr	r3, [pc, #44]	; (800b020 <HAL_PCD_MspInit+0xa0>)
 800aff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff4:	4a0a      	ldr	r2, [pc, #40]	; (800b020 <HAL_PCD_MspInit+0xa0>)
 800aff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800affa:	6453      	str	r3, [r2, #68]	; 0x44
 800affc:	4b08      	ldr	r3, [pc, #32]	; (800b020 <HAL_PCD_MspInit+0xa0>)
 800affe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b004:	60fb      	str	r3, [r7, #12]
 800b006:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b008:	2200      	movs	r2, #0
 800b00a:	2100      	movs	r1, #0
 800b00c:	2043      	movs	r0, #67	; 0x43
 800b00e:	f7f7 fc74 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b012:	2043      	movs	r0, #67	; 0x43
 800b014:	f7f7 fc8d 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b018:	bf00      	nop
 800b01a:	3728      	adds	r7, #40	; 0x28
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	40023800 	.word	0x40023800
 800b024:	40020000 	.word	0x40020000

0800b028 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b03c:	4619      	mov	r1, r3
 800b03e:	4610      	mov	r0, r2
 800b040:	f7fe fcd0 	bl	80099e4 <USBD_LL_SetupStage>
}
 800b044:	bf00      	nop
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b05e:	78fa      	ldrb	r2, [r7, #3]
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	4613      	mov	r3, r2
 800b064:	00db      	lsls	r3, r3, #3
 800b066:	1a9b      	subs	r3, r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	440b      	add	r3, r1
 800b06c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	78fb      	ldrb	r3, [r7, #3]
 800b074:	4619      	mov	r1, r3
 800b076:	f7fe fd0a 	bl	8009a8e <USBD_LL_DataOutStage>
}
 800b07a:	bf00      	nop
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b082      	sub	sp, #8
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	460b      	mov	r3, r1
 800b08c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b094:	78fa      	ldrb	r2, [r7, #3]
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	4613      	mov	r3, r2
 800b09a:	00db      	lsls	r3, r3, #3
 800b09c:	1a9b      	subs	r3, r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	440b      	add	r3, r1
 800b0a2:	3348      	adds	r3, #72	; 0x48
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	78fb      	ldrb	r3, [r7, #3]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	f7fe fd53 	bl	8009b54 <USBD_LL_DataInStage>
}
 800b0ae:	bf00      	nop
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b082      	sub	sp, #8
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fe fe67 	bl	8009d98 <USBD_LL_SOF>
}
 800b0ca:	bf00      	nop
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d102      	bne.n	800b0ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73fb      	strb	r3, [r7, #15]
 800b0ea:	e008      	b.n	800b0fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d102      	bne.n	800b0fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	73fb      	strb	r3, [r7, #15]
 800b0f8:	e001      	b.n	800b0fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b0fa:	f7f6 f8f3 	bl	80012e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b104:	7bfa      	ldrb	r2, [r7, #15]
 800b106:	4611      	mov	r1, r2
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fe fe07 	bl	8009d1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b114:	4618      	mov	r0, r3
 800b116:	f7fe fdb3 	bl	8009c80 <USBD_LL_Reset>
}
 800b11a:	bf00      	nop
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
	...

0800b124 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b132:	4618      	mov	r0, r3
 800b134:	f7fe fe02 	bl	8009d3c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	6812      	ldr	r2, [r2, #0]
 800b146:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b14a:	f043 0301 	orr.w	r3, r3, #1
 800b14e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a1b      	ldr	r3, [r3, #32]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d005      	beq.n	800b164 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b158:	4b04      	ldr	r3, [pc, #16]	; (800b16c <HAL_PCD_SuspendCallback+0x48>)
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	4a03      	ldr	r2, [pc, #12]	; (800b16c <HAL_PCD_SuspendCallback+0x48>)
 800b15e:	f043 0306 	orr.w	r3, r3, #6
 800b162:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	e000ed00 	.word	0xe000ed00

0800b170 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fe fdf2 	bl	8009d68 <USBD_LL_Resume>
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b19e:	78fa      	ldrb	r2, [r7, #3]
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe fe40 	bl	8009e28 <USBD_LL_IsoOUTIncomplete>
}
 800b1a8:	bf00      	nop
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b1c2:	78fa      	ldrb	r2, [r7, #3]
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fe fe08 	bl	8009ddc <USBD_LL_IsoINIncomplete>
}
 800b1cc:	bf00      	nop
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fe fe46 	bl	8009e74 <USBD_LL_DevConnected>
}
 800b1e8:	bf00      	nop
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fe fe43 	bl	8009e8a <USBD_LL_DevDisconnected>
}
 800b204:	bf00      	nop
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d13c      	bne.n	800b296 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b21c:	4a20      	ldr	r2, [pc, #128]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a1e      	ldr	r2, [pc, #120]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b228:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b22c:	4b1c      	ldr	r3, [pc, #112]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b22e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b232:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b234:	4b1a      	ldr	r3, [pc, #104]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b236:	2204      	movs	r2, #4
 800b238:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b23a:	4b19      	ldr	r3, [pc, #100]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b23c:	2202      	movs	r2, #2
 800b23e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b240:	4b17      	ldr	r3, [pc, #92]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b242:	2200      	movs	r2, #0
 800b244:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b246:	4b16      	ldr	r3, [pc, #88]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b248:	2202      	movs	r2, #2
 800b24a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b24c:	4b14      	ldr	r3, [pc, #80]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b24e:	2200      	movs	r2, #0
 800b250:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b252:	4b13      	ldr	r3, [pc, #76]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b254:	2200      	movs	r2, #0
 800b256:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b258:	4b11      	ldr	r3, [pc, #68]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b25e:	4b10      	ldr	r3, [pc, #64]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b260:	2200      	movs	r2, #0
 800b262:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b264:	4b0e      	ldr	r3, [pc, #56]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b266:	2200      	movs	r2, #0
 800b268:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b26a:	480d      	ldr	r0, [pc, #52]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b26c:	f7f8 fb43 	bl	80038f6 <HAL_PCD_Init>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b276:	f7f6 f835 	bl	80012e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b27a:	2180      	movs	r1, #128	; 0x80
 800b27c:	4808      	ldr	r0, [pc, #32]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b27e:	f7f9 fca0 	bl	8004bc2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b282:	2240      	movs	r2, #64	; 0x40
 800b284:	2100      	movs	r1, #0
 800b286:	4806      	ldr	r0, [pc, #24]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b288:	f7f9 fc54 	bl	8004b34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b28c:	2280      	movs	r2, #128	; 0x80
 800b28e:	2101      	movs	r1, #1
 800b290:	4803      	ldr	r0, [pc, #12]	; (800b2a0 <USBD_LL_Init+0x94>)
 800b292:	f7f9 fc4f 	bl	8004b34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	20001e64 	.word	0x20001e64

0800b2a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7f8 fc38 	bl	8003b30 <HAL_PCD_Start>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 f942 	bl	800b550 <USBD_Get_USB_Status>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	4608      	mov	r0, r1
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	70fb      	strb	r3, [r7, #3]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70bb      	strb	r3, [r7, #2]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b302:	78bb      	ldrb	r3, [r7, #2]
 800b304:	883a      	ldrh	r2, [r7, #0]
 800b306:	78f9      	ldrb	r1, [r7, #3]
 800b308:	f7f9 f81c 	bl	8004344 <HAL_PCD_EP_Open>
 800b30c:	4603      	mov	r3, r0
 800b30e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b310:	7bfb      	ldrb	r3, [r7, #15]
 800b312:	4618      	mov	r0, r3
 800b314:	f000 f91c 	bl	800b550 <USBD_Get_USB_Status>
 800b318:	4603      	mov	r3, r0
 800b31a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b084      	sub	sp, #16
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	460b      	mov	r3, r1
 800b330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b340:	78fa      	ldrb	r2, [r7, #3]
 800b342:	4611      	mov	r1, r2
 800b344:	4618      	mov	r0, r3
 800b346:	f7f9 f865 	bl	8004414 <HAL_PCD_EP_Close>
 800b34a:	4603      	mov	r3, r0
 800b34c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	4618      	mov	r0, r3
 800b352:	f000 f8fd 	bl	800b550 <USBD_Get_USB_Status>
 800b356:	4603      	mov	r3, r0
 800b358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	460b      	mov	r3, r1
 800b36e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b370:	2300      	movs	r3, #0
 800b372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b37e:	78fa      	ldrb	r2, [r7, #3]
 800b380:	4611      	mov	r1, r2
 800b382:	4618      	mov	r0, r3
 800b384:	f7f9 f93d 	bl	8004602 <HAL_PCD_EP_SetStall>
 800b388:	4603      	mov	r3, r0
 800b38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 f8de 	bl	800b550 <USBD_Get_USB_Status>
 800b394:	4603      	mov	r3, r0
 800b396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b398:	7bbb      	ldrb	r3, [r7, #14]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3bc:	78fa      	ldrb	r2, [r7, #3]
 800b3be:	4611      	mov	r1, r2
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7f9 f982 	bl	80046ca <HAL_PCD_EP_ClrStall>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f000 f8bf 	bl	800b550 <USBD_Get_USB_Status>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b3f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	da0b      	bge.n	800b414 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b3fc:	78fb      	ldrb	r3, [r7, #3]
 800b3fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b402:	68f9      	ldr	r1, [r7, #12]
 800b404:	4613      	mov	r3, r2
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	1a9b      	subs	r3, r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	440b      	add	r3, r1
 800b40e:	333e      	adds	r3, #62	; 0x3e
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	e00b      	b.n	800b42c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b414:	78fb      	ldrb	r3, [r7, #3]
 800b416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b41a:	68f9      	ldr	r1, [r7, #12]
 800b41c:	4613      	mov	r3, r2
 800b41e:	00db      	lsls	r3, r3, #3
 800b420:	1a9b      	subs	r3, r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	440b      	add	r3, r1
 800b426:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b42a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	460b      	mov	r3, r1
 800b442:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b448:	2300      	movs	r3, #0
 800b44a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b452:	78fa      	ldrb	r2, [r7, #3]
 800b454:	4611      	mov	r1, r2
 800b456:	4618      	mov	r0, r3
 800b458:	f7f8 ff4f 	bl	80042fa <HAL_PCD_SetAddress>
 800b45c:	4603      	mov	r3, r0
 800b45e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b460:	7bfb      	ldrb	r3, [r7, #15]
 800b462:	4618      	mov	r0, r3
 800b464:	f000 f874 	bl	800b550 <USBD_Get_USB_Status>
 800b468:	4603      	mov	r3, r0
 800b46a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b46c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b086      	sub	sp, #24
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	60f8      	str	r0, [r7, #12]
 800b47e:	607a      	str	r2, [r7, #4]
 800b480:	603b      	str	r3, [r7, #0]
 800b482:	460b      	mov	r3, r1
 800b484:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b486:	2300      	movs	r3, #0
 800b488:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b48a:	2300      	movs	r3, #0
 800b48c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b494:	7af9      	ldrb	r1, [r7, #11]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	f7f9 f868 	bl	800456e <HAL_PCD_EP_Transmit>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 f853 	bl	800b550 <USBD_Get_USB_Status>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	607a      	str	r2, [r7, #4]
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b4d6:	7af9      	ldrb	r1, [r7, #11]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	f7f8 ffe4 	bl	80044a8 <HAL_PCD_EP_Receive>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4e4:	7dfb      	ldrb	r3, [r7, #23]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 f832 	bl	800b550 <USBD_Get_USB_Status>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b082      	sub	sp, #8
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	460b      	mov	r3, r1
 800b504:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b50c:	78fa      	ldrb	r2, [r7, #3]
 800b50e:	4611      	mov	r1, r2
 800b510:	4618      	mov	r0, r3
 800b512:	f7f9 f814 	bl	800453e <HAL_PCD_EP_GetRxCount>
 800b516:	4603      	mov	r3, r0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b528:	4b03      	ldr	r3, [pc, #12]	; (800b538 <USBD_static_malloc+0x18>)
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	370c      	adds	r7, #12
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	20000214 	.word	0x20000214

0800b53c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]

}
 800b544:	bf00      	nop
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	4603      	mov	r3, r0
 800b558:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b55a:	2300      	movs	r3, #0
 800b55c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b55e:	79fb      	ldrb	r3, [r7, #7]
 800b560:	2b03      	cmp	r3, #3
 800b562:	d817      	bhi.n	800b594 <USBD_Get_USB_Status+0x44>
 800b564:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <USBD_Get_USB_Status+0x1c>)
 800b566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56a:	bf00      	nop
 800b56c:	0800b57d 	.word	0x0800b57d
 800b570:	0800b583 	.word	0x0800b583
 800b574:	0800b589 	.word	0x0800b589
 800b578:	0800b58f 	.word	0x0800b58f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b57c:	2300      	movs	r3, #0
 800b57e:	73fb      	strb	r3, [r7, #15]
    break;
 800b580:	e00b      	b.n	800b59a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b582:	2303      	movs	r3, #3
 800b584:	73fb      	strb	r3, [r7, #15]
    break;
 800b586:	e008      	b.n	800b59a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b588:	2301      	movs	r3, #1
 800b58a:	73fb      	strb	r3, [r7, #15]
    break;
 800b58c:	e005      	b.n	800b59a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b58e:	2303      	movs	r3, #3
 800b590:	73fb      	strb	r3, [r7, #15]
    break;
 800b592:	e002      	b.n	800b59a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b594:	2303      	movs	r3, #3
 800b596:	73fb      	strb	r3, [r7, #15]
    break;
 800b598:	bf00      	nop
  }
  return usb_status;
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <__errno>:
 800b5a8:	4b01      	ldr	r3, [pc, #4]	; (800b5b0 <__errno+0x8>)
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	20000184 	.word	0x20000184

0800b5b4 <__libc_init_array>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	4d0d      	ldr	r5, [pc, #52]	; (800b5ec <__libc_init_array+0x38>)
 800b5b8:	4c0d      	ldr	r4, [pc, #52]	; (800b5f0 <__libc_init_array+0x3c>)
 800b5ba:	1b64      	subs	r4, r4, r5
 800b5bc:	10a4      	asrs	r4, r4, #2
 800b5be:	2600      	movs	r6, #0
 800b5c0:	42a6      	cmp	r6, r4
 800b5c2:	d109      	bne.n	800b5d8 <__libc_init_array+0x24>
 800b5c4:	4d0b      	ldr	r5, [pc, #44]	; (800b5f4 <__libc_init_array+0x40>)
 800b5c6:	4c0c      	ldr	r4, [pc, #48]	; (800b5f8 <__libc_init_array+0x44>)
 800b5c8:	f000 f934 	bl	800b834 <_init>
 800b5cc:	1b64      	subs	r4, r4, r5
 800b5ce:	10a4      	asrs	r4, r4, #2
 800b5d0:	2600      	movs	r6, #0
 800b5d2:	42a6      	cmp	r6, r4
 800b5d4:	d105      	bne.n	800b5e2 <__libc_init_array+0x2e>
 800b5d6:	bd70      	pop	{r4, r5, r6, pc}
 800b5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5dc:	4798      	blx	r3
 800b5de:	3601      	adds	r6, #1
 800b5e0:	e7ee      	b.n	800b5c0 <__libc_init_array+0xc>
 800b5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5e6:	4798      	blx	r3
 800b5e8:	3601      	adds	r6, #1
 800b5ea:	e7f2      	b.n	800b5d2 <__libc_init_array+0x1e>
 800b5ec:	0800b8d8 	.word	0x0800b8d8
 800b5f0:	0800b8d8 	.word	0x0800b8d8
 800b5f4:	0800b8d8 	.word	0x0800b8d8
 800b5f8:	0800b8dc 	.word	0x0800b8dc

0800b5fc <malloc>:
 800b5fc:	4b02      	ldr	r3, [pc, #8]	; (800b608 <malloc+0xc>)
 800b5fe:	4601      	mov	r1, r0
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	f000 b85b 	b.w	800b6bc <_malloc_r>
 800b606:	bf00      	nop
 800b608:	20000184 	.word	0x20000184

0800b60c <memset>:
 800b60c:	4402      	add	r2, r0
 800b60e:	4603      	mov	r3, r0
 800b610:	4293      	cmp	r3, r2
 800b612:	d100      	bne.n	800b616 <memset+0xa>
 800b614:	4770      	bx	lr
 800b616:	f803 1b01 	strb.w	r1, [r3], #1
 800b61a:	e7f9      	b.n	800b610 <memset+0x4>

0800b61c <_free_r>:
 800b61c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b61e:	2900      	cmp	r1, #0
 800b620:	d048      	beq.n	800b6b4 <_free_r+0x98>
 800b622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b626:	9001      	str	r0, [sp, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f1a1 0404 	sub.w	r4, r1, #4
 800b62e:	bfb8      	it	lt
 800b630:	18e4      	addlt	r4, r4, r3
 800b632:	f000 f8b5 	bl	800b7a0 <__malloc_lock>
 800b636:	4a20      	ldr	r2, [pc, #128]	; (800b6b8 <_free_r+0x9c>)
 800b638:	9801      	ldr	r0, [sp, #4]
 800b63a:	6813      	ldr	r3, [r2, #0]
 800b63c:	4615      	mov	r5, r2
 800b63e:	b933      	cbnz	r3, 800b64e <_free_r+0x32>
 800b640:	6063      	str	r3, [r4, #4]
 800b642:	6014      	str	r4, [r2, #0]
 800b644:	b003      	add	sp, #12
 800b646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b64a:	f000 b8af 	b.w	800b7ac <__malloc_unlock>
 800b64e:	42a3      	cmp	r3, r4
 800b650:	d90b      	bls.n	800b66a <_free_r+0x4e>
 800b652:	6821      	ldr	r1, [r4, #0]
 800b654:	1862      	adds	r2, r4, r1
 800b656:	4293      	cmp	r3, r2
 800b658:	bf04      	itt	eq
 800b65a:	681a      	ldreq	r2, [r3, #0]
 800b65c:	685b      	ldreq	r3, [r3, #4]
 800b65e:	6063      	str	r3, [r4, #4]
 800b660:	bf04      	itt	eq
 800b662:	1852      	addeq	r2, r2, r1
 800b664:	6022      	streq	r2, [r4, #0]
 800b666:	602c      	str	r4, [r5, #0]
 800b668:	e7ec      	b.n	800b644 <_free_r+0x28>
 800b66a:	461a      	mov	r2, r3
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	b10b      	cbz	r3, 800b674 <_free_r+0x58>
 800b670:	42a3      	cmp	r3, r4
 800b672:	d9fa      	bls.n	800b66a <_free_r+0x4e>
 800b674:	6811      	ldr	r1, [r2, #0]
 800b676:	1855      	adds	r5, r2, r1
 800b678:	42a5      	cmp	r5, r4
 800b67a:	d10b      	bne.n	800b694 <_free_r+0x78>
 800b67c:	6824      	ldr	r4, [r4, #0]
 800b67e:	4421      	add	r1, r4
 800b680:	1854      	adds	r4, r2, r1
 800b682:	42a3      	cmp	r3, r4
 800b684:	6011      	str	r1, [r2, #0]
 800b686:	d1dd      	bne.n	800b644 <_free_r+0x28>
 800b688:	681c      	ldr	r4, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	6053      	str	r3, [r2, #4]
 800b68e:	4421      	add	r1, r4
 800b690:	6011      	str	r1, [r2, #0]
 800b692:	e7d7      	b.n	800b644 <_free_r+0x28>
 800b694:	d902      	bls.n	800b69c <_free_r+0x80>
 800b696:	230c      	movs	r3, #12
 800b698:	6003      	str	r3, [r0, #0]
 800b69a:	e7d3      	b.n	800b644 <_free_r+0x28>
 800b69c:	6825      	ldr	r5, [r4, #0]
 800b69e:	1961      	adds	r1, r4, r5
 800b6a0:	428b      	cmp	r3, r1
 800b6a2:	bf04      	itt	eq
 800b6a4:	6819      	ldreq	r1, [r3, #0]
 800b6a6:	685b      	ldreq	r3, [r3, #4]
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	bf04      	itt	eq
 800b6ac:	1949      	addeq	r1, r1, r5
 800b6ae:	6021      	streq	r1, [r4, #0]
 800b6b0:	6054      	str	r4, [r2, #4]
 800b6b2:	e7c7      	b.n	800b644 <_free_r+0x28>
 800b6b4:	b003      	add	sp, #12
 800b6b6:	bd30      	pop	{r4, r5, pc}
 800b6b8:	20000434 	.word	0x20000434

0800b6bc <_malloc_r>:
 800b6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6be:	1ccd      	adds	r5, r1, #3
 800b6c0:	f025 0503 	bic.w	r5, r5, #3
 800b6c4:	3508      	adds	r5, #8
 800b6c6:	2d0c      	cmp	r5, #12
 800b6c8:	bf38      	it	cc
 800b6ca:	250c      	movcc	r5, #12
 800b6cc:	2d00      	cmp	r5, #0
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	db01      	blt.n	800b6d6 <_malloc_r+0x1a>
 800b6d2:	42a9      	cmp	r1, r5
 800b6d4:	d903      	bls.n	800b6de <_malloc_r+0x22>
 800b6d6:	230c      	movs	r3, #12
 800b6d8:	6033      	str	r3, [r6, #0]
 800b6da:	2000      	movs	r0, #0
 800b6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6de:	f000 f85f 	bl	800b7a0 <__malloc_lock>
 800b6e2:	4921      	ldr	r1, [pc, #132]	; (800b768 <_malloc_r+0xac>)
 800b6e4:	680a      	ldr	r2, [r1, #0]
 800b6e6:	4614      	mov	r4, r2
 800b6e8:	b99c      	cbnz	r4, 800b712 <_malloc_r+0x56>
 800b6ea:	4f20      	ldr	r7, [pc, #128]	; (800b76c <_malloc_r+0xb0>)
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	b923      	cbnz	r3, 800b6fa <_malloc_r+0x3e>
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f000 f844 	bl	800b780 <_sbrk_r>
 800b6f8:	6038      	str	r0, [r7, #0]
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f000 f83f 	bl	800b780 <_sbrk_r>
 800b702:	1c43      	adds	r3, r0, #1
 800b704:	d123      	bne.n	800b74e <_malloc_r+0x92>
 800b706:	230c      	movs	r3, #12
 800b708:	6033      	str	r3, [r6, #0]
 800b70a:	4630      	mov	r0, r6
 800b70c:	f000 f84e 	bl	800b7ac <__malloc_unlock>
 800b710:	e7e3      	b.n	800b6da <_malloc_r+0x1e>
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	1b5b      	subs	r3, r3, r5
 800b716:	d417      	bmi.n	800b748 <_malloc_r+0x8c>
 800b718:	2b0b      	cmp	r3, #11
 800b71a:	d903      	bls.n	800b724 <_malloc_r+0x68>
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	441c      	add	r4, r3
 800b720:	6025      	str	r5, [r4, #0]
 800b722:	e004      	b.n	800b72e <_malloc_r+0x72>
 800b724:	6863      	ldr	r3, [r4, #4]
 800b726:	42a2      	cmp	r2, r4
 800b728:	bf0c      	ite	eq
 800b72a:	600b      	streq	r3, [r1, #0]
 800b72c:	6053      	strne	r3, [r2, #4]
 800b72e:	4630      	mov	r0, r6
 800b730:	f000 f83c 	bl	800b7ac <__malloc_unlock>
 800b734:	f104 000b 	add.w	r0, r4, #11
 800b738:	1d23      	adds	r3, r4, #4
 800b73a:	f020 0007 	bic.w	r0, r0, #7
 800b73e:	1ac2      	subs	r2, r0, r3
 800b740:	d0cc      	beq.n	800b6dc <_malloc_r+0x20>
 800b742:	1a1b      	subs	r3, r3, r0
 800b744:	50a3      	str	r3, [r4, r2]
 800b746:	e7c9      	b.n	800b6dc <_malloc_r+0x20>
 800b748:	4622      	mov	r2, r4
 800b74a:	6864      	ldr	r4, [r4, #4]
 800b74c:	e7cc      	b.n	800b6e8 <_malloc_r+0x2c>
 800b74e:	1cc4      	adds	r4, r0, #3
 800b750:	f024 0403 	bic.w	r4, r4, #3
 800b754:	42a0      	cmp	r0, r4
 800b756:	d0e3      	beq.n	800b720 <_malloc_r+0x64>
 800b758:	1a21      	subs	r1, r4, r0
 800b75a:	4630      	mov	r0, r6
 800b75c:	f000 f810 	bl	800b780 <_sbrk_r>
 800b760:	3001      	adds	r0, #1
 800b762:	d1dd      	bne.n	800b720 <_malloc_r+0x64>
 800b764:	e7cf      	b.n	800b706 <_malloc_r+0x4a>
 800b766:	bf00      	nop
 800b768:	20000434 	.word	0x20000434
 800b76c:	20000438 	.word	0x20000438

0800b770 <realloc>:
 800b770:	4b02      	ldr	r3, [pc, #8]	; (800b77c <realloc+0xc>)
 800b772:	460a      	mov	r2, r1
 800b774:	4601      	mov	r1, r0
 800b776:	6818      	ldr	r0, [r3, #0]
 800b778:	f000 b81e 	b.w	800b7b8 <_realloc_r>
 800b77c:	20000184 	.word	0x20000184

0800b780 <_sbrk_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4d06      	ldr	r5, [pc, #24]	; (800b79c <_sbrk_r+0x1c>)
 800b784:	2300      	movs	r3, #0
 800b786:	4604      	mov	r4, r0
 800b788:	4608      	mov	r0, r1
 800b78a:	602b      	str	r3, [r5, #0]
 800b78c:	f7f5 fc64 	bl	8001058 <_sbrk>
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	d102      	bne.n	800b79a <_sbrk_r+0x1a>
 800b794:	682b      	ldr	r3, [r5, #0]
 800b796:	b103      	cbz	r3, 800b79a <_sbrk_r+0x1a>
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	bd38      	pop	{r3, r4, r5, pc}
 800b79c:	2000226c 	.word	0x2000226c

0800b7a0 <__malloc_lock>:
 800b7a0:	4801      	ldr	r0, [pc, #4]	; (800b7a8 <__malloc_lock+0x8>)
 800b7a2:	f000 b82f 	b.w	800b804 <__retarget_lock_acquire_recursive>
 800b7a6:	bf00      	nop
 800b7a8:	20002274 	.word	0x20002274

0800b7ac <__malloc_unlock>:
 800b7ac:	4801      	ldr	r0, [pc, #4]	; (800b7b4 <__malloc_unlock+0x8>)
 800b7ae:	f000 b82a 	b.w	800b806 <__retarget_lock_release_recursive>
 800b7b2:	bf00      	nop
 800b7b4:	20002274 	.word	0x20002274

0800b7b8 <_realloc_r>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	4607      	mov	r7, r0
 800b7bc:	4614      	mov	r4, r2
 800b7be:	460e      	mov	r6, r1
 800b7c0:	b921      	cbnz	r1, 800b7cc <_realloc_r+0x14>
 800b7c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	f7ff bf78 	b.w	800b6bc <_malloc_r>
 800b7cc:	b922      	cbnz	r2, 800b7d8 <_realloc_r+0x20>
 800b7ce:	f7ff ff25 	bl	800b61c <_free_r>
 800b7d2:	4625      	mov	r5, r4
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7d8:	f000 f824 	bl	800b824 <_malloc_usable_size_r>
 800b7dc:	42a0      	cmp	r0, r4
 800b7de:	d20f      	bcs.n	800b800 <_realloc_r+0x48>
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	f7ff ff6a 	bl	800b6bc <_malloc_r>
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d0f2      	beq.n	800b7d4 <_realloc_r+0x1c>
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	f000 f809 	bl	800b808 <memcpy>
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	4638      	mov	r0, r7
 800b7fa:	f7ff ff0f 	bl	800b61c <_free_r>
 800b7fe:	e7e9      	b.n	800b7d4 <_realloc_r+0x1c>
 800b800:	4635      	mov	r5, r6
 800b802:	e7e7      	b.n	800b7d4 <_realloc_r+0x1c>

0800b804 <__retarget_lock_acquire_recursive>:
 800b804:	4770      	bx	lr

0800b806 <__retarget_lock_release_recursive>:
 800b806:	4770      	bx	lr

0800b808 <memcpy>:
 800b808:	440a      	add	r2, r1
 800b80a:	4291      	cmp	r1, r2
 800b80c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b810:	d100      	bne.n	800b814 <memcpy+0xc>
 800b812:	4770      	bx	lr
 800b814:	b510      	push	{r4, lr}
 800b816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b81a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b81e:	4291      	cmp	r1, r2
 800b820:	d1f9      	bne.n	800b816 <memcpy+0xe>
 800b822:	bd10      	pop	{r4, pc}

0800b824 <_malloc_usable_size_r>:
 800b824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b828:	1f18      	subs	r0, r3, #4
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	bfbc      	itt	lt
 800b82e:	580b      	ldrlt	r3, [r1, r0]
 800b830:	18c0      	addlt	r0, r0, r3
 800b832:	4770      	bx	lr

0800b834 <_init>:
 800b834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b836:	bf00      	nop
 800b838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83a:	bc08      	pop	{r3}
 800b83c:	469e      	mov	lr, r3
 800b83e:	4770      	bx	lr

0800b840 <_fini>:
 800b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b842:	bf00      	nop
 800b844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b846:	bc08      	pop	{r3}
 800b848:	469e      	mov	lr, r3
 800b84a:	4770      	bx	lr
