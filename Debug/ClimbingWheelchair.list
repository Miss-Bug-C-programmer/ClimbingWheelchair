
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f794  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800f948  0800f948  0001f948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe90  0800fe90  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe90  0800fe90  0001fe90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe98  0800fe98  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe98  0800fe98  0001fe98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe9c  0800fe9c  0001fe9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800fea0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000248  080100e4  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  080100e4  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3fd  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b8  00000000  00000000  0003d671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  00041730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  00042c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bb8  00000000  00000000  00043ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee17  00000000  00000000  0006bba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e234e  00000000  00000000  0008a9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016cd0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e58  00000000  00000000  0016cd60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000248 	.word	0x20000248
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f92c 	.word	0x0800f92c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000024c 	.word	0x2000024c
 80001ec:	0800f92c 	.word	0x0800f92c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f004 f83f 	bl	8004fd4 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f004 f82a 	bl	8004fd4 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f003 ff91 	bl	8004fd4 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <hubMotor_Init+0x2c>)
 80013d0:	f006 f828 	bl	8007424 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <hubMotor_Init+0x2c>)
 80013dc:	f006 f822 	bl	8007424 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e6:	4802      	ldr	r0, [pc, #8]	; (80013f0 <hubMotor_Init+0x2c>)
 80013e8:	f006 f81c 	bl	8007424 <HAL_GPIO_WritePin>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	00000000 	.word	0x00000000

080013f8 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001402:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff f856 	bl	80004b8 <__aeabi_f2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <send_HubMotor+0x1a8>)
 8001412:	f7ff f8a9 	bl	8000568 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	a35e      	add	r3, pc, #376	; (adr r3, 8001598 <send_HubMotor+0x1a0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f9ca 	bl	80007bc <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fb4a 	bl	8000ac8 <__aeabi_d2iz>
 8001434:	4603      	mov	r3, r0
 8001436:	b21b      	sxth	r3, r3
 8001438:	b29b      	uxth	r3, r3
 800143a:	425b      	negs	r3, r3
 800143c:	b29b      	uxth	r3, r3
 800143e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f7ff f839 	bl	80004b8 <__aeabi_f2d>
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <send_HubMotor+0x1a8>)
 800144c:	f7ff f88c 	bl	8000568 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	a34f      	add	r3, pc, #316	; (adr r3, 8001598 <send_HubMotor+0x1a0>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff f9ad 	bl	80007bc <__aeabi_ddiv>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fb2d 	bl	8000ac8 <__aeabi_d2iz>
 800146e:	4603      	mov	r3, r0
 8001470:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 8001472:	23aa      	movs	r3, #170	; 0xaa
 8001474:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 8001476:	23a4      	movs	r3, #164	; 0xa4
 8001478:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 800147a:	230e      	movs	r3, #14
 800147c:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 800148a:	23c8      	movs	r3, #200	; 0xc8
 800148c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 800148e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	b29b      	uxth	r3, r3
 8001494:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 8001498:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800149a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 800149e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014a2:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 80014a4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014a8:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 300;
 80014aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014ae:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 80014b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 80014ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 80014c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014c4:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 80014c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014ca:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 80014cc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014d0:	121b      	asrs	r3, r3, #8
 80014d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 80014d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 80014dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014e0:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 80014e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014e6:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 80014e8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014ec:	121b      	asrs	r3, r3, #8
 80014ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 80014f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014f4:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 80014f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fc:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 80014fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001502:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001504:	7b3b      	ldrb	r3, [r7, #12]
 8001506:	b29a      	uxth	r2, r3
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b29a      	uxth	r2, r3
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 8001520:	7c3b      	ldrb	r3, [r7, #16]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b29a      	uxth	r2, r3
 8001528:	7c7b      	ldrb	r3, [r7, #17]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29a      	uxth	r2, r3
 8001530:	7cbb      	ldrb	r3, [r7, #18]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 8001538:	7cfb      	ldrb	r3, [r7, #19]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29a      	uxth	r2, r3
 8001540:	7d3b      	ldrb	r3, [r7, #20]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29a      	uxth	r2, r3
 8001548:	7d7b      	ldrb	r3, [r7, #21]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001550:	7dbb      	ldrb	r3, [r7, #22]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29a      	uxth	r2, r3
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7e3b      	ldrb	r3, [r7, #24]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4413      	add	r3, r2
 8001566:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001568:	7e7b      	ldrb	r3, [r7, #25]
 800156a:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 800156c:	4413      	add	r3, r2
 800156e:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001570:	8bfb      	ldrh	r3, [r7, #30]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15, 50);
 8001576:	f107 010c 	add.w	r1, r7, #12
 800157a:	2332      	movs	r3, #50	; 0x32
 800157c:	220f      	movs	r2, #15
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <send_HubMotor+0x1ac>)
 8001580:	f00a fe94 	bl	800c2ac <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 8001584:	220f      	movs	r2, #15
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <send_HubMotor+0x1b0>)
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <send_HubMotor+0x1ac>)
 800158a:	f00a ff29 	bl	800c3e0 <HAL_UART_Receive_DMA>
}
 800158e:	bf00      	nop
 8001590:	3730      	adds	r7, #48	; 0x30
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	54442d18 	.word	0x54442d18
 800159c:	401921fb 	.word	0x401921fb
 80015a0:	40b00000 	.word	0x40b00000
 80015a4:	20000718 	.word	0x20000718
 80015a8:	2000059c 	.word	0x2000059c

080015ac <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 80015b0:	2201      	movs	r2, #1
 80015b2:	2110      	movs	r1, #16
 80015b4:	481c      	ldr	r0, [pc, #112]	; (8001628 <ADC_Init+0x7c>)
 80015b6:	f005 ff35 	bl	8007424 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 80015ba:	2200      	movs	r2, #0
 80015bc:	2120      	movs	r1, #32
 80015be:	481b      	ldr	r0, [pc, #108]	; (800162c <ADC_Init+0x80>)
 80015c0:	f005 ff30 	bl	8007424 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 80015c4:	2200      	movs	r2, #0
 80015c6:	2110      	movs	r1, #16
 80015c8:	4818      	ldr	r0, [pc, #96]	; (800162c <ADC_Init+0x80>)
 80015ca:	f005 ff2b 	bl	8007424 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f003 fd0c 	bl	8004fec <HAL_Delay>
	AD7606_RST_HIGH;
 80015d4:	2201      	movs	r2, #1
 80015d6:	2110      	movs	r1, #16
 80015d8:	4814      	ldr	r0, [pc, #80]	; (800162c <ADC_Init+0x80>)
 80015da:	f005 ff23 	bl	8007424 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015de:	2001      	movs	r0, #1
 80015e0:	f003 fd04 	bl	8004fec <HAL_Delay>
	AD7606_RST_LOW;
 80015e4:	2200      	movs	r2, #0
 80015e6:	2110      	movs	r1, #16
 80015e8:	4810      	ldr	r0, [pc, #64]	; (800162c <ADC_Init+0x80>)
 80015ea:	f005 ff1b 	bl	8007424 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 80015ee:	2200      	movs	r2, #0
 80015f0:	2101      	movs	r1, #1
 80015f2:	480e      	ldr	r0, [pc, #56]	; (800162c <ADC_Init+0x80>)
 80015f4:	f005 ff16 	bl	8007424 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f003 fcf7 	bl	8004fec <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2102      	movs	r1, #2
 8001602:	480a      	ldr	r0, [pc, #40]	; (800162c <ADC_Init+0x80>)
 8001604:	f005 ff0e 	bl	8007424 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2104      	movs	r1, #4
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <ADC_Init+0x80>)
 800160e:	f005 ff09 	bl	8007424 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2108      	movs	r1, #8
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <ADC_Init+0x80>)
 8001618:	f005 ff04 	bl	8007424 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f003 fce5 	bl	8004fec <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40020000 	.word	0x40020000
 800162c:	40020800 	.word	0x40020800

08001630 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 8001634:	2200      	movs	r2, #0
 8001636:	2120      	movs	r1, #32
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <ADC_DataRequest+0x1c>)
 800163a:	f005 fef3 	bl	8007424 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 800163e:	2201      	movs	r2, #1
 8001640:	2120      	movs	r1, #32
 8001642:	4802      	ldr	r0, [pc, #8]	; (800164c <ADC_DataRequest+0x1c>)
 8001644:	f005 feee 	bl	8007424 <HAL_GPIO_WritePin>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40020800 	.word	0x40020800

08001650 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001658:	2200      	movs	r2, #0
 800165a:	2110      	movs	r1, #16
 800165c:	4808      	ldr	r0, [pc, #32]	; (8001680 <ADC_Read+0x30>)
 800165e:	f005 fee1 	bl	8007424 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8001662:	2302      	movs	r3, #2
 8001664:	2208      	movs	r2, #8
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4806      	ldr	r0, [pc, #24]	; (8001684 <ADC_Read+0x34>)
 800166a:	f007 ffa3 	bl	80095b4 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 800166e:	2201      	movs	r2, #1
 8001670:	2110      	movs	r1, #16
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <ADC_Read+0x30>)
 8001674:	f005 fed6 	bl	8007424 <HAL_GPIO_WritePin>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020000 	.word	0x40020000
 8001684:	20000308 	.word	0x20000308

08001688 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001690:	2100      	movs	r1, #0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f808 	bl	80016a8 <enableMotor>
	brakeMotor(motor, 0);
 8001698:	2100      	movs	r1, #0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f828 	bl	80016f0 <brakeMotor>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	4619      	mov	r1, r3
 80016c0:	f005 feb0 	bl	8007424 <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	461a      	mov	r2, r3
 80016da:	2108      	movs	r1, #8
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <emBrakeMotor+0x20>)
 80016de:	f005 fea1 	bl	8007424 <HAL_GPIO_WritePin>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40020c00 	.word	0x40020c00

080016f0 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69d8      	ldr	r0, [r3, #28]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8c1b      	ldrh	r3, [r3, #32]
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	4619      	mov	r1, r3
 8001708:	f005 fe8c 	bl	8007424 <HAL_GPIO_WritePin>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	4619      	mov	r1, r3
 800172c:	f005 fe7a 	bl	8007424 <HAL_GPIO_WritePin>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 800174a:	edd7 7a00 	vldr	s15, [r7]
 800174e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001880 <setMotorSpeed+0x148>
 8001752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	dd01      	ble.n	8001760 <setMotorSpeed+0x28>
 800175c:	4b49      	ldr	r3, [pc, #292]	; (8001884 <setMotorSpeed+0x14c>)
 800175e:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001760:	6838      	ldr	r0, [r7, #0]
 8001762:	f7fe fea9 	bl	80004b8 <__aeabi_f2d>
 8001766:	a340      	add	r3, pc, #256	; (adr r3, 8001868 <setMotorSpeed+0x130>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7fe fd44 	bl	80001f8 <__aeabi_dsub>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	a33d      	add	r3, pc, #244	; (adr r3, 8001870 <setMotorSpeed+0x138>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7ff f81d 	bl	80007bc <__aeabi_ddiv>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff f9c5 	bl	8000b18 <__aeabi_d2uiz>
 800178e:	4603      	mov	r3, r0
 8001790:	b29b      	uxth	r3, r3
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800179a:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7fe fe8a 	bl	80004b8 <__aeabi_f2d>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	a133      	add	r1, pc, #204	; (adr r1, 8001878 <setMotorSpeed+0x140>)
 80017aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ae:	f7ff f805 	bl	80007bc <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f985 	bl	8000ac8 <__aeabi_d2iz>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 80017c6:	8a7b      	ldrh	r3, [r7, #18]
 80017c8:	085b      	lsrs	r3, r3, #1
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 80017ce:	edd7 7a00 	vldr	s15, [r7]
 80017d2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80017d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	d503      	bpl.n	80017e8 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 80017e0:	2101      	movs	r1, #1
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ff84 	bl	80016f0 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	8a7a      	ldrh	r2, [r7, #18]
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	8b1b      	ldrh	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d105      	bne.n	8001806 <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
 8001804:	e01c      	b.n	8001840 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	8b1b      	ldrh	r3, [r3, #24]
 800180a:	2b04      	cmp	r3, #4
 800180c:	d105      	bne.n	800181a <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	639a      	str	r2, [r3, #56]	; 0x38
 8001818:	e012      	b.n	8001840 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	8b1b      	ldrh	r3, [r3, #24]
 800181e:	2b08      	cmp	r3, #8
 8001820:	d105      	bne.n	800182e <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
 800182c:	e008      	b.n	8001840 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	8b1b      	ldrh	r3, [r3, #24]
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d104      	bne.n	8001840 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8b1b      	ldrh	r3, [r3, #24]
 8001848:	4619      	mov	r1, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f008 fca8 	bl	800a1a0 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	bfb15b57 	.word	0xbfb15b57
 800186c:	3fd09eec 	.word	0x3fd09eec
 8001870:	1172ef0b 	.word	0x1172ef0b
 8001874:	3f9989df 	.word	0x3f9989df
 8001878:	00000000 	.word	0x00000000
 800187c:	412e8480 	.word	0x412e8480
 8001880:	42c80000 	.word	0x42c80000
 8001884:	42c80000 	.word	0x42c80000

08001888 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800189a:	2b01      	cmp	r3, #1
 800189c:	d129      	bne.n	80018f2 <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 800189e:	edd7 7a00 	vldr	s15, [r7]
 80018a2:	eef0 7ae7 	vabs.f32	s15, s15
 80018a6:	ee17 0a90 	vmov	r0, s15
 80018aa:	f7fe fe05 	bl	80004b8 <__aeabi_f2d>
 80018ae:	4604      	mov	r4, r0
 80018b0:	460d      	mov	r5, r1
 80018b2:	6838      	ldr	r0, [r7, #0]
 80018b4:	f7fe fe00 	bl	80004b8 <__aeabi_f2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7fe ff7c 	bl	80007bc <__aeabi_ddiv>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	f7ff f8ce 	bl	8000a74 <__aeabi_dcmpge>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <runMotor+0x60>
	      setMotorDir(motor, 0);
 80018de:	2100      	movs	r1, #0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff17 	bl	8001714 <setMotorDir>
 80018e6:	e032      	b.n	800194e <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 80018e8:	2101      	movs	r1, #1
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ff12 	bl	8001714 <setMotorDir>
 80018f0:	e02d      	b.n	800194e <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d128      	bne.n	800194e <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 80018fc:	edd7 7a00 	vldr	s15, [r7]
 8001900:	eef0 7ae7 	vabs.f32	s15, s15
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7fe fdd6 	bl	80004b8 <__aeabi_f2d>
 800190c:	4604      	mov	r4, r0
 800190e:	460d      	mov	r5, r1
 8001910:	6838      	ldr	r0, [r7, #0]
 8001912:	f7fe fdd1 	bl	80004b8 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4620      	mov	r0, r4
 800191c:	4629      	mov	r1, r5
 800191e:	f7fe ff4d 	bl	80007bc <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f7ff f89f 	bl	8000a74 <__aeabi_dcmpge>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <runMotor+0xbe>
	  setMotorDir(motor, 1);
 800193c:	2101      	movs	r1, #1
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fee8 	bl	8001714 <setMotorDir>
 8001944:	e003      	b.n	800194e <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 8001946:	2100      	movs	r1, #0
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff fee3 	bl	8001714 <setMotorDir>
    }

    HAL_Delay(50);
 800194e:	2032      	movs	r0, #50	; 0x32
 8001950:	f003 fb4c 	bl	8004fec <HAL_Delay>
    brakeMotor(motor, 0);
 8001954:	2100      	movs	r1, #0
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff feca 	bl	80016f0 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 800195c:	edd7 7a00 	vldr	s15, [r7]
 8001960:	eef0 7ae7 	vabs.f32	s15, s15
 8001964:	eeb0 0a67 	vmov.f32	s0, s15
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff fee5 	bl	8001738 <setMotorSpeed>

}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bdb0      	pop	{r4, r5, r7, pc}

08001976 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	889b      	ldrh	r3, [r3, #4]
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f005 fd24 	bl	80073d8 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	799a      	ldrb	r2, [r3, #6]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	79db      	ldrb	r3, [r3, #7]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d004      	beq.n	80019ae <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 80019a4:	f003 fb16 	bl	8004fd4 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 80019ae:	f003 fb11 	bl	8004fd4 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d209      	bcs.n	80019d4 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	799a      	ldrb	r2, [r3, #6]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7a1b      	ldrb	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e004      	b.n	80019de <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	799a      	ldrb	r2, [r3, #6]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 80019f0:	4a30      	ldr	r2, [pc, #192]	; (8001ab4 <MX_CAN1_Init+0xcc>)
 80019f2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 80019f6:	2209      	movs	r2, #9
 80019f8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a0c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a0e:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a14:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a3a:	481d      	ldr	r0, [pc, #116]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a3c:	f003 fafa 	bl	8005034 <HAL_CAN_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001a46:	f001 fd69 	bl	800351c <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfil_1;
  	canfil_1.FilterBank = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
  	canfil_1.FilterIdHigh = 0x0000;
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
  	canfil_1.FilterIdLow = 0x0000;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  	canfil_1.FilterMaskIdHigh = 0x0000;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  	canfil_1.FilterMaskIdLow = 0x0000;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	623b      	str	r3, [r7, #32]
  	canfil_1.SlaveStartFilterBank = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	480e      	ldr	r0, [pc, #56]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a78:	f003 fcf8 	bl	800546c <HAL_CAN_ConfigFilter>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_CAN1_Init+0x9e>
  		Error_Handler();
 8001a82:	f001 fd4b 	bl	800351c <Error_Handler>

  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001a86:	2102      	movs	r1, #2
 8001a88:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a8a:	f004 f8c3 	bl	8005c14 <HAL_CAN_ActivateNotification>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <MX_CAN1_Init+0xb2>
  		return Error_Handler();
 8001a94:	f001 fd42 	bl	800351c <Error_Handler>
 8001a98:	e007      	b.n	8001aaa <MX_CAN1_Init+0xc2>

  	if (HAL_CAN_Start(&hcan1))
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a9c:	f003 fe34 	bl	8005708 <HAL_CAN_Start>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_CAN1_Init+0xc2>
  		return Error_Handler();
 8001aa6:	f001 fd39 	bl	800351c <Error_Handler>


    /* USER CODE END CAN1_Init 2 */

}
 8001aaa:	3728      	adds	r7, #40	; 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000360 	.word	0x20000360
 8001ab4:	40006400 	.word	0x40006400

08001ab8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_CAN_MspInit+0x94>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d133      	bne.n	8001b42 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b12:	2303      	movs	r3, #3
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b22:	2309      	movs	r3, #9
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4809      	ldr	r0, [pc, #36]	; (8001b54 <HAL_CAN_MspInit+0x9c>)
 8001b2e:	f005 f927 	bl	8006d80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2014      	movs	r0, #20
 8001b38:	f004 fbbe 	bl	80062b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b3c:	2014      	movs	r0, #20
 8001b3e:	f004 fbe7 	bl	8006310 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40006400 	.word	0x40006400
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020c00 	.word	0x40020c00

08001b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_DMA_Init+0x3c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <MX_DMA_Init+0x3c>)
 8001b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_DMA_Init+0x3c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	200c      	movs	r0, #12
 8001b80:	f004 fb9a 	bl	80062b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b84:	200c      	movs	r0, #12
 8001b86:	f004 fbc3 	bl	8006310 <HAL_NVIC_EnableIRQ>

}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <ENCODER_Init+0x24>)
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <ENCODER_Init+0x28>)
 8001ba0:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <ENCODER_Init+0x2c>)
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <ENCODER_Init+0x28>)
 8001ba6:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4804      	ldr	r0, [pc, #16]	; (8001bbc <ENCODER_Init+0x24>)
 8001bac:	f000 f83f 	bl	8001c2e <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <ENCODER_Init+0x2c>)
 8001bb4:	f000 f83b 	bl	8001c2e <ENCODER_Set_TxHeader>

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000404 	.word	0x20000404
 8001bc0:	20000360 	.word	0x20000360
 8001bc4:	200003b0 	.word	0x200003b0

08001bc8 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	785a      	ldrb	r2, [r3, #1]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	789a      	ldrb	r2, [r3, #2]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	78da      	ldrb	r2, [r3, #3]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	791a      	ldrb	r2, [r3, #4]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	795a      	ldrb	r2, [r3, #5]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	799a      	ldrb	r2, [r3, #6]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	79da      	ldrb	r2, [r3, #7]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->sendData[2] = 0x01;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->sendData[3] = 0x00;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f103 0120 	add.w	r1, r3, #32
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3338      	adds	r3, #56	; 0x38
 8001cae:	f003 fd6f 	bl	8005790 <HAL_CAN_AddTxMessage>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffd1 	bl	8001c6a <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001cfe:	461a      	mov	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	441a      	add	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d10:	041b      	lsls	r3, r3, #16
 8001d12:	4413      	add	r3, r2
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a89      	ldr	r2, [pc, #548]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d44:	f043 0310 	orr.w	r3, r3, #16
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b87      	ldr	r3, [pc, #540]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	4b83      	ldr	r3, [pc, #524]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a82      	ldr	r2, [pc, #520]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b80      	ldr	r3, [pc, #512]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b7c      	ldr	r3, [pc, #496]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a7b      	ldr	r2, [pc, #492]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b79      	ldr	r3, [pc, #484]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a74      	ldr	r2, [pc, #464]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b6e      	ldr	r3, [pc, #440]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a6d      	ldr	r2, [pc, #436]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b6b      	ldr	r3, [pc, #428]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a66      	ldr	r2, [pc, #408]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001de2:	2200      	movs	r2, #0
 8001de4:	213f      	movs	r1, #63	; 0x3f
 8001de6:	4861      	ldr	r0, [pc, #388]	; (8001f6c <MX_GPIO_Init+0x248>)
 8001de8:	f005 fb1c 	bl	8007424 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2110      	movs	r1, #16
 8001df0:	485f      	ldr	r0, [pc, #380]	; (8001f70 <MX_GPIO_Init+0x24c>)
 8001df2:	f005 fb17 	bl	8007424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001df6:	2200      	movs	r2, #0
 8001df8:	219b      	movs	r1, #155	; 0x9b
 8001dfa:	485e      	ldr	r0, [pc, #376]	; (8001f74 <MX_GPIO_Init+0x250>)
 8001dfc:	f005 fb12 	bl	8007424 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001e06:	485c      	ldr	r0, [pc, #368]	; (8001f78 <MX_GPIO_Init+0x254>)
 8001e08:	f005 fb0c 	bl	8007424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001e12:	485a      	ldr	r0, [pc, #360]	; (8001f7c <MX_GPIO_Init+0x258>)
 8001e14:	f005 fb06 	bl	8007424 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001e18:	2307      	movs	r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e20:	2302      	movs	r3, #2
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4853      	ldr	r0, [pc, #332]	; (8001f78 <MX_GPIO_Init+0x254>)
 8001e2c:	f004 ffa8 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001e30:	f248 1378 	movw	r3, #33144	; 0x8178
 8001e34:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	484c      	ldr	r0, [pc, #304]	; (8001f78 <MX_GPIO_Init+0x254>)
 8001e46:	f004 ff9b 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001e4a:	233f      	movs	r3, #63	; 0x3f
 8001e4c:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4842      	ldr	r0, [pc, #264]	; (8001f6c <MX_GPIO_Init+0x248>)
 8001e62:	f004 ff8d 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001e66:	2310      	movs	r3, #16
 8001e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	483c      	ldr	r0, [pc, #240]	; (8001f70 <MX_GPIO_Init+0x24c>)
 8001e7e:	f004 ff7f 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <MX_GPIO_Init+0x25c>)
 8001e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	4836      	ldr	r0, [pc, #216]	; (8001f70 <MX_GPIO_Init+0x24c>)
 8001e96:	f004 ff73 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001e9a:	239b      	movs	r3, #155	; 0x9b
 8001e9c:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4830      	ldr	r0, [pc, #192]	; (8001f74 <MX_GPIO_Init+0x250>)
 8001eb2:	f004 ff65 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001eb6:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	482a      	ldr	r0, [pc, #168]	; (8001f78 <MX_GPIO_Init+0x254>)
 8001ed0:	f004 ff56 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001ed4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4820      	ldr	r0, [pc, #128]	; (8001f74 <MX_GPIO_Init+0x250>)
 8001ef2:	f004 ff45 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001ef6:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001efa:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	481b      	ldr	r0, [pc, #108]	; (8001f7c <MX_GPIO_Init+0x258>)
 8001f10:	f004 ff36 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4814      	ldr	r0, [pc, #80]	; (8001f7c <MX_GPIO_Init+0x258>)
 8001f2a:	f004 ff29 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f2e:	2320      	movs	r3, #32
 8001f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001f3e:	2309      	movs	r3, #9
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	480a      	ldr	r0, [pc, #40]	; (8001f74 <MX_GPIO_Init+0x250>)
 8001f4a:	f004 ff19 	bl	8006d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	2017      	movs	r0, #23
 8001f54:	f004 f9b0 	bl	80062b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f58:	2017      	movs	r0, #23
 8001f5a:	f004 f9d9 	bl	8006310 <HAL_NVIC_EnableIRQ>

}
 8001f5e:	bf00      	nop
 8001f60:	3730      	adds	r7, #48	; 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	10210000 	.word	0x10210000

08001f84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f8a:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <MX_I2C1_Init+0x78>)
 8001f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <MX_I2C1_Init+0x7c>)
 8001f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fc2:	f005 fa79 	bl	80074b8 <HAL_I2C_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fcc:	f001 faa6 	bl	800351c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fd4:	f006 fad0 	bl	8008578 <HAL_I2CEx_ConfigAnalogFilter>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001fde:	f001 fa9d 	bl	800351c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fe6:	f006 fb27 	bl	8008638 <HAL_I2CEx_ConfigDigitalFilter>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001ff0:	f001 fa94 	bl	800351c <Error_Handler>
  }

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000458 	.word	0x20000458
 8001ffc:	40005400 	.word	0x40005400
 8002000:	00061a80 	.word	0x00061a80

08002004 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_I2C_MspInit+0x84>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12c      	bne.n	8002080 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_I2C_MspInit+0x88>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_I2C_MspInit+0x88>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_I2C_MspInit+0x88>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8002042:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002048:	2312      	movs	r3, #18
 800204a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800204c:	2301      	movs	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002054:	2304      	movs	r3, #4
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	480c      	ldr	r0, [pc, #48]	; (8002090 <HAL_I2C_MspInit+0x8c>)
 8002060:	f004 fe8e 	bl	8006d80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_I2C_MspInit+0x88>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_I2C_MspInit+0x88>)
 800206e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002072:	6413      	str	r3, [r2, #64]	; 0x40
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_I2C_MspInit+0x88>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002080:	bf00      	nop
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40005400 	.word	0x40005400
 800208c:	40023800 	.word	0x40023800
 8002090:	40020400 	.word	0x40020400
 8002094:	00000000 	.word	0x00000000

08002098 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800209e:	f002 ff33 	bl	8004f08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80020a2:	f000 fcb9 	bl	8002a18 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 80020a6:	f007 f91d 	bl	80092e4 <HAL_RCC_GetHCLKFreq>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4abc      	ldr	r2, [pc, #752]	; (80023a0 <main+0x308>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	099b      	lsrs	r3, r3, #6
 80020b4:	4618      	mov	r0, r3
 80020b6:	f004 f943 	bl	8006340 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80020ba:	2004      	movs	r0, #4
 80020bc:	f004 f94c 	bl	8006358 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020c8:	f004 f8f6 	bl	80062b8 <HAL_NVIC_SetPriority>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80020cc:	f7ff fe2a 	bl	8001d24 <MX_GPIO_Init>
	MX_DMA_Init();
 80020d0:	f7ff fd42 	bl	8001b58 <MX_DMA_Init>
	MX_I2C1_Init();
 80020d4:	f7ff ff56 	bl	8001f84 <MX_I2C1_Init>
	MX_TIM1_Init();
 80020d8:	f001 fed4 	bl	8003e84 <MX_TIM1_Init>
	MX_TIM2_Init();
 80020dc:	f001 ff72 	bl	8003fc4 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 80020e0:	f002 fa1c 	bl	800451c <MX_USART3_UART_Init>
	MX_TIM3_Init();
 80020e4:	f001 ffe8 	bl	80040b8 <MX_TIM3_Init>
	MX_TIM8_Init();
 80020e8:	f002 f868 	bl	80041bc <MX_TIM8_Init>
	MX_CAN1_Init();
 80020ec:	f7ff fc7c 	bl	80019e8 <MX_CAN1_Init>
	MX_SPI1_Init();
 80020f0:	f001 fdc0 	bl	8003c74 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 80020f4:	f002 fab6 	bl	8004664 <joystick_Init>
	ADC_Init();
 80020f8:	f7ff fa58 	bl	80015ac <ADC_Init>
	ADC_DataRequest();
 80020fc:	f7ff fa98 	bl	8001630 <ADC_DataRequest>
	ENCODER_Init();
 8002100:	f7ff fd4a 	bl	8001b98 <ENCODER_Init>
//	  DWT_Init();

	uint32_t state_count = HAL_GetTick();
 8002104:	f002 ff66 	bl	8004fd4 <HAL_GetTick>
 8002108:	6078      	str	r0, [r7, #4]
	while (MPU6050_Init(&hi2c1) == 1)
 800210a:	e00a      	b.n	8002122 <main+0x8a>
	{
		if (HAL_GetTick() - state_count > 5000)
 800210c:	f002 ff62 	bl	8004fd4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <main+0x8a>
			Error_Handler();
 800211e:	f001 f9fd 	bl	800351c <Error_Handler>
	while (MPU6050_Init(&hi2c1) == 1)
 8002122:	48a0      	ldr	r0, [pc, #640]	; (80023a4 <main+0x30c>)
 8002124:	f001 fa0c 	bl	8003540 <MPU6050_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d0ee      	beq.n	800210c <main+0x74>
	}

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 800212e:	4b9e      	ldr	r3, [pc, #632]	; (80023a8 <main+0x310>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a9e      	ldr	r2, [pc, #632]	; (80023ac <main+0x314>)
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	4b9a      	ldr	r3, [pc, #616]	; (80023a8 <main+0x310>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a9b      	ldr	r2, [pc, #620]	; (80023b0 <main+0x318>)
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	ed93 7a00 	vldr	s14, [r3]
 800214a:	eef0 0a47 	vmov.f32	s1, s14
 800214e:	eeb0 0a67 	vmov.f32	s0, s15
 8002152:	4898      	ldr	r0, [pc, #608]	; (80023b4 <main+0x31c>)
 8002154:	f002 fc4e 	bl	80049f4 <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8002158:	4897      	ldr	r0, [pc, #604]	; (80023b8 <main+0x320>)
 800215a:	f007 fec1 	bl	8009ee0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 800215e:	2100      	movs	r1, #0
 8002160:	4895      	ldr	r0, [pc, #596]	; (80023b8 <main+0x320>)
 8002162:	f008 f81d 	bl	800a1a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8002166:	2104      	movs	r1, #4
 8002168:	4893      	ldr	r0, [pc, #588]	; (80023b8 <main+0x320>)
 800216a:	f008 f819 	bl	800a1a0 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 800216e:	4b92      	ldr	r3, [pc, #584]	; (80023b8 <main+0x320>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002176:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8002178:	4b8f      	ldr	r3, [pc, #572]	; (80023b8 <main+0x320>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002180:	639a      	str	r2, [r3, #56]	; 0x38

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8002182:	488e      	ldr	r0, [pc, #568]	; (80023bc <main+0x324>)
 8002184:	f7ff fa80 	bl	8001688 <bd25l_Init>
	bd25l_Init(&backMotor);
 8002188:	488d      	ldr	r0, [pc, #564]	; (80023c0 <main+0x328>)
 800218a:	f7ff fa7d 	bl	8001688 <bd25l_Init>
	runMotor(&rearMotor, 0);
 800218e:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80023c4 <main+0x32c>
 8002192:	488a      	ldr	r0, [pc, #552]	; (80023bc <main+0x324>)
 8002194:	f7ff fb78 	bl	8001888 <runMotor>
	runMotor(&backMotor, 0);
 8002198:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80023c4 <main+0x32c>
 800219c:	4888      	ldr	r0, [pc, #544]	; (80023c0 <main+0x328>)
 800219e:	f7ff fb73 	bl	8001888 <runMotor>
	emBrakeMotor(0);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7ff fa92 	bl	80016cc <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 80021a8:	f7ff f90c 	bl	80013c4 <hubMotor_Init>
	send_HubMotor(0, 0);
 80021ac:	eddf 0a85 	vldr	s1, [pc, #532]	; 80023c4 <main+0x32c>
 80021b0:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80023c4 <main+0x32c>
 80021b4:	f7ff f920 	bl	80013f8 <send_HubMotor>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 80021b8:	4b83      	ldr	r3, [pc, #524]	; (80023c8 <main+0x330>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	4b83      	ldr	r3, [pc, #524]	; (80023cc <main+0x334>)
 80021c0:	ed93 7a00 	vldr	s14, [r3]
 80021c4:	4b82      	ldr	r3, [pc, #520]	; (80023d0 <main+0x338>)
 80021c6:	edd3 6a00 	vldr	s13, [r3]
 80021ca:	eeb0 1a66 	vmov.f32	s2, s13
 80021ce:	eef0 0a47 	vmov.f32	s1, s14
 80021d2:	eeb0 0a67 	vmov.f32	s0, s15
 80021d6:	4b7f      	ldr	r3, [pc, #508]	; (80023d4 <main+0x33c>)
 80021d8:	4a7f      	ldr	r2, [pc, #508]	; (80023d8 <main+0x340>)
 80021da:	4980      	ldr	r1, [pc, #512]	; (80023dc <main+0x344>)
 80021dc:	4880      	ldr	r0, [pc, #512]	; (80023e0 <main+0x348>)
 80021de:	f7fe fe87 	bl	8000ef0 <pid_create>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a7f      	ldr	r2, [pc, #508]	; (80023e4 <main+0x34c>)
 80021e6:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -50, 50);
 80021e8:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <main+0x34c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80023e8 <main+0x350>
 80021f0:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80023ec <main+0x354>
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f807 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 80021fa:	4b7a      	ldr	r3, [pc, #488]	; (80023e4 <main+0x34c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2101      	movs	r1, #1
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe ffcd 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 8002206:	4b77      	ldr	r3, [pc, #476]	; (80023e4 <main+0x34c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f861 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 8002210:	4b77      	ldr	r3, [pc, #476]	; (80023f0 <main+0x358>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	4b77      	ldr	r3, [pc, #476]	; (80023f4 <main+0x35c>)
 8002218:	ed93 7a00 	vldr	s14, [r3]
 800221c:	4b76      	ldr	r3, [pc, #472]	; (80023f8 <main+0x360>)
 800221e:	edd3 6a00 	vldr	s13, [r3]
 8002222:	eeb0 1a66 	vmov.f32	s2, s13
 8002226:	eef0 0a47 	vmov.f32	s1, s14
 800222a:	eeb0 0a67 	vmov.f32	s0, s15
 800222e:	4b73      	ldr	r3, [pc, #460]	; (80023fc <main+0x364>)
 8002230:	4a73      	ldr	r2, [pc, #460]	; (8002400 <main+0x368>)
 8002232:	4974      	ldr	r1, [pc, #464]	; (8002404 <main+0x36c>)
 8002234:	4874      	ldr	r0, [pc, #464]	; (8002408 <main+0x370>)
 8002236:	f7fe fe5b 	bl	8000ef0 <pid_create>
 800223a:	4603      	mov	r3, r0
 800223c:	4a73      	ldr	r2, [pc, #460]	; (800240c <main+0x374>)
 800223e:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -50, 50);
 8002240:	4b72      	ldr	r3, [pc, #456]	; (800240c <main+0x374>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	eddf 0a68 	vldr	s1, [pc, #416]	; 80023e8 <main+0x350>
 8002248:	ed9f 0a68 	vldr	s0, [pc, #416]	; 80023ec <main+0x354>
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe ffdb 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 8002252:	4b6e      	ldr	r3, [pc, #440]	; (800240c <main+0x374>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2101      	movs	r1, #1
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe ffa1 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 800225e:	4b6b      	ldr	r3, [pc, #428]	; (800240c <main+0x374>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f835 	bl	80012d2 <pid_auto>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 8002268:	f002 feb4 	bl	8004fd4 <HAL_GetTick>
 800226c:	6038      	str	r0, [r7, #0]
	ENCODER_Get_Angle(&encoderBack);
 800226e:	4868      	ldr	r0, [pc, #416]	; (8002410 <main+0x378>)
 8002270:	f7ff fd23 	bl	8001cba <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 8002274:	4867      	ldr	r0, [pc, #412]	; (8002414 <main+0x37c>)
 8002276:	f7ff fd20 	bl	8001cba <ENCODER_Get_Angle>
	while (state_count++ < 1000)
 800227a:	e003      	b.n	8002284 <main+0x1ec>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 800227c:	4966      	ldr	r1, [pc, #408]	; (8002418 <main+0x380>)
 800227e:	4849      	ldr	r0, [pc, #292]	; (80023a4 <main+0x30c>)
 8002280:	f001 f9b6 	bl	80035f0 <MPU6050_Read_All>
	while (state_count++ < 1000)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800228e:	d3f5      	bcc.n	800227c <main+0x1e4>
	initial_angle = MPU6050.KalmanAngleX;
 8002290:	4b61      	ldr	r3, [pc, #388]	; (8002418 <main+0x380>)
 8002292:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002296:	4961      	ldr	r1, [pc, #388]	; (800241c <main+0x384>)
 8002298:	e9c1 2300 	strd	r2, r3, [r1]
	state_count = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
	emBrakeMotor(1);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f7ff fa13 	bl	80016cc <emBrakeMotor>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 80022a6:	f002 fe95 	bl	8004fd4 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d0f9      	beq.n	80022a6 <main+0x20e>
		{
			ADC_DataRequest();
 80022b2:	f7ff f9bd 	bl	8001630 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 80022b6:	4856      	ldr	r0, [pc, #344]	; (8002410 <main+0x378>)
 80022b8:	f7ff fcd7 	bl	8001c6a <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 80022bc:	4855      	ldr	r0, [pc, #340]	; (8002414 <main+0x37c>)
 80022be:	f7ff fcd4 	bl	8001c6a <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
			MPU6050_Read_All(&hi2c1, &MPU6050);
 80022c2:	4955      	ldr	r1, [pc, #340]	; (8002418 <main+0x380>)
 80022c4:	4837      	ldr	r0, [pc, #220]	; (80023a4 <main+0x30c>)
 80022c6:	f001 f993 	bl	80035f0 <MPU6050_Read_All>
			GPIO_Digital_Filtered_Input(&button1, 30);
 80022ca:	211e      	movs	r1, #30
 80022cc:	4854      	ldr	r0, [pc, #336]	; (8002420 <main+0x388>)
 80022ce:	f7ff fb52 	bl	8001976 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 80022d2:	211e      	movs	r1, #30
 80022d4:	4853      	ldr	r0, [pc, #332]	; (8002424 <main+0x38c>)
 80022d6:	f7ff fb4e 	bl	8001976 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 80022da:	211e      	movs	r1, #30
 80022dc:	4852      	ldr	r0, [pc, #328]	; (8002428 <main+0x390>)
 80022de:	f7ff fb4a 	bl	8001976 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 80022e2:	2105      	movs	r1, #5
 80022e4:	4851      	ldr	r0, [pc, #324]	; (800242c <main+0x394>)
 80022e6:	f7ff fb46 	bl	8001976 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 80022ea:	2105      	movs	r1, #5
 80022ec:	4850      	ldr	r0, [pc, #320]	; (8002430 <main+0x398>)
 80022ee:	f7ff fb42 	bl	8001976 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 80022f2:	2105      	movs	r1, #5
 80022f4:	484f      	ldr	r0, [pc, #316]	; (8002434 <main+0x39c>)
 80022f6:	f7ff fb3e 	bl	8001976 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 80022fa:	2105      	movs	r1, #5
 80022fc:	484e      	ldr	r0, [pc, #312]	; (8002438 <main+0x3a0>)
 80022fe:	f7ff fb3a 	bl	8001976 <GPIO_Digital_Filtered_Input>
			//1. Climbing wheel extension
			//2. Wheelchair lifting/dropping
			//3. Climbing wheel retraction
			//---------------------------------------------------------------------------------------------------
			//when button3 is pressed, Extend climbing wheel until both wheel touches the ground
			if (button3.state == 1 && front_touchdown == false
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <main+0x390>)
 8002304:	7a1b      	ldrb	r3, [r3, #8]
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 8122 	bne.w	8002550 <main+0x4b8>
 800230c:	4b4b      	ldr	r3, [pc, #300]	; (800243c <main+0x3a4>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	f083 0301 	eor.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 811a 	beq.w	8002550 <main+0x4b8>
					&& back_touchdown == false && lifting_mode == NORMAL)
 800231c:	4b48      	ldr	r3, [pc, #288]	; (8002440 <main+0x3a8>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	f083 0301 	eor.w	r3, r3, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8112 	beq.w	8002550 <main+0x4b8>
 800232c:	4b45      	ldr	r3, [pc, #276]	; (8002444 <main+0x3ac>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 810d 	bne.w	8002550 <main+0x4b8>
			{
				emBrakeMotor(1);
 8002336:	2001      	movs	r0, #1
 8002338:	f7ff f9c8 	bl	80016cc <emBrakeMotor>
				while (front_touchdown == false || back_touchdown == false)
 800233c:	e0de      	b.n	80024fc <main+0x464>
				{
					if (GPIO_Digital_Filtered_Input(&rearLS1, 5)
 800233e:	2105      	movs	r1, #5
 8002340:	483a      	ldr	r0, [pc, #232]	; (800242c <main+0x394>)
 8002342:	f7ff fb18 	bl	8001976 <GPIO_Digital_Filtered_Input>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d106      	bne.n	800235a <main+0x2c2>
							|| GPIO_Digital_Filtered_Input(&rearLS2, 5))
 800234c:	2105      	movs	r1, #5
 800234e:	4838      	ldr	r0, [pc, #224]	; (8002430 <main+0x398>)
 8002350:	f7ff fb11 	bl	8001976 <GPIO_Digital_Filtered_Input>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <main+0x2c8>
						front_touchdown = 1;
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <main+0x3a4>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
					if (GPIO_Digital_Filtered_Input(&backLS1, 5)
 8002360:	2105      	movs	r1, #5
 8002362:	4834      	ldr	r0, [pc, #208]	; (8002434 <main+0x39c>)
 8002364:	f7ff fb07 	bl	8001976 <GPIO_Digital_Filtered_Input>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <main+0x2e4>
							|| GPIO_Digital_Filtered_Input(&backLS2, 5))
 800236e:	2105      	movs	r1, #5
 8002370:	4831      	ldr	r0, [pc, #196]	; (8002438 <main+0x3a0>)
 8002372:	f7ff fb00 	bl	8001976 <GPIO_Digital_Filtered_Input>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <main+0x2ea>
						back_touchdown = 1;
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <main+0x3a8>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]

					//if front touch before back, climbing up process
					if (back_touchdown == 0 && front_touchdown == 1)
 8002382:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <main+0x3a8>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	f083 0301 	eor.w	r3, r3, #1
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d05b      	beq.n	8002448 <main+0x3b0>
 8002390:	4b2a      	ldr	r3, [pc, #168]	; (800243c <main+0x3a4>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d057      	beq.n	8002448 <main+0x3b0>
						lifting_mode = CLIMB_UP;
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <main+0x3ac>)
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e061      	b.n	8002464 <main+0x3cc>
 80023a0:	10624dd3 	.word	0x10624dd3
 80023a4:	20000458 	.word	0x20000458
 80023a8:	20000108 	.word	0x20000108
 80023ac:	0800fbc4 	.word	0x0800fbc4
 80023b0:	0800fbd0 	.word	0x0800fbd0
 80023b4:	200000d8 	.word	0x200000d8
 80023b8:	200005f8 	.word	0x200005f8
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000034 	.word	0x20000034
 80023c4:	00000000 	.word	0x00000000
 80023c8:	2000011c 	.word	0x2000011c
 80023cc:	20000120 	.word	0x20000120
 80023d0:	20000124 	.word	0x20000124
 80023d4:	20000288 	.word	0x20000288
 80023d8:	20000284 	.word	0x20000284
 80023dc:	20000280 	.word	0x20000280
 80023e0:	20000568 	.word	0x20000568
 80023e4:	20000564 	.word	0x20000564
 80023e8:	42480000 	.word	0x42480000
 80023ec:	c2480000 	.word	0xc2480000
 80023f0:	20000128 	.word	0x20000128
 80023f4:	2000012c 	.word	0x2000012c
 80023f8:	20000130 	.word	0x20000130
 80023fc:	20000294 	.word	0x20000294
 8002400:	20000290 	.word	0x20000290
 8002404:	2000028c 	.word	0x2000028c
 8002408:	20000520 	.word	0x20000520
 800240c:	200005b0 	.word	0x200005b0
 8002410:	20000404 	.word	0x20000404
 8002414:	200003b0 	.word	0x200003b0
 8002418:	200004c0 	.word	0x200004c0
 800241c:	20000270 	.word	0x20000270
 8002420:	200000a8 	.word	0x200000a8
 8002424:	200000b8 	.word	0x200000b8
 8002428:	200000c8 	.word	0x200000c8
 800242c:	20000068 	.word	0x20000068
 8002430:	20000078 	.word	0x20000078
 8002434:	20000088 	.word	0x20000088
 8002438:	20000098 	.word	0x20000098
 800243c:	20000268 	.word	0x20000268
 8002440:	20000269 	.word	0x20000269
 8002444:	2000010c 	.word	0x2000010c
					//if back touch before front, climbing down process
					else if (back_touchdown == 1 && front_touchdown == 0)
 8002448:	4b37      	ldr	r3, [pc, #220]	; (8002528 <main+0x490>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <main+0x3cc>
 8002450:	4b36      	ldr	r3, [pc, #216]	; (800252c <main+0x494>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	f083 0301 	eor.w	r3, r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <main+0x3cc>
						lifting_mode = CLIMB_DOWN;
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <main+0x498>)
 8002460:	2202      	movs	r2, #2
 8002462:	701a      	strb	r2, [r3, #0]

					initial_angle = exp_angle_filter * MPU6050.KalmanAngleX
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <main+0x49c>)
 8002466:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800246a:	4b33      	ldr	r3, [pc, #204]	; (8002538 <main+0x4a0>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fe f87a 	bl	8000568 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4614      	mov	r4, r2
 800247a:	461d      	mov	r5, r3
							+ (1 - exp_angle_filter) * initial_angle;
 800247c:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <main+0x4a0>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f04f 0000 	mov.w	r0, #0
 8002486:	492d      	ldr	r1, [pc, #180]	; (800253c <main+0x4a4>)
 8002488:	f7fd feb6 	bl	80001f8 <__aeabi_dsub>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <main+0x4a8>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	f7fe f865 	bl	8000568 <__aeabi_dmul>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4620      	mov	r0, r4
 80024a4:	4629      	mov	r1, r5
 80024a6:	f7fd fea9 	bl	80001fc <__adddf3>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
					initial_angle = exp_angle_filter * MPU6050.KalmanAngleX
 80024ae:	4924      	ldr	r1, [pc, #144]	; (8002540 <main+0x4a8>)
 80024b0:	e9c1 2300 	strd	r2, r3, [r1]

					if (back_touchdown == false)
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <main+0x490>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	f083 0301 	eor.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <main+0x436>
						runMotor(&backMotor, 5);
 80024c2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80024c6:	481f      	ldr	r0, [pc, #124]	; (8002544 <main+0x4ac>)
 80024c8:	f7ff f9de 	bl	8001888 <runMotor>
 80024cc:	e004      	b.n	80024d8 <main+0x440>
					else
						runMotor(&backMotor, 0);
 80024ce:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002548 <main+0x4b0>
 80024d2:	481c      	ldr	r0, [pc, #112]	; (8002544 <main+0x4ac>)
 80024d4:	f7ff f9d8 	bl	8001888 <runMotor>

					if (front_touchdown == false)
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <main+0x494>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <main+0x45a>
						runMotor(&rearMotor, 5);
 80024e6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80024ea:	4818      	ldr	r0, [pc, #96]	; (800254c <main+0x4b4>)
 80024ec:	f7ff f9cc 	bl	8001888 <runMotor>
 80024f0:	e004      	b.n	80024fc <main+0x464>
					else
						runMotor(&rearMotor, 0);
 80024f2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002548 <main+0x4b0>
 80024f6:	4815      	ldr	r0, [pc, #84]	; (800254c <main+0x4b4>)
 80024f8:	f7ff f9c6 	bl	8001888 <runMotor>
				while (front_touchdown == false || back_touchdown == false)
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <main+0x494>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	f083 0301 	eor.w	r3, r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	f47f af19 	bne.w	800233e <main+0x2a6>
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <main+0x490>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	f083 0301 	eor.w	r3, r3, #1
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	f47f af11 	bne.w	800233e <main+0x2a6>
				}

				HAL_Delay(500);
 800251c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002520:	f002 fd64 	bl	8004fec <HAL_Delay>
				continue; //to refresh the loop and get the latest encoder reading
 8002524:	e264      	b.n	80029f0 <main+0x958>
 8002526:	bf00      	nop
 8002528:	20000269 	.word	0x20000269
 800252c:	20000268 	.word	0x20000268
 8002530:	2000010c 	.word	0x2000010c
 8002534:	200004c0 	.word	0x200004c0
 8002538:	20000110 	.word	0x20000110
 800253c:	3ff00000 	.word	0x3ff00000
 8002540:	20000270 	.word	0x20000270
 8002544:	20000034 	.word	0x20000034
 8002548:	00000000 	.word	0x00000000
 800254c:	20000000 	.word	0x20000000
			}
			//Normal wheelchair mode, basic joystick control mode
			if (lifting_mode == NORMAL)
 8002550:	4bbf      	ldr	r3, [pc, #764]	; (8002850 <main+0x7b8>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d117      	bne.n	8002588 <main+0x4f0>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002558:	2200      	movs	r2, #0
 800255a:	2108      	movs	r1, #8
 800255c:	48bd      	ldr	r0, [pc, #756]	; (8002854 <main+0x7bc>)
 800255e:	f004 ff61 	bl	8007424 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	2110      	movs	r1, #16
 8002566:	48bb      	ldr	r0, [pc, #748]	; (8002854 <main+0x7bc>)
 8002568:	f004 ff5c 	bl	8007424 <HAL_GPIO_WritePin>
				wheel_Control(&baseWheelSpeed);
 800256c:	48ba      	ldr	r0, [pc, #744]	; (8002858 <main+0x7c0>)
 800256e:	f002 fa6b 	bl	8004a48 <wheel_Control>
				baseMotorCommand();
 8002572:	f000 fc8d 	bl	8002e90 <baseMotorCommand>
				front_touchdown = false;
 8002576:	4bb9      	ldr	r3, [pc, #740]	; (800285c <main+0x7c4>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
				back_touchdown = false;
 800257c:	4bb8      	ldr	r3, [pc, #736]	; (8002860 <main+0x7c8>)
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
				climb_first_iteration = true;
 8002582:	4bb8      	ldr	r3, [pc, #736]	; (8002864 <main+0x7cc>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
//				goto_pos(MIN_BACK_ALLOWABLE_ENC + 300, backClimb_pid);
//				goto_pos(MIN_FRONT_ALLOWABLE_ENC + 300, frontClimb_pid);
			}
			//Climbing up process
			if (lifting_mode == CLIMB_UP)
 8002588:	4bb1      	ldr	r3, [pc, #708]	; (8002850 <main+0x7b8>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b01      	cmp	r3, #1
 800258e:	f040 811e 	bne.w	80027ce <main+0x736>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002592:	2201      	movs	r2, #1
 8002594:	2108      	movs	r1, #8
 8002596:	48af      	ldr	r0, [pc, #700]	; (8002854 <main+0x7bc>)
 8002598:	f004 ff44 	bl	8007424 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 800259c:	4bb1      	ldr	r3, [pc, #708]	; (8002864 <main+0x7cc>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80ee 	beq.w	8002782 <main+0x6ea>
				{
					//If curb_height is positive, should be climbing up process and vice versa
					curb_height = CLIMBING_LEG_LENGTH
							* cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT
 80025a6:	4bb0      	ldr	r3, [pc, #704]	; (8002868 <main+0x7d0>)
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ff85 	bl	80004b8 <__aeabi_f2d>
 80025ae:	4604      	mov	r4, r0
 80025b0:	460d      	mov	r5, r1
 80025b2:	4bae      	ldr	r3, [pc, #696]	; (800286c <main+0x7d4>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd ff7e 	bl	80004b8 <__aeabi_f2d>
 80025bc:	a39a      	add	r3, pc, #616	; (adr r3, 8002828 <main+0x790>)
 80025be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c2:	f7fd ffd1 	bl	8000568 <__aeabi_dmul>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	4ba7      	ldr	r3, [pc, #668]	; (8002870 <main+0x7d8>)
 80025d4:	f7fe f8f2 	bl	80007bc <__aeabi_ddiv>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	ec43 2b17 	vmov	d7, r2, r3
 80025e0:	eeb0 0a47 	vmov.f32	s0, s14
 80025e4:	eef0 0a67 	vmov.f32	s1, s15
 80025e8:	f00a fe52 	bl	800d290 <cos>
 80025ec:	ec53 2b10 	vmov	r2, r3, d0
 80025f0:	4620      	mov	r0, r4
 80025f2:	4629      	mov	r1, r5
 80025f4:	f7fd ffb8 	bl	8000568 <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4614      	mov	r4, r2
 80025fe:	461d      	mov	r5, r3
 8002600:	4b9c      	ldr	r3, [pc, #624]	; (8002874 <main+0x7dc>)
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ff58 	bl	80004b8 <__aeabi_f2d>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4620      	mov	r0, r4
 800260e:	4629      	mov	r1, r5
 8002610:	f7fd fdf4 	bl	80001fc <__adddf3>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
							- FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	4b95      	ldr	r3, [pc, #596]	; (8002878 <main+0x7e0>)
 8002622:	f7fd fde9 	bl	80001f8 <__aeabi_dsub>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f7fe fa93 	bl	8000b58 <__aeabi_d2f>
 8002632:	4603      	mov	r3, r0
					curb_height = CLIMBING_LEG_LENGTH
 8002634:	4a91      	ldr	r2, [pc, #580]	; (800287c <main+0x7e4>)
 8002636:	6013      	str	r3, [r2, #0]
					curb_height += 0.0205; //Small error correction 10%
 8002638:	4b90      	ldr	r3, [pc, #576]	; (800287c <main+0x7e4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fd ff3b 	bl	80004b8 <__aeabi_f2d>
 8002642:	a37b      	add	r3, pc, #492	; (adr r3, 8002830 <main+0x798>)
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	f7fd fdd8 	bl	80001fc <__adddf3>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f7fe fa80 	bl	8000b58 <__aeabi_d2f>
 8002658:	4603      	mov	r3, r0
 800265a:	4a88      	ldr	r2, [pc, #544]	; (800287c <main+0x7e4>)
 800265c:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 800265e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8002880 <main+0x7e8>
 8002662:	4b86      	ldr	r3, [pc, #536]	; (800287c <main+0x7e4>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266c:	ee17 0a90 	vmov	r0, s15
 8002670:	f7fd ff22 	bl	80004b8 <__aeabi_f2d>
							- HUB_DIAMETER / 2;
 8002674:	a370      	add	r3, pc, #448	; (adr r3, 8002838 <main+0x7a0>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fd fdbd 	bl	80001f8 <__aeabi_dsub>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f7fe fa67 	bl	8000b58 <__aeabi_d2f>
 800268a:	4603      	mov	r3, r0
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 800268c:	4a7d      	ldr	r2, [pc, #500]	; (8002884 <main+0x7ec>)
 800268e:	6013      	str	r3, [r2, #0]
					back_lifting_angle =
					TO_DEG(
 8002690:	4b7c      	ldr	r3, [pc, #496]	; (8002884 <main+0x7ec>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	eef1 7a67 	vneg.f32	s15, s15
 800269a:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002888 <main+0x7f0>
 800269e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026a2:	ee16 0a90 	vmov	r0, s13
 80026a6:	f7fd ff07 	bl	80004b8 <__aeabi_f2d>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	ec43 2b10 	vmov	d0, r2, r3
 80026b2:	f00a fe9d 	bl	800d3f0 <acos>
 80026b6:	ec53 2b10 	vmov	r2, r3, d0
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fa4b 	bl	8000b58 <__aeabi_d2f>
 80026c2:	ee07 0a10 	vmov	s14, r0
 80026c6:	eddf 7a71 	vldr	s15, [pc, #452]	; 800288c <main+0x7f4>
 80026ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ce:	ee17 0a90 	vmov	r0, s15
 80026d2:	f7fd fef1 	bl	80004b8 <__aeabi_f2d>
 80026d6:	a354      	add	r3, pc, #336	; (adr r3, 8002828 <main+0x790>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fe f86e 	bl	80007bc <__aeabi_ddiv>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
							(float )acos(
									-back_lifting_height
									/ CLIMBING_LEG_LENGTH)) - 30.0; //30.0 is the bending angle of the extender(originally 36.6).
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	4b68      	ldr	r3, [pc, #416]	; (8002890 <main+0x7f8>)
 80026ee:	f7fd fd83 	bl	80001f8 <__aeabi_dsub>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe fa2d 	bl	8000b58 <__aeabi_d2f>
 80026fe:	4603      	mov	r3, r0
					back_lifting_angle =
 8002700:	4a64      	ldr	r2, [pc, #400]	; (8002894 <main+0x7fc>)
 8002702:	6013      	str	r3, [r2, #0]
					back_encoder_input = (back_lifting_angle / 360.0)
 8002704:	4b63      	ldr	r3, [pc, #396]	; (8002894 <main+0x7fc>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fed5 	bl	80004b8 <__aeabi_f2d>
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	4b61      	ldr	r3, [pc, #388]	; (8002898 <main+0x800>)
 8002714:	f7fe f852 	bl	80007bc <__aeabi_ddiv>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
							* (4096 * BACK_GEAR_RATIO);
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	4b5d      	ldr	r3, [pc, #372]	; (800289c <main+0x804>)
 8002726:	f7fd ff1f 	bl	8000568 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
					back_encoder_input = (back_lifting_angle / 360.0)
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe f9c9 	bl	8000ac8 <__aeabi_d2iz>
 8002736:	4603      	mov	r3, r0
 8002738:	4a59      	ldr	r2, [pc, #356]	; (80028a0 <main+0x808>)
 800273a:	6013      	str	r3, [r2, #0]

					//3 different scenerio to abort the climbing up task
					//1. The angle calculated is not feasible
					//2. The leg rotate more than it supposed to
					//3. The curb height is too low where climbing up is unnecessary
					if (isnan(back_lifting_angle)
 800273c:	4b55      	ldr	r3, [pc, #340]	; (8002894 <main+0x7fc>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	eef4 7a67 	vcmp.f32	s15, s15
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	d613      	bvs.n	8002774 <main+0x6dc>
							|| back_encoder_input >= MAX_BACK_ALLOWABLE_ENC
 800274c:	4b54      	ldr	r3, [pc, #336]	; (80028a0 <main+0x808>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002756:	429a      	cmp	r2, r3
 8002758:	d20c      	bcs.n	8002774 <main+0x6dc>
								|| curb_height <= 0.05 )
 800275a:	4b48      	ldr	r3, [pc, #288]	; (800287c <main+0x7e4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd feaa 	bl	80004b8 <__aeabi_f2d>
 8002764:	a336      	add	r3, pc, #216	; (adr r3, 8002840 <main+0x7a8>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	f7fe f979 	bl	8000a60 <__aeabi_dcmple>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <main+0x6e4>
					{
						lifting_mode = NORMAL;
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <main+0x7b8>)
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
						continue;
 800277a:	e139      	b.n	80029f0 <main+0x958>
					}
					climb_first_iteration = false;
 800277c:	4b39      	ldr	r3, [pc, #228]	; (8002864 <main+0x7cc>)
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
//				{
//					lifting_mode = RETRACTION;
//					HAL_Delay(500);
//				}

				if (!in_climb_process(MAX_FRONT_CLIMBING_ENC, back_encoder_input) && !(climbingForward(forward_distance)))
 8002782:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002786:	461a      	mov	r2, r3
 8002788:	4b45      	ldr	r3, [pc, #276]	; (80028a0 <main+0x808>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f000 fda6 	bl	80032e0 <in_climb_process>
 8002794:	4603      	mov	r3, r0
 8002796:	f083 0301 	eor.w	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80aa 	beq.w	80028f6 <main+0x85e>
 80027a2:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <main+0x80c>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	eeb0 0a67 	vmov.f32	s0, s15
 80027ac:	f000 fb94 	bl	8002ed8 <climbingForward>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f083 0301 	eor.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 809c 	beq.w	80028f6 <main+0x85e>
				{
					lifting_mode = RETRACTION;
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <main+0x7b8>)
 80027c0:	2203      	movs	r2, #3
 80027c2:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 80027c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027c8:	f002 fc10 	bl	8004fec <HAL_Delay>
 80027cc:	e093      	b.n	80028f6 <main+0x85e>
				}
			}

			else if (lifting_mode == CLIMB_DOWN)
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <main+0x7b8>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	f040 808f 	bne.w	80028f6 <main+0x85e>
			{
				//Climbing down process
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80027d8:	2201      	movs	r2, #1
 80027da:	2110      	movs	r1, #16
 80027dc:	481d      	ldr	r0, [pc, #116]	; (8002854 <main+0x7bc>)
 80027de:	f004 fe21 	bl	8007424 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <main+0x7cc>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d063      	beq.n	80028b2 <main+0x81a>
				{
					front_climbDown_enc = encoderFront.encoder_pos
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <main+0x7d4>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							+ 3.0 / 360.0 * 4096 * FRONT_GEAR_RATIO;
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd fe40 	bl	8000474 <__aeabi_ui2d>
 80027f4:	a314      	add	r3, pc, #80	; (adr r3, 8002848 <main+0x7b0>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f7fd fcff 	bl	80001fc <__adddf3>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
					front_climbDown_enc = encoderFront.encoder_pos
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	f7fe f95f 	bl	8000ac8 <__aeabi_d2iz>
 800280a:	4603      	mov	r3, r0
 800280c:	4a26      	ldr	r2, [pc, #152]	; (80028a8 <main+0x810>)
 800280e:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					if (front_climbDown_enc > MAX_FRONT_ALLOWABLE_ENC)
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <main+0x810>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	f640 431c 	movw	r3, #3100	; 0xc1c
 800281a:	429a      	cmp	r2, r3
 800281c:	d946      	bls.n	80028ac <main+0x814>
					{
						lifting_mode = NORMAL;
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <main+0x7b8>)
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
						continue;
 8002824:	e0e4      	b.n	80029f0 <main+0x958>
 8002826:	bf00      	nop
 8002828:	54442d18 	.word	0x54442d18
 800282c:	400921fb 	.word	0x400921fb
 8002830:	b645a1cb 	.word	0xb645a1cb
 8002834:	3f94fdf3 	.word	0x3f94fdf3
 8002838:	916872b0 	.word	0x916872b0
 800283c:	3faf7ced 	.word	0x3faf7ced
 8002840:	9999999a 	.word	0x9999999a
 8002844:	3fa99999 	.word	0x3fa99999
 8002848:	2c5f92c6 	.word	0x2c5f92c6
 800284c:	4052c5f9 	.word	0x4052c5f9
 8002850:	2000010c 	.word	0x2000010c
 8002854:	40020400 	.word	0x40020400
 8002858:	200000d8 	.word	0x200000d8
 800285c:	20000268 	.word	0x20000268
 8002860:	20000269 	.word	0x20000269
 8002864:	20000118 	.word	0x20000118
 8002868:	3eb2b021 	.word	0x3eb2b021
 800286c:	200003b0 	.word	0x200003b0
 8002870:	40668000 	.word	0x40668000
 8002874:	3e19999a 	.word	0x3e19999a
 8002878:	3fb00000 	.word	0x3fb00000
 800287c:	20000298 	.word	0x20000298
 8002880:	3e19999a 	.word	0x3e19999a
 8002884:	200002a0 	.word	0x200002a0
 8002888:	3eb2b021 	.word	0x3eb2b021
 800288c:	43340000 	.word	0x43340000
 8002890:	403e0000 	.word	0x403e0000
 8002894:	200002a4 	.word	0x200002a4
 8002898:	40768000 	.word	0x40768000
 800289c:	40c00000 	.word	0x40c00000
 80028a0:	200002a8 	.word	0x200002a8
 80028a4:	20000134 	.word	0x20000134
 80028a8:	2000029c 	.word	0x2000029c
					}
					climb_first_iteration = false;
 80028ac:	4b51      	ldr	r3, [pc, #324]	; (80029f4 <main+0x95c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
//				{
//					lifting_mode = RETRACTION;
//					HAL_Delay(500);
//				}

				if (!in_climb_process(front_climbDown_enc, MAX_BACK_CLIMBING_ENC) && !(climbingForward(forward_distance)))
 80028b2:	4b51      	ldr	r3, [pc, #324]	; (80029f8 <main+0x960>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fd0f 	bl	80032e0 <in_climb_process>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f083 0301 	eor.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d013      	beq.n	80028f6 <main+0x85e>
 80028ce:	4b4b      	ldr	r3, [pc, #300]	; (80029fc <main+0x964>)
 80028d0:	edd3 7a00 	vldr	s15, [r3]
 80028d4:	eeb0 0a67 	vmov.f32	s0, s15
 80028d8:	f000 fafe 	bl	8002ed8 <climbingForward>
 80028dc:	4603      	mov	r3, r0
 80028de:	f083 0301 	eor.w	r3, r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <main+0x85e>
				{
					lifting_mode = RETRACTION;
 80028e8:	4b45      	ldr	r3, [pc, #276]	; (8002a00 <main+0x968>)
 80028ea:	2203      	movs	r2, #3
 80028ec:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 80028ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028f2:	f002 fb7b 	bl	8004fec <HAL_Delay>
				}
			}

			if (lifting_mode == RETRACTION)
 80028f6:	4b42      	ldr	r3, [pc, #264]	; (8002a00 <main+0x968>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d12e      	bne.n	800295c <main+0x8c4>
			{
				//retraction process
//				goto_pos(0, backClimb_pid);
//				goto_pos(0, frontClimb_pid);

				goto_pos(MIN_BACK_ALLOWABLE_ENC + 300, backClimb_pid);
 80028fe:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002902:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002906:	461a      	mov	r2, r3
 8002908:	4b3e      	ldr	r3, [pc, #248]	; (8002a04 <main+0x96c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f000 fbd2 	bl	80030b8 <goto_pos>
				goto_pos(MIN_FRONT_ALLOWABLE_ENC + 300, frontClimb_pid);
 8002914:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002918:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800291c:	461a      	mov	r2, r3
 800291e:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <main+0x970>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f000 fbc7 	bl	80030b8 <goto_pos>
				if (fabs(speed[FRONT_INDEX] < 4) && fabs(speed[BACK_INDEX]) < 4)
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <main+0x974>)
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293c:	d50e      	bpl.n	800295c <main+0x8c4>
 800293e:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <main+0x974>)
 8002940:	edd3 7a01 	vldr	s15, [r3, #4]
 8002944:	eef0 7ae7 	vabs.f32	s15, s15
 8002948:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800294c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002954:	d502      	bpl.n	800295c <main+0x8c4>
				{
//					pid_reset(frontClimb_pid);
//					pid_reset(backClimb_pid);
					lifting_mode = NORMAL;
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <main+0x968>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
				}
			}

			if (fabs(speed[FRONT_INDEX]) < 4)
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <main+0x974>)
 800295e:	edd3 7a00 	vldr	s15, [r3]
 8002962:	eef0 7ae7 	vabs.f32	s15, s15
 8002966:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800296a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	d503      	bpl.n	800297c <main+0x8e4>
				speed[FRONT_INDEX] = 0;
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <main+0x974>)
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 4)
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <main+0x974>)
 800297e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002982:	eef0 7ae7 	vabs.f32	s15, s15
 8002986:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800298a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002992:	d503      	bpl.n	800299c <main+0x904>
				speed[BACK_INDEX] = 0;
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <main+0x974>)
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	605a      	str	r2, [r3, #4]

			runMotor(&rearMotor, speed[FRONT_INDEX]);
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <main+0x974>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	eeb0 0a67 	vmov.f32	s0, s15
 80029a6:	481a      	ldr	r0, [pc, #104]	; (8002a10 <main+0x978>)
 80029a8:	f7fe ff6e 	bl	8001888 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <main+0x974>)
 80029ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80029b2:	eeb0 0a67 	vmov.f32	s0, s15
 80029b6:	4817      	ldr	r0, [pc, #92]	; (8002a14 <main+0x97c>)
 80029b8:	f7fe ff66 	bl	8001888 <runMotor>

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <main+0x974>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	d10b      	bne.n	80029e4 <main+0x94c>
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <main+0x974>)
 80029ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80029d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029da:	d103      	bne.n	80029e4 <main+0x94c>
				emBrakeMotor(0);
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fe fe75 	bl	80016cc <emBrakeMotor>
 80029e2:	e002      	b.n	80029ea <main+0x952>
			else
				emBrakeMotor(1);
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7fe fe71 	bl	80016cc <emBrakeMotor>

			prev_time = HAL_GetTick();
 80029ea:	f002 faf3 	bl	8004fd4 <HAL_GetTick>
 80029ee:	6038      	str	r0, [r7, #0]
		if (HAL_GetTick() - prev_time >= 1)
 80029f0:	e459      	b.n	80022a6 <main+0x20e>
 80029f2:	bf00      	nop
 80029f4:	20000118 	.word	0x20000118
 80029f8:	2000029c 	.word	0x2000029c
 80029fc:	20000134 	.word	0x20000134
 8002a00:	2000010c 	.word	0x2000010c
 8002a04:	200005b0 	.word	0x200005b0
 8002a08:	20000564 	.word	0x20000564
 8002a0c:	20000278 	.word	0x20000278
 8002a10:	20000000 	.word	0x20000000
 8002a14:	20000034 	.word	0x20000034

08002a18 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b094      	sub	sp, #80	; 0x50
 8002a1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002a1e:	f107 0320 	add.w	r3, r7, #32
 8002a22:	2230      	movs	r2, #48	; 0x30
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f00a fa88 	bl	800cf3c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <SystemClock_Config+0xd8>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4a2a      	ldr	r2, [pc, #168]	; (8002af0 <SystemClock_Config+0xd8>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4c:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <SystemClock_Config+0xd8>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <SystemClock_Config+0xdc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <SystemClock_Config+0xdc>)
 8002a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <SystemClock_Config+0xdc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a74:	2301      	movs	r3, #1
 8002a76:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002a88:	2308      	movs	r3, #8
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002a8c:	23b4      	movs	r3, #180	; 0xb4
 8002a8e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a90:	2302      	movs	r3, #2
 8002a92:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a94:	2304      	movs	r3, #4
 8002a96:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a98:	f107 0320 	add.w	r3, r7, #32
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f005 fe7b 	bl	8008798 <HAL_RCC_OscConfig>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002aa8:	f000 fd38 	bl	800351c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002aac:	f005 fe24 	bl	80086f8 <HAL_PWREx_EnableOverDrive>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8002ab6:	f000 fd31 	bl	800351c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002aba:	230f      	movs	r3, #15
 8002abc:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ac6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002aca:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	2105      	movs	r1, #5
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f006 f97d 	bl	8008dd8 <HAL_RCC_ClockConfig>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 8002ae4:	f000 fd1a 	bl	800351c <Error_Handler>
	}
}
 8002ae8:	bf00      	nop
 8002aea:	3750      	adds	r7, #80	; 0x50
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40007000 	.word	0x40007000

08002af8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d11c      	bne.n	8002b42 <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8002b08:	f002 fa64 	bl	8004fd4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_GPIO_EXTI_Callback+0x58>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d916      	bls.n	8002b46 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8002b18:	480e      	ldr	r0, [pc, #56]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b1a:	f7fe fd99 	bl	8001650 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_GPIO_EXTI_Callback+0x60>)
 8002b28:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_GPIO_EXTI_Callback+0x64>)
 8002b34:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8002b36:	f002 fa4d 	bl	8004fd4 <HAL_GetTick>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <HAL_GPIO_EXTI_Callback+0x58>)
 8002b3e:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002b40:	e001      	b.n	8002b46 <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8002b46:	bf00      	nop
	}
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000264 	.word	0x20000264
 8002b54:	20000554 	.word	0x20000554
 8002b58:	200005ac 	.word	0x200005ac
 8002b5c:	200004b0 	.word	0x200004b0

08002b60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3f      	ldr	r2, [pc, #252]	; (8002c6c <HAL_UART_RxCpltCallback+0x10c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d175      	bne.n	8002c5e <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002b72:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002b7a:	785b      	ldrb	r3, [r3, #1]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002b84:	789b      	ldrb	r3, [r3, #2]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002b8e:	78db      	ldrb	r3, [r3, #3]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8002b96:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002b98:	791b      	ldrb	r3, [r3, #4]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002ba2:	795b      	ldrb	r3, [r3, #5]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002bac:	799b      	ldrb	r3, [r3, #6]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002bb6:	79db      	ldrb	r3, [r3, #7]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002bc0:	7a1b      	ldrb	r3, [r3, #8]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002bca:	7a5b      	ldrb	r3, [r3, #9]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 8002bd2:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002bd4:	7a9b      	ldrb	r3, [r3, #10]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002bde:	7adb      	ldrb	r3, [r3, #11]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002be8:	7b1b      	ldrb	r3, [r3, #12]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002bf2:	7b5b      	ldrb	r3, [r3, #13]
 8002bf4:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 8002bfa:	89fb      	ldrh	r3, [r7, #14]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c00:	7b9b      	ldrb	r3, [r3, #14]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d12b      	bne.n	8002c5e <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2baa      	cmp	r3, #170	; 0xaa
 8002c0c:	d127      	bne.n	8002c5e <HAL_UART_RxCpltCallback+0xfe>
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	2ba4      	cmp	r3, #164	; 0xa4
 8002c14:	d123      	bne.n	8002c5e <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c18:	78db      	ldrb	r3, [r3, #3]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d11f      	bne.n	8002c5e <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c20:	7a5b      	ldrb	r3, [r3, #9]
 8002c22:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c26:	7a1b      	ldrb	r3, [r3, #8]
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	441a      	add	r2, r3
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c2e:	79db      	ldrb	r3, [r3, #7]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	4413      	add	r3, r2
						+ (receive_buf[6]);
 8002c34:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c36:	7992      	ldrb	r2, [r2, #6]
 8002c38:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002c3a:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <HAL_UART_RxCpltCallback+0x114>)
 8002c3c:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c40:	7b5b      	ldrb	r3, [r3, #13]
 8002c42:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c46:	7b1b      	ldrb	r3, [r3, #12]
 8002c48:	041b      	lsls	r3, r3, #16
 8002c4a:	441a      	add	r2, r3
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c4e:	7adb      	ldrb	r3, [r3, #11]
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	4413      	add	r3, r2
						+ (receive_buf[10]);
 8002c54:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <HAL_UART_RxCpltCallback+0x110>)
 8002c56:	7a92      	ldrb	r2, [r2, #10]
 8002c58:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002c5a:	4a06      	ldr	r2, [pc, #24]	; (8002c74 <HAL_UART_RxCpltCallback+0x114>)
 8002c5c:	6053      	str	r3, [r2, #4]
			}
		}
	}

}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40004800 	.word	0x40004800
 8002c70:	2000059c 	.word	0x2000059c
 8002c74:	200004b4 	.word	0x200004b4

08002c78 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a7b      	ldr	r2, [pc, #492]	; (8002e70 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	f040 80e6 	bne.w	8002e56 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	4a79      	ldr	r2, [pc, #484]	; (8002e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8002c90:	2100      	movs	r1, #0
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f002 fea0 	bl	80059d8 <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8002c98:	7a7b      	ldrb	r3, [r7, #9]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d144      	bne.n	8002d28 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	4975      	ldr	r1, [pc, #468]	; (8002e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe ff8f 	bl	8001bc8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8002caa:	4873      	ldr	r0, [pc, #460]	; (8002e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002cac:	f7ff f805 	bl	8001cba <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos
 8002cb0:	4b71      	ldr	r3, [pc, #452]	; (8002e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (uint32_t) (4096 * BACK_GEAR_RATIO);
 8002cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
					- encoderBack.encoder_pos
 8002cb8:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
 8002cbc:	4a6e      	ldr	r2, [pc, #440]	; (8002e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002cbe:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002cc0:	4b6d      	ldr	r3, [pc, #436]	; (8002e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8002ccc:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8002e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 8002cd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cdc:	ee17 0a90 	vmov	r0, s15
 8002ce0:	f7fd fbea 	bl	80004b8 <__aeabi_f2d>
 8002ce4:	a35e      	add	r3, pc, #376	; (adr r3, 8002e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f7fd fa87 	bl	80001fc <__adddf3>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7fd ff2f 	bl	8000b58 <__aeabi_d2f>
 8002cfa:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002cfc:	4a5e      	ldr	r2, [pc, #376]	; (8002e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002cfe:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8002d00:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d02:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002d06:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d12:	dd09      	ble.n	8002d28 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
				encoderBack.angleDeg -= 360;
 8002d14:	4b58      	ldr	r3, [pc, #352]	; (8002e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d16:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002d1a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002d1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d22:	4b55      	ldr	r3, [pc, #340]	; (8002e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d24:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 8002d28:	7a7b      	ldrb	r3, [r7, #9]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	f040 8093 	bne.w	8002e56 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8002d30:	f107 0308 	add.w	r3, r7, #8
 8002d34:	4953      	ldr	r1, [pc, #332]	; (8002e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe ff46 	bl	8001bc8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 8002d3c:	4851      	ldr	r0, [pc, #324]	; (8002e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d3e:	f7fe ffbc 	bl	8001cba <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 8002d42:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 8002d4a:	f247 522f 	movw	r2, #29999	; 0x752f
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d839      	bhi.n	8002dc6 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8002d52:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 8002d5a:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8002d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d60:	0b5b      	lsrs	r3, r3, #13
 8002d62:	f242 3133 	movw	r1, #9011	; 0x2333
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 8002d6c:	4a45      	ldr	r2, [pc, #276]	; (8002e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d6e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002d70:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	ee07 3a90 	vmov	s15, r3
 8002d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7c:	ee17 0a90 	vmov	r0, s15
 8002d80:	f7fd fb9a 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002d84:	a338      	add	r3, pc, #224	; (adr r3, 8002e68 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	f7fd fd17 	bl	80007bc <__aeabi_ddiv>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	4b3c      	ldr	r3, [pc, #240]	; (8002e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002d9c:	f7fd fbe4 	bl	8000568 <__aeabi_dmul>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	a32d      	add	r3, pc, #180	; (adr r3, 8002e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	f7fd fa25 	bl	80001fc <__adddf3>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd fecd 	bl	8000b58 <__aeabi_d2f>
 8002dbe:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002dc0:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002dc2:	6413      	str	r3, [r2, #64]	; 0x40
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
			}
		}
	}
}
 8002dc4:	e047      	b.n	8002e56 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
						- encoderFront.encoder_pos;
 8002dc6:	4b2f      	ldr	r3, [pc, #188]	; (8002e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fb52 	bl	8000474 <__aeabi_ui2d>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	a124      	add	r1, pc, #144	; (adr r1, 8002e68 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002dd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dda:	f7fd fa0d 	bl	80001f8 <__aeabi_dsub>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	f7fd fe97 	bl	8000b18 <__aeabi_d2uiz>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a25      	ldr	r2, [pc, #148]	; (8002e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002dee:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfc:	ee17 0a90 	vmov	r0, s15
 8002e00:	f7fd fb5a 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8002e04:	a318      	add	r3, pc, #96	; (adr r3, 8002e68 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fcd7 	bl	80007bc <__aeabi_ddiv>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002e1c:	f7fd fba4 	bl	8000568 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	a30d      	add	r3, pc, #52	; (adr r3, 8002e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	f7fd f9e5 	bl	80001fc <__adddf3>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002e40:	f7fd f9da 	bl	80001f8 <__aeabi_dsub>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f7fd fe84 	bl	8000b58 <__aeabi_d2f>
 8002e50:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002e52:	4a0c      	ldr	r2, [pc, #48]	; (8002e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	d0e56042 	.word	0xd0e56042
 8002e64:	40424b22 	.word	0x40424b22
 8002e68:	9999999a 	.word	0x9999999a
 8002e6c:	40c19999 	.word	0x40c19999
 8002e70:	20000360 	.word	0x20000360
 8002e74:	200002ac 	.word	0x200002ac
 8002e78:	20000404 	.word	0x20000404
 8002e7c:	46000000 	.word	0x46000000
 8002e80:	43b40000 	.word	0x43b40000
 8002e84:	200003b0 	.word	0x200003b0
 8002e88:	e8bb8111 	.word	0xe8bb8111
 8002e8c:	40768000 	.word	0x40768000

08002e90 <baseMotorCommand>:

void baseMotorCommand(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_r + 1500;
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <baseMotorCommand+0x40>)
 8002e96:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e9e:	ee17 3a90 	vmov	r3, s15
 8002ea2:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <baseMotorCommand+0x44>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_l + 1500;
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <baseMotorCommand+0x40>)
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb6:	ee17 3a90 	vmov	r3, s15
 8002eba:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <baseMotorCommand+0x44>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	200000d8 	.word	0x200000d8
 8002ed4:	200005f8 	.word	0x200005f8

08002ed8 <climbingForward>:

//Move forward during climbing process
bool climbingForward(float dist)
{
 8002ed8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	ed87 0a01 	vstr	s0, [r7, #4]
	static int prev_tick = 0;
	static int32_t prev_enc;
	static bool first_loop = true;
	static float dist_remaining;

	float rps = (dist >= 0) ? 1.0 : -1.0; //rad/s
 8002ee4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	db02      	blt.n	8002ef8 <climbingForward+0x20>
 8002ef2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ef6:	e000      	b.n	8002efa <climbingForward+0x22>
 8002ef8:	4b65      	ldr	r3, [pc, #404]	; (8003090 <climbingForward+0x1b8>)
 8002efa:	617b      	str	r3, [r7, #20]

	if (first_loop)
 8002efc:	4b65      	ldr	r3, [pc, #404]	; (8003094 <climbingForward+0x1bc>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00f      	beq.n	8002f24 <climbingForward+0x4c>
	{
		prev_enc = hub_encoder_feedback.encoder_2;
 8002f04:	4b64      	ldr	r3, [pc, #400]	; (8003098 <climbingForward+0x1c0>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a64      	ldr	r2, [pc, #400]	; (800309c <climbingForward+0x1c4>)
 8002f0a:	6013      	str	r3, [r2, #0]
		prev_tick = HAL_GetTick();
 8002f0c:	f002 f862 	bl	8004fd4 <HAL_GetTick>
 8002f10:	4603      	mov	r3, r0
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b62      	ldr	r3, [pc, #392]	; (80030a0 <climbingForward+0x1c8>)
 8002f16:	601a      	str	r2, [r3, #0]
		first_loop = false;
 8002f18:	4b5e      	ldr	r3, [pc, #376]	; (8003094 <climbingForward+0x1bc>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
		dist_remaining = dist;
 8002f1e:	4a61      	ldr	r2, [pc, #388]	; (80030a4 <climbingForward+0x1cc>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6013      	str	r3, [r2, #0]
	}
	if (dist / dist_remaining >= 0 && first_loop == false)
 8002f24:	4b5f      	ldr	r3, [pc, #380]	; (80030a4 <climbingForward+0x1cc>)
 8002f26:	ed93 7a00 	vldr	s14, [r3]
 8002f2a:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	f2c0 8090 	blt.w	800305e <climbingForward+0x186>
 8002f3e:	4b55      	ldr	r3, [pc, #340]	; (8003094 <climbingForward+0x1bc>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	f083 0301 	eor.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8088 	beq.w	800305e <climbingForward+0x186>
	{
		send_HubMotor(rps, rps);
 8002f4e:	edd7 0a05 	vldr	s1, [r7, #20]
 8002f52:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f56:	f7fe fa4f 	bl	80013f8 <send_HubMotor>
		if (HAL_GetTick() - prev_tick > 1)
 8002f5a:	f002 f83b 	bl	8004fd4 <HAL_GetTick>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4a4f      	ldr	r2, [pc, #316]	; (80030a0 <climbingForward+0x1c8>)
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d977      	bls.n	800305a <climbingForward+0x182>
		{
			float dt = (float) (HAL_GetTick() - prev_tick) / FREQUENCY;
 8002f6a:	f002 f833 	bl	8004fd4 <HAL_GetTick>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a4b      	ldr	r2, [pc, #300]	; (80030a0 <climbingForward+0x1c8>)
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f7e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80030a8 <climbingForward+0x1d0>
 8002f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f86:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8002f8a:	4b43      	ldr	r3, [pc, #268]	; (8003098 <climbingForward+0x1c0>)
 8002f8c:	685a      	ldr	r2, [r3, #4]
					- prev_enc) / dt) * 2 * M_PI / 4096;
 8002f8e:	4b43      	ldr	r3, [pc, #268]	; (800309c <climbingForward+0x1c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	1ad3      	subs	r3, r2, r3
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
					- prev_enc) / dt) * 2 * M_PI / 4096;
 8002f9c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fa8:	ee17 0a90 	vmov	r0, s15
 8002fac:	f7fd fa84 	bl	80004b8 <__aeabi_f2d>
 8002fb0:	a333      	add	r3, pc, #204	; (adr r3, 8003080 <climbingForward+0x1a8>)
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	f7fd fad7 	bl	8000568 <__aeabi_dmul>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	4b39      	ldr	r3, [pc, #228]	; (80030ac <climbingForward+0x1d4>)
 8002fc8:	f7fd fbf8 	bl	80007bc <__aeabi_ddiv>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f7fd fdc0 	bl	8000b58 <__aeabi_d2f>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	60fb      	str	r3, [r7, #12]
			dist_remaining -= (HUB_DIAMETER * rad_per_s * dt) / 2;
 8002fdc:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <climbingForward+0x1cc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fa69 	bl	80004b8 <__aeabi_f2d>
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	460d      	mov	r5, r1
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7fd fa64 	bl	80004b8 <__aeabi_f2d>
 8002ff0:	a325      	add	r3, pc, #148	; (adr r3, 8003088 <climbingForward+0x1b0>)
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	f7fd fab7 	bl	8000568 <__aeabi_dmul>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4690      	mov	r8, r2
 8003000:	4699      	mov	r9, r3
 8003002:	6938      	ldr	r0, [r7, #16]
 8003004:	f7fd fa58 	bl	80004b8 <__aeabi_f2d>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4640      	mov	r0, r8
 800300e:	4649      	mov	r1, r9
 8003010:	f7fd faaa 	bl	8000568 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003024:	f7fd fbca 	bl	80007bc <__aeabi_ddiv>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4620      	mov	r0, r4
 800302e:	4629      	mov	r1, r5
 8003030:	f7fd f8e2 	bl	80001f8 <__aeabi_dsub>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	f7fd fd8c 	bl	8000b58 <__aeabi_d2f>
 8003040:	4603      	mov	r3, r0
 8003042:	4a18      	ldr	r2, [pc, #96]	; (80030a4 <climbingForward+0x1cc>)
 8003044:	6013      	str	r3, [r2, #0]
			prev_tick = HAL_GetTick();
 8003046:	f001 ffc5 	bl	8004fd4 <HAL_GetTick>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <climbingForward+0x1c8>)
 8003050:	601a      	str	r2, [r3, #0]
			prev_enc = hub_encoder_feedback.encoder_2;
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <climbingForward+0x1c0>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4a11      	ldr	r2, [pc, #68]	; (800309c <climbingForward+0x1c4>)
 8003058:	6013      	str	r3, [r2, #0]
		}
		return true;
 800305a:	2301      	movs	r3, #1
 800305c:	e009      	b.n	8003072 <climbingForward+0x19a>
	}
	else
	{
		first_loop = true;
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <climbingForward+0x1bc>)
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
		send_HubMotor(0, 0);
 8003064:	eddf 0a12 	vldr	s1, [pc, #72]	; 80030b0 <climbingForward+0x1d8>
 8003068:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80030b0 <climbingForward+0x1d8>
 800306c:	f7fe f9c4 	bl	80013f8 <send_HubMotor>
		return false;
 8003070:	2300      	movs	r3, #0
	}
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800307c:	f3af 8000 	nop.w
 8003080:	54442d18 	.word	0x54442d18
 8003084:	400921fb 	.word	0x400921fb
 8003088:	916872b0 	.word	0x916872b0
 800308c:	3fbf7ced 	.word	0x3fbf7ced
 8003090:	bf800000 	.word	0xbf800000
 8003094:	20000138 	.word	0x20000138
 8003098:	200004b4 	.word	0x200004b4
 800309c:	200002c8 	.word	0x200002c8
 80030a0:	200002cc 	.word	0x200002cc
 80030a4:	200002d0 	.word	0x200002d0
 80030a8:	447a0000 	.word	0x447a0000
 80030ac:	40b00000 	.word	0x40b00000
	...

080030b8 <goto_pos>:

bool goto_pos(int enc, PID_t pid_t)
{
 80030b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
//	&& encoderFront.encoder_pos >= MIN_FRONT_ALLOWABLE_ENC 	&& cur_enc_pos <= MAX_FRONT_ALLOWABLE_ENC
	int cur_enc_pos;

	if (pid_t == frontClimb_pid)
 80030c4:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <goto_pos+0x1f8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d17c      	bne.n	80031c8 <goto_pos+0x110>
	{
		cur_enc_pos = (int) encoderFront.encoder_pos;
 80030ce:	4b79      	ldr	r3, [pc, #484]	; (80032b4 <goto_pos+0x1fc>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	60fb      	str	r3, [r7, #12]
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 10
 80030d4:	4b76      	ldr	r3, [pc, #472]	; (80032b0 <goto_pos+0x1f8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd ff4b 	bl	8000f74 <pid_need_compute>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d06b      	beq.n	80031bc <goto_pos+0x104>
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd f9d2 	bl	8000494 <__aeabi_i2d>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4690      	mov	r8, r2
 80030f6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	4b6e      	ldr	r3, [pc, #440]	; (80032b8 <goto_pos+0x200>)
 8003100:	4640      	mov	r0, r8
 8003102:	4649      	mov	r1, r9
 8003104:	f7fd fcc0 	bl	8000a88 <__aeabi_dcmpgt>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d056      	beq.n	80031bc <goto_pos+0x104>
				&& ((encoderFront.encoder_pos >= 0 && encoderFront.encoder_pos < MAX_FRONT_ALLOWABLE_ENC)
 800310e:	4b69      	ldr	r3, [pc, #420]	; (80032b4 <goto_pos+0x1fc>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f640 421c 	movw	r2, #3100	; 0xc1c
 8003116:	4293      	cmp	r3, r2
 8003118:	d30b      	bcc.n	8003132 <goto_pos+0x7a>
						|| (encoderFront.encoder_pos > MIN_FRONT_ALLOWABLE_ENC && encoderFront.encoder_pos <= 4096 * FRONT_GEAR_RATIO)))
 800311a:	4b66      	ldr	r3, [pc, #408]	; (80032b4 <goto_pos+0x1fc>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8003122:	4293      	cmp	r3, r2
 8003124:	d94a      	bls.n	80031bc <goto_pos+0x104>
 8003126:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <goto_pos+0x1fc>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	f242 3233 	movw	r2, #9011	; 0x2333
 800312e:	4293      	cmp	r3, r2
 8003130:	d844      	bhi.n	80031bc <goto_pos+0x104>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f640 421c 	movw	r2, #3100	; 0xc1c
 8003138:	4293      	cmp	r3, r2
 800313a:	d90f      	bls.n	800315c <goto_pos+0xa4>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7fd f9a9 	bl	8000494 <__aeabi_i2d>
 8003142:	a359      	add	r3, pc, #356	; (adr r3, 80032a8 <goto_pos+0x1f0>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd f856 	bl	80001f8 <__aeabi_dsub>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f7fd fcb8 	bl	8000ac8 <__aeabi_d2iz>
 8003158:	4603      	mov	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f640 421c 	movw	r2, #3100	; 0xc1c
 8003162:	4293      	cmp	r3, r2
 8003164:	d30f      	bcc.n	8003186 <goto_pos+0xce>
				enc -= 4096 * FRONT_GEAR_RATIO;
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd f994 	bl	8000494 <__aeabi_i2d>
 800316c:	a34e      	add	r3, pc, #312	; (adr r3, 80032a8 <goto_pos+0x1f0>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f7fd f841 	bl	80001f8 <__aeabi_dsub>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f7fd fca3 	bl	8000ac8 <__aeabi_d2iz>
 8003182:	4603      	mov	r3, r0
 8003184:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003190:	4b4a      	ldr	r3, [pc, #296]	; (80032bc <goto_pos+0x204>)
 8003192:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	ee07 3a90 	vmov	s15, r3
 800319c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a0:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <goto_pos+0x208>)
 80031a2:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 80031a6:	4b42      	ldr	r3, [pc, #264]	; (80032b0 <goto_pos+0x1f8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fef7 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 80031b0:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <goto_pos+0x20c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a44      	ldr	r2, [pc, #272]	; (80032c8 <goto_pos+0x210>)
 80031b6:	6013      	str	r3, [r2, #0]
			return true;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e06f      	b.n	800329c <goto_pos+0x1e4>

		}
		else
		{
			speed[FRONT_INDEX] = 0;
 80031bc:	4b42      	ldr	r3, [pc, #264]	; (80032c8 <goto_pos+0x210>)
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
			return false;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e069      	b.n	800329c <goto_pos+0x1e4>
		}
	}
	else if (pid_t == backClimb_pid)
 80031c8:	4b40      	ldr	r3, [pc, #256]	; (80032cc <goto_pos+0x214>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d163      	bne.n	800329a <goto_pos+0x1e2>
	{
		cur_enc_pos = (int) encoderBack.encoder_pos;
 80031d2:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <goto_pos+0x218>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	60fb      	str	r3, [r7, #12]
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 10
 80031d8:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <goto_pos+0x214>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd fec9 	bl	8000f74 <pid_need_compute>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d052      	beq.n	800328e <goto_pos+0x1d6>
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f950 	bl	8000494 <__aeabi_i2d>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4614      	mov	r4, r2
 80031fa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <goto_pos+0x200>)
 8003204:	4620      	mov	r0, r4
 8003206:	4629      	mov	r1, r5
 8003208:	f7fd fc3e 	bl	8000a88 <__aeabi_dcmpgt>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d03d      	beq.n	800328e <goto_pos+0x1d6>
				&& ((encoderBack.encoder_pos >= 0 && encoderBack.encoder_pos < MAX_BACK_ALLOWABLE_ENC)
 8003212:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <goto_pos+0x218>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800321a:	4293      	cmp	r3, r2
 800321c:	d30a      	bcc.n	8003234 <goto_pos+0x17c>
						|| (encoderBack.encoder_pos > MIN_BACK_ALLOWABLE_ENC && encoderBack.encoder_pos <= 4096 * BACK_GEAR_RATIO)))
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <goto_pos+0x218>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f641 3258 	movw	r2, #7000	; 0x1b58
 8003226:	4293      	cmp	r3, r2
 8003228:	d931      	bls.n	800328e <goto_pos+0x1d6>
 800322a:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <goto_pos+0x218>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003232:	d82c      	bhi.n	800328e <goto_pos+0x1d6>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800323a:	4293      	cmp	r3, r2
 800323c:	d903      	bls.n	8003246 <goto_pos+0x18e>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003244:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800324c:	4293      	cmp	r3, r2
 800324e:	d303      	bcc.n	8003258 <goto_pos+0x1a0>
				enc -= 4096 * BACK_GEAR_RATIO;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003256:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003262:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <goto_pos+0x21c>)
 8003264:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <goto_pos+0x220>)
 8003274:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(backClimb_pid);
 8003278:	4b14      	ldr	r3, [pc, #80]	; (80032cc <goto_pos+0x214>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd fe8e 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[BACK_INDEX] = backClimb_output;
 8003282:	4b16      	ldr	r3, [pc, #88]	; (80032dc <goto_pos+0x224>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <goto_pos+0x210>)
 8003288:	6053      	str	r3, [r2, #4]
			return true;
 800328a:	2301      	movs	r3, #1
 800328c:	e006      	b.n	800329c <goto_pos+0x1e4>
		}
		else
		{
			speed[BACK_INDEX] = 0;
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <goto_pos+0x210>)
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	605a      	str	r2, [r3, #4]
			return false;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <goto_pos+0x1e4>
		}
	}
	return false;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032a6:	bf00      	nop
 80032a8:	9999999a 	.word	0x9999999a
 80032ac:	40c19999 	.word	0x40c19999
 80032b0:	20000564 	.word	0x20000564
 80032b4:	200003b0 	.word	0x200003b0
 80032b8:	40240000 	.word	0x40240000
 80032bc:	20000288 	.word	0x20000288
 80032c0:	20000280 	.word	0x20000280
 80032c4:	20000284 	.word	0x20000284
 80032c8:	20000278 	.word	0x20000278
 80032cc:	200005b0 	.word	0x200005b0
 80032d0:	20000404 	.word	0x20000404
 80032d4:	20000294 	.word	0x20000294
 80032d8:	2000028c 	.word	0x2000028c
 80032dc:	20000290 	.word	0x20000290

080032e0 <in_climb_process>:

bool in_climb_process(int front_enc, int back_enc){
 80032e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
	bool is_lifting;
	static bool first_loop = true;
	static uint32_t prev_angle_tick = 0;
	static float prev_angle = 0;
	float climbForward_speed = 0;
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]

	if (first_loop)
 80032f2:	4b7f      	ldr	r3, [pc, #508]	; (80034f0 <in_climb_process+0x210>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <in_climb_process+0x32>
	{
		prev_angle = encoderBack.angleDeg;
 80032fa:	4b7e      	ldr	r3, [pc, #504]	; (80034f4 <in_climb_process+0x214>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	4a7e      	ldr	r2, [pc, #504]	; (80034f8 <in_climb_process+0x218>)
 8003300:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 8003302:	f001 fe67 	bl	8004fd4 <HAL_GetTick>
 8003306:	4603      	mov	r3, r0
 8003308:	4a7c      	ldr	r2, [pc, #496]	; (80034fc <in_climb_process+0x21c>)
 800330a:	6013      	str	r3, [r2, #0]
		first_loop = false;
 800330c:	4b78      	ldr	r3, [pc, #480]	; (80034f0 <in_climb_process+0x210>)
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
	}

	//1. lift the front climbing wheel up until it reach it maximum pos
	//The process is controlled by PID on the front climbing wheel
	//the maximum pos is when the climbing wheel is below the wheelchair base
	goto_pos(front_enc, frontClimb_pid);
 8003312:	4b7b      	ldr	r3, [pc, #492]	; (8003500 <in_climb_process+0x220>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fecd 	bl	80030b8 <goto_pos>
	goto_pos(back_enc, backClimb_pid);
 800331e:	4b79      	ldr	r3, [pc, #484]	; (8003504 <in_climb_process+0x224>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4619      	mov	r1, r3
 8003324:	6838      	ldr	r0, [r7, #0]
 8003326:	f7ff fec7 	bl	80030b8 <goto_pos>

	if (fabs(speed[FRONT_INDEX] >= 4)
 800332a:	4b77      	ldr	r3, [pc, #476]	; (8003508 <in_climb_process+0x228>)
 800332c:	edd3 7a00 	vldr	s15, [r3]
 8003330:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333c:	da09      	bge.n	8003352 <in_climb_process+0x72>
			|| fabs(speed[BACK_INDEX] >= 4))
 800333e:	4b72      	ldr	r3, [pc, #456]	; (8003508 <in_climb_process+0x228>)
 8003340:	edd3 7a01 	vldr	s15, [r3, #4]
 8003344:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	db02      	blt.n	8003358 <in_climb_process+0x78>
		is_lifting = true;
 8003352:	2301      	movs	r3, #1
 8003354:	75fb      	strb	r3, [r7, #23]
 8003356:	e001      	b.n	800335c <in_climb_process+0x7c>
	else
		is_lifting = false;
 8003358:	2300      	movs	r3, #0
 800335a:	75fb      	strb	r3, [r7, #23]

	//2. During lifting, due to fixed point at the back climbing wheel.
	//The wheelchair would be pulled back if the back wheel not traveling while the its lifting
	//Therefore, lifting of back wheel and hub motor need to work at the same time to make sure the wheelchair is not moving back.
	//Pull back of wheelchair would cause the front climbing wheel to slip from the curb
	if (is_lifting == true && speed[BACK_INDEX] != 0)
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 809d 	beq.w	800349e <in_climb_process+0x1be>
 8003364:	4b68      	ldr	r3, [pc, #416]	; (8003508 <in_climb_process+0x228>)
 8003366:	edd3 7a01 	vldr	s15, [r3, #4]
 800336a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800336e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003372:	f000 8094 	beq.w	800349e <in_climb_process+0x1be>
	{
		double dt = (HAL_GetTick() - prev_angle_tick)
 8003376:	f001 fe2d 	bl	8004fd4 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	4b5f      	ldr	r3, [pc, #380]	; (80034fc <in_climb_process+0x21c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1ad3      	subs	r3, r2, r3
				/ (float) FREQUENCY;
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800350c <in_climb_process+0x22c>
 800338e:	eec7 6a87 	vdiv.f32	s13, s15, s14
		double dt = (HAL_GetTick() - prev_angle_tick)
 8003392:	ee16 0a90 	vmov	r0, s13
 8003396:	f7fd f88f 	bl	80004b8 <__aeabi_f2d>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		climbForward_speed = CLIMBING_LEG_LENGTH
				* (sin(TO_RAD(prev_angle))
 80033a2:	4b5b      	ldr	r3, [pc, #364]	; (8003510 <in_climb_process+0x230>)
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd f887 	bl	80004b8 <__aeabi_f2d>
 80033aa:	4604      	mov	r4, r0
 80033ac:	460d      	mov	r5, r1
 80033ae:	4b52      	ldr	r3, [pc, #328]	; (80034f8 <in_climb_process+0x218>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd f880 	bl	80004b8 <__aeabi_f2d>
 80033b8:	a349      	add	r3, pc, #292	; (adr r3, 80034e0 <in_climb_process+0x200>)
 80033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033be:	f7fd f8d3 	bl	8000568 <__aeabi_dmul>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	4b51      	ldr	r3, [pc, #324]	; (8003514 <in_climb_process+0x234>)
 80033d0:	f7fd f9f4 	bl	80007bc <__aeabi_ddiv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	ec43 2b17 	vmov	d7, r2, r3
 80033dc:	eeb0 0a47 	vmov.f32	s0, s14
 80033e0:	eef0 0a67 	vmov.f32	s1, s15
 80033e4:	f009 ffb0 	bl	800d348 <sin>
 80033e8:	ec59 8b10 	vmov	r8, r9, d0
						- sin(TO_RAD(encoderBack.angleDeg))) / dt; //unit: m/s,
 80033ec:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <in_climb_process+0x214>)
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd f861 	bl	80004b8 <__aeabi_f2d>
 80033f6:	a33a      	add	r3, pc, #232	; (adr r3, 80034e0 <in_climb_process+0x200>)
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	f7fd f8b4 	bl	8000568 <__aeabi_dmul>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	4b41      	ldr	r3, [pc, #260]	; (8003514 <in_climb_process+0x234>)
 800340e:	f7fd f9d5 	bl	80007bc <__aeabi_ddiv>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	ec43 2b17 	vmov	d7, r2, r3
 800341a:	eeb0 0a47 	vmov.f32	s0, s14
 800341e:	eef0 0a67 	vmov.f32	s1, s15
 8003422:	f009 ff91 	bl	800d348 <sin>
 8003426:	ec53 2b10 	vmov	r2, r3, d0
 800342a:	4640      	mov	r0, r8
 800342c:	4649      	mov	r1, r9
 800342e:	f7fc fee3 	bl	80001f8 <__aeabi_dsub>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
				* (sin(TO_RAD(prev_angle))
 8003436:	4620      	mov	r0, r4
 8003438:	4629      	mov	r1, r5
 800343a:	f7fd f895 	bl	8000568 <__aeabi_dmul>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
						- sin(TO_RAD(encoderBack.angleDeg))) / dt; //unit: m/s,
 8003446:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800344a:	f7fd f9b7 	bl	80007bc <__aeabi_ddiv>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
		climbForward_speed = CLIMBING_LEG_LENGTH
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f7fd fb7f 	bl	8000b58 <__aeabi_d2f>
 800345a:	4603      	mov	r3, r0
 800345c:	613b      	str	r3, [r7, #16]
		climbForward_speed = climbForward_speed
				/ (HUB_DIAMETER / 2);
 800345e:	6938      	ldr	r0, [r7, #16]
 8003460:	f7fd f82a 	bl	80004b8 <__aeabi_f2d>
 8003464:	a320      	add	r3, pc, #128	; (adr r3, 80034e8 <in_climb_process+0x208>)
 8003466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346a:	f7fd f9a7 	bl	80007bc <__aeabi_ddiv>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
		climbForward_speed = climbForward_speed
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f7fd fb6f 	bl	8000b58 <__aeabi_d2f>
 800347a:	4603      	mov	r3, r0
 800347c:	613b      	str	r3, [r7, #16]
		//Convert hub speed into pulse/second
		send_HubMotor(climbForward_speed, climbForward_speed);
 800347e:	edd7 0a04 	vldr	s1, [r7, #16]
 8003482:	ed97 0a04 	vldr	s0, [r7, #16]
 8003486:	f7fd ffb7 	bl	80013f8 <send_HubMotor>
		prev_angle = encoderBack.angleDeg;
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <in_climb_process+0x214>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <in_climb_process+0x218>)
 8003490:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 8003492:	f001 fd9f 	bl	8004fd4 <HAL_GetTick>
 8003496:	4603      	mov	r3, r0
 8003498:	4a18      	ldr	r2, [pc, #96]	; (80034fc <in_climb_process+0x21c>)
 800349a:	6013      	str	r3, [r2, #0]
	{
 800349c:	e010      	b.n	80034c0 <in_climb_process+0x1e0>
	}
	else if (is_lifting == true && speed[BACK_INDEX] == 0)
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <in_climb_process+0x1e0>
 80034a4:	4b18      	ldr	r3, [pc, #96]	; (8003508 <in_climb_process+0x228>)
 80034a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80034aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b2:	d105      	bne.n	80034c0 <in_climb_process+0x1e0>
		send_HubMotor(0, 0);
 80034b4:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003518 <in_climb_process+0x238>
 80034b8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003518 <in_climb_process+0x238>
 80034bc:	f7fd ff9c 	bl	80013f8 <send_HubMotor>

	if (!is_lifting) first_loop = true;
 80034c0:	7dfb      	ldrb	r3, [r7, #23]
 80034c2:	f083 0301 	eor.w	r3, r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <in_climb_process+0x1f2>
 80034cc:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <in_climb_process+0x210>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
	return is_lifting;
 80034d2:	7dfb      	ldrb	r3, [r7, #23]

}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034de:	bf00      	nop
 80034e0:	54442d18 	.word	0x54442d18
 80034e4:	400921fb 	.word	0x400921fb
 80034e8:	916872b0 	.word	0x916872b0
 80034ec:	3faf7ced 	.word	0x3faf7ced
 80034f0:	20000139 	.word	0x20000139
 80034f4:	20000404 	.word	0x20000404
 80034f8:	200002d4 	.word	0x200002d4
 80034fc:	200002d8 	.word	0x200002d8
 8003500:	20000564 	.word	0x20000564
 8003504:	200005b0 	.word	0x200005b0
 8003508:	20000278 	.word	0x20000278
 800350c:	447a0000 	.word	0x447a0000
 8003510:	3eb2b021 	.word	0x3eb2b021
 8003514:	40668000 	.word	0x40668000
 8003518:	00000000 	.word	0x00000000

0800351c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af04      	add	r7, sp, #16
 8003546:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003548:	2364      	movs	r3, #100	; 0x64
 800354a:	9302      	str	r3, [sp, #8]
 800354c:	2301      	movs	r3, #1
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	f107 030f 	add.w	r3, r7, #15
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2301      	movs	r3, #1
 8003558:	2275      	movs	r2, #117	; 0x75
 800355a:	21d0      	movs	r1, #208	; 0xd0
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f004 fa7d 	bl	8007a5c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b68      	cmp	r3, #104	; 0x68
 8003566:	d13d      	bne.n	80035e4 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800356c:	2364      	movs	r3, #100	; 0x64
 800356e:	9302      	str	r3, [sp, #8]
 8003570:	2301      	movs	r3, #1
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	f107 030e 	add.w	r3, r7, #14
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2301      	movs	r3, #1
 800357c:	226b      	movs	r2, #107	; 0x6b
 800357e:	21d0      	movs	r1, #208	; 0xd0
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f004 f965 	bl	8007850 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8003586:	2307      	movs	r3, #7
 8003588:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800358a:	2364      	movs	r3, #100	; 0x64
 800358c:	9302      	str	r3, [sp, #8]
 800358e:	2301      	movs	r3, #1
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	f107 030e 	add.w	r3, r7, #14
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	2301      	movs	r3, #1
 800359a:	2219      	movs	r2, #25
 800359c:	21d0      	movs	r1, #208	; 0xd0
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f004 f956 	bl	8007850 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80035a8:	2364      	movs	r3, #100	; 0x64
 80035aa:	9302      	str	r3, [sp, #8]
 80035ac:	2301      	movs	r3, #1
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	f107 030e 	add.w	r3, r7, #14
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2301      	movs	r3, #1
 80035b8:	221c      	movs	r2, #28
 80035ba:	21d0      	movs	r1, #208	; 0xd0
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f004 f947 	bl	8007850 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80035c6:	2364      	movs	r3, #100	; 0x64
 80035c8:	9302      	str	r3, [sp, #8]
 80035ca:	2301      	movs	r3, #1
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	f107 030e 	add.w	r3, r7, #14
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2301      	movs	r3, #1
 80035d6:	221b      	movs	r2, #27
 80035d8:	21d0      	movs	r1, #208	; 0xd0
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f004 f938 	bl	8007850 <HAL_I2C_Mem_Write>
        return 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <MPU6050_Init+0xa6>
    }
    return 1;
 80035e4:	2301      	movs	r3, #1
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80035f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f4:	b094      	sub	sp, #80	; 0x50
 80035f6:	af04      	add	r7, sp, #16
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80035fc:	2364      	movs	r3, #100	; 0x64
 80035fe:	9302      	str	r3, [sp, #8]
 8003600:	230e      	movs	r3, #14
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	f107 0308 	add.w	r3, r7, #8
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	2301      	movs	r3, #1
 800360c:	223b      	movs	r2, #59	; 0x3b
 800360e:	21d0      	movs	r1, #208	; 0xd0
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f004 fa23 	bl	8007a5c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8003616:	7a3b      	ldrb	r3, [r7, #8]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	b21a      	sxth	r2, r3
 800361c:	7a7b      	ldrb	r3, [r7, #9]
 800361e:	b21b      	sxth	r3, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	b21a      	sxth	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8003628:	7abb      	ldrb	r3, [r7, #10]
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	b21a      	sxth	r2, r3
 800362e:	7afb      	ldrb	r3, [r7, #11]
 8003630:	b21b      	sxth	r3, r3
 8003632:	4313      	orrs	r3, r2
 8003634:	b21a      	sxth	r2, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800363a:	7b3b      	ldrb	r3, [r7, #12]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	b21a      	sxth	r2, r3
 8003640:	7b7b      	ldrb	r3, [r7, #13]
 8003642:	b21b      	sxth	r3, r3
 8003644:	4313      	orrs	r3, r2
 8003646:	b21a      	sxth	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800364c:	7bbb      	ldrb	r3, [r7, #14]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	b21a      	sxth	r2, r3
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	b21b      	sxth	r3, r3
 8003656:	4313      	orrs	r3, r2
 8003658:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800365a:	7c3b      	ldrb	r3, [r7, #16]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	b21a      	sxth	r2, r3
 8003660:	7c7b      	ldrb	r3, [r7, #17]
 8003662:	b21b      	sxth	r3, r3
 8003664:	4313      	orrs	r3, r2
 8003666:	b21a      	sxth	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800366c:	7cbb      	ldrb	r3, [r7, #18]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	b21a      	sxth	r2, r3
 8003672:	7cfb      	ldrb	r3, [r7, #19]
 8003674:	b21b      	sxth	r3, r3
 8003676:	4313      	orrs	r3, r2
 8003678:	b21a      	sxth	r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800367e:	7d3b      	ldrb	r3, [r7, #20]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	b21a      	sxth	r2, r3
 8003684:	7d7b      	ldrb	r3, [r7, #21]
 8003686:	b21b      	sxth	r3, r3
 8003688:	4313      	orrs	r3, r2
 800368a:	b21a      	sxth	r2, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc fefc 	bl	8000494 <__aeabi_i2d>
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	4bbd      	ldr	r3, [pc, #756]	; (8003998 <MPU6050_Read_All+0x3a8>)
 80036a2:	f7fd f88b 	bl	80007bc <__aeabi_ddiv>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	6839      	ldr	r1, [r7, #0]
 80036ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fc feec 	bl	8000494 <__aeabi_i2d>
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	4bb5      	ldr	r3, [pc, #724]	; (8003998 <MPU6050_Read_All+0x3a8>)
 80036c2:	f7fd f87b 	bl	80007bc <__aeabi_ddiv>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	6839      	ldr	r1, [r7, #0]
 80036cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc fedc 	bl	8000494 <__aeabi_i2d>
 80036dc:	a3a8      	add	r3, pc, #672	; (adr r3, 8003980 <MPU6050_Read_All+0x390>)
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f7fd f86b 	bl	80007bc <__aeabi_ddiv>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	6839      	ldr	r1, [r7, #0]
 80036ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80036f0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80036f4:	ee07 3a90 	vmov	s15, r3
 80036f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036fc:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800399c <MPU6050_Read_All+0x3ac>
 8003700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003704:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80039a0 <MPU6050_Read_All+0x3b0>
 8003708:	ee77 7a87 	vadd.f32	s15, s15, s14
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003718:	4618      	mov	r0, r3
 800371a:	f7fc febb 	bl	8000494 <__aeabi_i2d>
 800371e:	a39a      	add	r3, pc, #616	; (adr r3, 8003988 <MPU6050_Read_All+0x398>)
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	f7fd f84a 	bl	80007bc <__aeabi_ddiv>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	6839      	ldr	r1, [r7, #0]
 800372e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003738:	4618      	mov	r0, r3
 800373a:	f7fc feab 	bl	8000494 <__aeabi_i2d>
 800373e:	a392      	add	r3, pc, #584	; (adr r3, 8003988 <MPU6050_Read_All+0x398>)
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f7fd f83a 	bl	80007bc <__aeabi_ddiv>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	6839      	ldr	r1, [r7, #0]
 800374e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003758:	4618      	mov	r0, r3
 800375a:	f7fc fe9b 	bl	8000494 <__aeabi_i2d>
 800375e:	a38a      	add	r3, pc, #552	; (adr r3, 8003988 <MPU6050_Read_All+0x398>)
 8003760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003764:	f7fd f82a 	bl	80007bc <__aeabi_ddiv>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8003772:	f001 fc2f 	bl	8004fd4 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	4b8a      	ldr	r3, [pc, #552]	; (80039a4 <MPU6050_Read_All+0x3b4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	4618      	mov	r0, r3
 8003780:	f7fc fe78 	bl	8000474 <__aeabi_ui2d>
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	4b87      	ldr	r3, [pc, #540]	; (80039a8 <MPU6050_Read_All+0x3b8>)
 800378a:	f7fd f817 	bl	80007bc <__aeabi_ddiv>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8003796:	f001 fc1d 	bl	8004fd4 <HAL_GetTick>
 800379a:	4603      	mov	r3, r0
 800379c:	4a81      	ldr	r2, [pc, #516]	; (80039a4 <MPU6050_Read_All+0x3b4>)
 800379e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a6:	461a      	mov	r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ae:	fb03 f202 	mul.w	r2, r3, r2
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037b8:	4619      	mov	r1, r3
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037c0:	fb03 f301 	mul.w	r3, r3, r1
 80037c4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fc fe64 	bl	8000494 <__aeabi_i2d>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	ec43 2b10 	vmov	d0, r2, r3
 80037d4:	f009 fef6 	bl	800d5c4 <sqrt>
 80037d8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80037e8:	f7fd f926 	bl	8000a38 <__aeabi_dcmpeq>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11f      	bne.n	8003832 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fc fe4b 	bl	8000494 <__aeabi_i2d>
 80037fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003802:	f7fc ffdb 	bl	80007bc <__aeabi_ddiv>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	ec43 2b17 	vmov	d7, r2, r3
 800380e:	eeb0 0a47 	vmov.f32	s0, s14
 8003812:	eef0 0a67 	vmov.f32	s1, s15
 8003816:	f009 fb9b 	bl	800cf50 <atan>
 800381a:	ec51 0b10 	vmov	r0, r1, d0
 800381e:	a35c      	add	r3, pc, #368	; (adr r3, 8003990 <MPU6050_Read_All+0x3a0>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f7fc fea0 	bl	8000568 <__aeabi_dmul>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003830:	e005      	b.n	800383e <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003844:	425b      	negs	r3, r3
 8003846:	4618      	mov	r0, r3
 8003848:	f7fc fe24 	bl	8000494 <__aeabi_i2d>
 800384c:	4682      	mov	sl, r0
 800384e:	468b      	mov	fp, r1
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe1c 	bl	8000494 <__aeabi_i2d>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	ec43 2b11 	vmov	d1, r2, r3
 8003864:	ec4b ab10 	vmov	d0, sl, fp
 8003868:	f009 fdfc 	bl	800d464 <atan2>
 800386c:	ec51 0b10 	vmov	r0, r1, d0
 8003870:	a347      	add	r3, pc, #284	; (adr r3, 8003990 <MPU6050_Read_All+0x3a0>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f7fc fe77 	bl	8000568 <__aeabi_dmul>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	4b49      	ldr	r3, [pc, #292]	; (80039ac <MPU6050_Read_All+0x3bc>)
 8003888:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800388c:	f7fd f8de 	bl	8000a4c <__aeabi_dcmplt>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <MPU6050_Read_All+0x2bc>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <MPU6050_Read_All+0x3c0>)
 80038a2:	f7fd f8f1 	bl	8000a88 <__aeabi_dcmpgt>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d114      	bne.n	80038d6 <MPU6050_Read_All+0x2e6>
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <MPU6050_Read_All+0x3c0>)
 80038b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038b6:	f7fd f8e7 	bl	8000a88 <__aeabi_dcmpgt>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d015      	beq.n	80038ec <MPU6050_Read_All+0x2fc>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <MPU6050_Read_All+0x3bc>)
 80038cc:	f7fd f8be 	bl	8000a4c <__aeabi_dcmplt>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 80038d6:	4937      	ldr	r1, [pc, #220]	; (80039b4 <MPU6050_Read_All+0x3c4>)
 80038d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80038e0:	6839      	ldr	r1, [r7, #0]
 80038e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80038ea:	e014      	b.n	8003916 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80038f2:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80038f6:	eeb0 1a47 	vmov.f32	s2, s14
 80038fa:	eef0 1a67 	vmov.f32	s3, s15
 80038fe:	ed97 0b06 	vldr	d0, [r7, #24]
 8003902:	482c      	ldr	r0, [pc, #176]	; (80039b4 <MPU6050_Read_All+0x3c4>)
 8003904:	f000 f85a 	bl	80039bc <Kalman_getAngle>
 8003908:	eeb0 7a40 	vmov.f32	s14, s0
 800390c:	eef0 7a60 	vmov.f32	s15, s1
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800391c:	4690      	mov	r8, r2
 800391e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <MPU6050_Read_All+0x3c0>)
 8003928:	4640      	mov	r0, r8
 800392a:	4649      	mov	r1, r9
 800392c:	f7fd f8ac 	bl	8000a88 <__aeabi_dcmpgt>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800393c:	4614      	mov	r4, r2
 800393e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800394e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003952:	eeb0 1a47 	vmov.f32	s2, s14
 8003956:	eef0 1a67 	vmov.f32	s3, s15
 800395a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800395e:	4816      	ldr	r0, [pc, #88]	; (80039b8 <MPU6050_Read_All+0x3c8>)
 8003960:	f000 f82c 	bl	80039bc <Kalman_getAngle>
 8003964:	eeb0 7a40 	vmov.f32	s14, s0
 8003968:	eef0 7a60 	vmov.f32	s15, s1
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8003972:	bf00      	nop
 8003974:	3740      	adds	r7, #64	; 0x40
 8003976:	46bd      	mov	sp, r7
 8003978:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800397c:	f3af 8000 	nop.w
 8003980:	00000000 	.word	0x00000000
 8003984:	40cc2900 	.word	0x40cc2900
 8003988:	00000000 	.word	0x00000000
 800398c:	40606000 	.word	0x40606000
 8003990:	1a63c1f8 	.word	0x1a63c1f8
 8003994:	404ca5dc 	.word	0x404ca5dc
 8003998:	40d00000 	.word	0x40d00000
 800399c:	43aa0000 	.word	0x43aa0000
 80039a0:	42121eb8 	.word	0x42121eb8
 80039a4:	200005b4 	.word	0x200005b4
 80039a8:	408f4000 	.word	0x408f4000
 80039ac:	c0568000 	.word	0xc0568000
 80039b0:	40568000 	.word	0x40568000
 80039b4:	20000188 	.word	0x20000188
 80039b8:	20000140 	.word	0x20000140

080039bc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80039bc:	b5b0      	push	{r4, r5, r7, lr}
 80039be:	b096      	sub	sp, #88	; 0x58
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	61f8      	str	r0, [r7, #28]
 80039c4:	ed87 0b04 	vstr	d0, [r7, #16]
 80039c8:	ed87 1b02 	vstr	d1, [r7, #8]
 80039cc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039da:	f7fc fc0d 	bl	80001f8 <__aeabi_dsub>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80039ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039f4:	f7fc fdb8 	bl	8000568 <__aeabi_dmul>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4620      	mov	r0, r4
 80039fe:	4629      	mov	r1, r5
 8003a00:	f7fc fbfc 	bl	80001fc <__adddf3>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	69f9      	ldr	r1, [r7, #28]
 8003a0a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a1e:	f7fc fda3 	bl	8000568 <__aeabi_dmul>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003a30:	f7fc fbe2 	bl	80001f8 <__aeabi_dsub>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003a42:	f7fc fbd9 	bl	80001f8 <__aeabi_dsub>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f7fc fbd2 	bl	80001fc <__adddf3>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a64:	f7fc fd80 	bl	8000568 <__aeabi_dmul>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	4629      	mov	r1, r5
 8003a70:	f7fc fbc4 	bl	80001fc <__adddf3>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	69f9      	ldr	r1, [r7, #28]
 8003a7a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a8e:	f7fc fd6b 	bl	8000568 <__aeabi_dmul>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4620      	mov	r0, r4
 8003a98:	4629      	mov	r1, r5
 8003a9a:	f7fc fbad 	bl	80001f8 <__aeabi_dsub>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	69f9      	ldr	r1, [r7, #28]
 8003aa4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ab8:	f7fc fd56 	bl	8000568 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	f7fc fb98 	bl	80001f8 <__aeabi_dsub>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	69f9      	ldr	r1, [r7, #28]
 8003ace:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ae2:	f7fc fd41 	bl	8000568 <__aeabi_dmul>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4620      	mov	r0, r4
 8003aec:	4629      	mov	r1, r5
 8003aee:	f7fc fb85 	bl	80001fc <__adddf3>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	69f9      	ldr	r1, [r7, #28]
 8003af8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b08:	f7fc fb78 	bl	80001fc <__adddf3>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003b1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b1e:	f7fc fe4d 	bl	80007bc <__aeabi_ddiv>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003b30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b34:	f7fc fe42 	bl	80007bc <__aeabi_ddiv>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003b46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b4a:	f7fc fb55 	bl	80001f8 <__aeabi_dsub>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003b5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003b60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b64:	f7fc fd00 	bl	8000568 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	4629      	mov	r1, r5
 8003b70:	f7fc fb44 	bl	80001fc <__adddf3>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	69f9      	ldr	r1, [r7, #28]
 8003b7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003b84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b8c:	f7fc fcec 	bl	8000568 <__aeabi_dmul>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4620      	mov	r0, r4
 8003b96:	4629      	mov	r1, r5
 8003b98:	f7fc fb30 	bl	80001fc <__adddf3>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	69f9      	ldr	r1, [r7, #28]
 8003ba2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003bac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003bb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003bc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003bc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bc8:	f7fc fcce 	bl	8000568 <__aeabi_dmul>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	f7fc fb10 	bl	80001f8 <__aeabi_dsub>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	69f9      	ldr	r1, [r7, #28]
 8003bde:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003be8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003bec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003bf0:	f7fc fcba 	bl	8000568 <__aeabi_dmul>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	f7fc fafc 	bl	80001f8 <__aeabi_dsub>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	69f9      	ldr	r1, [r7, #28]
 8003c06:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003c10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c18:	f7fc fca6 	bl	8000568 <__aeabi_dmul>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4620      	mov	r0, r4
 8003c22:	4629      	mov	r1, r5
 8003c24:	f7fc fae8 	bl	80001f8 <__aeabi_dsub>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	69f9      	ldr	r1, [r7, #28]
 8003c2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003c38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c40:	f7fc fc92 	bl	8000568 <__aeabi_dmul>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4620      	mov	r0, r4
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	f7fc fad4 	bl	80001f8 <__aeabi_dsub>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	69f9      	ldr	r1, [r7, #28]
 8003c56:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c60:	ec43 2b17 	vmov	d7, r2, r3
};
 8003c64:	eeb0 0a47 	vmov.f32	s0, s14
 8003c68:	eef0 0a67 	vmov.f32	s1, s15
 8003c6c:	3758      	adds	r7, #88	; 0x58
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003c74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003c78:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003c7a:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <MX_SPI1_Init+0x6c>)
 8003c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c7e:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003c86:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c8c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003c98:	2202      	movs	r2, #2
 8003c9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003cac:	2228      	movs	r2, #40	; 0x28
 8003cae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003cc4:	220a      	movs	r2, #10
 8003cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cc8:	4804      	ldr	r0, [pc, #16]	; (8003cdc <MX_SPI1_Init+0x68>)
 8003cca:	f005 fb3f 	bl	800934c <HAL_SPI_Init>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8003cd4:	f7ff fc22 	bl	800351c <Error_Handler>
  }

}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000308 	.word	0x20000308
 8003ce0:	40013000 	.word	0x40013000

08003ce4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	; 0x28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_SPI_MspInit+0x84>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d12b      	bne.n	8003d5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d14:	6453      	str	r3, [r2, #68]	; 0x44
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	4a10      	ldr	r2, [pc, #64]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6313      	str	r3, [r2, #48]	; 0x30
 8003d32:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8003d3e:	2360      	movs	r3, #96	; 0x60
 8003d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d42:	2302      	movs	r3, #2
 8003d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d4e:	2305      	movs	r3, #5
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d52:	f107 0314 	add.w	r3, r7, #20
 8003d56:	4619      	mov	r1, r3
 8003d58:	4805      	ldr	r0, [pc, #20]	; (8003d70 <HAL_SPI_MspInit+0x8c>)
 8003d5a:	f003 f811 	bl	8006d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003d5e:	bf00      	nop
 8003d60:	3728      	adds	r7, #40	; 0x28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40013000 	.word	0x40013000
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40020000 	.word	0x40020000

08003d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	4a0f      	ldr	r2, [pc, #60]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d88:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a08      	ldr	r2, [pc, #32]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800

08003dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dd6:	e7fe      	b.n	8003dd6 <HardFault_Handler+0x4>

08003dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ddc:	e7fe      	b.n	8003ddc <MemManage_Handler+0x4>

08003dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dde:	b480      	push	{r7}
 8003de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003de2:	e7fe      	b.n	8003de2 <BusFault_Handler+0x4>

08003de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003de8:	e7fe      	b.n	8003de8 <UsageFault_Handler+0x4>

08003dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e18:	f001 f8c8 	bl	8004fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003e24:	4802      	ldr	r0, [pc, #8]	; (8003e30 <DMA1_Stream1_IRQHandler+0x10>)
 8003e26:	f002 fd41 	bl	80068ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	200006b8 	.word	0x200006b8

08003e34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e38:	4802      	ldr	r0, [pc, #8]	; (8003e44 <CAN1_RX0_IRQHandler+0x10>)
 8003e3a:	f001 ff1d 	bl	8005c78 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000360 	.word	0x20000360

08003e48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003e4c:	2080      	movs	r0, #128	; 0x80
 8003e4e:	f003 fb1b 	bl	8007488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <SystemInit+0x28>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	4a07      	ldr	r2, [pc, #28]	; (8003e80 <SystemInit+0x28>)
 8003e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <SystemInit+0x28>)
 8003e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e72:	609a      	str	r2, [r3, #8]
#endif
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b096      	sub	sp, #88	; 0x58
 8003e88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	605a      	str	r2, [r3, #4]
 8003e94:	609a      	str	r2, [r3, #8]
 8003e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	60da      	str	r2, [r3, #12]
 8003eb0:	611a      	str	r2, [r3, #16]
 8003eb2:	615a      	str	r2, [r3, #20]
 8003eb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	2220      	movs	r2, #32
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f009 f83d 	bl	800cf3c <memset>

  htim1.Instance = TIM1;
 8003ec2:	4b3e      	ldr	r3, [pc, #248]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003ec4:	4a3e      	ldr	r2, [pc, #248]	; (8003fc0 <MX_TIM1_Init+0x13c>)
 8003ec6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003ec8:	4b3c      	ldr	r3, [pc, #240]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003eca:	22b3      	movs	r2, #179	; 0xb3
 8003ecc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ece:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003ed4:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003ed6:	2263      	movs	r2, #99	; 0x63
 8003ed8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eda:	4b38      	ldr	r3, [pc, #224]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ee0:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ee6:	4b35      	ldr	r3, [pc, #212]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003eec:	4833      	ldr	r0, [pc, #204]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003eee:	f005 ff2b 	bl	8009d48 <HAL_TIM_Base_Init>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003ef8:	f7ff fb10 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f06:	4619      	mov	r1, r3
 8003f08:	482c      	ldr	r0, [pc, #176]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003f0a:	f006 fea9 	bl	800ac60 <HAL_TIM_ConfigClockSource>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003f14:	f7ff fb02 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f18:	4828      	ldr	r0, [pc, #160]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003f1a:	f006 f86b 	bl	8009ff4 <HAL_TIM_PWM_Init>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003f24:	f7ff fafa 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f34:	4619      	mov	r1, r3
 8003f36:	4821      	ldr	r0, [pc, #132]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003f38:	f007 ff30 	bl	800bd9c <HAL_TIMEx_MasterConfigSynchronization>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003f42:	f7ff faeb 	bl	800351c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f46:	2360      	movs	r3, #96	; 0x60
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f52:	2300      	movs	r3, #0
 8003f54:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f56:	2300      	movs	r3, #0
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f66:	2204      	movs	r2, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4814      	ldr	r0, [pc, #80]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003f6c:	f006 fc9c 	bl	800a8a8 <HAL_TIM_PWM_ConfigChannel>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003f76:	f7ff fad1 	bl	800351c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f98:	1d3b      	adds	r3, r7, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4807      	ldr	r0, [pc, #28]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003f9e:	f007 ffdb 	bl	800bf58 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003fa8:	f7ff fab8 	bl	800351c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003fac:	4803      	ldr	r0, [pc, #12]	; (8003fbc <MX_TIM1_Init+0x138>)
 8003fae:	f000 fa2b 	bl	8004408 <HAL_TIM_MspPostInit>

}
 8003fb2:	bf00      	nop
 8003fb4:	3758      	adds	r7, #88	; 0x58
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000638 	.word	0x20000638
 8003fc0:	40010000 	.word	0x40010000

08003fc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fca:	f107 0318 	add.w	r3, r7, #24
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fd8:	f107 0310 	add.w	r3, r7, #16
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003fe2:	463b      	mov	r3, r7
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8003fee:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <MX_TIM2_Init+0xf0>)
 8003ff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ff4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8003ff6:	4b2f      	ldr	r3, [pc, #188]	; (80040b4 <MX_TIM2_Init+0xf0>)
 8003ff8:	22b3      	movs	r2, #179	; 0xb3
 8003ffa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffc:	4b2d      	ldr	r3, [pc, #180]	; (80040b4 <MX_TIM2_Init+0xf0>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8004002:	4b2c      	ldr	r3, [pc, #176]	; (80040b4 <MX_TIM2_Init+0xf0>)
 8004004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004008:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800400a:	4b2a      	ldr	r3, [pc, #168]	; (80040b4 <MX_TIM2_Init+0xf0>)
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004010:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <MX_TIM2_Init+0xf0>)
 8004012:	2200      	movs	r2, #0
 8004014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004016:	4827      	ldr	r0, [pc, #156]	; (80040b4 <MX_TIM2_Init+0xf0>)
 8004018:	f005 fe96 	bl	8009d48 <HAL_TIM_Base_Init>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8004022:	f7ff fa7b 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800402a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800402c:	f107 0318 	add.w	r3, r7, #24
 8004030:	4619      	mov	r1, r3
 8004032:	4820      	ldr	r0, [pc, #128]	; (80040b4 <MX_TIM2_Init+0xf0>)
 8004034:	f006 fe14 	bl	800ac60 <HAL_TIM_ConfigClockSource>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800403e:	f7ff fa6d 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004042:	481c      	ldr	r0, [pc, #112]	; (80040b4 <MX_TIM2_Init+0xf0>)
 8004044:	f006 f9a6 	bl	800a394 <HAL_TIM_IC_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800404e:	f7ff fa65 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800405a:	f107 0310 	add.w	r3, r7, #16
 800405e:	4619      	mov	r1, r3
 8004060:	4814      	ldr	r0, [pc, #80]	; (80040b4 <MX_TIM2_Init+0xf0>)
 8004062:	f007 fe9b 	bl	800bd9c <HAL_TIMEx_MasterConfigSynchronization>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800406c:	f7ff fa56 	bl	800351c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004070:	2300      	movs	r3, #0
 8004072:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004074:	2301      	movs	r3, #1
 8004076:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004080:	463b      	mov	r3, r7
 8004082:	2208      	movs	r2, #8
 8004084:	4619      	mov	r1, r3
 8004086:	480b      	ldr	r0, [pc, #44]	; (80040b4 <MX_TIM2_Init+0xf0>)
 8004088:	f006 fa5a 	bl	800a540 <HAL_TIM_IC_ConfigChannel>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8004092:	f7ff fa43 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004096:	463b      	mov	r3, r7
 8004098:	220c      	movs	r2, #12
 800409a:	4619      	mov	r1, r3
 800409c:	4805      	ldr	r0, [pc, #20]	; (80040b4 <MX_TIM2_Init+0xf0>)
 800409e:	f006 fa4f 	bl	800a540 <HAL_TIM_IC_ConfigChannel>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80040a8:	f7ff fa38 	bl	800351c <Error_Handler>
  }

}
 80040ac:	bf00      	nop
 80040ae:	3728      	adds	r7, #40	; 0x28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000678 	.word	0x20000678

080040b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08e      	sub	sp, #56	; 0x38
 80040bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	609a      	str	r2, [r3, #8]
 80040ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040cc:	f107 0320 	add.w	r3, r7, #32
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	611a      	str	r2, [r3, #16]
 80040e4:	615a      	str	r2, [r3, #20]
 80040e6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80040e8:	4b32      	ldr	r3, [pc, #200]	; (80041b4 <MX_TIM3_Init+0xfc>)
 80040ea:	4a33      	ldr	r2, [pc, #204]	; (80041b8 <MX_TIM3_Init+0x100>)
 80040ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80040ee:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <MX_TIM3_Init+0xfc>)
 80040f0:	2259      	movs	r2, #89	; 0x59
 80040f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040f4:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <MX_TIM3_Init+0xfc>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80040fa:	4b2e      	ldr	r3, [pc, #184]	; (80041b4 <MX_TIM3_Init+0xfc>)
 80040fc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004100:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004102:	4b2c      	ldr	r3, [pc, #176]	; (80041b4 <MX_TIM3_Init+0xfc>)
 8004104:	2200      	movs	r2, #0
 8004106:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004108:	4b2a      	ldr	r3, [pc, #168]	; (80041b4 <MX_TIM3_Init+0xfc>)
 800410a:	2200      	movs	r2, #0
 800410c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800410e:	4829      	ldr	r0, [pc, #164]	; (80041b4 <MX_TIM3_Init+0xfc>)
 8004110:	f005 fe1a 	bl	8009d48 <HAL_TIM_Base_Init>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800411a:	f7ff f9ff 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800411e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004128:	4619      	mov	r1, r3
 800412a:	4822      	ldr	r0, [pc, #136]	; (80041b4 <MX_TIM3_Init+0xfc>)
 800412c:	f006 fd98 	bl	800ac60 <HAL_TIM_ConfigClockSource>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004136:	f7ff f9f1 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800413a:	481e      	ldr	r0, [pc, #120]	; (80041b4 <MX_TIM3_Init+0xfc>)
 800413c:	f005 ff5a 	bl	8009ff4 <HAL_TIM_PWM_Init>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004146:	f7ff f9e9 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004152:	f107 0320 	add.w	r3, r7, #32
 8004156:	4619      	mov	r1, r3
 8004158:	4816      	ldr	r0, [pc, #88]	; (80041b4 <MX_TIM3_Init+0xfc>)
 800415a:	f007 fe1f 	bl	800bd9c <HAL_TIMEx_MasterConfigSynchronization>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004164:	f7ff f9da 	bl	800351c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004168:	2360      	movs	r3, #96	; 0x60
 800416a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800416c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004170:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	2200      	movs	r2, #0
 800417e:	4619      	mov	r1, r3
 8004180:	480c      	ldr	r0, [pc, #48]	; (80041b4 <MX_TIM3_Init+0xfc>)
 8004182:	f006 fb91 	bl	800a8a8 <HAL_TIM_PWM_ConfigChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800418c:	f7ff f9c6 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004190:	1d3b      	adds	r3, r7, #4
 8004192:	2204      	movs	r2, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4807      	ldr	r0, [pc, #28]	; (80041b4 <MX_TIM3_Init+0xfc>)
 8004198:	f006 fb86 	bl	800a8a8 <HAL_TIM_PWM_ConfigChannel>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80041a2:	f7ff f9bb 	bl	800351c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80041a6:	4803      	ldr	r0, [pc, #12]	; (80041b4 <MX_TIM3_Init+0xfc>)
 80041a8:	f000 f92e 	bl	8004408 <HAL_TIM_MspPostInit>

}
 80041ac:	bf00      	nop
 80041ae:	3738      	adds	r7, #56	; 0x38
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	200005f8 	.word	0x200005f8
 80041b8:	40000400 	.word	0x40000400

080041bc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b096      	sub	sp, #88	; 0x58
 80041c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	609a      	str	r2, [r3, #8]
 80041ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	60da      	str	r2, [r3, #12]
 80041e8:	611a      	str	r2, [r3, #16]
 80041ea:	615a      	str	r2, [r3, #20]
 80041ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041ee:	1d3b      	adds	r3, r7, #4
 80041f0:	2220      	movs	r2, #32
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f008 fea1 	bl	800cf3c <memset>

  htim8.Instance = TIM8;
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <MX_TIM8_Init+0x134>)
 80041fc:	4a3d      	ldr	r2, [pc, #244]	; (80042f4 <MX_TIM8_Init+0x138>)
 80041fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8004200:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <MX_TIM8_Init+0x134>)
 8004202:	22b3      	movs	r2, #179	; 0xb3
 8004204:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004206:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <MX_TIM8_Init+0x134>)
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800420c:	4b38      	ldr	r3, [pc, #224]	; (80042f0 <MX_TIM8_Init+0x134>)
 800420e:	2263      	movs	r2, #99	; 0x63
 8004210:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004212:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <MX_TIM8_Init+0x134>)
 8004214:	2200      	movs	r2, #0
 8004216:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004218:	4b35      	ldr	r3, [pc, #212]	; (80042f0 <MX_TIM8_Init+0x134>)
 800421a:	2200      	movs	r2, #0
 800421c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800421e:	4b34      	ldr	r3, [pc, #208]	; (80042f0 <MX_TIM8_Init+0x134>)
 8004220:	2200      	movs	r2, #0
 8004222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004224:	4832      	ldr	r0, [pc, #200]	; (80042f0 <MX_TIM8_Init+0x134>)
 8004226:	f005 fd8f 	bl	8009d48 <HAL_TIM_Base_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8004230:	f7ff f974 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004238:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800423a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800423e:	4619      	mov	r1, r3
 8004240:	482b      	ldr	r0, [pc, #172]	; (80042f0 <MX_TIM8_Init+0x134>)
 8004242:	f006 fd0d 	bl	800ac60 <HAL_TIM_ConfigClockSource>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800424c:	f7ff f966 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004250:	4827      	ldr	r0, [pc, #156]	; (80042f0 <MX_TIM8_Init+0x134>)
 8004252:	f005 fecf 	bl	8009ff4 <HAL_TIM_PWM_Init>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800425c:	f7ff f95e 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004260:	2300      	movs	r3, #0
 8004262:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004264:	2300      	movs	r3, #0
 8004266:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800426c:	4619      	mov	r1, r3
 800426e:	4820      	ldr	r0, [pc, #128]	; (80042f0 <MX_TIM8_Init+0x134>)
 8004270:	f007 fd94 	bl	800bd9c <HAL_TIMEx_MasterConfigSynchronization>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800427a:	f7ff f94f 	bl	800351c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800427e:	2360      	movs	r3, #96	; 0x60
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004286:	2300      	movs	r3, #0
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800428a:	2300      	movs	r3, #0
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800428e:	2300      	movs	r3, #0
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004292:	2300      	movs	r3, #0
 8004294:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800429a:	220c      	movs	r2, #12
 800429c:	4619      	mov	r1, r3
 800429e:	4814      	ldr	r0, [pc, #80]	; (80042f0 <MX_TIM8_Init+0x134>)
 80042a0:	f006 fb02 	bl	800a8a8 <HAL_TIM_PWM_ConfigChannel>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80042aa:	f7ff f937 	bl	800351c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	4619      	mov	r1, r3
 80042d0:	4807      	ldr	r0, [pc, #28]	; (80042f0 <MX_TIM8_Init+0x134>)
 80042d2:	f007 fe41 	bl	800bf58 <HAL_TIMEx_ConfigBreakDeadTime>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 80042dc:	f7ff f91e 	bl	800351c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80042e0:	4803      	ldr	r0, [pc, #12]	; (80042f0 <MX_TIM8_Init+0x134>)
 80042e2:	f000 f891 	bl	8004408 <HAL_TIM_MspPostInit>

}
 80042e6:	bf00      	nop
 80042e8:	3758      	adds	r7, #88	; 0x58
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	200005b8 	.word	0x200005b8
 80042f4:	40010400 	.word	0x40010400

080042f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08c      	sub	sp, #48	; 0x30
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004300:	f107 031c 	add.w	r3, r7, #28
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	605a      	str	r2, [r3, #4]
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	60da      	str	r2, [r3, #12]
 800430e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a37      	ldr	r2, [pc, #220]	; (80043f4 <HAL_TIM_Base_MspInit+0xfc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10e      	bne.n	8004338 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	4b36      	ldr	r3, [pc, #216]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	4a35      	ldr	r2, [pc, #212]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6453      	str	r3, [r2, #68]	; 0x44
 800432a:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004336:	e059      	b.n	80043ec <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004340:	d12d      	bne.n	800439e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	4b2c      	ldr	r3, [pc, #176]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	4a2b      	ldr	r2, [pc, #172]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	6413      	str	r3, [r2, #64]	; 0x40
 8004352:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	4a24      	ldr	r2, [pc, #144]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 8004368:	f043 0302 	orr.w	r3, r3, #2
 800436c:	6313      	str	r3, [r2, #48]	; 0x30
 800436e:	4b22      	ldr	r3, [pc, #136]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 800437a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800437e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004380:	2302      	movs	r3, #2
 8004382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004388:	2300      	movs	r3, #0
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800438c:	2301      	movs	r3, #1
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004390:	f107 031c 	add.w	r3, r7, #28
 8004394:	4619      	mov	r1, r3
 8004396:	4819      	ldr	r0, [pc, #100]	; (80043fc <HAL_TIM_Base_MspInit+0x104>)
 8004398:	f002 fcf2 	bl	8006d80 <HAL_GPIO_Init>
}
 800439c:	e026      	b.n	80043ec <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a17      	ldr	r2, [pc, #92]	; (8004400 <HAL_TIM_Base_MspInit+0x108>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d10e      	bne.n	80043c6 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	4a11      	ldr	r2, [pc, #68]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 80043b2:	f043 0302 	orr.w	r3, r3, #2
 80043b6:	6413      	str	r3, [r2, #64]	; 0x40
 80043b8:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
}
 80043c4:	e012      	b.n	80043ec <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a0e      	ldr	r2, [pc, #56]	; (8004404 <HAL_TIM_Base_MspInit+0x10c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10d      	bne.n	80043ec <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80043d0:	2300      	movs	r3, #0
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 80043da:	f043 0302 	orr.w	r3, r3, #2
 80043de:	6453      	str	r3, [r2, #68]	; 0x44
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_TIM_Base_MspInit+0x100>)
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]
}
 80043ec:	bf00      	nop
 80043ee:	3730      	adds	r7, #48	; 0x30
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40020400 	.word	0x40020400
 8004400:	40000400 	.word	0x40000400
 8004404:	40010400 	.word	0x40010400

08004408 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004410:	f107 0314 	add.w	r3, r7, #20
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a37      	ldr	r2, [pc, #220]	; (8004504 <HAL_TIM_MspPostInit+0xfc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d11f      	bne.n	800446a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	4b36      	ldr	r3, [pc, #216]	; (8004508 <HAL_TIM_MspPostInit+0x100>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	4a35      	ldr	r2, [pc, #212]	; (8004508 <HAL_TIM_MspPostInit+0x100>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	6313      	str	r3, [r2, #48]	; 0x30
 800443a:	4b33      	ldr	r3, [pc, #204]	; (8004508 <HAL_TIM_MspPostInit+0x100>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8004446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800444a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444c:	2302      	movs	r3, #2
 800444e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004454:	2300      	movs	r3, #0
 8004456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004458:	2301      	movs	r3, #1
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 800445c:	f107 0314 	add.w	r3, r7, #20
 8004460:	4619      	mov	r1, r3
 8004462:	482a      	ldr	r0, [pc, #168]	; (800450c <HAL_TIM_MspPostInit+0x104>)
 8004464:	f002 fc8c 	bl	8006d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004468:	e047      	b.n	80044fa <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a28      	ldr	r2, [pc, #160]	; (8004510 <HAL_TIM_MspPostInit+0x108>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d11e      	bne.n	80044b2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	4b23      	ldr	r3, [pc, #140]	; (8004508 <HAL_TIM_MspPostInit+0x100>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	4a22      	ldr	r2, [pc, #136]	; (8004508 <HAL_TIM_MspPostInit+0x100>)
 800447e:	f043 0304 	orr.w	r3, r3, #4
 8004482:	6313      	str	r3, [r2, #48]	; 0x30
 8004484:	4b20      	ldr	r3, [pc, #128]	; (8004508 <HAL_TIM_MspPostInit+0x100>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8004490:	23c0      	movs	r3, #192	; 0xc0
 8004492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004494:	2302      	movs	r3, #2
 8004496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004498:	2300      	movs	r3, #0
 800449a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449c:	2300      	movs	r3, #0
 800449e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044a0:	2302      	movs	r3, #2
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044a4:	f107 0314 	add.w	r3, r7, #20
 80044a8:	4619      	mov	r1, r3
 80044aa:	481a      	ldr	r0, [pc, #104]	; (8004514 <HAL_TIM_MspPostInit+0x10c>)
 80044ac:	f002 fc68 	bl	8006d80 <HAL_GPIO_Init>
}
 80044b0:	e023      	b.n	80044fa <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a18      	ldr	r2, [pc, #96]	; (8004518 <HAL_TIM_MspPostInit+0x110>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d11e      	bne.n	80044fa <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044bc:	2300      	movs	r3, #0
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	4b11      	ldr	r3, [pc, #68]	; (8004508 <HAL_TIM_MspPostInit+0x100>)
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	4a10      	ldr	r2, [pc, #64]	; (8004508 <HAL_TIM_MspPostInit+0x100>)
 80044c6:	f043 0304 	orr.w	r3, r3, #4
 80044ca:	6313      	str	r3, [r2, #48]	; 0x30
 80044cc:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <HAL_TIM_MspPostInit+0x100>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 80044d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044de:	2302      	movs	r3, #2
 80044e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e6:	2300      	movs	r3, #0
 80044e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80044ea:	2303      	movs	r3, #3
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 80044ee:	f107 0314 	add.w	r3, r7, #20
 80044f2:	4619      	mov	r1, r3
 80044f4:	4807      	ldr	r0, [pc, #28]	; (8004514 <HAL_TIM_MspPostInit+0x10c>)
 80044f6:	f002 fc43 	bl	8006d80 <HAL_GPIO_Init>
}
 80044fa:	bf00      	nop
 80044fc:	3728      	adds	r7, #40	; 0x28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000
 8004508:	40023800 	.word	0x40023800
 800450c:	40020000 	.word	0x40020000
 8004510:	40000400 	.word	0x40000400
 8004514:	40020800 	.word	0x40020800
 8004518:	40010400 	.word	0x40010400

0800451c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004520:	4b11      	ldr	r3, [pc, #68]	; (8004568 <MX_USART3_UART_Init+0x4c>)
 8004522:	4a12      	ldr	r2, [pc, #72]	; (800456c <MX_USART3_UART_Init+0x50>)
 8004524:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <MX_USART3_UART_Init+0x4c>)
 8004528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800452c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800452e:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <MX_USART3_UART_Init+0x4c>)
 8004530:	2200      	movs	r2, #0
 8004532:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004534:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <MX_USART3_UART_Init+0x4c>)
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <MX_USART3_UART_Init+0x4c>)
 800453c:	2200      	movs	r2, #0
 800453e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <MX_USART3_UART_Init+0x4c>)
 8004542:	220c      	movs	r2, #12
 8004544:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <MX_USART3_UART_Init+0x4c>)
 8004548:	2200      	movs	r2, #0
 800454a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <MX_USART3_UART_Init+0x4c>)
 800454e:	2200      	movs	r2, #0
 8004550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004552:	4805      	ldr	r0, [pc, #20]	; (8004568 <MX_USART3_UART_Init+0x4c>)
 8004554:	f007 fdcc 	bl	800c0f0 <HAL_UART_Init>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800455e:	f7fe ffdd 	bl	800351c <Error_Handler>
  }

}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000718 	.word	0x20000718
 800456c:	40004800 	.word	0x40004800

08004570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004578:	f107 0314 	add.w	r3, r7, #20
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a30      	ldr	r2, [pc, #192]	; (8004650 <HAL_UART_MspInit+0xe0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d15a      	bne.n	8004648 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	4b2f      	ldr	r3, [pc, #188]	; (8004654 <HAL_UART_MspInit+0xe4>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	4a2e      	ldr	r2, [pc, #184]	; (8004654 <HAL_UART_MspInit+0xe4>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a0:	6413      	str	r3, [r2, #64]	; 0x40
 80045a2:	4b2c      	ldr	r3, [pc, #176]	; (8004654 <HAL_UART_MspInit+0xe4>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	4b28      	ldr	r3, [pc, #160]	; (8004654 <HAL_UART_MspInit+0xe4>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	4a27      	ldr	r2, [pc, #156]	; (8004654 <HAL_UART_MspInit+0xe4>)
 80045b8:	f043 0308 	orr.w	r3, r3, #8
 80045bc:	6313      	str	r3, [r2, #48]	; 0x30
 80045be:	4b25      	ldr	r3, [pc, #148]	; (8004654 <HAL_UART_MspInit+0xe4>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 80045ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d0:	2302      	movs	r3, #2
 80045d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d8:	2303      	movs	r3, #3
 80045da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80045dc:	2307      	movs	r3, #7
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045e0:	f107 0314 	add.w	r3, r7, #20
 80045e4:	4619      	mov	r1, r3
 80045e6:	481c      	ldr	r0, [pc, #112]	; (8004658 <HAL_UART_MspInit+0xe8>)
 80045e8:	f002 fbca 	bl	8006d80 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_UART_MspInit+0xec>)
 80045ee:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <HAL_UART_MspInit+0xf0>)
 80045f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80045f2:	4b1a      	ldr	r3, [pc, #104]	; (800465c <HAL_UART_MspInit+0xec>)
 80045f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045f8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045fa:	4b18      	ldr	r3, [pc, #96]	; (800465c <HAL_UART_MspInit+0xec>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004600:	4b16      	ldr	r3, [pc, #88]	; (800465c <HAL_UART_MspInit+0xec>)
 8004602:	2200      	movs	r2, #0
 8004604:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004606:	4b15      	ldr	r3, [pc, #84]	; (800465c <HAL_UART_MspInit+0xec>)
 8004608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800460c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <HAL_UART_MspInit+0xec>)
 8004610:	2200      	movs	r2, #0
 8004612:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <HAL_UART_MspInit+0xec>)
 8004616:	2200      	movs	r2, #0
 8004618:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800461a:	4b10      	ldr	r3, [pc, #64]	; (800465c <HAL_UART_MspInit+0xec>)
 800461c:	2200      	movs	r2, #0
 800461e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004620:	4b0e      	ldr	r3, [pc, #56]	; (800465c <HAL_UART_MspInit+0xec>)
 8004622:	2200      	movs	r2, #0
 8004624:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004626:	4b0d      	ldr	r3, [pc, #52]	; (800465c <HAL_UART_MspInit+0xec>)
 8004628:	2200      	movs	r2, #0
 800462a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800462c:	480b      	ldr	r0, [pc, #44]	; (800465c <HAL_UART_MspInit+0xec>)
 800462e:	f001 febb 	bl	80063a8 <HAL_DMA_Init>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004638:	f7fe ff70 	bl	800351c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a07      	ldr	r2, [pc, #28]	; (800465c <HAL_UART_MspInit+0xec>)
 8004640:	635a      	str	r2, [r3, #52]	; 0x34
 8004642:	4a06      	ldr	r2, [pc, #24]	; (800465c <HAL_UART_MspInit+0xec>)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004648:	bf00      	nop
 800464a:	3728      	adds	r7, #40	; 0x28
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40004800 	.word	0x40004800
 8004654:	40023800 	.word	0x40023800
 8004658:	40020c00 	.word	0x40020c00
 800465c:	200006b8 	.word	0x200006b8
 8004660:	40026028 	.word	0x40026028

08004664 <joystick_Init>:
static int joyPosBuffer[2][5] = {0};
static int joy_pos_buffer_cnt = 0;
static const float JoyForwardAngle = 1.57;
static const float JoyForwardAngleDeadzone = 0.1;

void joystick_Init(void){
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8004668:	2228      	movs	r2, #40	; 0x28
 800466a:	2100      	movs	r1, #0
 800466c:	4802      	ldr	r0, [pc, #8]	; (8004678 <joystick_Init+0x14>)
 800466e:	f008 fc65 	bl	800cf3c <memset>
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200002dc 	.word	0x200002dc
 800467c:	00000000 	.word	0x00000000

08004680 <joystickCalculatePos>:

void joystickCalculatePos(void)
{
 8004680:	b5b0      	push	{r4, r5, r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
  // update joystick reading into buffer array
  if (joy_pos_buffer_cnt == JoyPosBufferSize)
 8004686:	4b20      	ldr	r3, [pc, #128]	; (8004708 <joystickCalculatePos+0x88>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2205      	movs	r2, #5
 800468c:	4293      	cmp	r3, r2
 800468e:	d102      	bne.n	8004696 <joystickCalculatePos+0x16>
    joy_pos_buffer_cnt = 0;
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <joystickCalculatePos+0x88>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]

  tempJoyRawDataX = (tempJoyRawDataX < 0)? tempJoyRawDataX + JoystickCenterX : tempJoyRawDataX - JoystickCenterX;
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <joystickCalculatePos+0x8c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	da05      	bge.n	80046aa <joystickCalculatePos+0x2a>
 800469e:	4b1b      	ldr	r3, [pc, #108]	; (800470c <joystickCalculatePos+0x8c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80046a6:	4413      	add	r3, r2
 80046a8:	e004      	b.n	80046b4 <joystickCalculatePos+0x34>
 80046aa:	4b18      	ldr	r3, [pc, #96]	; (800470c <joystickCalculatePos+0x8c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	4a15      	ldr	r2, [pc, #84]	; (800470c <joystickCalculatePos+0x8c>)
 80046b6:	6013      	str	r3, [r2, #0]
  tempJoyRawDataY = (tempJoyRawDataY > 0)? JoystickCenterY - tempJoyRawDataY:  -tempJoyRawDataY - JoystickCenterX;
 80046b8:	4b15      	ldr	r3, [pc, #84]	; (8004710 <joystickCalculatePos+0x90>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	dd05      	ble.n	80046cc <joystickCalculatePos+0x4c>
 80046c0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80046c4:	4b12      	ldr	r3, [pc, #72]	; (8004710 <joystickCalculatePos+0x90>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	e005      	b.n	80046d8 <joystickCalculatePos+0x58>
 80046cc:	4b10      	ldr	r3, [pc, #64]	; (8004710 <joystickCalculatePos+0x90>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	425b      	negs	r3, r3
 80046d2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	4a0d      	ldr	r2, [pc, #52]	; (8004710 <joystickCalculatePos+0x90>)
 80046da:	6013      	str	r3, [r2, #0]



  joyPosBuffer[0][joy_pos_buffer_cnt] = tempJoyRawDataX;
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <joystickCalculatePos+0x88>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a0a      	ldr	r2, [pc, #40]	; (800470c <joystickCalculatePos+0x8c>)
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	490b      	ldr	r1, [pc, #44]	; (8004714 <joystickCalculatePos+0x94>)
 80046e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  joyPosBuffer[1][joy_pos_buffer_cnt] = tempJoyRawDataY;
 80046ea:	4b07      	ldr	r3, [pc, #28]	; (8004708 <joystickCalculatePos+0x88>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a08      	ldr	r2, [pc, #32]	; (8004710 <joystickCalculatePos+0x90>)
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	4908      	ldr	r1, [pc, #32]	; (8004714 <joystickCalculatePos+0x94>)
 80046f4:	3305      	adds	r3, #5
 80046f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // calculate joystick position average from the buffer
  int sum_x = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
  int sum_y = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	e019      	b.n	800473c <joystickCalculatePos+0xbc>
 8004708:	20000304 	.word	0x20000304
 800470c:	200005ac 	.word	0x200005ac
 8004710:	200004b0 	.word	0x200004b0
 8004714:	200002dc 	.word	0x200002dc
  {
    sum_x += joyPosBuffer[0][i];
 8004718:	4aaf      	ldr	r2, [pc, #700]	; (80049d8 <joystickCalculatePos+0x358>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
    sum_y += joyPosBuffer[1][i];
 8004726:	4aac      	ldr	r2, [pc, #688]	; (80049d8 <joystickCalculatePos+0x358>)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3305      	adds	r3, #5
 800472c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	4413      	add	r3, r2
 8004734:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3301      	adds	r3, #1
 800473a:	607b      	str	r3, [r7, #4]
 800473c:	2205      	movs	r2, #5
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4293      	cmp	r3, r2
 8004742:	dbe9      	blt.n	8004718 <joystickCalculatePos+0x98>
  }

  hJoystick.x = sum_x / JoyPosBufferSize;
 8004744:	2205      	movs	r2, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	fb93 f3f2 	sdiv	r3, r3, r2
 800474c:	b21a      	sxth	r2, r3
 800474e:	4ba3      	ldr	r3, [pc, #652]	; (80049dc <joystickCalculatePos+0x35c>)
 8004750:	801a      	strh	r2, [r3, #0]
  hJoystick.y = sum_y / JoyPosBufferSize;
 8004752:	2205      	movs	r2, #5
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	fb93 f3f2 	sdiv	r3, r3, r2
 800475a:	b21a      	sxth	r2, r3
 800475c:	4b9f      	ldr	r3, [pc, #636]	; (80049dc <joystickCalculatePos+0x35c>)
 800475e:	805a      	strh	r2, [r3, #2]

  // calculate magnitude and angle
  hJoystick.magnitude = sqrt(pow(hJoystick.x, 2) + pow(hJoystick.y,2));
 8004760:	4b9e      	ldr	r3, [pc, #632]	; (80049dc <joystickCalculatePos+0x35c>)
 8004762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fb fe94 	bl	8000494 <__aeabi_i2d>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	ed9f 1b95 	vldr	d1, [pc, #596]	; 80049c8 <joystickCalculatePos+0x348>
 8004774:	ec43 2b10 	vmov	d0, r2, r3
 8004778:	f008 fe76 	bl	800d468 <pow>
 800477c:	ec55 4b10 	vmov	r4, r5, d0
 8004780:	4b96      	ldr	r3, [pc, #600]	; (80049dc <joystickCalculatePos+0x35c>)
 8004782:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fb fe84 	bl	8000494 <__aeabi_i2d>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	ed9f 1b8d 	vldr	d1, [pc, #564]	; 80049c8 <joystickCalculatePos+0x348>
 8004794:	ec43 2b10 	vmov	d0, r2, r3
 8004798:	f008 fe66 	bl	800d468 <pow>
 800479c:	ec53 2b10 	vmov	r2, r3, d0
 80047a0:	4620      	mov	r0, r4
 80047a2:	4629      	mov	r1, r5
 80047a4:	f7fb fd2a 	bl	80001fc <__adddf3>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	ec43 2b17 	vmov	d7, r2, r3
 80047b0:	eeb0 0a47 	vmov.f32	s0, s14
 80047b4:	eef0 0a67 	vmov.f32	s1, s15
 80047b8:	f008 ff04 	bl	800d5c4 <sqrt>
 80047bc:	ec53 2b10 	vmov	r2, r3, d0
 80047c0:	4610      	mov	r0, r2
 80047c2:	4619      	mov	r1, r3
 80047c4:	f7fc f9c8 	bl	8000b58 <__aeabi_d2f>
 80047c8:	4603      	mov	r3, r0
 80047ca:	4a84      	ldr	r2, [pc, #528]	; (80049dc <joystickCalculatePos+0x35c>)
 80047cc:	6053      	str	r3, [r2, #4]
  hJoystick.angle = atan2(hJoystick.y, hJoystick.x);
 80047ce:	4b83      	ldr	r3, [pc, #524]	; (80049dc <joystickCalculatePos+0x35c>)
 80047d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fb fe5d 	bl	8000494 <__aeabi_i2d>
 80047da:	4604      	mov	r4, r0
 80047dc:	460d      	mov	r5, r1
 80047de:	4b7f      	ldr	r3, [pc, #508]	; (80049dc <joystickCalculatePos+0x35c>)
 80047e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fb fe55 	bl	8000494 <__aeabi_i2d>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	ec43 2b11 	vmov	d1, r2, r3
 80047f2:	ec45 4b10 	vmov	d0, r4, r5
 80047f6:	f008 fe35 	bl	800d464 <atan2>
 80047fa:	ec53 2b10 	vmov	r2, r3, d0
 80047fe:	4610      	mov	r0, r2
 8004800:	4619      	mov	r1, r3
 8004802:	f7fc f9a9 	bl	8000b58 <__aeabi_d2f>
 8004806:	4603      	mov	r3, r0
 8004808:	4a74      	ldr	r2, [pc, #464]	; (80049dc <joystickCalculatePos+0x35c>)
 800480a:	6093      	str	r3, [r2, #8]

  // limit magnitude
  if (hJoystick.magnitude > JoystickMagnitudeMax)
 800480c:	4b73      	ldr	r3, [pc, #460]	; (80049dc <joystickCalculatePos+0x35c>)
 800480e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004812:	eddf 7a73 	vldr	s15, [pc, #460]	; 80049e0 <joystickCalculatePos+0x360>
 8004816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800481a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004822:	dd06      	ble.n	8004832 <joystickCalculatePos+0x1b2>
    hJoystick.magnitude = JoystickMagnitudeMax;
 8004824:	eddf 7a6e 	vldr	s15, [pc, #440]	; 80049e0 <joystickCalculatePos+0x360>
 8004828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800482c:	4b6b      	ldr	r3, [pc, #428]	; (80049dc <joystickCalculatePos+0x35c>)
 800482e:	edc3 7a01 	vstr	s15, [r3, #4]

  // filter joystick forward deadzone
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 8004832:	4b6a      	ldr	r3, [pc, #424]	; (80049dc <joystickCalculatePos+0x35c>)
 8004834:	ed93 7a02 	vldr	s14, [r3, #8]
 8004838:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80049e4 <joystickCalculatePos+0x364>
 800483c:	eddf 7a6a 	vldr	s15, [pc, #424]	; 80049e8 <joystickCalculatePos+0x368>
 8004840:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484c:	dd10      	ble.n	8004870 <joystickCalculatePos+0x1f0>
      hJoystick.angle < JoyForwardAngle + JoyForwardAngleDeadzone)
 800484e:	4b63      	ldr	r3, [pc, #396]	; (80049dc <joystickCalculatePos+0x35c>)
 8004850:	ed93 7a02 	vldr	s14, [r3, #8]
 8004854:	eddf 6a63 	vldr	s13, [pc, #396]	; 80049e4 <joystickCalculatePos+0x364>
 8004858:	eddf 7a63 	vldr	s15, [pc, #396]	; 80049e8 <joystickCalculatePos+0x368>
 800485c:	ee76 7aa7 	vadd.f32	s15, s13, s15
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 8004860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004868:	d502      	bpl.n	8004870 <joystickCalculatePos+0x1f0>
    hJoystick.angle = JoyForwardAngle;
 800486a:	4a60      	ldr	r2, [pc, #384]	; (80049ec <joystickCalculatePos+0x36c>)
 800486c:	4b5b      	ldr	r3, [pc, #364]	; (80049dc <joystickCalculatePos+0x35c>)
 800486e:	609a      	str	r2, [r3, #8]

  // filter joystick backward deadzone
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 8004870:	4b5a      	ldr	r3, [pc, #360]	; (80049dc <joystickCalculatePos+0x35c>)
 8004872:	ed93 7a02 	vldr	s14, [r3, #8]
 8004876:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80049e4 <joystickCalculatePos+0x364>
 800487a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80049e8 <joystickCalculatePos+0x368>
 800487e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004882:	eef1 7a67 	vneg.f32	s15, s15
 8004886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488e:	dd16      	ble.n	80048be <joystickCalculatePos+0x23e>
      hJoystick.angle < -(JoyForwardAngle - JoyForwardAngleDeadzone))
 8004890:	4b52      	ldr	r3, [pc, #328]	; (80049dc <joystickCalculatePos+0x35c>)
 8004892:	ed93 7a02 	vldr	s14, [r3, #8]
 8004896:	eddf 6a53 	vldr	s13, [pc, #332]	; 80049e4 <joystickCalculatePos+0x364>
 800489a:	eddf 7a53 	vldr	s15, [pc, #332]	; 80049e8 <joystickCalculatePos+0x368>
 800489e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80048a2:	eef1 7a67 	vneg.f32	s15, s15
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 80048a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ae:	d506      	bpl.n	80048be <joystickCalculatePos+0x23e>
    hJoystick.angle = -JoyForwardAngle;
 80048b0:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80049e4 <joystickCalculatePos+0x364>
 80048b4:	eef1 7a67 	vneg.f32	s15, s15
 80048b8:	4b48      	ldr	r3, [pc, #288]	; (80049dc <joystickCalculatePos+0x35c>)
 80048ba:	edc3 7a02 	vstr	s15, [r3, #8]

  // normalize joystick reading
  hJoystick.linear = hJoystick.magnitude/JoystickMagnitudeMax * sin(hJoystick.angle);
 80048be:	4b47      	ldr	r3, [pc, #284]	; (80049dc <joystickCalculatePos+0x35c>)
 80048c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80048c4:	eddf 7a46 	vldr	s15, [pc, #280]	; 80049e0 <joystickCalculatePos+0x360>
 80048c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80048d0:	ee16 0a90 	vmov	r0, s13
 80048d4:	f7fb fdf0 	bl	80004b8 <__aeabi_f2d>
 80048d8:	4604      	mov	r4, r0
 80048da:	460d      	mov	r5, r1
 80048dc:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <joystickCalculatePos+0x35c>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fb fde9 	bl	80004b8 <__aeabi_f2d>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	ec43 2b10 	vmov	d0, r2, r3
 80048ee:	f008 fd2b 	bl	800d348 <sin>
 80048f2:	ec53 2b10 	vmov	r2, r3, d0
 80048f6:	4620      	mov	r0, r4
 80048f8:	4629      	mov	r1, r5
 80048fa:	f7fb fe35 	bl	8000568 <__aeabi_dmul>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4610      	mov	r0, r2
 8004904:	4619      	mov	r1, r3
 8004906:	f7fc f927 	bl	8000b58 <__aeabi_d2f>
 800490a:	4603      	mov	r3, r0
 800490c:	4a33      	ldr	r2, [pc, #204]	; (80049dc <joystickCalculatePos+0x35c>)
 800490e:	60d3      	str	r3, [r2, #12]
  hJoystick.angular = hJoystick.magnitude/JoystickMagnitudeMax * cos(hJoystick.angle);
 8004910:	4b32      	ldr	r3, [pc, #200]	; (80049dc <joystickCalculatePos+0x35c>)
 8004912:	ed93 7a01 	vldr	s14, [r3, #4]
 8004916:	eddf 7a32 	vldr	s15, [pc, #200]	; 80049e0 <joystickCalculatePos+0x360>
 800491a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800491e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004922:	ee16 0a90 	vmov	r0, s13
 8004926:	f7fb fdc7 	bl	80004b8 <__aeabi_f2d>
 800492a:	4604      	mov	r4, r0
 800492c:	460d      	mov	r5, r1
 800492e:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <joystickCalculatePos+0x35c>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fb fdc0 	bl	80004b8 <__aeabi_f2d>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	ec43 2b10 	vmov	d0, r2, r3
 8004940:	f008 fca6 	bl	800d290 <cos>
 8004944:	ec53 2b10 	vmov	r2, r3, d0
 8004948:	4620      	mov	r0, r4
 800494a:	4629      	mov	r1, r5
 800494c:	f7fb fe0c 	bl	8000568 <__aeabi_dmul>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	f7fc f8fe 	bl	8000b58 <__aeabi_d2f>
 800495c:	4603      	mov	r3, r0
 800495e:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <joystickCalculatePos+0x35c>)
 8004960:	6113      	str	r3, [r2, #16]

  if (fabs(hJoystick.linear) < 0.05)
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <joystickCalculatePos+0x35c>)
 8004964:	edd3 7a03 	vldr	s15, [r3, #12]
 8004968:	eef0 7ae7 	vabs.f32	s15, s15
 800496c:	ee17 0a90 	vmov	r0, s15
 8004970:	f7fb fda2 	bl	80004b8 <__aeabi_f2d>
 8004974:	a316      	add	r3, pc, #88	; (adr r3, 80049d0 <joystickCalculatePos+0x350>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f7fc f867 	bl	8000a4c <__aeabi_dcmplt>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <joystickCalculatePos+0x30c>
    hJoystick.linear = 0;
 8004984:	4b15      	ldr	r3, [pc, #84]	; (80049dc <joystickCalculatePos+0x35c>)
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	60da      	str	r2, [r3, #12]
  if (fabs(hJoystick.angular) < 0.05)
 800498c:	4b13      	ldr	r3, [pc, #76]	; (80049dc <joystickCalculatePos+0x35c>)
 800498e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004992:	eef0 7ae7 	vabs.f32	s15, s15
 8004996:	ee17 0a90 	vmov	r0, s15
 800499a:	f7fb fd8d 	bl	80004b8 <__aeabi_f2d>
 800499e:	a30c      	add	r3, pc, #48	; (adr r3, 80049d0 <joystickCalculatePos+0x350>)
 80049a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a4:	f7fc f852 	bl	8000a4c <__aeabi_dcmplt>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <joystickCalculatePos+0x336>
    hJoystick.angular = 0;
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <joystickCalculatePos+0x35c>)
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	611a      	str	r2, [r3, #16]

  joy_pos_buffer_cnt++;
 80049b6:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <joystickCalculatePos+0x370>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <joystickCalculatePos+0x370>)
 80049be:	6013      	str	r3, [r2, #0]
}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bdb0      	pop	{r4, r5, r7, pc}
 80049c8:	00000000 	.word	0x00000000
 80049cc:	40000000 	.word	0x40000000
 80049d0:	9999999a 	.word	0x9999999a
 80049d4:	3fa99999 	.word	0x3fa99999
 80049d8:	200002dc 	.word	0x200002dc
 80049dc:	20000758 	.word	0x20000758
 80049e0:	00004650 	.word	0x00004650
 80049e4:	3fc8f5c3 	.word	0x3fc8f5c3
 80049e8:	3dcccccd 	.word	0x3dcccccd
 80049ec:	3fc8f5c3 	.word	0x3fc8f5c3
 80049f0:	20000304 	.word	0x20000304

080049f4 <wheelSpeedControl_Init>:

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a00:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	771a      	strb	r2, [r3, #28]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <wheel_Control>:

void wheel_Control(WheelSpeed* wheel)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  if (wheel->stable_cnt < 100)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b63      	cmp	r3, #99	; 0x63
 8004a56:	dc05      	bgt.n	8004a64 <wheel_Control+0x1c>
  {
      wheel->stable_cnt++;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	611a      	str	r2, [r3, #16]
    return;
 8004a62:	e1cd      	b.n	8004e00 <wheel_Control+0x3b8>
  }

  joystickCalculatePos();
 8004a64:	f7ff fe0c 	bl	8004680 <joystickCalculatePos>
  wheelCalculateSpeed(wheel);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f9cd 	bl	8004e08 <wheelCalculateSpeed>

  if (wheel->pre_l == 0 && wheel->pre_r == 0)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7c:	d10a      	bne.n	8004a94 <wheel_Control+0x4c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8c:	d102      	bne.n	8004a94 <wheel_Control+0x4c>
    wheel->start_from_stationary = true;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	771a      	strb	r2, [r3, #28]

  if (hJoystick.magnitude > JoystickMagnitudeMin)
 8004a94:	4bae      	ldr	r3, [pc, #696]	; (8004d50 <wheel_Control+0x308>)
 8004a96:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a9a:	eddf 7aae 	vldr	s15, [pc, #696]	; 8004d54 <wheel_Control+0x30c>
 8004a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aaa:	f340 80b3 	ble.w	8004c14 <wheel_Control+0x1cc>
  {
    float left_speed_step = wheel->left_speed_step;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	61fb      	str	r3, [r7, #28]
    float right_speed_step = wheel->right_speed_step;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	61bb      	str	r3, [r7, #24]

    if (wheel->start_from_stationary)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	7f1b      	ldrb	r3, [r3, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d03c      	beq.n	8004b3c <wheel_Control+0xf4>
    {
//      float accel_loop = 100.0f;
      left_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	edd3 7a00 	vldr	s15, [r3]
 8004ac8:	eef0 6ae7 	vabs.f32	s13, s15
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	ed93 7a08 	vldr	s14, [r3, #32]
 8004ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      right_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	edd3 7a00 	vldr	s15, [r3]
 8004ae0:	eef0 6ae7 	vabs.f32	s13, s15
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	ed93 7a08 	vldr	s14, [r3, #32]
 8004aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aee:	edc7 7a06 	vstr	s15, [r7, #24]

      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004af8:	eeb0 7ae7 	vabs.f32	s14, s15
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b02:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004b06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b12:	dd13      	ble.n	8004b3c <wheel_Control+0xf4>
          fabs(wheel->pre_r) > 0.5f * wheel->max_angular_speed)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b1a:	eeb0 7ae7 	vabs.f32	s14, s15
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b24:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004b28:	ee67 7aa6 	vmul.f32	s15, s15, s13
      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8004b2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b34:	dd02      	ble.n	8004b3c <wheel_Control+0xf4>
      {
	  wheel->start_from_stationary = false;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
      }
    }

    if (( wheel->cur_l - wheel->pre_l) > left_speed_step)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	ed93 7a00 	vldr	s14, [r3]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b58:	d50a      	bpl.n	8004b70 <wheel_Control+0x128>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b60:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	edc3 7a00 	vstr	s15, [r3]
 8004b6e:	e01a      	b.n	8004ba6 <wheel_Control+0x15e>
    else if ((wheel->cur_l - wheel->pre_l) < -left_speed_step)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	ed93 7a00 	vldr	s14, [r3]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b80:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b84:	eef1 7a67 	vneg.f32	s15, s15
 8004b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b90:	d509      	bpl.n	8004ba6 <wheel_Control+0x15e>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b98:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	edc3 7a00 	vstr	s15, [r3]

    if ((wheel->cur_r - wheel->pre_r) > right_speed_step)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	ed93 7a01 	vldr	s14, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bb6:	ed97 7a06 	vldr	s14, [r7, #24]
 8004bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	d50a      	bpl.n	8004bda <wheel_Control+0x192>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	ed93 7a03 	vldr	s14, [r3, #12]
 8004bca:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	edc3 7a01 	vstr	s15, [r3, #4]
 8004bd8:	e0c2      	b.n	8004d60 <wheel_Control+0x318>
    else if ((wheel->cur_r - wheel->pre_r) < -right_speed_step)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004be6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bea:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bee:	eef1 7a67 	vneg.f32	s15, s15
 8004bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfa:	f140 80b1 	bpl.w	8004d60 <wheel_Control+0x318>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	ed93 7a03 	vldr	s14, [r3, #12]
 8004c04:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	edc3 7a01 	vstr	s15, [r3, #4]
 8004c12:	e0a5      	b.n	8004d60 <wheel_Control+0x318>
  }
  else
  {
//    float decel_loop = 150.0f;

    float zero_speed = wheel->max_linear_speed / wheel->decel_loop;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	edd3 6a05 	vldr	s13, [r3, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c24:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(wheel->cur_l) < zero_speed)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	edd3 7a00 	vldr	s15, [r3]
 8004c2e:	eef0 7ae7 	vabs.f32	s15, s15
 8004c32:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3e:	dd03      	ble.n	8004c48 <wheel_Control+0x200>
      wheel->cur_l = 0;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
    if (fabs(wheel->cur_r) < zero_speed)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c4e:	eef0 7ae7 	vabs.f32	s15, s15
 8004c52:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5e:	dd03      	ble.n	8004c68 <wheel_Control+0x220>
      wheel->cur_r = 0;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	605a      	str	r2, [r3, #4]

    float left_speed_step = fabs(wheel->cur_l) / wheel->decel_loop;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	edd3 7a00 	vldr	s15, [r3]
 8004c6e:	eef0 6ae7 	vabs.f32	s13, s15
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c7c:	edc7 7a04 	vstr	s15, [r7, #16]
    float right_speed_step = fabs(wheel->cur_r) / wheel->decel_loop;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c86:	eef0 6ae7 	vabs.f32	s13, s15
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c94:	edc7 7a03 	vstr	s15, [r7, #12]
    
    if (wheel->cur_l > left_speed_step)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	edd3 7a00 	vldr	s15, [r3]
 8004c9e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ca2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004caa:	d50a      	bpl.n	8004cc2 <wheel_Control+0x27a>
      wheel->cur_l = wheel->pre_r - left_speed_step;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	ed93 7a03 	vldr	s14, [r3, #12]
 8004cb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	edc3 7a00 	vstr	s15, [r3]
 8004cc0:	e01a      	b.n	8004cf8 <wheel_Control+0x2b0>
    else if (wheel->cur_l < -left_speed_step)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	ed93 7a00 	vldr	s14, [r3]
 8004cc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ccc:	eef1 7a67 	vneg.f32	s15, s15
 8004cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd8:	d50a      	bpl.n	8004cf0 <wheel_Control+0x2a8>
      wheel->cur_l = wheel->pre_r + left_speed_step;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ce0:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	edc3 7a00 	vstr	s15, [r3]
 8004cee:	e003      	b.n	8004cf8 <wheel_Control+0x2b0>
    else
      wheel->cur_l = 0;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
    
    if (wheel->cur_r > right_speed_step)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8004cfe:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0a:	d50a      	bpl.n	8004d22 <wheel_Control+0x2da>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	edc3 7a01 	vstr	s15, [r3, #4]
 8004d20:	e01e      	b.n	8004d60 <wheel_Control+0x318>
    else if (wheel->cur_r < -right_speed_step)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d28:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d2c:	eef1 7a67 	vneg.f32	s15, s15
 8004d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	d50e      	bpl.n	8004d58 <wheel_Control+0x310>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	edc3 7a01 	vstr	s15, [r3, #4]
 8004d4e:	e007      	b.n	8004d60 <wheel_Control+0x318>
 8004d50:	20000758 	.word	0x20000758
 8004d54:	00000bb8 	.word	0x00000bb8
    else
      wheel->cur_r = 0;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	605a      	str	r2, [r3, #4]
  }

  if (wheel->cur_l > wheel->max_linear_speed)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	ed93 7a00 	vldr	s14, [r3]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d74:	dd03      	ble.n	8004d7e <wheel_Control+0x336>
    wheel->cur_l = wheel->max_linear_speed;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
  if (wheel->cur_r > wheel->max_linear_speed)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d92:	dd03      	ble.n	8004d9c <wheel_Control+0x354>
    wheel->cur_r = wheel->max_linear_speed;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	605a      	str	r2, [r3, #4]

  if (wheel->cur_l < -wheel->max_linear_speed)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	ed93 7a00 	vldr	s14, [r3]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	edd3 7a05 	vldr	s15, [r3, #20]
 8004da8:	eef1 7a67 	vneg.f32	s15, s15
 8004dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db4:	d507      	bpl.n	8004dc6 <wheel_Control+0x37e>
    wheel->cur_l = -wheel->max_linear_speed;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004dbc:	eef1 7a67 	vneg.f32	s15, s15
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	edc3 7a00 	vstr	s15, [r3]
  if (wheel->cur_r < -wheel->max_linear_speed)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	edd3 7a05 	vldr	s15, [r3, #20]
 8004dd2:	eef1 7a67 	vneg.f32	s15, s15
 8004dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dde:	d507      	bpl.n	8004df0 <wheel_Control+0x3a8>
    wheel->cur_r = -wheel->max_linear_speed;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	edd3 7a05 	vldr	s15, [r3, #20]
 8004de6:	eef1 7a67 	vneg.f32	s15, s15
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	edc3 7a01 	vstr	s15, [r3, #4]

  wheel->pre_l = wheel->cur_l;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	609a      	str	r2, [r3, #8]
  wheel->pre_r = wheel->cur_r;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]
  
}
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop

08004e08 <wheelCalculateSpeed>:



void wheelCalculateSpeed(WheelSpeed* wheel)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  float linearSpeed = wheel->max_linear_speed * hJoystick.linear;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	ed93 7a05 	vldr	s14, [r3, #20]
 8004e16:	4b25      	ldr	r3, [pc, #148]	; (8004eac <wheelCalculateSpeed+0xa4>)
 8004e18:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e20:	edc7 7a03 	vstr	s15, [r7, #12]
  float angularSpeed = wheel->max_angular_speed *  hJoystick.angular;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	ed93 7a06 	vldr	s14, [r3, #24]
 8004e2a:	4b20      	ldr	r3, [pc, #128]	; (8004eac <wheelCalculateSpeed+0xa4>)
 8004e2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e34:	edc7 7a02 	vstr	s15, [r7, #8]

  wheel->cur_l = linearSpeed + angularSpeed;
 8004e38:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	edc3 7a00 	vstr	s15, [r3]
  wheel->cur_r = linearSpeed - angularSpeed;
 8004e4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	edc3 7a01 	vstr	s15, [r3, #4]

  // direct step to 0 if speed is small enough
  if(fabs(wheel->cur_l) < 50)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	edd3 7a00 	vldr	s15, [r3]
 8004e62:	eef0 7ae7 	vabs.f32	s15, s15
 8004e66:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004eb0 <wheelCalculateSpeed+0xa8>
 8004e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e72:	d503      	bpl.n	8004e7c <wheelCalculateSpeed+0x74>
    wheel->cur_l = 0;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
  if(fabs(  wheel->cur_r) < 50)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e82:	eef0 7ae7 	vabs.f32	s15, s15
 8004e86:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004eb0 <wheelCalculateSpeed+0xa8>
 8004e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e92:	d400      	bmi.n	8004e96 <wheelCalculateSpeed+0x8e>
    wheel->cur_r = 0;
}
 8004e94:	e003      	b.n	8004e9e <wheelCalculateSpeed+0x96>
    wheel->cur_r = 0;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	605a      	str	r2, [r3, #4]
}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	20000758 	.word	0x20000758
 8004eb0:	42480000 	.word	0x42480000

08004eb4 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8004eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004eec <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004eb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004eba:	e003      	b.n	8004ec4 <LoopCopyDataInit>

08004ebc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ebe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ec0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ec2:	3104      	adds	r1, #4

08004ec4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ec4:	480b      	ldr	r0, [pc, #44]	; (8004ef4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ec6:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ec8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004eca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ecc:	d3f6      	bcc.n	8004ebc <CopyDataInit>
  ldr  r2, =_sbss
 8004ece:	4a0b      	ldr	r2, [pc, #44]	; (8004efc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ed0:	e002      	b.n	8004ed8 <LoopFillZerobss>

08004ed2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ed2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ed4:	f842 3b04 	str.w	r3, [r2], #4

08004ed8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004eda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004edc:	d3f9      	bcc.n	8004ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ede:	f7fe ffbb 	bl	8003e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ee2:	f008 f807 	bl	800cef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ee6:	f7fd f8d7 	bl	8002098 <main>
  bx  lr    
 8004eea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004eec:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004ef0:	0800fea0 	.word	0x0800fea0
  ldr  r0, =_sdata
 8004ef4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ef8:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 8004efc:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 8004f00:	20000770 	.word	0x20000770

08004f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f04:	e7fe      	b.n	8004f04 <ADC_IRQHandler>
	...

08004f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_Init+0x40>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0d      	ldr	r2, [pc, #52]	; (8004f48 <HAL_Init+0x40>)
 8004f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_Init+0x40>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <HAL_Init+0x40>)
 8004f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f24:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <HAL_Init+0x40>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a07      	ldr	r2, [pc, #28]	; (8004f48 <HAL_Init+0x40>)
 8004f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f30:	2003      	movs	r0, #3
 8004f32:	f001 f9a1 	bl	8006278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f36:	2000      	movs	r0, #0
 8004f38:	f000 f808 	bl	8004f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f3c:	f7fe ff1a 	bl	8003d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40023c00 	.word	0x40023c00

08004f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f54:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <HAL_InitTick+0x54>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <HAL_InitTick+0x58>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 f9e8 	bl	8006340 <HAL_SYSTICK_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e00e      	b.n	8004f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b0f      	cmp	r3, #15
 8004f7e:	d80a      	bhi.n	8004f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f80:	2200      	movs	r2, #0
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f88:	f001 f996 	bl	80062b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f8c:	4a06      	ldr	r2, [pc, #24]	; (8004fa8 <HAL_InitTick+0x5c>)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e000      	b.n	8004f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	200001d0 	.word	0x200001d0
 8004fa4:	200001d8 	.word	0x200001d8
 8004fa8:	200001d4 	.word	0x200001d4

08004fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_IncTick+0x20>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <HAL_IncTick+0x24>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4413      	add	r3, r2
 8004fbc:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <HAL_IncTick+0x24>)
 8004fbe:	6013      	str	r3, [r2, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	200001d8 	.word	0x200001d8
 8004fd0:	2000076c 	.word	0x2000076c

08004fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8004fd8:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <HAL_GetTick+0x14>)
 8004fda:	681b      	ldr	r3, [r3, #0]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	2000076c 	.word	0x2000076c

08004fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ff4:	f7ff ffee 	bl	8004fd4 <HAL_GetTick>
 8004ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005004:	d005      	beq.n	8005012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HAL_Delay+0x44>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005012:	bf00      	nop
 8005014:	f7ff ffde 	bl	8004fd4 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	429a      	cmp	r2, r3
 8005022:	d8f7      	bhi.n	8005014 <HAL_Delay+0x28>
  {
  }
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	200001d8 	.word	0x200001d8

08005034 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e20e      	b.n	8005464 <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4aa0      	ldr	r2, [pc, #640]	; (80052cc <HAL_CAN_Init+0x298>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_CAN_Init+0x30>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a9e      	ldr	r2, [pc, #632]	; (80052d0 <HAL_CAN_Init+0x29c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_CAN_Init+0x30>
 800505a:	f240 111d 	movw	r1, #285	; 0x11d
 800505e:	489d      	ldr	r0, [pc, #628]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 8005060:	f7fe fa63 	bl	800352a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	7e1b      	ldrb	r3, [r3, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_CAN_Init+0x4a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	7e1b      	ldrb	r3, [r3, #24]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d004      	beq.n	800507e <HAL_CAN_Init+0x4a>
 8005074:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005078:	4896      	ldr	r0, [pc, #600]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 800507a:	f7fe fa56 	bl	800352a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	7e5b      	ldrb	r3, [r3, #25]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <HAL_CAN_Init+0x64>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	7e5b      	ldrb	r3, [r3, #25]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d004      	beq.n	8005098 <HAL_CAN_Init+0x64>
 800508e:	f240 111f 	movw	r1, #287	; 0x11f
 8005092:	4890      	ldr	r0, [pc, #576]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 8005094:	f7fe fa49 	bl	800352a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	7e9b      	ldrb	r3, [r3, #26]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_CAN_Init+0x7e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	7e9b      	ldrb	r3, [r3, #26]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d004      	beq.n	80050b2 <HAL_CAN_Init+0x7e>
 80050a8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80050ac:	4889      	ldr	r0, [pc, #548]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 80050ae:	f7fe fa3c 	bl	800352a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	7edb      	ldrb	r3, [r3, #27]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_CAN_Init+0x98>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	7edb      	ldrb	r3, [r3, #27]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d004      	beq.n	80050cc <HAL_CAN_Init+0x98>
 80050c2:	f240 1121 	movw	r1, #289	; 0x121
 80050c6:	4883      	ldr	r0, [pc, #524]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 80050c8:	f7fe fa2f 	bl	800352a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	7f1b      	ldrb	r3, [r3, #28]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_CAN_Init+0xb2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	7f1b      	ldrb	r3, [r3, #28]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d004      	beq.n	80050e6 <HAL_CAN_Init+0xb2>
 80050dc:	f44f 7191 	mov.w	r1, #290	; 0x122
 80050e0:	487c      	ldr	r0, [pc, #496]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 80050e2:	f7fe fa22 	bl	800352a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	7f5b      	ldrb	r3, [r3, #29]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_CAN_Init+0xcc>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	7f5b      	ldrb	r3, [r3, #29]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d004      	beq.n	8005100 <HAL_CAN_Init+0xcc>
 80050f6:	f240 1123 	movw	r1, #291	; 0x123
 80050fa:	4876      	ldr	r0, [pc, #472]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 80050fc:	f7fe fa15 	bl	800352a <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d013      	beq.n	8005130 <HAL_CAN_Init+0xfc>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005110:	d00e      	beq.n	8005130 <HAL_CAN_Init+0xfc>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800511a:	d009      	beq.n	8005130 <HAL_CAN_Init+0xfc>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005124:	d004      	beq.n	8005130 <HAL_CAN_Init+0xfc>
 8005126:	f44f 7192 	mov.w	r1, #292	; 0x124
 800512a:	486a      	ldr	r0, [pc, #424]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 800512c:	f7fe f9fd 	bl	800352a <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d013      	beq.n	8005160 <HAL_CAN_Init+0x12c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005140:	d00e      	beq.n	8005160 <HAL_CAN_Init+0x12c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800514a:	d009      	beq.n	8005160 <HAL_CAN_Init+0x12c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005154:	d004      	beq.n	8005160 <HAL_CAN_Init+0x12c>
 8005156:	f240 1125 	movw	r1, #293	; 0x125
 800515a:	485e      	ldr	r0, [pc, #376]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 800515c:	f7fe f9e5 	bl	800352a <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d04f      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005170:	d04a      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800517a:	d045      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005184:	d040      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800518e:	d03b      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005198:	d036      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80051a2:	d031      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80051ac:	d02c      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051b6:	d027      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80051c0:	d022      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80051ca:	d01d      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80051d4:	d018      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051de:	d013      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80051e8:	d00e      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80051f2:	d009      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 80051fc:	d004      	beq.n	8005208 <HAL_CAN_Init+0x1d4>
 80051fe:	f44f 7193 	mov.w	r1, #294	; 0x126
 8005202:	4834      	ldr	r0, [pc, #208]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 8005204:	f7fe f991 	bl	800352a <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d027      	beq.n	8005260 <HAL_CAN_Init+0x22c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005218:	d022      	beq.n	8005260 <HAL_CAN_Init+0x22c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005222:	d01d      	beq.n	8005260 <HAL_CAN_Init+0x22c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800522c:	d018      	beq.n	8005260 <HAL_CAN_Init+0x22c>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005236:	d013      	beq.n	8005260 <HAL_CAN_Init+0x22c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005240:	d00e      	beq.n	8005260 <HAL_CAN_Init+0x22c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800524a:	d009      	beq.n	8005260 <HAL_CAN_Init+0x22c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8005254:	d004      	beq.n	8005260 <HAL_CAN_Init+0x22c>
 8005256:	f240 1127 	movw	r1, #295	; 0x127
 800525a:	481e      	ldr	r0, [pc, #120]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 800525c:	f7fe f965 	bl	800352a <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <HAL_CAN_Init+0x23e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005270:	d904      	bls.n	800527c <HAL_CAN_Init+0x248>
 8005272:	f44f 7194 	mov.w	r1, #296	; 0x128
 8005276:	4817      	ldr	r0, [pc, #92]	; (80052d4 <HAL_CAN_Init+0x2a0>)
 8005278:	f7fe f957 	bl	800352a <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7fc fc15 	bl	8001ab8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0202 	bic.w	r2, r2, #2
 800529c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800529e:	f7ff fe99 	bl	8004fd4 <HAL_GetTick>
 80052a2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80052a4:	e018      	b.n	80052d8 <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80052a6:	f7ff fe95 	bl	8004fd4 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b0a      	cmp	r3, #10
 80052b2:	d911      	bls.n	80052d8 <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2205      	movs	r2, #5
 80052c4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0cb      	b.n	8005464 <HAL_CAN_Init+0x430>
 80052cc:	40006400 	.word	0x40006400
 80052d0:	40006800 	.word	0x40006800
 80052d4:	0800f948 	.word	0x0800f948
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1df      	bne.n	80052a6 <HAL_CAN_Init+0x272>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052f6:	f7ff fe6d 	bl	8004fd4 <HAL_GetTick>
 80052fa:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80052fc:	e012      	b.n	8005324 <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80052fe:	f7ff fe69 	bl	8004fd4 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b0a      	cmp	r3, #10
 800530a:	d90b      	bls.n	8005324 <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2205      	movs	r2, #5
 800531c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e09f      	b.n	8005464 <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0e5      	beq.n	80052fe <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	7e1b      	ldrb	r3, [r3, #24]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d108      	bne.n	800534c <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e007      	b.n	800535c <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800535a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	7e5b      	ldrb	r3, [r3, #25]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d108      	bne.n	8005376 <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e007      	b.n	8005386 <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005384:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	7e9b      	ldrb	r3, [r3, #26]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d108      	bne.n	80053a0 <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0220 	orr.w	r2, r2, #32
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e007      	b.n	80053b0 <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0220 	bic.w	r2, r2, #32
 80053ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7edb      	ldrb	r3, [r3, #27]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d108      	bne.n	80053ca <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0210 	bic.w	r2, r2, #16
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e007      	b.n	80053da <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0210 	orr.w	r2, r2, #16
 80053d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	7f1b      	ldrb	r3, [r3, #28]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d108      	bne.n	80053f4 <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0208 	orr.w	r2, r2, #8
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e007      	b.n	8005404 <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0208 	bic.w	r2, r2, #8
 8005402:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	7f5b      	ldrb	r3, [r3, #29]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d108      	bne.n	800541e <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0204 	orr.w	r2, r2, #4
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e007      	b.n	800542e <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0204 	bic.w	r2, r2, #4
 800542c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	ea42 0103 	orr.w	r1, r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	1e5a      	subs	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005482:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005484:	7cfb      	ldrb	r3, [r7, #19]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d003      	beq.n	8005492 <HAL_CAN_ConfigFilter+0x26>
 800548a:	7cfb      	ldrb	r3, [r7, #19]
 800548c:	2b02      	cmp	r3, #2
 800548e:	f040 812c 	bne.w	80056ea <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549a:	d304      	bcc.n	80054a6 <HAL_CAN_ConfigFilter+0x3a>
 800549c:	f44f 7154 	mov.w	r1, #848	; 0x350
 80054a0:	4897      	ldr	r0, [pc, #604]	; (8005700 <HAL_CAN_ConfigFilter+0x294>)
 80054a2:	f7fe f842 	bl	800352a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ae:	d304      	bcc.n	80054ba <HAL_CAN_ConfigFilter+0x4e>
 80054b0:	f240 3151 	movw	r1, #849	; 0x351
 80054b4:	4892      	ldr	r0, [pc, #584]	; (8005700 <HAL_CAN_ConfigFilter+0x294>)
 80054b6:	f7fe f838 	bl	800352a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c2:	d304      	bcc.n	80054ce <HAL_CAN_ConfigFilter+0x62>
 80054c4:	f240 3152 	movw	r1, #850	; 0x352
 80054c8:	488d      	ldr	r0, [pc, #564]	; (8005700 <HAL_CAN_ConfigFilter+0x294>)
 80054ca:	f7fe f82e 	bl	800352a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d6:	d304      	bcc.n	80054e2 <HAL_CAN_ConfigFilter+0x76>
 80054d8:	f240 3153 	movw	r1, #851	; 0x353
 80054dc:	4888      	ldr	r0, [pc, #544]	; (8005700 <HAL_CAN_ConfigFilter+0x294>)
 80054de:	f7fe f824 	bl	800352a <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <HAL_CAN_ConfigFilter+0x90>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d004      	beq.n	80054fc <HAL_CAN_ConfigFilter+0x90>
 80054f2:	f44f 7155 	mov.w	r1, #852	; 0x354
 80054f6:	4882      	ldr	r0, [pc, #520]	; (8005700 <HAL_CAN_ConfigFilter+0x294>)
 80054f8:	f7fe f817 	bl	800352a <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_CAN_ConfigFilter+0xaa>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d004      	beq.n	8005516 <HAL_CAN_ConfigFilter+0xaa>
 800550c:	f240 3155 	movw	r1, #853	; 0x355
 8005510:	487b      	ldr	r0, [pc, #492]	; (8005700 <HAL_CAN_ConfigFilter+0x294>)
 8005512:	f7fe f80a 	bl	800352a <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d008      	beq.n	8005530 <HAL_CAN_ConfigFilter+0xc4>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d004      	beq.n	8005530 <HAL_CAN_ConfigFilter+0xc4>
 8005526:	f240 3156 	movw	r1, #854	; 0x356
 800552a:	4875      	ldr	r0, [pc, #468]	; (8005700 <HAL_CAN_ConfigFilter+0x294>)
 800552c:	f7fd fffd 	bl	800352a <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_CAN_ConfigFilter+0xde>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d004      	beq.n	800554a <HAL_CAN_ConfigFilter+0xde>
 8005540:	f240 3157 	movw	r1, #855	; 0x357
 8005544:	486e      	ldr	r0, [pc, #440]	; (8005700 <HAL_CAN_ConfigFilter+0x294>)
 8005546:	f7fd fff0 	bl	800352a <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800554a:	4b6e      	ldr	r3, [pc, #440]	; (8005704 <HAL_CAN_ConfigFilter+0x298>)
 800554c:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	2b1b      	cmp	r3, #27
 8005554:	d904      	bls.n	8005560 <HAL_CAN_ConfigFilter+0xf4>
 8005556:	f240 3172 	movw	r1, #882	; 0x372
 800555a:	4869      	ldr	r0, [pc, #420]	; (8005700 <HAL_CAN_ConfigFilter+0x294>)
 800555c:	f7fd ffe5 	bl	800352a <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	2b1b      	cmp	r3, #27
 8005566:	d904      	bls.n	8005572 <HAL_CAN_ConfigFilter+0x106>
 8005568:	f240 3173 	movw	r1, #883	; 0x373
 800556c:	4864      	ldr	r0, [pc, #400]	; (8005700 <HAL_CAN_ConfigFilter+0x294>)
 800556e:	f7fd ffdc 	bl	800352a <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005578:	f043 0201 	orr.w	r2, r3, #1
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005588:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	431a      	orrs	r2, r3
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f003 031f 	and.w	r3, r3, #31
 80055ae:	2201      	movs	r2, #1
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	43db      	mvns	r3, r3
 80055c0:	401a      	ands	r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d123      	bne.n	8005618 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	43db      	mvns	r3, r3
 80055da:	401a      	ands	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80055f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	3248      	adds	r2, #72	; 0x48
 80055f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800560c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800560e:	6979      	ldr	r1, [r7, #20]
 8005610:	3348      	adds	r3, #72	; 0x48
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	440b      	add	r3, r1
 8005616:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d122      	bne.n	8005666 <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	431a      	orrs	r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005640:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	3248      	adds	r2, #72	; 0x48
 8005646:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800565a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800565c:	6979      	ldr	r1, [r7, #20]
 800565e:	3348      	adds	r3, #72	; 0x48
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	440b      	add	r3, r1
 8005664:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	43db      	mvns	r3, r3
 8005678:	401a      	ands	r2, r3
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005680:	e007      	b.n	8005692 <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	431a      	orrs	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	43db      	mvns	r3, r3
 80056a4:	401a      	ands	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80056ac:	e007      	b.n	80056be <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d107      	bne.n	80056d6 <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056dc:	f023 0201 	bic.w	r2, r3, #1
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e006      	b.n	80056f8 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	0800f948 	.word	0x0800f948
 8005704:	40006400 	.word	0x40006400

08005708 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d12e      	bne.n	800577a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0201 	bic.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005734:	f7ff fc4e 	bl	8004fd4 <HAL_GetTick>
 8005738:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800573a:	e012      	b.n	8005762 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800573c:	f7ff fc4a 	bl	8004fd4 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b0a      	cmp	r3, #10
 8005748:	d90b      	bls.n	8005762 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2205      	movs	r2, #5
 800575a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e012      	b.n	8005788 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	e006      	b.n	8005788 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
  }
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <HAL_CAN_AddTxMessage+0x38>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d004      	beq.n	80057c8 <HAL_CAN_AddTxMessage+0x38>
 80057be:	f240 41e9 	movw	r1, #1257	; 0x4e9
 80057c2:	4884      	ldr	r0, [pc, #528]	; (80059d4 <HAL_CAN_AddTxMessage+0x244>)
 80057c4:	f7fd feb1 	bl	800352a <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_CAN_AddTxMessage+0x52>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d004      	beq.n	80057e2 <HAL_CAN_AddTxMessage+0x52>
 80057d8:	f240 41ea 	movw	r1, #1258	; 0x4ea
 80057dc:	487d      	ldr	r0, [pc, #500]	; (80059d4 <HAL_CAN_AddTxMessage+0x244>)
 80057de:	f7fd fea4 	bl	800352a <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d904      	bls.n	80057f4 <HAL_CAN_AddTxMessage+0x64>
 80057ea:	f240 41eb 	movw	r1, #1259	; 0x4eb
 80057ee:	4879      	ldr	r0, [pc, #484]	; (80059d4 <HAL_CAN_AddTxMessage+0x244>)
 80057f0:	f7fd fe9b 	bl	800352a <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005804:	d30f      	bcc.n	8005826 <HAL_CAN_AddTxMessage+0x96>
 8005806:	f240 41ee 	movw	r1, #1262	; 0x4ee
 800580a:	4872      	ldr	r0, [pc, #456]	; (80059d4 <HAL_CAN_AddTxMessage+0x244>)
 800580c:	f7fd fe8d 	bl	800352a <assert_failed>
 8005810:	e009      	b.n	8005826 <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800581a:	d304      	bcc.n	8005826 <HAL_CAN_AddTxMessage+0x96>
 800581c:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8005820:	486c      	ldr	r0, [pc, #432]	; (80059d4 <HAL_CAN_AddTxMessage+0x244>)
 8005822:	f7fd fe82 	bl	800352a <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	7d1b      	ldrb	r3, [r3, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d008      	beq.n	8005840 <HAL_CAN_AddTxMessage+0xb0>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	7d1b      	ldrb	r3, [r3, #20]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d004      	beq.n	8005840 <HAL_CAN_AddTxMessage+0xb0>
 8005836:	f240 41f4 	movw	r1, #1268	; 0x4f4
 800583a:	4866      	ldr	r0, [pc, #408]	; (80059d4 <HAL_CAN_AddTxMessage+0x244>)
 800583c:	f7fd fe75 	bl	800352a <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8005840:	7ffb      	ldrb	r3, [r7, #31]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d003      	beq.n	800584e <HAL_CAN_AddTxMessage+0xbe>
 8005846:	7ffb      	ldrb	r3, [r7, #31]
 8005848:	2b02      	cmp	r3, #2
 800584a:	f040 80b8 	bne.w	80059be <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800585e:	2b00      	cmp	r3, #0
 8005860:	d105      	bne.n	800586e <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80a0 	beq.w	80059ae <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	0e1b      	lsrs	r3, r3, #24
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d907      	bls.n	800588e <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e09e      	b.n	80059cc <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800588e:	2201      	movs	r2, #1
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	409a      	lsls	r2, r3
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	6809      	ldr	r1, [r1, #0]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	3318      	adds	r3, #24
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	440b      	add	r3, r1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e00f      	b.n	80058dc <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80058c6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80058d0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	3318      	adds	r3, #24
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	440b      	add	r3, r1
 80058da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6819      	ldr	r1, [r3, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	3318      	adds	r3, #24
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	440b      	add	r3, r1
 80058ec:	3304      	adds	r3, #4
 80058ee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	7d1b      	ldrb	r3, [r3, #20]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d111      	bne.n	800591c <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	3318      	adds	r3, #24
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	4413      	add	r3, r2
 8005904:	3304      	adds	r3, #4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	6811      	ldr	r1, [r2, #0]
 800590c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	3318      	adds	r3, #24
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	440b      	add	r3, r1
 8005918:	3304      	adds	r3, #4
 800591a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3307      	adds	r3, #7
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	061a      	lsls	r2, r3, #24
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3306      	adds	r3, #6
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	041b      	lsls	r3, r3, #16
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3305      	adds	r3, #5
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	4313      	orrs	r3, r2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	3204      	adds	r2, #4
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	4610      	mov	r0, r2
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	6811      	ldr	r1, [r2, #0]
 8005944:	ea43 0200 	orr.w	r2, r3, r0
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	440b      	add	r3, r1
 800594e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005952:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3303      	adds	r3, #3
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	061a      	lsls	r2, r3, #24
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3302      	adds	r3, #2
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3301      	adds	r3, #1
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	4313      	orrs	r3, r2
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	7812      	ldrb	r2, [r2, #0]
 8005974:	4610      	mov	r0, r2
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	6811      	ldr	r1, [r2, #0]
 800597a:	ea43 0200 	orr.w	r2, r3, r0
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	440b      	add	r3, r1
 8005984:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005988:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	3318      	adds	r3, #24
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	4413      	add	r3, r2
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	6811      	ldr	r1, [r2, #0]
 800599c:	f043 0201 	orr.w	r2, r3, #1
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	3318      	adds	r3, #24
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	440b      	add	r3, r1
 80059a8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e00e      	b.n	80059cc <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e006      	b.n	80059cc <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3720      	adds	r7, #32
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	0800f948 	.word	0x0800f948

080059d8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <HAL_CAN_GetRxMessage+0x2c>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d004      	beq.n	8005a04 <HAL_CAN_GetRxMessage+0x2c>
 80059fa:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 80059fe:	4884      	ldr	r0, [pc, #528]	; (8005c10 <HAL_CAN_GetRxMessage+0x238>)
 8005a00:	f7fd fd93 	bl	800352a <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d003      	beq.n	8005a12 <HAL_CAN_GetRxMessage+0x3a>
 8005a0a:	7dfb      	ldrb	r3, [r7, #23]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	f040 80f3 	bne.w	8005bf8 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10e      	bne.n	8005a36 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d116      	bne.n	8005a54 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e0e7      	b.n	8005c06 <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0d8      	b.n	8005c06 <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	331b      	adds	r3, #27
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	4413      	add	r3, r2
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0204 	and.w	r2, r3, #4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10c      	bne.n	8005a8c <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	331b      	adds	r3, #27
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	4413      	add	r3, r2
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	0d5b      	lsrs	r3, r3, #21
 8005a82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	e00b      	b.n	8005aa4 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	331b      	adds	r3, #27
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	4413      	add	r3, r2
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	08db      	lsrs	r3, r3, #3
 8005a9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	331b      	adds	r3, #27
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	4413      	add	r3, r2
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0202 	and.w	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	331b      	adds	r3, #27
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	331b      	adds	r3, #27
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	4413      	add	r3, r2
 8005ade:	3304      	adds	r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	331b      	adds	r3, #27
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	4413      	add	r3, r2
 8005af6:	3304      	adds	r3, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	0c1b      	lsrs	r3, r3, #16
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	0a1a      	lsrs	r2, r3, #8
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	0c1a      	lsrs	r2, r3, #16
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	3302      	adds	r3, #2
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	0e1a      	lsrs	r2, r3, #24
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	3303      	adds	r3, #3
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	0a1a      	lsrs	r2, r3, #8
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	3305      	adds	r3, #5
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	0c1a      	lsrs	r2, r3, #16
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	3306      	adds	r3, #6
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	0e1a      	lsrs	r2, r3, #24
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	3307      	adds	r3, #7
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d108      	bne.n	8005be4 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0220 	orr.w	r2, r2, #32
 8005be0:	60da      	str	r2, [r3, #12]
 8005be2:	e007      	b.n	8005bf4 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0220 	orr.w	r2, r2, #32
 8005bf2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e006      	b.n	8005c06 <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
  }
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	0800f948 	.word	0x0800f948

08005c14 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c24:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	4a11      	ldr	r2, [pc, #68]	; (8005c70 <HAL_CAN_ActivateNotification+0x5c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d904      	bls.n	8005c38 <HAL_CAN_ActivateNotification+0x24>
 8005c2e:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 8005c32:	4810      	ldr	r0, [pc, #64]	; (8005c74 <HAL_CAN_ActivateNotification+0x60>)
 8005c34:	f7fd fc79 	bl	800352a <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d002      	beq.n	8005c44 <HAL_CAN_ActivateNotification+0x30>
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d109      	bne.n	8005c58 <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6959      	ldr	r1, [r3, #20]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e006      	b.n	8005c66 <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	00038f7f 	.word	0x00038f7f
 8005c74:	0800f948 	.word	0x0800f948

08005c78 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d07c      	beq.n	8005db8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d023      	beq.n	8005d10 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f983 	bl	8005fe6 <HAL_CAN_TxMailbox0CompleteCallback>
 8005ce0:	e016      	b.n	8005d10 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf4:	e00c      	b.n	8005d10 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
 8005d08:	e002      	b.n	8005d10 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f989 	bl	8006022 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d024      	beq.n	8005d64 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f963 	bl	8005ffa <HAL_CAN_TxMailbox1CompleteCallback>
 8005d34:	e016      	b.n	8005d64 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
 8005d48:	e00c      	b.n	8005d64 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5c:	e002      	b.n	8005d64 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f969 	bl	8006036 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d024      	beq.n	8005db8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f943 	bl	800600e <HAL_CAN_TxMailbox2CompleteCallback>
 8005d88:	e016      	b.n	8005db8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9c:	e00c      	b.n	8005db8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
 8005db0:	e002      	b.n	8005db8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f949 	bl	800604a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00c      	beq.n	8005ddc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2210      	movs	r2, #16
 8005dda:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00b      	beq.n	8005dfe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d006      	beq.n	8005dfe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2208      	movs	r2, #8
 8005df6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f930 	bl	800605e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d009      	beq.n	8005e1c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fc ff2e 	bl	8002c78 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00c      	beq.n	8005e40 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2210      	movs	r2, #16
 8005e3e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d006      	beq.n	8005e62 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f912 	bl	8006086 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8f9 	bl	8006072 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d006      	beq.n	8005ea2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2210      	movs	r2, #16
 8005e9a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f8fc 	bl	800609a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00b      	beq.n	8005ec4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d006      	beq.n	8005ec4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2208      	movs	r2, #8
 8005ebc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8f5 	bl	80060ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d07b      	beq.n	8005fc6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d072      	beq.n	8005fbe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d008      	beq.n	8005ef4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	f043 0302 	orr.w	r3, r3, #2
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	f043 0304 	orr.w	r3, r3, #4
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d043      	beq.n	8005fbe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d03e      	beq.n	8005fbe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f46:	2b60      	cmp	r3, #96	; 0x60
 8005f48:	d02b      	beq.n	8005fa2 <HAL_CAN_IRQHandler+0x32a>
 8005f4a:	2b60      	cmp	r3, #96	; 0x60
 8005f4c:	d82e      	bhi.n	8005fac <HAL_CAN_IRQHandler+0x334>
 8005f4e:	2b50      	cmp	r3, #80	; 0x50
 8005f50:	d022      	beq.n	8005f98 <HAL_CAN_IRQHandler+0x320>
 8005f52:	2b50      	cmp	r3, #80	; 0x50
 8005f54:	d82a      	bhi.n	8005fac <HAL_CAN_IRQHandler+0x334>
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d019      	beq.n	8005f8e <HAL_CAN_IRQHandler+0x316>
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d826      	bhi.n	8005fac <HAL_CAN_IRQHandler+0x334>
 8005f5e:	2b30      	cmp	r3, #48	; 0x30
 8005f60:	d010      	beq.n	8005f84 <HAL_CAN_IRQHandler+0x30c>
 8005f62:	2b30      	cmp	r3, #48	; 0x30
 8005f64:	d822      	bhi.n	8005fac <HAL_CAN_IRQHandler+0x334>
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d002      	beq.n	8005f70 <HAL_CAN_IRQHandler+0x2f8>
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d005      	beq.n	8005f7a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005f6e:	e01d      	b.n	8005fac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	f043 0308 	orr.w	r3, r3, #8
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f78:	e019      	b.n	8005fae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	f043 0310 	orr.w	r3, r3, #16
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f82:	e014      	b.n	8005fae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	f043 0320 	orr.w	r3, r3, #32
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f8c:	e00f      	b.n	8005fae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f96:	e00a      	b.n	8005fae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fa0:	e005      	b.n	8005fae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005faa:	e000      	b.n	8005fae <HAL_CAN_IRQHandler+0x336>
            break;
 8005fac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	699a      	ldr	r2, [r3, #24]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005fbc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f872 	bl	80060c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005fde:	bf00      	nop
 8005fe0:	3728      	adds	r7, #40	; 0x28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060e8:	4b0c      	ldr	r3, [pc, #48]	; (800611c <__NVIC_SetPriorityGrouping+0x44>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060f4:	4013      	ands	r3, r2
 80060f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800610a:	4a04      	ldr	r2, [pc, #16]	; (800611c <__NVIC_SetPriorityGrouping+0x44>)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	60d3      	str	r3, [r2, #12]
}
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	e000ed00 	.word	0xe000ed00

08006120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006124:	4b04      	ldr	r3, [pc, #16]	; (8006138 <__NVIC_GetPriorityGrouping+0x18>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	f003 0307 	and.w	r3, r3, #7
}
 800612e:	4618      	mov	r0, r3
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	e000ed00 	.word	0xe000ed00

0800613c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	4603      	mov	r3, r0
 8006144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614a:	2b00      	cmp	r3, #0
 800614c:	db0b      	blt.n	8006166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	f003 021f 	and.w	r2, r3, #31
 8006154:	4907      	ldr	r1, [pc, #28]	; (8006174 <__NVIC_EnableIRQ+0x38>)
 8006156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	2001      	movs	r0, #1
 800615e:	fa00 f202 	lsl.w	r2, r0, r2
 8006162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	e000e100 	.word	0xe000e100

08006178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	6039      	str	r1, [r7, #0]
 8006182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006188:	2b00      	cmp	r3, #0
 800618a:	db0a      	blt.n	80061a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	b2da      	uxtb	r2, r3
 8006190:	490c      	ldr	r1, [pc, #48]	; (80061c4 <__NVIC_SetPriority+0x4c>)
 8006192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006196:	0112      	lsls	r2, r2, #4
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	440b      	add	r3, r1
 800619c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061a0:	e00a      	b.n	80061b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	4908      	ldr	r1, [pc, #32]	; (80061c8 <__NVIC_SetPriority+0x50>)
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	3b04      	subs	r3, #4
 80061b0:	0112      	lsls	r2, r2, #4
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	440b      	add	r3, r1
 80061b6:	761a      	strb	r2, [r3, #24]
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	e000e100 	.word	0xe000e100
 80061c8:	e000ed00 	.word	0xe000ed00

080061cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b089      	sub	sp, #36	; 0x24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f1c3 0307 	rsb	r3, r3, #7
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	bf28      	it	cs
 80061ea:	2304      	movcs	r3, #4
 80061ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	3304      	adds	r3, #4
 80061f2:	2b06      	cmp	r3, #6
 80061f4:	d902      	bls.n	80061fc <NVIC_EncodePriority+0x30>
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	3b03      	subs	r3, #3
 80061fa:	e000      	b.n	80061fe <NVIC_EncodePriority+0x32>
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43da      	mvns	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	401a      	ands	r2, r3
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	fa01 f303 	lsl.w	r3, r1, r3
 800621e:	43d9      	mvns	r1, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006224:	4313      	orrs	r3, r2
         );
}
 8006226:	4618      	mov	r0, r3
 8006228:	3724      	adds	r7, #36	; 0x24
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3b01      	subs	r3, #1
 8006240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006244:	d301      	bcc.n	800624a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006246:	2301      	movs	r3, #1
 8006248:	e00f      	b.n	800626a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800624a:	4a0a      	ldr	r2, [pc, #40]	; (8006274 <SysTick_Config+0x40>)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3b01      	subs	r3, #1
 8006250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006252:	210f      	movs	r1, #15
 8006254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006258:	f7ff ff8e 	bl	8006178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800625c:	4b05      	ldr	r3, [pc, #20]	; (8006274 <SysTick_Config+0x40>)
 800625e:	2200      	movs	r2, #0
 8006260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006262:	4b04      	ldr	r3, [pc, #16]	; (8006274 <SysTick_Config+0x40>)
 8006264:	2207      	movs	r2, #7
 8006266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	e000e010 	.word	0xe000e010

08006278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b07      	cmp	r3, #7
 8006284:	d00f      	beq.n	80062a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b06      	cmp	r3, #6
 800628a:	d00c      	beq.n	80062a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b05      	cmp	r3, #5
 8006290:	d009      	beq.n	80062a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b04      	cmp	r3, #4
 8006296:	d006      	beq.n	80062a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b03      	cmp	r3, #3
 800629c:	d003      	beq.n	80062a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800629e:	2192      	movs	r1, #146	; 0x92
 80062a0:	4804      	ldr	r0, [pc, #16]	; (80062b4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80062a2:	f7fd f942 	bl	800352a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff ff16 	bl	80060d8 <__NVIC_SetPriorityGrouping>
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	0800f980 	.word	0x0800f980

080062b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b0f      	cmp	r3, #15
 80062ce:	d903      	bls.n	80062d8 <HAL_NVIC_SetPriority+0x20>
 80062d0:	21aa      	movs	r1, #170	; 0xaa
 80062d2:	480e      	ldr	r0, [pc, #56]	; (800630c <HAL_NVIC_SetPriority+0x54>)
 80062d4:	f7fd f929 	bl	800352a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b0f      	cmp	r3, #15
 80062dc:	d903      	bls.n	80062e6 <HAL_NVIC_SetPriority+0x2e>
 80062de:	21ab      	movs	r1, #171	; 0xab
 80062e0:	480a      	ldr	r0, [pc, #40]	; (800630c <HAL_NVIC_SetPriority+0x54>)
 80062e2:	f7fd f922 	bl	800352a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062e6:	f7ff ff1b 	bl	8006120 <__NVIC_GetPriorityGrouping>
 80062ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	6978      	ldr	r0, [r7, #20]
 80062f2:	f7ff ff6b 	bl	80061cc <NVIC_EncodePriority>
 80062f6:	4602      	mov	r2, r0
 80062f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff ff3a 	bl	8006178 <__NVIC_SetPriority>
}
 8006304:	bf00      	nop
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	0800f980 	.word	0x0800f980

08006310 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800631a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631e:	2b00      	cmp	r3, #0
 8006320:	da03      	bge.n	800632a <HAL_NVIC_EnableIRQ+0x1a>
 8006322:	21be      	movs	r1, #190	; 0xbe
 8006324:	4805      	ldr	r0, [pc, #20]	; (800633c <HAL_NVIC_EnableIRQ+0x2c>)
 8006326:	f7fd f900 	bl	800352a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800632a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ff04 	bl	800613c <__NVIC_EnableIRQ>
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	0800f980 	.word	0x0800f980

08006340 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff ff73 	bl	8006234 <SysTick_Config>
 800634e:	4603      	mov	r3, r0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b04      	cmp	r3, #4
 8006364:	d007      	beq.n	8006376 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 800636c:	f240 11c9 	movw	r1, #457	; 0x1c9
 8006370:	480b      	ldr	r0, [pc, #44]	; (80063a0 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 8006372:	f7fd f8da 	bl	800352a <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b04      	cmp	r3, #4
 800637a:	d106      	bne.n	800638a <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a08      	ldr	r2, [pc, #32]	; (80063a4 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8006382:	f043 0304 	orr.w	r3, r3, #4
 8006386:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8006388:	e005      	b.n	8006396 <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800638a:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a05      	ldr	r2, [pc, #20]	; (80063a4 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8006390:	f023 0304 	bic.w	r3, r3, #4
 8006394:	6013      	str	r3, [r2, #0]
}
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	0800f980 	.word	0x0800f980
 80063a4:	e000e010 	.word	0xe000e010

080063a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80063b4:	f7fe fe0e 	bl	8004fd4 <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e204      	b.n	80067ce <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a97      	ldr	r2, [pc, #604]	; (8006628 <HAL_DMA_Init+0x280>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d04e      	beq.n	800646c <HAL_DMA_Init+0xc4>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a96      	ldr	r2, [pc, #600]	; (800662c <HAL_DMA_Init+0x284>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d049      	beq.n	800646c <HAL_DMA_Init+0xc4>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a94      	ldr	r2, [pc, #592]	; (8006630 <HAL_DMA_Init+0x288>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d044      	beq.n	800646c <HAL_DMA_Init+0xc4>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a93      	ldr	r2, [pc, #588]	; (8006634 <HAL_DMA_Init+0x28c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d03f      	beq.n	800646c <HAL_DMA_Init+0xc4>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a91      	ldr	r2, [pc, #580]	; (8006638 <HAL_DMA_Init+0x290>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d03a      	beq.n	800646c <HAL_DMA_Init+0xc4>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a90      	ldr	r2, [pc, #576]	; (800663c <HAL_DMA_Init+0x294>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d035      	beq.n	800646c <HAL_DMA_Init+0xc4>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a8e      	ldr	r2, [pc, #568]	; (8006640 <HAL_DMA_Init+0x298>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d030      	beq.n	800646c <HAL_DMA_Init+0xc4>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a8d      	ldr	r2, [pc, #564]	; (8006644 <HAL_DMA_Init+0x29c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d02b      	beq.n	800646c <HAL_DMA_Init+0xc4>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a8b      	ldr	r2, [pc, #556]	; (8006648 <HAL_DMA_Init+0x2a0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d026      	beq.n	800646c <HAL_DMA_Init+0xc4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a8a      	ldr	r2, [pc, #552]	; (800664c <HAL_DMA_Init+0x2a4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d021      	beq.n	800646c <HAL_DMA_Init+0xc4>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a88      	ldr	r2, [pc, #544]	; (8006650 <HAL_DMA_Init+0x2a8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d01c      	beq.n	800646c <HAL_DMA_Init+0xc4>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a87      	ldr	r2, [pc, #540]	; (8006654 <HAL_DMA_Init+0x2ac>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d017      	beq.n	800646c <HAL_DMA_Init+0xc4>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a85      	ldr	r2, [pc, #532]	; (8006658 <HAL_DMA_Init+0x2b0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d012      	beq.n	800646c <HAL_DMA_Init+0xc4>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a84      	ldr	r2, [pc, #528]	; (800665c <HAL_DMA_Init+0x2b4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00d      	beq.n	800646c <HAL_DMA_Init+0xc4>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a82      	ldr	r2, [pc, #520]	; (8006660 <HAL_DMA_Init+0x2b8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d008      	beq.n	800646c <HAL_DMA_Init+0xc4>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a81      	ldr	r2, [pc, #516]	; (8006664 <HAL_DMA_Init+0x2bc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <HAL_DMA_Init+0xc4>
 8006464:	21b8      	movs	r1, #184	; 0xb8
 8006466:	4880      	ldr	r0, [pc, #512]	; (8006668 <HAL_DMA_Init+0x2c0>)
 8006468:	f7fd f85f 	bl	800352a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d026      	beq.n	80064c2 <HAL_DMA_Init+0x11a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800647c:	d021      	beq.n	80064c2 <HAL_DMA_Init+0x11a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006486:	d01c      	beq.n	80064c2 <HAL_DMA_Init+0x11a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006490:	d017      	beq.n	80064c2 <HAL_DMA_Init+0x11a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800649a:	d012      	beq.n	80064c2 <HAL_DMA_Init+0x11a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80064a4:	d00d      	beq.n	80064c2 <HAL_DMA_Init+0x11a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80064ae:	d008      	beq.n	80064c2 <HAL_DMA_Init+0x11a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80064b8:	d003      	beq.n	80064c2 <HAL_DMA_Init+0x11a>
 80064ba:	21b9      	movs	r1, #185	; 0xb9
 80064bc:	486a      	ldr	r0, [pc, #424]	; (8006668 <HAL_DMA_Init+0x2c0>)
 80064be:	f7fd f834 	bl	800352a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <HAL_DMA_Init+0x13a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b40      	cmp	r3, #64	; 0x40
 80064d0:	d007      	beq.n	80064e2 <HAL_DMA_Init+0x13a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b80      	cmp	r3, #128	; 0x80
 80064d8:	d003      	beq.n	80064e2 <HAL_DMA_Init+0x13a>
 80064da:	21ba      	movs	r1, #186	; 0xba
 80064dc:	4862      	ldr	r0, [pc, #392]	; (8006668 <HAL_DMA_Init+0x2c0>)
 80064de:	f7fd f824 	bl	800352a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ea:	d007      	beq.n	80064fc <HAL_DMA_Init+0x154>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_DMA_Init+0x154>
 80064f4:	21bb      	movs	r1, #187	; 0xbb
 80064f6:	485c      	ldr	r0, [pc, #368]	; (8006668 <HAL_DMA_Init+0x2c0>)
 80064f8:	f7fd f817 	bl	800352a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006504:	d007      	beq.n	8006516 <HAL_DMA_Init+0x16e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_DMA_Init+0x16e>
 800650e:	21bc      	movs	r1, #188	; 0xbc
 8006510:	4855      	ldr	r0, [pc, #340]	; (8006668 <HAL_DMA_Init+0x2c0>)
 8006512:	f7fd f80a 	bl	800352a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00d      	beq.n	800653a <HAL_DMA_Init+0x192>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006526:	d008      	beq.n	800653a <HAL_DMA_Init+0x192>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006530:	d003      	beq.n	800653a <HAL_DMA_Init+0x192>
 8006532:	21bd      	movs	r1, #189	; 0xbd
 8006534:	484c      	ldr	r0, [pc, #304]	; (8006668 <HAL_DMA_Init+0x2c0>)
 8006536:	f7fc fff8 	bl	800352a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00d      	beq.n	800655e <HAL_DMA_Init+0x1b6>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800654a:	d008      	beq.n	800655e <HAL_DMA_Init+0x1b6>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006554:	d003      	beq.n	800655e <HAL_DMA_Init+0x1b6>
 8006556:	21be      	movs	r1, #190	; 0xbe
 8006558:	4843      	ldr	r0, [pc, #268]	; (8006668 <HAL_DMA_Init+0x2c0>)
 800655a:	f7fc ffe6 	bl	800352a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00c      	beq.n	8006580 <HAL_DMA_Init+0x1d8>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656e:	d007      	beq.n	8006580 <HAL_DMA_Init+0x1d8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	2b20      	cmp	r3, #32
 8006576:	d003      	beq.n	8006580 <HAL_DMA_Init+0x1d8>
 8006578:	21bf      	movs	r1, #191	; 0xbf
 800657a:	483b      	ldr	r0, [pc, #236]	; (8006668 <HAL_DMA_Init+0x2c0>)
 800657c:	f7fc ffd5 	bl	800352a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d012      	beq.n	80065ae <HAL_DMA_Init+0x206>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006590:	d00d      	beq.n	80065ae <HAL_DMA_Init+0x206>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800659a:	d008      	beq.n	80065ae <HAL_DMA_Init+0x206>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065a4:	d003      	beq.n	80065ae <HAL_DMA_Init+0x206>
 80065a6:	21c0      	movs	r1, #192	; 0xc0
 80065a8:	482f      	ldr	r0, [pc, #188]	; (8006668 <HAL_DMA_Init+0x2c0>)
 80065aa:	f7fc ffbe 	bl	800352a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <HAL_DMA_Init+0x21e>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d003      	beq.n	80065c6 <HAL_DMA_Init+0x21e>
 80065be:	21c1      	movs	r1, #193	; 0xc1
 80065c0:	4829      	ldr	r0, [pc, #164]	; (8006668 <HAL_DMA_Init+0x2c0>)
 80065c2:	f7fc ffb2 	bl	800352a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d065      	beq.n	800669a <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00f      	beq.n	80065f6 <HAL_DMA_Init+0x24e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d00b      	beq.n	80065f6 <HAL_DMA_Init+0x24e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d007      	beq.n	80065f6 <HAL_DMA_Init+0x24e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d003      	beq.n	80065f6 <HAL_DMA_Init+0x24e>
 80065ee:	21c6      	movs	r1, #198	; 0xc6
 80065f0:	481d      	ldr	r0, [pc, #116]	; (8006668 <HAL_DMA_Init+0x2c0>)
 80065f2:	f7fc ff9a 	bl	800352a <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d036      	beq.n	800666c <HAL_DMA_Init+0x2c4>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006606:	d031      	beq.n	800666c <HAL_DMA_Init+0x2c4>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006610:	d02c      	beq.n	800666c <HAL_DMA_Init+0x2c4>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800661a:	d027      	beq.n	800666c <HAL_DMA_Init+0x2c4>
 800661c:	21c7      	movs	r1, #199	; 0xc7
 800661e:	4812      	ldr	r0, [pc, #72]	; (8006668 <HAL_DMA_Init+0x2c0>)
 8006620:	f7fc ff83 	bl	800352a <assert_failed>
 8006624:	e022      	b.n	800666c <HAL_DMA_Init+0x2c4>
 8006626:	bf00      	nop
 8006628:	40026010 	.word	0x40026010
 800662c:	40026028 	.word	0x40026028
 8006630:	40026040 	.word	0x40026040
 8006634:	40026058 	.word	0x40026058
 8006638:	40026070 	.word	0x40026070
 800663c:	40026088 	.word	0x40026088
 8006640:	400260a0 	.word	0x400260a0
 8006644:	400260b8 	.word	0x400260b8
 8006648:	40026410 	.word	0x40026410
 800664c:	40026428 	.word	0x40026428
 8006650:	40026440 	.word	0x40026440
 8006654:	40026458 	.word	0x40026458
 8006658:	40026470 	.word	0x40026470
 800665c:	40026488 	.word	0x40026488
 8006660:	400264a0 	.word	0x400264a0
 8006664:	400264b8 	.word	0x400264b8
 8006668:	0800f9bc 	.word	0x0800f9bc
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	2b00      	cmp	r3, #0
 8006672:	d012      	beq.n	800669a <HAL_DMA_Init+0x2f2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800667c:	d00d      	beq.n	800669a <HAL_DMA_Init+0x2f2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006686:	d008      	beq.n	800669a <HAL_DMA_Init+0x2f2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006690:	d003      	beq.n	800669a <HAL_DMA_Init+0x2f2>
 8006692:	21c8      	movs	r1, #200	; 0xc8
 8006694:	4850      	ldr	r0, [pc, #320]	; (80067d8 <HAL_DMA_Init+0x430>)
 8006696:	f7fc ff48 	bl	800352a <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0201 	bic.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066ba:	e00f      	b.n	80066dc <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066bc:	f7fe fc8a 	bl	8004fd4 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	d908      	bls.n	80066dc <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2203      	movs	r2, #3
 80066d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e078      	b.n	80067ce <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e8      	bne.n	80066bc <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4b39      	ldr	r3, [pc, #228]	; (80067dc <HAL_DMA_Init+0x434>)
 80066f6:	4013      	ands	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	2b04      	cmp	r3, #4
 8006734:	d107      	bne.n	8006746 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	4313      	orrs	r3, r2
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f023 0307 	bic.w	r3, r3, #7
 800675c:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	2b04      	cmp	r3, #4
 800676e:	d117      	bne.n	80067a0 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00e      	beq.n	80067a0 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fa80 	bl	8006c88 <DMA_CheckFifoParam>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d008      	beq.n	80067a0 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2240      	movs	r2, #64	; 0x40
 8006792:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800679c:	2301      	movs	r3, #1
 800679e:	e016      	b.n	80067ce <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fa37 	bl	8006c1c <DMA_CalcBaseAndBitshift>
 80067ae:	4603      	mov	r3, r0
 80067b0:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b6:	223f      	movs	r2, #63	; 0x3f
 80067b8:	409a      	lsls	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	0800f9bc 	.word	0x0800f9bc
 80067dc:	f010803f 	.word	0xf010803f

080067e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_DMA_Start_IT+0x26>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006804:	d304      	bcc.n	8006810 <HAL_DMA_Start_IT+0x30>
 8006806:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800680a:	4827      	ldr	r0, [pc, #156]	; (80068a8 <HAL_DMA_Start_IT+0xc8>)
 800680c:	f7fc fe8d 	bl	800352a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <HAL_DMA_Start_IT+0x3e>
 800681a:	2302      	movs	r3, #2
 800681c:	e040      	b.n	80068a0 <HAL_DMA_Start_IT+0xc0>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b01      	cmp	r3, #1
 8006830:	d12f      	bne.n	8006892 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2202      	movs	r2, #2
 8006836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f9ba 	bl	8006bc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006850:	223f      	movs	r2, #63	; 0x3f
 8006852:	409a      	lsls	r2, r3
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0216 	orr.w	r2, r2, #22
 8006866:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	2b00      	cmp	r3, #0
 800686e:	d007      	beq.n	8006880 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0208 	orr.w	r2, r2, #8
 800687e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	e005      	b.n	800689e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800689a:	2302      	movs	r3, #2
 800689c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800689e:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	0800f9bc 	.word	0x0800f9bc

080068ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80068b8:	4b92      	ldr	r3, [pc, #584]	; (8006b04 <HAL_DMA_IRQHandler+0x258>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a92      	ldr	r2, [pc, #584]	; (8006b08 <HAL_DMA_IRQHandler+0x25c>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	0a9b      	lsrs	r3, r3, #10
 80068c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d6:	2208      	movs	r2, #8
 80068d8:	409a      	lsls	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4013      	ands	r3, r2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01a      	beq.n	8006918 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d013      	beq.n	8006918 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0204 	bic.w	r2, r2, #4
 80068fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006904:	2208      	movs	r2, #8
 8006906:	409a      	lsls	r2, r3
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006910:	f043 0201 	orr.w	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691c:	2201      	movs	r2, #1
 800691e:	409a      	lsls	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4013      	ands	r3, r2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d012      	beq.n	800694e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693a:	2201      	movs	r2, #1
 800693c:	409a      	lsls	r2, r3
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006946:	f043 0202 	orr.w	r2, r3, #2
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006952:	2204      	movs	r2, #4
 8006954:	409a      	lsls	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4013      	ands	r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d012      	beq.n	8006984 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00b      	beq.n	8006984 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006970:	2204      	movs	r2, #4
 8006972:	409a      	lsls	r2, r3
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697c:	f043 0204 	orr.w	r2, r3, #4
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006988:	2210      	movs	r2, #16
 800698a:	409a      	lsls	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4013      	ands	r3, r2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d043      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d03c      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a6:	2210      	movs	r2, #16
 80069a8:	409a      	lsls	r2, r3
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d018      	beq.n	80069ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d108      	bne.n	80069dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d024      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	4798      	blx	r3
 80069da:	e01f      	b.n	8006a1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01b      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
 80069ec:	e016      	b.n	8006a1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d107      	bne.n	8006a0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0208 	bic.w	r2, r2, #8
 8006a0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a20:	2220      	movs	r2, #32
 8006a22:	409a      	lsls	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4013      	ands	r3, r2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 808e 	beq.w	8006b4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8086 	beq.w	8006b4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a42:	2220      	movs	r2, #32
 8006a44:	409a      	lsls	r2, r3
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b05      	cmp	r3, #5
 8006a54:	d136      	bne.n	8006ac4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0216 	bic.w	r2, r2, #22
 8006a64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	695a      	ldr	r2, [r3, #20]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <HAL_DMA_IRQHandler+0x1da>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0208 	bic.w	r2, r2, #8
 8006a94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9a:	223f      	movs	r2, #63	; 0x3f
 8006a9c:	409a      	lsls	r2, r3
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d07d      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
        }
        return;
 8006ac2:	e078      	b.n	8006bb6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d01c      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d108      	bne.n	8006af2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d030      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
 8006af0:	e02b      	b.n	8006b4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d027      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
 8006b02:	e022      	b.n	8006b4a <HAL_DMA_IRQHandler+0x29e>
 8006b04:	200001d0 	.word	0x200001d0
 8006b08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10f      	bne.n	8006b3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0210 	bic.w	r2, r2, #16
 8006b28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d032      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d022      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2205      	movs	r2, #5
 8006b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0201 	bic.w	r2, r2, #1
 8006b74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	60bb      	str	r3, [r7, #8]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d307      	bcc.n	8006b92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1f2      	bne.n	8006b76 <HAL_DMA_IRQHandler+0x2ca>
 8006b90:	e000      	b.n	8006b94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006b92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
 8006bb4:	e000      	b.n	8006bb8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006bb6:	bf00      	nop
    }
  }
}
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop

08006bc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	d108      	bne.n	8006c00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006bfe:	e007      	b.n	8006c10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	60da      	str	r2, [r3, #12]
}
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	3b10      	subs	r3, #16
 8006c2c:	4a14      	ldr	r2, [pc, #80]	; (8006c80 <DMA_CalcBaseAndBitshift+0x64>)
 8006c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c32:	091b      	lsrs	r3, r3, #4
 8006c34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c36:	4a13      	ldr	r2, [pc, #76]	; (8006c84 <DMA_CalcBaseAndBitshift+0x68>)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d909      	bls.n	8006c5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c52:	f023 0303 	bic.w	r3, r3, #3
 8006c56:	1d1a      	adds	r2, r3, #4
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	659a      	str	r2, [r3, #88]	; 0x58
 8006c5c:	e007      	b.n	8006c6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c66:	f023 0303 	bic.w	r3, r3, #3
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	aaaaaaab 	.word	0xaaaaaaab
 8006c84:	0800fbf4 	.word	0x0800fbf4

08006c88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d11f      	bne.n	8006ce2 <DMA_CheckFifoParam+0x5a>
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d856      	bhi.n	8006d56 <DMA_CheckFifoParam+0xce>
 8006ca8:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <DMA_CheckFifoParam+0x28>)
 8006caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cae:	bf00      	nop
 8006cb0:	08006cc1 	.word	0x08006cc1
 8006cb4:	08006cd3 	.word	0x08006cd3
 8006cb8:	08006cc1 	.word	0x08006cc1
 8006cbc:	08006d57 	.word	0x08006d57
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d046      	beq.n	8006d5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cd0:	e043      	b.n	8006d5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cda:	d140      	bne.n	8006d5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ce0:	e03d      	b.n	8006d5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cea:	d121      	bne.n	8006d30 <DMA_CheckFifoParam+0xa8>
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d837      	bhi.n	8006d62 <DMA_CheckFifoParam+0xda>
 8006cf2:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <DMA_CheckFifoParam+0x70>)
 8006cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf8:	08006d09 	.word	0x08006d09
 8006cfc:	08006d0f 	.word	0x08006d0f
 8006d00:	08006d09 	.word	0x08006d09
 8006d04:	08006d21 	.word	0x08006d21
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d0c:	e030      	b.n	8006d70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d025      	beq.n	8006d66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d1e:	e022      	b.n	8006d66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d28:	d11f      	bne.n	8006d6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d2e:	e01c      	b.n	8006d6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d903      	bls.n	8006d3e <DMA_CheckFifoParam+0xb6>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d003      	beq.n	8006d44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d3c:	e018      	b.n	8006d70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	73fb      	strb	r3, [r7, #15]
      break;
 8006d42:	e015      	b.n	8006d70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00e      	beq.n	8006d6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	73fb      	strb	r3, [r7, #15]
      break;
 8006d54:	e00b      	b.n	8006d6e <DMA_CheckFifoParam+0xe6>
      break;
 8006d56:	bf00      	nop
 8006d58:	e00a      	b.n	8006d70 <DMA_CheckFifoParam+0xe8>
      break;
 8006d5a:	bf00      	nop
 8006d5c:	e008      	b.n	8006d70 <DMA_CheckFifoParam+0xe8>
      break;
 8006d5e:	bf00      	nop
 8006d60:	e006      	b.n	8006d70 <DMA_CheckFifoParam+0xe8>
      break;
 8006d62:	bf00      	nop
 8006d64:	e004      	b.n	8006d70 <DMA_CheckFifoParam+0xe8>
      break;
 8006d66:	bf00      	nop
 8006d68:	e002      	b.n	8006d70 <DMA_CheckFifoParam+0xe8>
      break;   
 8006d6a:	bf00      	nop
 8006d6c:	e000      	b.n	8006d70 <DMA_CheckFifoParam+0xe8>
      break;
 8006d6e:	bf00      	nop
    }
  } 
  
  return status; 
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop

08006d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a45      	ldr	r2, [pc, #276]	; (8006eb0 <HAL_GPIO_Init+0x130>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d02b      	beq.n	8006df6 <HAL_GPIO_Init+0x76>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a44      	ldr	r2, [pc, #272]	; (8006eb4 <HAL_GPIO_Init+0x134>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d027      	beq.n	8006df6 <HAL_GPIO_Init+0x76>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a43      	ldr	r2, [pc, #268]	; (8006eb8 <HAL_GPIO_Init+0x138>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d023      	beq.n	8006df6 <HAL_GPIO_Init+0x76>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a42      	ldr	r2, [pc, #264]	; (8006ebc <HAL_GPIO_Init+0x13c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d01f      	beq.n	8006df6 <HAL_GPIO_Init+0x76>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a41      	ldr	r2, [pc, #260]	; (8006ec0 <HAL_GPIO_Init+0x140>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01b      	beq.n	8006df6 <HAL_GPIO_Init+0x76>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a40      	ldr	r2, [pc, #256]	; (8006ec4 <HAL_GPIO_Init+0x144>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d017      	beq.n	8006df6 <HAL_GPIO_Init+0x76>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a3f      	ldr	r2, [pc, #252]	; (8006ec8 <HAL_GPIO_Init+0x148>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <HAL_GPIO_Init+0x76>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a3e      	ldr	r2, [pc, #248]	; (8006ecc <HAL_GPIO_Init+0x14c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00f      	beq.n	8006df6 <HAL_GPIO_Init+0x76>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a3d      	ldr	r2, [pc, #244]	; (8006ed0 <HAL_GPIO_Init+0x150>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00b      	beq.n	8006df6 <HAL_GPIO_Init+0x76>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a3c      	ldr	r2, [pc, #240]	; (8006ed4 <HAL_GPIO_Init+0x154>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d007      	beq.n	8006df6 <HAL_GPIO_Init+0x76>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a3b      	ldr	r2, [pc, #236]	; (8006ed8 <HAL_GPIO_Init+0x158>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_Init+0x76>
 8006dee:	21b3      	movs	r1, #179	; 0xb3
 8006df0:	483a      	ldr	r0, [pc, #232]	; (8006edc <HAL_GPIO_Init+0x15c>)
 8006df2:	f7fc fb9a 	bl	800352a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <HAL_GPIO_Init+0x8c>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	0c1b      	lsrs	r3, r3, #16
 8006e06:	041b      	lsls	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <HAL_GPIO_Init+0x94>
 8006e0c:	21b4      	movs	r1, #180	; 0xb4
 8006e0e:	4833      	ldr	r0, [pc, #204]	; (8006edc <HAL_GPIO_Init+0x15c>)
 8006e10:	f7fc fb8b 	bl	800352a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d035      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d031      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b11      	cmp	r3, #17
 8006e2a:	d02d      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d029      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b12      	cmp	r3, #18
 8006e3a:	d025      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4a27      	ldr	r2, [pc, #156]	; (8006ee0 <HAL_GPIO_Init+0x160>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d020      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	4a26      	ldr	r2, [pc, #152]	; (8006ee4 <HAL_GPIO_Init+0x164>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d01b      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	4a24      	ldr	r2, [pc, #144]	; (8006ee8 <HAL_GPIO_Init+0x168>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d016      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	4a23      	ldr	r2, [pc, #140]	; (8006eec <HAL_GPIO_Init+0x16c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d011      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	4a21      	ldr	r2, [pc, #132]	; (8006ef0 <HAL_GPIO_Init+0x170>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00c      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	4a20      	ldr	r2, [pc, #128]	; (8006ef4 <HAL_GPIO_Init+0x174>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d003      	beq.n	8006e88 <HAL_GPIO_Init+0x108>
 8006e80:	21b5      	movs	r1, #181	; 0xb5
 8006e82:	4816      	ldr	r0, [pc, #88]	; (8006edc <HAL_GPIO_Init+0x15c>)
 8006e84:	f7fc fb51 	bl	800352a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <HAL_GPIO_Init+0x128>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d007      	beq.n	8006ea8 <HAL_GPIO_Init+0x128>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d003      	beq.n	8006ea8 <HAL_GPIO_Init+0x128>
 8006ea0:	21b6      	movs	r1, #182	; 0xb6
 8006ea2:	480e      	ldr	r0, [pc, #56]	; (8006edc <HAL_GPIO_Init+0x15c>)
 8006ea4:	f7fc fb41 	bl	800352a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	e270      	b.n	8007390 <HAL_GPIO_Init+0x610>
 8006eae:	bf00      	nop
 8006eb0:	40020000 	.word	0x40020000
 8006eb4:	40020400 	.word	0x40020400
 8006eb8:	40020800 	.word	0x40020800
 8006ebc:	40020c00 	.word	0x40020c00
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	40021400 	.word	0x40021400
 8006ec8:	40021800 	.word	0x40021800
 8006ecc:	40021c00 	.word	0x40021c00
 8006ed0:	40022000 	.word	0x40022000
 8006ed4:	40022400 	.word	0x40022400
 8006ed8:	40022800 	.word	0x40022800
 8006edc:	0800f9f4 	.word	0x0800f9f4
 8006ee0:	10110000 	.word	0x10110000
 8006ee4:	10210000 	.word	0x10210000
 8006ee8:	10310000 	.word	0x10310000
 8006eec:	10120000 	.word	0x10120000
 8006ef0:	10220000 	.word	0x10220000
 8006ef4:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ef8:	2201      	movs	r2, #1
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	f040 823a 	bne.w	800738a <HAL_GPIO_Init+0x60a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d00b      	beq.n	8006f36 <HAL_GPIO_Init+0x1b6>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d007      	beq.n	8006f36 <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f2a:	2b11      	cmp	r3, #17
 8006f2c:	d003      	beq.n	8006f36 <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b12      	cmp	r3, #18
 8006f34:	d144      	bne.n	8006fc0 <HAL_GPIO_Init+0x240>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00f      	beq.n	8006f5e <HAL_GPIO_Init+0x1de>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d00b      	beq.n	8006f5e <HAL_GPIO_Init+0x1de>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d007      	beq.n	8006f5e <HAL_GPIO_Init+0x1de>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d003      	beq.n	8006f5e <HAL_GPIO_Init+0x1de>
 8006f56:	21c8      	movs	r1, #200	; 0xc8
 8006f58:	489a      	ldr	r0, [pc, #616]	; (80071c4 <HAL_GPIO_Init+0x444>)
 8006f5a:	f7fc fae6 	bl	800352a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	2203      	movs	r2, #3
 8006f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6e:	43db      	mvns	r3, r3
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	4013      	ands	r3, r2
 8006f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f94:	2201      	movs	r2, #1
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	091b      	lsrs	r3, r3, #4
 8006faa:	f003 0201 	and.w	r2, r3, #1
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	2203      	movs	r2, #3
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d004      	beq.n	8007002 <HAL_GPIO_Init+0x282>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b12      	cmp	r3, #18
 8006ffe:	f040 80e3 	bne.w	80071c8 <HAL_GPIO_Init+0x448>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 80b6 	beq.w	8007178 <HAL_GPIO_Init+0x3f8>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b09      	cmp	r3, #9
 8007012:	f000 80b1 	beq.w	8007178 <HAL_GPIO_Init+0x3f8>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 80ac 	beq.w	8007178 <HAL_GPIO_Init+0x3f8>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 80a7 	beq.w	8007178 <HAL_GPIO_Init+0x3f8>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 80a2 	beq.w	8007178 <HAL_GPIO_Init+0x3f8>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 809d 	beq.w	8007178 <HAL_GPIO_Init+0x3f8>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b01      	cmp	r3, #1
 8007044:	f000 8098 	beq.w	8007178 <HAL_GPIO_Init+0x3f8>
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b01      	cmp	r3, #1
 800704e:	f000 8093 	beq.w	8007178 <HAL_GPIO_Init+0x3f8>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b02      	cmp	r3, #2
 8007058:	f000 808e 	beq.w	8007178 <HAL_GPIO_Init+0x3f8>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	2b02      	cmp	r3, #2
 8007062:	f000 8089 	beq.w	8007178 <HAL_GPIO_Init+0x3f8>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	2b02      	cmp	r3, #2
 800706c:	f000 8084 	beq.w	8007178 <HAL_GPIO_Init+0x3f8>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b03      	cmp	r3, #3
 8007076:	d07f      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b04      	cmp	r3, #4
 800707e:	d07b      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b04      	cmp	r3, #4
 8007086:	d077      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2b04      	cmp	r3, #4
 800708e:	d073      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2b05      	cmp	r3, #5
 8007096:	d06f      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b05      	cmp	r3, #5
 800709e:	d06b      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	2b09      	cmp	r3, #9
 80070a6:	d067      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b06      	cmp	r3, #6
 80070ae:	d063      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b09      	cmp	r3, #9
 80070b6:	d05f      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b07      	cmp	r3, #7
 80070be:	d05b      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2b07      	cmp	r3, #7
 80070c6:	d057      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b07      	cmp	r3, #7
 80070ce:	d053      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d04f      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d04b      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d047      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	2b09      	cmp	r3, #9
 80070ee:	d043      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b09      	cmp	r3, #9
 80070f6:	d03f      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	2b0a      	cmp	r3, #10
 80070fe:	d03b      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b0a      	cmp	r3, #10
 8007106:	d037      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	2b0b      	cmp	r3, #11
 800710e:	d033      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b0c      	cmp	r3, #12
 8007116:	d02f      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b0c      	cmp	r3, #12
 800711e:	d02b      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	2b0d      	cmp	r3, #13
 8007126:	d027      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b0f      	cmp	r3, #15
 800712e:	d023      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b05      	cmp	r3, #5
 8007136:	d01f      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b05      	cmp	r3, #5
 800713e:	d01b      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b05      	cmp	r3, #5
 8007146:	d017      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b08      	cmp	r3, #8
 800714e:	d013      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b08      	cmp	r3, #8
 8007156:	d00f      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b0c      	cmp	r3, #12
 800715e:	d00b      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b06      	cmp	r3, #6
 8007166:	d007      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b0e      	cmp	r3, #14
 800716e:	d003      	beq.n	8007178 <HAL_GPIO_Init+0x3f8>
 8007170:	21e0      	movs	r1, #224	; 0xe0
 8007172:	4814      	ldr	r0, [pc, #80]	; (80071c4 <HAL_GPIO_Init+0x444>)
 8007174:	f7fc f9d9 	bl	800352a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	08da      	lsrs	r2, r3, #3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3208      	adds	r2, #8
 8007180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	f003 0307 	and.w	r3, r3, #7
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	220f      	movs	r2, #15
 8007190:	fa02 f303 	lsl.w	r3, r2, r3
 8007194:	43db      	mvns	r3, r3
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	4013      	ands	r3, r2
 800719a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	691a      	ldr	r2, [r3, #16]
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	08da      	lsrs	r2, r3, #3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3208      	adds	r2, #8
 80071ba:	69b9      	ldr	r1, [r7, #24]
 80071bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80071c0:	e002      	b.n	80071c8 <HAL_GPIO_Init+0x448>
 80071c2:	bf00      	nop
 80071c4:	0800f9f4 	.word	0x0800f9f4
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	2203      	movs	r2, #3
 80071d4:	fa02 f303 	lsl.w	r3, r2, r3
 80071d8:	43db      	mvns	r3, r3
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	4013      	ands	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f003 0203 	and.w	r2, r3, #3
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	fa02 f303 	lsl.w	r3, r2, r3
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80c0 	beq.w	800738a <HAL_GPIO_Init+0x60a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	4b65      	ldr	r3, [pc, #404]	; (80073a4 <HAL_GPIO_Init+0x624>)
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	4a64      	ldr	r2, [pc, #400]	; (80073a4 <HAL_GPIO_Init+0x624>)
 8007214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007218:	6453      	str	r3, [r2, #68]	; 0x44
 800721a:	4b62      	ldr	r3, [pc, #392]	; (80073a4 <HAL_GPIO_Init+0x624>)
 800721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007226:	4a60      	ldr	r2, [pc, #384]	; (80073a8 <HAL_GPIO_Init+0x628>)
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	089b      	lsrs	r3, r3, #2
 800722c:	3302      	adds	r3, #2
 800722e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	220f      	movs	r2, #15
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	43db      	mvns	r3, r3
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	4013      	ands	r3, r2
 8007248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a57      	ldr	r2, [pc, #348]	; (80073ac <HAL_GPIO_Init+0x62c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d037      	beq.n	80072c2 <HAL_GPIO_Init+0x542>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a56      	ldr	r2, [pc, #344]	; (80073b0 <HAL_GPIO_Init+0x630>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d031      	beq.n	80072be <HAL_GPIO_Init+0x53e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a55      	ldr	r2, [pc, #340]	; (80073b4 <HAL_GPIO_Init+0x634>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d02b      	beq.n	80072ba <HAL_GPIO_Init+0x53a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a54      	ldr	r2, [pc, #336]	; (80073b8 <HAL_GPIO_Init+0x638>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d025      	beq.n	80072b6 <HAL_GPIO_Init+0x536>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a53      	ldr	r2, [pc, #332]	; (80073bc <HAL_GPIO_Init+0x63c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01f      	beq.n	80072b2 <HAL_GPIO_Init+0x532>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a52      	ldr	r2, [pc, #328]	; (80073c0 <HAL_GPIO_Init+0x640>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d019      	beq.n	80072ae <HAL_GPIO_Init+0x52e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a51      	ldr	r2, [pc, #324]	; (80073c4 <HAL_GPIO_Init+0x644>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <HAL_GPIO_Init+0x52a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a50      	ldr	r2, [pc, #320]	; (80073c8 <HAL_GPIO_Init+0x648>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00d      	beq.n	80072a6 <HAL_GPIO_Init+0x526>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a4f      	ldr	r2, [pc, #316]	; (80073cc <HAL_GPIO_Init+0x64c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d007      	beq.n	80072a2 <HAL_GPIO_Init+0x522>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a4e      	ldr	r2, [pc, #312]	; (80073d0 <HAL_GPIO_Init+0x650>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d101      	bne.n	800729e <HAL_GPIO_Init+0x51e>
 800729a:	2309      	movs	r3, #9
 800729c:	e012      	b.n	80072c4 <HAL_GPIO_Init+0x544>
 800729e:	230a      	movs	r3, #10
 80072a0:	e010      	b.n	80072c4 <HAL_GPIO_Init+0x544>
 80072a2:	2308      	movs	r3, #8
 80072a4:	e00e      	b.n	80072c4 <HAL_GPIO_Init+0x544>
 80072a6:	2307      	movs	r3, #7
 80072a8:	e00c      	b.n	80072c4 <HAL_GPIO_Init+0x544>
 80072aa:	2306      	movs	r3, #6
 80072ac:	e00a      	b.n	80072c4 <HAL_GPIO_Init+0x544>
 80072ae:	2305      	movs	r3, #5
 80072b0:	e008      	b.n	80072c4 <HAL_GPIO_Init+0x544>
 80072b2:	2304      	movs	r3, #4
 80072b4:	e006      	b.n	80072c4 <HAL_GPIO_Init+0x544>
 80072b6:	2303      	movs	r3, #3
 80072b8:	e004      	b.n	80072c4 <HAL_GPIO_Init+0x544>
 80072ba:	2302      	movs	r3, #2
 80072bc:	e002      	b.n	80072c4 <HAL_GPIO_Init+0x544>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <HAL_GPIO_Init+0x544>
 80072c2:	2300      	movs	r3, #0
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	f002 0203 	and.w	r2, r2, #3
 80072ca:	0092      	lsls	r2, r2, #2
 80072cc:	4093      	lsls	r3, r2
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072d4:	4934      	ldr	r1, [pc, #208]	; (80073a8 <HAL_GPIO_Init+0x628>)
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	089b      	lsrs	r3, r3, #2
 80072da:	3302      	adds	r3, #2
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072e2:	4b3c      	ldr	r3, [pc, #240]	; (80073d4 <HAL_GPIO_Init+0x654>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	43db      	mvns	r3, r3
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	4013      	ands	r3, r2
 80072f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_GPIO_Init+0x586>
        {
          temp |= iocurrent;
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007306:	4a33      	ldr	r2, [pc, #204]	; (80073d4 <HAL_GPIO_Init+0x654>)
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800730c:	4b31      	ldr	r3, [pc, #196]	; (80073d4 <HAL_GPIO_Init+0x654>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	43db      	mvns	r3, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	4013      	ands	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_GPIO_Init+0x5b0>
        {
          temp |= iocurrent;
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007330:	4a28      	ldr	r2, [pc, #160]	; (80073d4 <HAL_GPIO_Init+0x654>)
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007336:	4b27      	ldr	r3, [pc, #156]	; (80073d4 <HAL_GPIO_Init+0x654>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	43db      	mvns	r3, r3
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	4013      	ands	r3, r2
 8007344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_GPIO_Init+0x5da>
        {
          temp |= iocurrent;
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800735a:	4a1e      	ldr	r2, [pc, #120]	; (80073d4 <HAL_GPIO_Init+0x654>)
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007360:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <HAL_GPIO_Init+0x654>)
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	43db      	mvns	r3, r3
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	4013      	ands	r3, r2
 800736e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_GPIO_Init+0x604>
        {
          temp |= iocurrent;
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007384:	4a13      	ldr	r2, [pc, #76]	; (80073d4 <HAL_GPIO_Init+0x654>)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	3301      	adds	r3, #1
 800738e:	61fb      	str	r3, [r7, #28]
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	2b0f      	cmp	r3, #15
 8007394:	f67f adb0 	bls.w	8006ef8 <HAL_GPIO_Init+0x178>
      }
    }
  }
}
 8007398:	bf00      	nop
 800739a:	bf00      	nop
 800739c:	3720      	adds	r7, #32
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40023800 	.word	0x40023800
 80073a8:	40013800 	.word	0x40013800
 80073ac:	40020000 	.word	0x40020000
 80073b0:	40020400 	.word	0x40020400
 80073b4:	40020800 	.word	0x40020800
 80073b8:	40020c00 	.word	0x40020c00
 80073bc:	40021000 	.word	0x40021000
 80073c0:	40021400 	.word	0x40021400
 80073c4:	40021800 	.word	0x40021800
 80073c8:	40021c00 	.word	0x40021c00
 80073cc:	40022000 	.word	0x40022000
 80073d0:	40022400 	.word	0x40022400
 80073d4:	40013c00 	.word	0x40013c00

080073d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80073e4:	887b      	ldrh	r3, [r7, #2]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d004      	beq.n	80073f4 <HAL_GPIO_ReadPin+0x1c>
 80073ea:	887b      	ldrh	r3, [r7, #2]
 80073ec:	0c1b      	lsrs	r3, r3, #16
 80073ee:	041b      	lsls	r3, r3, #16
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <HAL_GPIO_ReadPin+0x26>
 80073f4:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80073f8:	4809      	ldr	r0, [pc, #36]	; (8007420 <HAL_GPIO_ReadPin+0x48>)
 80073fa:	f7fc f896 	bl	800352a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	887b      	ldrh	r3, [r7, #2]
 8007404:	4013      	ands	r3, r2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800740a:	2301      	movs	r3, #1
 800740c:	73fb      	strb	r3, [r7, #15]
 800740e:	e001      	b.n	8007414 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	0800f9f4 	.word	0x0800f9f4

08007424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	807b      	strh	r3, [r7, #2]
 8007430:	4613      	mov	r3, r2
 8007432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007434:	887b      	ldrh	r3, [r7, #2]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d004      	beq.n	8007444 <HAL_GPIO_WritePin+0x20>
 800743a:	887b      	ldrh	r3, [r7, #2]
 800743c:	0c1b      	lsrs	r3, r3, #16
 800743e:	041b      	lsls	r3, r3, #16
 8007440:	2b00      	cmp	r3, #0
 8007442:	d004      	beq.n	800744e <HAL_GPIO_WritePin+0x2a>
 8007444:	f240 119f 	movw	r1, #415	; 0x19f
 8007448:	480e      	ldr	r0, [pc, #56]	; (8007484 <HAL_GPIO_WritePin+0x60>)
 800744a:	f7fc f86e 	bl	800352a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800744e:	787b      	ldrb	r3, [r7, #1]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <HAL_GPIO_WritePin+0x40>
 8007454:	787b      	ldrb	r3, [r7, #1]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d004      	beq.n	8007464 <HAL_GPIO_WritePin+0x40>
 800745a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800745e:	4809      	ldr	r0, [pc, #36]	; (8007484 <HAL_GPIO_WritePin+0x60>)
 8007460:	f7fc f863 	bl	800352a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8007464:	787b      	ldrb	r3, [r7, #1]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800746a:	887a      	ldrh	r2, [r7, #2]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007470:	e003      	b.n	800747a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007472:	887b      	ldrh	r3, [r7, #2]
 8007474:	041a      	lsls	r2, r3, #16
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	619a      	str	r2, [r3, #24]
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	0800f9f4 	.word	0x0800f9f4

08007488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007492:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007494:	695a      	ldr	r2, [r3, #20]
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	4013      	ands	r3, r2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d006      	beq.n	80074ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800749e:	4a05      	ldr	r2, [pc, #20]	; (80074b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fb fb26 	bl	8002af8 <HAL_GPIO_EXTI_Callback>
  }
}
 80074ac:	bf00      	nop
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	40013c00 	.word	0x40013c00

080074b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e1be      	b.n	8007848 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a9f      	ldr	r2, [pc, #636]	; (800774c <HAL_I2C_Init+0x294>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00e      	beq.n	80074f2 <HAL_I2C_Init+0x3a>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a9d      	ldr	r2, [pc, #628]	; (8007750 <HAL_I2C_Init+0x298>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d009      	beq.n	80074f2 <HAL_I2C_Init+0x3a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a9c      	ldr	r2, [pc, #624]	; (8007754 <HAL_I2C_Init+0x29c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <HAL_I2C_Init+0x3a>
 80074e8:	f240 11bf 	movw	r1, #447	; 0x1bf
 80074ec:	489a      	ldr	r0, [pc, #616]	; (8007758 <HAL_I2C_Init+0x2a0>)
 80074ee:	f7fc f81c 	bl	800352a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <HAL_I2C_Init+0x4c>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	4a97      	ldr	r2, [pc, #604]	; (800775c <HAL_I2C_Init+0x2a4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d904      	bls.n	800750e <HAL_I2C_Init+0x56>
 8007504:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8007508:	4893      	ldr	r0, [pc, #588]	; (8007758 <HAL_I2C_Init+0x2a0>)
 800750a:	f7fc f80e 	bl	800352a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d009      	beq.n	800752a <HAL_I2C_Init+0x72>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800751e:	d004      	beq.n	800752a <HAL_I2C_Init+0x72>
 8007520:	f240 11c1 	movw	r1, #449	; 0x1c1
 8007524:	488c      	ldr	r0, [pc, #560]	; (8007758 <HAL_I2C_Init+0x2a0>)
 8007526:	f7fc f800 	bl	800352a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007532:	f023 0303 	bic.w	r3, r3, #3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d004      	beq.n	8007544 <HAL_I2C_Init+0x8c>
 800753a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800753e:	4886      	ldr	r0, [pc, #536]	; (8007758 <HAL_I2C_Init+0x2a0>)
 8007540:	f7fb fff3 	bl	800352a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800754c:	d009      	beq.n	8007562 <HAL_I2C_Init+0xaa>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007556:	d004      	beq.n	8007562 <HAL_I2C_Init+0xaa>
 8007558:	f240 11c3 	movw	r1, #451	; 0x1c3
 800755c:	487e      	ldr	r0, [pc, #504]	; (8007758 <HAL_I2C_Init+0x2a0>)
 800755e:	f7fb ffe4 	bl	800352a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d008      	beq.n	800757c <HAL_I2C_Init+0xc4>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d004      	beq.n	800757c <HAL_I2C_Init+0xc4>
 8007572:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8007576:	4878      	ldr	r0, [pc, #480]	; (8007758 <HAL_I2C_Init+0x2a0>)
 8007578:	f7fb ffd7 	bl	800352a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007584:	2b00      	cmp	r3, #0
 8007586:	d004      	beq.n	8007592 <HAL_I2C_Init+0xda>
 8007588:	f240 11c5 	movw	r1, #453	; 0x1c5
 800758c:	4872      	ldr	r0, [pc, #456]	; (8007758 <HAL_I2C_Init+0x2a0>)
 800758e:	f7fb ffcc 	bl	800352a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d008      	beq.n	80075ac <HAL_I2C_Init+0xf4>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	2b40      	cmp	r3, #64	; 0x40
 80075a0:	d004      	beq.n	80075ac <HAL_I2C_Init+0xf4>
 80075a2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80075a6:	486c      	ldr	r0, [pc, #432]	; (8007758 <HAL_I2C_Init+0x2a0>)
 80075a8:	f7fb ffbf 	bl	800352a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d008      	beq.n	80075c6 <HAL_I2C_Init+0x10e>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	2b80      	cmp	r3, #128	; 0x80
 80075ba:	d004      	beq.n	80075c6 <HAL_I2C_Init+0x10e>
 80075bc:	f240 11c7 	movw	r1, #455	; 0x1c7
 80075c0:	4865      	ldr	r0, [pc, #404]	; (8007758 <HAL_I2C_Init+0x2a0>)
 80075c2:	f7fb ffb2 	bl	800352a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7fa fd12 	bl	8002004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2224      	movs	r2, #36	; 0x24
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0201 	bic.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007618:	f001 fe70 	bl	80092fc <HAL_RCC_GetPCLK1Freq>
 800761c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	4a4f      	ldr	r2, [pc, #316]	; (8007760 <HAL_I2C_Init+0x2a8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d807      	bhi.n	8007638 <HAL_I2C_Init+0x180>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a4e      	ldr	r2, [pc, #312]	; (8007764 <HAL_I2C_Init+0x2ac>)
 800762c:	4293      	cmp	r3, r2
 800762e:	bf94      	ite	ls
 8007630:	2301      	movls	r3, #1
 8007632:	2300      	movhi	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	e006      	b.n	8007646 <HAL_I2C_Init+0x18e>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4a4b      	ldr	r2, [pc, #300]	; (8007768 <HAL_I2C_Init+0x2b0>)
 800763c:	4293      	cmp	r3, r2
 800763e:	bf94      	ite	ls
 8007640:	2301      	movls	r3, #1
 8007642:	2300      	movhi	r3, #0
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e0fc      	b.n	8007848 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4a46      	ldr	r2, [pc, #280]	; (800776c <HAL_I2C_Init+0x2b4>)
 8007652:	fba2 2303 	umull	r2, r3, r2, r3
 8007656:	0c9b      	lsrs	r3, r3, #18
 8007658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	430a      	orrs	r2, r1
 800766c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	4a38      	ldr	r2, [pc, #224]	; (8007760 <HAL_I2C_Init+0x2a8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d802      	bhi.n	8007688 <HAL_I2C_Init+0x1d0>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	3301      	adds	r3, #1
 8007686:	e009      	b.n	800769c <HAL_I2C_Init+0x1e4>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800768e:	fb02 f303 	mul.w	r3, r2, r3
 8007692:	4a37      	ldr	r2, [pc, #220]	; (8007770 <HAL_I2C_Init+0x2b8>)
 8007694:	fba2 2303 	umull	r2, r3, r2, r3
 8007698:	099b      	lsrs	r3, r3, #6
 800769a:	3301      	adds	r3, #1
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6812      	ldr	r2, [r2, #0]
 80076a0:	430b      	orrs	r3, r1
 80076a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80076ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	492a      	ldr	r1, [pc, #168]	; (8007760 <HAL_I2C_Init+0x2a8>)
 80076b8:	428b      	cmp	r3, r1
 80076ba:	d819      	bhi.n	80076f0 <HAL_I2C_Init+0x238>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	1e59      	subs	r1, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80076ca:	1c59      	adds	r1, r3, #1
 80076cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80076d0:	400b      	ands	r3, r1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <HAL_I2C_Init+0x234>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	1e59      	subs	r1, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80076e4:	3301      	adds	r3, #1
 80076e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ea:	e066      	b.n	80077ba <HAL_I2C_Init+0x302>
 80076ec:	2304      	movs	r3, #4
 80076ee:	e064      	b.n	80077ba <HAL_I2C_Init+0x302>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d111      	bne.n	800771c <HAL_I2C_Init+0x264>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	1e58      	subs	r0, r3, #1
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6859      	ldr	r1, [r3, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	440b      	add	r3, r1
 8007706:	fbb0 f3f3 	udiv	r3, r0, r3
 800770a:	3301      	adds	r3, #1
 800770c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007710:	2b00      	cmp	r3, #0
 8007712:	bf0c      	ite	eq
 8007714:	2301      	moveq	r3, #1
 8007716:	2300      	movne	r3, #0
 8007718:	b2db      	uxtb	r3, r3
 800771a:	e012      	b.n	8007742 <HAL_I2C_Init+0x28a>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	1e58      	subs	r0, r3, #1
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6859      	ldr	r1, [r3, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	0099      	lsls	r1, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007732:	3301      	adds	r3, #1
 8007734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007738:	2b00      	cmp	r3, #0
 800773a:	bf0c      	ite	eq
 800773c:	2301      	moveq	r3, #1
 800773e:	2300      	movne	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d016      	beq.n	8007774 <HAL_I2C_Init+0x2bc>
 8007746:	2301      	movs	r3, #1
 8007748:	e037      	b.n	80077ba <HAL_I2C_Init+0x302>
 800774a:	bf00      	nop
 800774c:	40005400 	.word	0x40005400
 8007750:	40005800 	.word	0x40005800
 8007754:	40005c00 	.word	0x40005c00
 8007758:	0800fa30 	.word	0x0800fa30
 800775c:	00061a80 	.word	0x00061a80
 8007760:	000186a0 	.word	0x000186a0
 8007764:	001e847f 	.word	0x001e847f
 8007768:	003d08ff 	.word	0x003d08ff
 800776c:	431bde83 	.word	0x431bde83
 8007770:	10624dd3 	.word	0x10624dd3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10e      	bne.n	800779a <HAL_I2C_Init+0x2e2>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	1e58      	subs	r0, r3, #1
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6859      	ldr	r1, [r3, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	440b      	add	r3, r1
 800778a:	fbb0 f3f3 	udiv	r3, r0, r3
 800778e:	3301      	adds	r3, #1
 8007790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007798:	e00f      	b.n	80077ba <HAL_I2C_Init+0x302>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1e58      	subs	r0, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6859      	ldr	r1, [r3, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	440b      	add	r3, r1
 80077a8:	0099      	lsls	r1, r3, #2
 80077aa:	440b      	add	r3, r1
 80077ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80077b0:	3301      	adds	r3, #1
 80077b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	6809      	ldr	r1, [r1, #0]
 80077be:	4313      	orrs	r3, r2
 80077c0:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80077e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6911      	ldr	r1, [r2, #16]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	68d2      	ldr	r2, [r2, #12]
 80077f4:	4311      	orrs	r1, r2
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	430b      	orrs	r3, r1
 80077fc:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	695a      	ldr	r2, [r3, #20]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0201 	orr.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2220      	movs	r2, #32
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af02      	add	r7, sp, #8
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	4608      	mov	r0, r1
 800785a:	4611      	mov	r1, r2
 800785c:	461a      	mov	r2, r3
 800785e:	4603      	mov	r3, r0
 8007860:	817b      	strh	r3, [r7, #10]
 8007862:	460b      	mov	r3, r1
 8007864:	813b      	strh	r3, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800786a:	f7fd fbb3 	bl	8004fd4 <HAL_GetTick>
 800786e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007870:	88fb      	ldrh	r3, [r7, #6]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d007      	beq.n	8007886 <HAL_I2C_Mem_Write+0x36>
 8007876:	88fb      	ldrh	r3, [r7, #6]
 8007878:	2b10      	cmp	r3, #16
 800787a:	d004      	beq.n	8007886 <HAL_I2C_Mem_Write+0x36>
 800787c:	f640 1175 	movw	r1, #2421	; 0x975
 8007880:	4873      	ldr	r0, [pc, #460]	; (8007a50 <HAL_I2C_Mem_Write+0x200>)
 8007882:	f7fb fe52 	bl	800352a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b20      	cmp	r3, #32
 8007890:	f040 80d9 	bne.w	8007a46 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	2319      	movs	r3, #25
 800789a:	2201      	movs	r2, #1
 800789c:	496d      	ldr	r1, [pc, #436]	; (8007a54 <HAL_I2C_Mem_Write+0x204>)
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 fc8c 	bl	80081bc <I2C_WaitOnFlagUntilTimeout>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 80078aa:	2302      	movs	r3, #2
 80078ac:	e0cc      	b.n	8007a48 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_I2C_Mem_Write+0x6c>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e0c5      	b.n	8007a48 <HAL_I2C_Mem_Write+0x1f8>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d007      	beq.n	80078e2 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f042 0201 	orr.w	r2, r2, #1
 80078e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078f0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2221      	movs	r2, #33	; 0x21
 80078f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2240      	movs	r2, #64	; 0x40
 80078fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a3a      	ldr	r2, [r7, #32]
 800790c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007912:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007918:	b29a      	uxth	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4a4d      	ldr	r2, [pc, #308]	; (8007a58 <HAL_I2C_Mem_Write+0x208>)
 8007922:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007924:	88f8      	ldrh	r0, [r7, #6]
 8007926:	893a      	ldrh	r2, [r7, #8]
 8007928:	8979      	ldrh	r1, [r7, #10]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	4603      	mov	r3, r0
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fac3 	bl	8007ec0 <I2C_RequestMemoryWrite>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d052      	beq.n	80079e6 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e081      	b.n	8007a48 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 fd0d 	bl	8008368 <I2C_WaitOnTXEFlagUntilTimeout>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00d      	beq.n	8007970 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	2b04      	cmp	r3, #4
 800795a:	d107      	bne.n	800796c <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e06b      	b.n	8007a48 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	781a      	ldrb	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798a:	3b01      	subs	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d11b      	bne.n	80079e6 <HAL_I2C_Mem_Write+0x196>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d017      	beq.n	80079e6 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	781a      	ldrb	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1aa      	bne.n	8007944 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fcf9 	bl	80083ea <I2C_WaitOnBTFFlagUntilTimeout>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00d      	beq.n	8007a1a <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d107      	bne.n	8007a16 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e016      	b.n	8007a48 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	e000      	b.n	8007a48 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8007a46:	2302      	movs	r3, #2
  }
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3718      	adds	r7, #24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	0800fa30 	.word	0x0800fa30
 8007a54:	00100002 	.word	0x00100002
 8007a58:	ffff0000 	.word	0xffff0000

08007a5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08c      	sub	sp, #48	; 0x30
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	817b      	strh	r3, [r7, #10]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	813b      	strh	r3, [r7, #8]
 8007a72:	4613      	mov	r3, r2
 8007a74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a76:	f7fd faad 	bl	8004fd4 <HAL_GetTick>
 8007a7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007a7c:	88fb      	ldrh	r3, [r7, #6]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d007      	beq.n	8007a92 <HAL_I2C_Mem_Read+0x36>
 8007a82:	88fb      	ldrh	r3, [r7, #6]
 8007a84:	2b10      	cmp	r3, #16
 8007a86:	d004      	beq.n	8007a92 <HAL_I2C_Mem_Read+0x36>
 8007a88:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8007a8c:	4881      	ldr	r0, [pc, #516]	; (8007c94 <HAL_I2C_Mem_Read+0x238>)
 8007a8e:	f7fb fd4c 	bl	800352a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	f040 8209 	bne.w	8007eb2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	2319      	movs	r3, #25
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	497b      	ldr	r1, [pc, #492]	; (8007c98 <HAL_I2C_Mem_Read+0x23c>)
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 fb86 	bl	80081bc <I2C_WaitOnFlagUntilTimeout>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e1fc      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_I2C_Mem_Read+0x6c>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e1f5      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x458>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d007      	beq.n	8007aee <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0201 	orr.w	r2, r2, #1
 8007aec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007afc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2222      	movs	r2, #34	; 0x22
 8007b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2240      	movs	r2, #64	; 0x40
 8007b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4a5b      	ldr	r2, [pc, #364]	; (8007c9c <HAL_I2C_Mem_Read+0x240>)
 8007b2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b30:	88f8      	ldrh	r0, [r7, #6]
 8007b32:	893a      	ldrh	r2, [r7, #8]
 8007b34:	8979      	ldrh	r1, [r7, #10]
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	4603      	mov	r3, r0
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fa53 	bl	8007fec <I2C_RequestMemoryRead>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e1b1      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d113      	bne.n	8007b80 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b58:	2300      	movs	r3, #0
 8007b5a:	623b      	str	r3, [r7, #32]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	623b      	str	r3, [r7, #32]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	623b      	str	r3, [r7, #32]
 8007b6c:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e185      	b.n	8007e8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d11b      	bne.n	8007bc0 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b96:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b98:	2300      	movs	r3, #0
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	61fb      	str	r3, [r7, #28]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	e165      	b.n	8007e8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d11b      	bne.n	8007c00 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd6:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007be6:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007be8:	2300      	movs	r3, #0
 8007bea:	61bb      	str	r3, [r7, #24]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	61bb      	str	r3, [r7, #24]
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	e145      	b.n	8007e8c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c00:	2300      	movs	r3, #0
 8007c02:	617b      	str	r3, [r7, #20]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c16:	e139      	b.n	8007e8c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	f200 80f2 	bhi.w	8007e06 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d123      	bne.n	8007c72 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 fc1c 	bl	800846c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e13a      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	691a      	ldr	r2, [r3, #16]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	b2d2      	uxtb	r2, r2
 8007c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c70:	e10c      	b.n	8007e8c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d14f      	bne.n	8007d1a <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c80:	2200      	movs	r2, #0
 8007c82:	4907      	ldr	r1, [pc, #28]	; (8007ca0 <HAL_I2C_Mem_Read+0x244>)
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fa99 	bl	80081bc <I2C_WaitOnFlagUntilTimeout>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d009      	beq.n	8007ca4 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e10f      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x458>
 8007c94:	0800fa30 	.word	0x0800fa30
 8007c98:	00100002 	.word	0x00100002
 8007c9c:	ffff0000 	.word	0xffff0000
 8007ca0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691a      	ldr	r2, [r3, #16]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	b2d2      	uxtb	r2, r2
 8007cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d02:	3b01      	subs	r3, #1
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d18:	e0b8      	b.n	8007e8c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d20:	2200      	movs	r2, #0
 8007d22:	4966      	ldr	r1, [pc, #408]	; (8007ebc <HAL_I2C_Mem_Read+0x460>)
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 fa49 	bl	80081bc <I2C_WaitOnFlagUntilTimeout>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e0bf      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	691a      	ldr	r2, [r3, #16]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	494f      	ldr	r1, [pc, #316]	; (8007ebc <HAL_I2C_Mem_Read+0x460>)
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 fa1b 	bl	80081bc <I2C_WaitOnFlagUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e091      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e04:	e042      	b.n	8007e8c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 fb2e 	bl	800846c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e04c      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	691a      	ldr	r2, [r3, #16]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d118      	bne.n	8007e8c <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691a      	ldr	r2, [r3, #16]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f47f aec1 	bne.w	8007c18 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e000      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007eb2:	2302      	movs	r3, #2
  }
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3728      	adds	r7, #40	; 0x28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	00010004 	.word	0x00010004

08007ec0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	4608      	mov	r0, r1
 8007eca:	4611      	mov	r1, r2
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4603      	mov	r3, r0
 8007ed0:	817b      	strh	r3, [r7, #10]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	813b      	strh	r3, [r7, #8]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ee8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 f960 	bl	80081bc <I2C_WaitOnFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00d      	beq.n	8007f1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f10:	d103      	bne.n	8007f1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e05f      	b.n	8007fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f1e:	897b      	ldrh	r3, [r7, #10]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	461a      	mov	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	6a3a      	ldr	r2, [r7, #32]
 8007f32:	492d      	ldr	r1, [pc, #180]	; (8007fe8 <I2C_RequestMemoryWrite+0x128>)
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f998 	bl	800826a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e04c      	b.n	8007fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f44:	2300      	movs	r3, #0
 8007f46:	617b      	str	r3, [r7, #20]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5c:	6a39      	ldr	r1, [r7, #32]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 fa02 	bl	8008368 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00d      	beq.n	8007f86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d107      	bne.n	8007f82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e02b      	b.n	8007fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f86:	88fb      	ldrh	r3, [r7, #6]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d105      	bne.n	8007f98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f8c:	893b      	ldrh	r3, [r7, #8]
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	611a      	str	r2, [r3, #16]
 8007f96:	e021      	b.n	8007fdc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f98:	893b      	ldrh	r3, [r7, #8]
 8007f9a:	0a1b      	lsrs	r3, r3, #8
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa8:	6a39      	ldr	r1, [r7, #32]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 f9dc 	bl	8008368 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00d      	beq.n	8007fd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d107      	bne.n	8007fce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e005      	b.n	8007fde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fd2:	893b      	ldrh	r3, [r7, #8]
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	00010002 	.word	0x00010002

08007fec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af02      	add	r7, sp, #8
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	4608      	mov	r0, r1
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	817b      	strh	r3, [r7, #10]
 8007ffe:	460b      	mov	r3, r1
 8008000:	813b      	strh	r3, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008014:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008024:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	2200      	movs	r2, #0
 800802e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f8c2 	bl	80081bc <I2C_WaitOnFlagUntilTimeout>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00d      	beq.n	800805a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804c:	d103      	bne.n	8008056 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008054:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e0aa      	b.n	80081b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800805a:	897b      	ldrh	r3, [r7, #10]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	461a      	mov	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008068:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	6a3a      	ldr	r2, [r7, #32]
 800806e:	4952      	ldr	r1, [pc, #328]	; (80081b8 <I2C_RequestMemoryRead+0x1cc>)
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f000 f8fa 	bl	800826a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e097      	b.n	80081b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008080:	2300      	movs	r3, #0
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008098:	6a39      	ldr	r1, [r7, #32]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f964 	bl	8008368 <I2C_WaitOnTXEFlagUntilTimeout>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00d      	beq.n	80080c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d107      	bne.n	80080be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e076      	b.n	80081b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080c2:	88fb      	ldrh	r3, [r7, #6]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d105      	bne.n	80080d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080c8:	893b      	ldrh	r3, [r7, #8]
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	611a      	str	r2, [r3, #16]
 80080d2:	e021      	b.n	8008118 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080d4:	893b      	ldrh	r3, [r7, #8]
 80080d6:	0a1b      	lsrs	r3, r3, #8
 80080d8:	b29b      	uxth	r3, r3
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e4:	6a39      	ldr	r1, [r7, #32]
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f93e 	bl	8008368 <I2C_WaitOnTXEFlagUntilTimeout>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00d      	beq.n	800810e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d107      	bne.n	800810a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008108:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e050      	b.n	80081b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800810e:	893b      	ldrh	r3, [r7, #8]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811a:	6a39      	ldr	r1, [r7, #32]
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 f923 	bl	8008368 <I2C_WaitOnTXEFlagUntilTimeout>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00d      	beq.n	8008144 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812c:	2b04      	cmp	r3, #4
 800812e:	d107      	bne.n	8008140 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800813e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e035      	b.n	80081b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008152:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	2200      	movs	r2, #0
 800815c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 f82b 	bl	80081bc <I2C_WaitOnFlagUntilTimeout>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00d      	beq.n	8008188 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817a:	d103      	bne.n	8008184 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e013      	b.n	80081b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008188:	897b      	ldrh	r3, [r7, #10]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	f043 0301 	orr.w	r3, r3, #1
 8008190:	b2da      	uxtb	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	6a3a      	ldr	r2, [r7, #32]
 800819c:	4906      	ldr	r1, [pc, #24]	; (80081b8 <I2C_RequestMemoryRead+0x1cc>)
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 f863 	bl	800826a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e000      	b.n	80081b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	00010002 	.word	0x00010002

080081bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	4613      	mov	r3, r2
 80081ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081cc:	e025      	b.n	800821a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d4:	d021      	beq.n	800821a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d6:	f7fc fefd 	bl	8004fd4 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d302      	bcc.n	80081ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d116      	bne.n	800821a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	f043 0220 	orr.w	r2, r3, #32
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e023      	b.n	8008262 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	0c1b      	lsrs	r3, r3, #16
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b01      	cmp	r3, #1
 8008222:	d10d      	bne.n	8008240 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	43da      	mvns	r2, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4013      	ands	r3, r2
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	bf0c      	ite	eq
 8008236:	2301      	moveq	r3, #1
 8008238:	2300      	movne	r3, #0
 800823a:	b2db      	uxtb	r3, r3
 800823c:	461a      	mov	r2, r3
 800823e:	e00c      	b.n	800825a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	43da      	mvns	r2, r3
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	4013      	ands	r3, r2
 800824c:	b29b      	uxth	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	bf0c      	ite	eq
 8008252:	2301      	moveq	r3, #1
 8008254:	2300      	movne	r3, #0
 8008256:	b2db      	uxtb	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	429a      	cmp	r2, r3
 800825e:	d0b6      	beq.n	80081ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	607a      	str	r2, [r7, #4]
 8008276:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008278:	e051      	b.n	800831e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008288:	d123      	bne.n	80082d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008298:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	f043 0204 	orr.w	r2, r3, #4
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e046      	b.n	8008360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082d8:	d021      	beq.n	800831e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082da:	f7fc fe7b 	bl	8004fd4 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d302      	bcc.n	80082f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d116      	bne.n	800831e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830a:	f043 0220 	orr.w	r2, r3, #32
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e020      	b.n	8008360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	0c1b      	lsrs	r3, r3, #16
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b01      	cmp	r3, #1
 8008326:	d10c      	bne.n	8008342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	43da      	mvns	r2, r3
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4013      	ands	r3, r2
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	bf14      	ite	ne
 800833a:	2301      	movne	r3, #1
 800833c:	2300      	moveq	r3, #0
 800833e:	b2db      	uxtb	r3, r3
 8008340:	e00b      	b.n	800835a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	43da      	mvns	r2, r3
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	4013      	ands	r3, r2
 800834e:	b29b      	uxth	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	bf14      	ite	ne
 8008354:	2301      	movne	r3, #1
 8008356:	2300      	moveq	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d18d      	bne.n	800827a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008374:	e02d      	b.n	80083d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 f8ce 	bl	8008518 <I2C_IsAcknowledgeFailed>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e02d      	b.n	80083e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800838c:	d021      	beq.n	80083d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800838e:	f7fc fe21 	bl	8004fd4 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	429a      	cmp	r2, r3
 800839c:	d302      	bcc.n	80083a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d116      	bne.n	80083d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	f043 0220 	orr.w	r2, r3, #32
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e007      	b.n	80083e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083dc:	2b80      	cmp	r3, #128	; 0x80
 80083de:	d1ca      	bne.n	8008376 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083f6:	e02d      	b.n	8008454 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 f88d 	bl	8008518 <I2C_IsAcknowledgeFailed>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e02d      	b.n	8008464 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800840e:	d021      	beq.n	8008454 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008410:	f7fc fde0 	bl	8004fd4 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	429a      	cmp	r2, r3
 800841e:	d302      	bcc.n	8008426 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d116      	bne.n	8008454 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	f043 0220 	orr.w	r2, r3, #32
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e007      	b.n	8008464 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b04      	cmp	r3, #4
 8008460:	d1ca      	bne.n	80083f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008478:	e042      	b.n	8008500 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	f003 0310 	and.w	r3, r3, #16
 8008484:	2b10      	cmp	r3, #16
 8008486:	d119      	bne.n	80084bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f06f 0210 	mvn.w	r2, #16
 8008490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e029      	b.n	8008510 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084bc:	f7fc fd8a 	bl	8004fd4 <HAL_GetTick>
 80084c0:	4602      	mov	r2, r0
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d302      	bcc.n	80084d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d116      	bne.n	8008500 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	f043 0220 	orr.w	r2, r3, #32
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e007      	b.n	8008510 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850a:	2b40      	cmp	r3, #64	; 0x40
 800850c:	d1b5      	bne.n	800847a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800852a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800852e:	d11b      	bne.n	8008568 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008538:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2220      	movs	r2, #32
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	f043 0204 	orr.w	r2, r3, #4
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
	...

08008578 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a28      	ldr	r2, [pc, #160]	; (8008628 <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d00d      	beq.n	80085a8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a26      	ldr	r2, [pc, #152]	; (800862c <HAL_I2CEx_ConfigAnalogFilter+0xb4>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d008      	beq.n	80085a8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a25      	ldr	r2, [pc, #148]	; (8008630 <HAL_I2CEx_ConfigAnalogFilter+0xb8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d003      	beq.n	80085a8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80085a0:	215c      	movs	r1, #92	; 0x5c
 80085a2:	4824      	ldr	r0, [pc, #144]	; (8008634 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 80085a4:	f7fa ffc1 	bl	800352a <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d006      	beq.n	80085bc <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b10      	cmp	r3, #16
 80085b2:	d003      	beq.n	80085bc <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80085b4:	215d      	movs	r1, #93	; 0x5d
 80085b6:	481f      	ldr	r0, [pc, #124]	; (8008634 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 80085b8:	f7fa ffb7 	bl	800352a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b20      	cmp	r3, #32
 80085c6:	d129      	bne.n	800861c <HAL_I2CEx_ConfigAnalogFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2224      	movs	r2, #36	; 0x24
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0201 	bic.w	r2, r2, #1
 80085de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0210 	bic.w	r2, r2, #16
 80085ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0201 	orr.w	r2, r2, #1
 800860e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2220      	movs	r2, #32
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	e000      	b.n	800861e <HAL_I2CEx_ConfigAnalogFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800861c:	2302      	movs	r3, #2
  }
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	40005400 	.word	0x40005400
 800862c:	40005800 	.word	0x40005800
 8008630:	40005c00 	.word	0x40005c00
 8008634:	0800fa68 	.word	0x0800fa68

08008638 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a27      	ldr	r2, [pc, #156]	; (80086e8 <HAL_I2CEx_ConfigDigitalFilter+0xb0>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00d      	beq.n	800866c <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a25      	ldr	r2, [pc, #148]	; (80086ec <HAL_I2CEx_ConfigDigitalFilter+0xb4>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d008      	beq.n	800866c <HAL_I2CEx_ConfigDigitalFilter+0x34>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a24      	ldr	r2, [pc, #144]	; (80086f0 <HAL_I2CEx_ConfigDigitalFilter+0xb8>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d003      	beq.n	800866c <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8008664:	2184      	movs	r1, #132	; 0x84
 8008666:	4823      	ldr	r0, [pc, #140]	; (80086f4 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 8008668:	f7fa ff5f 	bl	800352a <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b0f      	cmp	r3, #15
 8008670:	d903      	bls.n	800867a <HAL_I2CEx_ConfigDigitalFilter+0x42>
 8008672:	2185      	movs	r1, #133	; 0x85
 8008674:	481f      	ldr	r0, [pc, #124]	; (80086f4 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 8008676:	f7fa ff58 	bl	800352a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b20      	cmp	r3, #32
 8008684:	d12a      	bne.n	80086dc <HAL_I2CEx_ConfigDigitalFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2224      	movs	r2, #36	; 0x24
 800868a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0201 	bic.w	r2, r2, #1
 800869c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80086a6:	89fb      	ldrh	r3, [r7, #14]
 80086a8:	f023 030f 	bic.w	r3, r3, #15
 80086ac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	89fb      	ldrh	r3, [r7, #14]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	89fa      	ldrh	r2, [r7, #14]
 80086be:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0201 	orr.w	r2, r2, #1
 80086ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	e000      	b.n	80086de <HAL_I2CEx_ConfigDigitalFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80086dc:	2302      	movs	r3, #2
  }
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	40005400 	.word	0x40005400
 80086ec:	40005800 	.word	0x40005800
 80086f0:	40005c00 	.word	0x40005c00
 80086f4:	0800fa68 	.word	0x0800fa68

080086f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008702:	2300      	movs	r3, #0
 8008704:	603b      	str	r3, [r7, #0]
 8008706:	4b20      	ldr	r3, [pc, #128]	; (8008788 <HAL_PWREx_EnableOverDrive+0x90>)
 8008708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870a:	4a1f      	ldr	r2, [pc, #124]	; (8008788 <HAL_PWREx_EnableOverDrive+0x90>)
 800870c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008710:	6413      	str	r3, [r2, #64]	; 0x40
 8008712:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <HAL_PWREx_EnableOverDrive+0x90>)
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800871e:	4b1b      	ldr	r3, [pc, #108]	; (800878c <HAL_PWREx_EnableOverDrive+0x94>)
 8008720:	2201      	movs	r2, #1
 8008722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008724:	f7fc fc56 	bl	8004fd4 <HAL_GetTick>
 8008728:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800872a:	e009      	b.n	8008740 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800872c:	f7fc fc52 	bl	8004fd4 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800873a:	d901      	bls.n	8008740 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e01f      	b.n	8008780 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008740:	4b13      	ldr	r3, [pc, #76]	; (8008790 <HAL_PWREx_EnableOverDrive+0x98>)
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800874c:	d1ee      	bne.n	800872c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800874e:	4b11      	ldr	r3, [pc, #68]	; (8008794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008750:	2201      	movs	r2, #1
 8008752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008754:	f7fc fc3e 	bl	8004fd4 <HAL_GetTick>
 8008758:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800875a:	e009      	b.n	8008770 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800875c:	f7fc fc3a 	bl	8004fd4 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800876a:	d901      	bls.n	8008770 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e007      	b.n	8008780 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <HAL_PWREx_EnableOverDrive+0x98>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800877c:	d1ee      	bne.n	800875c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40023800 	.word	0x40023800
 800878c:	420e0040 	.word	0x420e0040
 8008790:	40007000 	.word	0x40007000
 8008794:	420e0044 	.word	0x420e0044

08008798 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e30d      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b0f      	cmp	r3, #15
 80087b0:	d903      	bls.n	80087ba <HAL_RCC_OscConfig+0x22>
 80087b2:	21e8      	movs	r1, #232	; 0xe8
 80087b4:	48a3      	ldr	r0, [pc, #652]	; (8008a44 <HAL_RCC_OscConfig+0x2ac>)
 80087b6:	f7fa feb8 	bl	800352a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 8088 	beq.w	80088d8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00d      	beq.n	80087ec <HAL_RCC_OscConfig+0x54>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d8:	d008      	beq.n	80087ec <HAL_RCC_OscConfig+0x54>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087e2:	d003      	beq.n	80087ec <HAL_RCC_OscConfig+0x54>
 80087e4:	21ed      	movs	r1, #237	; 0xed
 80087e6:	4897      	ldr	r0, [pc, #604]	; (8008a44 <HAL_RCC_OscConfig+0x2ac>)
 80087e8:	f7fa fe9f 	bl	800352a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087ec:	4b96      	ldr	r3, [pc, #600]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f003 030c 	and.w	r3, r3, #12
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	d00c      	beq.n	8008812 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087f8:	4b93      	ldr	r3, [pc, #588]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008800:	2b08      	cmp	r3, #8
 8008802:	d112      	bne.n	800882a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008804:	4b90      	ldr	r3, [pc, #576]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800880c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008810:	d10b      	bne.n	800882a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008812:	4b8d      	ldr	r3, [pc, #564]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d05b      	beq.n	80088d6 <HAL_RCC_OscConfig+0x13e>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d157      	bne.n	80088d6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e2cd      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008832:	d106      	bne.n	8008842 <HAL_RCC_OscConfig+0xaa>
 8008834:	4b84      	ldr	r3, [pc, #528]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a83      	ldr	r2, [pc, #524]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 800883a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	e01d      	b.n	800887e <HAL_RCC_OscConfig+0xe6>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800884a:	d10c      	bne.n	8008866 <HAL_RCC_OscConfig+0xce>
 800884c:	4b7e      	ldr	r3, [pc, #504]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a7d      	ldr	r2, [pc, #500]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 8008852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	4b7b      	ldr	r3, [pc, #492]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a7a      	ldr	r2, [pc, #488]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 800885e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	e00b      	b.n	800887e <HAL_RCC_OscConfig+0xe6>
 8008866:	4b78      	ldr	r3, [pc, #480]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a77      	ldr	r2, [pc, #476]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 800886c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	4b75      	ldr	r3, [pc, #468]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a74      	ldr	r2, [pc, #464]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 8008878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800887c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d013      	beq.n	80088ae <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008886:	f7fc fba5 	bl	8004fd4 <HAL_GetTick>
 800888a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800888c:	e008      	b.n	80088a0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800888e:	f7fc fba1 	bl	8004fd4 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	2b64      	cmp	r3, #100	; 0x64
 800889a:	d901      	bls.n	80088a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e292      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088a0:	4b69      	ldr	r3, [pc, #420]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d0f0      	beq.n	800888e <HAL_RCC_OscConfig+0xf6>
 80088ac:	e014      	b.n	80088d8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088ae:	f7fc fb91 	bl	8004fd4 <HAL_GetTick>
 80088b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088b4:	e008      	b.n	80088c8 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088b6:	f7fc fb8d 	bl	8004fd4 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b64      	cmp	r3, #100	; 0x64
 80088c2:	d901      	bls.n	80088c8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e27e      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088c8:	4b5f      	ldr	r3, [pc, #380]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1f0      	bne.n	80088b6 <HAL_RCC_OscConfig+0x11e>
 80088d4:	e000      	b.n	80088d8 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0302 	and.w	r3, r3, #2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d079      	beq.n	80089d8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d008      	beq.n	80088fe <HAL_RCC_OscConfig+0x166>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d004      	beq.n	80088fe <HAL_RCC_OscConfig+0x166>
 80088f4:	f240 111f 	movw	r1, #287	; 0x11f
 80088f8:	4852      	ldr	r0, [pc, #328]	; (8008a44 <HAL_RCC_OscConfig+0x2ac>)
 80088fa:	f7fa fe16 	bl	800352a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b1f      	cmp	r3, #31
 8008904:	d904      	bls.n	8008910 <HAL_RCC_OscConfig+0x178>
 8008906:	f44f 7190 	mov.w	r1, #288	; 0x120
 800890a:	484e      	ldr	r0, [pc, #312]	; (8008a44 <HAL_RCC_OscConfig+0x2ac>)
 800890c:	f7fa fe0d 	bl	800352a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008910:	4b4d      	ldr	r3, [pc, #308]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f003 030c 	and.w	r3, r3, #12
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00b      	beq.n	8008934 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800891c:	4b4a      	ldr	r3, [pc, #296]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008924:	2b08      	cmp	r3, #8
 8008926:	d11c      	bne.n	8008962 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008928:	4b47      	ldr	r3, [pc, #284]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d116      	bne.n	8008962 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008934:	4b44      	ldr	r3, [pc, #272]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0302 	and.w	r3, r3, #2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d005      	beq.n	800894c <HAL_RCC_OscConfig+0x1b4>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d001      	beq.n	800894c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e23c      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800894c:	4b3e      	ldr	r3, [pc, #248]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	00db      	lsls	r3, r3, #3
 800895a:	493b      	ldr	r1, [pc, #236]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 800895c:	4313      	orrs	r3, r2
 800895e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008960:	e03a      	b.n	80089d8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d020      	beq.n	80089ac <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800896a:	4b38      	ldr	r3, [pc, #224]	; (8008a4c <HAL_RCC_OscConfig+0x2b4>)
 800896c:	2201      	movs	r2, #1
 800896e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008970:	f7fc fb30 	bl	8004fd4 <HAL_GetTick>
 8008974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008976:	e008      	b.n	800898a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008978:	f7fc fb2c 	bl	8004fd4 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b02      	cmp	r3, #2
 8008984:	d901      	bls.n	800898a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e21d      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800898a:	4b2f      	ldr	r3, [pc, #188]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0f0      	beq.n	8008978 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008996:	4b2c      	ldr	r3, [pc, #176]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	4928      	ldr	r1, [pc, #160]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	600b      	str	r3, [r1, #0]
 80089aa:	e015      	b.n	80089d8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089ac:	4b27      	ldr	r3, [pc, #156]	; (8008a4c <HAL_RCC_OscConfig+0x2b4>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b2:	f7fc fb0f 	bl	8004fd4 <HAL_GetTick>
 80089b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089b8:	e008      	b.n	80089cc <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089ba:	f7fc fb0b 	bl	8004fd4 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d901      	bls.n	80089cc <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e1fc      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089cc:	4b1e      	ldr	r3, [pc, #120]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1f0      	bne.n	80089ba <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d046      	beq.n	8008a72 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d008      	beq.n	80089fe <HAL_RCC_OscConfig+0x266>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d004      	beq.n	80089fe <HAL_RCC_OscConfig+0x266>
 80089f4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80089f8:	4812      	ldr	r0, [pc, #72]	; (8008a44 <HAL_RCC_OscConfig+0x2ac>)
 80089fa:	f7fa fd96 	bl	800352a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d016      	beq.n	8008a34 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a06:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <HAL_RCC_OscConfig+0x2b8>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a0c:	f7fc fae2 	bl	8004fd4 <HAL_GetTick>
 8008a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a14:	f7fc fade 	bl	8004fd4 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e1cf      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a26:	4b08      	ldr	r3, [pc, #32]	; (8008a48 <HAL_RCC_OscConfig+0x2b0>)
 8008a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0f0      	beq.n	8008a14 <HAL_RCC_OscConfig+0x27c>
 8008a32:	e01e      	b.n	8008a72 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a34:	4b06      	ldr	r3, [pc, #24]	; (8008a50 <HAL_RCC_OscConfig+0x2b8>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a3a:	f7fc facb 	bl	8004fd4 <HAL_GetTick>
 8008a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a40:	e011      	b.n	8008a66 <HAL_RCC_OscConfig+0x2ce>
 8008a42:	bf00      	nop
 8008a44:	0800faa4 	.word	0x0800faa4
 8008a48:	40023800 	.word	0x40023800
 8008a4c:	42470000 	.word	0x42470000
 8008a50:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a54:	f7fc fabe 	bl	8004fd4 <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e1af      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a66:	4b97      	ldr	r3, [pc, #604]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1f0      	bne.n	8008a54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 80a8 	beq.w	8008bd0 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a80:	2300      	movs	r3, #0
 8008a82:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00c      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x30e>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d008      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x30e>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	2b05      	cmp	r3, #5
 8008a9a:	d004      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x30e>
 8008a9c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8008aa0:	4889      	ldr	r0, [pc, #548]	; (8008cc8 <HAL_RCC_OscConfig+0x530>)
 8008aa2:	f7fa fd42 	bl	800352a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008aa6:	4b87      	ldr	r3, [pc, #540]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10f      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60bb      	str	r3, [r7, #8]
 8008ab6:	4b83      	ldr	r3, [pc, #524]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aba:	4a82      	ldr	r2, [pc, #520]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ac2:	4b80      	ldr	r3, [pc, #512]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aca:	60bb      	str	r3, [r7, #8]
 8008acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ad2:	4b7e      	ldr	r3, [pc, #504]	; (8008ccc <HAL_RCC_OscConfig+0x534>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d118      	bne.n	8008b10 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ade:	4b7b      	ldr	r3, [pc, #492]	; (8008ccc <HAL_RCC_OscConfig+0x534>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a7a      	ldr	r2, [pc, #488]	; (8008ccc <HAL_RCC_OscConfig+0x534>)
 8008ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008aea:	f7fc fa73 	bl	8004fd4 <HAL_GetTick>
 8008aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008af0:	e008      	b.n	8008b04 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008af2:	f7fc fa6f 	bl	8004fd4 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d901      	bls.n	8008b04 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e160      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b04:	4b71      	ldr	r3, [pc, #452]	; (8008ccc <HAL_RCC_OscConfig+0x534>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0f0      	beq.n	8008af2 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d106      	bne.n	8008b26 <HAL_RCC_OscConfig+0x38e>
 8008b18:	4b6a      	ldr	r3, [pc, #424]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1c:	4a69      	ldr	r2, [pc, #420]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	6713      	str	r3, [r2, #112]	; 0x70
 8008b24:	e01c      	b.n	8008b60 <HAL_RCC_OscConfig+0x3c8>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	2b05      	cmp	r3, #5
 8008b2c:	d10c      	bne.n	8008b48 <HAL_RCC_OscConfig+0x3b0>
 8008b2e:	4b65      	ldr	r3, [pc, #404]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b32:	4a64      	ldr	r2, [pc, #400]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008b34:	f043 0304 	orr.w	r3, r3, #4
 8008b38:	6713      	str	r3, [r2, #112]	; 0x70
 8008b3a:	4b62      	ldr	r3, [pc, #392]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3e:	4a61      	ldr	r2, [pc, #388]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008b40:	f043 0301 	orr.w	r3, r3, #1
 8008b44:	6713      	str	r3, [r2, #112]	; 0x70
 8008b46:	e00b      	b.n	8008b60 <HAL_RCC_OscConfig+0x3c8>
 8008b48:	4b5e      	ldr	r3, [pc, #376]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4c:	4a5d      	ldr	r2, [pc, #372]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008b4e:	f023 0301 	bic.w	r3, r3, #1
 8008b52:	6713      	str	r3, [r2, #112]	; 0x70
 8008b54:	4b5b      	ldr	r3, [pc, #364]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b58:	4a5a      	ldr	r2, [pc, #360]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008b5a:	f023 0304 	bic.w	r3, r3, #4
 8008b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d015      	beq.n	8008b94 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b68:	f7fc fa34 	bl	8004fd4 <HAL_GetTick>
 8008b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b6e:	e00a      	b.n	8008b86 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b70:	f7fc fa30 	bl	8004fd4 <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e11f      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b86:	4b4f      	ldr	r3, [pc, #316]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d0ee      	beq.n	8008b70 <HAL_RCC_OscConfig+0x3d8>
 8008b92:	e014      	b.n	8008bbe <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b94:	f7fc fa1e 	bl	8004fd4 <HAL_GetTick>
 8008b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b9a:	e00a      	b.n	8008bb2 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b9c:	f7fc fa1a 	bl	8004fd4 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e109      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bb2:	4b44      	ldr	r3, [pc, #272]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1ee      	bne.n	8008b9c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d105      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bc4:	4b3f      	ldr	r3, [pc, #252]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc8:	4a3e      	ldr	r2, [pc, #248]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00c      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x45a>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d008      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x45a>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d004      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x45a>
 8008be8:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008bec:	4836      	ldr	r0, [pc, #216]	; (8008cc8 <HAL_RCC_OscConfig+0x530>)
 8008bee:	f7fa fc9c 	bl	800352a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80e4 	beq.w	8008dc4 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008bfc:	4b31      	ldr	r3, [pc, #196]	; (8008cc4 <HAL_RCC_OscConfig+0x52c>)
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f003 030c 	and.w	r3, r3, #12
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	f000 80ae 	beq.w	8008d66 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	f040 8092 	bne.w	8008d38 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d009      	beq.n	8008c30 <HAL_RCC_OscConfig+0x498>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c24:	d004      	beq.n	8008c30 <HAL_RCC_OscConfig+0x498>
 8008c26:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8008c2a:	4827      	ldr	r0, [pc, #156]	; (8008cc8 <HAL_RCC_OscConfig+0x530>)
 8008c2c:	f7fa fc7d 	bl	800352a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	2b3f      	cmp	r3, #63	; 0x3f
 8008c36:	d904      	bls.n	8008c42 <HAL_RCC_OscConfig+0x4aa>
 8008c38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c3c:	4822      	ldr	r0, [pc, #136]	; (8008cc8 <HAL_RCC_OscConfig+0x530>)
 8008c3e:	f7fa fc74 	bl	800352a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	2b31      	cmp	r3, #49	; 0x31
 8008c48:	d904      	bls.n	8008c54 <HAL_RCC_OscConfig+0x4bc>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008c52:	d904      	bls.n	8008c5e <HAL_RCC_OscConfig+0x4c6>
 8008c54:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8008c58:	481b      	ldr	r0, [pc, #108]	; (8008cc8 <HAL_RCC_OscConfig+0x530>)
 8008c5a:	f7fa fc66 	bl	800352a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d010      	beq.n	8008c88 <HAL_RCC_OscConfig+0x4f0>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6a:	2b04      	cmp	r3, #4
 8008c6c:	d00c      	beq.n	8008c88 <HAL_RCC_OscConfig+0x4f0>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	2b06      	cmp	r3, #6
 8008c74:	d008      	beq.n	8008c88 <HAL_RCC_OscConfig+0x4f0>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	d004      	beq.n	8008c88 <HAL_RCC_OscConfig+0x4f0>
 8008c7e:	f240 11db 	movw	r1, #475	; 0x1db
 8008c82:	4811      	ldr	r0, [pc, #68]	; (8008cc8 <HAL_RCC_OscConfig+0x530>)
 8008c84:	f7fa fc51 	bl	800352a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d903      	bls.n	8008c98 <HAL_RCC_OscConfig+0x500>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	2b0f      	cmp	r3, #15
 8008c96:	d904      	bls.n	8008ca2 <HAL_RCC_OscConfig+0x50a>
 8008c98:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8008c9c:	480a      	ldr	r0, [pc, #40]	; (8008cc8 <HAL_RCC_OscConfig+0x530>)
 8008c9e:	f7fa fc44 	bl	800352a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ca2:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <HAL_RCC_OscConfig+0x538>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ca8:	f7fc f994 	bl	8004fd4 <HAL_GetTick>
 8008cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cae:	e011      	b.n	8008cd4 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cb0:	f7fc f990 	bl	8004fd4 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d90a      	bls.n	8008cd4 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e081      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
 8008cc2:	bf00      	nop
 8008cc4:	40023800 	.word	0x40023800
 8008cc8:	0800faa4 	.word	0x0800faa4
 8008ccc:	40007000 	.word	0x40007000
 8008cd0:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cd4:	4b3e      	ldr	r3, [pc, #248]	; (8008dd0 <HAL_RCC_OscConfig+0x638>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e7      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	69da      	ldr	r2, [r3, #28]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	431a      	orrs	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	019b      	lsls	r3, r3, #6
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	085b      	lsrs	r3, r3, #1
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	041b      	lsls	r3, r3, #16
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	061b      	lsls	r3, r3, #24
 8008d04:	4932      	ldr	r1, [pc, #200]	; (8008dd0 <HAL_RCC_OscConfig+0x638>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d0a:	4b32      	ldr	r3, [pc, #200]	; (8008dd4 <HAL_RCC_OscConfig+0x63c>)
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d10:	f7fc f960 	bl	8004fd4 <HAL_GetTick>
 8008d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d16:	e008      	b.n	8008d2a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d18:	f7fc f95c 	bl	8004fd4 <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d901      	bls.n	8008d2a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e04d      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d2a:	4b29      	ldr	r3, [pc, #164]	; (8008dd0 <HAL_RCC_OscConfig+0x638>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0f0      	beq.n	8008d18 <HAL_RCC_OscConfig+0x580>
 8008d36:	e045      	b.n	8008dc4 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d38:	4b26      	ldr	r3, [pc, #152]	; (8008dd4 <HAL_RCC_OscConfig+0x63c>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d3e:	f7fc f949 	bl	8004fd4 <HAL_GetTick>
 8008d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d44:	e008      	b.n	8008d58 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d46:	f7fc f945 	bl	8004fd4 <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d901      	bls.n	8008d58 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e036      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d58:	4b1d      	ldr	r3, [pc, #116]	; (8008dd0 <HAL_RCC_OscConfig+0x638>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1f0      	bne.n	8008d46 <HAL_RCC_OscConfig+0x5ae>
 8008d64:	e02e      	b.n	8008dc4 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d101      	bne.n	8008d72 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e029      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d72:	4b17      	ldr	r3, [pc, #92]	; (8008dd0 <HAL_RCC_OscConfig+0x638>)
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d11c      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d115      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d10d      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d106      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d001      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e000      	b.n	8008dc6 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	40023800 	.word	0x40023800
 8008dd4:	42470060 	.word	0x42470060

08008dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e18c      	b.n	8009106 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <HAL_RCC_ClockConfig+0x24>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b0f      	cmp	r3, #15
 8008dfa:	d904      	bls.n	8008e06 <HAL_RCC_ClockConfig+0x2e>
 8008dfc:	f240 2151 	movw	r1, #593	; 0x251
 8008e00:	4887      	ldr	r0, [pc, #540]	; (8009020 <HAL_RCC_ClockConfig+0x248>)
 8008e02:	f7fa fb92 	bl	800352a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d031      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d02e      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d02b      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d028      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d025      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b05      	cmp	r3, #5
 8008e28:	d022      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2b06      	cmp	r3, #6
 8008e2e:	d01f      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b07      	cmp	r3, #7
 8008e34:	d01c      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b08      	cmp	r3, #8
 8008e3a:	d019      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2b09      	cmp	r3, #9
 8008e40:	d016      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b0a      	cmp	r3, #10
 8008e46:	d013      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2b0b      	cmp	r3, #11
 8008e4c:	d010      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b0c      	cmp	r3, #12
 8008e52:	d00d      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2b0d      	cmp	r3, #13
 8008e58:	d00a      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	2b0e      	cmp	r3, #14
 8008e5e:	d007      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b0f      	cmp	r3, #15
 8008e64:	d004      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x98>
 8008e66:	f240 2152 	movw	r1, #594	; 0x252
 8008e6a:	486d      	ldr	r0, [pc, #436]	; (8009020 <HAL_RCC_ClockConfig+0x248>)
 8008e6c:	f7fa fb5d 	bl	800352a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e70:	4b6c      	ldr	r3, [pc, #432]	; (8009024 <HAL_RCC_ClockConfig+0x24c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d90c      	bls.n	8008e98 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e7e:	4b69      	ldr	r3, [pc, #420]	; (8009024 <HAL_RCC_ClockConfig+0x24c>)
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e86:	4b67      	ldr	r3, [pc, #412]	; (8009024 <HAL_RCC_ClockConfig+0x24c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d001      	beq.n	8008e98 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e136      	b.n	8009106 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0302 	and.w	r3, r3, #2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d049      	beq.n	8008f38 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008eb0:	4b5d      	ldr	r3, [pc, #372]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	4a5c      	ldr	r2, [pc, #368]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0308 	and.w	r3, r3, #8
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d005      	beq.n	8008ed4 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ec8:	4b57      	ldr	r3, [pc, #348]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	4a56      	ldr	r2, [pc, #344]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d024      	beq.n	8008f26 <HAL_RCC_ClockConfig+0x14e>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	2b80      	cmp	r3, #128	; 0x80
 8008ee2:	d020      	beq.n	8008f26 <HAL_RCC_ClockConfig+0x14e>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b90      	cmp	r3, #144	; 0x90
 8008eea:	d01c      	beq.n	8008f26 <HAL_RCC_ClockConfig+0x14e>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	2ba0      	cmp	r3, #160	; 0xa0
 8008ef2:	d018      	beq.n	8008f26 <HAL_RCC_ClockConfig+0x14e>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	2bb0      	cmp	r3, #176	; 0xb0
 8008efa:	d014      	beq.n	8008f26 <HAL_RCC_ClockConfig+0x14e>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	2bc0      	cmp	r3, #192	; 0xc0
 8008f02:	d010      	beq.n	8008f26 <HAL_RCC_ClockConfig+0x14e>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	2bd0      	cmp	r3, #208	; 0xd0
 8008f0a:	d00c      	beq.n	8008f26 <HAL_RCC_ClockConfig+0x14e>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	2be0      	cmp	r3, #224	; 0xe0
 8008f12:	d008      	beq.n	8008f26 <HAL_RCC_ClockConfig+0x14e>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	2bf0      	cmp	r3, #240	; 0xf0
 8008f1a:	d004      	beq.n	8008f26 <HAL_RCC_ClockConfig+0x14e>
 8008f1c:	f240 2175 	movw	r1, #629	; 0x275
 8008f20:	483f      	ldr	r0, [pc, #252]	; (8009020 <HAL_RCC_ClockConfig+0x248>)
 8008f22:	f7fa fb02 	bl	800352a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f26:	4b40      	ldr	r3, [pc, #256]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	493d      	ldr	r1, [pc, #244]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d059      	beq.n	8008ff8 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d010      	beq.n	8008f6e <HAL_RCC_ClockConfig+0x196>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d00c      	beq.n	8008f6e <HAL_RCC_ClockConfig+0x196>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d008      	beq.n	8008f6e <HAL_RCC_ClockConfig+0x196>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	2b03      	cmp	r3, #3
 8008f62:	d004      	beq.n	8008f6e <HAL_RCC_ClockConfig+0x196>
 8008f64:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8008f68:	482d      	ldr	r0, [pc, #180]	; (8009020 <HAL_RCC_ClockConfig+0x248>)
 8008f6a:	f7fa fade 	bl	800352a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d107      	bne.n	8008f86 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f76:	4b2c      	ldr	r3, [pc, #176]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d119      	bne.n	8008fb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e0bf      	b.n	8009106 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d003      	beq.n	8008f96 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d107      	bne.n	8008fa6 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f96:	4b24      	ldr	r3, [pc, #144]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d109      	bne.n	8008fb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e0af      	b.n	8009106 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fa6:	4b20      	ldr	r3, [pc, #128]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e0a7      	b.n	8009106 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fb6:	4b1c      	ldr	r3, [pc, #112]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f023 0203 	bic.w	r2, r3, #3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	4919      	ldr	r1, [pc, #100]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008fc8:	f7fc f804 	bl	8004fd4 <HAL_GetTick>
 8008fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fce:	e00a      	b.n	8008fe6 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fd0:	f7fc f800 	bl	8004fd4 <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e08f      	b.n	8009106 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fe6:	4b10      	ldr	r3, [pc, #64]	; (8009028 <HAL_RCC_ClockConfig+0x250>)
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f003 020c 	and.w	r2, r3, #12
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d1eb      	bne.n	8008fd0 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <HAL_RCC_ClockConfig+0x24c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 030f 	and.w	r3, r3, #15
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	d212      	bcs.n	800902c <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009006:	4b07      	ldr	r3, [pc, #28]	; (8009024 <HAL_RCC_ClockConfig+0x24c>)
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	b2d2      	uxtb	r2, r2
 800900c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800900e:	4b05      	ldr	r3, [pc, #20]	; (8009024 <HAL_RCC_ClockConfig+0x24c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 030f 	and.w	r3, r3, #15
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	429a      	cmp	r2, r3
 800901a:	d007      	beq.n	800902c <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e072      	b.n	8009106 <HAL_RCC_ClockConfig+0x32e>
 8009020:	0800faa4 	.word	0x0800faa4
 8009024:	40023c00 	.word	0x40023c00
 8009028:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d025      	beq.n	8009084 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d018      	beq.n	8009072 <HAL_RCC_ClockConfig+0x29a>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009048:	d013      	beq.n	8009072 <HAL_RCC_ClockConfig+0x29a>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009052:	d00e      	beq.n	8009072 <HAL_RCC_ClockConfig+0x29a>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800905c:	d009      	beq.n	8009072 <HAL_RCC_ClockConfig+0x29a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009066:	d004      	beq.n	8009072 <HAL_RCC_ClockConfig+0x29a>
 8009068:	f240 21ba 	movw	r1, #698	; 0x2ba
 800906c:	4828      	ldr	r0, [pc, #160]	; (8009110 <HAL_RCC_ClockConfig+0x338>)
 800906e:	f7fa fa5c 	bl	800352a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009072:	4b28      	ldr	r3, [pc, #160]	; (8009114 <HAL_RCC_ClockConfig+0x33c>)
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	4925      	ldr	r1, [pc, #148]	; (8009114 <HAL_RCC_ClockConfig+0x33c>)
 8009080:	4313      	orrs	r3, r2
 8009082:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0308 	and.w	r3, r3, #8
 800908c:	2b00      	cmp	r3, #0
 800908e:	d026      	beq.n	80090de <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d018      	beq.n	80090ca <HAL_RCC_ClockConfig+0x2f2>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a0:	d013      	beq.n	80090ca <HAL_RCC_ClockConfig+0x2f2>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80090aa:	d00e      	beq.n	80090ca <HAL_RCC_ClockConfig+0x2f2>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80090b4:	d009      	beq.n	80090ca <HAL_RCC_ClockConfig+0x2f2>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80090be:	d004      	beq.n	80090ca <HAL_RCC_ClockConfig+0x2f2>
 80090c0:	f240 21c1 	movw	r1, #705	; 0x2c1
 80090c4:	4812      	ldr	r0, [pc, #72]	; (8009110 <HAL_RCC_ClockConfig+0x338>)
 80090c6:	f7fa fa30 	bl	800352a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090ca:	4b12      	ldr	r3, [pc, #72]	; (8009114 <HAL_RCC_ClockConfig+0x33c>)
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	490e      	ldr	r1, [pc, #56]	; (8009114 <HAL_RCC_ClockConfig+0x33c>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80090de:	f000 f821 	bl	8009124 <HAL_RCC_GetSysClockFreq>
 80090e2:	4602      	mov	r2, r0
 80090e4:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <HAL_RCC_ClockConfig+0x33c>)
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	091b      	lsrs	r3, r3, #4
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	490a      	ldr	r1, [pc, #40]	; (8009118 <HAL_RCC_ClockConfig+0x340>)
 80090f0:	5ccb      	ldrb	r3, [r1, r3]
 80090f2:	fa22 f303 	lsr.w	r3, r2, r3
 80090f6:	4a09      	ldr	r2, [pc, #36]	; (800911c <HAL_RCC_ClockConfig+0x344>)
 80090f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80090fa:	4b09      	ldr	r3, [pc, #36]	; (8009120 <HAL_RCC_ClockConfig+0x348>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fb ff24 	bl	8004f4c <HAL_InitTick>

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	0800faa4 	.word	0x0800faa4
 8009114:	40023800 	.word	0x40023800
 8009118:	0800fbdc 	.word	0x0800fbdc
 800911c:	200001d0 	.word	0x200001d0
 8009120:	200001d4 	.word	0x200001d4

08009124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009124:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	607b      	str	r3, [r7, #4]
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	2300      	movs	r3, #0
 8009136:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800913c:	4b67      	ldr	r3, [pc, #412]	; (80092dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f003 030c 	and.w	r3, r3, #12
 8009144:	2b08      	cmp	r3, #8
 8009146:	d00d      	beq.n	8009164 <HAL_RCC_GetSysClockFreq+0x40>
 8009148:	2b08      	cmp	r3, #8
 800914a:	f200 80bd 	bhi.w	80092c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <HAL_RCC_GetSysClockFreq+0x34>
 8009152:	2b04      	cmp	r3, #4
 8009154:	d003      	beq.n	800915e <HAL_RCC_GetSysClockFreq+0x3a>
 8009156:	e0b7      	b.n	80092c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009158:	4b61      	ldr	r3, [pc, #388]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800915a:	60bb      	str	r3, [r7, #8]
       break;
 800915c:	e0b7      	b.n	80092ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800915e:	4b60      	ldr	r3, [pc, #384]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009160:	60bb      	str	r3, [r7, #8]
      break;
 8009162:	e0b4      	b.n	80092ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009164:	4b5d      	ldr	r3, [pc, #372]	; (80092dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800916c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800916e:	4b5b      	ldr	r3, [pc, #364]	; (80092dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d04d      	beq.n	8009216 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800917a:	4b58      	ldr	r3, [pc, #352]	; (80092dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	099b      	lsrs	r3, r3, #6
 8009180:	461a      	mov	r2, r3
 8009182:	f04f 0300 	mov.w	r3, #0
 8009186:	f240 10ff 	movw	r0, #511	; 0x1ff
 800918a:	f04f 0100 	mov.w	r1, #0
 800918e:	ea02 0800 	and.w	r8, r2, r0
 8009192:	ea03 0901 	and.w	r9, r3, r1
 8009196:	4640      	mov	r0, r8
 8009198:	4649      	mov	r1, r9
 800919a:	f04f 0200 	mov.w	r2, #0
 800919e:	f04f 0300 	mov.w	r3, #0
 80091a2:	014b      	lsls	r3, r1, #5
 80091a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80091a8:	0142      	lsls	r2, r0, #5
 80091aa:	4610      	mov	r0, r2
 80091ac:	4619      	mov	r1, r3
 80091ae:	ebb0 0008 	subs.w	r0, r0, r8
 80091b2:	eb61 0109 	sbc.w	r1, r1, r9
 80091b6:	f04f 0200 	mov.w	r2, #0
 80091ba:	f04f 0300 	mov.w	r3, #0
 80091be:	018b      	lsls	r3, r1, #6
 80091c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80091c4:	0182      	lsls	r2, r0, #6
 80091c6:	1a12      	subs	r2, r2, r0
 80091c8:	eb63 0301 	sbc.w	r3, r3, r1
 80091cc:	f04f 0000 	mov.w	r0, #0
 80091d0:	f04f 0100 	mov.w	r1, #0
 80091d4:	00d9      	lsls	r1, r3, #3
 80091d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091da:	00d0      	lsls	r0, r2, #3
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	eb12 0208 	adds.w	r2, r2, r8
 80091e4:	eb43 0309 	adc.w	r3, r3, r9
 80091e8:	f04f 0000 	mov.w	r0, #0
 80091ec:	f04f 0100 	mov.w	r1, #0
 80091f0:	0299      	lsls	r1, r3, #10
 80091f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80091f6:	0290      	lsls	r0, r2, #10
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4610      	mov	r0, r2
 80091fe:	4619      	mov	r1, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	461a      	mov	r2, r3
 8009204:	f04f 0300 	mov.w	r3, #0
 8009208:	f7f7 fcf6 	bl	8000bf8 <__aeabi_uldivmod>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4613      	mov	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	e04a      	b.n	80092ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009216:	4b31      	ldr	r3, [pc, #196]	; (80092dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	099b      	lsrs	r3, r3, #6
 800921c:	461a      	mov	r2, r3
 800921e:	f04f 0300 	mov.w	r3, #0
 8009222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009226:	f04f 0100 	mov.w	r1, #0
 800922a:	ea02 0400 	and.w	r4, r2, r0
 800922e:	ea03 0501 	and.w	r5, r3, r1
 8009232:	4620      	mov	r0, r4
 8009234:	4629      	mov	r1, r5
 8009236:	f04f 0200 	mov.w	r2, #0
 800923a:	f04f 0300 	mov.w	r3, #0
 800923e:	014b      	lsls	r3, r1, #5
 8009240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009244:	0142      	lsls	r2, r0, #5
 8009246:	4610      	mov	r0, r2
 8009248:	4619      	mov	r1, r3
 800924a:	1b00      	subs	r0, r0, r4
 800924c:	eb61 0105 	sbc.w	r1, r1, r5
 8009250:	f04f 0200 	mov.w	r2, #0
 8009254:	f04f 0300 	mov.w	r3, #0
 8009258:	018b      	lsls	r3, r1, #6
 800925a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800925e:	0182      	lsls	r2, r0, #6
 8009260:	1a12      	subs	r2, r2, r0
 8009262:	eb63 0301 	sbc.w	r3, r3, r1
 8009266:	f04f 0000 	mov.w	r0, #0
 800926a:	f04f 0100 	mov.w	r1, #0
 800926e:	00d9      	lsls	r1, r3, #3
 8009270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009274:	00d0      	lsls	r0, r2, #3
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	1912      	adds	r2, r2, r4
 800927c:	eb45 0303 	adc.w	r3, r5, r3
 8009280:	f04f 0000 	mov.w	r0, #0
 8009284:	f04f 0100 	mov.w	r1, #0
 8009288:	0299      	lsls	r1, r3, #10
 800928a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800928e:	0290      	lsls	r0, r2, #10
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4610      	mov	r0, r2
 8009296:	4619      	mov	r1, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	461a      	mov	r2, r3
 800929c:	f04f 0300 	mov.w	r3, #0
 80092a0:	f7f7 fcaa 	bl	8000bf8 <__aeabi_uldivmod>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4613      	mov	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80092ac:	4b0b      	ldr	r3, [pc, #44]	; (80092dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	0c1b      	lsrs	r3, r3, #16
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	3301      	adds	r3, #1
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c4:	60bb      	str	r3, [r7, #8]
      break;
 80092c6:	e002      	b.n	80092ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80092c8:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80092ca:	60bb      	str	r3, [r7, #8]
      break;
 80092cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80092ce:	68bb      	ldr	r3, [r7, #8]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80092da:	bf00      	nop
 80092dc:	40023800 	.word	0x40023800
 80092e0:	00f42400 	.word	0x00f42400

080092e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80092e8:	4b03      	ldr	r3, [pc, #12]	; (80092f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80092ea:	681b      	ldr	r3, [r3, #0]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	200001d0 	.word	0x200001d0

080092fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009300:	f7ff fff0 	bl	80092e4 <HAL_RCC_GetHCLKFreq>
 8009304:	4602      	mov	r2, r0
 8009306:	4b05      	ldr	r3, [pc, #20]	; (800931c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	0a9b      	lsrs	r3, r3, #10
 800930c:	f003 0307 	and.w	r3, r3, #7
 8009310:	4903      	ldr	r1, [pc, #12]	; (8009320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009312:	5ccb      	ldrb	r3, [r1, r3]
 8009314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009318:	4618      	mov	r0, r3
 800931a:	bd80      	pop	{r7, pc}
 800931c:	40023800 	.word	0x40023800
 8009320:	0800fbec 	.word	0x0800fbec

08009324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009328:	f7ff ffdc 	bl	80092e4 <HAL_RCC_GetHCLKFreq>
 800932c:	4602      	mov	r2, r0
 800932e:	4b05      	ldr	r3, [pc, #20]	; (8009344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	0b5b      	lsrs	r3, r3, #13
 8009334:	f003 0307 	and.w	r3, r3, #7
 8009338:	4903      	ldr	r1, [pc, #12]	; (8009348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800933a:	5ccb      	ldrb	r3, [r1, r3]
 800933c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009340:	4618      	mov	r0, r3
 8009342:	bd80      	pop	{r7, pc}
 8009344:	40023800 	.word	0x40023800
 8009348:	0800fbec 	.word	0x0800fbec

0800934c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e118      	b.n	8009590 <HAL_SPI_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a8d      	ldr	r2, [pc, #564]	; (8009598 <HAL_SPI_Init+0x24c>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d01d      	beq.n	80093a4 <HAL_SPI_Init+0x58>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a8b      	ldr	r2, [pc, #556]	; (800959c <HAL_SPI_Init+0x250>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d018      	beq.n	80093a4 <HAL_SPI_Init+0x58>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a8a      	ldr	r2, [pc, #552]	; (80095a0 <HAL_SPI_Init+0x254>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d013      	beq.n	80093a4 <HAL_SPI_Init+0x58>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a88      	ldr	r2, [pc, #544]	; (80095a4 <HAL_SPI_Init+0x258>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d00e      	beq.n	80093a4 <HAL_SPI_Init+0x58>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a87      	ldr	r2, [pc, #540]	; (80095a8 <HAL_SPI_Init+0x25c>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d009      	beq.n	80093a4 <HAL_SPI_Init+0x58>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a85      	ldr	r2, [pc, #532]	; (80095ac <HAL_SPI_Init+0x260>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d004      	beq.n	80093a4 <HAL_SPI_Init+0x58>
 800939a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800939e:	4884      	ldr	r0, [pc, #528]	; (80095b0 <HAL_SPI_Init+0x264>)
 80093a0:	f7fa f8c3 	bl	800352a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d009      	beq.n	80093c0 <HAL_SPI_Init+0x74>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093b4:	d004      	beq.n	80093c0 <HAL_SPI_Init+0x74>
 80093b6:	f240 1143 	movw	r1, #323	; 0x143
 80093ba:	487d      	ldr	r0, [pc, #500]	; (80095b0 <HAL_SPI_Init+0x264>)
 80093bc:	f7fa f8b5 	bl	800352a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00e      	beq.n	80093e6 <HAL_SPI_Init+0x9a>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093d0:	d009      	beq.n	80093e6 <HAL_SPI_Init+0x9a>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093da:	d004      	beq.n	80093e6 <HAL_SPI_Init+0x9a>
 80093dc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80093e0:	4873      	ldr	r0, [pc, #460]	; (80095b0 <HAL_SPI_Init+0x264>)
 80093e2:	f7fa f8a2 	bl	800352a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ee:	d008      	beq.n	8009402 <HAL_SPI_Init+0xb6>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d004      	beq.n	8009402 <HAL_SPI_Init+0xb6>
 80093f8:	f240 1145 	movw	r1, #325	; 0x145
 80093fc:	486c      	ldr	r0, [pc, #432]	; (80095b0 <HAL_SPI_Init+0x264>)
 80093fe:	f7fa f894 	bl	800352a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800940a:	d00d      	beq.n	8009428 <HAL_SPI_Init+0xdc>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d009      	beq.n	8009428 <HAL_SPI_Init+0xdc>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800941c:	d004      	beq.n	8009428 <HAL_SPI_Init+0xdc>
 800941e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8009422:	4863      	ldr	r0, [pc, #396]	; (80095b0 <HAL_SPI_Init+0x264>)
 8009424:	f7fa f881 	bl	800352a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d020      	beq.n	8009472 <HAL_SPI_Init+0x126>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	2b08      	cmp	r3, #8
 8009436:	d01c      	beq.n	8009472 <HAL_SPI_Init+0x126>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	2b10      	cmp	r3, #16
 800943e:	d018      	beq.n	8009472 <HAL_SPI_Init+0x126>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	2b18      	cmp	r3, #24
 8009446:	d014      	beq.n	8009472 <HAL_SPI_Init+0x126>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	2b20      	cmp	r3, #32
 800944e:	d010      	beq.n	8009472 <HAL_SPI_Init+0x126>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	69db      	ldr	r3, [r3, #28]
 8009454:	2b28      	cmp	r3, #40	; 0x28
 8009456:	d00c      	beq.n	8009472 <HAL_SPI_Init+0x126>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	2b30      	cmp	r3, #48	; 0x30
 800945e:	d008      	beq.n	8009472 <HAL_SPI_Init+0x126>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	2b38      	cmp	r3, #56	; 0x38
 8009466:	d004      	beq.n	8009472 <HAL_SPI_Init+0x126>
 8009468:	f240 1147 	movw	r1, #327	; 0x147
 800946c:	4850      	ldr	r0, [pc, #320]	; (80095b0 <HAL_SPI_Init+0x264>)
 800946e:	f7fa f85c 	bl	800352a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d008      	beq.n	800948c <HAL_SPI_Init+0x140>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	2b80      	cmp	r3, #128	; 0x80
 8009480:	d004      	beq.n	800948c <HAL_SPI_Init+0x140>
 8009482:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009486:	484a      	ldr	r0, [pc, #296]	; (80095b0 <HAL_SPI_Init+0x264>)
 8009488:	f7fa f84f 	bl	800352a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	2b00      	cmp	r3, #0
 8009492:	d008      	beq.n	80094a6 <HAL_SPI_Init+0x15a>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	2b10      	cmp	r3, #16
 800949a:	d004      	beq.n	80094a6 <HAL_SPI_Init+0x15a>
 800949c:	f240 1149 	movw	r1, #329	; 0x149
 80094a0:	4843      	ldr	r0, [pc, #268]	; (80095b0 <HAL_SPI_Init+0x264>)
 80094a2:	f7fa f842 	bl	800352a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d119      	bne.n	80094e2 <HAL_SPI_Init+0x196>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d008      	beq.n	80094c8 <HAL_SPI_Init+0x17c>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d004      	beq.n	80094c8 <HAL_SPI_Init+0x17c>
 80094be:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80094c2:	483b      	ldr	r0, [pc, #236]	; (80095b0 <HAL_SPI_Init+0x264>)
 80094c4:	f7fa f831 	bl	800352a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d008      	beq.n	80094e2 <HAL_SPI_Init+0x196>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d004      	beq.n	80094e2 <HAL_SPI_Init+0x196>
 80094d8:	f240 114d 	movw	r1, #333	; 0x14d
 80094dc:	4834      	ldr	r0, [pc, #208]	; (80095b0 <HAL_SPI_Init+0x264>)
 80094de:	f7fa f824 	bl	800352a <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d106      	bne.n	8009502 <HAL_SPI_Init+0x1b6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7fa fbf1 	bl	8003ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2202      	movs	r2, #2
 8009506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009518:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	431a      	orrs	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	431a      	orrs	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	431a      	orrs	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	431a      	orrs	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800953e:	431a      	orrs	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	69db      	ldr	r3, [r3, #28]
 8009544:	431a      	orrs	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	ea42 0103 	orr.w	r1, r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	0c1b      	lsrs	r3, r3, #16
 8009560:	f003 0104 	and.w	r1, r3, #4
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	69da      	ldr	r2, [r3, #28]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800957e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	40013000 	.word	0x40013000
 800959c:	40003800 	.word	0x40003800
 80095a0:	40003c00 	.word	0x40003c00
 80095a4:	40013400 	.word	0x40013400
 80095a8:	40015000 	.word	0x40015000
 80095ac:	40015400 	.word	0x40015400
 80095b0:	0800fadc 	.word	0x0800fadc

080095b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af02      	add	r7, sp, #8
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	4613      	mov	r3, r2
 80095c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095d0:	d112      	bne.n	80095f8 <HAL_SPI_Receive+0x44>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10e      	bne.n	80095f8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2204      	movs	r2, #4
 80095de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80095e2:	88fa      	ldrh	r2, [r7, #6]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	4613      	mov	r3, r2
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f000 f8ea 	bl	80097c8 <HAL_SPI_TransmitReceive>
 80095f4:	4603      	mov	r3, r0
 80095f6:	e0e2      	b.n	80097be <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d101      	bne.n	8009606 <HAL_SPI_Receive+0x52>
 8009602:	2302      	movs	r3, #2
 8009604:	e0db      	b.n	80097be <HAL_SPI_Receive+0x20a>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800960e:	f7fb fce1 	bl	8004fd4 <HAL_GetTick>
 8009612:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b01      	cmp	r3, #1
 800961e:	d002      	beq.n	8009626 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009620:	2302      	movs	r3, #2
 8009622:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009624:	e0c2      	b.n	80097ac <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <HAL_SPI_Receive+0x7e>
 800962c:	88fb      	ldrh	r3, [r7, #6]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d102      	bne.n	8009638 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009636:	e0b9      	b.n	80097ac <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2204      	movs	r2, #4
 800963c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	88fa      	ldrh	r2, [r7, #6]
 8009650:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	88fa      	ldrh	r2, [r7, #6]
 8009656:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800967e:	d107      	bne.n	8009690 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800968e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969a:	2b40      	cmp	r3, #64	; 0x40
 800969c:	d007      	beq.n	80096ae <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096ac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d162      	bne.n	800977c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80096b6:	e02e      	b.n	8009716 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d115      	bne.n	80096f2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f103 020c 	add.w	r2, r3, #12
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d2:	7812      	ldrb	r2, [r2, #0]
 80096d4:	b2d2      	uxtb	r2, r2
 80096d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	1c5a      	adds	r2, r3, #1
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	3b01      	subs	r3, #1
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096f0:	e011      	b.n	8009716 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096f2:	f7fb fc6f 	bl	8004fd4 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d803      	bhi.n	800970a <HAL_SPI_Receive+0x156>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009708:	d102      	bne.n	8009710 <HAL_SPI_Receive+0x15c>
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d102      	bne.n	8009716 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009714:	e04a      	b.n	80097ac <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800971a:	b29b      	uxth	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1cb      	bne.n	80096b8 <HAL_SPI_Receive+0x104>
 8009720:	e031      	b.n	8009786 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	2b01      	cmp	r3, #1
 800972e:	d113      	bne.n	8009758 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68da      	ldr	r2, [r3, #12]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973a:	b292      	uxth	r2, r2
 800973c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009742:	1c9a      	adds	r2, r3, #2
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800974c:	b29b      	uxth	r3, r3
 800974e:	3b01      	subs	r3, #1
 8009750:	b29a      	uxth	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009756:	e011      	b.n	800977c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009758:	f7fb fc3c 	bl	8004fd4 <HAL_GetTick>
 800975c:	4602      	mov	r2, r0
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	429a      	cmp	r2, r3
 8009766:	d803      	bhi.n	8009770 <HAL_SPI_Receive+0x1bc>
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800976e:	d102      	bne.n	8009776 <HAL_SPI_Receive+0x1c2>
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d102      	bne.n	800977c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	75fb      	strb	r3, [r7, #23]
          goto error;
 800977a:	e017      	b.n	80097ac <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009780:	b29b      	uxth	r3, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1cd      	bne.n	8009722 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 fa34 	bl	8009bf8 <SPI_EndRxTransaction>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d002      	beq.n	800979c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2220      	movs	r2, #32
 800979a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	75fb      	strb	r3, [r7, #23]
 80097a8:	e000      	b.n	80097ac <HAL_SPI_Receive+0x1f8>
  }

error :
 80097aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08c      	sub	sp, #48	; 0x30
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097d6:	2301      	movs	r3, #1
 80097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d004      	beq.n	80097f2 <HAL_SPI_TransmitReceive+0x2a>
 80097e8:	f240 415a 	movw	r1, #1114	; 0x45a
 80097ec:	4884      	ldr	r0, [pc, #528]	; (8009a00 <HAL_SPI_TransmitReceive+0x238>)
 80097ee:	f7f9 fe9c 	bl	800352a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d101      	bne.n	8009800 <HAL_SPI_TransmitReceive+0x38>
 80097fc:	2302      	movs	r3, #2
 80097fe:	e18d      	b.n	8009b1c <HAL_SPI_TransmitReceive+0x354>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009808:	f7fb fbe4 	bl	8004fd4 <HAL_GetTick>
 800980c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800981e:	887b      	ldrh	r3, [r7, #2]
 8009820:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009822:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009826:	2b01      	cmp	r3, #1
 8009828:	d00f      	beq.n	800984a <HAL_SPI_TransmitReceive+0x82>
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009830:	d107      	bne.n	8009842 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d103      	bne.n	8009842 <HAL_SPI_TransmitReceive+0x7a>
 800983a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800983e:	2b04      	cmp	r3, #4
 8009840:	d003      	beq.n	800984a <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8009842:	2302      	movs	r3, #2
 8009844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009848:	e15e      	b.n	8009b08 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d005      	beq.n	800985c <HAL_SPI_TransmitReceive+0x94>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d002      	beq.n	800985c <HAL_SPI_TransmitReceive+0x94>
 8009856:	887b      	ldrh	r3, [r7, #2]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d103      	bne.n	8009864 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009862:	e151      	b.n	8009b08 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b04      	cmp	r3, #4
 800986e:	d003      	beq.n	8009878 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2205      	movs	r2, #5
 8009874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	887a      	ldrh	r2, [r7, #2]
 8009888:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	887a      	ldrh	r2, [r7, #2]
 800988e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	887a      	ldrh	r2, [r7, #2]
 800989a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	887a      	ldrh	r2, [r7, #2]
 80098a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b8:	2b40      	cmp	r3, #64	; 0x40
 80098ba:	d007      	beq.n	80098cc <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098d4:	d178      	bne.n	80099c8 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d002      	beq.n	80098e4 <HAL_SPI_TransmitReceive+0x11c>
 80098de:	8b7b      	ldrh	r3, [r7, #26]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d166      	bne.n	80099b2 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e8:	881a      	ldrh	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f4:	1c9a      	adds	r2, r3, #2
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098fe:	b29b      	uxth	r3, r3
 8009900:	3b01      	subs	r3, #1
 8009902:	b29a      	uxth	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009908:	e053      	b.n	80099b2 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b02      	cmp	r3, #2
 8009916:	d11b      	bne.n	8009950 <HAL_SPI_TransmitReceive+0x188>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800991c:	b29b      	uxth	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d016      	beq.n	8009950 <HAL_SPI_TransmitReceive+0x188>
 8009922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009924:	2b01      	cmp	r3, #1
 8009926:	d113      	bne.n	8009950 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992c:	881a      	ldrh	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009938:	1c9a      	adds	r2, r3, #2
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009942:	b29b      	uxth	r3, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	b29a      	uxth	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b01      	cmp	r3, #1
 800995c:	d119      	bne.n	8009992 <HAL_SPI_TransmitReceive+0x1ca>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009962:	b29b      	uxth	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d014      	beq.n	8009992 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009972:	b292      	uxth	r2, r2
 8009974:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997a:	1c9a      	adds	r2, r3, #2
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009984:	b29b      	uxth	r3, r3
 8009986:	3b01      	subs	r3, #1
 8009988:	b29a      	uxth	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800998e:	2301      	movs	r3, #1
 8009990:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009992:	f7fb fb1f 	bl	8004fd4 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800999e:	429a      	cmp	r2, r3
 80099a0:	d807      	bhi.n	80099b2 <HAL_SPI_TransmitReceive+0x1ea>
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099a8:	d003      	beq.n	80099b2 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80099b0:	e0aa      	b.n	8009b08 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1a6      	bne.n	800990a <HAL_SPI_TransmitReceive+0x142>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1a1      	bne.n	800990a <HAL_SPI_TransmitReceive+0x142>
 80099c6:	e07f      	b.n	8009ac8 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <HAL_SPI_TransmitReceive+0x20e>
 80099d0:	8b7b      	ldrh	r3, [r7, #26]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d16e      	bne.n	8009ab4 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	330c      	adds	r3, #12
 80099e0:	7812      	ldrb	r2, [r2, #0]
 80099e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099fc:	e05a      	b.n	8009ab4 <HAL_SPI_TransmitReceive+0x2ec>
 80099fe:	bf00      	nop
 8009a00:	0800fadc 	.word	0x0800fadc
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d11c      	bne.n	8009a4c <HAL_SPI_TransmitReceive+0x284>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d017      	beq.n	8009a4c <HAL_SPI_TransmitReceive+0x284>
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d114      	bne.n	8009a4c <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	330c      	adds	r3, #12
 8009a2c:	7812      	ldrb	r2, [r2, #0]
 8009a2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	3b01      	subs	r3, #1
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d119      	bne.n	8009a8e <HAL_SPI_TransmitReceive+0x2c6>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d014      	beq.n	8009a8e <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68da      	ldr	r2, [r3, #12]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6e:	b2d2      	uxtb	r2, r2
 8009a70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	3b01      	subs	r3, #1
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a8e:	f7fb faa1 	bl	8004fd4 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d803      	bhi.n	8009aa6 <HAL_SPI_TransmitReceive+0x2de>
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aa4:	d102      	bne.n	8009aac <HAL_SPI_TransmitReceive+0x2e4>
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d103      	bne.n	8009ab4 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ab2:	e029      	b.n	8009b08 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1a2      	bne.n	8009a04 <HAL_SPI_TransmitReceive+0x23c>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d19d      	bne.n	8009a04 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 f8f9 	bl	8009cc4 <SPI_EndRxTxTransaction>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d006      	beq.n	8009ae6 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009ae4:	e010      	b.n	8009b08 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10b      	bne.n	8009b06 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009aee:	2300      	movs	r3, #0
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	e000      	b.n	8009b08 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8009b06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3730      	adds	r7, #48	; 0x30
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	4613      	mov	r3, r2
 8009b32:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b34:	e04c      	b.n	8009bd0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b3c:	d048      	beq.n	8009bd0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009b3e:	f7fb fa49 	bl	8004fd4 <HAL_GetTick>
 8009b42:	4602      	mov	r2, r0
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d902      	bls.n	8009b54 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d13d      	bne.n	8009bd0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b6c:	d111      	bne.n	8009b92 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b76:	d004      	beq.n	8009b82 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b80:	d107      	bne.n	8009b92 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b9a:	d10f      	bne.n	8009bbc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e00f      	b.n	8009bf0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689a      	ldr	r2, [r3, #8]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	4013      	ands	r3, r2
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	bf0c      	ite	eq
 8009be0:	2301      	moveq	r3, #1
 8009be2:	2300      	movne	r3, #0
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	461a      	mov	r2, r3
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d1a3      	bne.n	8009b36 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af02      	add	r7, sp, #8
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c0c:	d111      	bne.n	8009c32 <SPI_EndRxTransaction+0x3a>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c16:	d004      	beq.n	8009c22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c20:	d107      	bne.n	8009c32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c30:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c3a:	d12a      	bne.n	8009c92 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c44:	d012      	beq.n	8009c6c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2180      	movs	r1, #128	; 0x80
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f7ff ff67 	bl	8009b24 <SPI_WaitFlagStateUntilTimeout>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d02d      	beq.n	8009cb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c60:	f043 0220 	orr.w	r2, r3, #32
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e026      	b.n	8009cba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	2200      	movs	r2, #0
 8009c74:	2101      	movs	r1, #1
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7ff ff54 	bl	8009b24 <SPI_WaitFlagStateUntilTimeout>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d01a      	beq.n	8009cb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c86:	f043 0220 	orr.w	r2, r3, #32
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e013      	b.n	8009cba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f7ff ff41 	bl	8009b24 <SPI_WaitFlagStateUntilTimeout>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d007      	beq.n	8009cb8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cac:	f043 0220 	orr.w	r2, r3, #32
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e000      	b.n	8009cba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
	...

08009cc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009cd0:	4b1b      	ldr	r3, [pc, #108]	; (8009d40 <SPI_EndRxTxTransaction+0x7c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a1b      	ldr	r2, [pc, #108]	; (8009d44 <SPI_EndRxTxTransaction+0x80>)
 8009cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cda:	0d5b      	lsrs	r3, r3, #21
 8009cdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ce0:	fb02 f303 	mul.w	r3, r2, r3
 8009ce4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cee:	d112      	bne.n	8009d16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2180      	movs	r1, #128	; 0x80
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7ff ff12 	bl	8009b24 <SPI_WaitFlagStateUntilTimeout>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d016      	beq.n	8009d34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0a:	f043 0220 	orr.w	r2, r3, #32
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e00f      	b.n	8009d36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00a      	beq.n	8009d32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d2c:	2b80      	cmp	r3, #128	; 0x80
 8009d2e:	d0f2      	beq.n	8009d16 <SPI_EndRxTxTransaction+0x52>
 8009d30:	e000      	b.n	8009d34 <SPI_EndRxTxTransaction+0x70>
        break;
 8009d32:	bf00      	nop
  }

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	200001d0 	.word	0x200001d0
 8009d44:	165e9f81 	.word	0x165e9f81

08009d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e0a1      	b.n	8009e9e <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a52      	ldr	r2, [pc, #328]	; (8009ea8 <HAL_TIM_Base_Init+0x160>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d045      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6c:	d040      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a4e      	ldr	r2, [pc, #312]	; (8009eac <HAL_TIM_Base_Init+0x164>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d03b      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a4c      	ldr	r2, [pc, #304]	; (8009eb0 <HAL_TIM_Base_Init+0x168>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d036      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a4b      	ldr	r2, [pc, #300]	; (8009eb4 <HAL_TIM_Base_Init+0x16c>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d031      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a49      	ldr	r2, [pc, #292]	; (8009eb8 <HAL_TIM_Base_Init+0x170>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d02c      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a48      	ldr	r2, [pc, #288]	; (8009ebc <HAL_TIM_Base_Init+0x174>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d027      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a46      	ldr	r2, [pc, #280]	; (8009ec0 <HAL_TIM_Base_Init+0x178>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d022      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a45      	ldr	r2, [pc, #276]	; (8009ec4 <HAL_TIM_Base_Init+0x17c>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d01d      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a43      	ldr	r2, [pc, #268]	; (8009ec8 <HAL_TIM_Base_Init+0x180>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d018      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a42      	ldr	r2, [pc, #264]	; (8009ecc <HAL_TIM_Base_Init+0x184>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d013      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a40      	ldr	r2, [pc, #256]	; (8009ed0 <HAL_TIM_Base_Init+0x188>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d00e      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a3f      	ldr	r2, [pc, #252]	; (8009ed4 <HAL_TIM_Base_Init+0x18c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d009      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a3d      	ldr	r2, [pc, #244]	; (8009ed8 <HAL_TIM_Base_Init+0x190>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d004      	beq.n	8009df0 <HAL_TIM_Base_Init+0xa8>
 8009de6:	f44f 7189 	mov.w	r1, #274	; 0x112
 8009dea:	483c      	ldr	r0, [pc, #240]	; (8009edc <HAL_TIM_Base_Init+0x194>)
 8009dec:	f7f9 fb9d 	bl	800352a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d014      	beq.n	8009e22 <HAL_TIM_Base_Init+0xda>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	2b10      	cmp	r3, #16
 8009dfe:	d010      	beq.n	8009e22 <HAL_TIM_Base_Init+0xda>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	d00c      	beq.n	8009e22 <HAL_TIM_Base_Init+0xda>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	2b40      	cmp	r3, #64	; 0x40
 8009e0e:	d008      	beq.n	8009e22 <HAL_TIM_Base_Init+0xda>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	2b60      	cmp	r3, #96	; 0x60
 8009e16:	d004      	beq.n	8009e22 <HAL_TIM_Base_Init+0xda>
 8009e18:	f240 1113 	movw	r1, #275	; 0x113
 8009e1c:	482f      	ldr	r0, [pc, #188]	; (8009edc <HAL_TIM_Base_Init+0x194>)
 8009e1e:	f7f9 fb84 	bl	800352a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00e      	beq.n	8009e48 <HAL_TIM_Base_Init+0x100>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e32:	d009      	beq.n	8009e48 <HAL_TIM_Base_Init+0x100>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e3c:	d004      	beq.n	8009e48 <HAL_TIM_Base_Init+0x100>
 8009e3e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009e42:	4826      	ldr	r0, [pc, #152]	; (8009edc <HAL_TIM_Base_Init+0x194>)
 8009e44:	f7f9 fb71 	bl	800352a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d008      	beq.n	8009e62 <HAL_TIM_Base_Init+0x11a>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	2b80      	cmp	r3, #128	; 0x80
 8009e56:	d004      	beq.n	8009e62 <HAL_TIM_Base_Init+0x11a>
 8009e58:	f240 1115 	movw	r1, #277	; 0x115
 8009e5c:	481f      	ldr	r0, [pc, #124]	; (8009edc <HAL_TIM_Base_Init+0x194>)
 8009e5e:	f7f9 fb64 	bl	800352a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d106      	bne.n	8009e7c <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7fa fa3e 	bl	80042f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4610      	mov	r0, r2
 8009e90:	f001 fa62 	bl	800b358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	40010000 	.word	0x40010000
 8009eac:	40000400 	.word	0x40000400
 8009eb0:	40000800 	.word	0x40000800
 8009eb4:	40000c00 	.word	0x40000c00
 8009eb8:	40001000 	.word	0x40001000
 8009ebc:	40001400 	.word	0x40001400
 8009ec0:	40010400 	.word	0x40010400
 8009ec4:	40014000 	.word	0x40014000
 8009ec8:	40014400 	.word	0x40014400
 8009ecc:	40014800 	.word	0x40014800
 8009ed0:	40001800 	.word	0x40001800
 8009ed4:	40001c00 	.word	0x40001c00
 8009ed8:	40002000 	.word	0x40002000
 8009edc:	0800fb14 	.word	0x0800fb14

08009ee0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a33      	ldr	r2, [pc, #204]	; (8009fbc <HAL_TIM_Base_Start+0xdc>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d045      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009efa:	d040      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a2f      	ldr	r2, [pc, #188]	; (8009fc0 <HAL_TIM_Base_Start+0xe0>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d03b      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a2e      	ldr	r2, [pc, #184]	; (8009fc4 <HAL_TIM_Base_Start+0xe4>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d036      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a2c      	ldr	r2, [pc, #176]	; (8009fc8 <HAL_TIM_Base_Start+0xe8>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d031      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a2b      	ldr	r2, [pc, #172]	; (8009fcc <HAL_TIM_Base_Start+0xec>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d02c      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a29      	ldr	r2, [pc, #164]	; (8009fd0 <HAL_TIM_Base_Start+0xf0>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d027      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a28      	ldr	r2, [pc, #160]	; (8009fd4 <HAL_TIM_Base_Start+0xf4>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d022      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a26      	ldr	r2, [pc, #152]	; (8009fd8 <HAL_TIM_Base_Start+0xf8>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d01d      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a25      	ldr	r2, [pc, #148]	; (8009fdc <HAL_TIM_Base_Start+0xfc>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d018      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a23      	ldr	r2, [pc, #140]	; (8009fe0 <HAL_TIM_Base_Start+0x100>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d013      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a22      	ldr	r2, [pc, #136]	; (8009fe4 <HAL_TIM_Base_Start+0x104>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d00e      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a20      	ldr	r2, [pc, #128]	; (8009fe8 <HAL_TIM_Base_Start+0x108>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d009      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a1f      	ldr	r2, [pc, #124]	; (8009fec <HAL_TIM_Base_Start+0x10c>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d004      	beq.n	8009f7e <HAL_TIM_Base_Start+0x9e>
 8009f74:	f240 1185 	movw	r1, #389	; 0x185
 8009f78:	481d      	ldr	r0, [pc, #116]	; (8009ff0 <HAL_TIM_Base_Start+0x110>)
 8009f7a:	f7f9 fad6 	bl	800352a <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2202      	movs	r2, #2
 8009f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f003 0307 	and.w	r3, r3, #7
 8009f90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b06      	cmp	r3, #6
 8009f96:	d007      	beq.n	8009fa8 <HAL_TIM_Base_Start+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f042 0201 	orr.w	r2, r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	40010000 	.word	0x40010000
 8009fc0:	40000400 	.word	0x40000400
 8009fc4:	40000800 	.word	0x40000800
 8009fc8:	40000c00 	.word	0x40000c00
 8009fcc:	40001000 	.word	0x40001000
 8009fd0:	40001400 	.word	0x40001400
 8009fd4:	40010400 	.word	0x40010400
 8009fd8:	40014000 	.word	0x40014000
 8009fdc:	40014400 	.word	0x40014400
 8009fe0:	40014800 	.word	0x40014800
 8009fe4:	40001800 	.word	0x40001800
 8009fe8:	40001c00 	.word	0x40001c00
 8009fec:	40002000 	.word	0x40002000
 8009ff0:	0800fb14 	.word	0x0800fb14

08009ff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e0a1      	b.n	800a14a <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a52      	ldr	r2, [pc, #328]	; (800a154 <HAL_TIM_PWM_Init+0x160>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d045      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a018:	d040      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a4e      	ldr	r2, [pc, #312]	; (800a158 <HAL_TIM_PWM_Init+0x164>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d03b      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a4c      	ldr	r2, [pc, #304]	; (800a15c <HAL_TIM_PWM_Init+0x168>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d036      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a4b      	ldr	r2, [pc, #300]	; (800a160 <HAL_TIM_PWM_Init+0x16c>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d031      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a49      	ldr	r2, [pc, #292]	; (800a164 <HAL_TIM_PWM_Init+0x170>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d02c      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a48      	ldr	r2, [pc, #288]	; (800a168 <HAL_TIM_PWM_Init+0x174>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d027      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a46      	ldr	r2, [pc, #280]	; (800a16c <HAL_TIM_PWM_Init+0x178>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d022      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a45      	ldr	r2, [pc, #276]	; (800a170 <HAL_TIM_PWM_Init+0x17c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d01d      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a43      	ldr	r2, [pc, #268]	; (800a174 <HAL_TIM_PWM_Init+0x180>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d018      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a42      	ldr	r2, [pc, #264]	; (800a178 <HAL_TIM_PWM_Init+0x184>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d013      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a40      	ldr	r2, [pc, #256]	; (800a17c <HAL_TIM_PWM_Init+0x188>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d00e      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a3f      	ldr	r2, [pc, #252]	; (800a180 <HAL_TIM_PWM_Init+0x18c>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d009      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a3d      	ldr	r2, [pc, #244]	; (800a184 <HAL_TIM_PWM_Init+0x190>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d004      	beq.n	800a09c <HAL_TIM_PWM_Init+0xa8>
 800a092:	f240 419b 	movw	r1, #1179	; 0x49b
 800a096:	483c      	ldr	r0, [pc, #240]	; (800a188 <HAL_TIM_PWM_Init+0x194>)
 800a098:	f7f9 fa47 	bl	800352a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d014      	beq.n	800a0ce <HAL_TIM_PWM_Init+0xda>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	2b10      	cmp	r3, #16
 800a0aa:	d010      	beq.n	800a0ce <HAL_TIM_PWM_Init+0xda>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	2b20      	cmp	r3, #32
 800a0b2:	d00c      	beq.n	800a0ce <HAL_TIM_PWM_Init+0xda>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	2b40      	cmp	r3, #64	; 0x40
 800a0ba:	d008      	beq.n	800a0ce <HAL_TIM_PWM_Init+0xda>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	2b60      	cmp	r3, #96	; 0x60
 800a0c2:	d004      	beq.n	800a0ce <HAL_TIM_PWM_Init+0xda>
 800a0c4:	f240 419c 	movw	r1, #1180	; 0x49c
 800a0c8:	482f      	ldr	r0, [pc, #188]	; (800a188 <HAL_TIM_PWM_Init+0x194>)
 800a0ca:	f7f9 fa2e 	bl	800352a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00e      	beq.n	800a0f4 <HAL_TIM_PWM_Init+0x100>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0de:	d009      	beq.n	800a0f4 <HAL_TIM_PWM_Init+0x100>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0e8:	d004      	beq.n	800a0f4 <HAL_TIM_PWM_Init+0x100>
 800a0ea:	f240 419d 	movw	r1, #1181	; 0x49d
 800a0ee:	4826      	ldr	r0, [pc, #152]	; (800a188 <HAL_TIM_PWM_Init+0x194>)
 800a0f0:	f7f9 fa1b 	bl	800352a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d008      	beq.n	800a10e <HAL_TIM_PWM_Init+0x11a>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	2b80      	cmp	r3, #128	; 0x80
 800a102:	d004      	beq.n	800a10e <HAL_TIM_PWM_Init+0x11a>
 800a104:	f240 419e 	movw	r1, #1182	; 0x49e
 800a108:	481f      	ldr	r0, [pc, #124]	; (800a188 <HAL_TIM_PWM_Init+0x194>)
 800a10a:	f7f9 fa0e 	bl	800352a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f832 	bl	800a18c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3304      	adds	r3, #4
 800a138:	4619      	mov	r1, r3
 800a13a:	4610      	mov	r0, r2
 800a13c:	f001 f90c 	bl	800b358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	40010000 	.word	0x40010000
 800a158:	40000400 	.word	0x40000400
 800a15c:	40000800 	.word	0x40000800
 800a160:	40000c00 	.word	0x40000c00
 800a164:	40001000 	.word	0x40001000
 800a168:	40001400 	.word	0x40001400
 800a16c:	40010400 	.word	0x40010400
 800a170:	40014000 	.word	0x40014000
 800a174:	40014400 	.word	0x40014400
 800a178:	40014800 	.word	0x40014800
 800a17c:	40001800 	.word	0x40001800
 800a180:	40001c00 	.word	0x40001c00
 800a184:	40002000 	.word	0x40002000
 800a188:	0800fb14 	.word	0x0800fb14

0800a18c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a6d      	ldr	r2, [pc, #436]	; (800a364 <HAL_TIM_PWM_Start+0x1c4>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d10f      	bne.n	800a1d4 <HAL_TIM_PWM_Start+0x34>
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 809f 	beq.w	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	f000 809b 	beq.w	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b08      	cmp	r3, #8
 800a1c8:	f000 8097 	beq.w	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b0c      	cmp	r3, #12
 800a1d0:	f000 8093 	beq.w	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1dc:	d10e      	bne.n	800a1fc <HAL_TIM_PWM_Start+0x5c>
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 808a 	beq.w	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	f000 8086 	beq.w	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b08      	cmp	r3, #8
 800a1f2:	f000 8082 	beq.w	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b0c      	cmp	r3, #12
 800a1fa:	d07e      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a59      	ldr	r2, [pc, #356]	; (800a368 <HAL_TIM_PWM_Start+0x1c8>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d10b      	bne.n	800a21e <HAL_TIM_PWM_Start+0x7e>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d076      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2b04      	cmp	r3, #4
 800a210:	d073      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2b08      	cmp	r3, #8
 800a216:	d070      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b0c      	cmp	r3, #12
 800a21c:	d06d      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a52      	ldr	r2, [pc, #328]	; (800a36c <HAL_TIM_PWM_Start+0x1cc>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d10b      	bne.n	800a240 <HAL_TIM_PWM_Start+0xa0>
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d065      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b04      	cmp	r3, #4
 800a232:	d062      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2b08      	cmp	r3, #8
 800a238:	d05f      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b0c      	cmp	r3, #12
 800a23e:	d05c      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a4a      	ldr	r2, [pc, #296]	; (800a370 <HAL_TIM_PWM_Start+0x1d0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d10b      	bne.n	800a262 <HAL_TIM_PWM_Start+0xc2>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d054      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2b04      	cmp	r3, #4
 800a254:	d051      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b08      	cmp	r3, #8
 800a25a:	d04e      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b0c      	cmp	r3, #12
 800a260:	d04b      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a43      	ldr	r2, [pc, #268]	; (800a374 <HAL_TIM_PWM_Start+0x1d4>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d10b      	bne.n	800a284 <HAL_TIM_PWM_Start+0xe4>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d043      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b04      	cmp	r3, #4
 800a276:	d040      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	2b08      	cmp	r3, #8
 800a27c:	d03d      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b0c      	cmp	r3, #12
 800a282:	d03a      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a3b      	ldr	r2, [pc, #236]	; (800a378 <HAL_TIM_PWM_Start+0x1d8>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d105      	bne.n	800a29a <HAL_TIM_PWM_Start+0xfa>
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d032      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	2b04      	cmp	r3, #4
 800a298:	d02f      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a37      	ldr	r2, [pc, #220]	; (800a37c <HAL_TIM_PWM_Start+0x1dc>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d102      	bne.n	800a2aa <HAL_TIM_PWM_Start+0x10a>
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d027      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a34      	ldr	r2, [pc, #208]	; (800a380 <HAL_TIM_PWM_Start+0x1e0>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d102      	bne.n	800a2ba <HAL_TIM_PWM_Start+0x11a>
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d01f      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a31      	ldr	r2, [pc, #196]	; (800a384 <HAL_TIM_PWM_Start+0x1e4>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d105      	bne.n	800a2d0 <HAL_TIM_PWM_Start+0x130>
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d017      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d014      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a2c      	ldr	r2, [pc, #176]	; (800a388 <HAL_TIM_PWM_Start+0x1e8>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d102      	bne.n	800a2e0 <HAL_TIM_PWM_Start+0x140>
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00c      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a29      	ldr	r2, [pc, #164]	; (800a38c <HAL_TIM_PWM_Start+0x1ec>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d102      	bne.n	800a2f0 <HAL_TIM_PWM_Start+0x150>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d004      	beq.n	800a2fa <HAL_TIM_PWM_Start+0x15a>
 800a2f0:	f240 5113 	movw	r1, #1299	; 0x513
 800a2f4:	4826      	ldr	r0, [pc, #152]	; (800a390 <HAL_TIM_PWM_Start+0x1f0>)
 800a2f6:	f7f9 f918 	bl	800352a <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2201      	movs	r2, #1
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f001 fcc6 	bl	800bc94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a15      	ldr	r2, [pc, #84]	; (800a364 <HAL_TIM_PWM_Start+0x1c4>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d004      	beq.n	800a31c <HAL_TIM_PWM_Start+0x17c>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a17      	ldr	r2, [pc, #92]	; (800a374 <HAL_TIM_PWM_Start+0x1d4>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d101      	bne.n	800a320 <HAL_TIM_PWM_Start+0x180>
 800a31c:	2301      	movs	r3, #1
 800a31e:	e000      	b.n	800a322 <HAL_TIM_PWM_Start+0x182>
 800a320:	2300      	movs	r3, #0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d007      	beq.n	800a336 <HAL_TIM_PWM_Start+0x196>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a334:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f003 0307 	and.w	r3, r3, #7
 800a340:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2b06      	cmp	r3, #6
 800a346:	d007      	beq.n	800a358 <HAL_TIM_PWM_Start+0x1b8>
  {
    __HAL_TIM_ENABLE(htim);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f042 0201 	orr.w	r2, r2, #1
 800a356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	40010000 	.word	0x40010000
 800a368:	40000400 	.word	0x40000400
 800a36c:	40000800 	.word	0x40000800
 800a370:	40000c00 	.word	0x40000c00
 800a374:	40010400 	.word	0x40010400
 800a378:	40014000 	.word	0x40014000
 800a37c:	40014400 	.word	0x40014400
 800a380:	40014800 	.word	0x40014800
 800a384:	40001800 	.word	0x40001800
 800a388:	40001c00 	.word	0x40001c00
 800a38c:	40002000 	.word	0x40002000
 800a390:	0800fb14 	.word	0x0800fb14

0800a394 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e0a1      	b.n	800a4ea <HAL_TIM_IC_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a52      	ldr	r2, [pc, #328]	; (800a4f4 <HAL_TIM_IC_Init+0x160>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d045      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3b8:	d040      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a4e      	ldr	r2, [pc, #312]	; (800a4f8 <HAL_TIM_IC_Init+0x164>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d03b      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a4c      	ldr	r2, [pc, #304]	; (800a4fc <HAL_TIM_IC_Init+0x168>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d036      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a4b      	ldr	r2, [pc, #300]	; (800a500 <HAL_TIM_IC_Init+0x16c>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d031      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a49      	ldr	r2, [pc, #292]	; (800a504 <HAL_TIM_IC_Init+0x170>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d02c      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a48      	ldr	r2, [pc, #288]	; (800a508 <HAL_TIM_IC_Init+0x174>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d027      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a46      	ldr	r2, [pc, #280]	; (800a50c <HAL_TIM_IC_Init+0x178>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d022      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a45      	ldr	r2, [pc, #276]	; (800a510 <HAL_TIM_IC_Init+0x17c>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d01d      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a43      	ldr	r2, [pc, #268]	; (800a514 <HAL_TIM_IC_Init+0x180>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d018      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a42      	ldr	r2, [pc, #264]	; (800a518 <HAL_TIM_IC_Init+0x184>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d013      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a40      	ldr	r2, [pc, #256]	; (800a51c <HAL_TIM_IC_Init+0x188>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d00e      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a3f      	ldr	r2, [pc, #252]	; (800a520 <HAL_TIM_IC_Init+0x18c>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d009      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a3d      	ldr	r2, [pc, #244]	; (800a524 <HAL_TIM_IC_Init+0x190>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d004      	beq.n	800a43c <HAL_TIM_IC_Init+0xa8>
 800a432:	f240 61d9 	movw	r1, #1753	; 0x6d9
 800a436:	483c      	ldr	r0, [pc, #240]	; (800a528 <HAL_TIM_IC_Init+0x194>)
 800a438:	f7f9 f877 	bl	800352a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d014      	beq.n	800a46e <HAL_TIM_IC_Init+0xda>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	2b10      	cmp	r3, #16
 800a44a:	d010      	beq.n	800a46e <HAL_TIM_IC_Init+0xda>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	2b20      	cmp	r3, #32
 800a452:	d00c      	beq.n	800a46e <HAL_TIM_IC_Init+0xda>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	2b40      	cmp	r3, #64	; 0x40
 800a45a:	d008      	beq.n	800a46e <HAL_TIM_IC_Init+0xda>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	2b60      	cmp	r3, #96	; 0x60
 800a462:	d004      	beq.n	800a46e <HAL_TIM_IC_Init+0xda>
 800a464:	f240 61da 	movw	r1, #1754	; 0x6da
 800a468:	482f      	ldr	r0, [pc, #188]	; (800a528 <HAL_TIM_IC_Init+0x194>)
 800a46a:	f7f9 f85e 	bl	800352a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00e      	beq.n	800a494 <HAL_TIM_IC_Init+0x100>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a47e:	d009      	beq.n	800a494 <HAL_TIM_IC_Init+0x100>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a488:	d004      	beq.n	800a494 <HAL_TIM_IC_Init+0x100>
 800a48a:	f240 61db 	movw	r1, #1755	; 0x6db
 800a48e:	4826      	ldr	r0, [pc, #152]	; (800a528 <HAL_TIM_IC_Init+0x194>)
 800a490:	f7f9 f84b 	bl	800352a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d008      	beq.n	800a4ae <HAL_TIM_IC_Init+0x11a>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	2b80      	cmp	r3, #128	; 0x80
 800a4a2:	d004      	beq.n	800a4ae <HAL_TIM_IC_Init+0x11a>
 800a4a4:	f240 61dc 	movw	r1, #1756	; 0x6dc
 800a4a8:	481f      	ldr	r0, [pc, #124]	; (800a528 <HAL_TIM_IC_Init+0x194>)
 800a4aa:	f7f9 f83e 	bl	800352a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d106      	bne.n	800a4c8 <HAL_TIM_IC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f832 	bl	800a52c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4610      	mov	r0, r2
 800a4dc:	f000 ff3c 	bl	800b358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	40010000 	.word	0x40010000
 800a4f8:	40000400 	.word	0x40000400
 800a4fc:	40000800 	.word	0x40000800
 800a500:	40000c00 	.word	0x40000c00
 800a504:	40001000 	.word	0x40001000
 800a508:	40001400 	.word	0x40001400
 800a50c:	40010400 	.word	0x40010400
 800a510:	40014000 	.word	0x40014000
 800a514:	40014400 	.word	0x40014400
 800a518:	40014800 	.word	0x40014800
 800a51c:	40001800 	.word	0x40001800
 800a520:	40001c00 	.word	0x40001c00
 800a524:	40002000 	.word	0x40002000
 800a528:	0800fb14 	.word	0x0800fb14

0800a52c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a7c      	ldr	r2, [pc, #496]	; (800a744 <HAL_TIM_IC_ConfigChannel+0x204>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d03b      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a55e:	d036      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a78      	ldr	r2, [pc, #480]	; (800a748 <HAL_TIM_IC_ConfigChannel+0x208>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d031      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a77      	ldr	r2, [pc, #476]	; (800a74c <HAL_TIM_IC_ConfigChannel+0x20c>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d02c      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a75      	ldr	r2, [pc, #468]	; (800a750 <HAL_TIM_IC_ConfigChannel+0x210>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d027      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a74      	ldr	r2, [pc, #464]	; (800a754 <HAL_TIM_IC_ConfigChannel+0x214>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d022      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a72      	ldr	r2, [pc, #456]	; (800a758 <HAL_TIM_IC_ConfigChannel+0x218>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d01d      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a71      	ldr	r2, [pc, #452]	; (800a75c <HAL_TIM_IC_ConfigChannel+0x21c>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d018      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a6f      	ldr	r2, [pc, #444]	; (800a760 <HAL_TIM_IC_ConfigChannel+0x220>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d013      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a6e      	ldr	r2, [pc, #440]	; (800a764 <HAL_TIM_IC_ConfigChannel+0x224>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d00e      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a6c      	ldr	r2, [pc, #432]	; (800a768 <HAL_TIM_IC_ConfigChannel+0x228>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d009      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a6b      	ldr	r2, [pc, #428]	; (800a76c <HAL_TIM_IC_ConfigChannel+0x22c>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d004      	beq.n	800a5ce <HAL_TIM_IC_ConfigChannel+0x8e>
 800a5c4:	f640 5189 	movw	r1, #3465	; 0xd89
 800a5c8:	4869      	ldr	r0, [pc, #420]	; (800a770 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a5ca:	f7f8 ffae 	bl	800352a <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00c      	beq.n	800a5f0 <HAL_TIM_IC_ConfigChannel+0xb0>
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d008      	beq.n	800a5f0 <HAL_TIM_IC_ConfigChannel+0xb0>
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b0a      	cmp	r3, #10
 800a5e4:	d004      	beq.n	800a5f0 <HAL_TIM_IC_ConfigChannel+0xb0>
 800a5e6:	f640 518a 	movw	r1, #3466	; 0xd8a
 800a5ea:	4861      	ldr	r0, [pc, #388]	; (800a770 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a5ec:	f7f8 ff9d 	bl	800352a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d00c      	beq.n	800a612 <HAL_TIM_IC_ConfigChannel+0xd2>
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d008      	beq.n	800a612 <HAL_TIM_IC_ConfigChannel+0xd2>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	2b03      	cmp	r3, #3
 800a606:	d004      	beq.n	800a612 <HAL_TIM_IC_ConfigChannel+0xd2>
 800a608:	f640 518b 	movw	r1, #3467	; 0xd8b
 800a60c:	4858      	ldr	r0, [pc, #352]	; (800a770 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a60e:	f7f8 ff8c 	bl	800352a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d010      	beq.n	800a63c <HAL_TIM_IC_ConfigChannel+0xfc>
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d00c      	beq.n	800a63c <HAL_TIM_IC_ConfigChannel+0xfc>
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	2b08      	cmp	r3, #8
 800a628:	d008      	beq.n	800a63c <HAL_TIM_IC_ConfigChannel+0xfc>
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	2b0c      	cmp	r3, #12
 800a630:	d004      	beq.n	800a63c <HAL_TIM_IC_ConfigChannel+0xfc>
 800a632:	f640 518c 	movw	r1, #3468	; 0xd8c
 800a636:	484e      	ldr	r0, [pc, #312]	; (800a770 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a638:	f7f8 ff77 	bl	800352a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	2b0f      	cmp	r3, #15
 800a642:	d904      	bls.n	800a64e <HAL_TIM_IC_ConfigChannel+0x10e>
 800a644:	f640 518d 	movw	r1, #3469	; 0xd8d
 800a648:	4849      	ldr	r0, [pc, #292]	; (800a770 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a64a:	f7f8 ff6e 	bl	800352a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a654:	2b01      	cmp	r3, #1
 800a656:	d101      	bne.n	800a65c <HAL_TIM_IC_ConfigChannel+0x11c>
 800a658:	2302      	movs	r3, #2
 800a65a:	e115      	b.n	800a888 <HAL_TIM_IC_ConfigChannel+0x348>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2202      	movs	r2, #2
 800a668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d11b      	bne.n	800a6aa <HAL_TIM_IC_ConfigChannel+0x16a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6818      	ldr	r0, [r3, #0]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	6819      	ldr	r1, [r3, #0]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	f001 f943 	bl	800b90c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	699a      	ldr	r2, [r3, #24]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f022 020c 	bic.w	r2, r2, #12
 800a694:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6999      	ldr	r1, [r3, #24]
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	689a      	ldr	r2, [r3, #8]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	619a      	str	r2, [r3, #24]
 800a6a8:	e0e5      	b.n	800a876 <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b04      	cmp	r3, #4
 800a6ae:	d161      	bne.n	800a774 <HAL_TIM_IC_ConfigChannel+0x234>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a23      	ldr	r2, [pc, #140]	; (800a744 <HAL_TIM_IC_ConfigChannel+0x204>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d027      	beq.n	800a70a <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c2:	d022      	beq.n	800a70a <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a1f      	ldr	r2, [pc, #124]	; (800a748 <HAL_TIM_IC_ConfigChannel+0x208>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d01d      	beq.n	800a70a <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a1e      	ldr	r2, [pc, #120]	; (800a74c <HAL_TIM_IC_ConfigChannel+0x20c>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d018      	beq.n	800a70a <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a1c      	ldr	r2, [pc, #112]	; (800a750 <HAL_TIM_IC_ConfigChannel+0x210>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d013      	beq.n	800a70a <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a1b      	ldr	r2, [pc, #108]	; (800a754 <HAL_TIM_IC_ConfigChannel+0x214>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d00e      	beq.n	800a70a <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a19      	ldr	r2, [pc, #100]	; (800a758 <HAL_TIM_IC_ConfigChannel+0x218>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d009      	beq.n	800a70a <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a1a      	ldr	r2, [pc, #104]	; (800a764 <HAL_TIM_IC_ConfigChannel+0x224>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d004      	beq.n	800a70a <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a700:	f640 51a5 	movw	r1, #3493	; 0xda5
 800a704:	481a      	ldr	r0, [pc, #104]	; (800a770 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a706:	f7f8 ff10 	bl	800352a <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6818      	ldr	r0, [r3, #0]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	6819      	ldr	r1, [r3, #0]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	f001 f99a 	bl	800ba52 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	699a      	ldr	r2, [r3, #24]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a72c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6999      	ldr	r1, [r3, #24]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	021a      	lsls	r2, r3, #8
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	619a      	str	r2, [r3, #24]
 800a742:	e098      	b.n	800a876 <HAL_TIM_IC_ConfigChannel+0x336>
 800a744:	40010000 	.word	0x40010000
 800a748:	40000400 	.word	0x40000400
 800a74c:	40000800 	.word	0x40000800
 800a750:	40000c00 	.word	0x40000c00
 800a754:	40010400 	.word	0x40010400
 800a758:	40014000 	.word	0x40014000
 800a75c:	40014400 	.word	0x40014400
 800a760:	40014800 	.word	0x40014800
 800a764:	40001800 	.word	0x40001800
 800a768:	40001c00 	.word	0x40001c00
 800a76c:	40002000 	.word	0x40002000
 800a770:	0800fb14 	.word	0x0800fb14
  }
  else if (Channel == TIM_CHANNEL_3)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b08      	cmp	r3, #8
 800a778:	d13e      	bne.n	800a7f8 <HAL_TIM_IC_ConfigChannel+0x2b8>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a44      	ldr	r2, [pc, #272]	; (800a890 <HAL_TIM_IC_ConfigChannel+0x350>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d01d      	beq.n	800a7c0 <HAL_TIM_IC_ConfigChannel+0x280>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a78c:	d018      	beq.n	800a7c0 <HAL_TIM_IC_ConfigChannel+0x280>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a40      	ldr	r2, [pc, #256]	; (800a894 <HAL_TIM_IC_ConfigChannel+0x354>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d013      	beq.n	800a7c0 <HAL_TIM_IC_ConfigChannel+0x280>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a3e      	ldr	r2, [pc, #248]	; (800a898 <HAL_TIM_IC_ConfigChannel+0x358>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d00e      	beq.n	800a7c0 <HAL_TIM_IC_ConfigChannel+0x280>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a3d      	ldr	r2, [pc, #244]	; (800a89c <HAL_TIM_IC_ConfigChannel+0x35c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d009      	beq.n	800a7c0 <HAL_TIM_IC_ConfigChannel+0x280>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a3b      	ldr	r2, [pc, #236]	; (800a8a0 <HAL_TIM_IC_ConfigChannel+0x360>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d004      	beq.n	800a7c0 <HAL_TIM_IC_ConfigChannel+0x280>
 800a7b6:	f640 51b5 	movw	r1, #3509	; 0xdb5
 800a7ba:	483a      	ldr	r0, [pc, #232]	; (800a8a4 <HAL_TIM_IC_ConfigChannel+0x364>)
 800a7bc:	f7f8 feb5 	bl	800352a <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6818      	ldr	r0, [r3, #0]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	6819      	ldr	r1, [r3, #0]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	f001 f9ac 	bl	800bb2c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	69da      	ldr	r2, [r3, #28]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f022 020c 	bic.w	r2, r2, #12
 800a7e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	69d9      	ldr	r1, [r3, #28]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	61da      	str	r2, [r3, #28]
 800a7f6:	e03e      	b.n	800a876 <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a24      	ldr	r2, [pc, #144]	; (800a890 <HAL_TIM_IC_ConfigChannel+0x350>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d01d      	beq.n	800a83e <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a80a:	d018      	beq.n	800a83e <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a20      	ldr	r2, [pc, #128]	; (800a894 <HAL_TIM_IC_ConfigChannel+0x354>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d013      	beq.n	800a83e <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a1f      	ldr	r2, [pc, #124]	; (800a898 <HAL_TIM_IC_ConfigChannel+0x358>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d00e      	beq.n	800a83e <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a1d      	ldr	r2, [pc, #116]	; (800a89c <HAL_TIM_IC_ConfigChannel+0x35c>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d009      	beq.n	800a83e <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a1c      	ldr	r2, [pc, #112]	; (800a8a0 <HAL_TIM_IC_ConfigChannel+0x360>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d004      	beq.n	800a83e <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a834:	f640 51c5 	movw	r1, #3525	; 0xdc5
 800a838:	481a      	ldr	r0, [pc, #104]	; (800a8a4 <HAL_TIM_IC_ConfigChannel+0x364>)
 800a83a:	f7f8 fe76 	bl	800352a <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	6819      	ldr	r1, [r3, #0]
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	685a      	ldr	r2, [r3, #4]
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	f001 f9a9 	bl	800bba4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	69da      	ldr	r2, [r3, #28]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a860:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	69d9      	ldr	r1, [r3, #28]
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	021a      	lsls	r2, r3, #8
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	430a      	orrs	r2, r1
 800a874:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	40010000 	.word	0x40010000
 800a894:	40000400 	.word	0x40000400
 800a898:	40000800 	.word	0x40000800
 800a89c:	40000c00 	.word	0x40000c00
 800a8a0:	40010400 	.word	0x40010400
 800a8a4:	0800fb14 	.word	0x0800fb14

0800a8a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d010      	beq.n	800a8dc <HAL_TIM_PWM_ConfigChannel+0x34>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	d00d      	beq.n	800a8dc <HAL_TIM_PWM_ConfigChannel+0x34>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b08      	cmp	r3, #8
 800a8c4:	d00a      	beq.n	800a8dc <HAL_TIM_PWM_ConfigChannel+0x34>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b0c      	cmp	r3, #12
 800a8ca:	d007      	beq.n	800a8dc <HAL_TIM_PWM_ConfigChannel+0x34>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b3c      	cmp	r3, #60	; 0x3c
 800a8d0:	d004      	beq.n	800a8dc <HAL_TIM_PWM_ConfigChannel+0x34>
 800a8d2:	f640 51ec 	movw	r1, #3564	; 0xdec
 800a8d6:	4885      	ldr	r0, [pc, #532]	; (800aaec <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a8d8:	f7f8 fe27 	bl	800352a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b60      	cmp	r3, #96	; 0x60
 800a8e2:	d008      	beq.n	800a8f6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b70      	cmp	r3, #112	; 0x70
 800a8ea:	d004      	beq.n	800a8f6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 800a8ec:	f640 51ed 	movw	r1, #3565	; 0xded
 800a8f0:	487e      	ldr	r0, [pc, #504]	; (800aaec <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a8f2:	f7f8 fe1a 	bl	800352a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d008      	beq.n	800a910 <HAL_TIM_PWM_ConfigChannel+0x68>
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	2b02      	cmp	r3, #2
 800a904:	d004      	beq.n	800a910 <HAL_TIM_PWM_ConfigChannel+0x68>
 800a906:	f640 51ee 	movw	r1, #3566	; 0xdee
 800a90a:	4878      	ldr	r0, [pc, #480]	; (800aaec <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a90c:	f7f8 fe0d 	bl	800352a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d008      	beq.n	800a92a <HAL_TIM_PWM_ConfigChannel+0x82>
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	d004      	beq.n	800a92a <HAL_TIM_PWM_ConfigChannel+0x82>
 800a920:	f640 51ef 	movw	r1, #3567	; 0xdef
 800a924:	4871      	ldr	r0, [pc, #452]	; (800aaec <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a926:	f7f8 fe00 	bl	800352a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a930:	2b01      	cmp	r3, #1
 800a932:	d101      	bne.n	800a938 <HAL_TIM_PWM_ConfigChannel+0x90>
 800a934:	2302      	movs	r3, #2
 800a936:	e182      	b.n	800ac3e <HAL_TIM_PWM_ConfigChannel+0x396>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2202      	movs	r2, #2
 800a944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b0c      	cmp	r3, #12
 800a94c:	f200 816d 	bhi.w	800ac2a <HAL_TIM_PWM_ConfigChannel+0x382>
 800a950:	a201      	add	r2, pc, #4	; (adr r2, 800a958 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 800a952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a956:	bf00      	nop
 800a958:	0800a98d 	.word	0x0800a98d
 800a95c:	0800ac2b 	.word	0x0800ac2b
 800a960:	0800ac2b 	.word	0x0800ac2b
 800a964:	0800ac2b 	.word	0x0800ac2b
 800a968:	0800aa4f 	.word	0x0800aa4f
 800a96c:	0800ac2b 	.word	0x0800ac2b
 800a970:	0800ac2b 	.word	0x0800ac2b
 800a974:	0800ac2b 	.word	0x0800ac2b
 800a978:	0800ab1d 	.word	0x0800ab1d
 800a97c:	0800ac2b 	.word	0x0800ac2b
 800a980:	0800ac2b 	.word	0x0800ac2b
 800a984:	0800ac2b 	.word	0x0800ac2b
 800a988:	0800aba3 	.word	0x0800aba3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a57      	ldr	r2, [pc, #348]	; (800aaf0 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d03b      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a99e:	d036      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a53      	ldr	r2, [pc, #332]	; (800aaf4 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d031      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a52      	ldr	r2, [pc, #328]	; (800aaf8 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d02c      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a50      	ldr	r2, [pc, #320]	; (800aafc <HAL_TIM_PWM_ConfigChannel+0x254>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d027      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a4f      	ldr	r2, [pc, #316]	; (800ab00 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d022      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a4d      	ldr	r2, [pc, #308]	; (800ab04 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d01d      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a4c      	ldr	r2, [pc, #304]	; (800ab08 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d018      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a4a      	ldr	r2, [pc, #296]	; (800ab0c <HAL_TIM_PWM_ConfigChannel+0x264>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d013      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a49      	ldr	r2, [pc, #292]	; (800ab10 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d00e      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a47      	ldr	r2, [pc, #284]	; (800ab14 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d009      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a46      	ldr	r2, [pc, #280]	; (800ab18 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d004      	beq.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x166>
 800aa04:	f640 51fb 	movw	r1, #3579	; 0xdfb
 800aa08:	4838      	ldr	r0, [pc, #224]	; (800aaec <HAL_TIM_PWM_ConfigChannel+0x244>)
 800aa0a:	f7f8 fd8e 	bl	800352a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68b9      	ldr	r1, [r7, #8]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 fd3f 	bl	800b498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	699a      	ldr	r2, [r3, #24]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f042 0208 	orr.w	r2, r2, #8
 800aa28:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	699a      	ldr	r2, [r3, #24]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f022 0204 	bic.w	r2, r2, #4
 800aa38:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6999      	ldr	r1, [r3, #24]
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	691a      	ldr	r2, [r3, #16]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	430a      	orrs	r2, r1
 800aa4a:	619a      	str	r2, [r3, #24]
      break;
 800aa4c:	e0ee      	b.n	800ac2c <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a27      	ldr	r2, [pc, #156]	; (800aaf0 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d027      	beq.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa60:	d022      	beq.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a23      	ldr	r2, [pc, #140]	; (800aaf4 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d01d      	beq.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a21      	ldr	r2, [pc, #132]	; (800aaf8 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d018      	beq.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a20      	ldr	r2, [pc, #128]	; (800aafc <HAL_TIM_PWM_ConfigChannel+0x254>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d013      	beq.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a1e      	ldr	r2, [pc, #120]	; (800ab00 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d00e      	beq.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a1d      	ldr	r2, [pc, #116]	; (800ab04 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d009      	beq.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a1d      	ldr	r2, [pc, #116]	; (800ab10 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d004      	beq.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa9e:	f640 610c 	movw	r1, #3596	; 0xe0c
 800aaa2:	4812      	ldr	r0, [pc, #72]	; (800aaec <HAL_TIM_PWM_ConfigChannel+0x244>)
 800aaa4:	f7f8 fd41 	bl	800352a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fd8c 	bl	800b5cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	699a      	ldr	r2, [r3, #24]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	699a      	ldr	r2, [r3, #24]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6999      	ldr	r1, [r3, #24]
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	021a      	lsls	r2, r3, #8
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	430a      	orrs	r2, r1
 800aae6:	619a      	str	r2, [r3, #24]
      break;
 800aae8:	e0a0      	b.n	800ac2c <HAL_TIM_PWM_ConfigChannel+0x384>
 800aaea:	bf00      	nop
 800aaec:	0800fb14 	.word	0x0800fb14
 800aaf0:	40010000 	.word	0x40010000
 800aaf4:	40000400 	.word	0x40000400
 800aaf8:	40000800 	.word	0x40000800
 800aafc:	40000c00 	.word	0x40000c00
 800ab00:	40010400 	.word	0x40010400
 800ab04:	40014000 	.word	0x40014000
 800ab08:	40014400 	.word	0x40014400
 800ab0c:	40014800 	.word	0x40014800
 800ab10:	40001800 	.word	0x40001800
 800ab14:	40001c00 	.word	0x40001c00
 800ab18:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a49      	ldr	r2, [pc, #292]	; (800ac48 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d01d      	beq.n	800ab62 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab2e:	d018      	beq.n	800ab62 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a45      	ldr	r2, [pc, #276]	; (800ac4c <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d013      	beq.n	800ab62 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a44      	ldr	r2, [pc, #272]	; (800ac50 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d00e      	beq.n	800ab62 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a42      	ldr	r2, [pc, #264]	; (800ac54 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d009      	beq.n	800ab62 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a41      	ldr	r2, [pc, #260]	; (800ac58 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d004      	beq.n	800ab62 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800ab58:	f640 611d 	movw	r1, #3613	; 0xe1d
 800ab5c:	483f      	ldr	r0, [pc, #252]	; (800ac5c <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800ab5e:	f7f8 fce4 	bl	800352a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68b9      	ldr	r1, [r7, #8]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 fdcd 	bl	800b708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	69da      	ldr	r2, [r3, #28]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f042 0208 	orr.w	r2, r2, #8
 800ab7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	69da      	ldr	r2, [r3, #28]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f022 0204 	bic.w	r2, r2, #4
 800ab8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69d9      	ldr	r1, [r3, #28]
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	691a      	ldr	r2, [r3, #16]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	61da      	str	r2, [r3, #28]
      break;
 800aba0:	e044      	b.n	800ac2c <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a28      	ldr	r2, [pc, #160]	; (800ac48 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d01d      	beq.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x340>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abb4:	d018      	beq.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x340>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a24      	ldr	r2, [pc, #144]	; (800ac4c <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d013      	beq.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x340>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a22      	ldr	r2, [pc, #136]	; (800ac50 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d00e      	beq.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x340>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a21      	ldr	r2, [pc, #132]	; (800ac54 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d009      	beq.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x340>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a1f      	ldr	r2, [pc, #124]	; (800ac58 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d004      	beq.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x340>
 800abde:	f640 612e 	movw	r1, #3630	; 0xe2e
 800abe2:	481e      	ldr	r0, [pc, #120]	; (800ac5c <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800abe4:	f7f8 fca1 	bl	800352a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68b9      	ldr	r1, [r7, #8]
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 fe28 	bl	800b844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	69da      	ldr	r2, [r3, #28]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	69da      	ldr	r2, [r3, #28]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	69d9      	ldr	r1, [r3, #28]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	021a      	lsls	r2, r3, #8
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	430a      	orrs	r2, r1
 800ac26:	61da      	str	r2, [r3, #28]
      break;
 800ac28:	e000      	b.n	800ac2c <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      break;
 800ac2a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	40010000 	.word	0x40010000
 800ac4c:	40000400 	.word	0x40000400
 800ac50:	40000800 	.word	0x40000800
 800ac54:	40000c00 	.word	0x40000c00
 800ac58:	40010400 	.word	0x40010400
 800ac5c:	0800fb14 	.word	0x0800fb14

0800ac60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d101      	bne.n	800ac78 <HAL_TIM_ConfigClockSource+0x18>
 800ac74:	2302      	movs	r3, #2
 800ac76:	e35b      	b.n	800b330 <HAL_TIM_ConfigClockSource+0x6d0>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac90:	d029      	beq.n	800ace6 <HAL_TIM_ConfigClockSource+0x86>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac9a:	d024      	beq.n	800ace6 <HAL_TIM_ConfigClockSource+0x86>
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d020      	beq.n	800ace6 <HAL_TIM_ConfigClockSource+0x86>
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b10      	cmp	r3, #16
 800acaa:	d01c      	beq.n	800ace6 <HAL_TIM_ConfigClockSource+0x86>
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b20      	cmp	r3, #32
 800acb2:	d018      	beq.n	800ace6 <HAL_TIM_ConfigClockSource+0x86>
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b30      	cmp	r3, #48	; 0x30
 800acba:	d014      	beq.n	800ace6 <HAL_TIM_ConfigClockSource+0x86>
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b40      	cmp	r3, #64	; 0x40
 800acc2:	d010      	beq.n	800ace6 <HAL_TIM_ConfigClockSource+0x86>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2b50      	cmp	r3, #80	; 0x50
 800acca:	d00c      	beq.n	800ace6 <HAL_TIM_ConfigClockSource+0x86>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b60      	cmp	r3, #96	; 0x60
 800acd2:	d008      	beq.n	800ace6 <HAL_TIM_ConfigClockSource+0x86>
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b70      	cmp	r3, #112	; 0x70
 800acda:	d004      	beq.n	800ace6 <HAL_TIM_ConfigClockSource+0x86>
 800acdc:	f241 118b 	movw	r1, #4491	; 0x118b
 800ace0:	4893      	ldr	r0, [pc, #588]	; (800af30 <HAL_TIM_ConfigClockSource+0x2d0>)
 800ace2:	f7f8 fc22 	bl	800352a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800acf4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acfc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad0e:	f000 812b 	beq.w	800af68 <HAL_TIM_ConfigClockSource+0x308>
 800ad12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad16:	f200 82ff 	bhi.w	800b318 <HAL_TIM_ConfigClockSource+0x6b8>
 800ad1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad1e:	d02e      	beq.n	800ad7e <HAL_TIM_ConfigClockSource+0x11e>
 800ad20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad24:	f200 82f8 	bhi.w	800b318 <HAL_TIM_ConfigClockSource+0x6b8>
 800ad28:	2b70      	cmp	r3, #112	; 0x70
 800ad2a:	f000 8082 	beq.w	800ae32 <HAL_TIM_ConfigClockSource+0x1d2>
 800ad2e:	2b70      	cmp	r3, #112	; 0x70
 800ad30:	f200 82f2 	bhi.w	800b318 <HAL_TIM_ConfigClockSource+0x6b8>
 800ad34:	2b60      	cmp	r3, #96	; 0x60
 800ad36:	f000 81e8 	beq.w	800b10a <HAL_TIM_ConfigClockSource+0x4aa>
 800ad3a:	2b60      	cmp	r3, #96	; 0x60
 800ad3c:	f200 82ec 	bhi.w	800b318 <HAL_TIM_ConfigClockSource+0x6b8>
 800ad40:	2b50      	cmp	r3, #80	; 0x50
 800ad42:	f000 8182 	beq.w	800b04a <HAL_TIM_ConfigClockSource+0x3ea>
 800ad46:	2b50      	cmp	r3, #80	; 0x50
 800ad48:	f200 82e6 	bhi.w	800b318 <HAL_TIM_ConfigClockSource+0x6b8>
 800ad4c:	2b40      	cmp	r3, #64	; 0x40
 800ad4e:	f000 824d 	beq.w	800b1ec <HAL_TIM_ConfigClockSource+0x58c>
 800ad52:	2b40      	cmp	r3, #64	; 0x40
 800ad54:	f200 82e0 	bhi.w	800b318 <HAL_TIM_ConfigClockSource+0x6b8>
 800ad58:	2b30      	cmp	r3, #48	; 0x30
 800ad5a:	f000 82a7 	beq.w	800b2ac <HAL_TIM_ConfigClockSource+0x64c>
 800ad5e:	2b30      	cmp	r3, #48	; 0x30
 800ad60:	f200 82da 	bhi.w	800b318 <HAL_TIM_ConfigClockSource+0x6b8>
 800ad64:	2b20      	cmp	r3, #32
 800ad66:	f000 82a1 	beq.w	800b2ac <HAL_TIM_ConfigClockSource+0x64c>
 800ad6a:	2b20      	cmp	r3, #32
 800ad6c:	f200 82d4 	bhi.w	800b318 <HAL_TIM_ConfigClockSource+0x6b8>
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 829b 	beq.w	800b2ac <HAL_TIM_ConfigClockSource+0x64c>
 800ad76:	2b10      	cmp	r3, #16
 800ad78:	f000 8298 	beq.w	800b2ac <HAL_TIM_ConfigClockSource+0x64c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ad7c:	e2cc      	b.n	800b318 <HAL_TIM_ConfigClockSource+0x6b8>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a6c      	ldr	r2, [pc, #432]	; (800af34 <HAL_TIM_ConfigClockSource+0x2d4>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	f000 82c9 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad92:	f000 82c3 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a67      	ldr	r2, [pc, #412]	; (800af38 <HAL_TIM_ConfigClockSource+0x2d8>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	f000 82bd 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a65      	ldr	r2, [pc, #404]	; (800af3c <HAL_TIM_ConfigClockSource+0x2dc>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	f000 82b7 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a63      	ldr	r2, [pc, #396]	; (800af40 <HAL_TIM_ConfigClockSource+0x2e0>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	f000 82b1 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a61      	ldr	r2, [pc, #388]	; (800af44 <HAL_TIM_ConfigClockSource+0x2e4>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	f000 82ab 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a5f      	ldr	r2, [pc, #380]	; (800af48 <HAL_TIM_ConfigClockSource+0x2e8>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	f000 82a5 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a5d      	ldr	r2, [pc, #372]	; (800af4c <HAL_TIM_ConfigClockSource+0x2ec>)
 800add8:	4293      	cmp	r3, r2
 800adda:	f000 829f 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a5b      	ldr	r2, [pc, #364]	; (800af50 <HAL_TIM_ConfigClockSource+0x2f0>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	f000 8299 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a59      	ldr	r2, [pc, #356]	; (800af54 <HAL_TIM_ConfigClockSource+0x2f4>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	f000 8293 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a57      	ldr	r2, [pc, #348]	; (800af58 <HAL_TIM_ConfigClockSource+0x2f8>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	f000 828d 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a55      	ldr	r2, [pc, #340]	; (800af5c <HAL_TIM_ConfigClockSource+0x2fc>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	f000 8287 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a53      	ldr	r2, [pc, #332]	; (800af60 <HAL_TIM_ConfigClockSource+0x300>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	f000 8281 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a51      	ldr	r2, [pc, #324]	; (800af64 <HAL_TIM_ConfigClockSource+0x304>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	f000 827b 	beq.w	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
 800ae26:	f241 1197 	movw	r1, #4503	; 0x1197
 800ae2a:	4841      	ldr	r0, [pc, #260]	; (800af30 <HAL_TIM_ConfigClockSource+0x2d0>)
 800ae2c:	f7f8 fb7d 	bl	800352a <assert_failed>
      break;
 800ae30:	e274      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x6bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a3f      	ldr	r2, [pc, #252]	; (800af34 <HAL_TIM_ConfigClockSource+0x2d4>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d027      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x22c>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae44:	d022      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x22c>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a3b      	ldr	r2, [pc, #236]	; (800af38 <HAL_TIM_ConfigClockSource+0x2d8>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d01d      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x22c>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a39      	ldr	r2, [pc, #228]	; (800af3c <HAL_TIM_ConfigClockSource+0x2dc>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d018      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x22c>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a38      	ldr	r2, [pc, #224]	; (800af40 <HAL_TIM_ConfigClockSource+0x2e0>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d013      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x22c>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a38      	ldr	r2, [pc, #224]	; (800af4c <HAL_TIM_ConfigClockSource+0x2ec>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d00e      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x22c>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a37      	ldr	r2, [pc, #220]	; (800af50 <HAL_TIM_ConfigClockSource+0x2f0>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d009      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x22c>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a37      	ldr	r2, [pc, #220]	; (800af5c <HAL_TIM_ConfigClockSource+0x2fc>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d004      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x22c>
 800ae82:	f241 119e 	movw	r1, #4510	; 0x119e
 800ae86:	482a      	ldr	r0, [pc, #168]	; (800af30 <HAL_TIM_ConfigClockSource+0x2d0>)
 800ae88:	f7f8 fb4f 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d013      	beq.n	800aebc <HAL_TIM_ConfigClockSource+0x25c>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae9c:	d00e      	beq.n	800aebc <HAL_TIM_ConfigClockSource+0x25c>
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aea6:	d009      	beq.n	800aebc <HAL_TIM_ConfigClockSource+0x25c>
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aeb0:	d004      	beq.n	800aebc <HAL_TIM_ConfigClockSource+0x25c>
 800aeb2:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800aeb6:	481e      	ldr	r0, [pc, #120]	; (800af30 <HAL_TIM_ConfigClockSource+0x2d0>)
 800aeb8:	f7f8 fb37 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aec4:	d014      	beq.n	800aef0 <HAL_TIM_ConfigClockSource+0x290>
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d010      	beq.n	800aef0 <HAL_TIM_ConfigClockSource+0x290>
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00c      	beq.n	800aef0 <HAL_TIM_ConfigClockSource+0x290>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d008      	beq.n	800aef0 <HAL_TIM_ConfigClockSource+0x290>
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	2b0a      	cmp	r3, #10
 800aee4:	d004      	beq.n	800aef0 <HAL_TIM_ConfigClockSource+0x290>
 800aee6:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800aeea:	4811      	ldr	r0, [pc, #68]	; (800af30 <HAL_TIM_ConfigClockSource+0x2d0>)
 800aeec:	f7f8 fb1d 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	2b0f      	cmp	r3, #15
 800aef6:	d904      	bls.n	800af02 <HAL_TIM_ConfigClockSource+0x2a2>
 800aef8:	f241 11a3 	movw	r1, #4515	; 0x11a3
 800aefc:	480c      	ldr	r0, [pc, #48]	; (800af30 <HAL_TIM_ConfigClockSource+0x2d0>)
 800aefe:	f7f8 fb14 	bl	800352a <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6818      	ldr	r0, [r3, #0]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	6899      	ldr	r1, [r3, #8]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	f000 fe9f 	bl	800bc54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800af24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	609a      	str	r2, [r3, #8]
      break;
 800af2e:	e1f6      	b.n	800b31e <HAL_TIM_ConfigClockSource+0x6be>
 800af30:	0800fb14 	.word	0x0800fb14
 800af34:	40010000 	.word	0x40010000
 800af38:	40000400 	.word	0x40000400
 800af3c:	40000800 	.word	0x40000800
 800af40:	40000c00 	.word	0x40000c00
 800af44:	40001000 	.word	0x40001000
 800af48:	40001400 	.word	0x40001400
 800af4c:	40010400 	.word	0x40010400
 800af50:	40014000 	.word	0x40014000
 800af54:	40014400 	.word	0x40014400
 800af58:	40014800 	.word	0x40014800
 800af5c:	40001800 	.word	0x40001800
 800af60:	40001c00 	.word	0x40001c00
 800af64:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a97      	ldr	r2, [pc, #604]	; (800b1cc <HAL_TIM_ConfigClockSource+0x56c>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d01d      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x34e>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af7a:	d018      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x34e>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a93      	ldr	r2, [pc, #588]	; (800b1d0 <HAL_TIM_ConfigClockSource+0x570>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d013      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x34e>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a92      	ldr	r2, [pc, #584]	; (800b1d4 <HAL_TIM_ConfigClockSource+0x574>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d00e      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x34e>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a90      	ldr	r2, [pc, #576]	; (800b1d8 <HAL_TIM_ConfigClockSource+0x578>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d009      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x34e>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a8f      	ldr	r2, [pc, #572]	; (800b1dc <HAL_TIM_ConfigClockSource+0x57c>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d004      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x34e>
 800afa4:	f241 11b6 	movw	r1, #4534	; 0x11b6
 800afa8:	488d      	ldr	r0, [pc, #564]	; (800b1e0 <HAL_TIM_ConfigClockSource+0x580>)
 800afaa:	f7f8 fabe 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d013      	beq.n	800afde <HAL_TIM_ConfigClockSource+0x37e>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afbe:	d00e      	beq.n	800afde <HAL_TIM_ConfigClockSource+0x37e>
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afc8:	d009      	beq.n	800afde <HAL_TIM_ConfigClockSource+0x37e>
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800afd2:	d004      	beq.n	800afde <HAL_TIM_ConfigClockSource+0x37e>
 800afd4:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800afd8:	4881      	ldr	r0, [pc, #516]	; (800b1e0 <HAL_TIM_ConfigClockSource+0x580>)
 800afda:	f7f8 faa6 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afe6:	d014      	beq.n	800b012 <HAL_TIM_ConfigClockSource+0x3b2>
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d010      	beq.n	800b012 <HAL_TIM_ConfigClockSource+0x3b2>
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00c      	beq.n	800b012 <HAL_TIM_ConfigClockSource+0x3b2>
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	2b02      	cmp	r3, #2
 800affe:	d008      	beq.n	800b012 <HAL_TIM_ConfigClockSource+0x3b2>
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	2b0a      	cmp	r3, #10
 800b006:	d004      	beq.n	800b012 <HAL_TIM_ConfigClockSource+0x3b2>
 800b008:	f241 11ba 	movw	r1, #4538	; 0x11ba
 800b00c:	4874      	ldr	r0, [pc, #464]	; (800b1e0 <HAL_TIM_ConfigClockSource+0x580>)
 800b00e:	f7f8 fa8c 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	2b0f      	cmp	r3, #15
 800b018:	d904      	bls.n	800b024 <HAL_TIM_ConfigClockSource+0x3c4>
 800b01a:	f241 11bb 	movw	r1, #4539	; 0x11bb
 800b01e:	4870      	ldr	r0, [pc, #448]	; (800b1e0 <HAL_TIM_ConfigClockSource+0x580>)
 800b020:	f7f8 fa83 	bl	800352a <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6818      	ldr	r0, [r3, #0]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	6899      	ldr	r1, [r3, #8]
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	f000 fe0e 	bl	800bc54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689a      	ldr	r2, [r3, #8]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b046:	609a      	str	r2, [r3, #8]
      break;
 800b048:	e169      	b.n	800b31e <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a5f      	ldr	r2, [pc, #380]	; (800b1cc <HAL_TIM_ConfigClockSource+0x56c>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d027      	beq.n	800b0a4 <HAL_TIM_ConfigClockSource+0x444>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b05c:	d022      	beq.n	800b0a4 <HAL_TIM_ConfigClockSource+0x444>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a5b      	ldr	r2, [pc, #364]	; (800b1d0 <HAL_TIM_ConfigClockSource+0x570>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d01d      	beq.n	800b0a4 <HAL_TIM_ConfigClockSource+0x444>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a59      	ldr	r2, [pc, #356]	; (800b1d4 <HAL_TIM_ConfigClockSource+0x574>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d018      	beq.n	800b0a4 <HAL_TIM_ConfigClockSource+0x444>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a58      	ldr	r2, [pc, #352]	; (800b1d8 <HAL_TIM_ConfigClockSource+0x578>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d013      	beq.n	800b0a4 <HAL_TIM_ConfigClockSource+0x444>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a56      	ldr	r2, [pc, #344]	; (800b1dc <HAL_TIM_ConfigClockSource+0x57c>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d00e      	beq.n	800b0a4 <HAL_TIM_ConfigClockSource+0x444>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a56      	ldr	r2, [pc, #344]	; (800b1e4 <HAL_TIM_ConfigClockSource+0x584>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d009      	beq.n	800b0a4 <HAL_TIM_ConfigClockSource+0x444>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a54      	ldr	r2, [pc, #336]	; (800b1e8 <HAL_TIM_ConfigClockSource+0x588>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d004      	beq.n	800b0a4 <HAL_TIM_ConfigClockSource+0x444>
 800b09a:	f241 11ca 	movw	r1, #4554	; 0x11ca
 800b09e:	4850      	ldr	r0, [pc, #320]	; (800b1e0 <HAL_TIM_ConfigClockSource+0x580>)
 800b0a0:	f7f8 fa43 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0ac:	d014      	beq.n	800b0d8 <HAL_TIM_ConfigClockSource+0x478>
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d010      	beq.n	800b0d8 <HAL_TIM_ConfigClockSource+0x478>
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00c      	beq.n	800b0d8 <HAL_TIM_ConfigClockSource+0x478>
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d008      	beq.n	800b0d8 <HAL_TIM_ConfigClockSource+0x478>
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	2b0a      	cmp	r3, #10
 800b0cc:	d004      	beq.n	800b0d8 <HAL_TIM_ConfigClockSource+0x478>
 800b0ce:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800b0d2:	4843      	ldr	r0, [pc, #268]	; (800b1e0 <HAL_TIM_ConfigClockSource+0x580>)
 800b0d4:	f7f8 fa29 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	2b0f      	cmp	r3, #15
 800b0de:	d904      	bls.n	800b0ea <HAL_TIM_ConfigClockSource+0x48a>
 800b0e0:	f241 11ce 	movw	r1, #4558	; 0x11ce
 800b0e4:	483e      	ldr	r0, [pc, #248]	; (800b1e0 <HAL_TIM_ConfigClockSource+0x580>)
 800b0e6:	f7f8 fa20 	bl	800352a <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	6859      	ldr	r1, [r3, #4]
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	f000 fc7c 	bl	800b9f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2150      	movs	r1, #80	; 0x50
 800b102:	4618      	mov	r0, r3
 800b104:	f000 fd8b 	bl	800bc1e <TIM_ITRx_SetConfig>
      break;
 800b108:	e109      	b.n	800b31e <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a2f      	ldr	r2, [pc, #188]	; (800b1cc <HAL_TIM_ConfigClockSource+0x56c>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d027      	beq.n	800b164 <HAL_TIM_ConfigClockSource+0x504>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b11c:	d022      	beq.n	800b164 <HAL_TIM_ConfigClockSource+0x504>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a2b      	ldr	r2, [pc, #172]	; (800b1d0 <HAL_TIM_ConfigClockSource+0x570>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d01d      	beq.n	800b164 <HAL_TIM_ConfigClockSource+0x504>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a29      	ldr	r2, [pc, #164]	; (800b1d4 <HAL_TIM_ConfigClockSource+0x574>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d018      	beq.n	800b164 <HAL_TIM_ConfigClockSource+0x504>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a28      	ldr	r2, [pc, #160]	; (800b1d8 <HAL_TIM_ConfigClockSource+0x578>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d013      	beq.n	800b164 <HAL_TIM_ConfigClockSource+0x504>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a26      	ldr	r2, [pc, #152]	; (800b1dc <HAL_TIM_ConfigClockSource+0x57c>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d00e      	beq.n	800b164 <HAL_TIM_ConfigClockSource+0x504>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a26      	ldr	r2, [pc, #152]	; (800b1e4 <HAL_TIM_ConfigClockSource+0x584>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d009      	beq.n	800b164 <HAL_TIM_ConfigClockSource+0x504>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a24      	ldr	r2, [pc, #144]	; (800b1e8 <HAL_TIM_ConfigClockSource+0x588>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d004      	beq.n	800b164 <HAL_TIM_ConfigClockSource+0x504>
 800b15a:	f241 11da 	movw	r1, #4570	; 0x11da
 800b15e:	4820      	ldr	r0, [pc, #128]	; (800b1e0 <HAL_TIM_ConfigClockSource+0x580>)
 800b160:	f7f8 f9e3 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b16c:	d014      	beq.n	800b198 <HAL_TIM_ConfigClockSource+0x538>
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d010      	beq.n	800b198 <HAL_TIM_ConfigClockSource+0x538>
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00c      	beq.n	800b198 <HAL_TIM_ConfigClockSource+0x538>
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	2b02      	cmp	r3, #2
 800b184:	d008      	beq.n	800b198 <HAL_TIM_ConfigClockSource+0x538>
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	2b0a      	cmp	r3, #10
 800b18c:	d004      	beq.n	800b198 <HAL_TIM_ConfigClockSource+0x538>
 800b18e:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800b192:	4813      	ldr	r0, [pc, #76]	; (800b1e0 <HAL_TIM_ConfigClockSource+0x580>)
 800b194:	f7f8 f9c9 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	2b0f      	cmp	r3, #15
 800b19e:	d904      	bls.n	800b1aa <HAL_TIM_ConfigClockSource+0x54a>
 800b1a0:	f241 11de 	movw	r1, #4574	; 0x11de
 800b1a4:	480e      	ldr	r0, [pc, #56]	; (800b1e0 <HAL_TIM_ConfigClockSource+0x580>)
 800b1a6:	f7f8 f9c0 	bl	800352a <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6818      	ldr	r0, [r3, #0]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	6859      	ldr	r1, [r3, #4]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f000 fc88 	bl	800bacc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2160      	movs	r1, #96	; 0x60
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 fd2b 	bl	800bc1e <TIM_ITRx_SetConfig>
      break;
 800b1c8:	e0a9      	b.n	800b31e <HAL_TIM_ConfigClockSource+0x6be>
 800b1ca:	bf00      	nop
 800b1cc:	40010000 	.word	0x40010000
 800b1d0:	40000400 	.word	0x40000400
 800b1d4:	40000800 	.word	0x40000800
 800b1d8:	40000c00 	.word	0x40000c00
 800b1dc:	40010400 	.word	0x40010400
 800b1e0:	0800fb14 	.word	0x0800fb14
 800b1e4:	40014000 	.word	0x40014000
 800b1e8:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a51      	ldr	r2, [pc, #324]	; (800b338 <HAL_TIM_ConfigClockSource+0x6d8>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d027      	beq.n	800b246 <HAL_TIM_ConfigClockSource+0x5e6>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1fe:	d022      	beq.n	800b246 <HAL_TIM_ConfigClockSource+0x5e6>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a4d      	ldr	r2, [pc, #308]	; (800b33c <HAL_TIM_ConfigClockSource+0x6dc>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d01d      	beq.n	800b246 <HAL_TIM_ConfigClockSource+0x5e6>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a4c      	ldr	r2, [pc, #304]	; (800b340 <HAL_TIM_ConfigClockSource+0x6e0>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d018      	beq.n	800b246 <HAL_TIM_ConfigClockSource+0x5e6>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a4a      	ldr	r2, [pc, #296]	; (800b344 <HAL_TIM_ConfigClockSource+0x6e4>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d013      	beq.n	800b246 <HAL_TIM_ConfigClockSource+0x5e6>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a49      	ldr	r2, [pc, #292]	; (800b348 <HAL_TIM_ConfigClockSource+0x6e8>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d00e      	beq.n	800b246 <HAL_TIM_ConfigClockSource+0x5e6>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a47      	ldr	r2, [pc, #284]	; (800b34c <HAL_TIM_ConfigClockSource+0x6ec>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d009      	beq.n	800b246 <HAL_TIM_ConfigClockSource+0x5e6>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a46      	ldr	r2, [pc, #280]	; (800b350 <HAL_TIM_ConfigClockSource+0x6f0>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d004      	beq.n	800b246 <HAL_TIM_ConfigClockSource+0x5e6>
 800b23c:	f241 11ea 	movw	r1, #4586	; 0x11ea
 800b240:	4844      	ldr	r0, [pc, #272]	; (800b354 <HAL_TIM_ConfigClockSource+0x6f4>)
 800b242:	f7f8 f972 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b24e:	d014      	beq.n	800b27a <HAL_TIM_ConfigClockSource+0x61a>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d010      	beq.n	800b27a <HAL_TIM_ConfigClockSource+0x61a>
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00c      	beq.n	800b27a <HAL_TIM_ConfigClockSource+0x61a>
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	2b02      	cmp	r3, #2
 800b266:	d008      	beq.n	800b27a <HAL_TIM_ConfigClockSource+0x61a>
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	2b0a      	cmp	r3, #10
 800b26e:	d004      	beq.n	800b27a <HAL_TIM_ConfigClockSource+0x61a>
 800b270:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800b274:	4837      	ldr	r0, [pc, #220]	; (800b354 <HAL_TIM_ConfigClockSource+0x6f4>)
 800b276:	f7f8 f958 	bl	800352a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	2b0f      	cmp	r3, #15
 800b280:	d904      	bls.n	800b28c <HAL_TIM_ConfigClockSource+0x62c>
 800b282:	f241 11ee 	movw	r1, #4590	; 0x11ee
 800b286:	4833      	ldr	r0, [pc, #204]	; (800b354 <HAL_TIM_ConfigClockSource+0x6f4>)
 800b288:	f7f8 f94f 	bl	800352a <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6818      	ldr	r0, [r3, #0]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	6859      	ldr	r1, [r3, #4]
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	461a      	mov	r2, r3
 800b29a:	f000 fbab 	bl	800b9f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2140      	movs	r1, #64	; 0x40
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f000 fcba 	bl	800bc1e <TIM_ITRx_SetConfig>
      break;
 800b2aa:	e038      	b.n	800b31e <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a21      	ldr	r2, [pc, #132]	; (800b338 <HAL_TIM_ConfigClockSource+0x6d8>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d027      	beq.n	800b306 <HAL_TIM_ConfigClockSource+0x6a6>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2be:	d022      	beq.n	800b306 <HAL_TIM_ConfigClockSource+0x6a6>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a1d      	ldr	r2, [pc, #116]	; (800b33c <HAL_TIM_ConfigClockSource+0x6dc>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d01d      	beq.n	800b306 <HAL_TIM_ConfigClockSource+0x6a6>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a1c      	ldr	r2, [pc, #112]	; (800b340 <HAL_TIM_ConfigClockSource+0x6e0>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d018      	beq.n	800b306 <HAL_TIM_ConfigClockSource+0x6a6>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a1a      	ldr	r2, [pc, #104]	; (800b344 <HAL_TIM_ConfigClockSource+0x6e4>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d013      	beq.n	800b306 <HAL_TIM_ConfigClockSource+0x6a6>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a19      	ldr	r2, [pc, #100]	; (800b348 <HAL_TIM_ConfigClockSource+0x6e8>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d00e      	beq.n	800b306 <HAL_TIM_ConfigClockSource+0x6a6>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a17      	ldr	r2, [pc, #92]	; (800b34c <HAL_TIM_ConfigClockSource+0x6ec>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d009      	beq.n	800b306 <HAL_TIM_ConfigClockSource+0x6a6>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a16      	ldr	r2, [pc, #88]	; (800b350 <HAL_TIM_ConfigClockSource+0x6f0>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d004      	beq.n	800b306 <HAL_TIM_ConfigClockSource+0x6a6>
 800b2fc:	f241 11fd 	movw	r1, #4605	; 0x11fd
 800b300:	4814      	ldr	r0, [pc, #80]	; (800b354 <HAL_TIM_ConfigClockSource+0x6f4>)
 800b302:	f7f8 f912 	bl	800352a <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4619      	mov	r1, r3
 800b310:	4610      	mov	r0, r2
 800b312:	f000 fc84 	bl	800bc1e <TIM_ITRx_SetConfig>
      break;
 800b316:	e002      	b.n	800b31e <HAL_TIM_ConfigClockSource+0x6be>
      break;
 800b318:	bf00      	nop
 800b31a:	e000      	b.n	800b31e <HAL_TIM_ConfigClockSource+0x6be>
      break;
 800b31c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	40010000 	.word	0x40010000
 800b33c:	40000400 	.word	0x40000400
 800b340:	40000800 	.word	0x40000800
 800b344:	40000c00 	.word	0x40000c00
 800b348:	40010400 	.word	0x40010400
 800b34c:	40014000 	.word	0x40014000
 800b350:	40001800 	.word	0x40001800
 800b354:	0800fb14 	.word	0x0800fb14

0800b358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a40      	ldr	r2, [pc, #256]	; (800b46c <TIM_Base_SetConfig+0x114>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d013      	beq.n	800b398 <TIM_Base_SetConfig+0x40>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b376:	d00f      	beq.n	800b398 <TIM_Base_SetConfig+0x40>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a3d      	ldr	r2, [pc, #244]	; (800b470 <TIM_Base_SetConfig+0x118>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d00b      	beq.n	800b398 <TIM_Base_SetConfig+0x40>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4a3c      	ldr	r2, [pc, #240]	; (800b474 <TIM_Base_SetConfig+0x11c>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d007      	beq.n	800b398 <TIM_Base_SetConfig+0x40>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a3b      	ldr	r2, [pc, #236]	; (800b478 <TIM_Base_SetConfig+0x120>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d003      	beq.n	800b398 <TIM_Base_SetConfig+0x40>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a3a      	ldr	r2, [pc, #232]	; (800b47c <TIM_Base_SetConfig+0x124>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d108      	bne.n	800b3aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b39e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a2f      	ldr	r2, [pc, #188]	; (800b46c <TIM_Base_SetConfig+0x114>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d02b      	beq.n	800b40a <TIM_Base_SetConfig+0xb2>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3b8:	d027      	beq.n	800b40a <TIM_Base_SetConfig+0xb2>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a2c      	ldr	r2, [pc, #176]	; (800b470 <TIM_Base_SetConfig+0x118>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d023      	beq.n	800b40a <TIM_Base_SetConfig+0xb2>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a2b      	ldr	r2, [pc, #172]	; (800b474 <TIM_Base_SetConfig+0x11c>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d01f      	beq.n	800b40a <TIM_Base_SetConfig+0xb2>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a2a      	ldr	r2, [pc, #168]	; (800b478 <TIM_Base_SetConfig+0x120>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d01b      	beq.n	800b40a <TIM_Base_SetConfig+0xb2>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a29      	ldr	r2, [pc, #164]	; (800b47c <TIM_Base_SetConfig+0x124>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d017      	beq.n	800b40a <TIM_Base_SetConfig+0xb2>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a28      	ldr	r2, [pc, #160]	; (800b480 <TIM_Base_SetConfig+0x128>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d013      	beq.n	800b40a <TIM_Base_SetConfig+0xb2>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a27      	ldr	r2, [pc, #156]	; (800b484 <TIM_Base_SetConfig+0x12c>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d00f      	beq.n	800b40a <TIM_Base_SetConfig+0xb2>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a26      	ldr	r2, [pc, #152]	; (800b488 <TIM_Base_SetConfig+0x130>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d00b      	beq.n	800b40a <TIM_Base_SetConfig+0xb2>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a25      	ldr	r2, [pc, #148]	; (800b48c <TIM_Base_SetConfig+0x134>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d007      	beq.n	800b40a <TIM_Base_SetConfig+0xb2>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a24      	ldr	r2, [pc, #144]	; (800b490 <TIM_Base_SetConfig+0x138>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d003      	beq.n	800b40a <TIM_Base_SetConfig+0xb2>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a23      	ldr	r2, [pc, #140]	; (800b494 <TIM_Base_SetConfig+0x13c>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d108      	bne.n	800b41c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4313      	orrs	r3, r2
 800b41a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a0a      	ldr	r2, [pc, #40]	; (800b46c <TIM_Base_SetConfig+0x114>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d003      	beq.n	800b450 <TIM_Base_SetConfig+0xf8>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a0c      	ldr	r2, [pc, #48]	; (800b47c <TIM_Base_SetConfig+0x124>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d103      	bne.n	800b458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	691a      	ldr	r2, [r3, #16]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	615a      	str	r2, [r3, #20]
}
 800b45e:	bf00      	nop
 800b460:	3714      	adds	r7, #20
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	40010000 	.word	0x40010000
 800b470:	40000400 	.word	0x40000400
 800b474:	40000800 	.word	0x40000800
 800b478:	40000c00 	.word	0x40000c00
 800b47c:	40010400 	.word	0x40010400
 800b480:	40014000 	.word	0x40014000
 800b484:	40014400 	.word	0x40014400
 800b488:	40014800 	.word	0x40014800
 800b48c:	40001800 	.word	0x40001800
 800b490:	40001c00 	.word	0x40001c00
 800b494:	40002000 	.word	0x40002000

0800b498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b086      	sub	sp, #24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	f023 0201 	bic.w	r2, r3, #1
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	699b      	ldr	r3, [r3, #24]
 800b4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f023 0303 	bic.w	r3, r3, #3
 800b4ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f023 0302 	bic.w	r3, r3, #2
 800b4e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a34      	ldr	r2, [pc, #208]	; (800b5c0 <TIM_OC1_SetConfig+0x128>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d003      	beq.n	800b4fc <TIM_OC1_SetConfig+0x64>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a33      	ldr	r2, [pc, #204]	; (800b5c4 <TIM_OC1_SetConfig+0x12c>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d119      	bne.n	800b530 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d008      	beq.n	800b516 <TIM_OC1_SetConfig+0x7e>
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	2b08      	cmp	r3, #8
 800b50a:	d004      	beq.n	800b516 <TIM_OC1_SetConfig+0x7e>
 800b50c:	f241 7102 	movw	r1, #5890	; 0x1702
 800b510:	482d      	ldr	r0, [pc, #180]	; (800b5c8 <TIM_OC1_SetConfig+0x130>)
 800b512:	f7f8 f80a 	bl	800352a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f023 0308 	bic.w	r3, r3, #8
 800b51c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	4313      	orrs	r3, r2
 800b526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	f023 0304 	bic.w	r3, r3, #4
 800b52e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a23      	ldr	r2, [pc, #140]	; (800b5c0 <TIM_OC1_SetConfig+0x128>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d003      	beq.n	800b540 <TIM_OC1_SetConfig+0xa8>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a22      	ldr	r2, [pc, #136]	; (800b5c4 <TIM_OC1_SetConfig+0x12c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d12d      	bne.n	800b59c <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b548:	d008      	beq.n	800b55c <TIM_OC1_SetConfig+0xc4>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d004      	beq.n	800b55c <TIM_OC1_SetConfig+0xc4>
 800b552:	f241 710f 	movw	r1, #5903	; 0x170f
 800b556:	481c      	ldr	r0, [pc, #112]	; (800b5c8 <TIM_OC1_SetConfig+0x130>)
 800b558:	f7f7 ffe7 	bl	800352a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b564:	d008      	beq.n	800b578 <TIM_OC1_SetConfig+0xe0>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	695b      	ldr	r3, [r3, #20]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d004      	beq.n	800b578 <TIM_OC1_SetConfig+0xe0>
 800b56e:	f241 7110 	movw	r1, #5904	; 0x1710
 800b572:	4815      	ldr	r0, [pc, #84]	; (800b5c8 <TIM_OC1_SetConfig+0x130>)
 800b574:	f7f7 ffd9 	bl	800352a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b57e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	693a      	ldr	r2, [r7, #16]
 800b58e:	4313      	orrs	r3, r2
 800b590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	699b      	ldr	r3, [r3, #24]
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	4313      	orrs	r3, r2
 800b59a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	693a      	ldr	r2, [r7, #16]
 800b5a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	621a      	str	r2, [r3, #32]
}
 800b5b6:	bf00      	nop
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	40010400 	.word	0x40010400
 800b5c8:	0800fb14 	.word	0x0800fb14

0800b5cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	f023 0210 	bic.w	r2, r3, #16
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	021b      	lsls	r3, r3, #8
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	f023 0320 	bic.w	r3, r3, #32
 800b616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	011b      	lsls	r3, r3, #4
 800b61e:	697a      	ldr	r2, [r7, #20]
 800b620:	4313      	orrs	r3, r2
 800b622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a35      	ldr	r2, [pc, #212]	; (800b6fc <TIM_OC2_SetConfig+0x130>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d003      	beq.n	800b634 <TIM_OC2_SetConfig+0x68>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a34      	ldr	r2, [pc, #208]	; (800b700 <TIM_OC2_SetConfig+0x134>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d11a      	bne.n	800b66a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d008      	beq.n	800b64e <TIM_OC2_SetConfig+0x82>
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	2b08      	cmp	r3, #8
 800b642:	d004      	beq.n	800b64e <TIM_OC2_SetConfig+0x82>
 800b644:	f241 714d 	movw	r1, #5965	; 0x174d
 800b648:	482e      	ldr	r0, [pc, #184]	; (800b704 <TIM_OC2_SetConfig+0x138>)
 800b64a:	f7f7 ff6e 	bl	800352a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	011b      	lsls	r3, r3, #4
 800b65c:	697a      	ldr	r2, [r7, #20]
 800b65e:	4313      	orrs	r3, r2
 800b660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b668:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a23      	ldr	r2, [pc, #140]	; (800b6fc <TIM_OC2_SetConfig+0x130>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d003      	beq.n	800b67a <TIM_OC2_SetConfig+0xae>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a22      	ldr	r2, [pc, #136]	; (800b700 <TIM_OC2_SetConfig+0x134>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d12f      	bne.n	800b6da <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b682:	d008      	beq.n	800b696 <TIM_OC2_SetConfig+0xca>
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	699b      	ldr	r3, [r3, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d004      	beq.n	800b696 <TIM_OC2_SetConfig+0xca>
 800b68c:	f241 715b 	movw	r1, #5979	; 0x175b
 800b690:	481c      	ldr	r0, [pc, #112]	; (800b704 <TIM_OC2_SetConfig+0x138>)
 800b692:	f7f7 ff4a 	bl	800352a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b69e:	d008      	beq.n	800b6b2 <TIM_OC2_SetConfig+0xe6>
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d004      	beq.n	800b6b2 <TIM_OC2_SetConfig+0xe6>
 800b6a8:	f241 715c 	movw	r1, #5980	; 0x175c
 800b6ac:	4815      	ldr	r0, [pc, #84]	; (800b704 <TIM_OC2_SetConfig+0x138>)
 800b6ae:	f7f7 ff3c 	bl	800352a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	697a      	ldr	r2, [r7, #20]
 800b6f2:	621a      	str	r2, [r3, #32]
}
 800b6f4:	bf00      	nop
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	40010000 	.word	0x40010000
 800b700:	40010400 	.word	0x40010400
 800b704:	0800fb14 	.word	0x0800fb14

0800b708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6a1b      	ldr	r3, [r3, #32]
 800b716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	69db      	ldr	r3, [r3, #28]
 800b72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f023 0303 	bic.w	r3, r3, #3
 800b73e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	4313      	orrs	r3, r2
 800b748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	021b      	lsls	r3, r3, #8
 800b758:	697a      	ldr	r2, [r7, #20]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a35      	ldr	r2, [pc, #212]	; (800b838 <TIM_OC3_SetConfig+0x130>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d003      	beq.n	800b76e <TIM_OC3_SetConfig+0x66>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a34      	ldr	r2, [pc, #208]	; (800b83c <TIM_OC3_SetConfig+0x134>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d11a      	bne.n	800b7a4 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d008      	beq.n	800b788 <TIM_OC3_SetConfig+0x80>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	2b08      	cmp	r3, #8
 800b77c:	d004      	beq.n	800b788 <TIM_OC3_SetConfig+0x80>
 800b77e:	f241 7198 	movw	r1, #6040	; 0x1798
 800b782:	482f      	ldr	r0, [pc, #188]	; (800b840 <TIM_OC3_SetConfig+0x138>)
 800b784:	f7f7 fed1 	bl	800352a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b78e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	021b      	lsls	r3, r3, #8
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	4313      	orrs	r3, r2
 800b79a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a24      	ldr	r2, [pc, #144]	; (800b838 <TIM_OC3_SetConfig+0x130>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d003      	beq.n	800b7b4 <TIM_OC3_SetConfig+0xac>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a23      	ldr	r2, [pc, #140]	; (800b83c <TIM_OC3_SetConfig+0x134>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d12f      	bne.n	800b814 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	699b      	ldr	r3, [r3, #24]
 800b7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7bc:	d008      	beq.n	800b7d0 <TIM_OC3_SetConfig+0xc8>
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	699b      	ldr	r3, [r3, #24]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d004      	beq.n	800b7d0 <TIM_OC3_SetConfig+0xc8>
 800b7c6:	f241 71a5 	movw	r1, #6053	; 0x17a5
 800b7ca:	481d      	ldr	r0, [pc, #116]	; (800b840 <TIM_OC3_SetConfig+0x138>)
 800b7cc:	f7f7 fead 	bl	800352a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7d8:	d008      	beq.n	800b7ec <TIM_OC3_SetConfig+0xe4>
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d004      	beq.n	800b7ec <TIM_OC3_SetConfig+0xe4>
 800b7e2:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800b7e6:	4816      	ldr	r0, [pc, #88]	; (800b840 <TIM_OC3_SetConfig+0x138>)
 800b7e8:	f7f7 fe9f 	bl	800352a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	011b      	lsls	r3, r3, #4
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	4313      	orrs	r3, r2
 800b806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	011b      	lsls	r3, r3, #4
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	4313      	orrs	r3, r2
 800b812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	621a      	str	r2, [r3, #32]
}
 800b82e:	bf00      	nop
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	40010000 	.word	0x40010000
 800b83c:	40010400 	.word	0x40010400
 800b840:	0800fb14 	.word	0x0800fb14

0800b844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a1b      	ldr	r3, [r3, #32]
 800b852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b87a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	021b      	lsls	r3, r3, #8
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	4313      	orrs	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b88e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	031b      	lsls	r3, r3, #12
 800b896:	693a      	ldr	r2, [r7, #16]
 800b898:	4313      	orrs	r3, r2
 800b89a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a18      	ldr	r2, [pc, #96]	; (800b900 <TIM_OC4_SetConfig+0xbc>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d003      	beq.n	800b8ac <TIM_OC4_SetConfig+0x68>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a17      	ldr	r2, [pc, #92]	; (800b904 <TIM_OC4_SetConfig+0xc0>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d117      	bne.n	800b8dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8b4:	d008      	beq.n	800b8c8 <TIM_OC4_SetConfig+0x84>
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d004      	beq.n	800b8c8 <TIM_OC4_SetConfig+0x84>
 800b8be:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800b8c2:	4811      	ldr	r0, [pc, #68]	; (800b908 <TIM_OC4_SetConfig+0xc4>)
 800b8c4:	f7f7 fe31 	bl	800352a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	695b      	ldr	r3, [r3, #20]
 800b8d4:	019b      	lsls	r3, r3, #6
 800b8d6:	697a      	ldr	r2, [r7, #20]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	621a      	str	r2, [r3, #32]
}
 800b8f6:	bf00      	nop
 800b8f8:	3718      	adds	r7, #24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	40010000 	.word	0x40010000
 800b904:	40010400 	.word	0x40010400
 800b908:	0800fb14 	.word	0x0800fb14

0800b90c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b087      	sub	sp, #28
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
 800b918:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	f023 0201 	bic.w	r2, r3, #1
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6a1b      	ldr	r3, [r3, #32]
 800b930:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	4a28      	ldr	r2, [pc, #160]	; (800b9d8 <TIM_TI1_SetConfig+0xcc>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d01b      	beq.n	800b972 <TIM_TI1_SetConfig+0x66>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b940:	d017      	beq.n	800b972 <TIM_TI1_SetConfig+0x66>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	4a25      	ldr	r2, [pc, #148]	; (800b9dc <TIM_TI1_SetConfig+0xd0>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d013      	beq.n	800b972 <TIM_TI1_SetConfig+0x66>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	4a24      	ldr	r2, [pc, #144]	; (800b9e0 <TIM_TI1_SetConfig+0xd4>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d00f      	beq.n	800b972 <TIM_TI1_SetConfig+0x66>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	4a23      	ldr	r2, [pc, #140]	; (800b9e4 <TIM_TI1_SetConfig+0xd8>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d00b      	beq.n	800b972 <TIM_TI1_SetConfig+0x66>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	4a22      	ldr	r2, [pc, #136]	; (800b9e8 <TIM_TI1_SetConfig+0xdc>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d007      	beq.n	800b972 <TIM_TI1_SetConfig+0x66>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	4a21      	ldr	r2, [pc, #132]	; (800b9ec <TIM_TI1_SetConfig+0xe0>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d003      	beq.n	800b972 <TIM_TI1_SetConfig+0x66>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	4a20      	ldr	r2, [pc, #128]	; (800b9f0 <TIM_TI1_SetConfig+0xe4>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d101      	bne.n	800b976 <TIM_TI1_SetConfig+0x6a>
 800b972:	2301      	movs	r3, #1
 800b974:	e000      	b.n	800b978 <TIM_TI1_SetConfig+0x6c>
 800b976:	2300      	movs	r3, #0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d008      	beq.n	800b98e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	f023 0303 	bic.w	r3, r3, #3
 800b982:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4313      	orrs	r3, r2
 800b98a:	617b      	str	r3, [r7, #20]
 800b98c:	e003      	b.n	800b996 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f043 0301 	orr.w	r3, r3, #1
 800b994:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b99c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	011b      	lsls	r3, r3, #4
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	f023 030a 	bic.w	r3, r3, #10
 800b9b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	f003 030a 	and.w	r3, r3, #10
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	697a      	ldr	r2, [r7, #20]
 800b9c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	621a      	str	r2, [r3, #32]
}
 800b9ca:	bf00      	nop
 800b9cc:	371c      	adds	r7, #28
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	40010000 	.word	0x40010000
 800b9dc:	40000400 	.word	0x40000400
 800b9e0:	40000800 	.word	0x40000800
 800b9e4:	40000c00 	.word	0x40000c00
 800b9e8:	40010400 	.word	0x40010400
 800b9ec:	40014000 	.word	0x40014000
 800b9f0:	40001800 	.word	0x40001800

0800b9f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6a1b      	ldr	r3, [r3, #32]
 800ba04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	f023 0201 	bic.w	r2, r3, #1
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	011b      	lsls	r3, r3, #4
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	f023 030a 	bic.w	r3, r3, #10
 800ba30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba32:	697a      	ldr	r2, [r7, #20]
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	621a      	str	r2, [r3, #32]
}
 800ba46:	bf00      	nop
 800ba48:	371c      	adds	r7, #28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b087      	sub	sp, #28
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	607a      	str	r2, [r7, #4]
 800ba5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6a1b      	ldr	r3, [r3, #32]
 800ba64:	f023 0210 	bic.w	r2, r3, #16
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	699b      	ldr	r3, [r3, #24]
 800ba70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6a1b      	ldr	r3, [r3, #32]
 800ba76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	021b      	lsls	r3, r3, #8
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	031b      	lsls	r3, r3, #12
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800baa4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	011b      	lsls	r3, r3, #4
 800baaa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	621a      	str	r2, [r3, #32]
}
 800bac0:	bf00      	nop
 800bac2:	371c      	adds	r7, #28
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bacc:	b480      	push	{r7}
 800bace:	b087      	sub	sp, #28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6a1b      	ldr	r3, [r3, #32]
 800badc:	f023 0210 	bic.w	r2, r3, #16
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800baf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	031b      	lsls	r3, r3, #12
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	011b      	lsls	r3, r3, #4
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	693a      	ldr	r2, [r7, #16]
 800bb1e:	621a      	str	r2, [r3, #32]
}
 800bb20:	bf00      	nop
 800bb22:	371c      	adds	r7, #28
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
 800bb38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	69db      	ldr	r3, [r3, #28]
 800bb4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6a1b      	ldr	r3, [r3, #32]
 800bb50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f023 0303 	bic.w	r3, r3, #3
 800bb58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800bb5a:	697a      	ldr	r2, [r7, #20]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	011b      	lsls	r3, r3, #4
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bb7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	621a      	str	r2, [r3, #32]
}
 800bb98:	bf00      	nop
 800bb9a:	371c      	adds	r7, #28
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b087      	sub	sp, #28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
 800bbb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6a1b      	ldr	r3, [r3, #32]
 800bbc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	021b      	lsls	r3, r3, #8
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbe2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	031b      	lsls	r3, r3, #12
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	697a      	ldr	r2, [r7, #20]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bbf6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	031b      	lsls	r3, r3, #12
 800bbfc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	697a      	ldr	r2, [r7, #20]
 800bc0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	693a      	ldr	r2, [r7, #16]
 800bc10:	621a      	str	r2, [r3, #32]
}
 800bc12:	bf00      	nop
 800bc14:	371c      	adds	r7, #28
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b085      	sub	sp, #20
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	f043 0307 	orr.w	r3, r3, #7
 800bc40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	609a      	str	r2, [r3, #8]
}
 800bc48:	bf00      	nop
 800bc4a:	3714      	adds	r7, #20
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b087      	sub	sp, #28
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
 800bc60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	021a      	lsls	r2, r3, #8
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	431a      	orrs	r2, r3
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	609a      	str	r2, [r3, #8]
}
 800bc88:	bf00      	nop
 800bc8a:	371c      	adds	r7, #28
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4a32      	ldr	r2, [pc, #200]	; (800bd6c <TIM_CCxChannelCmd+0xd8>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d030      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcae:	d02c      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	4a2f      	ldr	r2, [pc, #188]	; (800bd70 <TIM_CCxChannelCmd+0xdc>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d028      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	4a2e      	ldr	r2, [pc, #184]	; (800bd74 <TIM_CCxChannelCmd+0xe0>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d024      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	4a2d      	ldr	r2, [pc, #180]	; (800bd78 <TIM_CCxChannelCmd+0xe4>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d020      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	4a2c      	ldr	r2, [pc, #176]	; (800bd7c <TIM_CCxChannelCmd+0xe8>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d01c      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	4a2b      	ldr	r2, [pc, #172]	; (800bd80 <TIM_CCxChannelCmd+0xec>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d018      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	4a2a      	ldr	r2, [pc, #168]	; (800bd84 <TIM_CCxChannelCmd+0xf0>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d014      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	4a29      	ldr	r2, [pc, #164]	; (800bd88 <TIM_CCxChannelCmd+0xf4>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d010      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	4a28      	ldr	r2, [pc, #160]	; (800bd8c <TIM_CCxChannelCmd+0xf8>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d00c      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4a27      	ldr	r2, [pc, #156]	; (800bd90 <TIM_CCxChannelCmd+0xfc>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d008      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	4a26      	ldr	r2, [pc, #152]	; (800bd94 <TIM_CCxChannelCmd+0x100>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d004      	beq.n	800bd0a <TIM_CCxChannelCmd+0x76>
 800bd00:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800bd04:	4824      	ldr	r0, [pc, #144]	; (800bd98 <TIM_CCxChannelCmd+0x104>)
 800bd06:	f7f7 fc10 	bl	800352a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d010      	beq.n	800bd32 <TIM_CCxChannelCmd+0x9e>
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	d00d      	beq.n	800bd32 <TIM_CCxChannelCmd+0x9e>
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b08      	cmp	r3, #8
 800bd1a:	d00a      	beq.n	800bd32 <TIM_CCxChannelCmd+0x9e>
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	2b0c      	cmp	r3, #12
 800bd20:	d007      	beq.n	800bd32 <TIM_CCxChannelCmd+0x9e>
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	2b3c      	cmp	r3, #60	; 0x3c
 800bd26:	d004      	beq.n	800bd32 <TIM_CCxChannelCmd+0x9e>
 800bd28:	f641 11cd 	movw	r1, #6605	; 0x19cd
 800bd2c:	481a      	ldr	r0, [pc, #104]	; (800bd98 <TIM_CCxChannelCmd+0x104>)
 800bd2e:	f7f7 fbfc 	bl	800352a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	f003 031f 	and.w	r3, r3, #31
 800bd38:	2201      	movs	r2, #1
 800bd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6a1a      	ldr	r2, [r3, #32]
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	43db      	mvns	r3, r3
 800bd48:	401a      	ands	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6a1a      	ldr	r2, [r3, #32]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	f003 031f 	and.w	r3, r3, #31
 800bd58:	6879      	ldr	r1, [r7, #4]
 800bd5a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd5e:	431a      	orrs	r2, r3
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	621a      	str	r2, [r3, #32]
}
 800bd64:	bf00      	nop
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	40010000 	.word	0x40010000
 800bd70:	40000400 	.word	0x40000400
 800bd74:	40000800 	.word	0x40000800
 800bd78:	40000c00 	.word	0x40000c00
 800bd7c:	40010400 	.word	0x40010400
 800bd80:	40014000 	.word	0x40014000
 800bd84:	40014400 	.word	0x40014400
 800bd88:	40014800 	.word	0x40014800
 800bd8c:	40001800 	.word	0x40001800
 800bd90:	40001c00 	.word	0x40001c00
 800bd94:	40002000 	.word	0x40002000
 800bd98:	0800fb14 	.word	0x0800fb14

0800bd9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a61      	ldr	r2, [pc, #388]	; (800bf30 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d027      	beq.n	800be00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdb8:	d022      	beq.n	800be00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a5d      	ldr	r2, [pc, #372]	; (800bf34 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d01d      	beq.n	800be00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a5b      	ldr	r2, [pc, #364]	; (800bf38 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d018      	beq.n	800be00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a5a      	ldr	r2, [pc, #360]	; (800bf3c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d013      	beq.n	800be00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a58      	ldr	r2, [pc, #352]	; (800bf40 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d00e      	beq.n	800be00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a57      	ldr	r2, [pc, #348]	; (800bf44 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d009      	beq.n	800be00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a55      	ldr	r2, [pc, #340]	; (800bf48 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d004      	beq.n	800be00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bdf6:	f240 6164 	movw	r1, #1636	; 0x664
 800bdfa:	4854      	ldr	r0, [pc, #336]	; (800bf4c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800bdfc:	f7f7 fb95 	bl	800352a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d020      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b10      	cmp	r3, #16
 800be0e:	d01c      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b20      	cmp	r3, #32
 800be16:	d018      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b30      	cmp	r3, #48	; 0x30
 800be1e:	d014      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b40      	cmp	r3, #64	; 0x40
 800be26:	d010      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b50      	cmp	r3, #80	; 0x50
 800be2e:	d00c      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b60      	cmp	r3, #96	; 0x60
 800be36:	d008      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b70      	cmp	r3, #112	; 0x70
 800be3e:	d004      	beq.n	800be4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800be40:	f240 6165 	movw	r1, #1637	; 0x665
 800be44:	4841      	ldr	r0, [pc, #260]	; (800bf4c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800be46:	f7f7 fb70 	bl	800352a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	2b80      	cmp	r3, #128	; 0x80
 800be50:	d008      	beq.n	800be64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d004      	beq.n	800be64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be5a:	f240 6166 	movw	r1, #1638	; 0x666
 800be5e:	483b      	ldr	r0, [pc, #236]	; (800bf4c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800be60:	f7f7 fb63 	bl	800352a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d101      	bne.n	800be72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be6e:	2302      	movs	r3, #2
 800be70:	e05a      	b.n	800bf28 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2202      	movs	r2, #2
 800be7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a1f      	ldr	r2, [pc, #124]	; (800bf30 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d022      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bebe:	d01d      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a1b      	ldr	r2, [pc, #108]	; (800bf34 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d018      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a1a      	ldr	r2, [pc, #104]	; (800bf38 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d013      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a18      	ldr	r2, [pc, #96]	; (800bf3c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d00e      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a19      	ldr	r2, [pc, #100]	; (800bf48 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d009      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a18      	ldr	r2, [pc, #96]	; (800bf50 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d004      	beq.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a17      	ldr	r2, [pc, #92]	; (800bf54 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d10c      	bne.n	800bf16 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	40010000 	.word	0x40010000
 800bf34:	40000400 	.word	0x40000400
 800bf38:	40000800 	.word	0x40000800
 800bf3c:	40000c00 	.word	0x40000c00
 800bf40:	40001000 	.word	0x40001000
 800bf44:	40001400 	.word	0x40001400
 800bf48:	40010400 	.word	0x40010400
 800bf4c:	0800fb4c 	.word	0x0800fb4c
 800bf50:	40014000 	.word	0x40014000
 800bf54:	40001800 	.word	0x40001800

0800bf58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a5e      	ldr	r2, [pc, #376]	; (800c0e4 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d009      	beq.n	800bf84 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a5c      	ldr	r2, [pc, #368]	; (800c0e8 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d004      	beq.n	800bf84 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800bf7a:	f240 61a1 	movw	r1, #1697	; 0x6a1
 800bf7e:	485b      	ldr	r0, [pc, #364]	; (800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bf80:	f7f7 fad3 	bl	800352a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf8c:	d008      	beq.n	800bfa0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d004      	beq.n	800bfa0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800bf96:	f240 61a2 	movw	r1, #1698	; 0x6a2
 800bf9a:	4854      	ldr	r0, [pc, #336]	; (800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bf9c:	f7f7 fac5 	bl	800352a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfa8:	d008      	beq.n	800bfbc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d004      	beq.n	800bfbc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800bfb2:	f240 61a3 	movw	r1, #1699	; 0x6a3
 800bfb6:	484d      	ldr	r0, [pc, #308]	; (800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bfb8:	f7f7 fab7 	bl	800352a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d013      	beq.n	800bfec <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfcc:	d00e      	beq.n	800bfec <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfd6:	d009      	beq.n	800bfec <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfe0:	d004      	beq.n	800bfec <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800bfe2:	f240 61a4 	movw	r1, #1700	; 0x6a4
 800bfe6:	4841      	ldr	r0, [pc, #260]	; (800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bfe8:	f7f7 fa9f 	bl	800352a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	2bff      	cmp	r3, #255	; 0xff
 800bff2:	d904      	bls.n	800bffe <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800bff4:	f240 61a5 	movw	r1, #1701	; 0x6a5
 800bff8:	483c      	ldr	r0, [pc, #240]	; (800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bffa:	f7f7 fa96 	bl	800352a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c006:	d008      	beq.n	800c01a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d004      	beq.n	800c01a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c010:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800c014:	4835      	ldr	r0, [pc, #212]	; (800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800c016:	f7f7 fa88 	bl	800352a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d009      	beq.n	800c036 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c02a:	d004      	beq.n	800c036 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800c02c:	f240 61a7 	movw	r1, #1703	; 0x6a7
 800c030:	482e      	ldr	r0, [pc, #184]	; (800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800c032:	f7f7 fa7a 	bl	800352a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	69db      	ldr	r3, [r3, #28]
 800c03a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c03e:	d008      	beq.n	800c052 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	69db      	ldr	r3, [r3, #28]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d004      	beq.n	800c052 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800c048:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 800c04c:	4827      	ldr	r0, [pc, #156]	; (800c0ec <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800c04e:	f7f7 fa6c 	bl	800352a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d101      	bne.n	800c060 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800c05c:	2302      	movs	r3, #2
 800c05e:	e03d      	b.n	800c0dc <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	4313      	orrs	r3, r2
 800c074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	4313      	orrs	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	4313      	orrs	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	695b      	ldr	r3, [r3, #20]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	69db      	ldr	r3, [r3, #28]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	40010000 	.word	0x40010000
 800c0e8:	40010400 	.word	0x40010400
 800c0ec:	0800fb4c 	.word	0x0800fb4c

0800c0f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	e0be      	b.n	800c280 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d031      	beq.n	800c16e <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a5e      	ldr	r2, [pc, #376]	; (800c288 <HAL_UART_Init+0x198>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d013      	beq.n	800c13c <HAL_UART_Init+0x4c>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a5c      	ldr	r2, [pc, #368]	; (800c28c <HAL_UART_Init+0x19c>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d00e      	beq.n	800c13c <HAL_UART_Init+0x4c>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a5b      	ldr	r2, [pc, #364]	; (800c290 <HAL_UART_Init+0x1a0>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d009      	beq.n	800c13c <HAL_UART_Init+0x4c>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a59      	ldr	r2, [pc, #356]	; (800c294 <HAL_UART_Init+0x1a4>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d004      	beq.n	800c13c <HAL_UART_Init+0x4c>
 800c132:	f240 114b 	movw	r1, #331	; 0x14b
 800c136:	4858      	ldr	r0, [pc, #352]	; (800c298 <HAL_UART_Init+0x1a8>)
 800c138:	f7f7 f9f7 	bl	800352a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d041      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c14c:	d03c      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c156:	d037      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c160:	d032      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c162:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800c166:	484c      	ldr	r0, [pc, #304]	; (800c298 <HAL_UART_Init+0x1a8>)
 800c168:	f7f7 f9df 	bl	800352a <assert_failed>
 800c16c:	e02c      	b.n	800c1c8 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a45      	ldr	r2, [pc, #276]	; (800c288 <HAL_UART_Init+0x198>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d027      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a43      	ldr	r2, [pc, #268]	; (800c28c <HAL_UART_Init+0x19c>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d022      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a42      	ldr	r2, [pc, #264]	; (800c290 <HAL_UART_Init+0x1a0>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d01d      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a42      	ldr	r2, [pc, #264]	; (800c29c <HAL_UART_Init+0x1ac>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d018      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a41      	ldr	r2, [pc, #260]	; (800c2a0 <HAL_UART_Init+0x1b0>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d013      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a3b      	ldr	r2, [pc, #236]	; (800c294 <HAL_UART_Init+0x1a4>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d00e      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a3d      	ldr	r2, [pc, #244]	; (800c2a4 <HAL_UART_Init+0x1b4>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d009      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a3b      	ldr	r2, [pc, #236]	; (800c2a8 <HAL_UART_Init+0x1b8>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d004      	beq.n	800c1c8 <HAL_UART_Init+0xd8>
 800c1be:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800c1c2:	4835      	ldr	r0, [pc, #212]	; (800c298 <HAL_UART_Init+0x1a8>)
 800c1c4:	f7f7 f9b1 	bl	800352a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d009      	beq.n	800c1e4 <HAL_UART_Init+0xf4>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1d8:	d004      	beq.n	800c1e4 <HAL_UART_Init+0xf4>
 800c1da:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800c1de:	482e      	ldr	r0, [pc, #184]	; (800c298 <HAL_UART_Init+0x1a8>)
 800c1e0:	f7f7 f9a3 	bl	800352a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	69db      	ldr	r3, [r3, #28]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d009      	beq.n	800c200 <HAL_UART_Init+0x110>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	69db      	ldr	r3, [r3, #28]
 800c1f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1f4:	d004      	beq.n	800c200 <HAL_UART_Init+0x110>
 800c1f6:	f240 1153 	movw	r1, #339	; 0x153
 800c1fa:	4827      	ldr	r0, [pc, #156]	; (800c298 <HAL_UART_Init+0x1a8>)
 800c1fc:	f7f7 f995 	bl	800352a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c206:	b2db      	uxtb	r3, r3
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d106      	bne.n	800c21a <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7f8 f9ab 	bl	8004570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2224      	movs	r2, #36	; 0x24
 800c21e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68da      	ldr	r2, [r3, #12]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c230:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fa72 	bl	800c71c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	691a      	ldr	r2, [r3, #16]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c246:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	695a      	ldr	r2, [r3, #20]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c256:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68da      	ldr	r2, [r3, #12]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c266:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2220      	movs	r2, #32
 800c272:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2220      	movs	r2, #32
 800c27a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	40011000 	.word	0x40011000
 800c28c:	40004400 	.word	0x40004400
 800c290:	40004800 	.word	0x40004800
 800c294:	40011400 	.word	0x40011400
 800c298:	0800fb88 	.word	0x0800fb88
 800c29c:	40004c00 	.word	0x40004c00
 800c2a0:	40005000 	.word	0x40005000
 800c2a4:	40007800 	.word	0x40007800
 800c2a8:	40007c00 	.word	0x40007c00

0800c2ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b088      	sub	sp, #32
 800c2b0:	af02      	add	r7, sp, #8
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	603b      	str	r3, [r7, #0]
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	2b20      	cmp	r3, #32
 800c2ca:	f040 8083 	bne.w	800c3d4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <HAL_UART_Transmit+0x2e>
 800c2d4:	88fb      	ldrh	r3, [r7, #6]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e07b      	b.n	800c3d6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d101      	bne.n	800c2ec <HAL_UART_Transmit+0x40>
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	e074      	b.n	800c3d6 <HAL_UART_Transmit+0x12a>
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2221      	movs	r2, #33	; 0x21
 800c2fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c302:	f7f8 fe67 	bl	8004fd4 <HAL_GetTick>
 800c306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	88fa      	ldrh	r2, [r7, #6]
 800c30c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	88fa      	ldrh	r2, [r7, #6]
 800c312:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2200      	movs	r2, #0
 800c318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800c31c:	e042      	b.n	800c3a4 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c322:	b29b      	uxth	r3, r3
 800c324:	3b01      	subs	r3, #1
 800c326:	b29a      	uxth	r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c334:	d122      	bne.n	800c37c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	9300      	str	r3, [sp, #0]
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	2200      	movs	r2, #0
 800c33e:	2180      	movs	r1, #128	; 0x80
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f000 f96d 	bl	800c620 <UART_WaitOnFlagUntilTimeout>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800c34c:	2303      	movs	r3, #3
 800c34e:	e042      	b.n	800c3d6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	881b      	ldrh	r3, [r3, #0]
 800c358:	461a      	mov	r2, r3
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c362:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d103      	bne.n	800c374 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	3302      	adds	r3, #2
 800c370:	60bb      	str	r3, [r7, #8]
 800c372:	e017      	b.n	800c3a4 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	3301      	adds	r3, #1
 800c378:	60bb      	str	r3, [r7, #8]
 800c37a:	e013      	b.n	800c3a4 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	2200      	movs	r2, #0
 800c384:	2180      	movs	r1, #128	; 0x80
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 f94a 	bl	800c620 <UART_WaitOnFlagUntilTimeout>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800c392:	2303      	movs	r3, #3
 800c394:	e01f      	b.n	800c3d6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	1c5a      	adds	r2, r3, #1
 800c39a:	60ba      	str	r2, [r7, #8]
 800c39c:	781a      	ldrb	r2, [r3, #0]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1b7      	bne.n	800c31e <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	2140      	movs	r1, #64	; 0x40
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f000 f931 	bl	800c620 <UART_WaitOnFlagUntilTimeout>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d001      	beq.n	800c3c8 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800c3c4:	2303      	movs	r3, #3
 800c3c6:	e006      	b.n	800c3d6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2220      	movs	r2, #32
 800c3cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	e000      	b.n	800c3d6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800c3d4:	2302      	movs	r3, #2
  }
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3718      	adds	r7, #24
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
	...

0800c3e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	2b20      	cmp	r3, #32
 800c3f8:	d166      	bne.n	800c4c8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <HAL_UART_Receive_DMA+0x26>
 800c400:	88fb      	ldrh	r3, [r7, #6]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	e05f      	b.n	800c4ca <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c410:	2b01      	cmp	r3, #1
 800c412:	d101      	bne.n	800c418 <HAL_UART_Receive_DMA+0x38>
 800c414:	2302      	movs	r3, #2
 800c416:	e058      	b.n	800c4ca <HAL_UART_Receive_DMA+0xea>
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	88fa      	ldrh	r2, [r7, #6]
 800c42a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2222      	movs	r2, #34	; 0x22
 800c436:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43e:	4a25      	ldr	r2, [pc, #148]	; (800c4d4 <HAL_UART_Receive_DMA+0xf4>)
 800c440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c446:	4a24      	ldr	r2, [pc, #144]	; (800c4d8 <HAL_UART_Receive_DMA+0xf8>)
 800c448:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44e:	4a23      	ldr	r2, [pc, #140]	; (800c4dc <HAL_UART_Receive_DMA+0xfc>)
 800c450:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c456:	2200      	movs	r2, #0
 800c458:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800c45a:	f107 0308 	add.w	r3, r7, #8
 800c45e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3304      	adds	r3, #4
 800c46a:	4619      	mov	r1, r3
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	88fb      	ldrh	r3, [r7, #6]
 800c472:	f7fa f9b5 	bl	80067e0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800c476:	2300      	movs	r3, #0
 800c478:	613b      	str	r3, [r7, #16]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	613b      	str	r3, [r7, #16]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	613b      	str	r3, [r7, #16]
 800c48a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68da      	ldr	r2, [r3, #12]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c4a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	695a      	ldr	r2, [r3, #20]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f042 0201 	orr.w	r2, r2, #1
 800c4b2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	695a      	ldr	r2, [r3, #20]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4c2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	e000      	b.n	800c4ca <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c4c8:	2302      	movs	r3, #2
  }
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3718      	adds	r7, #24
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	0800c509 	.word	0x0800c509
 800c4d8:	0800c571 	.word	0x0800c571
 800c4dc:	0800c58d 	.word	0x0800c58d

0800c4e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c4fc:	bf00      	nop
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c514:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c520:	2b00      	cmp	r3, #0
 800c522:	d11e      	bne.n	800c562 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	68da      	ldr	r2, [r3, #12]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c538:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	695a      	ldr	r2, [r3, #20]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0201 	bic.w	r2, r2, #1
 800c548:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	695a      	ldr	r2, [r3, #20]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c558:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2220      	movs	r2, #32
 800c55e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f7f6 fafc 	bl	8002b60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c568:	bf00      	nop
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c57c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f7ff ffae 	bl	800c4e0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c584:	bf00      	nop
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c594:	2300      	movs	r3, #0
 800c596:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5a8:	2b80      	cmp	r3, #128	; 0x80
 800c5aa:	bf0c      	ite	eq
 800c5ac:	2301      	moveq	r3, #1
 800c5ae:	2300      	movne	r3, #0
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b21      	cmp	r3, #33	; 0x21
 800c5be:	d108      	bne.n	800c5d2 <UART_DMAError+0x46>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d005      	beq.n	800c5d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c5cc:	68b8      	ldr	r0, [r7, #8]
 800c5ce:	f000 f871 	bl	800c6b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	695b      	ldr	r3, [r3, #20]
 800c5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5dc:	2b40      	cmp	r3, #64	; 0x40
 800c5de:	bf0c      	ite	eq
 800c5e0:	2301      	moveq	r3, #1
 800c5e2:	2300      	movne	r3, #0
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b22      	cmp	r3, #34	; 0x22
 800c5f2:	d108      	bne.n	800c606 <UART_DMAError+0x7a>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d005      	beq.n	800c606 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c600:	68b8      	ldr	r0, [r7, #8]
 800c602:	f000 f86d 	bl	800c6e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c60a:	f043 0210 	orr.w	r2, r3, #16
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c612:	68b8      	ldr	r0, [r7, #8]
 800c614:	f7ff ff6e 	bl	800c4f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c618:	bf00      	nop
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	603b      	str	r3, [r7, #0]
 800c62c:	4613      	mov	r3, r2
 800c62e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c630:	e02c      	b.n	800c68c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c638:	d028      	beq.n	800c68c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d007      	beq.n	800c650 <UART_WaitOnFlagUntilTimeout+0x30>
 800c640:	f7f8 fcc8 	bl	8004fd4 <HAL_GetTick>
 800c644:	4602      	mov	r2, r0
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	69ba      	ldr	r2, [r7, #24]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d21d      	bcs.n	800c68c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68da      	ldr	r2, [r3, #12]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c65e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	695a      	ldr	r2, [r3, #20]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f022 0201 	bic.w	r2, r2, #1
 800c66e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2220      	movs	r2, #32
 800c674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2220      	movs	r2, #32
 800c67c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2200      	movs	r2, #0
 800c684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800c688:	2303      	movs	r3, #3
 800c68a:	e00f      	b.n	800c6ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	4013      	ands	r3, r2
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	429a      	cmp	r2, r3
 800c69a:	bf0c      	ite	eq
 800c69c:	2301      	moveq	r3, #1
 800c69e:	2300      	movne	r3, #0
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	79fb      	ldrb	r3, [r7, #7]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d0c3      	beq.n	800c632 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	68da      	ldr	r2, [r3, #12]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c6ca:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2220      	movs	r2, #32
 800c6d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68da      	ldr	r2, [r3, #12]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c6f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	695a      	ldr	r2, [r3, #20]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f022 0201 	bic.w	r2, r2, #1
 800c706:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2220      	movs	r2, #32
 800c70c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c710:	bf00      	nop
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c720:	b0bd      	sub	sp, #244	; 0xf4
 800c722:	af00      	add	r7, sp, #0
 800c724:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800c728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	4bae      	ldr	r3, [pc, #696]	; (800c9e8 <UART_SetConfig+0x2cc>)
 800c730:	429a      	cmp	r2, r3
 800c732:	d904      	bls.n	800c73e <UART_SetConfig+0x22>
 800c734:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800c738:	48ac      	ldr	r0, [pc, #688]	; (800c9ec <UART_SetConfig+0x2d0>)
 800c73a:	f7f6 fef6 	bl	800352a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800c73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00a      	beq.n	800c75e <UART_SetConfig+0x42>
 800c748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c752:	d004      	beq.n	800c75e <UART_SetConfig+0x42>
 800c754:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800c758:	48a4      	ldr	r0, [pc, #656]	; (800c9ec <UART_SetConfig+0x2d0>)
 800c75a:	f7f6 fee6 	bl	800352a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800c75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d010      	beq.n	800c78a <UART_SetConfig+0x6e>
 800c768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c772:	d00a      	beq.n	800c78a <UART_SetConfig+0x6e>
 800c774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c77e:	d004      	beq.n	800c78a <UART_SetConfig+0x6e>
 800c780:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800c784:	4899      	ldr	r0, [pc, #612]	; (800c9ec <UART_SetConfig+0x2d0>)
 800c786:	f7f6 fed0 	bl	800352a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800c78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c78e:	695a      	ldr	r2, [r3, #20]
 800c790:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800c794:	4013      	ands	r3, r2
 800c796:	2b00      	cmp	r3, #0
 800c798:	d104      	bne.n	800c7a4 <UART_SetConfig+0x88>
 800c79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c79e:	695b      	ldr	r3, [r3, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d104      	bne.n	800c7ae <UART_SetConfig+0x92>
 800c7a4:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800c7a8:	4890      	ldr	r0, [pc, #576]	; (800c9ec <UART_SetConfig+0x2d0>)
 800c7aa:	f7f6 febe 	bl	800352a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7be:	68d9      	ldr	r1, [r3, #12]
 800c7c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	ea40 0301 	orr.w	r3, r0, r1
 800c7ca:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7d0:	689a      	ldr	r2, [r3, #8]
 800c7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7de:	695b      	ldr	r3, [r3, #20]
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7e6:	69db      	ldr	r3, [r3, #28]
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800c7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c7fa:	f021 010c 	bic.w	r1, r1, #12
 800c7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c808:	430b      	orrs	r3, r1
 800c80a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c80c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	695b      	ldr	r3, [r3, #20]
 800c814:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c81c:	6999      	ldr	r1, [r3, #24]
 800c81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	ea40 0301 	orr.w	r3, r0, r1
 800c828:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c82a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c82e:	69db      	ldr	r3, [r3, #28]
 800c830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c834:	f040 81a9 	bne.w	800cb8a <UART_SetConfig+0x46e>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	4b6c      	ldr	r3, [pc, #432]	; (800c9f0 <UART_SetConfig+0x2d4>)
 800c840:	429a      	cmp	r2, r3
 800c842:	d006      	beq.n	800c852 <UART_SetConfig+0x136>
 800c844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	4b6a      	ldr	r3, [pc, #424]	; (800c9f4 <UART_SetConfig+0x2d8>)
 800c84c:	429a      	cmp	r2, r3
 800c84e:	f040 80d5 	bne.w	800c9fc <UART_SetConfig+0x2e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c852:	f7fc fd67 	bl	8009324 <HAL_RCC_GetPCLK2Freq>
 800c856:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c85a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c85e:	461c      	mov	r4, r3
 800c860:	f04f 0500 	mov.w	r5, #0
 800c864:	4622      	mov	r2, r4
 800c866:	462b      	mov	r3, r5
 800c868:	1891      	adds	r1, r2, r2
 800c86a:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c86e:	415b      	adcs	r3, r3
 800c870:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c874:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c878:	1912      	adds	r2, r2, r4
 800c87a:	eb45 0303 	adc.w	r3, r5, r3
 800c87e:	f04f 0000 	mov.w	r0, #0
 800c882:	f04f 0100 	mov.w	r1, #0
 800c886:	00d9      	lsls	r1, r3, #3
 800c888:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c88c:	00d0      	lsls	r0, r2, #3
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	1911      	adds	r1, r2, r4
 800c894:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800c898:	416b      	adcs	r3, r5
 800c89a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	f04f 0300 	mov.w	r3, #0
 800c8aa:	1891      	adds	r1, r2, r2
 800c8ac:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c8b0:	415b      	adcs	r3, r3
 800c8b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c8b6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800c8ba:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800c8be:	f7f4 f99b 	bl	8000bf8 <__aeabi_uldivmod>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	4b4c      	ldr	r3, [pc, #304]	; (800c9f8 <UART_SetConfig+0x2dc>)
 800c8c8:	fba3 2302 	umull	r2, r3, r3, r2
 800c8cc:	095b      	lsrs	r3, r3, #5
 800c8ce:	011e      	lsls	r6, r3, #4
 800c8d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c8d4:	461c      	mov	r4, r3
 800c8d6:	f04f 0500 	mov.w	r5, #0
 800c8da:	4622      	mov	r2, r4
 800c8dc:	462b      	mov	r3, r5
 800c8de:	1891      	adds	r1, r2, r2
 800c8e0:	67b9      	str	r1, [r7, #120]	; 0x78
 800c8e2:	415b      	adcs	r3, r3
 800c8e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c8e6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800c8ea:	1912      	adds	r2, r2, r4
 800c8ec:	eb45 0303 	adc.w	r3, r5, r3
 800c8f0:	f04f 0000 	mov.w	r0, #0
 800c8f4:	f04f 0100 	mov.w	r1, #0
 800c8f8:	00d9      	lsls	r1, r3, #3
 800c8fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c8fe:	00d0      	lsls	r0, r2, #3
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	1911      	adds	r1, r2, r4
 800c906:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800c90a:	416b      	adcs	r3, r5
 800c90c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	461a      	mov	r2, r3
 800c918:	f04f 0300 	mov.w	r3, #0
 800c91c:	1891      	adds	r1, r2, r2
 800c91e:	6739      	str	r1, [r7, #112]	; 0x70
 800c920:	415b      	adcs	r3, r3
 800c922:	677b      	str	r3, [r7, #116]	; 0x74
 800c924:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c928:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c92c:	f7f4 f964 	bl	8000bf8 <__aeabi_uldivmod>
 800c930:	4602      	mov	r2, r0
 800c932:	460b      	mov	r3, r1
 800c934:	4b30      	ldr	r3, [pc, #192]	; (800c9f8 <UART_SetConfig+0x2dc>)
 800c936:	fba3 1302 	umull	r1, r3, r3, r2
 800c93a:	095b      	lsrs	r3, r3, #5
 800c93c:	2164      	movs	r1, #100	; 0x64
 800c93e:	fb01 f303 	mul.w	r3, r1, r3
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	3332      	adds	r3, #50	; 0x32
 800c948:	4a2b      	ldr	r2, [pc, #172]	; (800c9f8 <UART_SetConfig+0x2dc>)
 800c94a:	fba2 2303 	umull	r2, r3, r2, r3
 800c94e:	095b      	lsrs	r3, r3, #5
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c956:	441e      	add	r6, r3
 800c958:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c95c:	4618      	mov	r0, r3
 800c95e:	f04f 0100 	mov.w	r1, #0
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	1894      	adds	r4, r2, r2
 800c968:	66bc      	str	r4, [r7, #104]	; 0x68
 800c96a:	415b      	adcs	r3, r3
 800c96c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c96e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c972:	1812      	adds	r2, r2, r0
 800c974:	eb41 0303 	adc.w	r3, r1, r3
 800c978:	f04f 0400 	mov.w	r4, #0
 800c97c:	f04f 0500 	mov.w	r5, #0
 800c980:	00dd      	lsls	r5, r3, #3
 800c982:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c986:	00d4      	lsls	r4, r2, #3
 800c988:	4622      	mov	r2, r4
 800c98a:	462b      	mov	r3, r5
 800c98c:	1814      	adds	r4, r2, r0
 800c98e:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800c992:	414b      	adcs	r3, r1
 800c994:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	f04f 0300 	mov.w	r3, #0
 800c9a4:	1891      	adds	r1, r2, r2
 800c9a6:	6639      	str	r1, [r7, #96]	; 0x60
 800c9a8:	415b      	adcs	r3, r3
 800c9aa:	667b      	str	r3, [r7, #100]	; 0x64
 800c9ac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800c9b0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c9b4:	f7f4 f920 	bl	8000bf8 <__aeabi_uldivmod>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4b0e      	ldr	r3, [pc, #56]	; (800c9f8 <UART_SetConfig+0x2dc>)
 800c9be:	fba3 1302 	umull	r1, r3, r3, r2
 800c9c2:	095b      	lsrs	r3, r3, #5
 800c9c4:	2164      	movs	r1, #100	; 0x64
 800c9c6:	fb01 f303 	mul.w	r3, r1, r3
 800c9ca:	1ad3      	subs	r3, r2, r3
 800c9cc:	00db      	lsls	r3, r3, #3
 800c9ce:	3332      	adds	r3, #50	; 0x32
 800c9d0:	4a09      	ldr	r2, [pc, #36]	; (800c9f8 <UART_SetConfig+0x2dc>)
 800c9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9d6:	095b      	lsrs	r3, r3, #5
 800c9d8:	f003 0207 	and.w	r2, r3, #7
 800c9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4432      	add	r2, r6
 800c9e4:	609a      	str	r2, [r3, #8]
 800c9e6:	e277      	b.n	800ced8 <UART_SetConfig+0x7bc>
 800c9e8:	00a037a0 	.word	0x00a037a0
 800c9ec:	0800fb88 	.word	0x0800fb88
 800c9f0:	40011000 	.word	0x40011000
 800c9f4:	40011400 	.word	0x40011400
 800c9f8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c9fc:	f7fc fc7e 	bl	80092fc <HAL_RCC_GetPCLK1Freq>
 800ca00:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ca08:	461c      	mov	r4, r3
 800ca0a:	f04f 0500 	mov.w	r5, #0
 800ca0e:	4622      	mov	r2, r4
 800ca10:	462b      	mov	r3, r5
 800ca12:	1891      	adds	r1, r2, r2
 800ca14:	65b9      	str	r1, [r7, #88]	; 0x58
 800ca16:	415b      	adcs	r3, r3
 800ca18:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ca1e:	1912      	adds	r2, r2, r4
 800ca20:	eb45 0303 	adc.w	r3, r5, r3
 800ca24:	f04f 0000 	mov.w	r0, #0
 800ca28:	f04f 0100 	mov.w	r1, #0
 800ca2c:	00d9      	lsls	r1, r3, #3
 800ca2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ca32:	00d0      	lsls	r0, r2, #3
 800ca34:	4602      	mov	r2, r0
 800ca36:	460b      	mov	r3, r1
 800ca38:	1911      	adds	r1, r2, r4
 800ca3a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800ca3e:	416b      	adcs	r3, r5
 800ca40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f04f 0300 	mov.w	r3, #0
 800ca50:	1891      	adds	r1, r2, r2
 800ca52:	6539      	str	r1, [r7, #80]	; 0x50
 800ca54:	415b      	adcs	r3, r3
 800ca56:	657b      	str	r3, [r7, #84]	; 0x54
 800ca58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ca5c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800ca60:	f7f4 f8ca 	bl	8000bf8 <__aeabi_uldivmod>
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	4bb3      	ldr	r3, [pc, #716]	; (800cd38 <UART_SetConfig+0x61c>)
 800ca6a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca6e:	095b      	lsrs	r3, r3, #5
 800ca70:	011e      	lsls	r6, r3, #4
 800ca72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ca76:	461c      	mov	r4, r3
 800ca78:	f04f 0500 	mov.w	r5, #0
 800ca7c:	4622      	mov	r2, r4
 800ca7e:	462b      	mov	r3, r5
 800ca80:	1891      	adds	r1, r2, r2
 800ca82:	64b9      	str	r1, [r7, #72]	; 0x48
 800ca84:	415b      	adcs	r3, r3
 800ca86:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ca8c:	1912      	adds	r2, r2, r4
 800ca8e:	eb45 0303 	adc.w	r3, r5, r3
 800ca92:	f04f 0000 	mov.w	r0, #0
 800ca96:	f04f 0100 	mov.w	r1, #0
 800ca9a:	00d9      	lsls	r1, r3, #3
 800ca9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800caa0:	00d0      	lsls	r0, r2, #3
 800caa2:	4602      	mov	r2, r0
 800caa4:	460b      	mov	r3, r1
 800caa6:	1911      	adds	r1, r2, r4
 800caa8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800caac:	416b      	adcs	r3, r5
 800caae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	461a      	mov	r2, r3
 800caba:	f04f 0300 	mov.w	r3, #0
 800cabe:	1891      	adds	r1, r2, r2
 800cac0:	6439      	str	r1, [r7, #64]	; 0x40
 800cac2:	415b      	adcs	r3, r3
 800cac4:	647b      	str	r3, [r7, #68]	; 0x44
 800cac6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800caca:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800cace:	f7f4 f893 	bl	8000bf8 <__aeabi_uldivmod>
 800cad2:	4602      	mov	r2, r0
 800cad4:	460b      	mov	r3, r1
 800cad6:	4b98      	ldr	r3, [pc, #608]	; (800cd38 <UART_SetConfig+0x61c>)
 800cad8:	fba3 1302 	umull	r1, r3, r3, r2
 800cadc:	095b      	lsrs	r3, r3, #5
 800cade:	2164      	movs	r1, #100	; 0x64
 800cae0:	fb01 f303 	mul.w	r3, r1, r3
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	3332      	adds	r3, #50	; 0x32
 800caea:	4a93      	ldr	r2, [pc, #588]	; (800cd38 <UART_SetConfig+0x61c>)
 800caec:	fba2 2303 	umull	r2, r3, r2, r3
 800caf0:	095b      	lsrs	r3, r3, #5
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800caf8:	441e      	add	r6, r3
 800cafa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cafe:	4618      	mov	r0, r3
 800cb00:	f04f 0100 	mov.w	r1, #0
 800cb04:	4602      	mov	r2, r0
 800cb06:	460b      	mov	r3, r1
 800cb08:	1894      	adds	r4, r2, r2
 800cb0a:	63bc      	str	r4, [r7, #56]	; 0x38
 800cb0c:	415b      	adcs	r3, r3
 800cb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cb14:	1812      	adds	r2, r2, r0
 800cb16:	eb41 0303 	adc.w	r3, r1, r3
 800cb1a:	f04f 0400 	mov.w	r4, #0
 800cb1e:	f04f 0500 	mov.w	r5, #0
 800cb22:	00dd      	lsls	r5, r3, #3
 800cb24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cb28:	00d4      	lsls	r4, r2, #3
 800cb2a:	4622      	mov	r2, r4
 800cb2c:	462b      	mov	r3, r5
 800cb2e:	1814      	adds	r4, r2, r0
 800cb30:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800cb34:	414b      	adcs	r3, r1
 800cb36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cb3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	461a      	mov	r2, r3
 800cb42:	f04f 0300 	mov.w	r3, #0
 800cb46:	1891      	adds	r1, r2, r2
 800cb48:	6339      	str	r1, [r7, #48]	; 0x30
 800cb4a:	415b      	adcs	r3, r3
 800cb4c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cb52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cb56:	f7f4 f84f 	bl	8000bf8 <__aeabi_uldivmod>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	4b76      	ldr	r3, [pc, #472]	; (800cd38 <UART_SetConfig+0x61c>)
 800cb60:	fba3 1302 	umull	r1, r3, r3, r2
 800cb64:	095b      	lsrs	r3, r3, #5
 800cb66:	2164      	movs	r1, #100	; 0x64
 800cb68:	fb01 f303 	mul.w	r3, r1, r3
 800cb6c:	1ad3      	subs	r3, r2, r3
 800cb6e:	00db      	lsls	r3, r3, #3
 800cb70:	3332      	adds	r3, #50	; 0x32
 800cb72:	4a71      	ldr	r2, [pc, #452]	; (800cd38 <UART_SetConfig+0x61c>)
 800cb74:	fba2 2303 	umull	r2, r3, r2, r3
 800cb78:	095b      	lsrs	r3, r3, #5
 800cb7a:	f003 0207 	and.w	r2, r3, #7
 800cb7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4432      	add	r2, r6
 800cb86:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800cb88:	e1a6      	b.n	800ced8 <UART_SetConfig+0x7bc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cb8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	4b6a      	ldr	r3, [pc, #424]	; (800cd3c <UART_SetConfig+0x620>)
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d006      	beq.n	800cba4 <UART_SetConfig+0x488>
 800cb96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	4b68      	ldr	r3, [pc, #416]	; (800cd40 <UART_SetConfig+0x624>)
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	f040 80d0 	bne.w	800cd44 <UART_SetConfig+0x628>
      pclk = HAL_RCC_GetPCLK2Freq();
 800cba4:	f7fc fbbe 	bl	8009324 <HAL_RCC_GetPCLK2Freq>
 800cba8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cbac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cbb0:	461c      	mov	r4, r3
 800cbb2:	f04f 0500 	mov.w	r5, #0
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	462b      	mov	r3, r5
 800cbba:	1891      	adds	r1, r2, r2
 800cbbc:	62b9      	str	r1, [r7, #40]	; 0x28
 800cbbe:	415b      	adcs	r3, r3
 800cbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cbc6:	1912      	adds	r2, r2, r4
 800cbc8:	eb45 0303 	adc.w	r3, r5, r3
 800cbcc:	f04f 0000 	mov.w	r0, #0
 800cbd0:	f04f 0100 	mov.w	r1, #0
 800cbd4:	00d9      	lsls	r1, r3, #3
 800cbd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cbda:	00d0      	lsls	r0, r2, #3
 800cbdc:	4602      	mov	r2, r0
 800cbde:	460b      	mov	r3, r1
 800cbe0:	eb12 0a04 	adds.w	sl, r2, r4
 800cbe4:	eb43 0b05 	adc.w	fp, r3, r5
 800cbe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f04f 0100 	mov.w	r1, #0
 800cbf4:	f04f 0200 	mov.w	r2, #0
 800cbf8:	f04f 0300 	mov.w	r3, #0
 800cbfc:	008b      	lsls	r3, r1, #2
 800cbfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cc02:	0082      	lsls	r2, r0, #2
 800cc04:	4650      	mov	r0, sl
 800cc06:	4659      	mov	r1, fp
 800cc08:	f7f3 fff6 	bl	8000bf8 <__aeabi_uldivmod>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4b49      	ldr	r3, [pc, #292]	; (800cd38 <UART_SetConfig+0x61c>)
 800cc12:	fba3 2302 	umull	r2, r3, r3, r2
 800cc16:	095b      	lsrs	r3, r3, #5
 800cc18:	011e      	lsls	r6, r3, #4
 800cc1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f04f 0100 	mov.w	r1, #0
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	1894      	adds	r4, r2, r2
 800cc2a:	623c      	str	r4, [r7, #32]
 800cc2c:	415b      	adcs	r3, r3
 800cc2e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc34:	1812      	adds	r2, r2, r0
 800cc36:	eb41 0303 	adc.w	r3, r1, r3
 800cc3a:	f04f 0400 	mov.w	r4, #0
 800cc3e:	f04f 0500 	mov.w	r5, #0
 800cc42:	00dd      	lsls	r5, r3, #3
 800cc44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cc48:	00d4      	lsls	r4, r2, #3
 800cc4a:	4622      	mov	r2, r4
 800cc4c:	462b      	mov	r3, r5
 800cc4e:	1814      	adds	r4, r2, r0
 800cc50:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800cc54:	414b      	adcs	r3, r1
 800cc56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cc5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f04f 0100 	mov.w	r1, #0
 800cc66:	f04f 0200 	mov.w	r2, #0
 800cc6a:	f04f 0300 	mov.w	r3, #0
 800cc6e:	008b      	lsls	r3, r1, #2
 800cc70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cc74:	0082      	lsls	r2, r0, #2
 800cc76:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800cc7a:	f7f3 ffbd 	bl	8000bf8 <__aeabi_uldivmod>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	460b      	mov	r3, r1
 800cc82:	4b2d      	ldr	r3, [pc, #180]	; (800cd38 <UART_SetConfig+0x61c>)
 800cc84:	fba3 1302 	umull	r1, r3, r3, r2
 800cc88:	095b      	lsrs	r3, r3, #5
 800cc8a:	2164      	movs	r1, #100	; 0x64
 800cc8c:	fb01 f303 	mul.w	r3, r1, r3
 800cc90:	1ad3      	subs	r3, r2, r3
 800cc92:	011b      	lsls	r3, r3, #4
 800cc94:	3332      	adds	r3, #50	; 0x32
 800cc96:	4a28      	ldr	r2, [pc, #160]	; (800cd38 <UART_SetConfig+0x61c>)
 800cc98:	fba2 2303 	umull	r2, r3, r2, r3
 800cc9c:	095b      	lsrs	r3, r3, #5
 800cc9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cca2:	441e      	add	r6, r3
 800cca4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f04f 0100 	mov.w	r1, #0
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	1894      	adds	r4, r2, r2
 800ccb4:	61bc      	str	r4, [r7, #24]
 800ccb6:	415b      	adcs	r3, r3
 800ccb8:	61fb      	str	r3, [r7, #28]
 800ccba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ccbe:	1812      	adds	r2, r2, r0
 800ccc0:	eb41 0303 	adc.w	r3, r1, r3
 800ccc4:	f04f 0400 	mov.w	r4, #0
 800ccc8:	f04f 0500 	mov.w	r5, #0
 800cccc:	00dd      	lsls	r5, r3, #3
 800ccce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ccd2:	00d4      	lsls	r4, r2, #3
 800ccd4:	4622      	mov	r2, r4
 800ccd6:	462b      	mov	r3, r5
 800ccd8:	1814      	adds	r4, r2, r0
 800ccda:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800ccde:	414b      	adcs	r3, r1
 800cce0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f04f 0100 	mov.w	r1, #0
 800ccf0:	f04f 0200 	mov.w	r2, #0
 800ccf4:	f04f 0300 	mov.w	r3, #0
 800ccf8:	008b      	lsls	r3, r1, #2
 800ccfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ccfe:	0082      	lsls	r2, r0, #2
 800cd00:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800cd04:	f7f3 ff78 	bl	8000bf8 <__aeabi_uldivmod>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	4b0a      	ldr	r3, [pc, #40]	; (800cd38 <UART_SetConfig+0x61c>)
 800cd0e:	fba3 1302 	umull	r1, r3, r3, r2
 800cd12:	095b      	lsrs	r3, r3, #5
 800cd14:	2164      	movs	r1, #100	; 0x64
 800cd16:	fb01 f303 	mul.w	r3, r1, r3
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	011b      	lsls	r3, r3, #4
 800cd1e:	3332      	adds	r3, #50	; 0x32
 800cd20:	4a05      	ldr	r2, [pc, #20]	; (800cd38 <UART_SetConfig+0x61c>)
 800cd22:	fba2 2303 	umull	r2, r3, r2, r3
 800cd26:	095b      	lsrs	r3, r3, #5
 800cd28:	f003 020f 	and.w	r2, r3, #15
 800cd2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4432      	add	r2, r6
 800cd34:	609a      	str	r2, [r3, #8]
 800cd36:	e0cf      	b.n	800ced8 <UART_SetConfig+0x7bc>
 800cd38:	51eb851f 	.word	0x51eb851f
 800cd3c:	40011000 	.word	0x40011000
 800cd40:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800cd44:	f7fc fada 	bl	80092fc <HAL_RCC_GetPCLK1Freq>
 800cd48:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd50:	461c      	mov	r4, r3
 800cd52:	f04f 0500 	mov.w	r5, #0
 800cd56:	4622      	mov	r2, r4
 800cd58:	462b      	mov	r3, r5
 800cd5a:	1891      	adds	r1, r2, r2
 800cd5c:	6139      	str	r1, [r7, #16]
 800cd5e:	415b      	adcs	r3, r3
 800cd60:	617b      	str	r3, [r7, #20]
 800cd62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd66:	1912      	adds	r2, r2, r4
 800cd68:	eb45 0303 	adc.w	r3, r5, r3
 800cd6c:	f04f 0000 	mov.w	r0, #0
 800cd70:	f04f 0100 	mov.w	r1, #0
 800cd74:	00d9      	lsls	r1, r3, #3
 800cd76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd7a:	00d0      	lsls	r0, r2, #3
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	460b      	mov	r3, r1
 800cd80:	eb12 0804 	adds.w	r8, r2, r4
 800cd84:	eb43 0905 	adc.w	r9, r3, r5
 800cd88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f04f 0100 	mov.w	r1, #0
 800cd94:	f04f 0200 	mov.w	r2, #0
 800cd98:	f04f 0300 	mov.w	r3, #0
 800cd9c:	008b      	lsls	r3, r1, #2
 800cd9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cda2:	0082      	lsls	r2, r0, #2
 800cda4:	4640      	mov	r0, r8
 800cda6:	4649      	mov	r1, r9
 800cda8:	f7f3 ff26 	bl	8000bf8 <__aeabi_uldivmod>
 800cdac:	4602      	mov	r2, r0
 800cdae:	460b      	mov	r3, r1
 800cdb0:	4b4c      	ldr	r3, [pc, #304]	; (800cee4 <UART_SetConfig+0x7c8>)
 800cdb2:	fba3 2302 	umull	r2, r3, r3, r2
 800cdb6:	095b      	lsrs	r3, r3, #5
 800cdb8:	011e      	lsls	r6, r3, #4
 800cdba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f04f 0100 	mov.w	r1, #0
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	1894      	adds	r4, r2, r2
 800cdca:	60bc      	str	r4, [r7, #8]
 800cdcc:	415b      	adcs	r3, r3
 800cdce:	60fb      	str	r3, [r7, #12]
 800cdd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdd4:	1812      	adds	r2, r2, r0
 800cdd6:	eb41 0303 	adc.w	r3, r1, r3
 800cdda:	f04f 0400 	mov.w	r4, #0
 800cdde:	f04f 0500 	mov.w	r5, #0
 800cde2:	00dd      	lsls	r5, r3, #3
 800cde4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cde8:	00d4      	lsls	r4, r2, #3
 800cdea:	4622      	mov	r2, r4
 800cdec:	462b      	mov	r3, r5
 800cdee:	1814      	adds	r4, r2, r0
 800cdf0:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800cdf4:	414b      	adcs	r3, r1
 800cdf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cdfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f04f 0100 	mov.w	r1, #0
 800ce06:	f04f 0200 	mov.w	r2, #0
 800ce0a:	f04f 0300 	mov.w	r3, #0
 800ce0e:	008b      	lsls	r3, r1, #2
 800ce10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ce14:	0082      	lsls	r2, r0, #2
 800ce16:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ce1a:	f7f3 feed 	bl	8000bf8 <__aeabi_uldivmod>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	4b30      	ldr	r3, [pc, #192]	; (800cee4 <UART_SetConfig+0x7c8>)
 800ce24:	fba3 1302 	umull	r1, r3, r3, r2
 800ce28:	095b      	lsrs	r3, r3, #5
 800ce2a:	2164      	movs	r1, #100	; 0x64
 800ce2c:	fb01 f303 	mul.w	r3, r1, r3
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	011b      	lsls	r3, r3, #4
 800ce34:	3332      	adds	r3, #50	; 0x32
 800ce36:	4a2b      	ldr	r2, [pc, #172]	; (800cee4 <UART_SetConfig+0x7c8>)
 800ce38:	fba2 2303 	umull	r2, r3, r2, r3
 800ce3c:	095b      	lsrs	r3, r3, #5
 800ce3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce42:	441e      	add	r6, r3
 800ce44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f04f 0100 	mov.w	r1, #0
 800ce4e:	4602      	mov	r2, r0
 800ce50:	460b      	mov	r3, r1
 800ce52:	1894      	adds	r4, r2, r2
 800ce54:	603c      	str	r4, [r7, #0]
 800ce56:	415b      	adcs	r3, r3
 800ce58:	607b      	str	r3, [r7, #4]
 800ce5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce5e:	1812      	adds	r2, r2, r0
 800ce60:	eb41 0303 	adc.w	r3, r1, r3
 800ce64:	f04f 0400 	mov.w	r4, #0
 800ce68:	f04f 0500 	mov.w	r5, #0
 800ce6c:	00dd      	lsls	r5, r3, #3
 800ce6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ce72:	00d4      	lsls	r4, r2, #3
 800ce74:	4622      	mov	r2, r4
 800ce76:	462b      	mov	r3, r5
 800ce78:	1814      	adds	r4, r2, r0
 800ce7a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800ce7e:	414b      	adcs	r3, r1
 800ce80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ce84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f04f 0100 	mov.w	r1, #0
 800ce90:	f04f 0200 	mov.w	r2, #0
 800ce94:	f04f 0300 	mov.w	r3, #0
 800ce98:	008b      	lsls	r3, r1, #2
 800ce9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ce9e:	0082      	lsls	r2, r0, #2
 800cea0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800cea4:	f7f3 fea8 	bl	8000bf8 <__aeabi_uldivmod>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	4b0d      	ldr	r3, [pc, #52]	; (800cee4 <UART_SetConfig+0x7c8>)
 800ceae:	fba3 1302 	umull	r1, r3, r3, r2
 800ceb2:	095b      	lsrs	r3, r3, #5
 800ceb4:	2164      	movs	r1, #100	; 0x64
 800ceb6:	fb01 f303 	mul.w	r3, r1, r3
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	011b      	lsls	r3, r3, #4
 800cebe:	3332      	adds	r3, #50	; 0x32
 800cec0:	4a08      	ldr	r2, [pc, #32]	; (800cee4 <UART_SetConfig+0x7c8>)
 800cec2:	fba2 2303 	umull	r2, r3, r2, r3
 800cec6:	095b      	lsrs	r3, r3, #5
 800cec8:	f003 020f 	and.w	r2, r3, #15
 800cecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4432      	add	r2, r6
 800ced4:	609a      	str	r2, [r3, #8]
}
 800ced6:	e7ff      	b.n	800ced8 <UART_SetConfig+0x7bc>
 800ced8:	bf00      	nop
 800ceda:	37f4      	adds	r7, #244	; 0xf4
 800cedc:	46bd      	mov	sp, r7
 800cede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee2:	bf00      	nop
 800cee4:	51eb851f 	.word	0x51eb851f

0800cee8 <__errno>:
 800cee8:	4b01      	ldr	r3, [pc, #4]	; (800cef0 <__errno+0x8>)
 800ceea:	6818      	ldr	r0, [r3, #0]
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	200001dc 	.word	0x200001dc

0800cef4 <__libc_init_array>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	4d0d      	ldr	r5, [pc, #52]	; (800cf2c <__libc_init_array+0x38>)
 800cef8:	4c0d      	ldr	r4, [pc, #52]	; (800cf30 <__libc_init_array+0x3c>)
 800cefa:	1b64      	subs	r4, r4, r5
 800cefc:	10a4      	asrs	r4, r4, #2
 800cefe:	2600      	movs	r6, #0
 800cf00:	42a6      	cmp	r6, r4
 800cf02:	d109      	bne.n	800cf18 <__libc_init_array+0x24>
 800cf04:	4d0b      	ldr	r5, [pc, #44]	; (800cf34 <__libc_init_array+0x40>)
 800cf06:	4c0c      	ldr	r4, [pc, #48]	; (800cf38 <__libc_init_array+0x44>)
 800cf08:	f002 fd10 	bl	800f92c <_init>
 800cf0c:	1b64      	subs	r4, r4, r5
 800cf0e:	10a4      	asrs	r4, r4, #2
 800cf10:	2600      	movs	r6, #0
 800cf12:	42a6      	cmp	r6, r4
 800cf14:	d105      	bne.n	800cf22 <__libc_init_array+0x2e>
 800cf16:	bd70      	pop	{r4, r5, r6, pc}
 800cf18:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf1c:	4798      	blx	r3
 800cf1e:	3601      	adds	r6, #1
 800cf20:	e7ee      	b.n	800cf00 <__libc_init_array+0xc>
 800cf22:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf26:	4798      	blx	r3
 800cf28:	3601      	adds	r6, #1
 800cf2a:	e7f2      	b.n	800cf12 <__libc_init_array+0x1e>
 800cf2c:	0800fe98 	.word	0x0800fe98
 800cf30:	0800fe98 	.word	0x0800fe98
 800cf34:	0800fe98 	.word	0x0800fe98
 800cf38:	0800fe9c 	.word	0x0800fe9c

0800cf3c <memset>:
 800cf3c:	4402      	add	r2, r0
 800cf3e:	4603      	mov	r3, r0
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d100      	bne.n	800cf46 <memset+0xa>
 800cf44:	4770      	bx	lr
 800cf46:	f803 1b01 	strb.w	r1, [r3], #1
 800cf4a:	e7f9      	b.n	800cf40 <memset+0x4>
 800cf4c:	0000      	movs	r0, r0
	...

0800cf50 <atan>:
 800cf50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf54:	ec55 4b10 	vmov	r4, r5, d0
 800cf58:	4bc3      	ldr	r3, [pc, #780]	; (800d268 <atan+0x318>)
 800cf5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf5e:	429e      	cmp	r6, r3
 800cf60:	46ab      	mov	fp, r5
 800cf62:	dd18      	ble.n	800cf96 <atan+0x46>
 800cf64:	4bc1      	ldr	r3, [pc, #772]	; (800d26c <atan+0x31c>)
 800cf66:	429e      	cmp	r6, r3
 800cf68:	dc01      	bgt.n	800cf6e <atan+0x1e>
 800cf6a:	d109      	bne.n	800cf80 <atan+0x30>
 800cf6c:	b144      	cbz	r4, 800cf80 <atan+0x30>
 800cf6e:	4622      	mov	r2, r4
 800cf70:	462b      	mov	r3, r5
 800cf72:	4620      	mov	r0, r4
 800cf74:	4629      	mov	r1, r5
 800cf76:	f7f3 f941 	bl	80001fc <__adddf3>
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	460d      	mov	r5, r1
 800cf7e:	e006      	b.n	800cf8e <atan+0x3e>
 800cf80:	f1bb 0f00 	cmp.w	fp, #0
 800cf84:	f300 8131 	bgt.w	800d1ea <atan+0x29a>
 800cf88:	a59b      	add	r5, pc, #620	; (adr r5, 800d1f8 <atan+0x2a8>)
 800cf8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cf8e:	ec45 4b10 	vmov	d0, r4, r5
 800cf92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf96:	4bb6      	ldr	r3, [pc, #728]	; (800d270 <atan+0x320>)
 800cf98:	429e      	cmp	r6, r3
 800cf9a:	dc14      	bgt.n	800cfc6 <atan+0x76>
 800cf9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cfa0:	429e      	cmp	r6, r3
 800cfa2:	dc0d      	bgt.n	800cfc0 <atan+0x70>
 800cfa4:	a396      	add	r3, pc, #600	; (adr r3, 800d200 <atan+0x2b0>)
 800cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfaa:	ee10 0a10 	vmov	r0, s0
 800cfae:	4629      	mov	r1, r5
 800cfb0:	f7f3 f924 	bl	80001fc <__adddf3>
 800cfb4:	4baf      	ldr	r3, [pc, #700]	; (800d274 <atan+0x324>)
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f7f3 fd66 	bl	8000a88 <__aeabi_dcmpgt>
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	d1e6      	bne.n	800cf8e <atan+0x3e>
 800cfc0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cfc4:	e02b      	b.n	800d01e <atan+0xce>
 800cfc6:	f000 f9b3 	bl	800d330 <fabs>
 800cfca:	4bab      	ldr	r3, [pc, #684]	; (800d278 <atan+0x328>)
 800cfcc:	429e      	cmp	r6, r3
 800cfce:	ec55 4b10 	vmov	r4, r5, d0
 800cfd2:	f300 80bf 	bgt.w	800d154 <atan+0x204>
 800cfd6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cfda:	429e      	cmp	r6, r3
 800cfdc:	f300 80a0 	bgt.w	800d120 <atan+0x1d0>
 800cfe0:	ee10 2a10 	vmov	r2, s0
 800cfe4:	ee10 0a10 	vmov	r0, s0
 800cfe8:	462b      	mov	r3, r5
 800cfea:	4629      	mov	r1, r5
 800cfec:	f7f3 f906 	bl	80001fc <__adddf3>
 800cff0:	4ba0      	ldr	r3, [pc, #640]	; (800d274 <atan+0x324>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	f7f3 f900 	bl	80001f8 <__aeabi_dsub>
 800cff8:	2200      	movs	r2, #0
 800cffa:	4606      	mov	r6, r0
 800cffc:	460f      	mov	r7, r1
 800cffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d002:	4620      	mov	r0, r4
 800d004:	4629      	mov	r1, r5
 800d006:	f7f3 f8f9 	bl	80001fc <__adddf3>
 800d00a:	4602      	mov	r2, r0
 800d00c:	460b      	mov	r3, r1
 800d00e:	4630      	mov	r0, r6
 800d010:	4639      	mov	r1, r7
 800d012:	f7f3 fbd3 	bl	80007bc <__aeabi_ddiv>
 800d016:	f04f 0a00 	mov.w	sl, #0
 800d01a:	4604      	mov	r4, r0
 800d01c:	460d      	mov	r5, r1
 800d01e:	4622      	mov	r2, r4
 800d020:	462b      	mov	r3, r5
 800d022:	4620      	mov	r0, r4
 800d024:	4629      	mov	r1, r5
 800d026:	f7f3 fa9f 	bl	8000568 <__aeabi_dmul>
 800d02a:	4602      	mov	r2, r0
 800d02c:	460b      	mov	r3, r1
 800d02e:	4680      	mov	r8, r0
 800d030:	4689      	mov	r9, r1
 800d032:	f7f3 fa99 	bl	8000568 <__aeabi_dmul>
 800d036:	a374      	add	r3, pc, #464	; (adr r3, 800d208 <atan+0x2b8>)
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	4606      	mov	r6, r0
 800d03e:	460f      	mov	r7, r1
 800d040:	f7f3 fa92 	bl	8000568 <__aeabi_dmul>
 800d044:	a372      	add	r3, pc, #456	; (adr r3, 800d210 <atan+0x2c0>)
 800d046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04a:	f7f3 f8d7 	bl	80001fc <__adddf3>
 800d04e:	4632      	mov	r2, r6
 800d050:	463b      	mov	r3, r7
 800d052:	f7f3 fa89 	bl	8000568 <__aeabi_dmul>
 800d056:	a370      	add	r3, pc, #448	; (adr r3, 800d218 <atan+0x2c8>)
 800d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05c:	f7f3 f8ce 	bl	80001fc <__adddf3>
 800d060:	4632      	mov	r2, r6
 800d062:	463b      	mov	r3, r7
 800d064:	f7f3 fa80 	bl	8000568 <__aeabi_dmul>
 800d068:	a36d      	add	r3, pc, #436	; (adr r3, 800d220 <atan+0x2d0>)
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	f7f3 f8c5 	bl	80001fc <__adddf3>
 800d072:	4632      	mov	r2, r6
 800d074:	463b      	mov	r3, r7
 800d076:	f7f3 fa77 	bl	8000568 <__aeabi_dmul>
 800d07a:	a36b      	add	r3, pc, #428	; (adr r3, 800d228 <atan+0x2d8>)
 800d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d080:	f7f3 f8bc 	bl	80001fc <__adddf3>
 800d084:	4632      	mov	r2, r6
 800d086:	463b      	mov	r3, r7
 800d088:	f7f3 fa6e 	bl	8000568 <__aeabi_dmul>
 800d08c:	a368      	add	r3, pc, #416	; (adr r3, 800d230 <atan+0x2e0>)
 800d08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d092:	f7f3 f8b3 	bl	80001fc <__adddf3>
 800d096:	4642      	mov	r2, r8
 800d098:	464b      	mov	r3, r9
 800d09a:	f7f3 fa65 	bl	8000568 <__aeabi_dmul>
 800d09e:	a366      	add	r3, pc, #408	; (adr r3, 800d238 <atan+0x2e8>)
 800d0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a4:	4680      	mov	r8, r0
 800d0a6:	4689      	mov	r9, r1
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	4639      	mov	r1, r7
 800d0ac:	f7f3 fa5c 	bl	8000568 <__aeabi_dmul>
 800d0b0:	a363      	add	r3, pc, #396	; (adr r3, 800d240 <atan+0x2f0>)
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	f7f3 f89f 	bl	80001f8 <__aeabi_dsub>
 800d0ba:	4632      	mov	r2, r6
 800d0bc:	463b      	mov	r3, r7
 800d0be:	f7f3 fa53 	bl	8000568 <__aeabi_dmul>
 800d0c2:	a361      	add	r3, pc, #388	; (adr r3, 800d248 <atan+0x2f8>)
 800d0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c8:	f7f3 f896 	bl	80001f8 <__aeabi_dsub>
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	463b      	mov	r3, r7
 800d0d0:	f7f3 fa4a 	bl	8000568 <__aeabi_dmul>
 800d0d4:	a35e      	add	r3, pc, #376	; (adr r3, 800d250 <atan+0x300>)
 800d0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0da:	f7f3 f88d 	bl	80001f8 <__aeabi_dsub>
 800d0de:	4632      	mov	r2, r6
 800d0e0:	463b      	mov	r3, r7
 800d0e2:	f7f3 fa41 	bl	8000568 <__aeabi_dmul>
 800d0e6:	a35c      	add	r3, pc, #368	; (adr r3, 800d258 <atan+0x308>)
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	f7f3 f884 	bl	80001f8 <__aeabi_dsub>
 800d0f0:	4632      	mov	r2, r6
 800d0f2:	463b      	mov	r3, r7
 800d0f4:	f7f3 fa38 	bl	8000568 <__aeabi_dmul>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4640      	mov	r0, r8
 800d0fe:	4649      	mov	r1, r9
 800d100:	f7f3 f87c 	bl	80001fc <__adddf3>
 800d104:	4622      	mov	r2, r4
 800d106:	462b      	mov	r3, r5
 800d108:	f7f3 fa2e 	bl	8000568 <__aeabi_dmul>
 800d10c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800d110:	4602      	mov	r2, r0
 800d112:	460b      	mov	r3, r1
 800d114:	d14b      	bne.n	800d1ae <atan+0x25e>
 800d116:	4620      	mov	r0, r4
 800d118:	4629      	mov	r1, r5
 800d11a:	f7f3 f86d 	bl	80001f8 <__aeabi_dsub>
 800d11e:	e72c      	b.n	800cf7a <atan+0x2a>
 800d120:	ee10 0a10 	vmov	r0, s0
 800d124:	4b53      	ldr	r3, [pc, #332]	; (800d274 <atan+0x324>)
 800d126:	2200      	movs	r2, #0
 800d128:	4629      	mov	r1, r5
 800d12a:	f7f3 f865 	bl	80001f8 <__aeabi_dsub>
 800d12e:	4b51      	ldr	r3, [pc, #324]	; (800d274 <atan+0x324>)
 800d130:	4606      	mov	r6, r0
 800d132:	460f      	mov	r7, r1
 800d134:	2200      	movs	r2, #0
 800d136:	4620      	mov	r0, r4
 800d138:	4629      	mov	r1, r5
 800d13a:	f7f3 f85f 	bl	80001fc <__adddf3>
 800d13e:	4602      	mov	r2, r0
 800d140:	460b      	mov	r3, r1
 800d142:	4630      	mov	r0, r6
 800d144:	4639      	mov	r1, r7
 800d146:	f7f3 fb39 	bl	80007bc <__aeabi_ddiv>
 800d14a:	f04f 0a01 	mov.w	sl, #1
 800d14e:	4604      	mov	r4, r0
 800d150:	460d      	mov	r5, r1
 800d152:	e764      	b.n	800d01e <atan+0xce>
 800d154:	4b49      	ldr	r3, [pc, #292]	; (800d27c <atan+0x32c>)
 800d156:	429e      	cmp	r6, r3
 800d158:	da1d      	bge.n	800d196 <atan+0x246>
 800d15a:	ee10 0a10 	vmov	r0, s0
 800d15e:	4b48      	ldr	r3, [pc, #288]	; (800d280 <atan+0x330>)
 800d160:	2200      	movs	r2, #0
 800d162:	4629      	mov	r1, r5
 800d164:	f7f3 f848 	bl	80001f8 <__aeabi_dsub>
 800d168:	4b45      	ldr	r3, [pc, #276]	; (800d280 <atan+0x330>)
 800d16a:	4606      	mov	r6, r0
 800d16c:	460f      	mov	r7, r1
 800d16e:	2200      	movs	r2, #0
 800d170:	4620      	mov	r0, r4
 800d172:	4629      	mov	r1, r5
 800d174:	f7f3 f9f8 	bl	8000568 <__aeabi_dmul>
 800d178:	4b3e      	ldr	r3, [pc, #248]	; (800d274 <atan+0x324>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	f7f3 f83e 	bl	80001fc <__adddf3>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	4630      	mov	r0, r6
 800d186:	4639      	mov	r1, r7
 800d188:	f7f3 fb18 	bl	80007bc <__aeabi_ddiv>
 800d18c:	f04f 0a02 	mov.w	sl, #2
 800d190:	4604      	mov	r4, r0
 800d192:	460d      	mov	r5, r1
 800d194:	e743      	b.n	800d01e <atan+0xce>
 800d196:	462b      	mov	r3, r5
 800d198:	ee10 2a10 	vmov	r2, s0
 800d19c:	4939      	ldr	r1, [pc, #228]	; (800d284 <atan+0x334>)
 800d19e:	2000      	movs	r0, #0
 800d1a0:	f7f3 fb0c 	bl	80007bc <__aeabi_ddiv>
 800d1a4:	f04f 0a03 	mov.w	sl, #3
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	460d      	mov	r5, r1
 800d1ac:	e737      	b.n	800d01e <atan+0xce>
 800d1ae:	4b36      	ldr	r3, [pc, #216]	; (800d288 <atan+0x338>)
 800d1b0:	4e36      	ldr	r6, [pc, #216]	; (800d28c <atan+0x33c>)
 800d1b2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d1b6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d1ba:	e9da 2300 	ldrd	r2, r3, [sl]
 800d1be:	f7f3 f81b 	bl	80001f8 <__aeabi_dsub>
 800d1c2:	4622      	mov	r2, r4
 800d1c4:	462b      	mov	r3, r5
 800d1c6:	f7f3 f817 	bl	80001f8 <__aeabi_dsub>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d1d2:	f7f3 f811 	bl	80001f8 <__aeabi_dsub>
 800d1d6:	f1bb 0f00 	cmp.w	fp, #0
 800d1da:	4604      	mov	r4, r0
 800d1dc:	460d      	mov	r5, r1
 800d1de:	f6bf aed6 	bge.w	800cf8e <atan+0x3e>
 800d1e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1e6:	461d      	mov	r5, r3
 800d1e8:	e6d1      	b.n	800cf8e <atan+0x3e>
 800d1ea:	a51d      	add	r5, pc, #116	; (adr r5, 800d260 <atan+0x310>)
 800d1ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d1f0:	e6cd      	b.n	800cf8e <atan+0x3e>
 800d1f2:	bf00      	nop
 800d1f4:	f3af 8000 	nop.w
 800d1f8:	54442d18 	.word	0x54442d18
 800d1fc:	bff921fb 	.word	0xbff921fb
 800d200:	8800759c 	.word	0x8800759c
 800d204:	7e37e43c 	.word	0x7e37e43c
 800d208:	e322da11 	.word	0xe322da11
 800d20c:	3f90ad3a 	.word	0x3f90ad3a
 800d210:	24760deb 	.word	0x24760deb
 800d214:	3fa97b4b 	.word	0x3fa97b4b
 800d218:	a0d03d51 	.word	0xa0d03d51
 800d21c:	3fb10d66 	.word	0x3fb10d66
 800d220:	c54c206e 	.word	0xc54c206e
 800d224:	3fb745cd 	.word	0x3fb745cd
 800d228:	920083ff 	.word	0x920083ff
 800d22c:	3fc24924 	.word	0x3fc24924
 800d230:	5555550d 	.word	0x5555550d
 800d234:	3fd55555 	.word	0x3fd55555
 800d238:	2c6a6c2f 	.word	0x2c6a6c2f
 800d23c:	bfa2b444 	.word	0xbfa2b444
 800d240:	52defd9a 	.word	0x52defd9a
 800d244:	3fadde2d 	.word	0x3fadde2d
 800d248:	af749a6d 	.word	0xaf749a6d
 800d24c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d250:	fe231671 	.word	0xfe231671
 800d254:	3fbc71c6 	.word	0x3fbc71c6
 800d258:	9998ebc4 	.word	0x9998ebc4
 800d25c:	3fc99999 	.word	0x3fc99999
 800d260:	54442d18 	.word	0x54442d18
 800d264:	3ff921fb 	.word	0x3ff921fb
 800d268:	440fffff 	.word	0x440fffff
 800d26c:	7ff00000 	.word	0x7ff00000
 800d270:	3fdbffff 	.word	0x3fdbffff
 800d274:	3ff00000 	.word	0x3ff00000
 800d278:	3ff2ffff 	.word	0x3ff2ffff
 800d27c:	40038000 	.word	0x40038000
 800d280:	3ff80000 	.word	0x3ff80000
 800d284:	bff00000 	.word	0xbff00000
 800d288:	0800fc20 	.word	0x0800fc20
 800d28c:	0800fc00 	.word	0x0800fc00

0800d290 <cos>:
 800d290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d292:	ec53 2b10 	vmov	r2, r3, d0
 800d296:	4824      	ldr	r0, [pc, #144]	; (800d328 <cos+0x98>)
 800d298:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d29c:	4281      	cmp	r1, r0
 800d29e:	dc06      	bgt.n	800d2ae <cos+0x1e>
 800d2a0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d320 <cos+0x90>
 800d2a4:	f001 fcd4 	bl	800ec50 <__kernel_cos>
 800d2a8:	ec51 0b10 	vmov	r0, r1, d0
 800d2ac:	e007      	b.n	800d2be <cos+0x2e>
 800d2ae:	481f      	ldr	r0, [pc, #124]	; (800d32c <cos+0x9c>)
 800d2b0:	4281      	cmp	r1, r0
 800d2b2:	dd09      	ble.n	800d2c8 <cos+0x38>
 800d2b4:	ee10 0a10 	vmov	r0, s0
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	f7f2 ff9d 	bl	80001f8 <__aeabi_dsub>
 800d2be:	ec41 0b10 	vmov	d0, r0, r1
 800d2c2:	b005      	add	sp, #20
 800d2c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2c8:	4668      	mov	r0, sp
 800d2ca:	f001 fa01 	bl	800e6d0 <__ieee754_rem_pio2>
 800d2ce:	f000 0003 	and.w	r0, r0, #3
 800d2d2:	2801      	cmp	r0, #1
 800d2d4:	d007      	beq.n	800d2e6 <cos+0x56>
 800d2d6:	2802      	cmp	r0, #2
 800d2d8:	d012      	beq.n	800d300 <cos+0x70>
 800d2da:	b9c0      	cbnz	r0, 800d30e <cos+0x7e>
 800d2dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2e0:	ed9d 0b00 	vldr	d0, [sp]
 800d2e4:	e7de      	b.n	800d2a4 <cos+0x14>
 800d2e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2ea:	ed9d 0b00 	vldr	d0, [sp]
 800d2ee:	f002 f8b7 	bl	800f460 <__kernel_sin>
 800d2f2:	ec53 2b10 	vmov	r2, r3, d0
 800d2f6:	ee10 0a10 	vmov	r0, s0
 800d2fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d2fe:	e7de      	b.n	800d2be <cos+0x2e>
 800d300:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d304:	ed9d 0b00 	vldr	d0, [sp]
 800d308:	f001 fca2 	bl	800ec50 <__kernel_cos>
 800d30c:	e7f1      	b.n	800d2f2 <cos+0x62>
 800d30e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d312:	ed9d 0b00 	vldr	d0, [sp]
 800d316:	2001      	movs	r0, #1
 800d318:	f002 f8a2 	bl	800f460 <__kernel_sin>
 800d31c:	e7c4      	b.n	800d2a8 <cos+0x18>
 800d31e:	bf00      	nop
	...
 800d328:	3fe921fb 	.word	0x3fe921fb
 800d32c:	7fefffff 	.word	0x7fefffff

0800d330 <fabs>:
 800d330:	ec51 0b10 	vmov	r0, r1, d0
 800d334:	ee10 2a10 	vmov	r2, s0
 800d338:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d33c:	ec43 2b10 	vmov	d0, r2, r3
 800d340:	4770      	bx	lr
 800d342:	0000      	movs	r0, r0
 800d344:	0000      	movs	r0, r0
	...

0800d348 <sin>:
 800d348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d34a:	ec53 2b10 	vmov	r2, r3, d0
 800d34e:	4826      	ldr	r0, [pc, #152]	; (800d3e8 <sin+0xa0>)
 800d350:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d354:	4281      	cmp	r1, r0
 800d356:	dc07      	bgt.n	800d368 <sin+0x20>
 800d358:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d3e0 <sin+0x98>
 800d35c:	2000      	movs	r0, #0
 800d35e:	f002 f87f 	bl	800f460 <__kernel_sin>
 800d362:	ec51 0b10 	vmov	r0, r1, d0
 800d366:	e007      	b.n	800d378 <sin+0x30>
 800d368:	4820      	ldr	r0, [pc, #128]	; (800d3ec <sin+0xa4>)
 800d36a:	4281      	cmp	r1, r0
 800d36c:	dd09      	ble.n	800d382 <sin+0x3a>
 800d36e:	ee10 0a10 	vmov	r0, s0
 800d372:	4619      	mov	r1, r3
 800d374:	f7f2 ff40 	bl	80001f8 <__aeabi_dsub>
 800d378:	ec41 0b10 	vmov	d0, r0, r1
 800d37c:	b005      	add	sp, #20
 800d37e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d382:	4668      	mov	r0, sp
 800d384:	f001 f9a4 	bl	800e6d0 <__ieee754_rem_pio2>
 800d388:	f000 0003 	and.w	r0, r0, #3
 800d38c:	2801      	cmp	r0, #1
 800d38e:	d008      	beq.n	800d3a2 <sin+0x5a>
 800d390:	2802      	cmp	r0, #2
 800d392:	d00d      	beq.n	800d3b0 <sin+0x68>
 800d394:	b9d0      	cbnz	r0, 800d3cc <sin+0x84>
 800d396:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d39a:	ed9d 0b00 	vldr	d0, [sp]
 800d39e:	2001      	movs	r0, #1
 800d3a0:	e7dd      	b.n	800d35e <sin+0x16>
 800d3a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3a6:	ed9d 0b00 	vldr	d0, [sp]
 800d3aa:	f001 fc51 	bl	800ec50 <__kernel_cos>
 800d3ae:	e7d8      	b.n	800d362 <sin+0x1a>
 800d3b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3b4:	ed9d 0b00 	vldr	d0, [sp]
 800d3b8:	2001      	movs	r0, #1
 800d3ba:	f002 f851 	bl	800f460 <__kernel_sin>
 800d3be:	ec53 2b10 	vmov	r2, r3, d0
 800d3c2:	ee10 0a10 	vmov	r0, s0
 800d3c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d3ca:	e7d5      	b.n	800d378 <sin+0x30>
 800d3cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3d0:	ed9d 0b00 	vldr	d0, [sp]
 800d3d4:	f001 fc3c 	bl	800ec50 <__kernel_cos>
 800d3d8:	e7f1      	b.n	800d3be <sin+0x76>
 800d3da:	bf00      	nop
 800d3dc:	f3af 8000 	nop.w
	...
 800d3e8:	3fe921fb 	.word	0x3fe921fb
 800d3ec:	7fefffff 	.word	0x7fefffff

0800d3f0 <acos>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	ed2d 8b02 	vpush	{d8}
 800d3f6:	ec55 4b10 	vmov	r4, r5, d0
 800d3fa:	f000 f919 	bl	800d630 <__ieee754_acos>
 800d3fe:	4b16      	ldr	r3, [pc, #88]	; (800d458 <acos+0x68>)
 800d400:	eeb0 8a40 	vmov.f32	s16, s0
 800d404:	eef0 8a60 	vmov.f32	s17, s1
 800d408:	f993 3000 	ldrsb.w	r3, [r3]
 800d40c:	3301      	adds	r3, #1
 800d40e:	d01c      	beq.n	800d44a <acos+0x5a>
 800d410:	4622      	mov	r2, r4
 800d412:	462b      	mov	r3, r5
 800d414:	4620      	mov	r0, r4
 800d416:	4629      	mov	r1, r5
 800d418:	f7f3 fb40 	bl	8000a9c <__aeabi_dcmpun>
 800d41c:	b9a8      	cbnz	r0, 800d44a <acos+0x5a>
 800d41e:	ec45 4b10 	vmov	d0, r4, r5
 800d422:	f7ff ff85 	bl	800d330 <fabs>
 800d426:	4b0d      	ldr	r3, [pc, #52]	; (800d45c <acos+0x6c>)
 800d428:	ec51 0b10 	vmov	r0, r1, d0
 800d42c:	2200      	movs	r2, #0
 800d42e:	f7f3 fb2b 	bl	8000a88 <__aeabi_dcmpgt>
 800d432:	b150      	cbz	r0, 800d44a <acos+0x5a>
 800d434:	f7ff fd58 	bl	800cee8 <__errno>
 800d438:	ecbd 8b02 	vpop	{d8}
 800d43c:	2321      	movs	r3, #33	; 0x21
 800d43e:	6003      	str	r3, [r0, #0]
 800d440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d444:	4806      	ldr	r0, [pc, #24]	; (800d460 <acos+0x70>)
 800d446:	f002 b957 	b.w	800f6f8 <nan>
 800d44a:	eeb0 0a48 	vmov.f32	s0, s16
 800d44e:	eef0 0a68 	vmov.f32	s1, s17
 800d452:	ecbd 8b02 	vpop	{d8}
 800d456:	bd38      	pop	{r3, r4, r5, pc}
 800d458:	20000240 	.word	0x20000240
 800d45c:	3ff00000 	.word	0x3ff00000
 800d460:	0800fc40 	.word	0x0800fc40

0800d464 <atan2>:
 800d464:	f000 bb44 	b.w	800daf0 <__ieee754_atan2>

0800d468 <pow>:
 800d468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d46c:	ec59 8b10 	vmov	r8, r9, d0
 800d470:	ec57 6b11 	vmov	r6, r7, d1
 800d474:	f000 fc08 	bl	800dc88 <__ieee754_pow>
 800d478:	4b4e      	ldr	r3, [pc, #312]	; (800d5b4 <pow+0x14c>)
 800d47a:	f993 3000 	ldrsb.w	r3, [r3]
 800d47e:	3301      	adds	r3, #1
 800d480:	ec55 4b10 	vmov	r4, r5, d0
 800d484:	d015      	beq.n	800d4b2 <pow+0x4a>
 800d486:	4632      	mov	r2, r6
 800d488:	463b      	mov	r3, r7
 800d48a:	4630      	mov	r0, r6
 800d48c:	4639      	mov	r1, r7
 800d48e:	f7f3 fb05 	bl	8000a9c <__aeabi_dcmpun>
 800d492:	b970      	cbnz	r0, 800d4b2 <pow+0x4a>
 800d494:	4642      	mov	r2, r8
 800d496:	464b      	mov	r3, r9
 800d498:	4640      	mov	r0, r8
 800d49a:	4649      	mov	r1, r9
 800d49c:	f7f3 fafe 	bl	8000a9c <__aeabi_dcmpun>
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	b148      	cbz	r0, 800d4ba <pow+0x52>
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	4639      	mov	r1, r7
 800d4aa:	f7f3 fac5 	bl	8000a38 <__aeabi_dcmpeq>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d17d      	bne.n	800d5ae <pow+0x146>
 800d4b2:	ec45 4b10 	vmov	d0, r4, r5
 800d4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ba:	4640      	mov	r0, r8
 800d4bc:	4649      	mov	r1, r9
 800d4be:	f7f3 fabb 	bl	8000a38 <__aeabi_dcmpeq>
 800d4c2:	b1e0      	cbz	r0, 800d4fe <pow+0x96>
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	f7f3 fab4 	bl	8000a38 <__aeabi_dcmpeq>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d16c      	bne.n	800d5ae <pow+0x146>
 800d4d4:	ec47 6b10 	vmov	d0, r6, r7
 800d4d8:	f002 f880 	bl	800f5dc <finite>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d0e8      	beq.n	800d4b2 <pow+0x4a>
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	4639      	mov	r1, r7
 800d4e8:	f7f3 fab0 	bl	8000a4c <__aeabi_dcmplt>
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d0e0      	beq.n	800d4b2 <pow+0x4a>
 800d4f0:	f7ff fcfa 	bl	800cee8 <__errno>
 800d4f4:	2321      	movs	r3, #33	; 0x21
 800d4f6:	6003      	str	r3, [r0, #0]
 800d4f8:	2400      	movs	r4, #0
 800d4fa:	4d2f      	ldr	r5, [pc, #188]	; (800d5b8 <pow+0x150>)
 800d4fc:	e7d9      	b.n	800d4b2 <pow+0x4a>
 800d4fe:	ec45 4b10 	vmov	d0, r4, r5
 800d502:	f002 f86b 	bl	800f5dc <finite>
 800d506:	bbb8      	cbnz	r0, 800d578 <pow+0x110>
 800d508:	ec49 8b10 	vmov	d0, r8, r9
 800d50c:	f002 f866 	bl	800f5dc <finite>
 800d510:	b390      	cbz	r0, 800d578 <pow+0x110>
 800d512:	ec47 6b10 	vmov	d0, r6, r7
 800d516:	f002 f861 	bl	800f5dc <finite>
 800d51a:	b368      	cbz	r0, 800d578 <pow+0x110>
 800d51c:	4622      	mov	r2, r4
 800d51e:	462b      	mov	r3, r5
 800d520:	4620      	mov	r0, r4
 800d522:	4629      	mov	r1, r5
 800d524:	f7f3 faba 	bl	8000a9c <__aeabi_dcmpun>
 800d528:	b160      	cbz	r0, 800d544 <pow+0xdc>
 800d52a:	f7ff fcdd 	bl	800cee8 <__errno>
 800d52e:	2321      	movs	r3, #33	; 0x21
 800d530:	6003      	str	r3, [r0, #0]
 800d532:	2200      	movs	r2, #0
 800d534:	2300      	movs	r3, #0
 800d536:	4610      	mov	r0, r2
 800d538:	4619      	mov	r1, r3
 800d53a:	f7f3 f93f 	bl	80007bc <__aeabi_ddiv>
 800d53e:	4604      	mov	r4, r0
 800d540:	460d      	mov	r5, r1
 800d542:	e7b6      	b.n	800d4b2 <pow+0x4a>
 800d544:	f7ff fcd0 	bl	800cee8 <__errno>
 800d548:	2322      	movs	r3, #34	; 0x22
 800d54a:	6003      	str	r3, [r0, #0]
 800d54c:	2200      	movs	r2, #0
 800d54e:	2300      	movs	r3, #0
 800d550:	4640      	mov	r0, r8
 800d552:	4649      	mov	r1, r9
 800d554:	f7f3 fa7a 	bl	8000a4c <__aeabi_dcmplt>
 800d558:	2400      	movs	r4, #0
 800d55a:	b158      	cbz	r0, 800d574 <pow+0x10c>
 800d55c:	ec47 6b10 	vmov	d0, r6, r7
 800d560:	f002 f8d2 	bl	800f708 <rint>
 800d564:	4632      	mov	r2, r6
 800d566:	ec51 0b10 	vmov	r0, r1, d0
 800d56a:	463b      	mov	r3, r7
 800d56c:	f7f3 fa64 	bl	8000a38 <__aeabi_dcmpeq>
 800d570:	2800      	cmp	r0, #0
 800d572:	d0c2      	beq.n	800d4fa <pow+0x92>
 800d574:	4d11      	ldr	r5, [pc, #68]	; (800d5bc <pow+0x154>)
 800d576:	e79c      	b.n	800d4b2 <pow+0x4a>
 800d578:	2200      	movs	r2, #0
 800d57a:	2300      	movs	r3, #0
 800d57c:	4620      	mov	r0, r4
 800d57e:	4629      	mov	r1, r5
 800d580:	f7f3 fa5a 	bl	8000a38 <__aeabi_dcmpeq>
 800d584:	2800      	cmp	r0, #0
 800d586:	d094      	beq.n	800d4b2 <pow+0x4a>
 800d588:	ec49 8b10 	vmov	d0, r8, r9
 800d58c:	f002 f826 	bl	800f5dc <finite>
 800d590:	2800      	cmp	r0, #0
 800d592:	d08e      	beq.n	800d4b2 <pow+0x4a>
 800d594:	ec47 6b10 	vmov	d0, r6, r7
 800d598:	f002 f820 	bl	800f5dc <finite>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d088      	beq.n	800d4b2 <pow+0x4a>
 800d5a0:	f7ff fca2 	bl	800cee8 <__errno>
 800d5a4:	2322      	movs	r3, #34	; 0x22
 800d5a6:	6003      	str	r3, [r0, #0]
 800d5a8:	2400      	movs	r4, #0
 800d5aa:	2500      	movs	r5, #0
 800d5ac:	e781      	b.n	800d4b2 <pow+0x4a>
 800d5ae:	4d04      	ldr	r5, [pc, #16]	; (800d5c0 <pow+0x158>)
 800d5b0:	2400      	movs	r4, #0
 800d5b2:	e77e      	b.n	800d4b2 <pow+0x4a>
 800d5b4:	20000240 	.word	0x20000240
 800d5b8:	fff00000 	.word	0xfff00000
 800d5bc:	7ff00000 	.word	0x7ff00000
 800d5c0:	3ff00000 	.word	0x3ff00000

0800d5c4 <sqrt>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	ed2d 8b02 	vpush	{d8}
 800d5ca:	ec55 4b10 	vmov	r4, r5, d0
 800d5ce:	f001 fa89 	bl	800eae4 <__ieee754_sqrt>
 800d5d2:	4b15      	ldr	r3, [pc, #84]	; (800d628 <sqrt+0x64>)
 800d5d4:	eeb0 8a40 	vmov.f32	s16, s0
 800d5d8:	eef0 8a60 	vmov.f32	s17, s1
 800d5dc:	f993 3000 	ldrsb.w	r3, [r3]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	d019      	beq.n	800d618 <sqrt+0x54>
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	462b      	mov	r3, r5
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	f7f3 fa56 	bl	8000a9c <__aeabi_dcmpun>
 800d5f0:	b990      	cbnz	r0, 800d618 <sqrt+0x54>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f7f3 fa27 	bl	8000a4c <__aeabi_dcmplt>
 800d5fe:	b158      	cbz	r0, 800d618 <sqrt+0x54>
 800d600:	f7ff fc72 	bl	800cee8 <__errno>
 800d604:	2321      	movs	r3, #33	; 0x21
 800d606:	6003      	str	r3, [r0, #0]
 800d608:	2200      	movs	r2, #0
 800d60a:	2300      	movs	r3, #0
 800d60c:	4610      	mov	r0, r2
 800d60e:	4619      	mov	r1, r3
 800d610:	f7f3 f8d4 	bl	80007bc <__aeabi_ddiv>
 800d614:	ec41 0b18 	vmov	d8, r0, r1
 800d618:	eeb0 0a48 	vmov.f32	s0, s16
 800d61c:	eef0 0a68 	vmov.f32	s1, s17
 800d620:	ecbd 8b02 	vpop	{d8}
 800d624:	bd38      	pop	{r3, r4, r5, pc}
 800d626:	bf00      	nop
 800d628:	20000240 	.word	0x20000240
 800d62c:	00000000 	.word	0x00000000

0800d630 <__ieee754_acos>:
 800d630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	ec55 4b10 	vmov	r4, r5, d0
 800d638:	49b7      	ldr	r1, [pc, #732]	; (800d918 <__ieee754_acos+0x2e8>)
 800d63a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d63e:	428b      	cmp	r3, r1
 800d640:	dd1b      	ble.n	800d67a <__ieee754_acos+0x4a>
 800d642:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d646:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d64a:	4323      	orrs	r3, r4
 800d64c:	d106      	bne.n	800d65c <__ieee754_acos+0x2c>
 800d64e:	2d00      	cmp	r5, #0
 800d650:	f300 8211 	bgt.w	800da76 <__ieee754_acos+0x446>
 800d654:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800d8b0 <__ieee754_acos+0x280>
 800d658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65c:	ee10 2a10 	vmov	r2, s0
 800d660:	462b      	mov	r3, r5
 800d662:	ee10 0a10 	vmov	r0, s0
 800d666:	4629      	mov	r1, r5
 800d668:	f7f2 fdc6 	bl	80001f8 <__aeabi_dsub>
 800d66c:	4602      	mov	r2, r0
 800d66e:	460b      	mov	r3, r1
 800d670:	f7f3 f8a4 	bl	80007bc <__aeabi_ddiv>
 800d674:	ec41 0b10 	vmov	d0, r0, r1
 800d678:	e7ee      	b.n	800d658 <__ieee754_acos+0x28>
 800d67a:	49a8      	ldr	r1, [pc, #672]	; (800d91c <__ieee754_acos+0x2ec>)
 800d67c:	428b      	cmp	r3, r1
 800d67e:	f300 8087 	bgt.w	800d790 <__ieee754_acos+0x160>
 800d682:	4aa7      	ldr	r2, [pc, #668]	; (800d920 <__ieee754_acos+0x2f0>)
 800d684:	4293      	cmp	r3, r2
 800d686:	f340 81f9 	ble.w	800da7c <__ieee754_acos+0x44c>
 800d68a:	ee10 2a10 	vmov	r2, s0
 800d68e:	ee10 0a10 	vmov	r0, s0
 800d692:	462b      	mov	r3, r5
 800d694:	4629      	mov	r1, r5
 800d696:	f7f2 ff67 	bl	8000568 <__aeabi_dmul>
 800d69a:	a387      	add	r3, pc, #540	; (adr r3, 800d8b8 <__ieee754_acos+0x288>)
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	4606      	mov	r6, r0
 800d6a2:	460f      	mov	r7, r1
 800d6a4:	f7f2 ff60 	bl	8000568 <__aeabi_dmul>
 800d6a8:	a385      	add	r3, pc, #532	; (adr r3, 800d8c0 <__ieee754_acos+0x290>)
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	f7f2 fda5 	bl	80001fc <__adddf3>
 800d6b2:	4632      	mov	r2, r6
 800d6b4:	463b      	mov	r3, r7
 800d6b6:	f7f2 ff57 	bl	8000568 <__aeabi_dmul>
 800d6ba:	a383      	add	r3, pc, #524	; (adr r3, 800d8c8 <__ieee754_acos+0x298>)
 800d6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c0:	f7f2 fd9a 	bl	80001f8 <__aeabi_dsub>
 800d6c4:	4632      	mov	r2, r6
 800d6c6:	463b      	mov	r3, r7
 800d6c8:	f7f2 ff4e 	bl	8000568 <__aeabi_dmul>
 800d6cc:	a380      	add	r3, pc, #512	; (adr r3, 800d8d0 <__ieee754_acos+0x2a0>)
 800d6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d2:	f7f2 fd93 	bl	80001fc <__adddf3>
 800d6d6:	4632      	mov	r2, r6
 800d6d8:	463b      	mov	r3, r7
 800d6da:	f7f2 ff45 	bl	8000568 <__aeabi_dmul>
 800d6de:	a37e      	add	r3, pc, #504	; (adr r3, 800d8d8 <__ieee754_acos+0x2a8>)
 800d6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e4:	f7f2 fd88 	bl	80001f8 <__aeabi_dsub>
 800d6e8:	4632      	mov	r2, r6
 800d6ea:	463b      	mov	r3, r7
 800d6ec:	f7f2 ff3c 	bl	8000568 <__aeabi_dmul>
 800d6f0:	a37b      	add	r3, pc, #492	; (adr r3, 800d8e0 <__ieee754_acos+0x2b0>)
 800d6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f6:	f7f2 fd81 	bl	80001fc <__adddf3>
 800d6fa:	4632      	mov	r2, r6
 800d6fc:	463b      	mov	r3, r7
 800d6fe:	f7f2 ff33 	bl	8000568 <__aeabi_dmul>
 800d702:	a379      	add	r3, pc, #484	; (adr r3, 800d8e8 <__ieee754_acos+0x2b8>)
 800d704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d708:	4680      	mov	r8, r0
 800d70a:	4689      	mov	r9, r1
 800d70c:	4630      	mov	r0, r6
 800d70e:	4639      	mov	r1, r7
 800d710:	f7f2 ff2a 	bl	8000568 <__aeabi_dmul>
 800d714:	a376      	add	r3, pc, #472	; (adr r3, 800d8f0 <__ieee754_acos+0x2c0>)
 800d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71a:	f7f2 fd6d 	bl	80001f8 <__aeabi_dsub>
 800d71e:	4632      	mov	r2, r6
 800d720:	463b      	mov	r3, r7
 800d722:	f7f2 ff21 	bl	8000568 <__aeabi_dmul>
 800d726:	a374      	add	r3, pc, #464	; (adr r3, 800d8f8 <__ieee754_acos+0x2c8>)
 800d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72c:	f7f2 fd66 	bl	80001fc <__adddf3>
 800d730:	4632      	mov	r2, r6
 800d732:	463b      	mov	r3, r7
 800d734:	f7f2 ff18 	bl	8000568 <__aeabi_dmul>
 800d738:	a371      	add	r3, pc, #452	; (adr r3, 800d900 <__ieee754_acos+0x2d0>)
 800d73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73e:	f7f2 fd5b 	bl	80001f8 <__aeabi_dsub>
 800d742:	4632      	mov	r2, r6
 800d744:	463b      	mov	r3, r7
 800d746:	f7f2 ff0f 	bl	8000568 <__aeabi_dmul>
 800d74a:	4b76      	ldr	r3, [pc, #472]	; (800d924 <__ieee754_acos+0x2f4>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	f7f2 fd55 	bl	80001fc <__adddf3>
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	4640      	mov	r0, r8
 800d758:	4649      	mov	r1, r9
 800d75a:	f7f3 f82f 	bl	80007bc <__aeabi_ddiv>
 800d75e:	4622      	mov	r2, r4
 800d760:	462b      	mov	r3, r5
 800d762:	f7f2 ff01 	bl	8000568 <__aeabi_dmul>
 800d766:	4602      	mov	r2, r0
 800d768:	460b      	mov	r3, r1
 800d76a:	a167      	add	r1, pc, #412	; (adr r1, 800d908 <__ieee754_acos+0x2d8>)
 800d76c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d770:	f7f2 fd42 	bl	80001f8 <__aeabi_dsub>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4620      	mov	r0, r4
 800d77a:	4629      	mov	r1, r5
 800d77c:	f7f2 fd3c 	bl	80001f8 <__aeabi_dsub>
 800d780:	4602      	mov	r2, r0
 800d782:	460b      	mov	r3, r1
 800d784:	a162      	add	r1, pc, #392	; (adr r1, 800d910 <__ieee754_acos+0x2e0>)
 800d786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d78a:	f7f2 fd35 	bl	80001f8 <__aeabi_dsub>
 800d78e:	e771      	b.n	800d674 <__ieee754_acos+0x44>
 800d790:	2d00      	cmp	r5, #0
 800d792:	f280 80cb 	bge.w	800d92c <__ieee754_acos+0x2fc>
 800d796:	ee10 0a10 	vmov	r0, s0
 800d79a:	4b62      	ldr	r3, [pc, #392]	; (800d924 <__ieee754_acos+0x2f4>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	4629      	mov	r1, r5
 800d7a0:	f7f2 fd2c 	bl	80001fc <__adddf3>
 800d7a4:	4b60      	ldr	r3, [pc, #384]	; (800d928 <__ieee754_acos+0x2f8>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f7f2 fede 	bl	8000568 <__aeabi_dmul>
 800d7ac:	a342      	add	r3, pc, #264	; (adr r3, 800d8b8 <__ieee754_acos+0x288>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	460d      	mov	r5, r1
 800d7b6:	f7f2 fed7 	bl	8000568 <__aeabi_dmul>
 800d7ba:	a341      	add	r3, pc, #260	; (adr r3, 800d8c0 <__ieee754_acos+0x290>)
 800d7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c0:	f7f2 fd1c 	bl	80001fc <__adddf3>
 800d7c4:	4622      	mov	r2, r4
 800d7c6:	462b      	mov	r3, r5
 800d7c8:	f7f2 fece 	bl	8000568 <__aeabi_dmul>
 800d7cc:	a33e      	add	r3, pc, #248	; (adr r3, 800d8c8 <__ieee754_acos+0x298>)
 800d7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d2:	f7f2 fd11 	bl	80001f8 <__aeabi_dsub>
 800d7d6:	4622      	mov	r2, r4
 800d7d8:	462b      	mov	r3, r5
 800d7da:	f7f2 fec5 	bl	8000568 <__aeabi_dmul>
 800d7de:	a33c      	add	r3, pc, #240	; (adr r3, 800d8d0 <__ieee754_acos+0x2a0>)
 800d7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e4:	f7f2 fd0a 	bl	80001fc <__adddf3>
 800d7e8:	4622      	mov	r2, r4
 800d7ea:	462b      	mov	r3, r5
 800d7ec:	f7f2 febc 	bl	8000568 <__aeabi_dmul>
 800d7f0:	a339      	add	r3, pc, #228	; (adr r3, 800d8d8 <__ieee754_acos+0x2a8>)
 800d7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f6:	f7f2 fcff 	bl	80001f8 <__aeabi_dsub>
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	462b      	mov	r3, r5
 800d7fe:	f7f2 feb3 	bl	8000568 <__aeabi_dmul>
 800d802:	a337      	add	r3, pc, #220	; (adr r3, 800d8e0 <__ieee754_acos+0x2b0>)
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	f7f2 fcf8 	bl	80001fc <__adddf3>
 800d80c:	4622      	mov	r2, r4
 800d80e:	462b      	mov	r3, r5
 800d810:	f7f2 feaa 	bl	8000568 <__aeabi_dmul>
 800d814:	ec45 4b10 	vmov	d0, r4, r5
 800d818:	4680      	mov	r8, r0
 800d81a:	4689      	mov	r9, r1
 800d81c:	f001 f962 	bl	800eae4 <__ieee754_sqrt>
 800d820:	a331      	add	r3, pc, #196	; (adr r3, 800d8e8 <__ieee754_acos+0x2b8>)
 800d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d826:	4620      	mov	r0, r4
 800d828:	4629      	mov	r1, r5
 800d82a:	ec57 6b10 	vmov	r6, r7, d0
 800d82e:	f7f2 fe9b 	bl	8000568 <__aeabi_dmul>
 800d832:	a32f      	add	r3, pc, #188	; (adr r3, 800d8f0 <__ieee754_acos+0x2c0>)
 800d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d838:	f7f2 fcde 	bl	80001f8 <__aeabi_dsub>
 800d83c:	4622      	mov	r2, r4
 800d83e:	462b      	mov	r3, r5
 800d840:	f7f2 fe92 	bl	8000568 <__aeabi_dmul>
 800d844:	a32c      	add	r3, pc, #176	; (adr r3, 800d8f8 <__ieee754_acos+0x2c8>)
 800d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84a:	f7f2 fcd7 	bl	80001fc <__adddf3>
 800d84e:	4622      	mov	r2, r4
 800d850:	462b      	mov	r3, r5
 800d852:	f7f2 fe89 	bl	8000568 <__aeabi_dmul>
 800d856:	a32a      	add	r3, pc, #168	; (adr r3, 800d900 <__ieee754_acos+0x2d0>)
 800d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85c:	f7f2 fccc 	bl	80001f8 <__aeabi_dsub>
 800d860:	4622      	mov	r2, r4
 800d862:	462b      	mov	r3, r5
 800d864:	f7f2 fe80 	bl	8000568 <__aeabi_dmul>
 800d868:	4b2e      	ldr	r3, [pc, #184]	; (800d924 <__ieee754_acos+0x2f4>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	f7f2 fcc6 	bl	80001fc <__adddf3>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	4640      	mov	r0, r8
 800d876:	4649      	mov	r1, r9
 800d878:	f7f2 ffa0 	bl	80007bc <__aeabi_ddiv>
 800d87c:	4632      	mov	r2, r6
 800d87e:	463b      	mov	r3, r7
 800d880:	f7f2 fe72 	bl	8000568 <__aeabi_dmul>
 800d884:	a320      	add	r3, pc, #128	; (adr r3, 800d908 <__ieee754_acos+0x2d8>)
 800d886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88a:	f7f2 fcb5 	bl	80001f8 <__aeabi_dsub>
 800d88e:	4632      	mov	r2, r6
 800d890:	463b      	mov	r3, r7
 800d892:	f7f2 fcb3 	bl	80001fc <__adddf3>
 800d896:	4602      	mov	r2, r0
 800d898:	460b      	mov	r3, r1
 800d89a:	f7f2 fcaf 	bl	80001fc <__adddf3>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	a103      	add	r1, pc, #12	; (adr r1, 800d8b0 <__ieee754_acos+0x280>)
 800d8a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8a8:	e76f      	b.n	800d78a <__ieee754_acos+0x15a>
 800d8aa:	bf00      	nop
 800d8ac:	f3af 8000 	nop.w
 800d8b0:	54442d18 	.word	0x54442d18
 800d8b4:	400921fb 	.word	0x400921fb
 800d8b8:	0dfdf709 	.word	0x0dfdf709
 800d8bc:	3f023de1 	.word	0x3f023de1
 800d8c0:	7501b288 	.word	0x7501b288
 800d8c4:	3f49efe0 	.word	0x3f49efe0
 800d8c8:	b5688f3b 	.word	0xb5688f3b
 800d8cc:	3fa48228 	.word	0x3fa48228
 800d8d0:	0e884455 	.word	0x0e884455
 800d8d4:	3fc9c155 	.word	0x3fc9c155
 800d8d8:	03eb6f7d 	.word	0x03eb6f7d
 800d8dc:	3fd4d612 	.word	0x3fd4d612
 800d8e0:	55555555 	.word	0x55555555
 800d8e4:	3fc55555 	.word	0x3fc55555
 800d8e8:	b12e9282 	.word	0xb12e9282
 800d8ec:	3fb3b8c5 	.word	0x3fb3b8c5
 800d8f0:	1b8d0159 	.word	0x1b8d0159
 800d8f4:	3fe6066c 	.word	0x3fe6066c
 800d8f8:	9c598ac8 	.word	0x9c598ac8
 800d8fc:	40002ae5 	.word	0x40002ae5
 800d900:	1c8a2d4b 	.word	0x1c8a2d4b
 800d904:	40033a27 	.word	0x40033a27
 800d908:	33145c07 	.word	0x33145c07
 800d90c:	3c91a626 	.word	0x3c91a626
 800d910:	54442d18 	.word	0x54442d18
 800d914:	3ff921fb 	.word	0x3ff921fb
 800d918:	3fefffff 	.word	0x3fefffff
 800d91c:	3fdfffff 	.word	0x3fdfffff
 800d920:	3c600000 	.word	0x3c600000
 800d924:	3ff00000 	.word	0x3ff00000
 800d928:	3fe00000 	.word	0x3fe00000
 800d92c:	ee10 2a10 	vmov	r2, s0
 800d930:	462b      	mov	r3, r5
 800d932:	496d      	ldr	r1, [pc, #436]	; (800dae8 <__ieee754_acos+0x4b8>)
 800d934:	2000      	movs	r0, #0
 800d936:	f7f2 fc5f 	bl	80001f8 <__aeabi_dsub>
 800d93a:	4b6c      	ldr	r3, [pc, #432]	; (800daec <__ieee754_acos+0x4bc>)
 800d93c:	2200      	movs	r2, #0
 800d93e:	f7f2 fe13 	bl	8000568 <__aeabi_dmul>
 800d942:	4604      	mov	r4, r0
 800d944:	460d      	mov	r5, r1
 800d946:	ec45 4b10 	vmov	d0, r4, r5
 800d94a:	f001 f8cb 	bl	800eae4 <__ieee754_sqrt>
 800d94e:	a34e      	add	r3, pc, #312	; (adr r3, 800da88 <__ieee754_acos+0x458>)
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	4620      	mov	r0, r4
 800d956:	4629      	mov	r1, r5
 800d958:	ec59 8b10 	vmov	r8, r9, d0
 800d95c:	f7f2 fe04 	bl	8000568 <__aeabi_dmul>
 800d960:	a34b      	add	r3, pc, #300	; (adr r3, 800da90 <__ieee754_acos+0x460>)
 800d962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d966:	f7f2 fc49 	bl	80001fc <__adddf3>
 800d96a:	4622      	mov	r2, r4
 800d96c:	462b      	mov	r3, r5
 800d96e:	f7f2 fdfb 	bl	8000568 <__aeabi_dmul>
 800d972:	a349      	add	r3, pc, #292	; (adr r3, 800da98 <__ieee754_acos+0x468>)
 800d974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d978:	f7f2 fc3e 	bl	80001f8 <__aeabi_dsub>
 800d97c:	4622      	mov	r2, r4
 800d97e:	462b      	mov	r3, r5
 800d980:	f7f2 fdf2 	bl	8000568 <__aeabi_dmul>
 800d984:	a346      	add	r3, pc, #280	; (adr r3, 800daa0 <__ieee754_acos+0x470>)
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f7f2 fc37 	bl	80001fc <__adddf3>
 800d98e:	4622      	mov	r2, r4
 800d990:	462b      	mov	r3, r5
 800d992:	f7f2 fde9 	bl	8000568 <__aeabi_dmul>
 800d996:	a344      	add	r3, pc, #272	; (adr r3, 800daa8 <__ieee754_acos+0x478>)
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	f7f2 fc2c 	bl	80001f8 <__aeabi_dsub>
 800d9a0:	4622      	mov	r2, r4
 800d9a2:	462b      	mov	r3, r5
 800d9a4:	f7f2 fde0 	bl	8000568 <__aeabi_dmul>
 800d9a8:	a341      	add	r3, pc, #260	; (adr r3, 800dab0 <__ieee754_acos+0x480>)
 800d9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ae:	f7f2 fc25 	bl	80001fc <__adddf3>
 800d9b2:	4622      	mov	r2, r4
 800d9b4:	462b      	mov	r3, r5
 800d9b6:	f7f2 fdd7 	bl	8000568 <__aeabi_dmul>
 800d9ba:	a33f      	add	r3, pc, #252	; (adr r3, 800dab8 <__ieee754_acos+0x488>)
 800d9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c0:	4682      	mov	sl, r0
 800d9c2:	468b      	mov	fp, r1
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	f7f2 fdce 	bl	8000568 <__aeabi_dmul>
 800d9cc:	a33c      	add	r3, pc, #240	; (adr r3, 800dac0 <__ieee754_acos+0x490>)
 800d9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d2:	f7f2 fc11 	bl	80001f8 <__aeabi_dsub>
 800d9d6:	4622      	mov	r2, r4
 800d9d8:	462b      	mov	r3, r5
 800d9da:	f7f2 fdc5 	bl	8000568 <__aeabi_dmul>
 800d9de:	a33a      	add	r3, pc, #232	; (adr r3, 800dac8 <__ieee754_acos+0x498>)
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	f7f2 fc0a 	bl	80001fc <__adddf3>
 800d9e8:	4622      	mov	r2, r4
 800d9ea:	462b      	mov	r3, r5
 800d9ec:	f7f2 fdbc 	bl	8000568 <__aeabi_dmul>
 800d9f0:	a337      	add	r3, pc, #220	; (adr r3, 800dad0 <__ieee754_acos+0x4a0>)
 800d9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f6:	f7f2 fbff 	bl	80001f8 <__aeabi_dsub>
 800d9fa:	4622      	mov	r2, r4
 800d9fc:	462b      	mov	r3, r5
 800d9fe:	f7f2 fdb3 	bl	8000568 <__aeabi_dmul>
 800da02:	4b39      	ldr	r3, [pc, #228]	; (800dae8 <__ieee754_acos+0x4b8>)
 800da04:	2200      	movs	r2, #0
 800da06:	f7f2 fbf9 	bl	80001fc <__adddf3>
 800da0a:	4602      	mov	r2, r0
 800da0c:	460b      	mov	r3, r1
 800da0e:	4650      	mov	r0, sl
 800da10:	4659      	mov	r1, fp
 800da12:	f7f2 fed3 	bl	80007bc <__aeabi_ddiv>
 800da16:	4642      	mov	r2, r8
 800da18:	464b      	mov	r3, r9
 800da1a:	f7f2 fda5 	bl	8000568 <__aeabi_dmul>
 800da1e:	2600      	movs	r6, #0
 800da20:	4682      	mov	sl, r0
 800da22:	468b      	mov	fp, r1
 800da24:	4632      	mov	r2, r6
 800da26:	464b      	mov	r3, r9
 800da28:	4630      	mov	r0, r6
 800da2a:	4649      	mov	r1, r9
 800da2c:	f7f2 fd9c 	bl	8000568 <__aeabi_dmul>
 800da30:	4602      	mov	r2, r0
 800da32:	460b      	mov	r3, r1
 800da34:	4620      	mov	r0, r4
 800da36:	4629      	mov	r1, r5
 800da38:	f7f2 fbde 	bl	80001f8 <__aeabi_dsub>
 800da3c:	4632      	mov	r2, r6
 800da3e:	4604      	mov	r4, r0
 800da40:	460d      	mov	r5, r1
 800da42:	464b      	mov	r3, r9
 800da44:	4640      	mov	r0, r8
 800da46:	4649      	mov	r1, r9
 800da48:	f7f2 fbd8 	bl	80001fc <__adddf3>
 800da4c:	4602      	mov	r2, r0
 800da4e:	460b      	mov	r3, r1
 800da50:	4620      	mov	r0, r4
 800da52:	4629      	mov	r1, r5
 800da54:	f7f2 feb2 	bl	80007bc <__aeabi_ddiv>
 800da58:	4602      	mov	r2, r0
 800da5a:	460b      	mov	r3, r1
 800da5c:	4650      	mov	r0, sl
 800da5e:	4659      	mov	r1, fp
 800da60:	f7f2 fbcc 	bl	80001fc <__adddf3>
 800da64:	4632      	mov	r2, r6
 800da66:	464b      	mov	r3, r9
 800da68:	f7f2 fbc8 	bl	80001fc <__adddf3>
 800da6c:	4602      	mov	r2, r0
 800da6e:	460b      	mov	r3, r1
 800da70:	f7f2 fbc4 	bl	80001fc <__adddf3>
 800da74:	e5fe      	b.n	800d674 <__ieee754_acos+0x44>
 800da76:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800dad8 <__ieee754_acos+0x4a8>
 800da7a:	e5ed      	b.n	800d658 <__ieee754_acos+0x28>
 800da7c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800dae0 <__ieee754_acos+0x4b0>
 800da80:	e5ea      	b.n	800d658 <__ieee754_acos+0x28>
 800da82:	bf00      	nop
 800da84:	f3af 8000 	nop.w
 800da88:	0dfdf709 	.word	0x0dfdf709
 800da8c:	3f023de1 	.word	0x3f023de1
 800da90:	7501b288 	.word	0x7501b288
 800da94:	3f49efe0 	.word	0x3f49efe0
 800da98:	b5688f3b 	.word	0xb5688f3b
 800da9c:	3fa48228 	.word	0x3fa48228
 800daa0:	0e884455 	.word	0x0e884455
 800daa4:	3fc9c155 	.word	0x3fc9c155
 800daa8:	03eb6f7d 	.word	0x03eb6f7d
 800daac:	3fd4d612 	.word	0x3fd4d612
 800dab0:	55555555 	.word	0x55555555
 800dab4:	3fc55555 	.word	0x3fc55555
 800dab8:	b12e9282 	.word	0xb12e9282
 800dabc:	3fb3b8c5 	.word	0x3fb3b8c5
 800dac0:	1b8d0159 	.word	0x1b8d0159
 800dac4:	3fe6066c 	.word	0x3fe6066c
 800dac8:	9c598ac8 	.word	0x9c598ac8
 800dacc:	40002ae5 	.word	0x40002ae5
 800dad0:	1c8a2d4b 	.word	0x1c8a2d4b
 800dad4:	40033a27 	.word	0x40033a27
	...
 800dae0:	54442d18 	.word	0x54442d18
 800dae4:	3ff921fb 	.word	0x3ff921fb
 800dae8:	3ff00000 	.word	0x3ff00000
 800daec:	3fe00000 	.word	0x3fe00000

0800daf0 <__ieee754_atan2>:
 800daf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf4:	ec57 6b11 	vmov	r6, r7, d1
 800daf8:	4273      	negs	r3, r6
 800dafa:	f8df e184 	ldr.w	lr, [pc, #388]	; 800dc80 <__ieee754_atan2+0x190>
 800dafe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800db02:	4333      	orrs	r3, r6
 800db04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800db08:	4573      	cmp	r3, lr
 800db0a:	ec51 0b10 	vmov	r0, r1, d0
 800db0e:	ee11 8a10 	vmov	r8, s2
 800db12:	d80a      	bhi.n	800db2a <__ieee754_atan2+0x3a>
 800db14:	4244      	negs	r4, r0
 800db16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db1a:	4304      	orrs	r4, r0
 800db1c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800db20:	4574      	cmp	r4, lr
 800db22:	ee10 9a10 	vmov	r9, s0
 800db26:	468c      	mov	ip, r1
 800db28:	d907      	bls.n	800db3a <__ieee754_atan2+0x4a>
 800db2a:	4632      	mov	r2, r6
 800db2c:	463b      	mov	r3, r7
 800db2e:	f7f2 fb65 	bl	80001fc <__adddf3>
 800db32:	ec41 0b10 	vmov	d0, r0, r1
 800db36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db3a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800db3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800db42:	4334      	orrs	r4, r6
 800db44:	d103      	bne.n	800db4e <__ieee754_atan2+0x5e>
 800db46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db4a:	f7ff ba01 	b.w	800cf50 <atan>
 800db4e:	17bc      	asrs	r4, r7, #30
 800db50:	f004 0402 	and.w	r4, r4, #2
 800db54:	ea53 0909 	orrs.w	r9, r3, r9
 800db58:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800db5c:	d107      	bne.n	800db6e <__ieee754_atan2+0x7e>
 800db5e:	2c02      	cmp	r4, #2
 800db60:	d060      	beq.n	800dc24 <__ieee754_atan2+0x134>
 800db62:	2c03      	cmp	r4, #3
 800db64:	d1e5      	bne.n	800db32 <__ieee754_atan2+0x42>
 800db66:	a142      	add	r1, pc, #264	; (adr r1, 800dc70 <__ieee754_atan2+0x180>)
 800db68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db6c:	e7e1      	b.n	800db32 <__ieee754_atan2+0x42>
 800db6e:	ea52 0808 	orrs.w	r8, r2, r8
 800db72:	d106      	bne.n	800db82 <__ieee754_atan2+0x92>
 800db74:	f1bc 0f00 	cmp.w	ip, #0
 800db78:	da5f      	bge.n	800dc3a <__ieee754_atan2+0x14a>
 800db7a:	a13f      	add	r1, pc, #252	; (adr r1, 800dc78 <__ieee754_atan2+0x188>)
 800db7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db80:	e7d7      	b.n	800db32 <__ieee754_atan2+0x42>
 800db82:	4572      	cmp	r2, lr
 800db84:	d10f      	bne.n	800dba6 <__ieee754_atan2+0xb6>
 800db86:	4293      	cmp	r3, r2
 800db88:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800db8c:	d107      	bne.n	800db9e <__ieee754_atan2+0xae>
 800db8e:	2c02      	cmp	r4, #2
 800db90:	d84c      	bhi.n	800dc2c <__ieee754_atan2+0x13c>
 800db92:	4b35      	ldr	r3, [pc, #212]	; (800dc68 <__ieee754_atan2+0x178>)
 800db94:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800db98:	e9d4 0100 	ldrd	r0, r1, [r4]
 800db9c:	e7c9      	b.n	800db32 <__ieee754_atan2+0x42>
 800db9e:	2c02      	cmp	r4, #2
 800dba0:	d848      	bhi.n	800dc34 <__ieee754_atan2+0x144>
 800dba2:	4b32      	ldr	r3, [pc, #200]	; (800dc6c <__ieee754_atan2+0x17c>)
 800dba4:	e7f6      	b.n	800db94 <__ieee754_atan2+0xa4>
 800dba6:	4573      	cmp	r3, lr
 800dba8:	d0e4      	beq.n	800db74 <__ieee754_atan2+0x84>
 800dbaa:	1a9b      	subs	r3, r3, r2
 800dbac:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800dbb0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dbb4:	da1e      	bge.n	800dbf4 <__ieee754_atan2+0x104>
 800dbb6:	2f00      	cmp	r7, #0
 800dbb8:	da01      	bge.n	800dbbe <__ieee754_atan2+0xce>
 800dbba:	323c      	adds	r2, #60	; 0x3c
 800dbbc:	db1e      	blt.n	800dbfc <__ieee754_atan2+0x10c>
 800dbbe:	4632      	mov	r2, r6
 800dbc0:	463b      	mov	r3, r7
 800dbc2:	f7f2 fdfb 	bl	80007bc <__aeabi_ddiv>
 800dbc6:	ec41 0b10 	vmov	d0, r0, r1
 800dbca:	f7ff fbb1 	bl	800d330 <fabs>
 800dbce:	f7ff f9bf 	bl	800cf50 <atan>
 800dbd2:	ec51 0b10 	vmov	r0, r1, d0
 800dbd6:	2c01      	cmp	r4, #1
 800dbd8:	d013      	beq.n	800dc02 <__ieee754_atan2+0x112>
 800dbda:	2c02      	cmp	r4, #2
 800dbdc:	d015      	beq.n	800dc0a <__ieee754_atan2+0x11a>
 800dbde:	2c00      	cmp	r4, #0
 800dbe0:	d0a7      	beq.n	800db32 <__ieee754_atan2+0x42>
 800dbe2:	a319      	add	r3, pc, #100	; (adr r3, 800dc48 <__ieee754_atan2+0x158>)
 800dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe8:	f7f2 fb06 	bl	80001f8 <__aeabi_dsub>
 800dbec:	a318      	add	r3, pc, #96	; (adr r3, 800dc50 <__ieee754_atan2+0x160>)
 800dbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf2:	e014      	b.n	800dc1e <__ieee754_atan2+0x12e>
 800dbf4:	a118      	add	r1, pc, #96	; (adr r1, 800dc58 <__ieee754_atan2+0x168>)
 800dbf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbfa:	e7ec      	b.n	800dbd6 <__ieee754_atan2+0xe6>
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	2100      	movs	r1, #0
 800dc00:	e7e9      	b.n	800dbd6 <__ieee754_atan2+0xe6>
 800dc02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc06:	4619      	mov	r1, r3
 800dc08:	e793      	b.n	800db32 <__ieee754_atan2+0x42>
 800dc0a:	a30f      	add	r3, pc, #60	; (adr r3, 800dc48 <__ieee754_atan2+0x158>)
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	f7f2 faf2 	bl	80001f8 <__aeabi_dsub>
 800dc14:	4602      	mov	r2, r0
 800dc16:	460b      	mov	r3, r1
 800dc18:	a10d      	add	r1, pc, #52	; (adr r1, 800dc50 <__ieee754_atan2+0x160>)
 800dc1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc1e:	f7f2 faeb 	bl	80001f8 <__aeabi_dsub>
 800dc22:	e786      	b.n	800db32 <__ieee754_atan2+0x42>
 800dc24:	a10a      	add	r1, pc, #40	; (adr r1, 800dc50 <__ieee754_atan2+0x160>)
 800dc26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc2a:	e782      	b.n	800db32 <__ieee754_atan2+0x42>
 800dc2c:	a10c      	add	r1, pc, #48	; (adr r1, 800dc60 <__ieee754_atan2+0x170>)
 800dc2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc32:	e77e      	b.n	800db32 <__ieee754_atan2+0x42>
 800dc34:	2000      	movs	r0, #0
 800dc36:	2100      	movs	r1, #0
 800dc38:	e77b      	b.n	800db32 <__ieee754_atan2+0x42>
 800dc3a:	a107      	add	r1, pc, #28	; (adr r1, 800dc58 <__ieee754_atan2+0x168>)
 800dc3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc40:	e777      	b.n	800db32 <__ieee754_atan2+0x42>
 800dc42:	bf00      	nop
 800dc44:	f3af 8000 	nop.w
 800dc48:	33145c07 	.word	0x33145c07
 800dc4c:	3ca1a626 	.word	0x3ca1a626
 800dc50:	54442d18 	.word	0x54442d18
 800dc54:	400921fb 	.word	0x400921fb
 800dc58:	54442d18 	.word	0x54442d18
 800dc5c:	3ff921fb 	.word	0x3ff921fb
 800dc60:	54442d18 	.word	0x54442d18
 800dc64:	3fe921fb 	.word	0x3fe921fb
 800dc68:	0800fc48 	.word	0x0800fc48
 800dc6c:	0800fc60 	.word	0x0800fc60
 800dc70:	54442d18 	.word	0x54442d18
 800dc74:	c00921fb 	.word	0xc00921fb
 800dc78:	54442d18 	.word	0x54442d18
 800dc7c:	bff921fb 	.word	0xbff921fb
 800dc80:	7ff00000 	.word	0x7ff00000
 800dc84:	00000000 	.word	0x00000000

0800dc88 <__ieee754_pow>:
 800dc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc8c:	ed2d 8b06 	vpush	{d8-d10}
 800dc90:	b08d      	sub	sp, #52	; 0x34
 800dc92:	ed8d 1b02 	vstr	d1, [sp, #8]
 800dc96:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800dc9a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800dc9e:	ea56 0100 	orrs.w	r1, r6, r0
 800dca2:	ec53 2b10 	vmov	r2, r3, d0
 800dca6:	f000 84d1 	beq.w	800e64c <__ieee754_pow+0x9c4>
 800dcaa:	497f      	ldr	r1, [pc, #508]	; (800dea8 <__ieee754_pow+0x220>)
 800dcac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800dcb0:	428c      	cmp	r4, r1
 800dcb2:	ee10 8a10 	vmov	r8, s0
 800dcb6:	4699      	mov	r9, r3
 800dcb8:	dc09      	bgt.n	800dcce <__ieee754_pow+0x46>
 800dcba:	d103      	bne.n	800dcc4 <__ieee754_pow+0x3c>
 800dcbc:	b97a      	cbnz	r2, 800dcde <__ieee754_pow+0x56>
 800dcbe:	42a6      	cmp	r6, r4
 800dcc0:	dd02      	ble.n	800dcc8 <__ieee754_pow+0x40>
 800dcc2:	e00c      	b.n	800dcde <__ieee754_pow+0x56>
 800dcc4:	428e      	cmp	r6, r1
 800dcc6:	dc02      	bgt.n	800dcce <__ieee754_pow+0x46>
 800dcc8:	428e      	cmp	r6, r1
 800dcca:	d110      	bne.n	800dcee <__ieee754_pow+0x66>
 800dccc:	b178      	cbz	r0, 800dcee <__ieee754_pow+0x66>
 800dcce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dcd2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dcd6:	ea54 0308 	orrs.w	r3, r4, r8
 800dcda:	f000 84b7 	beq.w	800e64c <__ieee754_pow+0x9c4>
 800dcde:	4873      	ldr	r0, [pc, #460]	; (800deac <__ieee754_pow+0x224>)
 800dce0:	b00d      	add	sp, #52	; 0x34
 800dce2:	ecbd 8b06 	vpop	{d8-d10}
 800dce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcea:	f001 bd05 	b.w	800f6f8 <nan>
 800dcee:	f1b9 0f00 	cmp.w	r9, #0
 800dcf2:	da36      	bge.n	800dd62 <__ieee754_pow+0xda>
 800dcf4:	496e      	ldr	r1, [pc, #440]	; (800deb0 <__ieee754_pow+0x228>)
 800dcf6:	428e      	cmp	r6, r1
 800dcf8:	dc51      	bgt.n	800dd9e <__ieee754_pow+0x116>
 800dcfa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800dcfe:	428e      	cmp	r6, r1
 800dd00:	f340 84af 	ble.w	800e662 <__ieee754_pow+0x9da>
 800dd04:	1531      	asrs	r1, r6, #20
 800dd06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dd0a:	2914      	cmp	r1, #20
 800dd0c:	dd0f      	ble.n	800dd2e <__ieee754_pow+0xa6>
 800dd0e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800dd12:	fa20 fc01 	lsr.w	ip, r0, r1
 800dd16:	fa0c f101 	lsl.w	r1, ip, r1
 800dd1a:	4281      	cmp	r1, r0
 800dd1c:	f040 84a1 	bne.w	800e662 <__ieee754_pow+0x9da>
 800dd20:	f00c 0c01 	and.w	ip, ip, #1
 800dd24:	f1cc 0102 	rsb	r1, ip, #2
 800dd28:	9100      	str	r1, [sp, #0]
 800dd2a:	b180      	cbz	r0, 800dd4e <__ieee754_pow+0xc6>
 800dd2c:	e059      	b.n	800dde2 <__ieee754_pow+0x15a>
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	d155      	bne.n	800ddde <__ieee754_pow+0x156>
 800dd32:	f1c1 0114 	rsb	r1, r1, #20
 800dd36:	fa46 fc01 	asr.w	ip, r6, r1
 800dd3a:	fa0c f101 	lsl.w	r1, ip, r1
 800dd3e:	42b1      	cmp	r1, r6
 800dd40:	f040 848c 	bne.w	800e65c <__ieee754_pow+0x9d4>
 800dd44:	f00c 0c01 	and.w	ip, ip, #1
 800dd48:	f1cc 0102 	rsb	r1, ip, #2
 800dd4c:	9100      	str	r1, [sp, #0]
 800dd4e:	4959      	ldr	r1, [pc, #356]	; (800deb4 <__ieee754_pow+0x22c>)
 800dd50:	428e      	cmp	r6, r1
 800dd52:	d12d      	bne.n	800ddb0 <__ieee754_pow+0x128>
 800dd54:	2f00      	cmp	r7, #0
 800dd56:	da79      	bge.n	800de4c <__ieee754_pow+0x1c4>
 800dd58:	4956      	ldr	r1, [pc, #344]	; (800deb4 <__ieee754_pow+0x22c>)
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	f7f2 fd2e 	bl	80007bc <__aeabi_ddiv>
 800dd60:	e016      	b.n	800dd90 <__ieee754_pow+0x108>
 800dd62:	2100      	movs	r1, #0
 800dd64:	9100      	str	r1, [sp, #0]
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d13b      	bne.n	800dde2 <__ieee754_pow+0x15a>
 800dd6a:	494f      	ldr	r1, [pc, #316]	; (800dea8 <__ieee754_pow+0x220>)
 800dd6c:	428e      	cmp	r6, r1
 800dd6e:	d1ee      	bne.n	800dd4e <__ieee754_pow+0xc6>
 800dd70:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dd74:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dd78:	ea53 0308 	orrs.w	r3, r3, r8
 800dd7c:	f000 8466 	beq.w	800e64c <__ieee754_pow+0x9c4>
 800dd80:	4b4d      	ldr	r3, [pc, #308]	; (800deb8 <__ieee754_pow+0x230>)
 800dd82:	429c      	cmp	r4, r3
 800dd84:	dd0d      	ble.n	800dda2 <__ieee754_pow+0x11a>
 800dd86:	2f00      	cmp	r7, #0
 800dd88:	f280 8464 	bge.w	800e654 <__ieee754_pow+0x9cc>
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	2100      	movs	r1, #0
 800dd90:	ec41 0b10 	vmov	d0, r0, r1
 800dd94:	b00d      	add	sp, #52	; 0x34
 800dd96:	ecbd 8b06 	vpop	{d8-d10}
 800dd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9e:	2102      	movs	r1, #2
 800dda0:	e7e0      	b.n	800dd64 <__ieee754_pow+0xdc>
 800dda2:	2f00      	cmp	r7, #0
 800dda4:	daf2      	bge.n	800dd8c <__ieee754_pow+0x104>
 800dda6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800ddaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ddae:	e7ef      	b.n	800dd90 <__ieee754_pow+0x108>
 800ddb0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ddb4:	d104      	bne.n	800ddc0 <__ieee754_pow+0x138>
 800ddb6:	4610      	mov	r0, r2
 800ddb8:	4619      	mov	r1, r3
 800ddba:	f7f2 fbd5 	bl	8000568 <__aeabi_dmul>
 800ddbe:	e7e7      	b.n	800dd90 <__ieee754_pow+0x108>
 800ddc0:	493e      	ldr	r1, [pc, #248]	; (800debc <__ieee754_pow+0x234>)
 800ddc2:	428f      	cmp	r7, r1
 800ddc4:	d10d      	bne.n	800dde2 <__ieee754_pow+0x15a>
 800ddc6:	f1b9 0f00 	cmp.w	r9, #0
 800ddca:	db0a      	blt.n	800dde2 <__ieee754_pow+0x15a>
 800ddcc:	ec43 2b10 	vmov	d0, r2, r3
 800ddd0:	b00d      	add	sp, #52	; 0x34
 800ddd2:	ecbd 8b06 	vpop	{d8-d10}
 800ddd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddda:	f000 be83 	b.w	800eae4 <__ieee754_sqrt>
 800ddde:	2100      	movs	r1, #0
 800dde0:	9100      	str	r1, [sp, #0]
 800dde2:	ec43 2b10 	vmov	d0, r2, r3
 800dde6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ddea:	f7ff faa1 	bl	800d330 <fabs>
 800ddee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddf2:	ec51 0b10 	vmov	r0, r1, d0
 800ddf6:	f1b8 0f00 	cmp.w	r8, #0
 800ddfa:	d12a      	bne.n	800de52 <__ieee754_pow+0x1ca>
 800ddfc:	b12c      	cbz	r4, 800de0a <__ieee754_pow+0x182>
 800ddfe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800deb4 <__ieee754_pow+0x22c>
 800de02:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800de06:	45e6      	cmp	lr, ip
 800de08:	d123      	bne.n	800de52 <__ieee754_pow+0x1ca>
 800de0a:	2f00      	cmp	r7, #0
 800de0c:	da05      	bge.n	800de1a <__ieee754_pow+0x192>
 800de0e:	4602      	mov	r2, r0
 800de10:	460b      	mov	r3, r1
 800de12:	2000      	movs	r0, #0
 800de14:	4927      	ldr	r1, [pc, #156]	; (800deb4 <__ieee754_pow+0x22c>)
 800de16:	f7f2 fcd1 	bl	80007bc <__aeabi_ddiv>
 800de1a:	f1b9 0f00 	cmp.w	r9, #0
 800de1e:	dab7      	bge.n	800dd90 <__ieee754_pow+0x108>
 800de20:	9b00      	ldr	r3, [sp, #0]
 800de22:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800de26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800de2a:	4323      	orrs	r3, r4
 800de2c:	d108      	bne.n	800de40 <__ieee754_pow+0x1b8>
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	4610      	mov	r0, r2
 800de34:	4619      	mov	r1, r3
 800de36:	f7f2 f9df 	bl	80001f8 <__aeabi_dsub>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	e78d      	b.n	800dd5c <__ieee754_pow+0xd4>
 800de40:	9b00      	ldr	r3, [sp, #0]
 800de42:	2b01      	cmp	r3, #1
 800de44:	d1a4      	bne.n	800dd90 <__ieee754_pow+0x108>
 800de46:	4602      	mov	r2, r0
 800de48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de4c:	4610      	mov	r0, r2
 800de4e:	4619      	mov	r1, r3
 800de50:	e79e      	b.n	800dd90 <__ieee754_pow+0x108>
 800de52:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800de56:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800de5a:	950a      	str	r5, [sp, #40]	; 0x28
 800de5c:	9d00      	ldr	r5, [sp, #0]
 800de5e:	46ac      	mov	ip, r5
 800de60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800de62:	ea5c 0505 	orrs.w	r5, ip, r5
 800de66:	d0e4      	beq.n	800de32 <__ieee754_pow+0x1aa>
 800de68:	4b15      	ldr	r3, [pc, #84]	; (800dec0 <__ieee754_pow+0x238>)
 800de6a:	429e      	cmp	r6, r3
 800de6c:	f340 80fc 	ble.w	800e068 <__ieee754_pow+0x3e0>
 800de70:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800de74:	429e      	cmp	r6, r3
 800de76:	4b10      	ldr	r3, [pc, #64]	; (800deb8 <__ieee754_pow+0x230>)
 800de78:	dd07      	ble.n	800de8a <__ieee754_pow+0x202>
 800de7a:	429c      	cmp	r4, r3
 800de7c:	dc0a      	bgt.n	800de94 <__ieee754_pow+0x20c>
 800de7e:	2f00      	cmp	r7, #0
 800de80:	da84      	bge.n	800dd8c <__ieee754_pow+0x104>
 800de82:	a307      	add	r3, pc, #28	; (adr r3, 800dea0 <__ieee754_pow+0x218>)
 800de84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de88:	e795      	b.n	800ddb6 <__ieee754_pow+0x12e>
 800de8a:	429c      	cmp	r4, r3
 800de8c:	dbf7      	blt.n	800de7e <__ieee754_pow+0x1f6>
 800de8e:	4b09      	ldr	r3, [pc, #36]	; (800deb4 <__ieee754_pow+0x22c>)
 800de90:	429c      	cmp	r4, r3
 800de92:	dd17      	ble.n	800dec4 <__ieee754_pow+0x23c>
 800de94:	2f00      	cmp	r7, #0
 800de96:	dcf4      	bgt.n	800de82 <__ieee754_pow+0x1fa>
 800de98:	e778      	b.n	800dd8c <__ieee754_pow+0x104>
 800de9a:	bf00      	nop
 800de9c:	f3af 8000 	nop.w
 800dea0:	8800759c 	.word	0x8800759c
 800dea4:	7e37e43c 	.word	0x7e37e43c
 800dea8:	7ff00000 	.word	0x7ff00000
 800deac:	0800fc40 	.word	0x0800fc40
 800deb0:	433fffff 	.word	0x433fffff
 800deb4:	3ff00000 	.word	0x3ff00000
 800deb8:	3fefffff 	.word	0x3fefffff
 800debc:	3fe00000 	.word	0x3fe00000
 800dec0:	41e00000 	.word	0x41e00000
 800dec4:	4b64      	ldr	r3, [pc, #400]	; (800e058 <__ieee754_pow+0x3d0>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	f7f2 f996 	bl	80001f8 <__aeabi_dsub>
 800decc:	a356      	add	r3, pc, #344	; (adr r3, 800e028 <__ieee754_pow+0x3a0>)
 800dece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded2:	4604      	mov	r4, r0
 800ded4:	460d      	mov	r5, r1
 800ded6:	f7f2 fb47 	bl	8000568 <__aeabi_dmul>
 800deda:	a355      	add	r3, pc, #340	; (adr r3, 800e030 <__ieee754_pow+0x3a8>)
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	4606      	mov	r6, r0
 800dee2:	460f      	mov	r7, r1
 800dee4:	4620      	mov	r0, r4
 800dee6:	4629      	mov	r1, r5
 800dee8:	f7f2 fb3e 	bl	8000568 <__aeabi_dmul>
 800deec:	4b5b      	ldr	r3, [pc, #364]	; (800e05c <__ieee754_pow+0x3d4>)
 800deee:	4682      	mov	sl, r0
 800def0:	468b      	mov	fp, r1
 800def2:	2200      	movs	r2, #0
 800def4:	4620      	mov	r0, r4
 800def6:	4629      	mov	r1, r5
 800def8:	f7f2 fb36 	bl	8000568 <__aeabi_dmul>
 800defc:	4602      	mov	r2, r0
 800defe:	460b      	mov	r3, r1
 800df00:	a14d      	add	r1, pc, #308	; (adr r1, 800e038 <__ieee754_pow+0x3b0>)
 800df02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df06:	f7f2 f977 	bl	80001f8 <__aeabi_dsub>
 800df0a:	4622      	mov	r2, r4
 800df0c:	462b      	mov	r3, r5
 800df0e:	f7f2 fb2b 	bl	8000568 <__aeabi_dmul>
 800df12:	4602      	mov	r2, r0
 800df14:	460b      	mov	r3, r1
 800df16:	2000      	movs	r0, #0
 800df18:	4951      	ldr	r1, [pc, #324]	; (800e060 <__ieee754_pow+0x3d8>)
 800df1a:	f7f2 f96d 	bl	80001f8 <__aeabi_dsub>
 800df1e:	4622      	mov	r2, r4
 800df20:	4680      	mov	r8, r0
 800df22:	4689      	mov	r9, r1
 800df24:	462b      	mov	r3, r5
 800df26:	4620      	mov	r0, r4
 800df28:	4629      	mov	r1, r5
 800df2a:	f7f2 fb1d 	bl	8000568 <__aeabi_dmul>
 800df2e:	4602      	mov	r2, r0
 800df30:	460b      	mov	r3, r1
 800df32:	4640      	mov	r0, r8
 800df34:	4649      	mov	r1, r9
 800df36:	f7f2 fb17 	bl	8000568 <__aeabi_dmul>
 800df3a:	a341      	add	r3, pc, #260	; (adr r3, 800e040 <__ieee754_pow+0x3b8>)
 800df3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df40:	f7f2 fb12 	bl	8000568 <__aeabi_dmul>
 800df44:	4602      	mov	r2, r0
 800df46:	460b      	mov	r3, r1
 800df48:	4650      	mov	r0, sl
 800df4a:	4659      	mov	r1, fp
 800df4c:	f7f2 f954 	bl	80001f8 <__aeabi_dsub>
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	4680      	mov	r8, r0
 800df56:	4689      	mov	r9, r1
 800df58:	4630      	mov	r0, r6
 800df5a:	4639      	mov	r1, r7
 800df5c:	f7f2 f94e 	bl	80001fc <__adddf3>
 800df60:	2400      	movs	r4, #0
 800df62:	4632      	mov	r2, r6
 800df64:	463b      	mov	r3, r7
 800df66:	4620      	mov	r0, r4
 800df68:	460d      	mov	r5, r1
 800df6a:	f7f2 f945 	bl	80001f8 <__aeabi_dsub>
 800df6e:	4602      	mov	r2, r0
 800df70:	460b      	mov	r3, r1
 800df72:	4640      	mov	r0, r8
 800df74:	4649      	mov	r1, r9
 800df76:	f7f2 f93f 	bl	80001f8 <__aeabi_dsub>
 800df7a:	9b00      	ldr	r3, [sp, #0]
 800df7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df7e:	3b01      	subs	r3, #1
 800df80:	4313      	orrs	r3, r2
 800df82:	4682      	mov	sl, r0
 800df84:	468b      	mov	fp, r1
 800df86:	f040 81f1 	bne.w	800e36c <__ieee754_pow+0x6e4>
 800df8a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e048 <__ieee754_pow+0x3c0>
 800df8e:	eeb0 8a47 	vmov.f32	s16, s14
 800df92:	eef0 8a67 	vmov.f32	s17, s15
 800df96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df9a:	2600      	movs	r6, #0
 800df9c:	4632      	mov	r2, r6
 800df9e:	463b      	mov	r3, r7
 800dfa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfa4:	f7f2 f928 	bl	80001f8 <__aeabi_dsub>
 800dfa8:	4622      	mov	r2, r4
 800dfaa:	462b      	mov	r3, r5
 800dfac:	f7f2 fadc 	bl	8000568 <__aeabi_dmul>
 800dfb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfb4:	4680      	mov	r8, r0
 800dfb6:	4689      	mov	r9, r1
 800dfb8:	4650      	mov	r0, sl
 800dfba:	4659      	mov	r1, fp
 800dfbc:	f7f2 fad4 	bl	8000568 <__aeabi_dmul>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	4640      	mov	r0, r8
 800dfc6:	4649      	mov	r1, r9
 800dfc8:	f7f2 f918 	bl	80001fc <__adddf3>
 800dfcc:	4632      	mov	r2, r6
 800dfce:	463b      	mov	r3, r7
 800dfd0:	4680      	mov	r8, r0
 800dfd2:	4689      	mov	r9, r1
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	4629      	mov	r1, r5
 800dfd8:	f7f2 fac6 	bl	8000568 <__aeabi_dmul>
 800dfdc:	460b      	mov	r3, r1
 800dfde:	4604      	mov	r4, r0
 800dfe0:	460d      	mov	r5, r1
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	4649      	mov	r1, r9
 800dfe6:	4640      	mov	r0, r8
 800dfe8:	f7f2 f908 	bl	80001fc <__adddf3>
 800dfec:	4b1d      	ldr	r3, [pc, #116]	; (800e064 <__ieee754_pow+0x3dc>)
 800dfee:	4299      	cmp	r1, r3
 800dff0:	ec45 4b19 	vmov	d9, r4, r5
 800dff4:	4606      	mov	r6, r0
 800dff6:	460f      	mov	r7, r1
 800dff8:	468b      	mov	fp, r1
 800dffa:	f340 82fe 	ble.w	800e5fa <__ieee754_pow+0x972>
 800dffe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e002:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e006:	4303      	orrs	r3, r0
 800e008:	f000 81f0 	beq.w	800e3ec <__ieee754_pow+0x764>
 800e00c:	a310      	add	r3, pc, #64	; (adr r3, 800e050 <__ieee754_pow+0x3c8>)
 800e00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e012:	ec51 0b18 	vmov	r0, r1, d8
 800e016:	f7f2 faa7 	bl	8000568 <__aeabi_dmul>
 800e01a:	a30d      	add	r3, pc, #52	; (adr r3, 800e050 <__ieee754_pow+0x3c8>)
 800e01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e020:	e6cb      	b.n	800ddba <__ieee754_pow+0x132>
 800e022:	bf00      	nop
 800e024:	f3af 8000 	nop.w
 800e028:	60000000 	.word	0x60000000
 800e02c:	3ff71547 	.word	0x3ff71547
 800e030:	f85ddf44 	.word	0xf85ddf44
 800e034:	3e54ae0b 	.word	0x3e54ae0b
 800e038:	55555555 	.word	0x55555555
 800e03c:	3fd55555 	.word	0x3fd55555
 800e040:	652b82fe 	.word	0x652b82fe
 800e044:	3ff71547 	.word	0x3ff71547
 800e048:	00000000 	.word	0x00000000
 800e04c:	bff00000 	.word	0xbff00000
 800e050:	8800759c 	.word	0x8800759c
 800e054:	7e37e43c 	.word	0x7e37e43c
 800e058:	3ff00000 	.word	0x3ff00000
 800e05c:	3fd00000 	.word	0x3fd00000
 800e060:	3fe00000 	.word	0x3fe00000
 800e064:	408fffff 	.word	0x408fffff
 800e068:	4bd7      	ldr	r3, [pc, #860]	; (800e3c8 <__ieee754_pow+0x740>)
 800e06a:	ea03 0309 	and.w	r3, r3, r9
 800e06e:	2200      	movs	r2, #0
 800e070:	b92b      	cbnz	r3, 800e07e <__ieee754_pow+0x3f6>
 800e072:	4bd6      	ldr	r3, [pc, #856]	; (800e3cc <__ieee754_pow+0x744>)
 800e074:	f7f2 fa78 	bl	8000568 <__aeabi_dmul>
 800e078:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e07c:	460c      	mov	r4, r1
 800e07e:	1523      	asrs	r3, r4, #20
 800e080:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e084:	4413      	add	r3, r2
 800e086:	9309      	str	r3, [sp, #36]	; 0x24
 800e088:	4bd1      	ldr	r3, [pc, #836]	; (800e3d0 <__ieee754_pow+0x748>)
 800e08a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e08e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e092:	429c      	cmp	r4, r3
 800e094:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e098:	dd08      	ble.n	800e0ac <__ieee754_pow+0x424>
 800e09a:	4bce      	ldr	r3, [pc, #824]	; (800e3d4 <__ieee754_pow+0x74c>)
 800e09c:	429c      	cmp	r4, r3
 800e09e:	f340 8163 	ble.w	800e368 <__ieee754_pow+0x6e0>
 800e0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0a8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e0ac:	2400      	movs	r4, #0
 800e0ae:	00e3      	lsls	r3, r4, #3
 800e0b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0b2:	4bc9      	ldr	r3, [pc, #804]	; (800e3d8 <__ieee754_pow+0x750>)
 800e0b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0b8:	ed93 7b00 	vldr	d7, [r3]
 800e0bc:	4629      	mov	r1, r5
 800e0be:	ec53 2b17 	vmov	r2, r3, d7
 800e0c2:	eeb0 8a47 	vmov.f32	s16, s14
 800e0c6:	eef0 8a67 	vmov.f32	s17, s15
 800e0ca:	4682      	mov	sl, r0
 800e0cc:	f7f2 f894 	bl	80001f8 <__aeabi_dsub>
 800e0d0:	4652      	mov	r2, sl
 800e0d2:	4606      	mov	r6, r0
 800e0d4:	460f      	mov	r7, r1
 800e0d6:	462b      	mov	r3, r5
 800e0d8:	ec51 0b18 	vmov	r0, r1, d8
 800e0dc:	f7f2 f88e 	bl	80001fc <__adddf3>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	49bd      	ldr	r1, [pc, #756]	; (800e3dc <__ieee754_pow+0x754>)
 800e0e8:	f7f2 fb68 	bl	80007bc <__aeabi_ddiv>
 800e0ec:	ec41 0b19 	vmov	d9, r0, r1
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	4639      	mov	r1, r7
 800e0f8:	f7f2 fa36 	bl	8000568 <__aeabi_dmul>
 800e0fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e100:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e104:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e108:	2300      	movs	r3, #0
 800e10a:	9304      	str	r3, [sp, #16]
 800e10c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e110:	46ab      	mov	fp, r5
 800e112:	106d      	asrs	r5, r5, #1
 800e114:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e118:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e11c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e120:	2200      	movs	r2, #0
 800e122:	4640      	mov	r0, r8
 800e124:	4649      	mov	r1, r9
 800e126:	4614      	mov	r4, r2
 800e128:	461d      	mov	r5, r3
 800e12a:	f7f2 fa1d 	bl	8000568 <__aeabi_dmul>
 800e12e:	4602      	mov	r2, r0
 800e130:	460b      	mov	r3, r1
 800e132:	4630      	mov	r0, r6
 800e134:	4639      	mov	r1, r7
 800e136:	f7f2 f85f 	bl	80001f8 <__aeabi_dsub>
 800e13a:	ec53 2b18 	vmov	r2, r3, d8
 800e13e:	4606      	mov	r6, r0
 800e140:	460f      	mov	r7, r1
 800e142:	4620      	mov	r0, r4
 800e144:	4629      	mov	r1, r5
 800e146:	f7f2 f857 	bl	80001f8 <__aeabi_dsub>
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	4650      	mov	r0, sl
 800e150:	4659      	mov	r1, fp
 800e152:	f7f2 f851 	bl	80001f8 <__aeabi_dsub>
 800e156:	4642      	mov	r2, r8
 800e158:	464b      	mov	r3, r9
 800e15a:	f7f2 fa05 	bl	8000568 <__aeabi_dmul>
 800e15e:	4602      	mov	r2, r0
 800e160:	460b      	mov	r3, r1
 800e162:	4630      	mov	r0, r6
 800e164:	4639      	mov	r1, r7
 800e166:	f7f2 f847 	bl	80001f8 <__aeabi_dsub>
 800e16a:	ec53 2b19 	vmov	r2, r3, d9
 800e16e:	f7f2 f9fb 	bl	8000568 <__aeabi_dmul>
 800e172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e176:	ec41 0b18 	vmov	d8, r0, r1
 800e17a:	4610      	mov	r0, r2
 800e17c:	4619      	mov	r1, r3
 800e17e:	f7f2 f9f3 	bl	8000568 <__aeabi_dmul>
 800e182:	a37d      	add	r3, pc, #500	; (adr r3, 800e378 <__ieee754_pow+0x6f0>)
 800e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e188:	4604      	mov	r4, r0
 800e18a:	460d      	mov	r5, r1
 800e18c:	f7f2 f9ec 	bl	8000568 <__aeabi_dmul>
 800e190:	a37b      	add	r3, pc, #492	; (adr r3, 800e380 <__ieee754_pow+0x6f8>)
 800e192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e196:	f7f2 f831 	bl	80001fc <__adddf3>
 800e19a:	4622      	mov	r2, r4
 800e19c:	462b      	mov	r3, r5
 800e19e:	f7f2 f9e3 	bl	8000568 <__aeabi_dmul>
 800e1a2:	a379      	add	r3, pc, #484	; (adr r3, 800e388 <__ieee754_pow+0x700>)
 800e1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a8:	f7f2 f828 	bl	80001fc <__adddf3>
 800e1ac:	4622      	mov	r2, r4
 800e1ae:	462b      	mov	r3, r5
 800e1b0:	f7f2 f9da 	bl	8000568 <__aeabi_dmul>
 800e1b4:	a376      	add	r3, pc, #472	; (adr r3, 800e390 <__ieee754_pow+0x708>)
 800e1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ba:	f7f2 f81f 	bl	80001fc <__adddf3>
 800e1be:	4622      	mov	r2, r4
 800e1c0:	462b      	mov	r3, r5
 800e1c2:	f7f2 f9d1 	bl	8000568 <__aeabi_dmul>
 800e1c6:	a374      	add	r3, pc, #464	; (adr r3, 800e398 <__ieee754_pow+0x710>)
 800e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1cc:	f7f2 f816 	bl	80001fc <__adddf3>
 800e1d0:	4622      	mov	r2, r4
 800e1d2:	462b      	mov	r3, r5
 800e1d4:	f7f2 f9c8 	bl	8000568 <__aeabi_dmul>
 800e1d8:	a371      	add	r3, pc, #452	; (adr r3, 800e3a0 <__ieee754_pow+0x718>)
 800e1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1de:	f7f2 f80d 	bl	80001fc <__adddf3>
 800e1e2:	4622      	mov	r2, r4
 800e1e4:	4606      	mov	r6, r0
 800e1e6:	460f      	mov	r7, r1
 800e1e8:	462b      	mov	r3, r5
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	f7f2 f9bb 	bl	8000568 <__aeabi_dmul>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	4639      	mov	r1, r7
 800e1fa:	f7f2 f9b5 	bl	8000568 <__aeabi_dmul>
 800e1fe:	4642      	mov	r2, r8
 800e200:	4604      	mov	r4, r0
 800e202:	460d      	mov	r5, r1
 800e204:	464b      	mov	r3, r9
 800e206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e20a:	f7f1 fff7 	bl	80001fc <__adddf3>
 800e20e:	ec53 2b18 	vmov	r2, r3, d8
 800e212:	f7f2 f9a9 	bl	8000568 <__aeabi_dmul>
 800e216:	4622      	mov	r2, r4
 800e218:	462b      	mov	r3, r5
 800e21a:	f7f1 ffef 	bl	80001fc <__adddf3>
 800e21e:	4642      	mov	r2, r8
 800e220:	4682      	mov	sl, r0
 800e222:	468b      	mov	fp, r1
 800e224:	464b      	mov	r3, r9
 800e226:	4640      	mov	r0, r8
 800e228:	4649      	mov	r1, r9
 800e22a:	f7f2 f99d 	bl	8000568 <__aeabi_dmul>
 800e22e:	4b6c      	ldr	r3, [pc, #432]	; (800e3e0 <__ieee754_pow+0x758>)
 800e230:	2200      	movs	r2, #0
 800e232:	4606      	mov	r6, r0
 800e234:	460f      	mov	r7, r1
 800e236:	f7f1 ffe1 	bl	80001fc <__adddf3>
 800e23a:	4652      	mov	r2, sl
 800e23c:	465b      	mov	r3, fp
 800e23e:	f7f1 ffdd 	bl	80001fc <__adddf3>
 800e242:	9c04      	ldr	r4, [sp, #16]
 800e244:	460d      	mov	r5, r1
 800e246:	4622      	mov	r2, r4
 800e248:	460b      	mov	r3, r1
 800e24a:	4640      	mov	r0, r8
 800e24c:	4649      	mov	r1, r9
 800e24e:	f7f2 f98b 	bl	8000568 <__aeabi_dmul>
 800e252:	4b63      	ldr	r3, [pc, #396]	; (800e3e0 <__ieee754_pow+0x758>)
 800e254:	4680      	mov	r8, r0
 800e256:	4689      	mov	r9, r1
 800e258:	2200      	movs	r2, #0
 800e25a:	4620      	mov	r0, r4
 800e25c:	4629      	mov	r1, r5
 800e25e:	f7f1 ffcb 	bl	80001f8 <__aeabi_dsub>
 800e262:	4632      	mov	r2, r6
 800e264:	463b      	mov	r3, r7
 800e266:	f7f1 ffc7 	bl	80001f8 <__aeabi_dsub>
 800e26a:	4602      	mov	r2, r0
 800e26c:	460b      	mov	r3, r1
 800e26e:	4650      	mov	r0, sl
 800e270:	4659      	mov	r1, fp
 800e272:	f7f1 ffc1 	bl	80001f8 <__aeabi_dsub>
 800e276:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e27a:	f7f2 f975 	bl	8000568 <__aeabi_dmul>
 800e27e:	4622      	mov	r2, r4
 800e280:	4606      	mov	r6, r0
 800e282:	460f      	mov	r7, r1
 800e284:	462b      	mov	r3, r5
 800e286:	ec51 0b18 	vmov	r0, r1, d8
 800e28a:	f7f2 f96d 	bl	8000568 <__aeabi_dmul>
 800e28e:	4602      	mov	r2, r0
 800e290:	460b      	mov	r3, r1
 800e292:	4630      	mov	r0, r6
 800e294:	4639      	mov	r1, r7
 800e296:	f7f1 ffb1 	bl	80001fc <__adddf3>
 800e29a:	4606      	mov	r6, r0
 800e29c:	460f      	mov	r7, r1
 800e29e:	4602      	mov	r2, r0
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	4649      	mov	r1, r9
 800e2a6:	f7f1 ffa9 	bl	80001fc <__adddf3>
 800e2aa:	9c04      	ldr	r4, [sp, #16]
 800e2ac:	a33e      	add	r3, pc, #248	; (adr r3, 800e3a8 <__ieee754_pow+0x720>)
 800e2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	460d      	mov	r5, r1
 800e2b6:	f7f2 f957 	bl	8000568 <__aeabi_dmul>
 800e2ba:	4642      	mov	r2, r8
 800e2bc:	ec41 0b18 	vmov	d8, r0, r1
 800e2c0:	464b      	mov	r3, r9
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	f7f1 ff97 	bl	80001f8 <__aeabi_dsub>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	4639      	mov	r1, r7
 800e2d2:	f7f1 ff91 	bl	80001f8 <__aeabi_dsub>
 800e2d6:	a336      	add	r3, pc, #216	; (adr r3, 800e3b0 <__ieee754_pow+0x728>)
 800e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2dc:	f7f2 f944 	bl	8000568 <__aeabi_dmul>
 800e2e0:	a335      	add	r3, pc, #212	; (adr r3, 800e3b8 <__ieee754_pow+0x730>)
 800e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e6:	4606      	mov	r6, r0
 800e2e8:	460f      	mov	r7, r1
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	f7f2 f93b 	bl	8000568 <__aeabi_dmul>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	4639      	mov	r1, r7
 800e2fa:	f7f1 ff7f 	bl	80001fc <__adddf3>
 800e2fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e300:	4b38      	ldr	r3, [pc, #224]	; (800e3e4 <__ieee754_pow+0x75c>)
 800e302:	4413      	add	r3, r2
 800e304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e308:	f7f1 ff78 	bl	80001fc <__adddf3>
 800e30c:	4682      	mov	sl, r0
 800e30e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e310:	468b      	mov	fp, r1
 800e312:	f7f2 f8bf 	bl	8000494 <__aeabi_i2d>
 800e316:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e318:	4b33      	ldr	r3, [pc, #204]	; (800e3e8 <__ieee754_pow+0x760>)
 800e31a:	4413      	add	r3, r2
 800e31c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e320:	4606      	mov	r6, r0
 800e322:	460f      	mov	r7, r1
 800e324:	4652      	mov	r2, sl
 800e326:	465b      	mov	r3, fp
 800e328:	ec51 0b18 	vmov	r0, r1, d8
 800e32c:	f7f1 ff66 	bl	80001fc <__adddf3>
 800e330:	4642      	mov	r2, r8
 800e332:	464b      	mov	r3, r9
 800e334:	f7f1 ff62 	bl	80001fc <__adddf3>
 800e338:	4632      	mov	r2, r6
 800e33a:	463b      	mov	r3, r7
 800e33c:	f7f1 ff5e 	bl	80001fc <__adddf3>
 800e340:	9c04      	ldr	r4, [sp, #16]
 800e342:	4632      	mov	r2, r6
 800e344:	463b      	mov	r3, r7
 800e346:	4620      	mov	r0, r4
 800e348:	460d      	mov	r5, r1
 800e34a:	f7f1 ff55 	bl	80001f8 <__aeabi_dsub>
 800e34e:	4642      	mov	r2, r8
 800e350:	464b      	mov	r3, r9
 800e352:	f7f1 ff51 	bl	80001f8 <__aeabi_dsub>
 800e356:	ec53 2b18 	vmov	r2, r3, d8
 800e35a:	f7f1 ff4d 	bl	80001f8 <__aeabi_dsub>
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	4650      	mov	r0, sl
 800e364:	4659      	mov	r1, fp
 800e366:	e606      	b.n	800df76 <__ieee754_pow+0x2ee>
 800e368:	2401      	movs	r4, #1
 800e36a:	e6a0      	b.n	800e0ae <__ieee754_pow+0x426>
 800e36c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e3c0 <__ieee754_pow+0x738>
 800e370:	e60d      	b.n	800df8e <__ieee754_pow+0x306>
 800e372:	bf00      	nop
 800e374:	f3af 8000 	nop.w
 800e378:	4a454eef 	.word	0x4a454eef
 800e37c:	3fca7e28 	.word	0x3fca7e28
 800e380:	93c9db65 	.word	0x93c9db65
 800e384:	3fcd864a 	.word	0x3fcd864a
 800e388:	a91d4101 	.word	0xa91d4101
 800e38c:	3fd17460 	.word	0x3fd17460
 800e390:	518f264d 	.word	0x518f264d
 800e394:	3fd55555 	.word	0x3fd55555
 800e398:	db6fabff 	.word	0xdb6fabff
 800e39c:	3fdb6db6 	.word	0x3fdb6db6
 800e3a0:	33333303 	.word	0x33333303
 800e3a4:	3fe33333 	.word	0x3fe33333
 800e3a8:	e0000000 	.word	0xe0000000
 800e3ac:	3feec709 	.word	0x3feec709
 800e3b0:	dc3a03fd 	.word	0xdc3a03fd
 800e3b4:	3feec709 	.word	0x3feec709
 800e3b8:	145b01f5 	.word	0x145b01f5
 800e3bc:	be3e2fe0 	.word	0xbe3e2fe0
 800e3c0:	00000000 	.word	0x00000000
 800e3c4:	3ff00000 	.word	0x3ff00000
 800e3c8:	7ff00000 	.word	0x7ff00000
 800e3cc:	43400000 	.word	0x43400000
 800e3d0:	0003988e 	.word	0x0003988e
 800e3d4:	000bb679 	.word	0x000bb679
 800e3d8:	0800fc78 	.word	0x0800fc78
 800e3dc:	3ff00000 	.word	0x3ff00000
 800e3e0:	40080000 	.word	0x40080000
 800e3e4:	0800fc98 	.word	0x0800fc98
 800e3e8:	0800fc88 	.word	0x0800fc88
 800e3ec:	a3b5      	add	r3, pc, #724	; (adr r3, 800e6c4 <__ieee754_pow+0xa3c>)
 800e3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f2:	4640      	mov	r0, r8
 800e3f4:	4649      	mov	r1, r9
 800e3f6:	f7f1 ff01 	bl	80001fc <__adddf3>
 800e3fa:	4622      	mov	r2, r4
 800e3fc:	ec41 0b1a 	vmov	d10, r0, r1
 800e400:	462b      	mov	r3, r5
 800e402:	4630      	mov	r0, r6
 800e404:	4639      	mov	r1, r7
 800e406:	f7f1 fef7 	bl	80001f8 <__aeabi_dsub>
 800e40a:	4602      	mov	r2, r0
 800e40c:	460b      	mov	r3, r1
 800e40e:	ec51 0b1a 	vmov	r0, r1, d10
 800e412:	f7f2 fb39 	bl	8000a88 <__aeabi_dcmpgt>
 800e416:	2800      	cmp	r0, #0
 800e418:	f47f adf8 	bne.w	800e00c <__ieee754_pow+0x384>
 800e41c:	4aa4      	ldr	r2, [pc, #656]	; (800e6b0 <__ieee754_pow+0xa28>)
 800e41e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e422:	4293      	cmp	r3, r2
 800e424:	f340 810b 	ble.w	800e63e <__ieee754_pow+0x9b6>
 800e428:	151b      	asrs	r3, r3, #20
 800e42a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e42e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e432:	fa4a f303 	asr.w	r3, sl, r3
 800e436:	445b      	add	r3, fp
 800e438:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e43c:	4e9d      	ldr	r6, [pc, #628]	; (800e6b4 <__ieee754_pow+0xa2c>)
 800e43e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e442:	4116      	asrs	r6, r2
 800e444:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e448:	2000      	movs	r0, #0
 800e44a:	ea23 0106 	bic.w	r1, r3, r6
 800e44e:	f1c2 0214 	rsb	r2, r2, #20
 800e452:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e456:	fa4a fa02 	asr.w	sl, sl, r2
 800e45a:	f1bb 0f00 	cmp.w	fp, #0
 800e45e:	4602      	mov	r2, r0
 800e460:	460b      	mov	r3, r1
 800e462:	4620      	mov	r0, r4
 800e464:	4629      	mov	r1, r5
 800e466:	bfb8      	it	lt
 800e468:	f1ca 0a00 	rsblt	sl, sl, #0
 800e46c:	f7f1 fec4 	bl	80001f8 <__aeabi_dsub>
 800e470:	ec41 0b19 	vmov	d9, r0, r1
 800e474:	4642      	mov	r2, r8
 800e476:	464b      	mov	r3, r9
 800e478:	ec51 0b19 	vmov	r0, r1, d9
 800e47c:	f7f1 febe 	bl	80001fc <__adddf3>
 800e480:	2400      	movs	r4, #0
 800e482:	a379      	add	r3, pc, #484	; (adr r3, 800e668 <__ieee754_pow+0x9e0>)
 800e484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e488:	4620      	mov	r0, r4
 800e48a:	460d      	mov	r5, r1
 800e48c:	f7f2 f86c 	bl	8000568 <__aeabi_dmul>
 800e490:	ec53 2b19 	vmov	r2, r3, d9
 800e494:	4606      	mov	r6, r0
 800e496:	460f      	mov	r7, r1
 800e498:	4620      	mov	r0, r4
 800e49a:	4629      	mov	r1, r5
 800e49c:	f7f1 feac 	bl	80001f8 <__aeabi_dsub>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	4640      	mov	r0, r8
 800e4a6:	4649      	mov	r1, r9
 800e4a8:	f7f1 fea6 	bl	80001f8 <__aeabi_dsub>
 800e4ac:	a370      	add	r3, pc, #448	; (adr r3, 800e670 <__ieee754_pow+0x9e8>)
 800e4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b2:	f7f2 f859 	bl	8000568 <__aeabi_dmul>
 800e4b6:	a370      	add	r3, pc, #448	; (adr r3, 800e678 <__ieee754_pow+0x9f0>)
 800e4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4bc:	4680      	mov	r8, r0
 800e4be:	4689      	mov	r9, r1
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	4629      	mov	r1, r5
 800e4c4:	f7f2 f850 	bl	8000568 <__aeabi_dmul>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	4640      	mov	r0, r8
 800e4ce:	4649      	mov	r1, r9
 800e4d0:	f7f1 fe94 	bl	80001fc <__adddf3>
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	460d      	mov	r5, r1
 800e4d8:	4602      	mov	r2, r0
 800e4da:	460b      	mov	r3, r1
 800e4dc:	4630      	mov	r0, r6
 800e4de:	4639      	mov	r1, r7
 800e4e0:	f7f1 fe8c 	bl	80001fc <__adddf3>
 800e4e4:	4632      	mov	r2, r6
 800e4e6:	463b      	mov	r3, r7
 800e4e8:	4680      	mov	r8, r0
 800e4ea:	4689      	mov	r9, r1
 800e4ec:	f7f1 fe84 	bl	80001f8 <__aeabi_dsub>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	f7f1 fe7e 	bl	80001f8 <__aeabi_dsub>
 800e4fc:	4642      	mov	r2, r8
 800e4fe:	4606      	mov	r6, r0
 800e500:	460f      	mov	r7, r1
 800e502:	464b      	mov	r3, r9
 800e504:	4640      	mov	r0, r8
 800e506:	4649      	mov	r1, r9
 800e508:	f7f2 f82e 	bl	8000568 <__aeabi_dmul>
 800e50c:	a35c      	add	r3, pc, #368	; (adr r3, 800e680 <__ieee754_pow+0x9f8>)
 800e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e512:	4604      	mov	r4, r0
 800e514:	460d      	mov	r5, r1
 800e516:	f7f2 f827 	bl	8000568 <__aeabi_dmul>
 800e51a:	a35b      	add	r3, pc, #364	; (adr r3, 800e688 <__ieee754_pow+0xa00>)
 800e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e520:	f7f1 fe6a 	bl	80001f8 <__aeabi_dsub>
 800e524:	4622      	mov	r2, r4
 800e526:	462b      	mov	r3, r5
 800e528:	f7f2 f81e 	bl	8000568 <__aeabi_dmul>
 800e52c:	a358      	add	r3, pc, #352	; (adr r3, 800e690 <__ieee754_pow+0xa08>)
 800e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e532:	f7f1 fe63 	bl	80001fc <__adddf3>
 800e536:	4622      	mov	r2, r4
 800e538:	462b      	mov	r3, r5
 800e53a:	f7f2 f815 	bl	8000568 <__aeabi_dmul>
 800e53e:	a356      	add	r3, pc, #344	; (adr r3, 800e698 <__ieee754_pow+0xa10>)
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	f7f1 fe58 	bl	80001f8 <__aeabi_dsub>
 800e548:	4622      	mov	r2, r4
 800e54a:	462b      	mov	r3, r5
 800e54c:	f7f2 f80c 	bl	8000568 <__aeabi_dmul>
 800e550:	a353      	add	r3, pc, #332	; (adr r3, 800e6a0 <__ieee754_pow+0xa18>)
 800e552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e556:	f7f1 fe51 	bl	80001fc <__adddf3>
 800e55a:	4622      	mov	r2, r4
 800e55c:	462b      	mov	r3, r5
 800e55e:	f7f2 f803 	bl	8000568 <__aeabi_dmul>
 800e562:	4602      	mov	r2, r0
 800e564:	460b      	mov	r3, r1
 800e566:	4640      	mov	r0, r8
 800e568:	4649      	mov	r1, r9
 800e56a:	f7f1 fe45 	bl	80001f8 <__aeabi_dsub>
 800e56e:	4604      	mov	r4, r0
 800e570:	460d      	mov	r5, r1
 800e572:	4602      	mov	r2, r0
 800e574:	460b      	mov	r3, r1
 800e576:	4640      	mov	r0, r8
 800e578:	4649      	mov	r1, r9
 800e57a:	f7f1 fff5 	bl	8000568 <__aeabi_dmul>
 800e57e:	2200      	movs	r2, #0
 800e580:	ec41 0b19 	vmov	d9, r0, r1
 800e584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e588:	4620      	mov	r0, r4
 800e58a:	4629      	mov	r1, r5
 800e58c:	f7f1 fe34 	bl	80001f8 <__aeabi_dsub>
 800e590:	4602      	mov	r2, r0
 800e592:	460b      	mov	r3, r1
 800e594:	ec51 0b19 	vmov	r0, r1, d9
 800e598:	f7f2 f910 	bl	80007bc <__aeabi_ddiv>
 800e59c:	4632      	mov	r2, r6
 800e59e:	4604      	mov	r4, r0
 800e5a0:	460d      	mov	r5, r1
 800e5a2:	463b      	mov	r3, r7
 800e5a4:	4640      	mov	r0, r8
 800e5a6:	4649      	mov	r1, r9
 800e5a8:	f7f1 ffde 	bl	8000568 <__aeabi_dmul>
 800e5ac:	4632      	mov	r2, r6
 800e5ae:	463b      	mov	r3, r7
 800e5b0:	f7f1 fe24 	bl	80001fc <__adddf3>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	4629      	mov	r1, r5
 800e5bc:	f7f1 fe1c 	bl	80001f8 <__aeabi_dsub>
 800e5c0:	4642      	mov	r2, r8
 800e5c2:	464b      	mov	r3, r9
 800e5c4:	f7f1 fe18 	bl	80001f8 <__aeabi_dsub>
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	493a      	ldr	r1, [pc, #232]	; (800e6b8 <__ieee754_pow+0xa30>)
 800e5ce:	2000      	movs	r0, #0
 800e5d0:	f7f1 fe12 	bl	80001f8 <__aeabi_dsub>
 800e5d4:	e9cd 0100 	strd	r0, r1, [sp]
 800e5d8:	9b01      	ldr	r3, [sp, #4]
 800e5da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e5de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5e2:	da2f      	bge.n	800e644 <__ieee754_pow+0x9bc>
 800e5e4:	4650      	mov	r0, sl
 800e5e6:	ed9d 0b00 	vldr	d0, [sp]
 800e5ea:	f001 f919 	bl	800f820 <scalbn>
 800e5ee:	ec51 0b10 	vmov	r0, r1, d0
 800e5f2:	ec53 2b18 	vmov	r2, r3, d8
 800e5f6:	f7ff bbe0 	b.w	800ddba <__ieee754_pow+0x132>
 800e5fa:	4b30      	ldr	r3, [pc, #192]	; (800e6bc <__ieee754_pow+0xa34>)
 800e5fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e600:	429e      	cmp	r6, r3
 800e602:	f77f af0b 	ble.w	800e41c <__ieee754_pow+0x794>
 800e606:	4b2e      	ldr	r3, [pc, #184]	; (800e6c0 <__ieee754_pow+0xa38>)
 800e608:	440b      	add	r3, r1
 800e60a:	4303      	orrs	r3, r0
 800e60c:	d00b      	beq.n	800e626 <__ieee754_pow+0x99e>
 800e60e:	a326      	add	r3, pc, #152	; (adr r3, 800e6a8 <__ieee754_pow+0xa20>)
 800e610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e614:	ec51 0b18 	vmov	r0, r1, d8
 800e618:	f7f1 ffa6 	bl	8000568 <__aeabi_dmul>
 800e61c:	a322      	add	r3, pc, #136	; (adr r3, 800e6a8 <__ieee754_pow+0xa20>)
 800e61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e622:	f7ff bbca 	b.w	800ddba <__ieee754_pow+0x132>
 800e626:	4622      	mov	r2, r4
 800e628:	462b      	mov	r3, r5
 800e62a:	f7f1 fde5 	bl	80001f8 <__aeabi_dsub>
 800e62e:	4642      	mov	r2, r8
 800e630:	464b      	mov	r3, r9
 800e632:	f7f2 fa1f 	bl	8000a74 <__aeabi_dcmpge>
 800e636:	2800      	cmp	r0, #0
 800e638:	f43f aef0 	beq.w	800e41c <__ieee754_pow+0x794>
 800e63c:	e7e7      	b.n	800e60e <__ieee754_pow+0x986>
 800e63e:	f04f 0a00 	mov.w	sl, #0
 800e642:	e717      	b.n	800e474 <__ieee754_pow+0x7ec>
 800e644:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e648:	4619      	mov	r1, r3
 800e64a:	e7d2      	b.n	800e5f2 <__ieee754_pow+0x96a>
 800e64c:	491a      	ldr	r1, [pc, #104]	; (800e6b8 <__ieee754_pow+0xa30>)
 800e64e:	2000      	movs	r0, #0
 800e650:	f7ff bb9e 	b.w	800dd90 <__ieee754_pow+0x108>
 800e654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e658:	f7ff bb9a 	b.w	800dd90 <__ieee754_pow+0x108>
 800e65c:	9000      	str	r0, [sp, #0]
 800e65e:	f7ff bb76 	b.w	800dd4e <__ieee754_pow+0xc6>
 800e662:	2100      	movs	r1, #0
 800e664:	f7ff bb60 	b.w	800dd28 <__ieee754_pow+0xa0>
 800e668:	00000000 	.word	0x00000000
 800e66c:	3fe62e43 	.word	0x3fe62e43
 800e670:	fefa39ef 	.word	0xfefa39ef
 800e674:	3fe62e42 	.word	0x3fe62e42
 800e678:	0ca86c39 	.word	0x0ca86c39
 800e67c:	be205c61 	.word	0xbe205c61
 800e680:	72bea4d0 	.word	0x72bea4d0
 800e684:	3e663769 	.word	0x3e663769
 800e688:	c5d26bf1 	.word	0xc5d26bf1
 800e68c:	3ebbbd41 	.word	0x3ebbbd41
 800e690:	af25de2c 	.word	0xaf25de2c
 800e694:	3f11566a 	.word	0x3f11566a
 800e698:	16bebd93 	.word	0x16bebd93
 800e69c:	3f66c16c 	.word	0x3f66c16c
 800e6a0:	5555553e 	.word	0x5555553e
 800e6a4:	3fc55555 	.word	0x3fc55555
 800e6a8:	c2f8f359 	.word	0xc2f8f359
 800e6ac:	01a56e1f 	.word	0x01a56e1f
 800e6b0:	3fe00000 	.word	0x3fe00000
 800e6b4:	000fffff 	.word	0x000fffff
 800e6b8:	3ff00000 	.word	0x3ff00000
 800e6bc:	4090cbff 	.word	0x4090cbff
 800e6c0:	3f6f3400 	.word	0x3f6f3400
 800e6c4:	652b82fe 	.word	0x652b82fe
 800e6c8:	3c971547 	.word	0x3c971547
 800e6cc:	00000000 	.word	0x00000000

0800e6d0 <__ieee754_rem_pio2>:
 800e6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d4:	ed2d 8b02 	vpush	{d8}
 800e6d8:	ec55 4b10 	vmov	r4, r5, d0
 800e6dc:	4bca      	ldr	r3, [pc, #808]	; (800ea08 <__ieee754_rem_pio2+0x338>)
 800e6de:	b08b      	sub	sp, #44	; 0x2c
 800e6e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e6e4:	4598      	cmp	r8, r3
 800e6e6:	4682      	mov	sl, r0
 800e6e8:	9502      	str	r5, [sp, #8]
 800e6ea:	dc08      	bgt.n	800e6fe <__ieee754_rem_pio2+0x2e>
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	ed80 0b00 	vstr	d0, [r0]
 800e6f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e6f8:	f04f 0b00 	mov.w	fp, #0
 800e6fc:	e028      	b.n	800e750 <__ieee754_rem_pio2+0x80>
 800e6fe:	4bc3      	ldr	r3, [pc, #780]	; (800ea0c <__ieee754_rem_pio2+0x33c>)
 800e700:	4598      	cmp	r8, r3
 800e702:	dc78      	bgt.n	800e7f6 <__ieee754_rem_pio2+0x126>
 800e704:	9b02      	ldr	r3, [sp, #8]
 800e706:	4ec2      	ldr	r6, [pc, #776]	; (800ea10 <__ieee754_rem_pio2+0x340>)
 800e708:	2b00      	cmp	r3, #0
 800e70a:	ee10 0a10 	vmov	r0, s0
 800e70e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x300>)
 800e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e714:	4629      	mov	r1, r5
 800e716:	dd39      	ble.n	800e78c <__ieee754_rem_pio2+0xbc>
 800e718:	f7f1 fd6e 	bl	80001f8 <__aeabi_dsub>
 800e71c:	45b0      	cmp	r8, r6
 800e71e:	4604      	mov	r4, r0
 800e720:	460d      	mov	r5, r1
 800e722:	d01b      	beq.n	800e75c <__ieee754_rem_pio2+0x8c>
 800e724:	a3ac      	add	r3, pc, #688	; (adr r3, 800e9d8 <__ieee754_rem_pio2+0x308>)
 800e726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72a:	f7f1 fd65 	bl	80001f8 <__aeabi_dsub>
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	e9ca 2300 	strd	r2, r3, [sl]
 800e736:	4620      	mov	r0, r4
 800e738:	4629      	mov	r1, r5
 800e73a:	f7f1 fd5d 	bl	80001f8 <__aeabi_dsub>
 800e73e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e9d8 <__ieee754_rem_pio2+0x308>)
 800e740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e744:	f7f1 fd58 	bl	80001f8 <__aeabi_dsub>
 800e748:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e74c:	f04f 0b01 	mov.w	fp, #1
 800e750:	4658      	mov	r0, fp
 800e752:	b00b      	add	sp, #44	; 0x2c
 800e754:	ecbd 8b02 	vpop	{d8}
 800e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e9e0 <__ieee754_rem_pio2+0x310>)
 800e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e762:	f7f1 fd49 	bl	80001f8 <__aeabi_dsub>
 800e766:	a3a0      	add	r3, pc, #640	; (adr r3, 800e9e8 <__ieee754_rem_pio2+0x318>)
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	4604      	mov	r4, r0
 800e76e:	460d      	mov	r5, r1
 800e770:	f7f1 fd42 	bl	80001f8 <__aeabi_dsub>
 800e774:	4602      	mov	r2, r0
 800e776:	460b      	mov	r3, r1
 800e778:	e9ca 2300 	strd	r2, r3, [sl]
 800e77c:	4620      	mov	r0, r4
 800e77e:	4629      	mov	r1, r5
 800e780:	f7f1 fd3a 	bl	80001f8 <__aeabi_dsub>
 800e784:	a398      	add	r3, pc, #608	; (adr r3, 800e9e8 <__ieee754_rem_pio2+0x318>)
 800e786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78a:	e7db      	b.n	800e744 <__ieee754_rem_pio2+0x74>
 800e78c:	f7f1 fd36 	bl	80001fc <__adddf3>
 800e790:	45b0      	cmp	r8, r6
 800e792:	4604      	mov	r4, r0
 800e794:	460d      	mov	r5, r1
 800e796:	d016      	beq.n	800e7c6 <__ieee754_rem_pio2+0xf6>
 800e798:	a38f      	add	r3, pc, #572	; (adr r3, 800e9d8 <__ieee754_rem_pio2+0x308>)
 800e79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79e:	f7f1 fd2d 	bl	80001fc <__adddf3>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	e9ca 2300 	strd	r2, r3, [sl]
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	f7f1 fd23 	bl	80001f8 <__aeabi_dsub>
 800e7b2:	a389      	add	r3, pc, #548	; (adr r3, 800e9d8 <__ieee754_rem_pio2+0x308>)
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	f7f1 fd20 	bl	80001fc <__adddf3>
 800e7bc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e7c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e7c4:	e7c4      	b.n	800e750 <__ieee754_rem_pio2+0x80>
 800e7c6:	a386      	add	r3, pc, #536	; (adr r3, 800e9e0 <__ieee754_rem_pio2+0x310>)
 800e7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7cc:	f7f1 fd16 	bl	80001fc <__adddf3>
 800e7d0:	a385      	add	r3, pc, #532	; (adr r3, 800e9e8 <__ieee754_rem_pio2+0x318>)
 800e7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	460d      	mov	r5, r1
 800e7da:	f7f1 fd0f 	bl	80001fc <__adddf3>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	e9ca 2300 	strd	r2, r3, [sl]
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	4629      	mov	r1, r5
 800e7ea:	f7f1 fd05 	bl	80001f8 <__aeabi_dsub>
 800e7ee:	a37e      	add	r3, pc, #504	; (adr r3, 800e9e8 <__ieee754_rem_pio2+0x318>)
 800e7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f4:	e7e0      	b.n	800e7b8 <__ieee754_rem_pio2+0xe8>
 800e7f6:	4b87      	ldr	r3, [pc, #540]	; (800ea14 <__ieee754_rem_pio2+0x344>)
 800e7f8:	4598      	cmp	r8, r3
 800e7fa:	f300 80d9 	bgt.w	800e9b0 <__ieee754_rem_pio2+0x2e0>
 800e7fe:	f7fe fd97 	bl	800d330 <fabs>
 800e802:	ec55 4b10 	vmov	r4, r5, d0
 800e806:	ee10 0a10 	vmov	r0, s0
 800e80a:	a379      	add	r3, pc, #484	; (adr r3, 800e9f0 <__ieee754_rem_pio2+0x320>)
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	4629      	mov	r1, r5
 800e812:	f7f1 fea9 	bl	8000568 <__aeabi_dmul>
 800e816:	4b80      	ldr	r3, [pc, #512]	; (800ea18 <__ieee754_rem_pio2+0x348>)
 800e818:	2200      	movs	r2, #0
 800e81a:	f7f1 fcef 	bl	80001fc <__adddf3>
 800e81e:	f7f2 f953 	bl	8000ac8 <__aeabi_d2iz>
 800e822:	4683      	mov	fp, r0
 800e824:	f7f1 fe36 	bl	8000494 <__aeabi_i2d>
 800e828:	4602      	mov	r2, r0
 800e82a:	460b      	mov	r3, r1
 800e82c:	ec43 2b18 	vmov	d8, r2, r3
 800e830:	a367      	add	r3, pc, #412	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x300>)
 800e832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e836:	f7f1 fe97 	bl	8000568 <__aeabi_dmul>
 800e83a:	4602      	mov	r2, r0
 800e83c:	460b      	mov	r3, r1
 800e83e:	4620      	mov	r0, r4
 800e840:	4629      	mov	r1, r5
 800e842:	f7f1 fcd9 	bl	80001f8 <__aeabi_dsub>
 800e846:	a364      	add	r3, pc, #400	; (adr r3, 800e9d8 <__ieee754_rem_pio2+0x308>)
 800e848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84c:	4606      	mov	r6, r0
 800e84e:	460f      	mov	r7, r1
 800e850:	ec51 0b18 	vmov	r0, r1, d8
 800e854:	f7f1 fe88 	bl	8000568 <__aeabi_dmul>
 800e858:	f1bb 0f1f 	cmp.w	fp, #31
 800e85c:	4604      	mov	r4, r0
 800e85e:	460d      	mov	r5, r1
 800e860:	dc0d      	bgt.n	800e87e <__ieee754_rem_pio2+0x1ae>
 800e862:	4b6e      	ldr	r3, [pc, #440]	; (800ea1c <__ieee754_rem_pio2+0x34c>)
 800e864:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e86c:	4543      	cmp	r3, r8
 800e86e:	d006      	beq.n	800e87e <__ieee754_rem_pio2+0x1ae>
 800e870:	4622      	mov	r2, r4
 800e872:	462b      	mov	r3, r5
 800e874:	4630      	mov	r0, r6
 800e876:	4639      	mov	r1, r7
 800e878:	f7f1 fcbe 	bl	80001f8 <__aeabi_dsub>
 800e87c:	e00f      	b.n	800e89e <__ieee754_rem_pio2+0x1ce>
 800e87e:	462b      	mov	r3, r5
 800e880:	4622      	mov	r2, r4
 800e882:	4630      	mov	r0, r6
 800e884:	4639      	mov	r1, r7
 800e886:	f7f1 fcb7 	bl	80001f8 <__aeabi_dsub>
 800e88a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e88e:	9303      	str	r3, [sp, #12]
 800e890:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e894:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e898:	f1b8 0f10 	cmp.w	r8, #16
 800e89c:	dc02      	bgt.n	800e8a4 <__ieee754_rem_pio2+0x1d4>
 800e89e:	e9ca 0100 	strd	r0, r1, [sl]
 800e8a2:	e039      	b.n	800e918 <__ieee754_rem_pio2+0x248>
 800e8a4:	a34e      	add	r3, pc, #312	; (adr r3, 800e9e0 <__ieee754_rem_pio2+0x310>)
 800e8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8aa:	ec51 0b18 	vmov	r0, r1, d8
 800e8ae:	f7f1 fe5b 	bl	8000568 <__aeabi_dmul>
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	460d      	mov	r5, r1
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	4639      	mov	r1, r7
 800e8be:	f7f1 fc9b 	bl	80001f8 <__aeabi_dsub>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	4680      	mov	r8, r0
 800e8c8:	4689      	mov	r9, r1
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	4639      	mov	r1, r7
 800e8ce:	f7f1 fc93 	bl	80001f8 <__aeabi_dsub>
 800e8d2:	4622      	mov	r2, r4
 800e8d4:	462b      	mov	r3, r5
 800e8d6:	f7f1 fc8f 	bl	80001f8 <__aeabi_dsub>
 800e8da:	a343      	add	r3, pc, #268	; (adr r3, 800e9e8 <__ieee754_rem_pio2+0x318>)
 800e8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e0:	4604      	mov	r4, r0
 800e8e2:	460d      	mov	r5, r1
 800e8e4:	ec51 0b18 	vmov	r0, r1, d8
 800e8e8:	f7f1 fe3e 	bl	8000568 <__aeabi_dmul>
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	462b      	mov	r3, r5
 800e8f0:	f7f1 fc82 	bl	80001f8 <__aeabi_dsub>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	4604      	mov	r4, r0
 800e8fa:	460d      	mov	r5, r1
 800e8fc:	4640      	mov	r0, r8
 800e8fe:	4649      	mov	r1, r9
 800e900:	f7f1 fc7a 	bl	80001f8 <__aeabi_dsub>
 800e904:	9a03      	ldr	r2, [sp, #12]
 800e906:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	2b31      	cmp	r3, #49	; 0x31
 800e90e:	dc24      	bgt.n	800e95a <__ieee754_rem_pio2+0x28a>
 800e910:	e9ca 0100 	strd	r0, r1, [sl]
 800e914:	4646      	mov	r6, r8
 800e916:	464f      	mov	r7, r9
 800e918:	e9da 8900 	ldrd	r8, r9, [sl]
 800e91c:	4630      	mov	r0, r6
 800e91e:	4642      	mov	r2, r8
 800e920:	464b      	mov	r3, r9
 800e922:	4639      	mov	r1, r7
 800e924:	f7f1 fc68 	bl	80001f8 <__aeabi_dsub>
 800e928:	462b      	mov	r3, r5
 800e92a:	4622      	mov	r2, r4
 800e92c:	f7f1 fc64 	bl	80001f8 <__aeabi_dsub>
 800e930:	9b02      	ldr	r3, [sp, #8]
 800e932:	2b00      	cmp	r3, #0
 800e934:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e938:	f6bf af0a 	bge.w	800e750 <__ieee754_rem_pio2+0x80>
 800e93c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e940:	f8ca 3004 	str.w	r3, [sl, #4]
 800e944:	f8ca 8000 	str.w	r8, [sl]
 800e948:	f8ca 0008 	str.w	r0, [sl, #8]
 800e94c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e950:	f8ca 300c 	str.w	r3, [sl, #12]
 800e954:	f1cb 0b00 	rsb	fp, fp, #0
 800e958:	e6fa      	b.n	800e750 <__ieee754_rem_pio2+0x80>
 800e95a:	a327      	add	r3, pc, #156	; (adr r3, 800e9f8 <__ieee754_rem_pio2+0x328>)
 800e95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e960:	ec51 0b18 	vmov	r0, r1, d8
 800e964:	f7f1 fe00 	bl	8000568 <__aeabi_dmul>
 800e968:	4604      	mov	r4, r0
 800e96a:	460d      	mov	r5, r1
 800e96c:	4602      	mov	r2, r0
 800e96e:	460b      	mov	r3, r1
 800e970:	4640      	mov	r0, r8
 800e972:	4649      	mov	r1, r9
 800e974:	f7f1 fc40 	bl	80001f8 <__aeabi_dsub>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	4606      	mov	r6, r0
 800e97e:	460f      	mov	r7, r1
 800e980:	4640      	mov	r0, r8
 800e982:	4649      	mov	r1, r9
 800e984:	f7f1 fc38 	bl	80001f8 <__aeabi_dsub>
 800e988:	4622      	mov	r2, r4
 800e98a:	462b      	mov	r3, r5
 800e98c:	f7f1 fc34 	bl	80001f8 <__aeabi_dsub>
 800e990:	a31b      	add	r3, pc, #108	; (adr r3, 800ea00 <__ieee754_rem_pio2+0x330>)
 800e992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e996:	4604      	mov	r4, r0
 800e998:	460d      	mov	r5, r1
 800e99a:	ec51 0b18 	vmov	r0, r1, d8
 800e99e:	f7f1 fde3 	bl	8000568 <__aeabi_dmul>
 800e9a2:	4622      	mov	r2, r4
 800e9a4:	462b      	mov	r3, r5
 800e9a6:	f7f1 fc27 	bl	80001f8 <__aeabi_dsub>
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	460d      	mov	r5, r1
 800e9ae:	e75f      	b.n	800e870 <__ieee754_rem_pio2+0x1a0>
 800e9b0:	4b1b      	ldr	r3, [pc, #108]	; (800ea20 <__ieee754_rem_pio2+0x350>)
 800e9b2:	4598      	cmp	r8, r3
 800e9b4:	dd36      	ble.n	800ea24 <__ieee754_rem_pio2+0x354>
 800e9b6:	ee10 2a10 	vmov	r2, s0
 800e9ba:	462b      	mov	r3, r5
 800e9bc:	4620      	mov	r0, r4
 800e9be:	4629      	mov	r1, r5
 800e9c0:	f7f1 fc1a 	bl	80001f8 <__aeabi_dsub>
 800e9c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e9c8:	e9ca 0100 	strd	r0, r1, [sl]
 800e9cc:	e694      	b.n	800e6f8 <__ieee754_rem_pio2+0x28>
 800e9ce:	bf00      	nop
 800e9d0:	54400000 	.word	0x54400000
 800e9d4:	3ff921fb 	.word	0x3ff921fb
 800e9d8:	1a626331 	.word	0x1a626331
 800e9dc:	3dd0b461 	.word	0x3dd0b461
 800e9e0:	1a600000 	.word	0x1a600000
 800e9e4:	3dd0b461 	.word	0x3dd0b461
 800e9e8:	2e037073 	.word	0x2e037073
 800e9ec:	3ba3198a 	.word	0x3ba3198a
 800e9f0:	6dc9c883 	.word	0x6dc9c883
 800e9f4:	3fe45f30 	.word	0x3fe45f30
 800e9f8:	2e000000 	.word	0x2e000000
 800e9fc:	3ba3198a 	.word	0x3ba3198a
 800ea00:	252049c1 	.word	0x252049c1
 800ea04:	397b839a 	.word	0x397b839a
 800ea08:	3fe921fb 	.word	0x3fe921fb
 800ea0c:	4002d97b 	.word	0x4002d97b
 800ea10:	3ff921fb 	.word	0x3ff921fb
 800ea14:	413921fb 	.word	0x413921fb
 800ea18:	3fe00000 	.word	0x3fe00000
 800ea1c:	0800fca8 	.word	0x0800fca8
 800ea20:	7fefffff 	.word	0x7fefffff
 800ea24:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ea28:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ea2c:	ee10 0a10 	vmov	r0, s0
 800ea30:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ea34:	ee10 6a10 	vmov	r6, s0
 800ea38:	460f      	mov	r7, r1
 800ea3a:	f7f2 f845 	bl	8000ac8 <__aeabi_d2iz>
 800ea3e:	f7f1 fd29 	bl	8000494 <__aeabi_i2d>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	4630      	mov	r0, r6
 800ea48:	4639      	mov	r1, r7
 800ea4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea4e:	f7f1 fbd3 	bl	80001f8 <__aeabi_dsub>
 800ea52:	4b22      	ldr	r3, [pc, #136]	; (800eadc <__ieee754_rem_pio2+0x40c>)
 800ea54:	2200      	movs	r2, #0
 800ea56:	f7f1 fd87 	bl	8000568 <__aeabi_dmul>
 800ea5a:	460f      	mov	r7, r1
 800ea5c:	4606      	mov	r6, r0
 800ea5e:	f7f2 f833 	bl	8000ac8 <__aeabi_d2iz>
 800ea62:	f7f1 fd17 	bl	8000494 <__aeabi_i2d>
 800ea66:	4602      	mov	r2, r0
 800ea68:	460b      	mov	r3, r1
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	4639      	mov	r1, r7
 800ea6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ea72:	f7f1 fbc1 	bl	80001f8 <__aeabi_dsub>
 800ea76:	4b19      	ldr	r3, [pc, #100]	; (800eadc <__ieee754_rem_pio2+0x40c>)
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f7f1 fd75 	bl	8000568 <__aeabi_dmul>
 800ea7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea82:	ad04      	add	r5, sp, #16
 800ea84:	f04f 0803 	mov.w	r8, #3
 800ea88:	46a9      	mov	r9, r5
 800ea8a:	2600      	movs	r6, #0
 800ea8c:	2700      	movs	r7, #0
 800ea8e:	4632      	mov	r2, r6
 800ea90:	463b      	mov	r3, r7
 800ea92:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ea96:	46c3      	mov	fp, r8
 800ea98:	3d08      	subs	r5, #8
 800ea9a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ea9e:	f7f1 ffcb 	bl	8000a38 <__aeabi_dcmpeq>
 800eaa2:	2800      	cmp	r0, #0
 800eaa4:	d1f3      	bne.n	800ea8e <__ieee754_rem_pio2+0x3be>
 800eaa6:	4b0e      	ldr	r3, [pc, #56]	; (800eae0 <__ieee754_rem_pio2+0x410>)
 800eaa8:	9301      	str	r3, [sp, #4]
 800eaaa:	2302      	movs	r3, #2
 800eaac:	9300      	str	r3, [sp, #0]
 800eaae:	4622      	mov	r2, r4
 800eab0:	465b      	mov	r3, fp
 800eab2:	4651      	mov	r1, sl
 800eab4:	4648      	mov	r0, r9
 800eab6:	f000 f993 	bl	800ede0 <__kernel_rem_pio2>
 800eaba:	9b02      	ldr	r3, [sp, #8]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	4683      	mov	fp, r0
 800eac0:	f6bf ae46 	bge.w	800e750 <__ieee754_rem_pio2+0x80>
 800eac4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800eac8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eacc:	f8ca 3004 	str.w	r3, [sl, #4]
 800ead0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ead4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ead8:	e73a      	b.n	800e950 <__ieee754_rem_pio2+0x280>
 800eada:	bf00      	nop
 800eadc:	41700000 	.word	0x41700000
 800eae0:	0800fd28 	.word	0x0800fd28

0800eae4 <__ieee754_sqrt>:
 800eae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae8:	ec55 4b10 	vmov	r4, r5, d0
 800eaec:	4e56      	ldr	r6, [pc, #344]	; (800ec48 <__ieee754_sqrt+0x164>)
 800eaee:	43ae      	bics	r6, r5
 800eaf0:	ee10 0a10 	vmov	r0, s0
 800eaf4:	ee10 3a10 	vmov	r3, s0
 800eaf8:	4629      	mov	r1, r5
 800eafa:	462a      	mov	r2, r5
 800eafc:	d110      	bne.n	800eb20 <__ieee754_sqrt+0x3c>
 800eafe:	ee10 2a10 	vmov	r2, s0
 800eb02:	462b      	mov	r3, r5
 800eb04:	f7f1 fd30 	bl	8000568 <__aeabi_dmul>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	4629      	mov	r1, r5
 800eb10:	f7f1 fb74 	bl	80001fc <__adddf3>
 800eb14:	4604      	mov	r4, r0
 800eb16:	460d      	mov	r5, r1
 800eb18:	ec45 4b10 	vmov	d0, r4, r5
 800eb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb20:	2d00      	cmp	r5, #0
 800eb22:	dc10      	bgt.n	800eb46 <__ieee754_sqrt+0x62>
 800eb24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eb28:	4330      	orrs	r0, r6
 800eb2a:	d0f5      	beq.n	800eb18 <__ieee754_sqrt+0x34>
 800eb2c:	b15d      	cbz	r5, 800eb46 <__ieee754_sqrt+0x62>
 800eb2e:	ee10 2a10 	vmov	r2, s0
 800eb32:	462b      	mov	r3, r5
 800eb34:	ee10 0a10 	vmov	r0, s0
 800eb38:	f7f1 fb5e 	bl	80001f8 <__aeabi_dsub>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	460b      	mov	r3, r1
 800eb40:	f7f1 fe3c 	bl	80007bc <__aeabi_ddiv>
 800eb44:	e7e6      	b.n	800eb14 <__ieee754_sqrt+0x30>
 800eb46:	1509      	asrs	r1, r1, #20
 800eb48:	d076      	beq.n	800ec38 <__ieee754_sqrt+0x154>
 800eb4a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800eb4e:	07ce      	lsls	r6, r1, #31
 800eb50:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800eb54:	bf5e      	ittt	pl
 800eb56:	0fda      	lsrpl	r2, r3, #31
 800eb58:	005b      	lslpl	r3, r3, #1
 800eb5a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800eb5e:	0fda      	lsrs	r2, r3, #31
 800eb60:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800eb64:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800eb68:	2000      	movs	r0, #0
 800eb6a:	106d      	asrs	r5, r5, #1
 800eb6c:	005b      	lsls	r3, r3, #1
 800eb6e:	f04f 0e16 	mov.w	lr, #22
 800eb72:	4684      	mov	ip, r0
 800eb74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb78:	eb0c 0401 	add.w	r4, ip, r1
 800eb7c:	4294      	cmp	r4, r2
 800eb7e:	bfde      	ittt	le
 800eb80:	1b12      	suble	r2, r2, r4
 800eb82:	eb04 0c01 	addle.w	ip, r4, r1
 800eb86:	1840      	addle	r0, r0, r1
 800eb88:	0052      	lsls	r2, r2, #1
 800eb8a:	f1be 0e01 	subs.w	lr, lr, #1
 800eb8e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800eb92:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800eb96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eb9a:	d1ed      	bne.n	800eb78 <__ieee754_sqrt+0x94>
 800eb9c:	4671      	mov	r1, lr
 800eb9e:	2720      	movs	r7, #32
 800eba0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800eba4:	4562      	cmp	r2, ip
 800eba6:	eb04 060e 	add.w	r6, r4, lr
 800ebaa:	dc02      	bgt.n	800ebb2 <__ieee754_sqrt+0xce>
 800ebac:	d113      	bne.n	800ebd6 <__ieee754_sqrt+0xf2>
 800ebae:	429e      	cmp	r6, r3
 800ebb0:	d811      	bhi.n	800ebd6 <__ieee754_sqrt+0xf2>
 800ebb2:	2e00      	cmp	r6, #0
 800ebb4:	eb06 0e04 	add.w	lr, r6, r4
 800ebb8:	da43      	bge.n	800ec42 <__ieee754_sqrt+0x15e>
 800ebba:	f1be 0f00 	cmp.w	lr, #0
 800ebbe:	db40      	blt.n	800ec42 <__ieee754_sqrt+0x15e>
 800ebc0:	f10c 0801 	add.w	r8, ip, #1
 800ebc4:	eba2 020c 	sub.w	r2, r2, ip
 800ebc8:	429e      	cmp	r6, r3
 800ebca:	bf88      	it	hi
 800ebcc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800ebd0:	1b9b      	subs	r3, r3, r6
 800ebd2:	4421      	add	r1, r4
 800ebd4:	46c4      	mov	ip, r8
 800ebd6:	0052      	lsls	r2, r2, #1
 800ebd8:	3f01      	subs	r7, #1
 800ebda:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ebde:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ebe2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ebe6:	d1dd      	bne.n	800eba4 <__ieee754_sqrt+0xc0>
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	d006      	beq.n	800ebfa <__ieee754_sqrt+0x116>
 800ebec:	1c4c      	adds	r4, r1, #1
 800ebee:	bf13      	iteet	ne
 800ebf0:	3101      	addne	r1, #1
 800ebf2:	3001      	addeq	r0, #1
 800ebf4:	4639      	moveq	r1, r7
 800ebf6:	f021 0101 	bicne.w	r1, r1, #1
 800ebfa:	1043      	asrs	r3, r0, #1
 800ebfc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ec00:	0849      	lsrs	r1, r1, #1
 800ec02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ec06:	07c2      	lsls	r2, r0, #31
 800ec08:	bf48      	it	mi
 800ec0a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ec0e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ec12:	460c      	mov	r4, r1
 800ec14:	463d      	mov	r5, r7
 800ec16:	e77f      	b.n	800eb18 <__ieee754_sqrt+0x34>
 800ec18:	0ada      	lsrs	r2, r3, #11
 800ec1a:	3815      	subs	r0, #21
 800ec1c:	055b      	lsls	r3, r3, #21
 800ec1e:	2a00      	cmp	r2, #0
 800ec20:	d0fa      	beq.n	800ec18 <__ieee754_sqrt+0x134>
 800ec22:	02d7      	lsls	r7, r2, #11
 800ec24:	d50a      	bpl.n	800ec3c <__ieee754_sqrt+0x158>
 800ec26:	f1c1 0420 	rsb	r4, r1, #32
 800ec2a:	fa23 f404 	lsr.w	r4, r3, r4
 800ec2e:	1e4d      	subs	r5, r1, #1
 800ec30:	408b      	lsls	r3, r1
 800ec32:	4322      	orrs	r2, r4
 800ec34:	1b41      	subs	r1, r0, r5
 800ec36:	e788      	b.n	800eb4a <__ieee754_sqrt+0x66>
 800ec38:	4608      	mov	r0, r1
 800ec3a:	e7f0      	b.n	800ec1e <__ieee754_sqrt+0x13a>
 800ec3c:	0052      	lsls	r2, r2, #1
 800ec3e:	3101      	adds	r1, #1
 800ec40:	e7ef      	b.n	800ec22 <__ieee754_sqrt+0x13e>
 800ec42:	46e0      	mov	r8, ip
 800ec44:	e7be      	b.n	800ebc4 <__ieee754_sqrt+0xe0>
 800ec46:	bf00      	nop
 800ec48:	7ff00000 	.word	0x7ff00000
 800ec4c:	00000000 	.word	0x00000000

0800ec50 <__kernel_cos>:
 800ec50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec54:	ec57 6b10 	vmov	r6, r7, d0
 800ec58:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ec5c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ec60:	ed8d 1b00 	vstr	d1, [sp]
 800ec64:	da07      	bge.n	800ec76 <__kernel_cos+0x26>
 800ec66:	ee10 0a10 	vmov	r0, s0
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 ff2c 	bl	8000ac8 <__aeabi_d2iz>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	f000 8088 	beq.w	800ed86 <__kernel_cos+0x136>
 800ec76:	4632      	mov	r2, r6
 800ec78:	463b      	mov	r3, r7
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	4639      	mov	r1, r7
 800ec7e:	f7f1 fc73 	bl	8000568 <__aeabi_dmul>
 800ec82:	4b51      	ldr	r3, [pc, #324]	; (800edc8 <__kernel_cos+0x178>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	4604      	mov	r4, r0
 800ec88:	460d      	mov	r5, r1
 800ec8a:	f7f1 fc6d 	bl	8000568 <__aeabi_dmul>
 800ec8e:	a340      	add	r3, pc, #256	; (adr r3, 800ed90 <__kernel_cos+0x140>)
 800ec90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec94:	4682      	mov	sl, r0
 800ec96:	468b      	mov	fp, r1
 800ec98:	4620      	mov	r0, r4
 800ec9a:	4629      	mov	r1, r5
 800ec9c:	f7f1 fc64 	bl	8000568 <__aeabi_dmul>
 800eca0:	a33d      	add	r3, pc, #244	; (adr r3, 800ed98 <__kernel_cos+0x148>)
 800eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca6:	f7f1 faa9 	bl	80001fc <__adddf3>
 800ecaa:	4622      	mov	r2, r4
 800ecac:	462b      	mov	r3, r5
 800ecae:	f7f1 fc5b 	bl	8000568 <__aeabi_dmul>
 800ecb2:	a33b      	add	r3, pc, #236	; (adr r3, 800eda0 <__kernel_cos+0x150>)
 800ecb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb8:	f7f1 fa9e 	bl	80001f8 <__aeabi_dsub>
 800ecbc:	4622      	mov	r2, r4
 800ecbe:	462b      	mov	r3, r5
 800ecc0:	f7f1 fc52 	bl	8000568 <__aeabi_dmul>
 800ecc4:	a338      	add	r3, pc, #224	; (adr r3, 800eda8 <__kernel_cos+0x158>)
 800ecc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecca:	f7f1 fa97 	bl	80001fc <__adddf3>
 800ecce:	4622      	mov	r2, r4
 800ecd0:	462b      	mov	r3, r5
 800ecd2:	f7f1 fc49 	bl	8000568 <__aeabi_dmul>
 800ecd6:	a336      	add	r3, pc, #216	; (adr r3, 800edb0 <__kernel_cos+0x160>)
 800ecd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecdc:	f7f1 fa8c 	bl	80001f8 <__aeabi_dsub>
 800ece0:	4622      	mov	r2, r4
 800ece2:	462b      	mov	r3, r5
 800ece4:	f7f1 fc40 	bl	8000568 <__aeabi_dmul>
 800ece8:	a333      	add	r3, pc, #204	; (adr r3, 800edb8 <__kernel_cos+0x168>)
 800ecea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecee:	f7f1 fa85 	bl	80001fc <__adddf3>
 800ecf2:	4622      	mov	r2, r4
 800ecf4:	462b      	mov	r3, r5
 800ecf6:	f7f1 fc37 	bl	8000568 <__aeabi_dmul>
 800ecfa:	4622      	mov	r2, r4
 800ecfc:	462b      	mov	r3, r5
 800ecfe:	f7f1 fc33 	bl	8000568 <__aeabi_dmul>
 800ed02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed06:	4604      	mov	r4, r0
 800ed08:	460d      	mov	r5, r1
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	4639      	mov	r1, r7
 800ed0e:	f7f1 fc2b 	bl	8000568 <__aeabi_dmul>
 800ed12:	460b      	mov	r3, r1
 800ed14:	4602      	mov	r2, r0
 800ed16:	4629      	mov	r1, r5
 800ed18:	4620      	mov	r0, r4
 800ed1a:	f7f1 fa6d 	bl	80001f8 <__aeabi_dsub>
 800ed1e:	4b2b      	ldr	r3, [pc, #172]	; (800edcc <__kernel_cos+0x17c>)
 800ed20:	4598      	cmp	r8, r3
 800ed22:	4606      	mov	r6, r0
 800ed24:	460f      	mov	r7, r1
 800ed26:	dc10      	bgt.n	800ed4a <__kernel_cos+0xfa>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4650      	mov	r0, sl
 800ed2e:	4659      	mov	r1, fp
 800ed30:	f7f1 fa62 	bl	80001f8 <__aeabi_dsub>
 800ed34:	460b      	mov	r3, r1
 800ed36:	4926      	ldr	r1, [pc, #152]	; (800edd0 <__kernel_cos+0x180>)
 800ed38:	4602      	mov	r2, r0
 800ed3a:	2000      	movs	r0, #0
 800ed3c:	f7f1 fa5c 	bl	80001f8 <__aeabi_dsub>
 800ed40:	ec41 0b10 	vmov	d0, r0, r1
 800ed44:	b003      	add	sp, #12
 800ed46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4a:	4b22      	ldr	r3, [pc, #136]	; (800edd4 <__kernel_cos+0x184>)
 800ed4c:	4920      	ldr	r1, [pc, #128]	; (800edd0 <__kernel_cos+0x180>)
 800ed4e:	4598      	cmp	r8, r3
 800ed50:	bfcc      	ite	gt
 800ed52:	4d21      	ldrgt	r5, [pc, #132]	; (800edd8 <__kernel_cos+0x188>)
 800ed54:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ed58:	2400      	movs	r4, #0
 800ed5a:	4622      	mov	r2, r4
 800ed5c:	462b      	mov	r3, r5
 800ed5e:	2000      	movs	r0, #0
 800ed60:	f7f1 fa4a 	bl	80001f8 <__aeabi_dsub>
 800ed64:	4622      	mov	r2, r4
 800ed66:	4680      	mov	r8, r0
 800ed68:	4689      	mov	r9, r1
 800ed6a:	462b      	mov	r3, r5
 800ed6c:	4650      	mov	r0, sl
 800ed6e:	4659      	mov	r1, fp
 800ed70:	f7f1 fa42 	bl	80001f8 <__aeabi_dsub>
 800ed74:	4632      	mov	r2, r6
 800ed76:	463b      	mov	r3, r7
 800ed78:	f7f1 fa3e 	bl	80001f8 <__aeabi_dsub>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4640      	mov	r0, r8
 800ed82:	4649      	mov	r1, r9
 800ed84:	e7da      	b.n	800ed3c <__kernel_cos+0xec>
 800ed86:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800edc0 <__kernel_cos+0x170>
 800ed8a:	e7db      	b.n	800ed44 <__kernel_cos+0xf4>
 800ed8c:	f3af 8000 	nop.w
 800ed90:	be8838d4 	.word	0xbe8838d4
 800ed94:	bda8fae9 	.word	0xbda8fae9
 800ed98:	bdb4b1c4 	.word	0xbdb4b1c4
 800ed9c:	3e21ee9e 	.word	0x3e21ee9e
 800eda0:	809c52ad 	.word	0x809c52ad
 800eda4:	3e927e4f 	.word	0x3e927e4f
 800eda8:	19cb1590 	.word	0x19cb1590
 800edac:	3efa01a0 	.word	0x3efa01a0
 800edb0:	16c15177 	.word	0x16c15177
 800edb4:	3f56c16c 	.word	0x3f56c16c
 800edb8:	5555554c 	.word	0x5555554c
 800edbc:	3fa55555 	.word	0x3fa55555
 800edc0:	00000000 	.word	0x00000000
 800edc4:	3ff00000 	.word	0x3ff00000
 800edc8:	3fe00000 	.word	0x3fe00000
 800edcc:	3fd33332 	.word	0x3fd33332
 800edd0:	3ff00000 	.word	0x3ff00000
 800edd4:	3fe90000 	.word	0x3fe90000
 800edd8:	3fd20000 	.word	0x3fd20000
 800eddc:	00000000 	.word	0x00000000

0800ede0 <__kernel_rem_pio2>:
 800ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede4:	ed2d 8b02 	vpush	{d8}
 800ede8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800edec:	f112 0f14 	cmn.w	r2, #20
 800edf0:	9308      	str	r3, [sp, #32]
 800edf2:	9101      	str	r1, [sp, #4]
 800edf4:	4bc6      	ldr	r3, [pc, #792]	; (800f110 <__kernel_rem_pio2+0x330>)
 800edf6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800edf8:	9009      	str	r0, [sp, #36]	; 0x24
 800edfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800edfe:	9304      	str	r3, [sp, #16]
 800ee00:	9b08      	ldr	r3, [sp, #32]
 800ee02:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ee06:	bfa8      	it	ge
 800ee08:	1ed4      	subge	r4, r2, #3
 800ee0a:	9306      	str	r3, [sp, #24]
 800ee0c:	bfb2      	itee	lt
 800ee0e:	2400      	movlt	r4, #0
 800ee10:	2318      	movge	r3, #24
 800ee12:	fb94 f4f3 	sdivge	r4, r4, r3
 800ee16:	f06f 0317 	mvn.w	r3, #23
 800ee1a:	fb04 3303 	mla	r3, r4, r3, r3
 800ee1e:	eb03 0a02 	add.w	sl, r3, r2
 800ee22:	9b04      	ldr	r3, [sp, #16]
 800ee24:	9a06      	ldr	r2, [sp, #24]
 800ee26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f100 <__kernel_rem_pio2+0x320>
 800ee2a:	eb03 0802 	add.w	r8, r3, r2
 800ee2e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ee30:	1aa7      	subs	r7, r4, r2
 800ee32:	ae20      	add	r6, sp, #128	; 0x80
 800ee34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ee38:	2500      	movs	r5, #0
 800ee3a:	4545      	cmp	r5, r8
 800ee3c:	dd18      	ble.n	800ee70 <__kernel_rem_pio2+0x90>
 800ee3e:	9b08      	ldr	r3, [sp, #32]
 800ee40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ee44:	aa20      	add	r2, sp, #128	; 0x80
 800ee46:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f100 <__kernel_rem_pio2+0x320>
 800ee4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ee4e:	f1c3 0301 	rsb	r3, r3, #1
 800ee52:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ee56:	9307      	str	r3, [sp, #28]
 800ee58:	9b07      	ldr	r3, [sp, #28]
 800ee5a:	9a04      	ldr	r2, [sp, #16]
 800ee5c:	4443      	add	r3, r8
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	db2f      	blt.n	800eec2 <__kernel_rem_pio2+0xe2>
 800ee62:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ee66:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ee6a:	462f      	mov	r7, r5
 800ee6c:	2600      	movs	r6, #0
 800ee6e:	e01b      	b.n	800eea8 <__kernel_rem_pio2+0xc8>
 800ee70:	42ef      	cmn	r7, r5
 800ee72:	d407      	bmi.n	800ee84 <__kernel_rem_pio2+0xa4>
 800ee74:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ee78:	f7f1 fb0c 	bl	8000494 <__aeabi_i2d>
 800ee7c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ee80:	3501      	adds	r5, #1
 800ee82:	e7da      	b.n	800ee3a <__kernel_rem_pio2+0x5a>
 800ee84:	ec51 0b18 	vmov	r0, r1, d8
 800ee88:	e7f8      	b.n	800ee7c <__kernel_rem_pio2+0x9c>
 800ee8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee8e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ee92:	f7f1 fb69 	bl	8000568 <__aeabi_dmul>
 800ee96:	4602      	mov	r2, r0
 800ee98:	460b      	mov	r3, r1
 800ee9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee9e:	f7f1 f9ad 	bl	80001fc <__adddf3>
 800eea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eea6:	3601      	adds	r6, #1
 800eea8:	9b06      	ldr	r3, [sp, #24]
 800eeaa:	429e      	cmp	r6, r3
 800eeac:	f1a7 0708 	sub.w	r7, r7, #8
 800eeb0:	ddeb      	ble.n	800ee8a <__kernel_rem_pio2+0xaa>
 800eeb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eeb6:	3508      	adds	r5, #8
 800eeb8:	ecab 7b02 	vstmia	fp!, {d7}
 800eebc:	f108 0801 	add.w	r8, r8, #1
 800eec0:	e7ca      	b.n	800ee58 <__kernel_rem_pio2+0x78>
 800eec2:	9b04      	ldr	r3, [sp, #16]
 800eec4:	aa0c      	add	r2, sp, #48	; 0x30
 800eec6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eeca:	930b      	str	r3, [sp, #44]	; 0x2c
 800eecc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800eece:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800eed2:	9c04      	ldr	r4, [sp, #16]
 800eed4:	930a      	str	r3, [sp, #40]	; 0x28
 800eed6:	ab98      	add	r3, sp, #608	; 0x260
 800eed8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eedc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800eee0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800eee4:	f8cd b008 	str.w	fp, [sp, #8]
 800eee8:	4625      	mov	r5, r4
 800eeea:	2d00      	cmp	r5, #0
 800eeec:	dc78      	bgt.n	800efe0 <__kernel_rem_pio2+0x200>
 800eeee:	ec47 6b10 	vmov	d0, r6, r7
 800eef2:	4650      	mov	r0, sl
 800eef4:	f000 fc94 	bl	800f820 <scalbn>
 800eef8:	ec57 6b10 	vmov	r6, r7, d0
 800eefc:	2200      	movs	r2, #0
 800eefe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ef02:	ee10 0a10 	vmov	r0, s0
 800ef06:	4639      	mov	r1, r7
 800ef08:	f7f1 fb2e 	bl	8000568 <__aeabi_dmul>
 800ef0c:	ec41 0b10 	vmov	d0, r0, r1
 800ef10:	f000 fb72 	bl	800f5f8 <floor>
 800ef14:	4b7f      	ldr	r3, [pc, #508]	; (800f114 <__kernel_rem_pio2+0x334>)
 800ef16:	ec51 0b10 	vmov	r0, r1, d0
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	f7f1 fb24 	bl	8000568 <__aeabi_dmul>
 800ef20:	4602      	mov	r2, r0
 800ef22:	460b      	mov	r3, r1
 800ef24:	4630      	mov	r0, r6
 800ef26:	4639      	mov	r1, r7
 800ef28:	f7f1 f966 	bl	80001f8 <__aeabi_dsub>
 800ef2c:	460f      	mov	r7, r1
 800ef2e:	4606      	mov	r6, r0
 800ef30:	f7f1 fdca 	bl	8000ac8 <__aeabi_d2iz>
 800ef34:	9007      	str	r0, [sp, #28]
 800ef36:	f7f1 faad 	bl	8000494 <__aeabi_i2d>
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	4630      	mov	r0, r6
 800ef40:	4639      	mov	r1, r7
 800ef42:	f7f1 f959 	bl	80001f8 <__aeabi_dsub>
 800ef46:	f1ba 0f00 	cmp.w	sl, #0
 800ef4a:	4606      	mov	r6, r0
 800ef4c:	460f      	mov	r7, r1
 800ef4e:	dd70      	ble.n	800f032 <__kernel_rem_pio2+0x252>
 800ef50:	1e62      	subs	r2, r4, #1
 800ef52:	ab0c      	add	r3, sp, #48	; 0x30
 800ef54:	9d07      	ldr	r5, [sp, #28]
 800ef56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ef5a:	f1ca 0118 	rsb	r1, sl, #24
 800ef5e:	fa40 f301 	asr.w	r3, r0, r1
 800ef62:	441d      	add	r5, r3
 800ef64:	408b      	lsls	r3, r1
 800ef66:	1ac0      	subs	r0, r0, r3
 800ef68:	ab0c      	add	r3, sp, #48	; 0x30
 800ef6a:	9507      	str	r5, [sp, #28]
 800ef6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ef70:	f1ca 0317 	rsb	r3, sl, #23
 800ef74:	fa40 f303 	asr.w	r3, r0, r3
 800ef78:	9302      	str	r3, [sp, #8]
 800ef7a:	9b02      	ldr	r3, [sp, #8]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	dd66      	ble.n	800f04e <__kernel_rem_pio2+0x26e>
 800ef80:	9b07      	ldr	r3, [sp, #28]
 800ef82:	2200      	movs	r2, #0
 800ef84:	3301      	adds	r3, #1
 800ef86:	9307      	str	r3, [sp, #28]
 800ef88:	4615      	mov	r5, r2
 800ef8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ef8e:	4294      	cmp	r4, r2
 800ef90:	f300 8099 	bgt.w	800f0c6 <__kernel_rem_pio2+0x2e6>
 800ef94:	f1ba 0f00 	cmp.w	sl, #0
 800ef98:	dd07      	ble.n	800efaa <__kernel_rem_pio2+0x1ca>
 800ef9a:	f1ba 0f01 	cmp.w	sl, #1
 800ef9e:	f000 80a5 	beq.w	800f0ec <__kernel_rem_pio2+0x30c>
 800efa2:	f1ba 0f02 	cmp.w	sl, #2
 800efa6:	f000 80c1 	beq.w	800f12c <__kernel_rem_pio2+0x34c>
 800efaa:	9b02      	ldr	r3, [sp, #8]
 800efac:	2b02      	cmp	r3, #2
 800efae:	d14e      	bne.n	800f04e <__kernel_rem_pio2+0x26e>
 800efb0:	4632      	mov	r2, r6
 800efb2:	463b      	mov	r3, r7
 800efb4:	4958      	ldr	r1, [pc, #352]	; (800f118 <__kernel_rem_pio2+0x338>)
 800efb6:	2000      	movs	r0, #0
 800efb8:	f7f1 f91e 	bl	80001f8 <__aeabi_dsub>
 800efbc:	4606      	mov	r6, r0
 800efbe:	460f      	mov	r7, r1
 800efc0:	2d00      	cmp	r5, #0
 800efc2:	d044      	beq.n	800f04e <__kernel_rem_pio2+0x26e>
 800efc4:	4650      	mov	r0, sl
 800efc6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f108 <__kernel_rem_pio2+0x328>
 800efca:	f000 fc29 	bl	800f820 <scalbn>
 800efce:	4630      	mov	r0, r6
 800efd0:	4639      	mov	r1, r7
 800efd2:	ec53 2b10 	vmov	r2, r3, d0
 800efd6:	f7f1 f90f 	bl	80001f8 <__aeabi_dsub>
 800efda:	4606      	mov	r6, r0
 800efdc:	460f      	mov	r7, r1
 800efde:	e036      	b.n	800f04e <__kernel_rem_pio2+0x26e>
 800efe0:	4b4e      	ldr	r3, [pc, #312]	; (800f11c <__kernel_rem_pio2+0x33c>)
 800efe2:	2200      	movs	r2, #0
 800efe4:	4630      	mov	r0, r6
 800efe6:	4639      	mov	r1, r7
 800efe8:	f7f1 fabe 	bl	8000568 <__aeabi_dmul>
 800efec:	f7f1 fd6c 	bl	8000ac8 <__aeabi_d2iz>
 800eff0:	f7f1 fa50 	bl	8000494 <__aeabi_i2d>
 800eff4:	4b4a      	ldr	r3, [pc, #296]	; (800f120 <__kernel_rem_pio2+0x340>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	4680      	mov	r8, r0
 800effa:	4689      	mov	r9, r1
 800effc:	f7f1 fab4 	bl	8000568 <__aeabi_dmul>
 800f000:	4602      	mov	r2, r0
 800f002:	460b      	mov	r3, r1
 800f004:	4630      	mov	r0, r6
 800f006:	4639      	mov	r1, r7
 800f008:	f7f1 f8f6 	bl	80001f8 <__aeabi_dsub>
 800f00c:	f7f1 fd5c 	bl	8000ac8 <__aeabi_d2iz>
 800f010:	9b02      	ldr	r3, [sp, #8]
 800f012:	f843 0b04 	str.w	r0, [r3], #4
 800f016:	3d01      	subs	r5, #1
 800f018:	9302      	str	r3, [sp, #8]
 800f01a:	ab70      	add	r3, sp, #448	; 0x1c0
 800f01c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f024:	4640      	mov	r0, r8
 800f026:	4649      	mov	r1, r9
 800f028:	f7f1 f8e8 	bl	80001fc <__adddf3>
 800f02c:	4606      	mov	r6, r0
 800f02e:	460f      	mov	r7, r1
 800f030:	e75b      	b.n	800eeea <__kernel_rem_pio2+0x10a>
 800f032:	d105      	bne.n	800f040 <__kernel_rem_pio2+0x260>
 800f034:	1e63      	subs	r3, r4, #1
 800f036:	aa0c      	add	r2, sp, #48	; 0x30
 800f038:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f03c:	15c3      	asrs	r3, r0, #23
 800f03e:	e79b      	b.n	800ef78 <__kernel_rem_pio2+0x198>
 800f040:	4b38      	ldr	r3, [pc, #224]	; (800f124 <__kernel_rem_pio2+0x344>)
 800f042:	2200      	movs	r2, #0
 800f044:	f7f1 fd16 	bl	8000a74 <__aeabi_dcmpge>
 800f048:	2800      	cmp	r0, #0
 800f04a:	d139      	bne.n	800f0c0 <__kernel_rem_pio2+0x2e0>
 800f04c:	9002      	str	r0, [sp, #8]
 800f04e:	2200      	movs	r2, #0
 800f050:	2300      	movs	r3, #0
 800f052:	4630      	mov	r0, r6
 800f054:	4639      	mov	r1, r7
 800f056:	f7f1 fcef 	bl	8000a38 <__aeabi_dcmpeq>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	f000 80b4 	beq.w	800f1c8 <__kernel_rem_pio2+0x3e8>
 800f060:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800f064:	465b      	mov	r3, fp
 800f066:	2200      	movs	r2, #0
 800f068:	9904      	ldr	r1, [sp, #16]
 800f06a:	428b      	cmp	r3, r1
 800f06c:	da65      	bge.n	800f13a <__kernel_rem_pio2+0x35a>
 800f06e:	2a00      	cmp	r2, #0
 800f070:	d07b      	beq.n	800f16a <__kernel_rem_pio2+0x38a>
 800f072:	ab0c      	add	r3, sp, #48	; 0x30
 800f074:	f1aa 0a18 	sub.w	sl, sl, #24
 800f078:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f000 80a0 	beq.w	800f1c2 <__kernel_rem_pio2+0x3e2>
 800f082:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f108 <__kernel_rem_pio2+0x328>
 800f086:	4650      	mov	r0, sl
 800f088:	f000 fbca 	bl	800f820 <scalbn>
 800f08c:	4f23      	ldr	r7, [pc, #140]	; (800f11c <__kernel_rem_pio2+0x33c>)
 800f08e:	ec55 4b10 	vmov	r4, r5, d0
 800f092:	46d8      	mov	r8, fp
 800f094:	2600      	movs	r6, #0
 800f096:	f1b8 0f00 	cmp.w	r8, #0
 800f09a:	f280 80cf 	bge.w	800f23c <__kernel_rem_pio2+0x45c>
 800f09e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f100 <__kernel_rem_pio2+0x320>
 800f0a2:	465f      	mov	r7, fp
 800f0a4:	f04f 0800 	mov.w	r8, #0
 800f0a8:	2f00      	cmp	r7, #0
 800f0aa:	f2c0 80fd 	blt.w	800f2a8 <__kernel_rem_pio2+0x4c8>
 800f0ae:	ab70      	add	r3, sp, #448	; 0x1c0
 800f0b0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f128 <__kernel_rem_pio2+0x348>
 800f0b4:	ec55 4b18 	vmov	r4, r5, d8
 800f0b8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f0bc:	2600      	movs	r6, #0
 800f0be:	e0e5      	b.n	800f28c <__kernel_rem_pio2+0x4ac>
 800f0c0:	2302      	movs	r3, #2
 800f0c2:	9302      	str	r3, [sp, #8]
 800f0c4:	e75c      	b.n	800ef80 <__kernel_rem_pio2+0x1a0>
 800f0c6:	f8db 3000 	ldr.w	r3, [fp]
 800f0ca:	b955      	cbnz	r5, 800f0e2 <__kernel_rem_pio2+0x302>
 800f0cc:	b123      	cbz	r3, 800f0d8 <__kernel_rem_pio2+0x2f8>
 800f0ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f0d2:	f8cb 3000 	str.w	r3, [fp]
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	3201      	adds	r2, #1
 800f0da:	f10b 0b04 	add.w	fp, fp, #4
 800f0de:	461d      	mov	r5, r3
 800f0e0:	e755      	b.n	800ef8e <__kernel_rem_pio2+0x1ae>
 800f0e2:	1acb      	subs	r3, r1, r3
 800f0e4:	f8cb 3000 	str.w	r3, [fp]
 800f0e8:	462b      	mov	r3, r5
 800f0ea:	e7f5      	b.n	800f0d8 <__kernel_rem_pio2+0x2f8>
 800f0ec:	1e62      	subs	r2, r4, #1
 800f0ee:	ab0c      	add	r3, sp, #48	; 0x30
 800f0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f0f8:	a90c      	add	r1, sp, #48	; 0x30
 800f0fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f0fe:	e754      	b.n	800efaa <__kernel_rem_pio2+0x1ca>
	...
 800f10c:	3ff00000 	.word	0x3ff00000
 800f110:	0800fe70 	.word	0x0800fe70
 800f114:	40200000 	.word	0x40200000
 800f118:	3ff00000 	.word	0x3ff00000
 800f11c:	3e700000 	.word	0x3e700000
 800f120:	41700000 	.word	0x41700000
 800f124:	3fe00000 	.word	0x3fe00000
 800f128:	0800fe30 	.word	0x0800fe30
 800f12c:	1e62      	subs	r2, r4, #1
 800f12e:	ab0c      	add	r3, sp, #48	; 0x30
 800f130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f134:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f138:	e7de      	b.n	800f0f8 <__kernel_rem_pio2+0x318>
 800f13a:	a90c      	add	r1, sp, #48	; 0x30
 800f13c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f140:	3b01      	subs	r3, #1
 800f142:	430a      	orrs	r2, r1
 800f144:	e790      	b.n	800f068 <__kernel_rem_pio2+0x288>
 800f146:	3301      	adds	r3, #1
 800f148:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f14c:	2900      	cmp	r1, #0
 800f14e:	d0fa      	beq.n	800f146 <__kernel_rem_pio2+0x366>
 800f150:	9a08      	ldr	r2, [sp, #32]
 800f152:	18e3      	adds	r3, r4, r3
 800f154:	18a6      	adds	r6, r4, r2
 800f156:	aa20      	add	r2, sp, #128	; 0x80
 800f158:	1c65      	adds	r5, r4, #1
 800f15a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f15e:	9302      	str	r3, [sp, #8]
 800f160:	9b02      	ldr	r3, [sp, #8]
 800f162:	42ab      	cmp	r3, r5
 800f164:	da04      	bge.n	800f170 <__kernel_rem_pio2+0x390>
 800f166:	461c      	mov	r4, r3
 800f168:	e6b5      	b.n	800eed6 <__kernel_rem_pio2+0xf6>
 800f16a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f16c:	2301      	movs	r3, #1
 800f16e:	e7eb      	b.n	800f148 <__kernel_rem_pio2+0x368>
 800f170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f176:	f7f1 f98d 	bl	8000494 <__aeabi_i2d>
 800f17a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f180:	46b3      	mov	fp, r6
 800f182:	461c      	mov	r4, r3
 800f184:	2700      	movs	r7, #0
 800f186:	f04f 0800 	mov.w	r8, #0
 800f18a:	f04f 0900 	mov.w	r9, #0
 800f18e:	9b06      	ldr	r3, [sp, #24]
 800f190:	429f      	cmp	r7, r3
 800f192:	dd06      	ble.n	800f1a2 <__kernel_rem_pio2+0x3c2>
 800f194:	ab70      	add	r3, sp, #448	; 0x1c0
 800f196:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f19a:	e9c3 8900 	strd	r8, r9, [r3]
 800f19e:	3501      	adds	r5, #1
 800f1a0:	e7de      	b.n	800f160 <__kernel_rem_pio2+0x380>
 800f1a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f1a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f1aa:	f7f1 f9dd 	bl	8000568 <__aeabi_dmul>
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	4640      	mov	r0, r8
 800f1b4:	4649      	mov	r1, r9
 800f1b6:	f7f1 f821 	bl	80001fc <__adddf3>
 800f1ba:	3701      	adds	r7, #1
 800f1bc:	4680      	mov	r8, r0
 800f1be:	4689      	mov	r9, r1
 800f1c0:	e7e5      	b.n	800f18e <__kernel_rem_pio2+0x3ae>
 800f1c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f1c6:	e754      	b.n	800f072 <__kernel_rem_pio2+0x292>
 800f1c8:	ec47 6b10 	vmov	d0, r6, r7
 800f1cc:	f1ca 0000 	rsb	r0, sl, #0
 800f1d0:	f000 fb26 	bl	800f820 <scalbn>
 800f1d4:	ec57 6b10 	vmov	r6, r7, d0
 800f1d8:	4b9f      	ldr	r3, [pc, #636]	; (800f458 <__kernel_rem_pio2+0x678>)
 800f1da:	ee10 0a10 	vmov	r0, s0
 800f1de:	2200      	movs	r2, #0
 800f1e0:	4639      	mov	r1, r7
 800f1e2:	f7f1 fc47 	bl	8000a74 <__aeabi_dcmpge>
 800f1e6:	b300      	cbz	r0, 800f22a <__kernel_rem_pio2+0x44a>
 800f1e8:	4b9c      	ldr	r3, [pc, #624]	; (800f45c <__kernel_rem_pio2+0x67c>)
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	4639      	mov	r1, r7
 800f1f0:	f7f1 f9ba 	bl	8000568 <__aeabi_dmul>
 800f1f4:	f7f1 fc68 	bl	8000ac8 <__aeabi_d2iz>
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	f7f1 f94b 	bl	8000494 <__aeabi_i2d>
 800f1fe:	4b96      	ldr	r3, [pc, #600]	; (800f458 <__kernel_rem_pio2+0x678>)
 800f200:	2200      	movs	r2, #0
 800f202:	f7f1 f9b1 	bl	8000568 <__aeabi_dmul>
 800f206:	460b      	mov	r3, r1
 800f208:	4602      	mov	r2, r0
 800f20a:	4639      	mov	r1, r7
 800f20c:	4630      	mov	r0, r6
 800f20e:	f7f0 fff3 	bl	80001f8 <__aeabi_dsub>
 800f212:	f7f1 fc59 	bl	8000ac8 <__aeabi_d2iz>
 800f216:	f104 0b01 	add.w	fp, r4, #1
 800f21a:	ab0c      	add	r3, sp, #48	; 0x30
 800f21c:	f10a 0a18 	add.w	sl, sl, #24
 800f220:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f224:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f228:	e72b      	b.n	800f082 <__kernel_rem_pio2+0x2a2>
 800f22a:	4630      	mov	r0, r6
 800f22c:	4639      	mov	r1, r7
 800f22e:	f7f1 fc4b 	bl	8000ac8 <__aeabi_d2iz>
 800f232:	ab0c      	add	r3, sp, #48	; 0x30
 800f234:	46a3      	mov	fp, r4
 800f236:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f23a:	e722      	b.n	800f082 <__kernel_rem_pio2+0x2a2>
 800f23c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f23e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f242:	ab0c      	add	r3, sp, #48	; 0x30
 800f244:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f248:	f7f1 f924 	bl	8000494 <__aeabi_i2d>
 800f24c:	4622      	mov	r2, r4
 800f24e:	462b      	mov	r3, r5
 800f250:	f7f1 f98a 	bl	8000568 <__aeabi_dmul>
 800f254:	4632      	mov	r2, r6
 800f256:	e9c9 0100 	strd	r0, r1, [r9]
 800f25a:	463b      	mov	r3, r7
 800f25c:	4620      	mov	r0, r4
 800f25e:	4629      	mov	r1, r5
 800f260:	f7f1 f982 	bl	8000568 <__aeabi_dmul>
 800f264:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f268:	4604      	mov	r4, r0
 800f26a:	460d      	mov	r5, r1
 800f26c:	e713      	b.n	800f096 <__kernel_rem_pio2+0x2b6>
 800f26e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f272:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f276:	f7f1 f977 	bl	8000568 <__aeabi_dmul>
 800f27a:	4602      	mov	r2, r0
 800f27c:	460b      	mov	r3, r1
 800f27e:	4620      	mov	r0, r4
 800f280:	4629      	mov	r1, r5
 800f282:	f7f0 ffbb 	bl	80001fc <__adddf3>
 800f286:	3601      	adds	r6, #1
 800f288:	4604      	mov	r4, r0
 800f28a:	460d      	mov	r5, r1
 800f28c:	9b04      	ldr	r3, [sp, #16]
 800f28e:	429e      	cmp	r6, r3
 800f290:	dc01      	bgt.n	800f296 <__kernel_rem_pio2+0x4b6>
 800f292:	45b0      	cmp	r8, r6
 800f294:	daeb      	bge.n	800f26e <__kernel_rem_pio2+0x48e>
 800f296:	ab48      	add	r3, sp, #288	; 0x120
 800f298:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f29c:	e9c3 4500 	strd	r4, r5, [r3]
 800f2a0:	3f01      	subs	r7, #1
 800f2a2:	f108 0801 	add.w	r8, r8, #1
 800f2a6:	e6ff      	b.n	800f0a8 <__kernel_rem_pio2+0x2c8>
 800f2a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f2aa:	2b02      	cmp	r3, #2
 800f2ac:	dc0b      	bgt.n	800f2c6 <__kernel_rem_pio2+0x4e6>
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	dc6e      	bgt.n	800f390 <__kernel_rem_pio2+0x5b0>
 800f2b2:	d045      	beq.n	800f340 <__kernel_rem_pio2+0x560>
 800f2b4:	9b07      	ldr	r3, [sp, #28]
 800f2b6:	f003 0007 	and.w	r0, r3, #7
 800f2ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f2be:	ecbd 8b02 	vpop	{d8}
 800f2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f2c8:	2b03      	cmp	r3, #3
 800f2ca:	d1f3      	bne.n	800f2b4 <__kernel_rem_pio2+0x4d4>
 800f2cc:	ab48      	add	r3, sp, #288	; 0x120
 800f2ce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f2d2:	46d0      	mov	r8, sl
 800f2d4:	46d9      	mov	r9, fp
 800f2d6:	f1b9 0f00 	cmp.w	r9, #0
 800f2da:	f1a8 0808 	sub.w	r8, r8, #8
 800f2de:	dc64      	bgt.n	800f3aa <__kernel_rem_pio2+0x5ca>
 800f2e0:	465c      	mov	r4, fp
 800f2e2:	2c01      	cmp	r4, #1
 800f2e4:	f1aa 0a08 	sub.w	sl, sl, #8
 800f2e8:	dc7e      	bgt.n	800f3e8 <__kernel_rem_pio2+0x608>
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	f1bb 0f01 	cmp.w	fp, #1
 800f2f2:	f300 8097 	bgt.w	800f424 <__kernel_rem_pio2+0x644>
 800f2f6:	9b02      	ldr	r3, [sp, #8]
 800f2f8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f2fc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f300:	2b00      	cmp	r3, #0
 800f302:	f040 8099 	bne.w	800f438 <__kernel_rem_pio2+0x658>
 800f306:	9b01      	ldr	r3, [sp, #4]
 800f308:	e9c3 5600 	strd	r5, r6, [r3]
 800f30c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f310:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f314:	e7ce      	b.n	800f2b4 <__kernel_rem_pio2+0x4d4>
 800f316:	ab48      	add	r3, sp, #288	; 0x120
 800f318:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f320:	f7f0 ff6c 	bl	80001fc <__adddf3>
 800f324:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f328:	f1bb 0f00 	cmp.w	fp, #0
 800f32c:	daf3      	bge.n	800f316 <__kernel_rem_pio2+0x536>
 800f32e:	9b02      	ldr	r3, [sp, #8]
 800f330:	b113      	cbz	r3, 800f338 <__kernel_rem_pio2+0x558>
 800f332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f336:	4619      	mov	r1, r3
 800f338:	9b01      	ldr	r3, [sp, #4]
 800f33a:	e9c3 0100 	strd	r0, r1, [r3]
 800f33e:	e7b9      	b.n	800f2b4 <__kernel_rem_pio2+0x4d4>
 800f340:	2000      	movs	r0, #0
 800f342:	2100      	movs	r1, #0
 800f344:	e7f0      	b.n	800f328 <__kernel_rem_pio2+0x548>
 800f346:	ab48      	add	r3, sp, #288	; 0x120
 800f348:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f350:	f7f0 ff54 	bl	80001fc <__adddf3>
 800f354:	3c01      	subs	r4, #1
 800f356:	2c00      	cmp	r4, #0
 800f358:	daf5      	bge.n	800f346 <__kernel_rem_pio2+0x566>
 800f35a:	9b02      	ldr	r3, [sp, #8]
 800f35c:	b1e3      	cbz	r3, 800f398 <__kernel_rem_pio2+0x5b8>
 800f35e:	4602      	mov	r2, r0
 800f360:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f364:	9c01      	ldr	r4, [sp, #4]
 800f366:	e9c4 2300 	strd	r2, r3, [r4]
 800f36a:	4602      	mov	r2, r0
 800f36c:	460b      	mov	r3, r1
 800f36e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f372:	f7f0 ff41 	bl	80001f8 <__aeabi_dsub>
 800f376:	ad4a      	add	r5, sp, #296	; 0x128
 800f378:	2401      	movs	r4, #1
 800f37a:	45a3      	cmp	fp, r4
 800f37c:	da0f      	bge.n	800f39e <__kernel_rem_pio2+0x5be>
 800f37e:	9b02      	ldr	r3, [sp, #8]
 800f380:	b113      	cbz	r3, 800f388 <__kernel_rem_pio2+0x5a8>
 800f382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f386:	4619      	mov	r1, r3
 800f388:	9b01      	ldr	r3, [sp, #4]
 800f38a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f38e:	e791      	b.n	800f2b4 <__kernel_rem_pio2+0x4d4>
 800f390:	465c      	mov	r4, fp
 800f392:	2000      	movs	r0, #0
 800f394:	2100      	movs	r1, #0
 800f396:	e7de      	b.n	800f356 <__kernel_rem_pio2+0x576>
 800f398:	4602      	mov	r2, r0
 800f39a:	460b      	mov	r3, r1
 800f39c:	e7e2      	b.n	800f364 <__kernel_rem_pio2+0x584>
 800f39e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f3a2:	f7f0 ff2b 	bl	80001fc <__adddf3>
 800f3a6:	3401      	adds	r4, #1
 800f3a8:	e7e7      	b.n	800f37a <__kernel_rem_pio2+0x59a>
 800f3aa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f3ae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	4632      	mov	r2, r6
 800f3b6:	463b      	mov	r3, r7
 800f3b8:	4629      	mov	r1, r5
 800f3ba:	f7f0 ff1f 	bl	80001fc <__adddf3>
 800f3be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	4629      	mov	r1, r5
 800f3ca:	f7f0 ff15 	bl	80001f8 <__aeabi_dsub>
 800f3ce:	4632      	mov	r2, r6
 800f3d0:	463b      	mov	r3, r7
 800f3d2:	f7f0 ff13 	bl	80001fc <__adddf3>
 800f3d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f3da:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f3de:	ed88 7b00 	vstr	d7, [r8]
 800f3e2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f3e6:	e776      	b.n	800f2d6 <__kernel_rem_pio2+0x4f6>
 800f3e8:	e9da 8900 	ldrd	r8, r9, [sl]
 800f3ec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f3f0:	4640      	mov	r0, r8
 800f3f2:	4632      	mov	r2, r6
 800f3f4:	463b      	mov	r3, r7
 800f3f6:	4649      	mov	r1, r9
 800f3f8:	f7f0 ff00 	bl	80001fc <__adddf3>
 800f3fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f400:	4602      	mov	r2, r0
 800f402:	460b      	mov	r3, r1
 800f404:	4640      	mov	r0, r8
 800f406:	4649      	mov	r1, r9
 800f408:	f7f0 fef6 	bl	80001f8 <__aeabi_dsub>
 800f40c:	4632      	mov	r2, r6
 800f40e:	463b      	mov	r3, r7
 800f410:	f7f0 fef4 	bl	80001fc <__adddf3>
 800f414:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f418:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f41c:	ed8a 7b00 	vstr	d7, [sl]
 800f420:	3c01      	subs	r4, #1
 800f422:	e75e      	b.n	800f2e2 <__kernel_rem_pio2+0x502>
 800f424:	ab48      	add	r3, sp, #288	; 0x120
 800f426:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42e:	f7f0 fee5 	bl	80001fc <__adddf3>
 800f432:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f436:	e75a      	b.n	800f2ee <__kernel_rem_pio2+0x50e>
 800f438:	9b01      	ldr	r3, [sp, #4]
 800f43a:	9a01      	ldr	r2, [sp, #4]
 800f43c:	601d      	str	r5, [r3, #0]
 800f43e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f442:	605c      	str	r4, [r3, #4]
 800f444:	609f      	str	r7, [r3, #8]
 800f446:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f44a:	60d3      	str	r3, [r2, #12]
 800f44c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f450:	6110      	str	r0, [r2, #16]
 800f452:	6153      	str	r3, [r2, #20]
 800f454:	e72e      	b.n	800f2b4 <__kernel_rem_pio2+0x4d4>
 800f456:	bf00      	nop
 800f458:	41700000 	.word	0x41700000
 800f45c:	3e700000 	.word	0x3e700000

0800f460 <__kernel_sin>:
 800f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f464:	ed2d 8b04 	vpush	{d8-d9}
 800f468:	eeb0 8a41 	vmov.f32	s16, s2
 800f46c:	eef0 8a61 	vmov.f32	s17, s3
 800f470:	ec55 4b10 	vmov	r4, r5, d0
 800f474:	b083      	sub	sp, #12
 800f476:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f47a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f47e:	9001      	str	r0, [sp, #4]
 800f480:	da06      	bge.n	800f490 <__kernel_sin+0x30>
 800f482:	ee10 0a10 	vmov	r0, s0
 800f486:	4629      	mov	r1, r5
 800f488:	f7f1 fb1e 	bl	8000ac8 <__aeabi_d2iz>
 800f48c:	2800      	cmp	r0, #0
 800f48e:	d051      	beq.n	800f534 <__kernel_sin+0xd4>
 800f490:	4622      	mov	r2, r4
 800f492:	462b      	mov	r3, r5
 800f494:	4620      	mov	r0, r4
 800f496:	4629      	mov	r1, r5
 800f498:	f7f1 f866 	bl	8000568 <__aeabi_dmul>
 800f49c:	4682      	mov	sl, r0
 800f49e:	468b      	mov	fp, r1
 800f4a0:	4602      	mov	r2, r0
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	f7f1 f85e 	bl	8000568 <__aeabi_dmul>
 800f4ac:	a341      	add	r3, pc, #260	; (adr r3, 800f5b4 <__kernel_sin+0x154>)
 800f4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b2:	4680      	mov	r8, r0
 800f4b4:	4689      	mov	r9, r1
 800f4b6:	4650      	mov	r0, sl
 800f4b8:	4659      	mov	r1, fp
 800f4ba:	f7f1 f855 	bl	8000568 <__aeabi_dmul>
 800f4be:	a33f      	add	r3, pc, #252	; (adr r3, 800f5bc <__kernel_sin+0x15c>)
 800f4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c4:	f7f0 fe98 	bl	80001f8 <__aeabi_dsub>
 800f4c8:	4652      	mov	r2, sl
 800f4ca:	465b      	mov	r3, fp
 800f4cc:	f7f1 f84c 	bl	8000568 <__aeabi_dmul>
 800f4d0:	a33c      	add	r3, pc, #240	; (adr r3, 800f5c4 <__kernel_sin+0x164>)
 800f4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d6:	f7f0 fe91 	bl	80001fc <__adddf3>
 800f4da:	4652      	mov	r2, sl
 800f4dc:	465b      	mov	r3, fp
 800f4de:	f7f1 f843 	bl	8000568 <__aeabi_dmul>
 800f4e2:	a33a      	add	r3, pc, #232	; (adr r3, 800f5cc <__kernel_sin+0x16c>)
 800f4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e8:	f7f0 fe86 	bl	80001f8 <__aeabi_dsub>
 800f4ec:	4652      	mov	r2, sl
 800f4ee:	465b      	mov	r3, fp
 800f4f0:	f7f1 f83a 	bl	8000568 <__aeabi_dmul>
 800f4f4:	a337      	add	r3, pc, #220	; (adr r3, 800f5d4 <__kernel_sin+0x174>)
 800f4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4fa:	f7f0 fe7f 	bl	80001fc <__adddf3>
 800f4fe:	9b01      	ldr	r3, [sp, #4]
 800f500:	4606      	mov	r6, r0
 800f502:	460f      	mov	r7, r1
 800f504:	b9eb      	cbnz	r3, 800f542 <__kernel_sin+0xe2>
 800f506:	4602      	mov	r2, r0
 800f508:	460b      	mov	r3, r1
 800f50a:	4650      	mov	r0, sl
 800f50c:	4659      	mov	r1, fp
 800f50e:	f7f1 f82b 	bl	8000568 <__aeabi_dmul>
 800f512:	a325      	add	r3, pc, #148	; (adr r3, 800f5a8 <__kernel_sin+0x148>)
 800f514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f518:	f7f0 fe6e 	bl	80001f8 <__aeabi_dsub>
 800f51c:	4642      	mov	r2, r8
 800f51e:	464b      	mov	r3, r9
 800f520:	f7f1 f822 	bl	8000568 <__aeabi_dmul>
 800f524:	4602      	mov	r2, r0
 800f526:	460b      	mov	r3, r1
 800f528:	4620      	mov	r0, r4
 800f52a:	4629      	mov	r1, r5
 800f52c:	f7f0 fe66 	bl	80001fc <__adddf3>
 800f530:	4604      	mov	r4, r0
 800f532:	460d      	mov	r5, r1
 800f534:	ec45 4b10 	vmov	d0, r4, r5
 800f538:	b003      	add	sp, #12
 800f53a:	ecbd 8b04 	vpop	{d8-d9}
 800f53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f542:	4b1b      	ldr	r3, [pc, #108]	; (800f5b0 <__kernel_sin+0x150>)
 800f544:	ec51 0b18 	vmov	r0, r1, d8
 800f548:	2200      	movs	r2, #0
 800f54a:	f7f1 f80d 	bl	8000568 <__aeabi_dmul>
 800f54e:	4632      	mov	r2, r6
 800f550:	ec41 0b19 	vmov	d9, r0, r1
 800f554:	463b      	mov	r3, r7
 800f556:	4640      	mov	r0, r8
 800f558:	4649      	mov	r1, r9
 800f55a:	f7f1 f805 	bl	8000568 <__aeabi_dmul>
 800f55e:	4602      	mov	r2, r0
 800f560:	460b      	mov	r3, r1
 800f562:	ec51 0b19 	vmov	r0, r1, d9
 800f566:	f7f0 fe47 	bl	80001f8 <__aeabi_dsub>
 800f56a:	4652      	mov	r2, sl
 800f56c:	465b      	mov	r3, fp
 800f56e:	f7f0 fffb 	bl	8000568 <__aeabi_dmul>
 800f572:	ec53 2b18 	vmov	r2, r3, d8
 800f576:	f7f0 fe3f 	bl	80001f8 <__aeabi_dsub>
 800f57a:	a30b      	add	r3, pc, #44	; (adr r3, 800f5a8 <__kernel_sin+0x148>)
 800f57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f580:	4606      	mov	r6, r0
 800f582:	460f      	mov	r7, r1
 800f584:	4640      	mov	r0, r8
 800f586:	4649      	mov	r1, r9
 800f588:	f7f0 ffee 	bl	8000568 <__aeabi_dmul>
 800f58c:	4602      	mov	r2, r0
 800f58e:	460b      	mov	r3, r1
 800f590:	4630      	mov	r0, r6
 800f592:	4639      	mov	r1, r7
 800f594:	f7f0 fe32 	bl	80001fc <__adddf3>
 800f598:	4602      	mov	r2, r0
 800f59a:	460b      	mov	r3, r1
 800f59c:	4620      	mov	r0, r4
 800f59e:	4629      	mov	r1, r5
 800f5a0:	f7f0 fe2a 	bl	80001f8 <__aeabi_dsub>
 800f5a4:	e7c4      	b.n	800f530 <__kernel_sin+0xd0>
 800f5a6:	bf00      	nop
 800f5a8:	55555549 	.word	0x55555549
 800f5ac:	3fc55555 	.word	0x3fc55555
 800f5b0:	3fe00000 	.word	0x3fe00000
 800f5b4:	5acfd57c 	.word	0x5acfd57c
 800f5b8:	3de5d93a 	.word	0x3de5d93a
 800f5bc:	8a2b9ceb 	.word	0x8a2b9ceb
 800f5c0:	3e5ae5e6 	.word	0x3e5ae5e6
 800f5c4:	57b1fe7d 	.word	0x57b1fe7d
 800f5c8:	3ec71de3 	.word	0x3ec71de3
 800f5cc:	19c161d5 	.word	0x19c161d5
 800f5d0:	3f2a01a0 	.word	0x3f2a01a0
 800f5d4:	1110f8a6 	.word	0x1110f8a6
 800f5d8:	3f811111 	.word	0x3f811111

0800f5dc <finite>:
 800f5dc:	b082      	sub	sp, #8
 800f5de:	ed8d 0b00 	vstr	d0, [sp]
 800f5e2:	9801      	ldr	r0, [sp, #4]
 800f5e4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f5e8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f5ec:	0fc0      	lsrs	r0, r0, #31
 800f5ee:	b002      	add	sp, #8
 800f5f0:	4770      	bx	lr
 800f5f2:	0000      	movs	r0, r0
 800f5f4:	0000      	movs	r0, r0
	...

0800f5f8 <floor>:
 800f5f8:	ec51 0b10 	vmov	r0, r1, d0
 800f5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f600:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f604:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f608:	2e13      	cmp	r6, #19
 800f60a:	ee10 5a10 	vmov	r5, s0
 800f60e:	ee10 8a10 	vmov	r8, s0
 800f612:	460c      	mov	r4, r1
 800f614:	dc32      	bgt.n	800f67c <floor+0x84>
 800f616:	2e00      	cmp	r6, #0
 800f618:	da14      	bge.n	800f644 <floor+0x4c>
 800f61a:	a333      	add	r3, pc, #204	; (adr r3, 800f6e8 <floor+0xf0>)
 800f61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f620:	f7f0 fdec 	bl	80001fc <__adddf3>
 800f624:	2200      	movs	r2, #0
 800f626:	2300      	movs	r3, #0
 800f628:	f7f1 fa2e 	bl	8000a88 <__aeabi_dcmpgt>
 800f62c:	b138      	cbz	r0, 800f63e <floor+0x46>
 800f62e:	2c00      	cmp	r4, #0
 800f630:	da57      	bge.n	800f6e2 <floor+0xea>
 800f632:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f636:	431d      	orrs	r5, r3
 800f638:	d001      	beq.n	800f63e <floor+0x46>
 800f63a:	4c2d      	ldr	r4, [pc, #180]	; (800f6f0 <floor+0xf8>)
 800f63c:	2500      	movs	r5, #0
 800f63e:	4621      	mov	r1, r4
 800f640:	4628      	mov	r0, r5
 800f642:	e025      	b.n	800f690 <floor+0x98>
 800f644:	4f2b      	ldr	r7, [pc, #172]	; (800f6f4 <floor+0xfc>)
 800f646:	4137      	asrs	r7, r6
 800f648:	ea01 0307 	and.w	r3, r1, r7
 800f64c:	4303      	orrs	r3, r0
 800f64e:	d01f      	beq.n	800f690 <floor+0x98>
 800f650:	a325      	add	r3, pc, #148	; (adr r3, 800f6e8 <floor+0xf0>)
 800f652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f656:	f7f0 fdd1 	bl	80001fc <__adddf3>
 800f65a:	2200      	movs	r2, #0
 800f65c:	2300      	movs	r3, #0
 800f65e:	f7f1 fa13 	bl	8000a88 <__aeabi_dcmpgt>
 800f662:	2800      	cmp	r0, #0
 800f664:	d0eb      	beq.n	800f63e <floor+0x46>
 800f666:	2c00      	cmp	r4, #0
 800f668:	bfbe      	ittt	lt
 800f66a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f66e:	fa43 f606 	asrlt.w	r6, r3, r6
 800f672:	19a4      	addlt	r4, r4, r6
 800f674:	ea24 0407 	bic.w	r4, r4, r7
 800f678:	2500      	movs	r5, #0
 800f67a:	e7e0      	b.n	800f63e <floor+0x46>
 800f67c:	2e33      	cmp	r6, #51	; 0x33
 800f67e:	dd0b      	ble.n	800f698 <floor+0xa0>
 800f680:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f684:	d104      	bne.n	800f690 <floor+0x98>
 800f686:	ee10 2a10 	vmov	r2, s0
 800f68a:	460b      	mov	r3, r1
 800f68c:	f7f0 fdb6 	bl	80001fc <__adddf3>
 800f690:	ec41 0b10 	vmov	d0, r0, r1
 800f694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f698:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f69c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6a0:	fa23 f707 	lsr.w	r7, r3, r7
 800f6a4:	4207      	tst	r7, r0
 800f6a6:	d0f3      	beq.n	800f690 <floor+0x98>
 800f6a8:	a30f      	add	r3, pc, #60	; (adr r3, 800f6e8 <floor+0xf0>)
 800f6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ae:	f7f0 fda5 	bl	80001fc <__adddf3>
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	f7f1 f9e7 	bl	8000a88 <__aeabi_dcmpgt>
 800f6ba:	2800      	cmp	r0, #0
 800f6bc:	d0bf      	beq.n	800f63e <floor+0x46>
 800f6be:	2c00      	cmp	r4, #0
 800f6c0:	da02      	bge.n	800f6c8 <floor+0xd0>
 800f6c2:	2e14      	cmp	r6, #20
 800f6c4:	d103      	bne.n	800f6ce <floor+0xd6>
 800f6c6:	3401      	adds	r4, #1
 800f6c8:	ea25 0507 	bic.w	r5, r5, r7
 800f6cc:	e7b7      	b.n	800f63e <floor+0x46>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f6d4:	fa03 f606 	lsl.w	r6, r3, r6
 800f6d8:	4435      	add	r5, r6
 800f6da:	4545      	cmp	r5, r8
 800f6dc:	bf38      	it	cc
 800f6de:	18e4      	addcc	r4, r4, r3
 800f6e0:	e7f2      	b.n	800f6c8 <floor+0xd0>
 800f6e2:	2500      	movs	r5, #0
 800f6e4:	462c      	mov	r4, r5
 800f6e6:	e7aa      	b.n	800f63e <floor+0x46>
 800f6e8:	8800759c 	.word	0x8800759c
 800f6ec:	7e37e43c 	.word	0x7e37e43c
 800f6f0:	bff00000 	.word	0xbff00000
 800f6f4:	000fffff 	.word	0x000fffff

0800f6f8 <nan>:
 800f6f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f700 <nan+0x8>
 800f6fc:	4770      	bx	lr
 800f6fe:	bf00      	nop
 800f700:	00000000 	.word	0x00000000
 800f704:	7ff80000 	.word	0x7ff80000

0800f708 <rint>:
 800f708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f70a:	ec51 0b10 	vmov	r0, r1, d0
 800f70e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f712:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f716:	2e13      	cmp	r6, #19
 800f718:	ee10 4a10 	vmov	r4, s0
 800f71c:	460b      	mov	r3, r1
 800f71e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f722:	dc58      	bgt.n	800f7d6 <rint+0xce>
 800f724:	2e00      	cmp	r6, #0
 800f726:	da2b      	bge.n	800f780 <rint+0x78>
 800f728:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f72c:	4302      	orrs	r2, r0
 800f72e:	d023      	beq.n	800f778 <rint+0x70>
 800f730:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f734:	4302      	orrs	r2, r0
 800f736:	4254      	negs	r4, r2
 800f738:	4314      	orrs	r4, r2
 800f73a:	0c4b      	lsrs	r3, r1, #17
 800f73c:	0b24      	lsrs	r4, r4, #12
 800f73e:	045b      	lsls	r3, r3, #17
 800f740:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f744:	ea44 0103 	orr.w	r1, r4, r3
 800f748:	4b32      	ldr	r3, [pc, #200]	; (800f814 <rint+0x10c>)
 800f74a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f74e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f752:	4602      	mov	r2, r0
 800f754:	460b      	mov	r3, r1
 800f756:	4630      	mov	r0, r6
 800f758:	4639      	mov	r1, r7
 800f75a:	f7f0 fd4f 	bl	80001fc <__adddf3>
 800f75e:	e9cd 0100 	strd	r0, r1, [sp]
 800f762:	463b      	mov	r3, r7
 800f764:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f768:	4632      	mov	r2, r6
 800f76a:	f7f0 fd45 	bl	80001f8 <__aeabi_dsub>
 800f76e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f772:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f776:	4639      	mov	r1, r7
 800f778:	ec41 0b10 	vmov	d0, r0, r1
 800f77c:	b003      	add	sp, #12
 800f77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f780:	4a25      	ldr	r2, [pc, #148]	; (800f818 <rint+0x110>)
 800f782:	4132      	asrs	r2, r6
 800f784:	ea01 0702 	and.w	r7, r1, r2
 800f788:	4307      	orrs	r7, r0
 800f78a:	d0f5      	beq.n	800f778 <rint+0x70>
 800f78c:	0851      	lsrs	r1, r2, #1
 800f78e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800f792:	4314      	orrs	r4, r2
 800f794:	d00c      	beq.n	800f7b0 <rint+0xa8>
 800f796:	ea23 0201 	bic.w	r2, r3, r1
 800f79a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f79e:	2e13      	cmp	r6, #19
 800f7a0:	fa43 f606 	asr.w	r6, r3, r6
 800f7a4:	bf0c      	ite	eq
 800f7a6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f7aa:	2400      	movne	r4, #0
 800f7ac:	ea42 0306 	orr.w	r3, r2, r6
 800f7b0:	4918      	ldr	r1, [pc, #96]	; (800f814 <rint+0x10c>)
 800f7b2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f7b6:	4622      	mov	r2, r4
 800f7b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f7bc:	4620      	mov	r0, r4
 800f7be:	4629      	mov	r1, r5
 800f7c0:	f7f0 fd1c 	bl	80001fc <__adddf3>
 800f7c4:	e9cd 0100 	strd	r0, r1, [sp]
 800f7c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7cc:	4622      	mov	r2, r4
 800f7ce:	462b      	mov	r3, r5
 800f7d0:	f7f0 fd12 	bl	80001f8 <__aeabi_dsub>
 800f7d4:	e7d0      	b.n	800f778 <rint+0x70>
 800f7d6:	2e33      	cmp	r6, #51	; 0x33
 800f7d8:	dd07      	ble.n	800f7ea <rint+0xe2>
 800f7da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f7de:	d1cb      	bne.n	800f778 <rint+0x70>
 800f7e0:	ee10 2a10 	vmov	r2, s0
 800f7e4:	f7f0 fd0a 	bl	80001fc <__adddf3>
 800f7e8:	e7c6      	b.n	800f778 <rint+0x70>
 800f7ea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f7ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f7f2:	40d6      	lsrs	r6, r2
 800f7f4:	4230      	tst	r0, r6
 800f7f6:	d0bf      	beq.n	800f778 <rint+0x70>
 800f7f8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800f7fc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800f800:	bf1f      	itttt	ne
 800f802:	ea24 0101 	bicne.w	r1, r4, r1
 800f806:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f80a:	fa44 f202 	asrne.w	r2, r4, r2
 800f80e:	ea41 0402 	orrne.w	r4, r1, r2
 800f812:	e7cd      	b.n	800f7b0 <rint+0xa8>
 800f814:	0800fe80 	.word	0x0800fe80
 800f818:	000fffff 	.word	0x000fffff
 800f81c:	00000000 	.word	0x00000000

0800f820 <scalbn>:
 800f820:	b570      	push	{r4, r5, r6, lr}
 800f822:	ec55 4b10 	vmov	r4, r5, d0
 800f826:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f82a:	4606      	mov	r6, r0
 800f82c:	462b      	mov	r3, r5
 800f82e:	b99a      	cbnz	r2, 800f858 <scalbn+0x38>
 800f830:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f834:	4323      	orrs	r3, r4
 800f836:	d036      	beq.n	800f8a6 <scalbn+0x86>
 800f838:	4b39      	ldr	r3, [pc, #228]	; (800f920 <scalbn+0x100>)
 800f83a:	4629      	mov	r1, r5
 800f83c:	ee10 0a10 	vmov	r0, s0
 800f840:	2200      	movs	r2, #0
 800f842:	f7f0 fe91 	bl	8000568 <__aeabi_dmul>
 800f846:	4b37      	ldr	r3, [pc, #220]	; (800f924 <scalbn+0x104>)
 800f848:	429e      	cmp	r6, r3
 800f84a:	4604      	mov	r4, r0
 800f84c:	460d      	mov	r5, r1
 800f84e:	da10      	bge.n	800f872 <scalbn+0x52>
 800f850:	a32b      	add	r3, pc, #172	; (adr r3, 800f900 <scalbn+0xe0>)
 800f852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f856:	e03a      	b.n	800f8ce <scalbn+0xae>
 800f858:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f85c:	428a      	cmp	r2, r1
 800f85e:	d10c      	bne.n	800f87a <scalbn+0x5a>
 800f860:	ee10 2a10 	vmov	r2, s0
 800f864:	4620      	mov	r0, r4
 800f866:	4629      	mov	r1, r5
 800f868:	f7f0 fcc8 	bl	80001fc <__adddf3>
 800f86c:	4604      	mov	r4, r0
 800f86e:	460d      	mov	r5, r1
 800f870:	e019      	b.n	800f8a6 <scalbn+0x86>
 800f872:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f876:	460b      	mov	r3, r1
 800f878:	3a36      	subs	r2, #54	; 0x36
 800f87a:	4432      	add	r2, r6
 800f87c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f880:	428a      	cmp	r2, r1
 800f882:	dd08      	ble.n	800f896 <scalbn+0x76>
 800f884:	2d00      	cmp	r5, #0
 800f886:	a120      	add	r1, pc, #128	; (adr r1, 800f908 <scalbn+0xe8>)
 800f888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f88c:	da1c      	bge.n	800f8c8 <scalbn+0xa8>
 800f88e:	a120      	add	r1, pc, #128	; (adr r1, 800f910 <scalbn+0xf0>)
 800f890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f894:	e018      	b.n	800f8c8 <scalbn+0xa8>
 800f896:	2a00      	cmp	r2, #0
 800f898:	dd08      	ble.n	800f8ac <scalbn+0x8c>
 800f89a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f89e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f8a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f8a6:	ec45 4b10 	vmov	d0, r4, r5
 800f8aa:	bd70      	pop	{r4, r5, r6, pc}
 800f8ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f8b0:	da19      	bge.n	800f8e6 <scalbn+0xc6>
 800f8b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f8b6:	429e      	cmp	r6, r3
 800f8b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f8bc:	dd0a      	ble.n	800f8d4 <scalbn+0xb4>
 800f8be:	a112      	add	r1, pc, #72	; (adr r1, 800f908 <scalbn+0xe8>)
 800f8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d1e2      	bne.n	800f88e <scalbn+0x6e>
 800f8c8:	a30f      	add	r3, pc, #60	; (adr r3, 800f908 <scalbn+0xe8>)
 800f8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ce:	f7f0 fe4b 	bl	8000568 <__aeabi_dmul>
 800f8d2:	e7cb      	b.n	800f86c <scalbn+0x4c>
 800f8d4:	a10a      	add	r1, pc, #40	; (adr r1, 800f900 <scalbn+0xe0>)
 800f8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d0b8      	beq.n	800f850 <scalbn+0x30>
 800f8de:	a10e      	add	r1, pc, #56	; (adr r1, 800f918 <scalbn+0xf8>)
 800f8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8e4:	e7b4      	b.n	800f850 <scalbn+0x30>
 800f8e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f8ea:	3236      	adds	r2, #54	; 0x36
 800f8ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f8f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	4b0c      	ldr	r3, [pc, #48]	; (800f928 <scalbn+0x108>)
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	e7e8      	b.n	800f8ce <scalbn+0xae>
 800f8fc:	f3af 8000 	nop.w
 800f900:	c2f8f359 	.word	0xc2f8f359
 800f904:	01a56e1f 	.word	0x01a56e1f
 800f908:	8800759c 	.word	0x8800759c
 800f90c:	7e37e43c 	.word	0x7e37e43c
 800f910:	8800759c 	.word	0x8800759c
 800f914:	fe37e43c 	.word	0xfe37e43c
 800f918:	c2f8f359 	.word	0xc2f8f359
 800f91c:	81a56e1f 	.word	0x81a56e1f
 800f920:	43500000 	.word	0x43500000
 800f924:	ffff3cb0 	.word	0xffff3cb0
 800f928:	3c900000 	.word	0x3c900000

0800f92c <_init>:
 800f92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f92e:	bf00      	nop
 800f930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f932:	bc08      	pop	{r3}
 800f934:	469e      	mov	lr, r3
 800f936:	4770      	bx	lr

0800f938 <_fini>:
 800f938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f93a:	bf00      	nop
 800f93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f93e:	bc08      	pop	{r3}
 800f940:	469e      	mov	lr, r3
 800f942:	4770      	bx	lr
