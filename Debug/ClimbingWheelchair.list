
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb1c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800bcd0  0800bcd0  0001bcd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c010  0800c010  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  0800c010  0800c010  0001c010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c018  0800c018  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c018  0800c018  0001c018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c01c  0800c01c  0001c01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800c020  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000268  0800c284  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  0800c284  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4e8  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004089  00000000  00000000  0003d77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  00041808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  00042d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ae0  00000000  00000000  000440d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb7b  00000000  00000000  0006bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e22ca  00000000  00000000  0008a733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c9fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa0  00000000  00000000  0016ca50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000268 	.word	0x20000268
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bcb4 	.word	0x0800bcb4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000026c 	.word	0x2000026c
 80001ec:	0800bcb4 	.word	0x0800bcb4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f002 fe61 	bl	8003c18 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f002 fe4c 	bl	8003c18 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f002 fdb3 	bl	8003c18 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <pid_reset>:

void pid_reset(PID_t pid){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	*(pid->output) = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
	*(pid->input)  = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
	pid->iterm = *(pid->output);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	621a      	str	r2, [r3, #32]
	pid->lastin = *(pid->input);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <hubMotor_Init+0x2c>)
 800140c:	f004 fd98 	bl	8005f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <hubMotor_Init+0x2c>)
 8001418:	f004 fd92 	bl	8005f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001422:	4802      	ldr	r0, [pc, #8]	; (800142c <hubMotor_Init+0x2c>)
 8001424:	f004 fd8c 	bl	8005f40 <HAL_GPIO_WritePin>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40020c00 	.word	0x40020c00

08001430 <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001438:	2200      	movs	r2, #0
 800143a:	2110      	movs	r1, #16
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <ADC_Read+0x30>)
 800143e:	f004 fd7f 	bl	8005f40 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8001442:	2302      	movs	r3, #2
 8001444:	2208      	movs	r2, #8
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <ADC_Read+0x34>)
 800144a:	f006 fe41 	bl	80080d0 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 800144e:	2201      	movs	r2, #1
 8001450:	2110      	movs	r1, #16
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <ADC_Read+0x30>)
 8001454:	f004 fd74 	bl	8005f40 <HAL_GPIO_WritePin>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40020000 	.word	0x40020000
 8001464:	20000300 	.word	0x20000300

08001468 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001470:	2100      	movs	r1, #0
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f808 	bl	8001488 <enableMotor>
	brakeMotor(motor, 0);
 8001478:	2100      	movs	r1, #0
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f828 	bl	80014d0 <brakeMotor>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149c:	78fa      	ldrb	r2, [r7, #3]
 800149e:	4619      	mov	r1, r3
 80014a0:	f004 fd4e 	bl	8005f40 <HAL_GPIO_WritePin>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	461a      	mov	r2, r3
 80014ba:	2108      	movs	r1, #8
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <emBrakeMotor+0x20>)
 80014be:	f004 fd3f 	bl	8005f40 <HAL_GPIO_WritePin>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40020c00 	.word	0x40020c00

080014d0 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69d8      	ldr	r0, [r3, #28]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	8c1b      	ldrh	r3, [r3, #32]
 80014e4:	78fa      	ldrb	r2, [r7, #3]
 80014e6:	4619      	mov	r1, r3
 80014e8:	f004 fd2a 	bl	8005f40 <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	4619      	mov	r1, r3
 800150c:	f004 fd18 	bl	8005f40 <HAL_GPIO_WritePin>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 800152a:	edd7 7a00 	vldr	s15, [r7]
 800152e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001660 <setMotorSpeed+0x148>
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	dd01      	ble.n	8001540 <setMotorSpeed+0x28>
 800153c:	4b49      	ldr	r3, [pc, #292]	; (8001664 <setMotorSpeed+0x14c>)
 800153e:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f7fe ffb9 	bl	80004b8 <__aeabi_f2d>
 8001546:	a340      	add	r3, pc, #256	; (adr r3, 8001648 <setMotorSpeed+0x130>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7fe fe54 	bl	80001f8 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	a33d      	add	r3, pc, #244	; (adr r3, 8001650 <setMotorSpeed+0x138>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f92d 	bl	80007bc <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fad5 	bl	8000b18 <__aeabi_d2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	b29b      	uxth	r3, r3
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157a:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7fe ff9a 	bl	80004b8 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	a133      	add	r1, pc, #204	; (adr r1, 8001658 <setMotorSpeed+0x140>)
 800158a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800158e:	f7ff f915 	bl	80007bc <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fa95 	bl	8000ac8 <__aeabi_d2iz>
 800159e:	4603      	mov	r3, r0
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 80015a6:	8a7b      	ldrh	r3, [r7, #18]
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 80015ae:	edd7 7a00 	vldr	s15, [r7]
 80015b2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	d503      	bpl.n	80015c8 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 80015c0:	2101      	movs	r1, #1
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff84 	bl	80014d0 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	8a7a      	ldrh	r2, [r7, #18]
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	8b1b      	ldrh	r3, [r3, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34
 80015e4:	e01c      	b.n	8001620 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	8b1b      	ldrh	r3, [r3, #24]
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d105      	bne.n	80015fa <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	639a      	str	r2, [r3, #56]	; 0x38
 80015f8:	e012      	b.n	8001620 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	8b1b      	ldrh	r3, [r3, #24]
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d105      	bne.n	800160e <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	63da      	str	r2, [r3, #60]	; 0x3c
 800160c:	e008      	b.n	8001620 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	8b1b      	ldrh	r3, [r3, #24]
 8001612:	2b0c      	cmp	r3, #12
 8001614:	d104      	bne.n	8001620 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	8b1b      	ldrh	r3, [r3, #24]
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f007 fb46 	bl	8008cbc <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	f3af 8000 	nop.w
 8001648:	bfb15b57 	.word	0xbfb15b57
 800164c:	3fd09eec 	.word	0x3fd09eec
 8001650:	1172ef0b 	.word	0x1172ef0b
 8001654:	3f9989df 	.word	0x3f9989df
 8001658:	00000000 	.word	0x00000000
 800165c:	412e8480 	.word	0x412e8480
 8001660:	42c80000 	.word	0x42c80000
 8001664:	42c80000 	.word	0x42c80000

08001668 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800167a:	2b01      	cmp	r3, #1
 800167c:	d129      	bne.n	80016d2 <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 800167e:	edd7 7a00 	vldr	s15, [r7]
 8001682:	eef0 7ae7 	vabs.f32	s15, s15
 8001686:	ee17 0a90 	vmov	r0, s15
 800168a:	f7fe ff15 	bl	80004b8 <__aeabi_f2d>
 800168e:	4604      	mov	r4, r0
 8001690:	460d      	mov	r5, r1
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f7fe ff10 	bl	80004b8 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4620      	mov	r0, r4
 800169e:	4629      	mov	r1, r5
 80016a0:	f7ff f88c 	bl	80007bc <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	f7ff f9de 	bl	8000a74 <__aeabi_dcmpge>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <runMotor+0x60>
	      setMotorDir(motor, 0);
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff17 	bl	80014f4 <setMotorDir>
 80016c6:	e032      	b.n	800172e <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 80016c8:	2101      	movs	r1, #1
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ff12 	bl	80014f4 <setMotorDir>
 80016d0:	e02d      	b.n	800172e <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d128      	bne.n	800172e <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 80016dc:	edd7 7a00 	vldr	s15, [r7]
 80016e0:	eef0 7ae7 	vabs.f32	s15, s15
 80016e4:	ee17 0a90 	vmov	r0, s15
 80016e8:	f7fe fee6 	bl	80004b8 <__aeabi_f2d>
 80016ec:	4604      	mov	r4, r0
 80016ee:	460d      	mov	r5, r1
 80016f0:	6838      	ldr	r0, [r7, #0]
 80016f2:	f7fe fee1 	bl	80004b8 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	f7ff f85d 	bl	80007bc <__aeabi_ddiv>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	f7ff f9af 	bl	8000a74 <__aeabi_dcmpge>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <runMotor+0xbe>
	  setMotorDir(motor, 1);
 800171c:	2101      	movs	r1, #1
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fee8 	bl	80014f4 <setMotorDir>
 8001724:	e003      	b.n	800172e <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 8001726:	2100      	movs	r1, #0
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fee3 	bl	80014f4 <setMotorDir>
    }

    HAL_Delay(50);
 800172e:	2032      	movs	r0, #50	; 0x32
 8001730:	f002 fa7e 	bl	8003c30 <HAL_Delay>
    brakeMotor(motor, 0);
 8001734:	2100      	movs	r1, #0
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff feca 	bl	80014d0 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 800173c:	edd7 7a00 	vldr	s15, [r7]
 8001740:	eef0 7ae7 	vabs.f32	s15, s15
 8001744:	eeb0 0a67 	vmov.f32	s0, s15
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fee5 	bl	8001518 <setMotorSpeed>

}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bdb0      	pop	{r4, r5, r7, pc}

08001756 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	889b      	ldrh	r3, [r3, #4]
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f004 fbc2 	bl	8005ef4 <HAL_GPIO_ReadPin>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	799a      	ldrb	r2, [r3, #6]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	79db      	ldrb	r3, [r3, #7]
 8001780:	429a      	cmp	r2, r3
 8001782:	d004      	beq.n	800178e <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 8001784:	f002 fa48 	bl	8003c18 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 800178e:	f002 fa43 	bl	8003c18 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d209      	bcs.n	80017b4 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	799a      	ldrb	r2, [r3, #6]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7a1b      	ldrb	r3, [r3, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e004      	b.n	80017be <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	799a      	ldrb	r2, [r3, #6]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80017ce:	4b30      	ldr	r3, [pc, #192]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017d0:	4a30      	ldr	r2, [pc, #192]	; (8001894 <MX_CAN1_Init+0xcc>)
 80017d2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80017d4:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017d6:	2209      	movs	r2, #9
 80017d8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017e0:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80017ee:	4b28      	ldr	r3, [pc, #160]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017f4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <MX_CAN1_Init+0xc8>)
 8001804:	2200      	movs	r2, #0
 8001806:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_CAN1_Init+0xc8>)
 800180a:	2200      	movs	r2, #0
 800180c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <MX_CAN1_Init+0xc8>)
 8001810:	2200      	movs	r2, #0
 8001812:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_CAN1_Init+0xc8>)
 8001816:	2200      	movs	r2, #0
 8001818:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800181a:	481d      	ldr	r0, [pc, #116]	; (8001890 <MX_CAN1_Init+0xc8>)
 800181c:	f002 fa2c 	bl	8003c78 <HAL_CAN_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001826:	f001 f897 	bl	8002958 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfil_1;
  	canfil_1.FilterBank = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001832:	2301      	movs	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
  	canfil_1.FilterIdHigh = 0x0000;
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
  	canfil_1.FilterIdLow = 0x0000;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  	canfil_1.FilterMaskIdHigh = 0x0000;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  	canfil_1.FilterMaskIdLow = 0x0000;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	623b      	str	r3, [r7, #32]
  	canfil_1.SlaveStartFilterBank = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001852:	463b      	mov	r3, r7
 8001854:	4619      	mov	r1, r3
 8001856:	480e      	ldr	r0, [pc, #56]	; (8001890 <MX_CAN1_Init+0xc8>)
 8001858:	f002 fc2a 	bl	80040b0 <HAL_CAN_ConfigFilter>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_CAN1_Init+0x9e>
  		Error_Handler();
 8001862:	f001 f879 	bl	8002958 <Error_Handler>

  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001866:	2102      	movs	r1, #2
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <MX_CAN1_Init+0xc8>)
 800186a:	f002 fff5 	bl	8004858 <HAL_CAN_ActivateNotification>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <MX_CAN1_Init+0xb2>
  		return Error_Handler();
 8001874:	f001 f870 	bl	8002958 <Error_Handler>
 8001878:	e007      	b.n	800188a <MX_CAN1_Init+0xc2>

  	if (HAL_CAN_Start(&hcan1))
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_CAN1_Init+0xc8>)
 800187c:	f002 fd66 	bl	800434c <HAL_CAN_Start>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_CAN1_Init+0xc2>
  		return Error_Handler();
 8001886:	f001 f867 	bl	8002958 <Error_Handler>


    /* USER CODE END CAN1_Init 2 */

}
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000358 	.word	0x20000358
 8001894:	40006400 	.word	0x40006400

08001898 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a1d      	ldr	r2, [pc, #116]	; (800192c <HAL_CAN_MspInit+0x94>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d133      	bne.n	8001922 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f2:	2303      	movs	r3, #3
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001902:	2309      	movs	r3, #9
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4809      	ldr	r0, [pc, #36]	; (8001934 <HAL_CAN_MspInit+0x9c>)
 800190e:	f003 ffc5 	bl	800589c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2014      	movs	r0, #20
 8001918:	f003 faf0 	bl	8004efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800191c:	2014      	movs	r0, #20
 800191e:	f003 fb19 	bl	8004f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40006400 	.word	0x40006400
 8001930:	40023800 	.word	0x40023800
 8001934:	40020c00 	.word	0x40020c00

08001938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_DMA_Init+0x3c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <MX_DMA_Init+0x3c>)
 8001948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_DMA_Init+0x3c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	200c      	movs	r0, #12
 8001960:	f003 facc 	bl	8004efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001964:	200c      	movs	r0, #12
 8001966:	f003 faf5 	bl	8004f54 <HAL_NVIC_EnableIRQ>

}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800

08001978 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <ENCODER_Init+0x24>)
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <ENCODER_Init+0x28>)
 8001980:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <ENCODER_Init+0x2c>)
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <ENCODER_Init+0x28>)
 8001986:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001988:	2101      	movs	r1, #1
 800198a:	4804      	ldr	r0, [pc, #16]	; (800199c <ENCODER_Init+0x24>)
 800198c:	f000 f83f 	bl	8001a0e <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001990:	2102      	movs	r1, #2
 8001992:	4804      	ldr	r0, [pc, #16]	; (80019a4 <ENCODER_Init+0x2c>)
 8001994:	f000 f83b 	bl	8001a0e <ENCODER_Set_TxHeader>

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200003fc 	.word	0x200003fc
 80019a0:	20000358 	.word	0x20000358
 80019a4:	200003a8 	.word	0x200003a8

080019a8 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[1] = incoming_array[1];
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	785a      	ldrb	r2, [r3, #1]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[2] = incoming_array[2];
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	789a      	ldrb	r2, [r3, #2]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[3] = incoming_array[3];
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	78da      	ldrb	r2, [r3, #3]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	Encoder_ptr->rawRead[4] = incoming_array[4];
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	791a      	ldrb	r2, [r3, #4]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[5] = incoming_array[5];
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	795a      	ldrb	r2, [r3, #5]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[6] = incoming_array[6];
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	799a      	ldrb	r2, [r3, #6]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[7] = incoming_array[7];
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	79da      	ldrb	r2, [r3, #7]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->sendData[2] = 0x01;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->sendData[3] = 0x00;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f103 0120 	add.w	r1, r3, #32
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3338      	adds	r3, #56	; 0x38
 8001a8e:	f002 fca1 	bl	80043d4 <HAL_CAN_AddTxMessage>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffd1 	bl	8001a4a <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	441a      	add	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	4413      	add	r3, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	4b8a      	ldr	r3, [pc, #552]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a89      	ldr	r2, [pc, #548]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b24:	f043 0310 	orr.w	r3, r3, #16
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b87      	ldr	r3, [pc, #540]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	4b83      	ldr	r3, [pc, #524]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a82      	ldr	r2, [pc, #520]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b80      	ldr	r3, [pc, #512]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b7c      	ldr	r3, [pc, #496]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a7b      	ldr	r2, [pc, #492]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b75      	ldr	r3, [pc, #468]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a74      	ldr	r2, [pc, #464]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b72      	ldr	r3, [pc, #456]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a6d      	ldr	r2, [pc, #436]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a66      	ldr	r2, [pc, #408]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b64      	ldr	r3, [pc, #400]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	213f      	movs	r1, #63	; 0x3f
 8001bc6:	4861      	ldr	r0, [pc, #388]	; (8001d4c <MX_GPIO_Init+0x248>)
 8001bc8:	f004 f9ba 	bl	8005f40 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2110      	movs	r1, #16
 8001bd0:	485f      	ldr	r0, [pc, #380]	; (8001d50 <MX_GPIO_Init+0x24c>)
 8001bd2:	f004 f9b5 	bl	8005f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	219b      	movs	r1, #155	; 0x9b
 8001bda:	485e      	ldr	r0, [pc, #376]	; (8001d54 <MX_GPIO_Init+0x250>)
 8001bdc:	f004 f9b0 	bl	8005f40 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001be6:	485c      	ldr	r0, [pc, #368]	; (8001d58 <MX_GPIO_Init+0x254>)
 8001be8:	f004 f9aa 	bl	8005f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001bec:	2200      	movs	r2, #0
 8001bee:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001bf2:	485a      	ldr	r0, [pc, #360]	; (8001d5c <MX_GPIO_Init+0x258>)
 8001bf4:	f004 f9a4 	bl	8005f40 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c00:	2302      	movs	r3, #2
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4853      	ldr	r0, [pc, #332]	; (8001d58 <MX_GPIO_Init+0x254>)
 8001c0c:	f003 fe46 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001c10:	f248 1378 	movw	r3, #33144	; 0x8178
 8001c14:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	484c      	ldr	r0, [pc, #304]	; (8001d58 <MX_GPIO_Init+0x254>)
 8001c26:	f003 fe39 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001c2a:	233f      	movs	r3, #63	; 0x3f
 8001c2c:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4842      	ldr	r0, [pc, #264]	; (8001d4c <MX_GPIO_Init+0x248>)
 8001c42:	f003 fe2b 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001c46:	2310      	movs	r3, #16
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	483c      	ldr	r0, [pc, #240]	; (8001d50 <MX_GPIO_Init+0x24c>)
 8001c5e:	f003 fe1d 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c66:	4b3e      	ldr	r3, [pc, #248]	; (8001d60 <MX_GPIO_Init+0x25c>)
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4836      	ldr	r0, [pc, #216]	; (8001d50 <MX_GPIO_Init+0x24c>)
 8001c76:	f003 fe11 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001c7a:	239b      	movs	r3, #155	; 0x9b
 8001c7c:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4830      	ldr	r0, [pc, #192]	; (8001d54 <MX_GPIO_Init+0x250>)
 8001c92:	f003 fe03 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001c96:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	482a      	ldr	r0, [pc, #168]	; (8001d58 <MX_GPIO_Init+0x254>)
 8001cb0:	f003 fdf4 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001cb4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4820      	ldr	r0, [pc, #128]	; (8001d54 <MX_GPIO_Init+0x250>)
 8001cd2:	f003 fde3 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001cd6:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001cda:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4619      	mov	r1, r3
 8001cee:	481b      	ldr	r0, [pc, #108]	; (8001d5c <MX_GPIO_Init+0x258>)
 8001cf0:	f003 fdd4 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4814      	ldr	r0, [pc, #80]	; (8001d5c <MX_GPIO_Init+0x258>)
 8001d0a:	f003 fdc7 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d0e:	2320      	movs	r3, #32
 8001d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001d1e:	2309      	movs	r3, #9
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	480a      	ldr	r0, [pc, #40]	; (8001d54 <MX_GPIO_Init+0x250>)
 8001d2a:	f003 fdb7 	bl	800589c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2017      	movs	r0, #23
 8001d34:	f003 f8e2 	bl	8004efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d38:	2017      	movs	r0, #23
 8001d3a:	f003 f90b 	bl	8004f54 <HAL_NVIC_EnableIRQ>

}
 8001d3e:	bf00      	nop
 8001d40:	3730      	adds	r7, #48	; 0x30
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	10210000 	.word	0x10210000

08001d64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <MX_I2C1_Init+0x78>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d70:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <MX_I2C1_Init+0x7c>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001da0:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001da2:	f004 f917 	bl	8005fd4 <HAL_I2C_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dac:	f000 fdd4 	bl	8002958 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001db0:	2100      	movs	r1, #0
 8001db2:	4809      	ldr	r0, [pc, #36]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001db4:	f005 f96e 	bl	8007094 <HAL_I2CEx_ConfigAnalogFilter>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001dbe:	f000 fdcb 	bl	8002958 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001dc6:	f005 f9c5 	bl	8007154 <HAL_I2CEx_ConfigDigitalFilter>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001dd0:	f000 fdc2 	bl	8002958 <Error_Handler>
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000450 	.word	0x20000450
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	00061a80 	.word	0x00061a80

08001de4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_I2C_MspInit+0x84>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12c      	bne.n	8001e60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e28:	2312      	movs	r3, #18
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e34:	2304      	movs	r3, #4
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480c      	ldr	r0, [pc, #48]	; (8001e70 <HAL_I2C_MspInit+0x8c>)
 8001e40:	f003 fd2c 	bl	800589c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e52:	6413      	str	r3, [r2, #64]	; 0x40
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	; 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40005400 	.word	0x40005400
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020400 	.word	0x40020400

08001e74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e7a:	f001 fe67 	bl	8003b4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e7e:	f000 facd 	bl	800241c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001e82:	f005 ffbd 	bl	8007e00 <HAL_RCC_GetHCLKFreq>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4abb      	ldr	r2, [pc, #748]	; (8002178 <main+0x304>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 f877 	bl	8004f84 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e96:	2004      	movs	r0, #4
 8001e98:	f003 f880 	bl	8004f9c <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea4:	f003 f82a 	bl	8004efc <HAL_NVIC_SetPriority>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ea8:	f7ff fe2c 	bl	8001b04 <MX_GPIO_Init>
	MX_DMA_Init();
 8001eac:	f7ff fd44 	bl	8001938 <MX_DMA_Init>
	MX_I2C1_Init();
 8001eb0:	f7ff ff58 	bl	8001d64 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001eb4:	f001 fa06 	bl	80032c4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001eb8:	f001 faa4 	bl	8003404 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8001ebc:	f001 fd4e 	bl	800395c <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8001ec0:	f001 fb1a 	bl	80034f8 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001ec4:	f001 fb9a 	bl	80035fc <MX_TIM8_Init>
	MX_CAN1_Init();
 8001ec8:	f7ff fc7e 	bl	80017c8 <MX_CAN1_Init>
	MX_SPI1_Init();
 8001ecc:	f001 f8f2 	bl	80030b4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//Initialize hardware communication
//	joystick_Init();
//	ADC_Init();
//	ADC_DataRequest();
	ENCODER_Init();
 8001ed0:	f7ff fd52 	bl	8001978 <ENCODER_Init>
//	  DWT_Init();
	while (MPU6050_Init(&hi2c1) == 1);
 8001ed4:	bf00      	nop
 8001ed6:	48a9      	ldr	r0, [pc, #676]	; (800217c <main+0x308>)
 8001ed8:	f000 fd50 	bl	800297c <MPU6050_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d0f9      	beq.n	8001ed6 <main+0x62>
	HAL_Delay(1000);
 8001ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ee6:	f001 fea3 	bl	8003c30 <HAL_Delay>

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 8001eea:	4ba5      	ldr	r3, [pc, #660]	; (8002180 <main+0x30c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4aa5      	ldr	r2, [pc, #660]	; (8002184 <main+0x310>)
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	4ba1      	ldr	r3, [pc, #644]	; (8002180 <main+0x30c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4aa2      	ldr	r2, [pc, #648]	; (8002188 <main+0x314>)
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	ed93 7a00 	vldr	s14, [r3]
 8001f06:	eef0 0a47 	vmov.f32	s1, s14
 8001f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0e:	489f      	ldr	r0, [pc, #636]	; (800218c <main+0x318>)
 8001f10:	f001 fdc8 	bl	8003aa4 <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8001f14:	489e      	ldr	r0, [pc, #632]	; (8002190 <main+0x31c>)
 8001f16:	f006 fd71 	bl	80089fc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	489c      	ldr	r0, [pc, #624]	; (8002190 <main+0x31c>)
 8001f1e:	f006 fecd 	bl	8008cbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8001f22:	2104      	movs	r1, #4
 8001f24:	489a      	ldr	r0, [pc, #616]	; (8002190 <main+0x31c>)
 8001f26:	f006 fec9 	bl	8008cbc <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8001f2a:	4b99      	ldr	r3, [pc, #612]	; (8002190 <main+0x31c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f32:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8001f34:	4b96      	ldr	r3, [pc, #600]	; (8002190 <main+0x31c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(100);
 8001f3e:	2064      	movs	r0, #100	; 0x64
 8001f40:	f001 fe76 	bl	8003c30 <HAL_Delay>

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8001f44:	4893      	ldr	r0, [pc, #588]	; (8002194 <main+0x320>)
 8001f46:	f7ff fa8f 	bl	8001468 <bd25l_Init>
	bd25l_Init(&backMotor);
 8001f4a:	4893      	ldr	r0, [pc, #588]	; (8002198 <main+0x324>)
 8001f4c:	f7ff fa8c 	bl	8001468 <bd25l_Init>
	runMotor(&rearMotor, 0);
 8001f50:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800219c <main+0x328>
 8001f54:	488f      	ldr	r0, [pc, #572]	; (8002194 <main+0x320>)
 8001f56:	f7ff fb87 	bl	8001668 <runMotor>
	runMotor(&backMotor, 0);
 8001f5a:	ed9f 0a90 	vldr	s0, [pc, #576]	; 800219c <main+0x328>
 8001f5e:	488e      	ldr	r0, [pc, #568]	; (8002198 <main+0x324>)
 8001f60:	f7ff fb82 	bl	8001668 <runMotor>
	emBrakeMotor(0);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff faa1 	bl	80014ac <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 8001f6a:	f7ff fa49 	bl	8001400 <hubMotor_Init>
	wheelSpeedControl_Init(&climbWheelSpeed,
 8001f6e:	4b8c      	ldr	r3, [pc, #560]	; (80021a0 <main+0x32c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a8c      	ldr	r2, [pc, #560]	; (80021a4 <main+0x330>)
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	4b88      	ldr	r3, [pc, #544]	; (80021a0 <main+0x32c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a89      	ldr	r2, [pc, #548]	; (80021a8 <main+0x334>)
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	eef0 0a47 	vmov.f32	s1, s14
 8001f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f92:	4886      	ldr	r0, [pc, #536]	; (80021ac <main+0x338>)
 8001f94:	f001 fd86 	bl	8003aa4 <wheelSpeedControl_Init>
			climb_linSpeedLevel[climb_speedLevel],
			climb_angSpeedLevel[climb_speedLevel]);

	//Initialize front and back balance controller
	frontBalance_pid = pid_create(&frontBalance_ctrl, &frontBalance_input,
 8001f98:	4b85      	ldr	r3, [pc, #532]	; (80021b0 <main+0x33c>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	4b85      	ldr	r3, [pc, #532]	; (80021b4 <main+0x340>)
 8001fa0:	ed93 7a00 	vldr	s14, [r3]
 8001fa4:	4b84      	ldr	r3, [pc, #528]	; (80021b8 <main+0x344>)
 8001fa6:	edd3 6a00 	vldr	s13, [r3]
 8001faa:	eeb0 1a66 	vmov.f32	s2, s13
 8001fae:	eef0 0a47 	vmov.f32	s1, s14
 8001fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb6:	4b81      	ldr	r3, [pc, #516]	; (80021bc <main+0x348>)
 8001fb8:	4a81      	ldr	r2, [pc, #516]	; (80021c0 <main+0x34c>)
 8001fba:	4982      	ldr	r1, [pc, #520]	; (80021c4 <main+0x350>)
 8001fbc:	4882      	ldr	r0, [pc, #520]	; (80021c8 <main+0x354>)
 8001fbe:	f7fe ff97 	bl	8000ef0 <pid_create>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a81      	ldr	r2, [pc, #516]	; (80021cc <main+0x358>)
 8001fc6:	6013      	str	r3, [r2, #0]
			&frontBalance_output, &frontBalance_setpoint, frontBalance_kp,
			frontBalance_ki, frontBalance_kd);
	pid_limits(frontBalance_pid, -50, 50);
 8001fc8:	4b80      	ldr	r3, [pc, #512]	; (80021cc <main+0x358>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	eddf 0a80 	vldr	s1, [pc, #512]	; 80021d0 <main+0x35c>
 8001fd0:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80021d4 <main+0x360>
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f917 	bl	8001208 <pid_limits>
	pid_sample(frontBalance_pid, 1);
 8001fda:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <main+0x358>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f8dd 	bl	80011a0 <pid_sample>
	pid_auto(frontBalance_pid);
 8001fe6:	4b79      	ldr	r3, [pc, #484]	; (80021cc <main+0x358>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f971 	bl	80012d2 <pid_auto>

	backBalance_pid = pid_create(&backBalance_ctrl, &backBalance_input,
 8001ff0:	4b79      	ldr	r3, [pc, #484]	; (80021d8 <main+0x364>)
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	4b79      	ldr	r3, [pc, #484]	; (80021dc <main+0x368>)
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <main+0x36c>)
 8001ffe:	edd3 6a00 	vldr	s13, [r3]
 8002002:	eeb0 1a66 	vmov.f32	s2, s13
 8002006:	eef0 0a47 	vmov.f32	s1, s14
 800200a:	eeb0 0a67 	vmov.f32	s0, s15
 800200e:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <main+0x370>)
 8002010:	4a75      	ldr	r2, [pc, #468]	; (80021e8 <main+0x374>)
 8002012:	4976      	ldr	r1, [pc, #472]	; (80021ec <main+0x378>)
 8002014:	4876      	ldr	r0, [pc, #472]	; (80021f0 <main+0x37c>)
 8002016:	f7fe ff6b 	bl	8000ef0 <pid_create>
 800201a:	4603      	mov	r3, r0
 800201c:	4a75      	ldr	r2, [pc, #468]	; (80021f4 <main+0x380>)
 800201e:	6013      	str	r3, [r2, #0]
			&backBalance_output, &backBalance_setpoint, backBalance_kp,
			backBalance_ki, backBalance_kd);
	pid_limits(backBalance_pid, -20, 20);
 8002020:	4b74      	ldr	r3, [pc, #464]	; (80021f4 <main+0x380>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8002028:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f8eb 	bl	8001208 <pid_limits>
	pid_sample(backBalance_pid, 1);
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <main+0x380>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2101      	movs	r1, #1
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f8b1 	bl	80011a0 <pid_sample>
	pid_auto(backBalance_pid);
 800203e:	4b6d      	ldr	r3, [pc, #436]	; (80021f4 <main+0x380>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f945 	bl	80012d2 <pid_auto>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 8002048:	4b6b      	ldr	r3, [pc, #428]	; (80021f8 <main+0x384>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	4b6b      	ldr	r3, [pc, #428]	; (80021fc <main+0x388>)
 8002050:	ed93 7a00 	vldr	s14, [r3]
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <main+0x38c>)
 8002056:	edd3 6a00 	vldr	s13, [r3]
 800205a:	eeb0 1a66 	vmov.f32	s2, s13
 800205e:	eef0 0a47 	vmov.f32	s1, s14
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	4b67      	ldr	r3, [pc, #412]	; (8002204 <main+0x390>)
 8002068:	4a67      	ldr	r2, [pc, #412]	; (8002208 <main+0x394>)
 800206a:	4968      	ldr	r1, [pc, #416]	; (800220c <main+0x398>)
 800206c:	4868      	ldr	r0, [pc, #416]	; (8002210 <main+0x39c>)
 800206e:	f7fe ff3f 	bl	8000ef0 <pid_create>
 8002072:	4603      	mov	r3, r0
 8002074:	4a67      	ldr	r2, [pc, #412]	; (8002214 <main+0x3a0>)
 8002076:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -50, 50);
 8002078:	4b66      	ldr	r3, [pc, #408]	; (8002214 <main+0x3a0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	eddf 0a54 	vldr	s1, [pc, #336]	; 80021d0 <main+0x35c>
 8002080:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80021d4 <main+0x360>
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff f8bf 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 800208a:	4b62      	ldr	r3, [pc, #392]	; (8002214 <main+0x3a0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2101      	movs	r1, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff f885 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 8002096:	4b5f      	ldr	r3, [pc, #380]	; (8002214 <main+0x3a0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f919 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 80020a0:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <main+0x3a4>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <main+0x3a8>)
 80020a8:	ed93 7a00 	vldr	s14, [r3]
 80020ac:	4b5c      	ldr	r3, [pc, #368]	; (8002220 <main+0x3ac>)
 80020ae:	edd3 6a00 	vldr	s13, [r3]
 80020b2:	eeb0 1a66 	vmov.f32	s2, s13
 80020b6:	eef0 0a47 	vmov.f32	s1, s14
 80020ba:	eeb0 0a67 	vmov.f32	s0, s15
 80020be:	4b59      	ldr	r3, [pc, #356]	; (8002224 <main+0x3b0>)
 80020c0:	4a59      	ldr	r2, [pc, #356]	; (8002228 <main+0x3b4>)
 80020c2:	495a      	ldr	r1, [pc, #360]	; (800222c <main+0x3b8>)
 80020c4:	485a      	ldr	r0, [pc, #360]	; (8002230 <main+0x3bc>)
 80020c6:	f7fe ff13 	bl	8000ef0 <pid_create>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a59      	ldr	r2, [pc, #356]	; (8002234 <main+0x3c0>)
 80020ce:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -50, 50);
 80020d0:	4b58      	ldr	r3, [pc, #352]	; (8002234 <main+0x3c0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	eddf 0a3e 	vldr	s1, [pc, #248]	; 80021d0 <main+0x35c>
 80020d8:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80021d4 <main+0x360>
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f893 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 80020e2:	4b54      	ldr	r3, [pc, #336]	; (8002234 <main+0x3c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2101      	movs	r1, #1
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f859 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 80020ee:	4b51      	ldr	r3, [pc, #324]	; (8002234 <main+0x3c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f8ed 	bl	80012d2 <pid_auto>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 80020f8:	f001 fd8e 	bl	8003c18 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]
	ENCODER_Get_Angle(&encoderBack);
 80020fe:	484e      	ldr	r0, [pc, #312]	; (8002238 <main+0x3c4>)
 8002100:	f7ff fccb 	bl	8001a9a <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 8002104:	484d      	ldr	r0, [pc, #308]	; (800223c <main+0x3c8>)
 8002106:	f7ff fcc8 	bl	8001a9a <ENCODER_Get_Angle>
	while(state_count++ < 5000)  MPU6050_Read_All(&hi2c1, &MPU6050);
 800210a:	e003      	b.n	8002114 <main+0x2a0>
 800210c:	494c      	ldr	r1, [pc, #304]	; (8002240 <main+0x3cc>)
 800210e:	481b      	ldr	r0, [pc, #108]	; (800217c <main+0x308>)
 8002110:	f000 fc8e 	bl	8002a30 <MPU6050_Read_All>
 8002114:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <main+0x3d0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	494a      	ldr	r1, [pc, #296]	; (8002244 <main+0x3d0>)
 800211c:	600a      	str	r2, [r1, #0]
 800211e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002122:	4293      	cmp	r3, r2
 8002124:	ddf2      	ble.n	800210c <main+0x298>
	HAL_Delay(500); //Stabilize reading
 8002126:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800212a:	f001 fd81 	bl	8003c30 <HAL_Delay>
	initial_angle = MPU6050.KalmanAngleX;
 800212e:	4b44      	ldr	r3, [pc, #272]	; (8002240 <main+0x3cc>)
 8002130:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002134:	4944      	ldr	r1, [pc, #272]	; (8002248 <main+0x3d4>)
 8002136:	e9c1 2300 	strd	r2, r3, [r1]
	state_count = 0;
 800213a:	4b42      	ldr	r3, [pc, #264]	; (8002244 <main+0x3d0>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 8002140:	2001      	movs	r0, #1
 8002142:	f7ff f9b3 	bl	80014ac <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
		//debug variable
	uint32_t debug_prev_time = HAL_GetTick();
 8002146:	f001 fd67 	bl	8003c18 <HAL_GetTick>
 800214a:	60b8      	str	r0, [r7, #8]
	uint8_t led_status = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	71fb      	strb	r3, [r7, #7]
	//  float speed = 0;
	while (1) {
		//Code to debug with blinking LED
		if (HAL_GetTick() - debug_prev_time >= 1000) {
 8002150:	f001 fd62 	bl	8003c18 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800215e:	f0c0 8084 	bcc.w	800226a <main+0x3f6>
			if (led_status == 0) {
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d173      	bne.n	8002250 <main+0x3dc>
				//	      count++;
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	2108      	movs	r1, #8
 800216c:	4837      	ldr	r0, [pc, #220]	; (800224c <main+0x3d8>)
 800216e:	f003 fee7 	bl	8005f40 <HAL_GPIO_WritePin>
				led_status = 1;
 8002172:	2301      	movs	r3, #1
 8002174:	71fb      	strb	r3, [r7, #7]
 8002176:	e075      	b.n	8002264 <main+0x3f0>
 8002178:	10624dd3 	.word	0x10624dd3
 800217c:	20000450 	.word	0x20000450
 8002180:	20000108 	.word	0x20000108
 8002184:	0800bf4c 	.word	0x0800bf4c
 8002188:	0800bf58 	.word	0x0800bf58
 800218c:	200000d8 	.word	0x200000d8
 8002190:	20000668 	.word	0x20000668
 8002194:	20000000 	.word	0x20000000
 8002198:	20000034 	.word	0x20000034
 800219c:	00000000 	.word	0x00000000
 80021a0:	200002dc 	.word	0x200002dc
 80021a4:	0800bf64 	.word	0x0800bf64
 80021a8:	0800bf70 	.word	0x0800bf70
 80021ac:	20000128 	.word	0x20000128
 80021b0:	2000029c 	.word	0x2000029c
 80021b4:	200002a0 	.word	0x200002a0
 80021b8:	200002a4 	.word	0x200002a4
 80021bc:	20000298 	.word	0x20000298
 80021c0:	20000294 	.word	0x20000294
 80021c4:	20000290 	.word	0x20000290
 80021c8:	200004ac 	.word	0x200004ac
 80021cc:	200005c8 	.word	0x200005c8
 80021d0:	42480000 	.word	0x42480000
 80021d4:	c2480000 	.word	0xc2480000
 80021d8:	2000010c 	.word	0x2000010c
 80021dc:	200002b4 	.word	0x200002b4
 80021e0:	200002b8 	.word	0x200002b8
 80021e4:	200002b0 	.word	0x200002b0
 80021e8:	200002ac 	.word	0x200002ac
 80021ec:	200002a8 	.word	0x200002a8
 80021f0:	200004e8 	.word	0x200004e8
 80021f4:	20000580 	.word	0x20000580
 80021f8:	20000110 	.word	0x20000110
 80021fc:	20000114 	.word	0x20000114
 8002200:	20000118 	.word	0x20000118
 8002204:	200002cc 	.word	0x200002cc
 8002208:	200002c8 	.word	0x200002c8
 800220c:	200002c4 	.word	0x200002c4
 8002210:	200005d0 	.word	0x200005d0
 8002214:	200005cc 	.word	0x200005cc
 8002218:	2000011c 	.word	0x2000011c
 800221c:	20000120 	.word	0x20000120
 8002220:	20000124 	.word	0x20000124
 8002224:	200002d8 	.word	0x200002d8
 8002228:	200002d4 	.word	0x200002d4
 800222c:	200002d0 	.word	0x200002d0
 8002230:	20000584 	.word	0x20000584
 8002234:	20000620 	.word	0x20000620
 8002238:	200003fc 	.word	0x200003fc
 800223c:	200003a8 	.word	0x200003a8
 8002240:	20000520 	.word	0x20000520
 8002244:	200002e0 	.word	0x200002e0
 8002248:	20000288 	.word	0x20000288
 800224c:	40020400 	.word	0x40020400
			} else if (led_status == 1) {
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d106      	bne.n	8002264 <main+0x3f0>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002256:	2200      	movs	r2, #0
 8002258:	2108      	movs	r1, #8
 800225a:	485b      	ldr	r0, [pc, #364]	; (80023c8 <main+0x554>)
 800225c:	f003 fe70 	bl	8005f40 <HAL_GPIO_WritePin>
				led_status = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	71fb      	strb	r3, [r7, #7]
			}
			debug_prev_time = HAL_GetTick();
 8002264:	f001 fcd8 	bl	8003c18 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]

		//      runMotor(&backMotor, speed++, 1);xia
//		ENCODER_Get_Angle(&encoderBack);
//		ENCODER_Get_Angle(&encoderFront);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1) {
 800226a:	f001 fcd5 	bl	8003c18 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4293      	cmp	r3, r2
 8002274:	f43f af6c 	beq.w	8002150 <main+0x2dc>
			//	ADC_DataRequest();
			ENCODER_Read(&encoderBack);
 8002278:	4854      	ldr	r0, [pc, #336]	; (80023cc <main+0x558>)
 800227a:	f7ff fbe6 	bl	8001a4a <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 800227e:	4854      	ldr	r0, [pc, #336]	; (80023d0 <main+0x55c>)
 8002280:	f7ff fbe3 	bl	8001a4a <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
			MPU6050_Read_All(&hi2c1, &MPU6050);
 8002284:	4953      	ldr	r1, [pc, #332]	; (80023d4 <main+0x560>)
 8002286:	4854      	ldr	r0, [pc, #336]	; (80023d8 <main+0x564>)
 8002288:	f000 fbd2 	bl	8002a30 <MPU6050_Read_All>
			GPIO_Digital_Filtered_Input(&button1, 30);
 800228c:	211e      	movs	r1, #30
 800228e:	4853      	ldr	r0, [pc, #332]	; (80023dc <main+0x568>)
 8002290:	f7ff fa61 	bl	8001756 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 8002294:	211e      	movs	r1, #30
 8002296:	4852      	ldr	r0, [pc, #328]	; (80023e0 <main+0x56c>)
 8002298:	f7ff fa5d 	bl	8001756 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 800229c:	211e      	movs	r1, #30
 800229e:	4851      	ldr	r0, [pc, #324]	; (80023e4 <main+0x570>)
 80022a0:	f7ff fa59 	bl	8001756 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 80022a4:	2105      	movs	r1, #5
 80022a6:	4850      	ldr	r0, [pc, #320]	; (80023e8 <main+0x574>)
 80022a8:	f7ff fa55 	bl	8001756 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 80022ac:	2105      	movs	r1, #5
 80022ae:	484f      	ldr	r0, [pc, #316]	; (80023ec <main+0x578>)
 80022b0:	f7ff fa51 	bl	8001756 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 80022b4:	2105      	movs	r1, #5
 80022b6:	484e      	ldr	r0, [pc, #312]	; (80023f0 <main+0x57c>)
 80022b8:	f7ff fa4d 	bl	8001756 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 80022bc:	2105      	movs	r1, #5
 80022be:	484d      	ldr	r0, [pc, #308]	; (80023f4 <main+0x580>)
 80022c0:	f7ff fa49 	bl	8001756 <GPIO_Digital_Filtered_Input>
//				send_HubMotor(410, 410);

			//---------------------------------------------------------------------------------------------------
			//Testing Climbing Position Control
			//---------------------------------------------------------------------------------------------------
			if (button2.state == GPIO_PIN_SET && state_count++ > 10) {
 80022c4:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <main+0x56c>)
 80022c6:	7a1b      	ldrb	r3, [r3, #8]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d118      	bne.n	80022fe <main+0x48a>
 80022cc:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <main+0x584>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	4949      	ldr	r1, [pc, #292]	; (80023f8 <main+0x584>)
 80022d4:	600a      	str	r2, [r1, #0]
 80022d6:	2b0a      	cmp	r3, #10
 80022d8:	dd11      	ble.n	80022fe <main+0x48a>
				state_count = 0;
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <main+0x584>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
				if (state == TEST) {
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <main+0x588>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d103      	bne.n	80022f0 <main+0x47c>
					state = NORMAL;
 80022e8:	4b44      	ldr	r3, [pc, #272]	; (80023fc <main+0x588>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e006      	b.n	80022fe <main+0x48a>
				} else if (state == NORMAL)
 80022f0:	4b42      	ldr	r3, [pc, #264]	; (80023fc <main+0x588>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d102      	bne.n	80022fe <main+0x48a>
					state = TEST;
 80022f8:	4b40      	ldr	r3, [pc, #256]	; (80023fc <main+0x588>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
			}
			if (state == TEST) {
 80022fe:	4b3f      	ldr	r3, [pc, #252]	; (80023fc <main+0x588>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <main+0x4aa>
				goto_pos(0, backClimb_pid);
 8002306:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <main+0x58c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	2000      	movs	r0, #0
 800230e:	f000 fa37 	bl	8002780 <goto_pos>
				goto_pos(0, frontClimb_pid);
 8002312:	4b3c      	ldr	r3, [pc, #240]	; (8002404 <main+0x590>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4619      	mov	r1, r3
 8002318:	2000      	movs	r0, #0
 800231a:	f000 fa31 	bl	8002780 <goto_pos>
			}

			if (state == NORMAL) {
 800231e:	4b37      	ldr	r3, [pc, #220]	; (80023fc <main+0x588>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d124      	bne.n	8002370 <main+0x4fc>
				if (button1.state == GPIO_PIN_SET
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <main+0x568>)
 8002328:	7a1b      	ldrb	r3, [r3, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <main+0x4ca>
						&& button3.state == GPIO_PIN_RESET)
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <main+0x570>)
 8002330:	7a1b      	ldrb	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <main+0x4ca>
					speed[FRONT_INDEX] = 30;
 8002336:	4b34      	ldr	r3, [pc, #208]	; (8002408 <main+0x594>)
 8002338:	4a34      	ldr	r2, [pc, #208]	; (800240c <main+0x598>)
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e013      	b.n	8002366 <main+0x4f2>
				else if (button1.state == GPIO_PIN_SET
 800233e:	4b27      	ldr	r3, [pc, #156]	; (80023dc <main+0x568>)
 8002340:	7a1b      	ldrb	r3, [r3, #8]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <main+0x4e2>
						&& button3.state == GPIO_PIN_SET)
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <main+0x570>)
 8002348:	7a1b      	ldrb	r3, [r3, #8]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d103      	bne.n	8002356 <main+0x4e2>
					speed[FRONT_INDEX] = -30;
 800234e:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <main+0x594>)
 8002350:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <main+0x59c>)
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e007      	b.n	8002366 <main+0x4f2>
				else if (button1.state == GPIO_PIN_RESET)
 8002356:	4b21      	ldr	r3, [pc, #132]	; (80023dc <main+0x568>)
 8002358:	7a1b      	ldrb	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <main+0x4f2>
					speed[FRONT_INDEX] = 0;
 800235e:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <main+0x594>)
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
				pid_reset(frontClimb_pid);
 8002366:	4b27      	ldr	r3, [pc, #156]	; (8002404 <main+0x590>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff f82a 	bl	80013c4 <pid_reset>
			}
			runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002370:	4b25      	ldr	r3, [pc, #148]	; (8002408 <main+0x594>)
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	eeb0 0a67 	vmov.f32	s0, s15
 800237a:	4826      	ldr	r0, [pc, #152]	; (8002414 <main+0x5a0>)
 800237c:	f7ff f974 	bl	8001668 <runMotor>
//					speed[BACK_INDEX] = -30;
//				else if (button1.state == GPIO_PIN_RESET)
//					speed[BACK_INDEX] = 0;
//				pid_reset(backClimb_pid);
//			}
			runMotor(&backMotor, speed[BACK_INDEX]);
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <main+0x594>)
 8002382:	edd3 7a01 	vldr	s15, [r3, #4]
 8002386:	eeb0 0a67 	vmov.f32	s0, s15
 800238a:	4823      	ldr	r0, [pc, #140]	; (8002418 <main+0x5a4>)
 800238c:	f7ff f96c 	bl	8001668 <runMotor>
			//	}


//			if ((speed[FRONT_INDEX] <= 5 || speed[FRONT_INDEX] >= -5) && (speed[BACK_INDEX] <= 5 ||speed[BACK_INDEX] >= -5 )
//
			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002390:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <main+0x594>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	eef5 7a40 	vcmp.f32	s15, #0.0
 800239a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239e:	d10b      	bne.n	80023b8 <main+0x544>
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <main+0x594>)
 80023a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80023a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	d103      	bne.n	80023b8 <main+0x544>
				emBrakeMotor(0);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7ff f87b 	bl	80014ac <emBrakeMotor>
 80023b6:	e002      	b.n	80023be <main+0x54a>
			else
				emBrakeMotor(1);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f7ff f877 	bl	80014ac <emBrakeMotor>
			//	    back_touchdown = 1;
			//	}
			//
			//	//Climbing phase start

			prev_time = HAL_GetTick();
 80023be:	f001 fc2b 	bl	8003c18 <HAL_GetTick>
 80023c2:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - debug_prev_time >= 1000) {
 80023c4:	e6c4      	b.n	8002150 <main+0x2dc>
 80023c6:	bf00      	nop
 80023c8:	40020400 	.word	0x40020400
 80023cc:	200003fc 	.word	0x200003fc
 80023d0:	200003a8 	.word	0x200003a8
 80023d4:	20000520 	.word	0x20000520
 80023d8:	20000450 	.word	0x20000450
 80023dc:	200000a8 	.word	0x200000a8
 80023e0:	200000b8 	.word	0x200000b8
 80023e4:	200000c8 	.word	0x200000c8
 80023e8:	20000068 	.word	0x20000068
 80023ec:	20000078 	.word	0x20000078
 80023f0:	20000088 	.word	0x20000088
 80023f4:	20000098 	.word	0x20000098
 80023f8:	200002e0 	.word	0x200002e0
 80023fc:	20000158 	.word	0x20000158
 8002400:	20000620 	.word	0x20000620
 8002404:	200005cc 	.word	0x200005cc
 8002408:	200002bc 	.word	0x200002bc
 800240c:	41f00000 	.word	0x41f00000
 8002410:	c1f00000 	.word	0xc1f00000
 8002414:	20000000 	.word	0x20000000
 8002418:	20000034 	.word	0x20000034

0800241c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b094      	sub	sp, #80	; 0x50
 8002420:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002422:	f107 0320 	add.w	r3, r7, #32
 8002426:	2230      	movs	r2, #48	; 0x30
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f009 f8dc 	bl	800b5e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002440:	2300      	movs	r3, #0
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <SystemClock_Config+0xd8>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	4a2a      	ldr	r2, [pc, #168]	; (80024f4 <SystemClock_Config+0xd8>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244e:	6413      	str	r3, [r2, #64]	; 0x40
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <SystemClock_Config+0xd8>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800245c:	2300      	movs	r3, #0
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <SystemClock_Config+0xdc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <SystemClock_Config+0xdc>)
 8002466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <SystemClock_Config+0xdc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002478:	2301      	movs	r3, #1
 800247a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800247c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002482:	2302      	movs	r3, #2
 8002484:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002486:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800248c:	2308      	movs	r3, #8
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002490:	23b4      	movs	r3, #180	; 0xb4
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002494:	2302      	movs	r3, #2
 8002496:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002498:	2304      	movs	r3, #4
 800249a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800249c:	f107 0320 	add.w	r3, r7, #32
 80024a0:	4618      	mov	r0, r3
 80024a2:	f004 ff07 	bl	80072b4 <HAL_RCC_OscConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <SystemClock_Config+0x94>
		Error_Handler();
 80024ac:	f000 fa54 	bl	8002958 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80024b0:	f004 feb0 	bl	8007214 <HAL_PWREx_EnableOverDrive>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <SystemClock_Config+0xa2>
		Error_Handler();
 80024ba:	f000 fa4d 	bl	8002958 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80024be:	230f      	movs	r3, #15
 80024c0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c2:	2302      	movs	r3, #2
 80024c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024ce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	2105      	movs	r1, #5
 80024dc:	4618      	mov	r0, r3
 80024de:	f005 fa09 	bl	80078f4 <HAL_RCC_ClockConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SystemClock_Config+0xd0>
		Error_Handler();
 80024e8:	f000 fa36 	bl	8002958 <Error_Handler>
	}
}
 80024ec:	bf00      	nop
 80024ee:	3750      	adds	r7, #80	; 0x50
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40007000 	.word	0x40007000

080024fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d11c      	bne.n	8002546 <HAL_GPIO_EXTI_Callback+0x4a>
	case AD_BUSY_Pin: {
		if (HAL_GetTick() - prev_adc_time > 1) {
 800250c:	f001 fb84 	bl	8003c18 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_GPIO_EXTI_Callback+0x58>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d916      	bls.n	800254a <HAL_GPIO_EXTI_Callback+0x4e>
			ADC_Read(&adc_rawData[0]);
 800251c:	480e      	ldr	r0, [pc, #56]	; (8002558 <HAL_GPIO_EXTI_Callback+0x5c>)
 800251e:	f7fe ff87 	bl	8001430 <ADC_Read>
			tempJoyRawDataX = adc_rawData[0];
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002528:	461a      	mov	r2, r3
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_GPIO_EXTI_Callback+0x60>)
 800252c:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002530:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002534:	461a      	mov	r2, r3
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_GPIO_EXTI_Callback+0x64>)
 8002538:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 800253a:	f001 fb6d 	bl	8003c18 <HAL_GetTick>
 800253e:	4603      	mov	r3, r0
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <HAL_GPIO_EXTI_Callback+0x58>)
 8002542:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002544:	e001      	b.n	800254a <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002546:	bf00      	nop
 8002548:	e000      	b.n	800254c <HAL_GPIO_EXTI_Callback+0x50>
		break;
 800254a:	bf00      	nop
	}
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000284 	.word	0x20000284
 8002558:	200005b8 	.word	0x200005b8
 800255c:	2000061c 	.word	0x2000061c
 8002560:	200004a8 	.word	0x200004a8
 8002564:	00000000 	.word	0x00000000

08002568 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1) {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a7b      	ldr	r2, [pc, #492]	; (8002760 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	f040 80e6 	bne.w	8002746 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	4a79      	ldr	r2, [pc, #484]	; (8002764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8002580:	2100      	movs	r1, #0
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f002 f84a 	bl	800461c <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT) {
 8002588:	7a7b      	ldrb	r3, [r7, #9]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d144      	bne.n	8002618 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	4975      	ldr	r1, [pc, #468]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fa07 	bl	80019a8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 800259a:	4873      	ldr	r0, [pc, #460]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800259c:	f7ff fa7d 	bl	8001a9a <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos
 80025a0:	4b71      	ldr	r3, [pc, #452]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (uint32_t) (4096 * BACK_GEAR_RATIO);
 80025a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
					- encoderBack.encoder_pos
 80025a8:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
 80025ac:	4a6e      	ldr	r2, [pc, #440]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80025ae:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 80025b0:	4b6d      	ldr	r3, [pc, #436]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 80025bc:	eddf 6a6b 	vldr	s13, [pc, #428]	; 800276c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 80025c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025c4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002770 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 80025c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025cc:	ee17 0a90 	vmov	r0, s15
 80025d0:	f7fd ff72 	bl	80004b8 <__aeabi_f2d>
 80025d4:	a35e      	add	r3, pc, #376	; (adr r3, 8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fd fe0f 	bl	80001fc <__adddf3>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe fab7 	bl	8000b58 <__aeabi_d2f>
 80025ea:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 80025ec:	4a5e      	ldr	r2, [pc, #376]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80025ee:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 80025f0:	4b5d      	ldr	r3, [pc, #372]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80025f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80025f6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002770 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 80025fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002602:	dd09      	ble.n	8002618 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
				encoderBack.angleDeg -= 360;
 8002604:	4b58      	ldr	r3, [pc, #352]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002606:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800260a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002770 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 800260e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002612:	4b55      	ldr	r3, [pc, #340]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002614:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
		if (incoming[1] == ENC_ADDR_RIGHT) {
 8002618:	7a7b      	ldrb	r3, [r7, #9]
 800261a:	2b02      	cmp	r3, #2
 800261c:	f040 8093 	bne.w	8002746 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	4953      	ldr	r1, [pc, #332]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f9be 	bl	80019a8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 800262c:	4851      	ldr	r0, [pc, #324]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800262e:	f7ff fa34 	bl	8001a9a <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000) {
 8002632:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 800263a:	f247 522f 	movw	r2, #29999	; 0x752f
 800263e:	4293      	cmp	r3, r2
 8002640:	d839      	bhi.n	80026b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 800264a:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800264c:	fba3 1302 	umull	r1, r3, r3, r2
 8002650:	0b5b      	lsrs	r3, r3, #13
 8002652:	f242 3133 	movw	r1, #9011	; 0x2333
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 800265c:	4a45      	ldr	r2, [pc, #276]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800265e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002660:	4b44      	ldr	r3, [pc, #272]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	ee07 3a90 	vmov	s15, r3
 8002668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266c:	ee17 0a90 	vmov	r0, s15
 8002670:	f7fd ff22 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002674:	a338      	add	r3, pc, #224	; (adr r3, 8002758 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fe f89f 	bl	80007bc <__aeabi_ddiv>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	4b3c      	ldr	r3, [pc, #240]	; (800277c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800268c:	f7fd ff6c 	bl	8000568 <__aeabi_dmul>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	a32d      	add	r3, pc, #180	; (adr r3, 8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fd fdad 	bl	80001fc <__adddf3>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe fa55 	bl	8000b58 <__aeabi_d2f>
 80026ae:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80026b0:	4a30      	ldr	r2, [pc, #192]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80026b2:	6413      	str	r3, [r2, #64]	; 0x40
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
			}
		}
	}
}
 80026b4:	e047      	b.n	8002746 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
						- encoderFront.encoder_pos;
 80026b6:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd feda 	bl	8000474 <__aeabi_ui2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	a124      	add	r1, pc, #144	; (adr r1, 8002758 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80026c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ca:	f7fd fd95 	bl	80001f8 <__aeabi_dsub>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe fa1f 	bl	8000b18 <__aeabi_d2uiz>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a25      	ldr	r2, [pc, #148]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80026de:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80026e0:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ec:	ee17 0a90 	vmov	r0, s15
 80026f0:	f7fd fee2 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 80026f4:	a318      	add	r3, pc, #96	; (adr r3, 8002758 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f7fe f85f 	bl	80007bc <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800270c:	f7fd ff2c 	bl	8000568 <__aeabi_dmul>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	a30d      	add	r3, pc, #52	; (adr r3, 8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f7fd fd6d 	bl	80001fc <__adddf3>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002730:	f7fd fd62 	bl	80001f8 <__aeabi_dsub>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe fa0c 	bl	8000b58 <__aeabi_d2f>
 8002740:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002742:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	d0e56042 	.word	0xd0e56042
 8002754:	40424b22 	.word	0x40424b22
 8002758:	9999999a 	.word	0x9999999a
 800275c:	40c19999 	.word	0x40c19999
 8002760:	20000358 	.word	0x20000358
 8002764:	200002e4 	.word	0x200002e4
 8002768:	200003fc 	.word	0x200003fc
 800276c:	46000000 	.word	0x46000000
 8002770:	43b40000 	.word	0x43b40000
 8002774:	200003a8 	.word	0x200003a8
 8002778:	e8bb8111 	.word	0xe8bb8111
 800277c:	40768000 	.word	0x40768000

08002780 <goto_pos>:
	lifting_mode = 0;
	retraction_mode = 0;
	forward_distance = BASE_LENGTH;
}

void goto_pos(int enc, PID_t pid_t) {
 8002780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
//	&& encoderFront.encoder_pos >= MIN_FRONT_ALLOWABLE_ENC 	&& cur_enc_pos <= MAX_FRONT_ALLOWABLE_ENC
	int cur_enc_pos;

	if (pid_t == frontClimb_pid) {
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <goto_pos+0x1a8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d168      	bne.n	8002868 <goto_pos+0xe8>
		cur_enc_pos = (int) encoderFront.encoder_pos;
 8002796:	4b65      	ldr	r3, [pc, #404]	; (800292c <goto_pos+0x1ac>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	60fb      	str	r3, [r7, #12]
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 10) {
 800279c:	4b62      	ldr	r3, [pc, #392]	; (8002928 <goto_pos+0x1a8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fbe7 	bl	8000f74 <pid_need_compute>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d058      	beq.n	800285e <goto_pos+0xde>
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fe6e 	bl	8000494 <__aeabi_i2d>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4690      	mov	r8, r2
 80027be:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	4b5a      	ldr	r3, [pc, #360]	; (8002930 <goto_pos+0x1b0>)
 80027c8:	4640      	mov	r0, r8
 80027ca:	4649      	mov	r1, r9
 80027cc:	f7fe f95c 	bl	8000a88 <__aeabi_dcmpgt>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d043      	beq.n	800285e <goto_pos+0xde>
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80027dc:	4293      	cmp	r3, r2
 80027de:	d90f      	bls.n	8002800 <goto_pos+0x80>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7fd fe57 	bl	8000494 <__aeabi_i2d>
 80027e6:	a34e      	add	r3, pc, #312	; (adr r3, 8002920 <goto_pos+0x1a0>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd fd04 	bl	80001f8 <__aeabi_dsub>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7fe f966 	bl	8000ac8 <__aeabi_d2iz>
 80027fc:	4603      	mov	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002806:	4293      	cmp	r3, r2
 8002808:	d30f      	bcc.n	800282a <goto_pos+0xaa>
				enc -= 4096 * FRONT_GEAR_RATIO;
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fd fe42 	bl	8000494 <__aeabi_i2d>
 8002810:	a343      	add	r3, pc, #268	; (adr r3, 8002920 <goto_pos+0x1a0>)
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	f7fd fcef 	bl	80001f8 <__aeabi_dsub>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f7fe f951 	bl	8000ac8 <__aeabi_d2iz>
 8002826:	4603      	mov	r3, r0
 8002828:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002834:	4b3f      	ldr	r3, [pc, #252]	; (8002934 <goto_pos+0x1b4>)
 8002836:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	ee07 3a90 	vmov	s15, r3
 8002840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002844:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <goto_pos+0x1b8>)
 8002846:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 800284a:	4b37      	ldr	r3, [pc, #220]	; (8002928 <goto_pos+0x1a8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fba5 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 8002854:	4b39      	ldr	r3, [pc, #228]	; (800293c <goto_pos+0x1bc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a39      	ldr	r2, [pc, #228]	; (8002940 <goto_pos+0x1c0>)
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e05a      	b.n	8002914 <goto_pos+0x194>

		} else {
			speed[FRONT_INDEX] = 0;
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <goto_pos+0x1c0>)
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
			speed[BACK_INDEX] = backClimb_output;
		} else {
			speed[BACK_INDEX] = 0;
		}
	}
}
 8002866:	e055      	b.n	8002914 <goto_pos+0x194>
	} else if (pid_t == backClimb_pid) {
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <goto_pos+0x1c4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d150      	bne.n	8002914 <goto_pos+0x194>
		cur_enc_pos = (int) encoderBack.encoder_pos;
 8002872:	4b35      	ldr	r3, [pc, #212]	; (8002948 <goto_pos+0x1c8>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	60fb      	str	r3, [r7, #12]
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 10) {
 8002878:	4b32      	ldr	r3, [pc, #200]	; (8002944 <goto_pos+0x1c4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fb79 	bl	8000f74 <pid_need_compute>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d040      	beq.n	800290a <goto_pos+0x18a>
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe00 	bl	8000494 <__aeabi_i2d>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4614      	mov	r4, r2
 800289a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	4b23      	ldr	r3, [pc, #140]	; (8002930 <goto_pos+0x1b0>)
 80028a4:	4620      	mov	r0, r4
 80028a6:	4629      	mov	r1, r5
 80028a8:	f7fe f8ee 	bl	8000a88 <__aeabi_dcmpgt>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d02b      	beq.n	800290a <goto_pos+0x18a>
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f640 3204 	movw	r2, #2820	; 0xb04
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d903      	bls.n	80028c4 <goto_pos+0x144>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80028c2:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f640 3204 	movw	r2, #2820	; 0xb04
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d303      	bcc.n	80028d6 <goto_pos+0x156>
				enc -= 4096 * BACK_GEAR_RATIO;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80028d4:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	ee07 3a90 	vmov	s15, r3
 80028dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <goto_pos+0x1cc>)
 80028e2:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <goto_pos+0x1d0>)
 80028f2:	edc3 7a00 	vstr	s15, [r3]
			pid_compute(backClimb_pid);
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <goto_pos+0x1c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fb4f 	bl	8000f9e <pid_compute>
			speed[BACK_INDEX] = backClimb_output;
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <goto_pos+0x1d4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <goto_pos+0x1c0>)
 8002906:	6053      	str	r3, [r2, #4]
 8002908:	e004      	b.n	8002914 <goto_pos+0x194>
			speed[BACK_INDEX] = 0;
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <goto_pos+0x1c0>)
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	605a      	str	r2, [r3, #4]
}
 8002912:	e7ff      	b.n	8002914 <goto_pos+0x194>
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800291e:	bf00      	nop
 8002920:	9999999a 	.word	0x9999999a
 8002924:	40c19999 	.word	0x40c19999
 8002928:	200005cc 	.word	0x200005cc
 800292c:	200003a8 	.word	0x200003a8
 8002930:	40240000 	.word	0x40240000
 8002934:	200002cc 	.word	0x200002cc
 8002938:	200002c4 	.word	0x200002c4
 800293c:	200002c8 	.word	0x200002c8
 8002940:	200002bc 	.word	0x200002bc
 8002944:	20000620 	.word	0x20000620
 8002948:	200003fc 	.word	0x200003fc
 800294c:	200002d8 	.word	0x200002d8
 8002950:	200002d0 	.word	0x200002d0
 8002954:	200002d4 	.word	0x200002d4

08002958 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af04      	add	r7, sp, #16
 8002982:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002984:	2364      	movs	r3, #100	; 0x64
 8002986:	9302      	str	r3, [sp, #8]
 8002988:	2301      	movs	r3, #1
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	f107 030f 	add.w	r3, r7, #15
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2301      	movs	r3, #1
 8002994:	2275      	movs	r2, #117	; 0x75
 8002996:	21d0      	movs	r1, #208	; 0xd0
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f003 fded 	bl	8006578 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	2b68      	cmp	r3, #104	; 0x68
 80029a2:	d13d      	bne.n	8002a20 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80029a8:	2364      	movs	r3, #100	; 0x64
 80029aa:	9302      	str	r3, [sp, #8]
 80029ac:	2301      	movs	r3, #1
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	f107 030e 	add.w	r3, r7, #14
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2301      	movs	r3, #1
 80029b8:	226b      	movs	r2, #107	; 0x6b
 80029ba:	21d0      	movs	r1, #208	; 0xd0
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f003 fcd5 	bl	800636c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80029c2:	2307      	movs	r3, #7
 80029c4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80029c6:	2364      	movs	r3, #100	; 0x64
 80029c8:	9302      	str	r3, [sp, #8]
 80029ca:	2301      	movs	r3, #1
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	f107 030e 	add.w	r3, r7, #14
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2301      	movs	r3, #1
 80029d6:	2219      	movs	r2, #25
 80029d8:	21d0      	movs	r1, #208	; 0xd0
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f003 fcc6 	bl	800636c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80029e4:	2364      	movs	r3, #100	; 0x64
 80029e6:	9302      	str	r3, [sp, #8]
 80029e8:	2301      	movs	r3, #1
 80029ea:	9301      	str	r3, [sp, #4]
 80029ec:	f107 030e 	add.w	r3, r7, #14
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2301      	movs	r3, #1
 80029f4:	221c      	movs	r2, #28
 80029f6:	21d0      	movs	r1, #208	; 0xd0
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f003 fcb7 	bl	800636c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002a02:	2364      	movs	r3, #100	; 0x64
 8002a04:	9302      	str	r3, [sp, #8]
 8002a06:	2301      	movs	r3, #1
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	f107 030e 	add.w	r3, r7, #14
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2301      	movs	r3, #1
 8002a12:	221b      	movs	r2, #27
 8002a14:	21d0      	movs	r1, #208	; 0xd0
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f003 fca8 	bl	800636c <HAL_I2C_Mem_Write>
        return 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <MPU6050_Init+0xa6>
    }
    return 1;
 8002a20:	2301      	movs	r3, #1
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	0000      	movs	r0, r0
 8002a2c:	0000      	movs	r0, r0
	...

08002a30 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a34:	b094      	sub	sp, #80	; 0x50
 8002a36:	af04      	add	r7, sp, #16
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002a3c:	2364      	movs	r3, #100	; 0x64
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	230e      	movs	r3, #14
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	f107 0308 	add.w	r3, r7, #8
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	223b      	movs	r2, #59	; 0x3b
 8002a4e:	21d0      	movs	r1, #208	; 0xd0
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f003 fd91 	bl	8006578 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002a56:	7a3b      	ldrb	r3, [r7, #8]
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	b21a      	sxth	r2, r3
 8002a5c:	7a7b      	ldrb	r3, [r7, #9]
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	4313      	orrs	r3, r2
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002a68:	7abb      	ldrb	r3, [r7, #10]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	b21a      	sxth	r2, r3
 8002a6e:	7afb      	ldrb	r3, [r7, #11]
 8002a70:	b21b      	sxth	r3, r3
 8002a72:	4313      	orrs	r3, r2
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002a7a:	7b3b      	ldrb	r3, [r7, #12]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	b21a      	sxth	r2, r3
 8002a80:	7b7b      	ldrb	r3, [r7, #13]
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b21a      	sxth	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002a8c:	7bbb      	ldrb	r3, [r7, #14]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	b21a      	sxth	r2, r3
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002a9a:	7c3b      	ldrb	r3, [r7, #16]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	b21a      	sxth	r2, r3
 8002aa0:	7c7b      	ldrb	r3, [r7, #17]
 8002aa2:	b21b      	sxth	r3, r3
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	b21a      	sxth	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002aac:	7cbb      	ldrb	r3, [r7, #18]
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	b21a      	sxth	r2, r3
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	b21b      	sxth	r3, r3
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002abe:	7d3b      	ldrb	r3, [r7, #20]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	b21a      	sxth	r2, r3
 8002ac4:	7d7b      	ldrb	r3, [r7, #21]
 8002ac6:	b21b      	sxth	r3, r3
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	b21a      	sxth	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fd fcdc 	bl	8000494 <__aeabi_i2d>
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	4bbd      	ldr	r3, [pc, #756]	; (8002dd8 <MPU6050_Read_All+0x3a8>)
 8002ae2:	f7fd fe6b 	bl	80007bc <__aeabi_ddiv>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	6839      	ldr	r1, [r7, #0]
 8002aec:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fccc 	bl	8000494 <__aeabi_i2d>
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	4bb5      	ldr	r3, [pc, #724]	; (8002dd8 <MPU6050_Read_All+0x3a8>)
 8002b02:	f7fd fe5b 	bl	80007bc <__aeabi_ddiv>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	6839      	ldr	r1, [r7, #0]
 8002b0c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fcbc 	bl	8000494 <__aeabi_i2d>
 8002b1c:	a3a8      	add	r3, pc, #672	; (adr r3, 8002dc0 <MPU6050_Read_All+0x390>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fe4b 	bl	80007bc <__aeabi_ddiv>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002b30:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b3c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002ddc <MPU6050_Read_All+0x3ac>
 8002b40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b44:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002de0 <MPU6050_Read_All+0x3b0>
 8002b48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fd fc9b 	bl	8000494 <__aeabi_i2d>
 8002b5e:	a39a      	add	r3, pc, #616	; (adr r3, 8002dc8 <MPU6050_Read_All+0x398>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f7fd fe2a 	bl	80007bc <__aeabi_ddiv>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	6839      	ldr	r1, [r7, #0]
 8002b6e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fc8b 	bl	8000494 <__aeabi_i2d>
 8002b7e:	a392      	add	r3, pc, #584	; (adr r3, 8002dc8 <MPU6050_Read_All+0x398>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f7fd fe1a 	bl	80007bc <__aeabi_ddiv>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	6839      	ldr	r1, [r7, #0]
 8002b8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fc7b 	bl	8000494 <__aeabi_i2d>
 8002b9e:	a38a      	add	r3, pc, #552	; (adr r3, 8002dc8 <MPU6050_Read_All+0x398>)
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f7fd fe0a 	bl	80007bc <__aeabi_ddiv>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	6839      	ldr	r1, [r7, #0]
 8002bae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002bb2:	f001 f831 	bl	8003c18 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4b8a      	ldr	r3, [pc, #552]	; (8002de4 <MPU6050_Read_All+0x3b4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fc58 	bl	8000474 <__aeabi_ui2d>
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	4b87      	ldr	r3, [pc, #540]	; (8002de8 <MPU6050_Read_All+0x3b8>)
 8002bca:	f7fd fdf7 	bl	80007bc <__aeabi_ddiv>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002bd6:	f001 f81f 	bl	8003c18 <HAL_GetTick>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4a81      	ldr	r2, [pc, #516]	; (8002de4 <MPU6050_Read_All+0x3b4>)
 8002bde:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be6:	461a      	mov	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bee:	fb03 f202 	mul.w	r2, r3, r2
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c00:	fb03 f301 	mul.w	r3, r3, r1
 8002c04:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fc44 	bl	8000494 <__aeabi_i2d>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	ec43 2b10 	vmov	d0, r2, r3
 8002c14:	f008 fe9c 	bl	800b950 <sqrt>
 8002c18:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c28:	f7fd ff06 	bl	8000a38 <__aeabi_dcmpeq>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11f      	bne.n	8002c72 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fc2b 	bl	8000494 <__aeabi_i2d>
 8002c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c42:	f7fd fdbb 	bl	80007bc <__aeabi_ddiv>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	ec43 2b17 	vmov	d7, r2, r3
 8002c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c52:	eef0 0a67 	vmov.f32	s1, s15
 8002c56:	f008 fccf 	bl	800b5f8 <atan>
 8002c5a:	ec51 0b10 	vmov	r0, r1, d0
 8002c5e:	a35c      	add	r3, pc, #368	; (adr r3, 8002dd0 <MPU6050_Read_All+0x3a0>)
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f7fd fc80 	bl	8000568 <__aeabi_dmul>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002c70:	e005      	b.n	8002c7e <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c84:	425b      	negs	r3, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc04 	bl	8000494 <__aeabi_i2d>
 8002c8c:	4682      	mov	sl, r0
 8002c8e:	468b      	mov	fp, r1
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fbfc 	bl	8000494 <__aeabi_i2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	ec43 2b11 	vmov	d1, r2, r3
 8002ca4:	ec4b ab10 	vmov	d0, sl, fp
 8002ca8:	f008 fe4f 	bl	800b94a <atan2>
 8002cac:	ec51 0b10 	vmov	r0, r1, d0
 8002cb0:	a347      	add	r3, pc, #284	; (adr r3, 8002dd0 <MPU6050_Read_All+0x3a0>)
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	f7fd fc57 	bl	8000568 <__aeabi_dmul>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	4b49      	ldr	r3, [pc, #292]	; (8002dec <MPU6050_Read_All+0x3bc>)
 8002cc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ccc:	f7fd febe 	bl	8000a4c <__aeabi_dcmplt>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <MPU6050_Read_All+0x2bc>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <MPU6050_Read_All+0x3c0>)
 8002ce2:	f7fd fed1 	bl	8000a88 <__aeabi_dcmpgt>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d114      	bne.n	8002d16 <MPU6050_Read_All+0x2e6>
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <MPU6050_Read_All+0x3c0>)
 8002cf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cf6:	f7fd fec7 	bl	8000a88 <__aeabi_dcmpgt>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d015      	beq.n	8002d2c <MPU6050_Read_All+0x2fc>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <MPU6050_Read_All+0x3bc>)
 8002d0c:	f7fd fe9e 	bl	8000a4c <__aeabi_dcmplt>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8002d16:	4937      	ldr	r1, [pc, #220]	; (8002df4 <MPU6050_Read_All+0x3c4>)
 8002d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d26:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002d2a:	e014      	b.n	8002d56 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002d32:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002d36:	eeb0 1a47 	vmov.f32	s2, s14
 8002d3a:	eef0 1a67 	vmov.f32	s3, s15
 8002d3e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002d42:	482c      	ldr	r0, [pc, #176]	; (8002df4 <MPU6050_Read_All+0x3c4>)
 8002d44:	f000 f85a 	bl	8002dfc <Kalman_getAngle>
 8002d48:	eeb0 7a40 	vmov.f32	s14, s0
 8002d4c:	eef0 7a60 	vmov.f32	s15, s1
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002d5c:	4690      	mov	r8, r2
 8002d5e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <MPU6050_Read_All+0x3c0>)
 8002d68:	4640      	mov	r0, r8
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	f7fd fe8c 	bl	8000a88 <__aeabi_dcmpgt>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002d7c:	4614      	mov	r4, r2
 8002d7e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002d8e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002d92:	eeb0 1a47 	vmov.f32	s2, s14
 8002d96:	eef0 1a67 	vmov.f32	s3, s15
 8002d9a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002d9e:	4816      	ldr	r0, [pc, #88]	; (8002df8 <MPU6050_Read_All+0x3c8>)
 8002da0:	f000 f82c 	bl	8002dfc <Kalman_getAngle>
 8002da4:	eeb0 7a40 	vmov.f32	s14, s0
 8002da8:	eef0 7a60 	vmov.f32	s15, s1
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8002db2:	bf00      	nop
 8002db4:	3740      	adds	r7, #64	; 0x40
 8002db6:	46bd      	mov	sp, r7
 8002db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	40cc2900 	.word	0x40cc2900
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	40606000 	.word	0x40606000
 8002dd0:	1a63c1f8 	.word	0x1a63c1f8
 8002dd4:	404ca5dc 	.word	0x404ca5dc
 8002dd8:	40d00000 	.word	0x40d00000
 8002ddc:	43aa0000 	.word	0x43aa0000
 8002de0:	42121eb8 	.word	0x42121eb8
 8002de4:	20000624 	.word	0x20000624
 8002de8:	408f4000 	.word	0x408f4000
 8002dec:	c0568000 	.word	0xc0568000
 8002df0:	40568000 	.word	0x40568000
 8002df4:	200001a8 	.word	0x200001a8
 8002df8:	20000160 	.word	0x20000160

08002dfc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	b096      	sub	sp, #88	; 0x58
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	61f8      	str	r0, [r7, #28]
 8002e04:	ed87 0b04 	vstr	d0, [r7, #16]
 8002e08:	ed87 1b02 	vstr	d1, [r7, #8]
 8002e0c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e1a:	f7fd f9ed 	bl	80001f8 <__aeabi_dsub>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002e2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e34:	f7fd fb98 	bl	8000568 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7fd f9dc 	bl	80001fc <__adddf3>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	69f9      	ldr	r1, [r7, #28]
 8002e4a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e5e:	f7fd fb83 	bl	8000568 <__aeabi_dmul>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e70:	f7fd f9c2 	bl	80001f8 <__aeabi_dsub>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e82:	f7fd f9b9 	bl	80001f8 <__aeabi_dsub>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd f9b2 	bl	80001fc <__adddf3>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ea4:	f7fd fb60 	bl	8000568 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4620      	mov	r0, r4
 8002eae:	4629      	mov	r1, r5
 8002eb0:	f7fd f9a4 	bl	80001fc <__adddf3>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	69f9      	ldr	r1, [r7, #28]
 8002eba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ece:	f7fd fb4b 	bl	8000568 <__aeabi_dmul>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	4629      	mov	r1, r5
 8002eda:	f7fd f98d 	bl	80001f8 <__aeabi_dsub>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	69f9      	ldr	r1, [r7, #28]
 8002ee4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ef8:	f7fd fb36 	bl	8000568 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4620      	mov	r0, r4
 8002f02:	4629      	mov	r1, r5
 8002f04:	f7fd f978 	bl	80001f8 <__aeabi_dsub>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	69f9      	ldr	r1, [r7, #28]
 8002f0e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f22:	f7fd fb21 	bl	8000568 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f965 	bl	80001fc <__adddf3>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	69f9      	ldr	r1, [r7, #28]
 8002f38:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f48:	f7fd f958 	bl	80001fc <__adddf3>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002f5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f5e:	f7fd fc2d 	bl	80007bc <__aeabi_ddiv>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002f70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f74:	f7fd fc22 	bl	80007bc <__aeabi_ddiv>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f8a:	f7fd f935 	bl	80001f8 <__aeabi_dsub>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002f9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fa4:	f7fd fae0 	bl	8000568 <__aeabi_dmul>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4620      	mov	r0, r4
 8002fae:	4629      	mov	r1, r5
 8002fb0:	f7fd f924 	bl	80001fc <__adddf3>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	69f9      	ldr	r1, [r7, #28]
 8002fba:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002fc4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fcc:	f7fd facc 	bl	8000568 <__aeabi_dmul>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	f7fd f910 	bl	80001fc <__adddf3>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	69f9      	ldr	r1, [r7, #28]
 8002fe2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002fec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ff6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003000:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003004:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003008:	f7fd faae 	bl	8000568 <__aeabi_dmul>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4620      	mov	r0, r4
 8003012:	4629      	mov	r1, r5
 8003014:	f7fd f8f0 	bl	80001f8 <__aeabi_dsub>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	69f9      	ldr	r1, [r7, #28]
 800301e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003028:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800302c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003030:	f7fd fa9a 	bl	8000568 <__aeabi_dmul>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4620      	mov	r0, r4
 800303a:	4629      	mov	r1, r5
 800303c:	f7fd f8dc 	bl	80001f8 <__aeabi_dsub>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	69f9      	ldr	r1, [r7, #28]
 8003046:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003050:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003058:	f7fd fa86 	bl	8000568 <__aeabi_dmul>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4620      	mov	r0, r4
 8003062:	4629      	mov	r1, r5
 8003064:	f7fd f8c8 	bl	80001f8 <__aeabi_dsub>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	69f9      	ldr	r1, [r7, #28]
 800306e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003078:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800307c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003080:	f7fd fa72 	bl	8000568 <__aeabi_dmul>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4620      	mov	r0, r4
 800308a:	4629      	mov	r1, r5
 800308c:	f7fd f8b4 	bl	80001f8 <__aeabi_dsub>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	69f9      	ldr	r1, [r7, #28]
 8003096:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80030a0:	ec43 2b17 	vmov	d7, r2, r3
};
 80030a4:	eeb0 0a47 	vmov.f32	s0, s14
 80030a8:	eef0 0a67 	vmov.f32	s1, s15
 80030ac:	3758      	adds	r7, #88	; 0x58
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080030b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <MX_SPI1_Init+0x68>)
 80030ba:	4a19      	ldr	r2, [pc, #100]	; (8003120 <MX_SPI1_Init+0x6c>)
 80030bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <MX_SPI1_Init+0x68>)
 80030c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <MX_SPI1_Init+0x68>)
 80030c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <MX_SPI1_Init+0x68>)
 80030d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80030d6:	4b11      	ldr	r3, [pc, #68]	; (800311c <MX_SPI1_Init+0x68>)
 80030d8:	2202      	movs	r2, #2
 80030da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <MX_SPI1_Init+0x68>)
 80030de:	2200      	movs	r2, #0
 80030e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <MX_SPI1_Init+0x68>)
 80030e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <MX_SPI1_Init+0x68>)
 80030ec:	2228      	movs	r2, #40	; 0x28
 80030ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <MX_SPI1_Init+0x68>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <MX_SPI1_Init+0x68>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030fc:	4b07      	ldr	r3, [pc, #28]	; (800311c <MX_SPI1_Init+0x68>)
 80030fe:	2200      	movs	r2, #0
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <MX_SPI1_Init+0x68>)
 8003104:	220a      	movs	r2, #10
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003108:	4804      	ldr	r0, [pc, #16]	; (800311c <MX_SPI1_Init+0x68>)
 800310a:	f004 fead 	bl	8007e68 <HAL_SPI_Init>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8003114:	f7ff fc20 	bl	8002958 <Error_Handler>
  }

}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000300 	.word	0x20000300
 8003120:	40013000 	.word	0x40013000

08003124 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a19      	ldr	r2, [pc, #100]	; (80031a8 <HAL_SPI_MspInit+0x84>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d12b      	bne.n	800319e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_SPI_MspInit+0x88>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_SPI_MspInit+0x88>)
 8003150:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003154:	6453      	str	r3, [r2, #68]	; 0x44
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_SPI_MspInit+0x88>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_SPI_MspInit+0x88>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <HAL_SPI_MspInit+0x88>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6313      	str	r3, [r2, #48]	; 0x30
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_SPI_MspInit+0x88>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800317e:	2360      	movs	r3, #96	; 0x60
 8003180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318a:	2303      	movs	r3, #3
 800318c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800318e:	2305      	movs	r3, #5
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003192:	f107 0314 	add.w	r3, r7, #20
 8003196:	4619      	mov	r1, r3
 8003198:	4805      	ldr	r0, [pc, #20]	; (80031b0 <HAL_SPI_MspInit+0x8c>)
 800319a:	f002 fb7f 	bl	800589c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800319e:	bf00      	nop
 80031a0:	3728      	adds	r7, #40	; 0x28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40013000 	.word	0x40013000
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40020000 	.word	0x40020000

080031b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_MspInit+0x4c>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <HAL_MspInit+0x4c>)
 80031c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_MspInit+0x4c>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_MspInit+0x4c>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	4a08      	ldr	r2, [pc, #32]	; (8003200 <HAL_MspInit+0x4c>)
 80031e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e4:	6413      	str	r3, [r2, #64]	; 0x40
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_MspInit+0x4c>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800

08003204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003216:	e7fe      	b.n	8003216 <HardFault_Handler+0x4>

08003218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800321c:	e7fe      	b.n	800321c <MemManage_Handler+0x4>

0800321e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003222:	e7fe      	b.n	8003222 <BusFault_Handler+0x4>

08003224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003228:	e7fe      	b.n	8003228 <UsageFault_Handler+0x4>

0800322a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003258:	f000 fcca 	bl	8003bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}

08003260 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003264:	4802      	ldr	r0, [pc, #8]	; (8003270 <DMA1_Stream1_IRQHandler+0x10>)
 8003266:	f002 f8dd 	bl	8005424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000728 	.word	0x20000728

08003274 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003278:	4802      	ldr	r0, [pc, #8]	; (8003284 <CAN1_RX0_IRQHandler+0x10>)
 800327a:	f001 fb1f 	bl	80048bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000358 	.word	0x20000358

08003288 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800328c:	2080      	movs	r0, #128	; 0x80
 800328e:	f002 fe89 	bl	8005fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800329c:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <SystemInit+0x28>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <SystemInit+0x28>)
 80032a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <SystemInit+0x28>)
 80032ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032b2:	609a      	str	r2, [r3, #8]
#endif
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b096      	sub	sp, #88	; 0x58
 80032c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	60da      	str	r2, [r3, #12]
 80032f0:	611a      	str	r2, [r3, #16]
 80032f2:	615a      	str	r2, [r3, #20]
 80032f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032f6:	1d3b      	adds	r3, r7, #4
 80032f8:	2220      	movs	r2, #32
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f008 f973 	bl	800b5e8 <memset>

  htim1.Instance = TIM1;
 8003302:	4b3e      	ldr	r3, [pc, #248]	; (80033fc <MX_TIM1_Init+0x138>)
 8003304:	4a3e      	ldr	r2, [pc, #248]	; (8003400 <MX_TIM1_Init+0x13c>)
 8003306:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003308:	4b3c      	ldr	r3, [pc, #240]	; (80033fc <MX_TIM1_Init+0x138>)
 800330a:	22b3      	movs	r2, #179	; 0xb3
 800330c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330e:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <MX_TIM1_Init+0x138>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003314:	4b39      	ldr	r3, [pc, #228]	; (80033fc <MX_TIM1_Init+0x138>)
 8003316:	2263      	movs	r2, #99	; 0x63
 8003318:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800331a:	4b38      	ldr	r3, [pc, #224]	; (80033fc <MX_TIM1_Init+0x138>)
 800331c:	2200      	movs	r2, #0
 800331e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <MX_TIM1_Init+0x138>)
 8003322:	2200      	movs	r2, #0
 8003324:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003326:	4b35      	ldr	r3, [pc, #212]	; (80033fc <MX_TIM1_Init+0x138>)
 8003328:	2200      	movs	r2, #0
 800332a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800332c:	4833      	ldr	r0, [pc, #204]	; (80033fc <MX_TIM1_Init+0x138>)
 800332e:	f005 fa99 	bl	8008864 <HAL_TIM_Base_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003338:	f7ff fb0e 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800333c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003340:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003346:	4619      	mov	r1, r3
 8003348:	482c      	ldr	r0, [pc, #176]	; (80033fc <MX_TIM1_Init+0x138>)
 800334a:	f006 fa17 	bl	800977c <HAL_TIM_ConfigClockSource>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003354:	f7ff fb00 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003358:	4828      	ldr	r0, [pc, #160]	; (80033fc <MX_TIM1_Init+0x138>)
 800335a:	f005 fbd9 	bl	8008b10 <HAL_TIM_PWM_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003364:	f7ff faf8 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003368:	2300      	movs	r3, #0
 800336a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336c:	2300      	movs	r3, #0
 800336e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003370:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003374:	4619      	mov	r1, r3
 8003376:	4821      	ldr	r0, [pc, #132]	; (80033fc <MX_TIM1_Init+0x138>)
 8003378:	f007 fa9e 	bl	800a8b8 <HAL_TIMEx_MasterConfigSynchronization>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003382:	f7ff fae9 	bl	8002958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003386:	2360      	movs	r3, #96	; 0x60
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800338e:	2300      	movs	r3, #0
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003392:	2300      	movs	r3, #0
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a6:	2204      	movs	r2, #4
 80033a8:	4619      	mov	r1, r3
 80033aa:	4814      	ldr	r0, [pc, #80]	; (80033fc <MX_TIM1_Init+0x138>)
 80033ac:	f006 f80a 	bl	80093c4 <HAL_TIM_PWM_ConfigChannel>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80033b6:	f7ff facf 	bl	8002958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	4619      	mov	r1, r3
 80033dc:	4807      	ldr	r0, [pc, #28]	; (80033fc <MX_TIM1_Init+0x138>)
 80033de:	f007 fb49 	bl	800aa74 <HAL_TIMEx_ConfigBreakDeadTime>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80033e8:	f7ff fab6 	bl	8002958 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80033ec:	4803      	ldr	r0, [pc, #12]	; (80033fc <MX_TIM1_Init+0x138>)
 80033ee:	f000 fa2b 	bl	8003848 <HAL_TIM_MspPostInit>

}
 80033f2:	bf00      	nop
 80033f4:	3758      	adds	r7, #88	; 0x58
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200006a8 	.word	0x200006a8
 8003400:	40010000 	.word	0x40010000

08003404 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800340a:	f107 0318 	add.w	r3, r7, #24
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003418:	f107 0310 	add.w	r3, r7, #16
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003422:	463b      	mov	r3, r7
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800342e:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <MX_TIM2_Init+0xf0>)
 8003430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003434:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8003436:	4b2f      	ldr	r3, [pc, #188]	; (80034f4 <MX_TIM2_Init+0xf0>)
 8003438:	22b3      	movs	r2, #179	; 0xb3
 800343a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800343c:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <MX_TIM2_Init+0xf0>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8003442:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <MX_TIM2_Init+0xf0>)
 8003444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003448:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344a:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <MX_TIM2_Init+0xf0>)
 800344c:	2200      	movs	r2, #0
 800344e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <MX_TIM2_Init+0xf0>)
 8003452:	2200      	movs	r2, #0
 8003454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003456:	4827      	ldr	r0, [pc, #156]	; (80034f4 <MX_TIM2_Init+0xf0>)
 8003458:	f005 fa04 	bl	8008864 <HAL_TIM_Base_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8003462:	f7ff fa79 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800346a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800346c:	f107 0318 	add.w	r3, r7, #24
 8003470:	4619      	mov	r1, r3
 8003472:	4820      	ldr	r0, [pc, #128]	; (80034f4 <MX_TIM2_Init+0xf0>)
 8003474:	f006 f982 	bl	800977c <HAL_TIM_ConfigClockSource>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800347e:	f7ff fa6b 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003482:	481c      	ldr	r0, [pc, #112]	; (80034f4 <MX_TIM2_Init+0xf0>)
 8003484:	f005 fd14 	bl	8008eb0 <HAL_TIM_IC_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800348e:	f7ff fa63 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800349a:	f107 0310 	add.w	r3, r7, #16
 800349e:	4619      	mov	r1, r3
 80034a0:	4814      	ldr	r0, [pc, #80]	; (80034f4 <MX_TIM2_Init+0xf0>)
 80034a2:	f007 fa09 	bl	800a8b8 <HAL_TIMEx_MasterConfigSynchronization>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80034ac:	f7ff fa54 	bl	8002958 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034b0:	2300      	movs	r3, #0
 80034b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80034b4:	2301      	movs	r3, #1
 80034b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80034c0:	463b      	mov	r3, r7
 80034c2:	2208      	movs	r2, #8
 80034c4:	4619      	mov	r1, r3
 80034c6:	480b      	ldr	r0, [pc, #44]	; (80034f4 <MX_TIM2_Init+0xf0>)
 80034c8:	f005 fdc8 	bl	800905c <HAL_TIM_IC_ConfigChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80034d2:	f7ff fa41 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80034d6:	463b      	mov	r3, r7
 80034d8:	220c      	movs	r2, #12
 80034da:	4619      	mov	r1, r3
 80034dc:	4805      	ldr	r0, [pc, #20]	; (80034f4 <MX_TIM2_Init+0xf0>)
 80034de:	f005 fdbd 	bl	800905c <HAL_TIM_IC_ConfigChannel>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80034e8:	f7ff fa36 	bl	8002958 <Error_Handler>
  }

}
 80034ec:	bf00      	nop
 80034ee:	3728      	adds	r7, #40	; 0x28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	200006e8 	.word	0x200006e8

080034f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08e      	sub	sp, #56	; 0x38
 80034fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800350c:	f107 0320 	add.w	r3, r7, #32
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
 8003524:	615a      	str	r2, [r3, #20]
 8003526:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <MX_TIM3_Init+0xfc>)
 800352a:	4a33      	ldr	r2, [pc, #204]	; (80035f8 <MX_TIM3_Init+0x100>)
 800352c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800352e:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <MX_TIM3_Init+0xfc>)
 8003530:	2259      	movs	r2, #89	; 0x59
 8003532:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003534:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <MX_TIM3_Init+0xfc>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800353a:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <MX_TIM3_Init+0xfc>)
 800353c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003540:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003542:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <MX_TIM3_Init+0xfc>)
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003548:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <MX_TIM3_Init+0xfc>)
 800354a:	2200      	movs	r2, #0
 800354c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800354e:	4829      	ldr	r0, [pc, #164]	; (80035f4 <MX_TIM3_Init+0xfc>)
 8003550:	f005 f988 	bl	8008864 <HAL_TIM_Base_Init>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800355a:	f7ff f9fd 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800355e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003568:	4619      	mov	r1, r3
 800356a:	4822      	ldr	r0, [pc, #136]	; (80035f4 <MX_TIM3_Init+0xfc>)
 800356c:	f006 f906 	bl	800977c <HAL_TIM_ConfigClockSource>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003576:	f7ff f9ef 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800357a:	481e      	ldr	r0, [pc, #120]	; (80035f4 <MX_TIM3_Init+0xfc>)
 800357c:	f005 fac8 	bl	8008b10 <HAL_TIM_PWM_Init>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003586:	f7ff f9e7 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800358a:	2300      	movs	r3, #0
 800358c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003592:	f107 0320 	add.w	r3, r7, #32
 8003596:	4619      	mov	r1, r3
 8003598:	4816      	ldr	r0, [pc, #88]	; (80035f4 <MX_TIM3_Init+0xfc>)
 800359a:	f007 f98d 	bl	800a8b8 <HAL_TIMEx_MasterConfigSynchronization>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80035a4:	f7ff f9d8 	bl	8002958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035a8:	2360      	movs	r3, #96	; 0x60
 80035aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80035ac:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80035b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	2200      	movs	r2, #0
 80035be:	4619      	mov	r1, r3
 80035c0:	480c      	ldr	r0, [pc, #48]	; (80035f4 <MX_TIM3_Init+0xfc>)
 80035c2:	f005 feff 	bl	80093c4 <HAL_TIM_PWM_ConfigChannel>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80035cc:	f7ff f9c4 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	2204      	movs	r2, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4807      	ldr	r0, [pc, #28]	; (80035f4 <MX_TIM3_Init+0xfc>)
 80035d8:	f005 fef4 	bl	80093c4 <HAL_TIM_PWM_ConfigChannel>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80035e2:	f7ff f9b9 	bl	8002958 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80035e6:	4803      	ldr	r0, [pc, #12]	; (80035f4 <MX_TIM3_Init+0xfc>)
 80035e8:	f000 f92e 	bl	8003848 <HAL_TIM_MspPostInit>

}
 80035ec:	bf00      	nop
 80035ee:	3738      	adds	r7, #56	; 0x38
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000668 	.word	0x20000668
 80035f8:	40000400 	.word	0x40000400

080035fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b096      	sub	sp, #88	; 0x58
 8003600:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003602:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003610:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800361a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]
 800362a:	615a      	str	r2, [r3, #20]
 800362c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800362e:	1d3b      	adds	r3, r7, #4
 8003630:	2220      	movs	r2, #32
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f007 ffd7 	bl	800b5e8 <memset>

  htim8.Instance = TIM8;
 800363a:	4b3d      	ldr	r3, [pc, #244]	; (8003730 <MX_TIM8_Init+0x134>)
 800363c:	4a3d      	ldr	r2, [pc, #244]	; (8003734 <MX_TIM8_Init+0x138>)
 800363e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8003640:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <MX_TIM8_Init+0x134>)
 8003642:	22b3      	movs	r2, #179	; 0xb3
 8003644:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003646:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <MX_TIM8_Init+0x134>)
 8003648:	2200      	movs	r2, #0
 800364a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800364c:	4b38      	ldr	r3, [pc, #224]	; (8003730 <MX_TIM8_Init+0x134>)
 800364e:	2263      	movs	r2, #99	; 0x63
 8003650:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003652:	4b37      	ldr	r3, [pc, #220]	; (8003730 <MX_TIM8_Init+0x134>)
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003658:	4b35      	ldr	r3, [pc, #212]	; (8003730 <MX_TIM8_Init+0x134>)
 800365a:	2200      	movs	r2, #0
 800365c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <MX_TIM8_Init+0x134>)
 8003660:	2200      	movs	r2, #0
 8003662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003664:	4832      	ldr	r0, [pc, #200]	; (8003730 <MX_TIM8_Init+0x134>)
 8003666:	f005 f8fd 	bl	8008864 <HAL_TIM_Base_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003670:	f7ff f972 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003678:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800367a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800367e:	4619      	mov	r1, r3
 8003680:	482b      	ldr	r0, [pc, #172]	; (8003730 <MX_TIM8_Init+0x134>)
 8003682:	f006 f87b 	bl	800977c <HAL_TIM_ConfigClockSource>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800368c:	f7ff f964 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003690:	4827      	ldr	r0, [pc, #156]	; (8003730 <MX_TIM8_Init+0x134>)
 8003692:	f005 fa3d 	bl	8008b10 <HAL_TIM_PWM_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800369c:	f7ff f95c 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036a0:	2300      	movs	r3, #0
 80036a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80036a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036ac:	4619      	mov	r1, r3
 80036ae:	4820      	ldr	r0, [pc, #128]	; (8003730 <MX_TIM8_Init+0x134>)
 80036b0:	f007 f902 	bl	800a8b8 <HAL_TIMEx_MasterConfigSynchronization>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80036ba:	f7ff f94d 	bl	8002958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036be:	2360      	movs	r3, #96	; 0x60
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036d2:	2300      	movs	r3, #0
 80036d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80036d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036da:	220c      	movs	r2, #12
 80036dc:	4619      	mov	r1, r3
 80036de:	4814      	ldr	r0, [pc, #80]	; (8003730 <MX_TIM8_Init+0x134>)
 80036e0:	f005 fe70 	bl	80093c4 <HAL_TIM_PWM_ConfigChannel>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80036ea:	f7ff f935 	bl	8002958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003706:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003708:	2300      	movs	r3, #0
 800370a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	4619      	mov	r1, r3
 8003710:	4807      	ldr	r0, [pc, #28]	; (8003730 <MX_TIM8_Init+0x134>)
 8003712:	f007 f9af 	bl	800aa74 <HAL_TIMEx_ConfigBreakDeadTime>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 800371c:	f7ff f91c 	bl	8002958 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8003720:	4803      	ldr	r0, [pc, #12]	; (8003730 <MX_TIM8_Init+0x134>)
 8003722:	f000 f891 	bl	8003848 <HAL_TIM_MspPostInit>

}
 8003726:	bf00      	nop
 8003728:	3758      	adds	r7, #88	; 0x58
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000628 	.word	0x20000628
 8003734:	40010400 	.word	0x40010400

08003738 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	; 0x30
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003740:	f107 031c 	add.w	r3, r7, #28
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a37      	ldr	r2, [pc, #220]	; (8003834 <HAL_TIM_Base_MspInit+0xfc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d10e      	bne.n	8003778 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	4a35      	ldr	r2, [pc, #212]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6453      	str	r3, [r2, #68]	; 0x44
 800376a:	4b33      	ldr	r3, [pc, #204]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003776:	e059      	b.n	800382c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003780:	d12d      	bne.n	80037de <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a2b      	ldr	r2, [pc, #172]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
 8003792:	4b29      	ldr	r3, [pc, #164]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	4a24      	ldr	r2, [pc, #144]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 80037a8:	f043 0302 	orr.w	r3, r3, #2
 80037ac:	6313      	str	r3, [r2, #48]	; 0x30
 80037ae:	4b22      	ldr	r3, [pc, #136]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 80037ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	2302      	movs	r3, #2
 80037c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037cc:	2301      	movs	r3, #1
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d0:	f107 031c 	add.w	r3, r7, #28
 80037d4:	4619      	mov	r1, r3
 80037d6:	4819      	ldr	r0, [pc, #100]	; (800383c <HAL_TIM_Base_MspInit+0x104>)
 80037d8:	f002 f860 	bl	800589c <HAL_GPIO_Init>
}
 80037dc:	e026      	b.n	800382c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a17      	ldr	r2, [pc, #92]	; (8003840 <HAL_TIM_Base_MspInit+0x108>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d10e      	bne.n	8003806 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	4a11      	ldr	r2, [pc, #68]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 80037f2:	f043 0302 	orr.w	r3, r3, #2
 80037f6:	6413      	str	r3, [r2, #64]	; 0x40
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
}
 8003804:	e012      	b.n	800382c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <HAL_TIM_Base_MspInit+0x10c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10d      	bne.n	800382c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003810:	2300      	movs	r3, #0
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	4a07      	ldr	r2, [pc, #28]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 800381a:	f043 0302 	orr.w	r3, r3, #2
 800381e:	6453      	str	r3, [r2, #68]	; 0x44
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_TIM_Base_MspInit+0x100>)
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
}
 800382c:	bf00      	nop
 800382e:	3730      	adds	r7, #48	; 0x30
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40010000 	.word	0x40010000
 8003838:	40023800 	.word	0x40023800
 800383c:	40020400 	.word	0x40020400
 8003840:	40000400 	.word	0x40000400
 8003844:	40010400 	.word	0x40010400

08003848 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	; 0x28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	f107 0314 	add.w	r3, r7, #20
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a37      	ldr	r2, [pc, #220]	; (8003944 <HAL_TIM_MspPostInit+0xfc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d11f      	bne.n	80038aa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	4b36      	ldr	r3, [pc, #216]	; (8003948 <HAL_TIM_MspPostInit+0x100>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a35      	ldr	r2, [pc, #212]	; (8003948 <HAL_TIM_MspPostInit+0x100>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <HAL_TIM_MspPostInit+0x100>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8003886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800388a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388c:	2302      	movs	r3, #2
 800388e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003894:	2300      	movs	r3, #0
 8003896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003898:	2301      	movs	r3, #1
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4619      	mov	r1, r3
 80038a2:	482a      	ldr	r0, [pc, #168]	; (800394c <HAL_TIM_MspPostInit+0x104>)
 80038a4:	f001 fffa 	bl	800589c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80038a8:	e047      	b.n	800393a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a28      	ldr	r2, [pc, #160]	; (8003950 <HAL_TIM_MspPostInit+0x108>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d11e      	bne.n	80038f2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	4b23      	ldr	r3, [pc, #140]	; (8003948 <HAL_TIM_MspPostInit+0x100>)
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	4a22      	ldr	r2, [pc, #136]	; (8003948 <HAL_TIM_MspPostInit+0x100>)
 80038be:	f043 0304 	orr.w	r3, r3, #4
 80038c2:	6313      	str	r3, [r2, #48]	; 0x30
 80038c4:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_TIM_MspPostInit+0x100>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 80038d0:	23c0      	movs	r3, #192	; 0xc0
 80038d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038dc:	2300      	movs	r3, #0
 80038de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038e0:	2302      	movs	r3, #2
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	4619      	mov	r1, r3
 80038ea:	481a      	ldr	r0, [pc, #104]	; (8003954 <HAL_TIM_MspPostInit+0x10c>)
 80038ec:	f001 ffd6 	bl	800589c <HAL_GPIO_Init>
}
 80038f0:	e023      	b.n	800393a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a18      	ldr	r2, [pc, #96]	; (8003958 <HAL_TIM_MspPostInit+0x110>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d11e      	bne.n	800393a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038fc:	2300      	movs	r3, #0
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <HAL_TIM_MspPostInit+0x100>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	4a10      	ldr	r2, [pc, #64]	; (8003948 <HAL_TIM_MspPostInit+0x100>)
 8003906:	f043 0304 	orr.w	r3, r3, #4
 800390a:	6313      	str	r3, [r2, #48]	; 0x30
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_TIM_MspPostInit+0x100>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8003918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800391c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	2302      	movs	r3, #2
 8003920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003926:	2300      	movs	r3, #0
 8003928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800392a:	2303      	movs	r3, #3
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 800392e:	f107 0314 	add.w	r3, r7, #20
 8003932:	4619      	mov	r1, r3
 8003934:	4807      	ldr	r0, [pc, #28]	; (8003954 <HAL_TIM_MspPostInit+0x10c>)
 8003936:	f001 ffb1 	bl	800589c <HAL_GPIO_Init>
}
 800393a:	bf00      	nop
 800393c:	3728      	adds	r7, #40	; 0x28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000
 8003948:	40023800 	.word	0x40023800
 800394c:	40020000 	.word	0x40020000
 8003950:	40000400 	.word	0x40000400
 8003954:	40020800 	.word	0x40020800
 8003958:	40010400 	.word	0x40010400

0800395c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <MX_USART3_UART_Init+0x4c>)
 8003962:	4a12      	ldr	r2, [pc, #72]	; (80039ac <MX_USART3_UART_Init+0x50>)
 8003964:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <MX_USART3_UART_Init+0x4c>)
 8003968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800396c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <MX_USART3_UART_Init+0x4c>)
 8003970:	2200      	movs	r2, #0
 8003972:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <MX_USART3_UART_Init+0x4c>)
 8003976:	2200      	movs	r2, #0
 8003978:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <MX_USART3_UART_Init+0x4c>)
 800397c:	2200      	movs	r2, #0
 800397e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <MX_USART3_UART_Init+0x4c>)
 8003982:	220c      	movs	r2, #12
 8003984:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <MX_USART3_UART_Init+0x4c>)
 8003988:	2200      	movs	r2, #0
 800398a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <MX_USART3_UART_Init+0x4c>)
 800398e:	2200      	movs	r2, #0
 8003990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003992:	4805      	ldr	r0, [pc, #20]	; (80039a8 <MX_USART3_UART_Init+0x4c>)
 8003994:	f007 f93a 	bl	800ac0c <HAL_UART_Init>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800399e:	f7fe ffdb 	bl	8002958 <Error_Handler>
  }

}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000788 	.word	0x20000788
 80039ac:	40004800 	.word	0x40004800

080039b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	; 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	f107 0314 	add.w	r3, r7, #20
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <HAL_UART_MspInit+0xe0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d15a      	bne.n	8003a88 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	4b2f      	ldr	r3, [pc, #188]	; (8003a94 <HAL_UART_MspInit+0xe4>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	4a2e      	ldr	r2, [pc, #184]	; (8003a94 <HAL_UART_MspInit+0xe4>)
 80039dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e0:	6413      	str	r3, [r2, #64]	; 0x40
 80039e2:	4b2c      	ldr	r3, [pc, #176]	; (8003a94 <HAL_UART_MspInit+0xe4>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <HAL_UART_MspInit+0xe4>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <HAL_UART_MspInit+0xe4>)
 80039f8:	f043 0308 	orr.w	r3, r3, #8
 80039fc:	6313      	str	r3, [r2, #48]	; 0x30
 80039fe:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <HAL_UART_MspInit+0xe4>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8003a0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a10:	2302      	movs	r3, #2
 8003a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a1c:	2307      	movs	r3, #7
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a20:	f107 0314 	add.w	r3, r7, #20
 8003a24:	4619      	mov	r1, r3
 8003a26:	481c      	ldr	r0, [pc, #112]	; (8003a98 <HAL_UART_MspInit+0xe8>)
 8003a28:	f001 ff38 	bl	800589c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <HAL_UART_MspInit+0xf0>)
 8003a30:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003a32:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a38:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a3a:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a4c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a54:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003a6c:	480b      	ldr	r0, [pc, #44]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a6e:	f001 fabd 	bl	8004fec <HAL_DMA_Init>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003a78:	f7fe ff6e 	bl	8002958 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34
 8003a82:	4a06      	ldr	r2, [pc, #24]	; (8003a9c <HAL_UART_MspInit+0xec>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3728      	adds	r7, #40	; 0x28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40004800 	.word	0x40004800
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40020c00 	.word	0x40020c00
 8003a9c:	20000728 	.word	0x20000728
 8003aa0:	40026028 	.word	0x40026028

08003aa4 <wheelSpeedControl_Init>:

  joy_pos_buffer_cnt++;
}

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ab0:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b30 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003afc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003afe:	e003      	b.n	8003b08 <LoopCopyDataInit>

08003b00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b06:	3104      	adds	r1, #4

08003b08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b08:	480b      	ldr	r0, [pc, #44]	; (8003b38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b10:	d3f6      	bcc.n	8003b00 <CopyDataInit>
  ldr  r2, =_sbss
 8003b12:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b14:	e002      	b.n	8003b1c <LoopFillZerobss>

08003b16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b18:	f842 3b04 	str.w	r3, [r2], #4

08003b1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b20:	d3f9      	bcc.n	8003b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b22:	f7ff fbb9 	bl	8003298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b26:	f007 fd3b 	bl	800b5a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b2a:	f7fe f9a3 	bl	8001e74 <main>
  bx  lr    
 8003b2e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003b30:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003b34:	0800c020 	.word	0x0800c020
  ldr  r0, =_sdata
 8003b38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b3c:	20000264 	.word	0x20000264
  ldr  r2, =_sbss
 8003b40:	20000268 	.word	0x20000268
  ldr  r3, = _ebss
 8003b44:	200007cc 	.word	0x200007cc

08003b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b48:	e7fe      	b.n	8003b48 <ADC_IRQHandler>
	...

08003b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <HAL_Init+0x40>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0d      	ldr	r2, [pc, #52]	; (8003b8c <HAL_Init+0x40>)
 8003b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_Init+0x40>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <HAL_Init+0x40>)
 8003b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <HAL_Init+0x40>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a07      	ldr	r2, [pc, #28]	; (8003b8c <HAL_Init+0x40>)
 8003b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b74:	2003      	movs	r0, #3
 8003b76:	f001 f9a1 	bl	8004ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f000 f808 	bl	8003b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b80:	f7ff fb18 	bl	80031b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023c00 	.word	0x40023c00

08003b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_InitTick+0x54>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_InitTick+0x58>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 f9e8 	bl	8004f84 <HAL_SYSTICK_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e00e      	b.n	8003bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b0f      	cmp	r3, #15
 8003bc2:	d80a      	bhi.n	8003bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bcc:	f001 f996 	bl	8004efc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bd0:	4a06      	ldr	r2, [pc, #24]	; (8003bec <HAL_InitTick+0x5c>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	200001f0 	.word	0x200001f0
 8003be8:	200001f8 	.word	0x200001f8
 8003bec:	200001f4 	.word	0x200001f4

08003bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_IncTick+0x20>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_IncTick+0x24>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4413      	add	r3, r2
 8003c00:	4a04      	ldr	r2, [pc, #16]	; (8003c14 <HAL_IncTick+0x24>)
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	200001f8 	.word	0x200001f8
 8003c14:	200007c8 	.word	0x200007c8

08003c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_GetTick+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	200007c8 	.word	0x200007c8

08003c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c38:	f7ff ffee 	bl	8003c18 <HAL_GetTick>
 8003c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c48:	d005      	beq.n	8003c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <HAL_Delay+0x44>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c56:	bf00      	nop
 8003c58:	f7ff ffde 	bl	8003c18 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d8f7      	bhi.n	8003c58 <HAL_Delay+0x28>
  {
  }
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	200001f8 	.word	0x200001f8

08003c78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e20e      	b.n	80040a8 <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4aa0      	ldr	r2, [pc, #640]	; (8003f10 <HAL_CAN_Init+0x298>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d009      	beq.n	8003ca8 <HAL_CAN_Init+0x30>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a9e      	ldr	r2, [pc, #632]	; (8003f14 <HAL_CAN_Init+0x29c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_CAN_Init+0x30>
 8003c9e:	f240 111d 	movw	r1, #285	; 0x11d
 8003ca2:	489d      	ldr	r0, [pc, #628]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003ca4:	f7fe fe5f 	bl	8002966 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	7e1b      	ldrb	r3, [r3, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_CAN_Init+0x4a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7e1b      	ldrb	r3, [r3, #24]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d004      	beq.n	8003cc2 <HAL_CAN_Init+0x4a>
 8003cb8:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003cbc:	4896      	ldr	r0, [pc, #600]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003cbe:	f7fe fe52 	bl	8002966 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	7e5b      	ldrb	r3, [r3, #25]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_CAN_Init+0x64>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7e5b      	ldrb	r3, [r3, #25]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d004      	beq.n	8003cdc <HAL_CAN_Init+0x64>
 8003cd2:	f240 111f 	movw	r1, #287	; 0x11f
 8003cd6:	4890      	ldr	r0, [pc, #576]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003cd8:	f7fe fe45 	bl	8002966 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7e9b      	ldrb	r3, [r3, #26]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_CAN_Init+0x7e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7e9b      	ldrb	r3, [r3, #26]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d004      	beq.n	8003cf6 <HAL_CAN_Init+0x7e>
 8003cec:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003cf0:	4889      	ldr	r0, [pc, #548]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003cf2:	f7fe fe38 	bl	8002966 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7edb      	ldrb	r3, [r3, #27]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_CAN_Init+0x98>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7edb      	ldrb	r3, [r3, #27]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d004      	beq.n	8003d10 <HAL_CAN_Init+0x98>
 8003d06:	f240 1121 	movw	r1, #289	; 0x121
 8003d0a:	4883      	ldr	r0, [pc, #524]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003d0c:	f7fe fe2b 	bl	8002966 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7f1b      	ldrb	r3, [r3, #28]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_CAN_Init+0xb2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7f1b      	ldrb	r3, [r3, #28]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d004      	beq.n	8003d2a <HAL_CAN_Init+0xb2>
 8003d20:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003d24:	487c      	ldr	r0, [pc, #496]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003d26:	f7fe fe1e 	bl	8002966 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7f5b      	ldrb	r3, [r3, #29]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <HAL_CAN_Init+0xcc>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7f5b      	ldrb	r3, [r3, #29]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d004      	beq.n	8003d44 <HAL_CAN_Init+0xcc>
 8003d3a:	f240 1123 	movw	r1, #291	; 0x123
 8003d3e:	4876      	ldr	r0, [pc, #472]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003d40:	f7fe fe11 	bl	8002966 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d013      	beq.n	8003d74 <HAL_CAN_Init+0xfc>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d54:	d00e      	beq.n	8003d74 <HAL_CAN_Init+0xfc>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d5e:	d009      	beq.n	8003d74 <HAL_CAN_Init+0xfc>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003d68:	d004      	beq.n	8003d74 <HAL_CAN_Init+0xfc>
 8003d6a:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003d6e:	486a      	ldr	r0, [pc, #424]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003d70:	f7fe fdf9 	bl	8002966 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <HAL_CAN_Init+0x12c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d84:	d00e      	beq.n	8003da4 <HAL_CAN_Init+0x12c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d8e:	d009      	beq.n	8003da4 <HAL_CAN_Init+0x12c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d98:	d004      	beq.n	8003da4 <HAL_CAN_Init+0x12c>
 8003d9a:	f240 1125 	movw	r1, #293	; 0x125
 8003d9e:	485e      	ldr	r0, [pc, #376]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003da0:	f7fe fde1 	bl	8002966 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d04f      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d04a      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dbe:	d045      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dc8:	d040      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dd2:	d03b      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ddc:	d036      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003de6:	d031      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8003df0:	d02c      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dfa:	d027      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8003e04:	d022      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8003e0e:	d01d      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8003e18:	d018      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e22:	d013      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8003e2c:	d00e      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003e36:	d009      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8003e40:	d004      	beq.n	8003e4c <HAL_CAN_Init+0x1d4>
 8003e42:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003e46:	4834      	ldr	r0, [pc, #208]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003e48:	f7fe fd8d 	bl	8002966 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d027      	beq.n	8003ea4 <HAL_CAN_Init+0x22c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5c:	d022      	beq.n	8003ea4 <HAL_CAN_Init+0x22c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e66:	d01d      	beq.n	8003ea4 <HAL_CAN_Init+0x22c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e70:	d018      	beq.n	8003ea4 <HAL_CAN_Init+0x22c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e7a:	d013      	beq.n	8003ea4 <HAL_CAN_Init+0x22c>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003e84:	d00e      	beq.n	8003ea4 <HAL_CAN_Init+0x22c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e8e:	d009      	beq.n	8003ea4 <HAL_CAN_Init+0x22c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8003e98:	d004      	beq.n	8003ea4 <HAL_CAN_Init+0x22c>
 8003e9a:	f240 1127 	movw	r1, #295	; 0x127
 8003e9e:	481e      	ldr	r0, [pc, #120]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003ea0:	f7fe fd61 	bl	8002966 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <HAL_CAN_Init+0x23e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb4:	d904      	bls.n	8003ec0 <HAL_CAN_Init+0x248>
 8003eb6:	f44f 7194 	mov.w	r1, #296	; 0x128
 8003eba:	4817      	ldr	r0, [pc, #92]	; (8003f18 <HAL_CAN_Init+0x2a0>)
 8003ebc:	f7fe fd53 	bl	8002966 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7fd fce3 	bl	8001898 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0202 	bic.w	r2, r2, #2
 8003ee0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee2:	f7ff fe99 	bl	8003c18 <HAL_GetTick>
 8003ee6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ee8:	e018      	b.n	8003f1c <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003eea:	f7ff fe95 	bl	8003c18 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b0a      	cmp	r3, #10
 8003ef6:	d911      	bls.n	8003f1c <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2205      	movs	r2, #5
 8003f08:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0cb      	b.n	80040a8 <HAL_CAN_Init+0x430>
 8003f10:	40006400 	.word	0x40006400
 8003f14:	40006800 	.word	0x40006800
 8003f18:	0800bcd0 	.word	0x0800bcd0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1df      	bne.n	8003eea <HAL_CAN_Init+0x272>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0201 	orr.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f3a:	f7ff fe6d 	bl	8003c18 <HAL_GetTick>
 8003f3e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f40:	e012      	b.n	8003f68 <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f42:	f7ff fe69 	bl	8003c18 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b0a      	cmp	r3, #10
 8003f4e:	d90b      	bls.n	8003f68 <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2205      	movs	r2, #5
 8003f60:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e09f      	b.n	80040a8 <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0e5      	beq.n	8003f42 <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	7e1b      	ldrb	r3, [r3, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d108      	bne.n	8003f90 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e007      	b.n	8003fa0 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7e5b      	ldrb	r3, [r3, #25]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d108      	bne.n	8003fba <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e007      	b.n	8003fca <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	7e9b      	ldrb	r3, [r3, #26]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d108      	bne.n	8003fe4 <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0220 	orr.w	r2, r2, #32
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e007      	b.n	8003ff4 <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0220 	bic.w	r2, r2, #32
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	7edb      	ldrb	r3, [r3, #27]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d108      	bne.n	800400e <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0210 	bic.w	r2, r2, #16
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e007      	b.n	800401e <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0210 	orr.w	r2, r2, #16
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7f1b      	ldrb	r3, [r3, #28]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d108      	bne.n	8004038 <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0208 	orr.w	r2, r2, #8
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e007      	b.n	8004048 <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0208 	bic.w	r2, r2, #8
 8004046:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7f5b      	ldrb	r3, [r3, #29]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d108      	bne.n	8004062 <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0204 	orr.w	r2, r2, #4
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e007      	b.n	8004072 <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0204 	bic.w	r2, r2, #4
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	ea42 0103 	orr.w	r1, r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	1e5a      	subs	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d003      	beq.n	80040d6 <HAL_CAN_ConfigFilter+0x26>
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	f040 812c 	bne.w	800432e <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040de:	d304      	bcc.n	80040ea <HAL_CAN_ConfigFilter+0x3a>
 80040e0:	f44f 7154 	mov.w	r1, #848	; 0x350
 80040e4:	4897      	ldr	r0, [pc, #604]	; (8004344 <HAL_CAN_ConfigFilter+0x294>)
 80040e6:	f7fe fc3e 	bl	8002966 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f2:	d304      	bcc.n	80040fe <HAL_CAN_ConfigFilter+0x4e>
 80040f4:	f240 3151 	movw	r1, #849	; 0x351
 80040f8:	4892      	ldr	r0, [pc, #584]	; (8004344 <HAL_CAN_ConfigFilter+0x294>)
 80040fa:	f7fe fc34 	bl	8002966 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004106:	d304      	bcc.n	8004112 <HAL_CAN_ConfigFilter+0x62>
 8004108:	f240 3152 	movw	r1, #850	; 0x352
 800410c:	488d      	ldr	r0, [pc, #564]	; (8004344 <HAL_CAN_ConfigFilter+0x294>)
 800410e:	f7fe fc2a 	bl	8002966 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411a:	d304      	bcc.n	8004126 <HAL_CAN_ConfigFilter+0x76>
 800411c:	f240 3153 	movw	r1, #851	; 0x353
 8004120:	4888      	ldr	r0, [pc, #544]	; (8004344 <HAL_CAN_ConfigFilter+0x294>)
 8004122:	f7fe fc20 	bl	8002966 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_CAN_ConfigFilter+0x90>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d004      	beq.n	8004140 <HAL_CAN_ConfigFilter+0x90>
 8004136:	f44f 7155 	mov.w	r1, #852	; 0x354
 800413a:	4882      	ldr	r0, [pc, #520]	; (8004344 <HAL_CAN_ConfigFilter+0x294>)
 800413c:	f7fe fc13 	bl	8002966 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_CAN_ConfigFilter+0xaa>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d004      	beq.n	800415a <HAL_CAN_ConfigFilter+0xaa>
 8004150:	f240 3155 	movw	r1, #853	; 0x355
 8004154:	487b      	ldr	r0, [pc, #492]	; (8004344 <HAL_CAN_ConfigFilter+0x294>)
 8004156:	f7fe fc06 	bl	8002966 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <HAL_CAN_ConfigFilter+0xc4>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d004      	beq.n	8004174 <HAL_CAN_ConfigFilter+0xc4>
 800416a:	f240 3156 	movw	r1, #854	; 0x356
 800416e:	4875      	ldr	r0, [pc, #468]	; (8004344 <HAL_CAN_ConfigFilter+0x294>)
 8004170:	f7fe fbf9 	bl	8002966 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_CAN_ConfigFilter+0xde>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d004      	beq.n	800418e <HAL_CAN_ConfigFilter+0xde>
 8004184:	f240 3157 	movw	r1, #855	; 0x357
 8004188:	486e      	ldr	r0, [pc, #440]	; (8004344 <HAL_CAN_ConfigFilter+0x294>)
 800418a:	f7fe fbec 	bl	8002966 <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800418e:	4b6e      	ldr	r3, [pc, #440]	; (8004348 <HAL_CAN_ConfigFilter+0x298>)
 8004190:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	2b1b      	cmp	r3, #27
 8004198:	d904      	bls.n	80041a4 <HAL_CAN_ConfigFilter+0xf4>
 800419a:	f240 3172 	movw	r1, #882	; 0x372
 800419e:	4869      	ldr	r0, [pc, #420]	; (8004344 <HAL_CAN_ConfigFilter+0x294>)
 80041a0:	f7fe fbe1 	bl	8002966 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2b1b      	cmp	r3, #27
 80041aa:	d904      	bls.n	80041b6 <HAL_CAN_ConfigFilter+0x106>
 80041ac:	f240 3173 	movw	r1, #883	; 0x373
 80041b0:	4864      	ldr	r0, [pc, #400]	; (8004344 <HAL_CAN_ConfigFilter+0x294>)
 80041b2:	f7fe fbd8 	bl	8002966 <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	431a      	orrs	r2, r3
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	2201      	movs	r2, #1
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	43db      	mvns	r3, r3
 8004204:	401a      	ands	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d123      	bne.n	800425c <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	43db      	mvns	r3, r3
 800421e:	401a      	ands	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004236:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	3248      	adds	r2, #72	; 0x48
 800423c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004250:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004252:	6979      	ldr	r1, [r7, #20]
 8004254:	3348      	adds	r3, #72	; 0x48
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	440b      	add	r3, r1
 800425a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d122      	bne.n	80042aa <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	431a      	orrs	r2, r3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004284:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	3248      	adds	r2, #72	; 0x48
 800428a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800429e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80042a0:	6979      	ldr	r1, [r7, #20]
 80042a2:	3348      	adds	r3, #72	; 0x48
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	440b      	add	r3, r1
 80042a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	43db      	mvns	r3, r3
 80042bc:	401a      	ands	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80042c4:	e007      	b.n	80042d6 <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	401a      	ands	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80042f0:	e007      	b.n	8004302 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d107      	bne.n	800431a <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	431a      	orrs	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004320:	f023 0201 	bic.w	r2, r3, #1
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e006      	b.n	800433c <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
  }
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	0800bcd0 	.word	0x0800bcd0
 8004348:	40006400 	.word	0x40006400

0800434c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d12e      	bne.n	80043be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004378:	f7ff fc4e 	bl	8003c18 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800437e:	e012      	b.n	80043a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004380:	f7ff fc4a 	bl	8003c18 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b0a      	cmp	r3, #10
 800438c:	d90b      	bls.n	80043a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2205      	movs	r2, #5
 800439e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e012      	b.n	80043cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e5      	bne.n	8004380 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e006      	b.n	80043cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_CAN_AddTxMessage+0x38>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d004      	beq.n	800440c <HAL_CAN_AddTxMessage+0x38>
 8004402:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8004406:	4884      	ldr	r0, [pc, #528]	; (8004618 <HAL_CAN_AddTxMessage+0x244>)
 8004408:	f7fe faad 	bl	8002966 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_CAN_AddTxMessage+0x52>
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d004      	beq.n	8004426 <HAL_CAN_AddTxMessage+0x52>
 800441c:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8004420:	487d      	ldr	r0, [pc, #500]	; (8004618 <HAL_CAN_AddTxMessage+0x244>)
 8004422:	f7fe faa0 	bl	8002966 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b08      	cmp	r3, #8
 800442c:	d904      	bls.n	8004438 <HAL_CAN_AddTxMessage+0x64>
 800442e:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8004432:	4879      	ldr	r0, [pc, #484]	; (8004618 <HAL_CAN_AddTxMessage+0x244>)
 8004434:	f7fe fa97 	bl	8002966 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004448:	d30f      	bcc.n	800446a <HAL_CAN_AddTxMessage+0x96>
 800444a:	f240 41ee 	movw	r1, #1262	; 0x4ee
 800444e:	4872      	ldr	r0, [pc, #456]	; (8004618 <HAL_CAN_AddTxMessage+0x244>)
 8004450:	f7fe fa89 	bl	8002966 <assert_failed>
 8004454:	e009      	b.n	800446a <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445e:	d304      	bcc.n	800446a <HAL_CAN_AddTxMessage+0x96>
 8004460:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8004464:	486c      	ldr	r0, [pc, #432]	; (8004618 <HAL_CAN_AddTxMessage+0x244>)
 8004466:	f7fe fa7e 	bl	8002966 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	7d1b      	ldrb	r3, [r3, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_CAN_AddTxMessage+0xb0>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	7d1b      	ldrb	r3, [r3, #20]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d004      	beq.n	8004484 <HAL_CAN_AddTxMessage+0xb0>
 800447a:	f240 41f4 	movw	r1, #1268	; 0x4f4
 800447e:	4866      	ldr	r0, [pc, #408]	; (8004618 <HAL_CAN_AddTxMessage+0x244>)
 8004480:	f7fe fa71 	bl	8002966 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8004484:	7ffb      	ldrb	r3, [r7, #31]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d003      	beq.n	8004492 <HAL_CAN_AddTxMessage+0xbe>
 800448a:	7ffb      	ldrb	r3, [r7, #31]
 800448c:	2b02      	cmp	r3, #2
 800448e:	f040 80b8 	bne.w	8004602 <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d105      	bne.n	80044b2 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80a0 	beq.w	80045f2 <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	0e1b      	lsrs	r3, r3, #24
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d907      	bls.n	80044d2 <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e09e      	b.n	8004610 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80044d2:	2201      	movs	r2, #1
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	409a      	lsls	r2, r3
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10d      	bne.n	8004500 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	6809      	ldr	r1, [r1, #0]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	3318      	adds	r3, #24
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	440b      	add	r3, r1
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e00f      	b.n	8004520 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800450a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004510:	68f9      	ldr	r1, [r7, #12]
 8004512:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004514:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	3318      	adds	r3, #24
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	440b      	add	r3, r1
 800451e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3318      	adds	r3, #24
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	440b      	add	r3, r1
 8004530:	3304      	adds	r3, #4
 8004532:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	7d1b      	ldrb	r3, [r3, #20]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d111      	bne.n	8004560 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	3318      	adds	r3, #24
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	4413      	add	r3, r2
 8004548:	3304      	adds	r3, #4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	6811      	ldr	r1, [r2, #0]
 8004550:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	3318      	adds	r3, #24
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	440b      	add	r3, r1
 800455c:	3304      	adds	r3, #4
 800455e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3307      	adds	r3, #7
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	061a      	lsls	r2, r3, #24
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3306      	adds	r3, #6
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	041b      	lsls	r3, r3, #16
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3305      	adds	r3, #5
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	4313      	orrs	r3, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	3204      	adds	r2, #4
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	4610      	mov	r0, r2
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	6811      	ldr	r1, [r2, #0]
 8004588:	ea43 0200 	orr.w	r2, r3, r0
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	440b      	add	r3, r1
 8004592:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004596:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3303      	adds	r3, #3
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	061a      	lsls	r2, r3, #24
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3302      	adds	r3, #2
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3301      	adds	r3, #1
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	4313      	orrs	r3, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	7812      	ldrb	r2, [r2, #0]
 80045b8:	4610      	mov	r0, r2
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	6811      	ldr	r1, [r2, #0]
 80045be:	ea43 0200 	orr.w	r2, r3, r0
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	440b      	add	r3, r1
 80045c8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80045cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	3318      	adds	r3, #24
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	4413      	add	r3, r2
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	6811      	ldr	r1, [r2, #0]
 80045e0:	f043 0201 	orr.w	r2, r3, #1
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	3318      	adds	r3, #24
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	440b      	add	r3, r1
 80045ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e00e      	b.n	8004610 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e006      	b.n	8004610 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
  }
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	0800bcd0 	.word	0x0800bcd0

0800461c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004630:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_CAN_GetRxMessage+0x2c>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d004      	beq.n	8004648 <HAL_CAN_GetRxMessage+0x2c>
 800463e:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8004642:	4884      	ldr	r0, [pc, #528]	; (8004854 <HAL_CAN_GetRxMessage+0x238>)
 8004644:	f7fe f98f 	bl	8002966 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d003      	beq.n	8004656 <HAL_CAN_GetRxMessage+0x3a>
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	2b02      	cmp	r3, #2
 8004652:	f040 80f3 	bne.w	800483c <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10e      	bne.n	800467a <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d116      	bne.n	8004698 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e0e7      	b.n	800484a <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d107      	bne.n	8004698 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0d8      	b.n	800484a <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	331b      	adds	r3, #27
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	4413      	add	r3, r2
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0204 	and.w	r2, r3, #4
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10c      	bne.n	80046d0 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	331b      	adds	r3, #27
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	4413      	add	r3, r2
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	0d5b      	lsrs	r3, r3, #21
 80046c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e00b      	b.n	80046e8 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	331b      	adds	r3, #27
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	4413      	add	r3, r2
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	08db      	lsrs	r3, r3, #3
 80046e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	331b      	adds	r3, #27
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	4413      	add	r3, r2
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0202 	and.w	r2, r3, #2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	331b      	adds	r3, #27
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	4413      	add	r3, r2
 800470a:	3304      	adds	r3, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 020f 	and.w	r2, r3, #15
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	331b      	adds	r3, #27
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	4413      	add	r3, r2
 8004722:	3304      	adds	r3, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	b2da      	uxtb	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	331b      	adds	r3, #27
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	4413      	add	r3, r2
 800473a:	3304      	adds	r3, #4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	4413      	add	r3, r2
 8004750:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	4413      	add	r3, r2
 8004766:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0a1a      	lsrs	r2, r3, #8
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	4413      	add	r3, r2
 8004780:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	0c1a      	lsrs	r2, r3, #16
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	3302      	adds	r3, #2
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	4413      	add	r3, r2
 800479a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	0e1a      	lsrs	r2, r3, #24
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	3303      	adds	r3, #3
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	3304      	adds	r3, #4
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	0a1a      	lsrs	r2, r3, #8
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	3305      	adds	r3, #5
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	0c1a      	lsrs	r2, r3, #16
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	3306      	adds	r3, #6
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	4413      	add	r3, r2
 8004800:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	0e1a      	lsrs	r2, r3, #24
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	3307      	adds	r3, #7
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d108      	bne.n	8004828 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0220 	orr.w	r2, r2, #32
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	e007      	b.n	8004838 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0220 	orr.w	r2, r2, #32
 8004836:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	e006      	b.n	800484a <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
  }
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	0800bcd0 	.word	0x0800bcd0

08004858 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004868:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <HAL_CAN_ActivateNotification+0x5c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d904      	bls.n	800487c <HAL_CAN_ActivateNotification+0x24>
 8004872:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 8004876:	4810      	ldr	r0, [pc, #64]	; (80048b8 <HAL_CAN_ActivateNotification+0x60>)
 8004878:	f7fe f875 	bl	8002966 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d002      	beq.n	8004888 <HAL_CAN_ActivateNotification+0x30>
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d109      	bne.n	800489c <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6959      	ldr	r1, [r3, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e006      	b.n	80048aa <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	00038f7f 	.word	0x00038f7f
 80048b8:	0800bcd0 	.word	0x0800bcd0

080048bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d07c      	beq.n	80049fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d023      	beq.n	8004954 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2201      	movs	r2, #1
 8004912:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f983 	bl	8004c2a <HAL_CAN_TxMailbox0CompleteCallback>
 8004924:	e016      	b.n	8004954 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
 8004938:	e00c      	b.n	8004954 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
 800494c:	e002      	b.n	8004954 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f989 	bl	8004c66 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d024      	beq.n	80049a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004966:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f963 	bl	8004c3e <HAL_CAN_TxMailbox1CompleteCallback>
 8004978:	e016      	b.n	80049a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
 800498c:	e00c      	b.n	80049a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
 80049a0:	e002      	b.n	80049a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f969 	bl	8004c7a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d024      	beq.n	80049fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f943 	bl	8004c52 <HAL_CAN_TxMailbox2CompleteCallback>
 80049cc:	e016      	b.n	80049fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
 80049e0:	e00c      	b.n	80049fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
 80049f4:	e002      	b.n	80049fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f949 	bl	8004c8e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d006      	beq.n	8004a42 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f930 	bl	8004ca2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d009      	beq.n	8004a60 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fd fd84 	bl	8002568 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00c      	beq.n	8004a84 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2210      	movs	r2, #16
 8004a82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d006      	beq.n	8004aa6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f912 	bl	8004cca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f8f9 	bl	8004cb6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d006      	beq.n	8004ae6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2210      	movs	r2, #16
 8004ade:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8fc 	bl	8004cde <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d006      	beq.n	8004b08 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2208      	movs	r2, #8
 8004b00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f8f5 	bl	8004cf2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d07b      	beq.n	8004c0a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d072      	beq.n	8004c02 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f043 0302 	orr.w	r3, r3, #2
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f043 0304 	orr.w	r3, r3, #4
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d043      	beq.n	8004c02 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d03e      	beq.n	8004c02 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b8a:	2b60      	cmp	r3, #96	; 0x60
 8004b8c:	d02b      	beq.n	8004be6 <HAL_CAN_IRQHandler+0x32a>
 8004b8e:	2b60      	cmp	r3, #96	; 0x60
 8004b90:	d82e      	bhi.n	8004bf0 <HAL_CAN_IRQHandler+0x334>
 8004b92:	2b50      	cmp	r3, #80	; 0x50
 8004b94:	d022      	beq.n	8004bdc <HAL_CAN_IRQHandler+0x320>
 8004b96:	2b50      	cmp	r3, #80	; 0x50
 8004b98:	d82a      	bhi.n	8004bf0 <HAL_CAN_IRQHandler+0x334>
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d019      	beq.n	8004bd2 <HAL_CAN_IRQHandler+0x316>
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d826      	bhi.n	8004bf0 <HAL_CAN_IRQHandler+0x334>
 8004ba2:	2b30      	cmp	r3, #48	; 0x30
 8004ba4:	d010      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x30c>
 8004ba6:	2b30      	cmp	r3, #48	; 0x30
 8004ba8:	d822      	bhi.n	8004bf0 <HAL_CAN_IRQHandler+0x334>
 8004baa:	2b10      	cmp	r3, #16
 8004bac:	d002      	beq.n	8004bb4 <HAL_CAN_IRQHandler+0x2f8>
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d005      	beq.n	8004bbe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004bb2:	e01d      	b.n	8004bf0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	f043 0308 	orr.w	r3, r3, #8
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bbc:	e019      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	f043 0310 	orr.w	r3, r3, #16
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bc6:	e014      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	f043 0320 	orr.w	r3, r3, #32
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bd0:	e00f      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bda:	e00a      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004be4:	e005      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bee:	e000      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x336>
            break;
 8004bf0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699a      	ldr	r2, [r3, #24]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c00:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2204      	movs	r2, #4
 8004c08:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f872 	bl	8004d06 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004c22:	bf00      	nop
 8004c24:	3728      	adds	r7, #40	; 0x28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <__NVIC_SetPriorityGrouping+0x44>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d4e:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <__NVIC_SetPriorityGrouping+0x44>)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	60d3      	str	r3, [r2, #12]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <__NVIC_GetPriorityGrouping+0x18>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	f003 0307 	and.w	r3, r3, #7
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	e000ed00 	.word	0xe000ed00

08004d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	db0b      	blt.n	8004daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	f003 021f 	and.w	r2, r3, #31
 8004d98:	4907      	ldr	r1, [pc, #28]	; (8004db8 <__NVIC_EnableIRQ+0x38>)
 8004d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2001      	movs	r0, #1
 8004da2:	fa00 f202 	lsl.w	r2, r0, r2
 8004da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	e000e100 	.word	0xe000e100

08004dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	6039      	str	r1, [r7, #0]
 8004dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	db0a      	blt.n	8004de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	490c      	ldr	r1, [pc, #48]	; (8004e08 <__NVIC_SetPriority+0x4c>)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	0112      	lsls	r2, r2, #4
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	440b      	add	r3, r1
 8004de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004de4:	e00a      	b.n	8004dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4908      	ldr	r1, [pc, #32]	; (8004e0c <__NVIC_SetPriority+0x50>)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	3b04      	subs	r3, #4
 8004df4:	0112      	lsls	r2, r2, #4
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	440b      	add	r3, r1
 8004dfa:	761a      	strb	r2, [r3, #24]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	e000e100 	.word	0xe000e100
 8004e0c:	e000ed00 	.word	0xe000ed00

08004e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f1c3 0307 	rsb	r3, r3, #7
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	bf28      	it	cs
 8004e2e:	2304      	movcs	r3, #4
 8004e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2b06      	cmp	r3, #6
 8004e38:	d902      	bls.n	8004e40 <NVIC_EncodePriority+0x30>
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3b03      	subs	r3, #3
 8004e3e:	e000      	b.n	8004e42 <NVIC_EncodePriority+0x32>
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43da      	mvns	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	401a      	ands	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e62:	43d9      	mvns	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e68:	4313      	orrs	r3, r2
         );
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3724      	adds	r7, #36	; 0x24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e88:	d301      	bcc.n	8004e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e00f      	b.n	8004eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e8e:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <SysTick_Config+0x40>)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e96:	210f      	movs	r1, #15
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e9c:	f7ff ff8e 	bl	8004dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <SysTick_Config+0x40>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ea6:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <SysTick_Config+0x40>)
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	e000e010 	.word	0xe000e010

08004ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b07      	cmp	r3, #7
 8004ec8:	d00f      	beq.n	8004eea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b06      	cmp	r3, #6
 8004ece:	d00c      	beq.n	8004eea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b05      	cmp	r3, #5
 8004ed4:	d009      	beq.n	8004eea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d006      	beq.n	8004eea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d003      	beq.n	8004eea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004ee2:	2192      	movs	r1, #146	; 0x92
 8004ee4:	4804      	ldr	r0, [pc, #16]	; (8004ef8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004ee6:	f7fd fd3e 	bl	8002966 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff ff16 	bl	8004d1c <__NVIC_SetPriorityGrouping>
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	0800bd08 	.word	0x0800bd08

08004efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b0f      	cmp	r3, #15
 8004f12:	d903      	bls.n	8004f1c <HAL_NVIC_SetPriority+0x20>
 8004f14:	21aa      	movs	r1, #170	; 0xaa
 8004f16:	480e      	ldr	r0, [pc, #56]	; (8004f50 <HAL_NVIC_SetPriority+0x54>)
 8004f18:	f7fd fd25 	bl	8002966 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b0f      	cmp	r3, #15
 8004f20:	d903      	bls.n	8004f2a <HAL_NVIC_SetPriority+0x2e>
 8004f22:	21ab      	movs	r1, #171	; 0xab
 8004f24:	480a      	ldr	r0, [pc, #40]	; (8004f50 <HAL_NVIC_SetPriority+0x54>)
 8004f26:	f7fd fd1e 	bl	8002966 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f2a:	f7ff ff1b 	bl	8004d64 <__NVIC_GetPriorityGrouping>
 8004f2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	6978      	ldr	r0, [r7, #20]
 8004f36:	f7ff ff6b 	bl	8004e10 <NVIC_EncodePriority>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff ff3a 	bl	8004dbc <__NVIC_SetPriority>
}
 8004f48:	bf00      	nop
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	0800bd08 	.word	0x0800bd08

08004f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da03      	bge.n	8004f6e <HAL_NVIC_EnableIRQ+0x1a>
 8004f66:	21be      	movs	r1, #190	; 0xbe
 8004f68:	4805      	ldr	r0, [pc, #20]	; (8004f80 <HAL_NVIC_EnableIRQ+0x2c>)
 8004f6a:	f7fd fcfc 	bl	8002966 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff ff04 	bl	8004d80 <__NVIC_EnableIRQ>
}
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	0800bd08 	.word	0x0800bd08

08004f84 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff ff73 	bl	8004e78 <SysTick_Config>
 8004f92:	4603      	mov	r3, r0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d007      	beq.n	8004fba <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8004fb0:	f240 11c9 	movw	r1, #457	; 0x1c9
 8004fb4:	480b      	ldr	r0, [pc, #44]	; (8004fe4 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 8004fb6:	f7fd fcd6 	bl	8002966 <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d106      	bne.n	8004fce <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004fcc:	e005      	b.n	8004fda <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004fce:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a05      	ldr	r2, [pc, #20]	; (8004fe8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8004fd4:	f023 0304 	bic.w	r3, r3, #4
 8004fd8:	6013      	str	r3, [r2, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	0800bd08 	.word	0x0800bd08
 8004fe8:	e000e010 	.word	0xe000e010

08004fec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ff8:	f7fe fe0e 	bl	8003c18 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e204      	b.n	8005412 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a97      	ldr	r2, [pc, #604]	; (800526c <HAL_DMA_Init+0x280>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d04e      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a96      	ldr	r2, [pc, #600]	; (8005270 <HAL_DMA_Init+0x284>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d049      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a94      	ldr	r2, [pc, #592]	; (8005274 <HAL_DMA_Init+0x288>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d044      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a93      	ldr	r2, [pc, #588]	; (8005278 <HAL_DMA_Init+0x28c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d03f      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a91      	ldr	r2, [pc, #580]	; (800527c <HAL_DMA_Init+0x290>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d03a      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a90      	ldr	r2, [pc, #576]	; (8005280 <HAL_DMA_Init+0x294>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d035      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a8e      	ldr	r2, [pc, #568]	; (8005284 <HAL_DMA_Init+0x298>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d030      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a8d      	ldr	r2, [pc, #564]	; (8005288 <HAL_DMA_Init+0x29c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d02b      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a8b      	ldr	r2, [pc, #556]	; (800528c <HAL_DMA_Init+0x2a0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d026      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a8a      	ldr	r2, [pc, #552]	; (8005290 <HAL_DMA_Init+0x2a4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d021      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a88      	ldr	r2, [pc, #544]	; (8005294 <HAL_DMA_Init+0x2a8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01c      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a87      	ldr	r2, [pc, #540]	; (8005298 <HAL_DMA_Init+0x2ac>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d017      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a85      	ldr	r2, [pc, #532]	; (800529c <HAL_DMA_Init+0x2b0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d012      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a84      	ldr	r2, [pc, #528]	; (80052a0 <HAL_DMA_Init+0x2b4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00d      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a82      	ldr	r2, [pc, #520]	; (80052a4 <HAL_DMA_Init+0x2b8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d008      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a81      	ldr	r2, [pc, #516]	; (80052a8 <HAL_DMA_Init+0x2bc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <HAL_DMA_Init+0xc4>
 80050a8:	21b8      	movs	r1, #184	; 0xb8
 80050aa:	4880      	ldr	r0, [pc, #512]	; (80052ac <HAL_DMA_Init+0x2c0>)
 80050ac:	f7fd fc5b 	bl	8002966 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d026      	beq.n	8005106 <HAL_DMA_Init+0x11a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050c0:	d021      	beq.n	8005106 <HAL_DMA_Init+0x11a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ca:	d01c      	beq.n	8005106 <HAL_DMA_Init+0x11a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80050d4:	d017      	beq.n	8005106 <HAL_DMA_Init+0x11a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050de:	d012      	beq.n	8005106 <HAL_DMA_Init+0x11a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80050e8:	d00d      	beq.n	8005106 <HAL_DMA_Init+0x11a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80050f2:	d008      	beq.n	8005106 <HAL_DMA_Init+0x11a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80050fc:	d003      	beq.n	8005106 <HAL_DMA_Init+0x11a>
 80050fe:	21b9      	movs	r1, #185	; 0xb9
 8005100:	486a      	ldr	r0, [pc, #424]	; (80052ac <HAL_DMA_Init+0x2c0>)
 8005102:	f7fd fc30 	bl	8002966 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <HAL_DMA_Init+0x13a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d007      	beq.n	8005126 <HAL_DMA_Init+0x13a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b80      	cmp	r3, #128	; 0x80
 800511c:	d003      	beq.n	8005126 <HAL_DMA_Init+0x13a>
 800511e:	21ba      	movs	r1, #186	; 0xba
 8005120:	4862      	ldr	r0, [pc, #392]	; (80052ac <HAL_DMA_Init+0x2c0>)
 8005122:	f7fd fc20 	bl	8002966 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800512e:	d007      	beq.n	8005140 <HAL_DMA_Init+0x154>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_DMA_Init+0x154>
 8005138:	21bb      	movs	r1, #187	; 0xbb
 800513a:	485c      	ldr	r0, [pc, #368]	; (80052ac <HAL_DMA_Init+0x2c0>)
 800513c:	f7fd fc13 	bl	8002966 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005148:	d007      	beq.n	800515a <HAL_DMA_Init+0x16e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_DMA_Init+0x16e>
 8005152:	21bc      	movs	r1, #188	; 0xbc
 8005154:	4855      	ldr	r0, [pc, #340]	; (80052ac <HAL_DMA_Init+0x2c0>)
 8005156:	f7fd fc06 	bl	8002966 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <HAL_DMA_Init+0x192>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516a:	d008      	beq.n	800517e <HAL_DMA_Init+0x192>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005174:	d003      	beq.n	800517e <HAL_DMA_Init+0x192>
 8005176:	21bd      	movs	r1, #189	; 0xbd
 8005178:	484c      	ldr	r0, [pc, #304]	; (80052ac <HAL_DMA_Init+0x2c0>)
 800517a:	f7fd fbf4 	bl	8002966 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00d      	beq.n	80051a2 <HAL_DMA_Init+0x1b6>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518e:	d008      	beq.n	80051a2 <HAL_DMA_Init+0x1b6>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005198:	d003      	beq.n	80051a2 <HAL_DMA_Init+0x1b6>
 800519a:	21be      	movs	r1, #190	; 0xbe
 800519c:	4843      	ldr	r0, [pc, #268]	; (80052ac <HAL_DMA_Init+0x2c0>)
 800519e:	f7fd fbe2 	bl	8002966 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00c      	beq.n	80051c4 <HAL_DMA_Init+0x1d8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b2:	d007      	beq.n	80051c4 <HAL_DMA_Init+0x1d8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d003      	beq.n	80051c4 <HAL_DMA_Init+0x1d8>
 80051bc:	21bf      	movs	r1, #191	; 0xbf
 80051be:	483b      	ldr	r0, [pc, #236]	; (80052ac <HAL_DMA_Init+0x2c0>)
 80051c0:	f7fd fbd1 	bl	8002966 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d012      	beq.n	80051f2 <HAL_DMA_Init+0x206>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d00d      	beq.n	80051f2 <HAL_DMA_Init+0x206>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051de:	d008      	beq.n	80051f2 <HAL_DMA_Init+0x206>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051e8:	d003      	beq.n	80051f2 <HAL_DMA_Init+0x206>
 80051ea:	21c0      	movs	r1, #192	; 0xc0
 80051ec:	482f      	ldr	r0, [pc, #188]	; (80052ac <HAL_DMA_Init+0x2c0>)
 80051ee:	f7fd fbba 	bl	8002966 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <HAL_DMA_Init+0x21e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d003      	beq.n	800520a <HAL_DMA_Init+0x21e>
 8005202:	21c1      	movs	r1, #193	; 0xc1
 8005204:	4829      	ldr	r0, [pc, #164]	; (80052ac <HAL_DMA_Init+0x2c0>)
 8005206:	f7fd fbae 	bl	8002966 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d065      	beq.n	80052de <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00f      	beq.n	800523a <HAL_DMA_Init+0x24e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	2b01      	cmp	r3, #1
 8005220:	d00b      	beq.n	800523a <HAL_DMA_Init+0x24e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	2b02      	cmp	r3, #2
 8005228:	d007      	beq.n	800523a <HAL_DMA_Init+0x24e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	2b03      	cmp	r3, #3
 8005230:	d003      	beq.n	800523a <HAL_DMA_Init+0x24e>
 8005232:	21c6      	movs	r1, #198	; 0xc6
 8005234:	481d      	ldr	r0, [pc, #116]	; (80052ac <HAL_DMA_Init+0x2c0>)
 8005236:	f7fd fb96 	bl	8002966 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d036      	beq.n	80052b0 <HAL_DMA_Init+0x2c4>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800524a:	d031      	beq.n	80052b0 <HAL_DMA_Init+0x2c4>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005254:	d02c      	beq.n	80052b0 <HAL_DMA_Init+0x2c4>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800525e:	d027      	beq.n	80052b0 <HAL_DMA_Init+0x2c4>
 8005260:	21c7      	movs	r1, #199	; 0xc7
 8005262:	4812      	ldr	r0, [pc, #72]	; (80052ac <HAL_DMA_Init+0x2c0>)
 8005264:	f7fd fb7f 	bl	8002966 <assert_failed>
 8005268:	e022      	b.n	80052b0 <HAL_DMA_Init+0x2c4>
 800526a:	bf00      	nop
 800526c:	40026010 	.word	0x40026010
 8005270:	40026028 	.word	0x40026028
 8005274:	40026040 	.word	0x40026040
 8005278:	40026058 	.word	0x40026058
 800527c:	40026070 	.word	0x40026070
 8005280:	40026088 	.word	0x40026088
 8005284:	400260a0 	.word	0x400260a0
 8005288:	400260b8 	.word	0x400260b8
 800528c:	40026410 	.word	0x40026410
 8005290:	40026428 	.word	0x40026428
 8005294:	40026440 	.word	0x40026440
 8005298:	40026458 	.word	0x40026458
 800529c:	40026470 	.word	0x40026470
 80052a0:	40026488 	.word	0x40026488
 80052a4:	400264a0 	.word	0x400264a0
 80052a8:	400264b8 	.word	0x400264b8
 80052ac:	0800bd44 	.word	0x0800bd44
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d012      	beq.n	80052de <HAL_DMA_Init+0x2f2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052c0:	d00d      	beq.n	80052de <HAL_DMA_Init+0x2f2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ca:	d008      	beq.n	80052de <HAL_DMA_Init+0x2f2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80052d4:	d003      	beq.n	80052de <HAL_DMA_Init+0x2f2>
 80052d6:	21c8      	movs	r1, #200	; 0xc8
 80052d8:	4850      	ldr	r0, [pc, #320]	; (800541c <HAL_DMA_Init+0x430>)
 80052da:	f7fd fb44 	bl	8002966 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052fe:	e00f      	b.n	8005320 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005300:	f7fe fc8a 	bl	8003c18 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b05      	cmp	r3, #5
 800530c:	d908      	bls.n	8005320 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2203      	movs	r2, #3
 8005318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e078      	b.n	8005412 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e8      	bne.n	8005300 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4b39      	ldr	r3, [pc, #228]	; (8005420 <HAL_DMA_Init+0x434>)
 800533a:	4013      	ands	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800534c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b04      	cmp	r3, #4
 8005378:	d107      	bne.n	800538a <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	4313      	orrs	r3, r2
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f023 0307 	bic.w	r3, r3, #7
 80053a0:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d117      	bne.n	80053e4 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00e      	beq.n	80053e4 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f9ec 	bl	80057a4 <DMA_CheckFifoParam>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2240      	movs	r2, #64	; 0x40
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80053e0:	2301      	movs	r3, #1
 80053e2:	e016      	b.n	8005412 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f9a3 	bl	8005738 <DMA_CalcBaseAndBitshift>
 80053f2:	4603      	mov	r3, r0
 80053f4:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fa:	223f      	movs	r2, #63	; 0x3f
 80053fc:	409a      	lsls	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	0800bd44 	.word	0x0800bd44
 8005420:	f010803f 	.word	0xf010803f

08005424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005430:	4b92      	ldr	r3, [pc, #584]	; (800567c <HAL_DMA_IRQHandler+0x258>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a92      	ldr	r2, [pc, #584]	; (8005680 <HAL_DMA_IRQHandler+0x25c>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	0a9b      	lsrs	r3, r3, #10
 800543c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005442:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544e:	2208      	movs	r2, #8
 8005450:	409a      	lsls	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4013      	ands	r3, r2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01a      	beq.n	8005490 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d013      	beq.n	8005490 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0204 	bic.w	r2, r2, #4
 8005476:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547c:	2208      	movs	r2, #8
 800547e:	409a      	lsls	r2, r3
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005488:	f043 0201 	orr.w	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005494:	2201      	movs	r2, #1
 8005496:	409a      	lsls	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d012      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00b      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	2201      	movs	r2, #1
 80054b4:	409a      	lsls	r2, r3
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f043 0202 	orr.w	r2, r3, #2
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ca:	2204      	movs	r2, #4
 80054cc:	409a      	lsls	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d012      	beq.n	80054fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00b      	beq.n	80054fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e8:	2204      	movs	r2, #4
 80054ea:	409a      	lsls	r2, r3
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f4:	f043 0204 	orr.w	r2, r3, #4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	2210      	movs	r2, #16
 8005502:	409a      	lsls	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4013      	ands	r3, r2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d043      	beq.n	8005594 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d03c      	beq.n	8005594 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551e:	2210      	movs	r2, #16
 8005520:	409a      	lsls	r2, r3
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d018      	beq.n	8005566 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d108      	bne.n	8005554 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d024      	beq.n	8005594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	4798      	blx	r3
 8005552:	e01f      	b.n	8005594 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01b      	beq.n	8005594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	4798      	blx	r3
 8005564:	e016      	b.n	8005594 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005570:	2b00      	cmp	r3, #0
 8005572:	d107      	bne.n	8005584 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0208 	bic.w	r2, r2, #8
 8005582:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005598:	2220      	movs	r2, #32
 800559a:	409a      	lsls	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4013      	ands	r3, r2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 808e 	beq.w	80056c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8086 	beq.w	80056c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ba:	2220      	movs	r2, #32
 80055bc:	409a      	lsls	r2, r3
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d136      	bne.n	800563c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0216 	bic.w	r2, r2, #22
 80055dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d103      	bne.n	80055fe <HAL_DMA_IRQHandler+0x1da>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0208 	bic.w	r2, r2, #8
 800560c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005612:	223f      	movs	r2, #63	; 0x3f
 8005614:	409a      	lsls	r2, r3
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562e:	2b00      	cmp	r3, #0
 8005630:	d07d      	beq.n	800572e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	4798      	blx	r3
        }
        return;
 800563a:	e078      	b.n	800572e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01c      	beq.n	8005684 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d108      	bne.n	800566a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	2b00      	cmp	r3, #0
 800565e:	d030      	beq.n	80056c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
 8005668:	e02b      	b.n	80056c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d027      	beq.n	80056c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
 800567a:	e022      	b.n	80056c2 <HAL_DMA_IRQHandler+0x29e>
 800567c:	200001f0 	.word	0x200001f0
 8005680:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10f      	bne.n	80056b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0210 	bic.w	r2, r2, #16
 80056a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d032      	beq.n	8005730 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d022      	beq.n	800571c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2205      	movs	r2, #5
 80056da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60bb      	str	r3, [r7, #8]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d307      	bcc.n	800570a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f2      	bne.n	80056ee <HAL_DMA_IRQHandler+0x2ca>
 8005708:	e000      	b.n	800570c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800570a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	4798      	blx	r3
 800572c:	e000      	b.n	8005730 <HAL_DMA_IRQHandler+0x30c>
        return;
 800572e:	bf00      	nop
    }
  }
}
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop

08005738 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	3b10      	subs	r3, #16
 8005748:	4a14      	ldr	r2, [pc, #80]	; (800579c <DMA_CalcBaseAndBitshift+0x64>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	091b      	lsrs	r3, r3, #4
 8005750:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005752:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4413      	add	r3, r2
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b03      	cmp	r3, #3
 8005764:	d909      	bls.n	800577a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800576e:	f023 0303 	bic.w	r3, r3, #3
 8005772:	1d1a      	adds	r2, r3, #4
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	659a      	str	r2, [r3, #88]	; 0x58
 8005778:	e007      	b.n	800578a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	aaaaaaab 	.word	0xaaaaaaab
 80057a0:	0800bf94 	.word	0x0800bf94

080057a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11f      	bne.n	80057fe <DMA_CheckFifoParam+0x5a>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d856      	bhi.n	8005872 <DMA_CheckFifoParam+0xce>
 80057c4:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <DMA_CheckFifoParam+0x28>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	080057dd 	.word	0x080057dd
 80057d0:	080057ef 	.word	0x080057ef
 80057d4:	080057dd 	.word	0x080057dd
 80057d8:	08005873 	.word	0x08005873
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d046      	beq.n	8005876 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ec:	e043      	b.n	8005876 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057f6:	d140      	bne.n	800587a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057fc:	e03d      	b.n	800587a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005806:	d121      	bne.n	800584c <DMA_CheckFifoParam+0xa8>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b03      	cmp	r3, #3
 800580c:	d837      	bhi.n	800587e <DMA_CheckFifoParam+0xda>
 800580e:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <DMA_CheckFifoParam+0x70>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	08005825 	.word	0x08005825
 8005818:	0800582b 	.word	0x0800582b
 800581c:	08005825 	.word	0x08005825
 8005820:	0800583d 	.word	0x0800583d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
      break;
 8005828:	e030      	b.n	800588c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d025      	beq.n	8005882 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800583a:	e022      	b.n	8005882 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005844:	d11f      	bne.n	8005886 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800584a:	e01c      	b.n	8005886 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d903      	bls.n	800585a <DMA_CheckFifoParam+0xb6>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b03      	cmp	r3, #3
 8005856:	d003      	beq.n	8005860 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005858:	e018      	b.n	800588c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
      break;
 800585e:	e015      	b.n	800588c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00e      	beq.n	800588a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	73fb      	strb	r3, [r7, #15]
      break;
 8005870:	e00b      	b.n	800588a <DMA_CheckFifoParam+0xe6>
      break;
 8005872:	bf00      	nop
 8005874:	e00a      	b.n	800588c <DMA_CheckFifoParam+0xe8>
      break;
 8005876:	bf00      	nop
 8005878:	e008      	b.n	800588c <DMA_CheckFifoParam+0xe8>
      break;
 800587a:	bf00      	nop
 800587c:	e006      	b.n	800588c <DMA_CheckFifoParam+0xe8>
      break;
 800587e:	bf00      	nop
 8005880:	e004      	b.n	800588c <DMA_CheckFifoParam+0xe8>
      break;
 8005882:	bf00      	nop
 8005884:	e002      	b.n	800588c <DMA_CheckFifoParam+0xe8>
      break;   
 8005886:	bf00      	nop
 8005888:	e000      	b.n	800588c <DMA_CheckFifoParam+0xe8>
      break;
 800588a:	bf00      	nop
    }
  } 
  
  return status; 
 800588c:	7bfb      	ldrb	r3, [r7, #15]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop

0800589c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a45      	ldr	r2, [pc, #276]	; (80059cc <HAL_GPIO_Init+0x130>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d02b      	beq.n	8005912 <HAL_GPIO_Init+0x76>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a44      	ldr	r2, [pc, #272]	; (80059d0 <HAL_GPIO_Init+0x134>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d027      	beq.n	8005912 <HAL_GPIO_Init+0x76>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a43      	ldr	r2, [pc, #268]	; (80059d4 <HAL_GPIO_Init+0x138>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d023      	beq.n	8005912 <HAL_GPIO_Init+0x76>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a42      	ldr	r2, [pc, #264]	; (80059d8 <HAL_GPIO_Init+0x13c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01f      	beq.n	8005912 <HAL_GPIO_Init+0x76>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a41      	ldr	r2, [pc, #260]	; (80059dc <HAL_GPIO_Init+0x140>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01b      	beq.n	8005912 <HAL_GPIO_Init+0x76>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a40      	ldr	r2, [pc, #256]	; (80059e0 <HAL_GPIO_Init+0x144>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d017      	beq.n	8005912 <HAL_GPIO_Init+0x76>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a3f      	ldr	r2, [pc, #252]	; (80059e4 <HAL_GPIO_Init+0x148>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_GPIO_Init+0x76>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a3e      	ldr	r2, [pc, #248]	; (80059e8 <HAL_GPIO_Init+0x14c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00f      	beq.n	8005912 <HAL_GPIO_Init+0x76>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a3d      	ldr	r2, [pc, #244]	; (80059ec <HAL_GPIO_Init+0x150>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00b      	beq.n	8005912 <HAL_GPIO_Init+0x76>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a3c      	ldr	r2, [pc, #240]	; (80059f0 <HAL_GPIO_Init+0x154>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <HAL_GPIO_Init+0x76>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a3b      	ldr	r2, [pc, #236]	; (80059f4 <HAL_GPIO_Init+0x158>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <HAL_GPIO_Init+0x76>
 800590a:	21b3      	movs	r1, #179	; 0xb3
 800590c:	483a      	ldr	r0, [pc, #232]	; (80059f8 <HAL_GPIO_Init+0x15c>)
 800590e:	f7fd f82a 	bl	8002966 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_GPIO_Init+0x8c>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	0c1b      	lsrs	r3, r3, #16
 8005922:	041b      	lsls	r3, r3, #16
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_GPIO_Init+0x94>
 8005928:	21b4      	movs	r1, #180	; 0xb4
 800592a:	4833      	ldr	r0, [pc, #204]	; (80059f8 <HAL_GPIO_Init+0x15c>)
 800592c:	f7fd f81b 	bl	8002966 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d035      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d031      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2b11      	cmp	r3, #17
 8005946:	d02d      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d029      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b12      	cmp	r3, #18
 8005956:	d025      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	4a27      	ldr	r2, [pc, #156]	; (80059fc <HAL_GPIO_Init+0x160>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d020      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4a26      	ldr	r2, [pc, #152]	; (8005a00 <HAL_GPIO_Init+0x164>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d01b      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4a24      	ldr	r2, [pc, #144]	; (8005a04 <HAL_GPIO_Init+0x168>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d016      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4a23      	ldr	r2, [pc, #140]	; (8005a08 <HAL_GPIO_Init+0x16c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d011      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <HAL_GPIO_Init+0x170>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00c      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	4a20      	ldr	r2, [pc, #128]	; (8005a10 <HAL_GPIO_Init+0x174>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d007      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d003      	beq.n	80059a4 <HAL_GPIO_Init+0x108>
 800599c:	21b5      	movs	r1, #181	; 0xb5
 800599e:	4816      	ldr	r0, [pc, #88]	; (80059f8 <HAL_GPIO_Init+0x15c>)
 80059a0:	f7fc ffe1 	bl	8002966 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <HAL_GPIO_Init+0x128>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d007      	beq.n	80059c4 <HAL_GPIO_Init+0x128>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d003      	beq.n	80059c4 <HAL_GPIO_Init+0x128>
 80059bc:	21b6      	movs	r1, #182	; 0xb6
 80059be:	480e      	ldr	r0, [pc, #56]	; (80059f8 <HAL_GPIO_Init+0x15c>)
 80059c0:	f7fc ffd1 	bl	8002966 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059c4:	2300      	movs	r3, #0
 80059c6:	61fb      	str	r3, [r7, #28]
 80059c8:	e270      	b.n	8005eac <HAL_GPIO_Init+0x610>
 80059ca:	bf00      	nop
 80059cc:	40020000 	.word	0x40020000
 80059d0:	40020400 	.word	0x40020400
 80059d4:	40020800 	.word	0x40020800
 80059d8:	40020c00 	.word	0x40020c00
 80059dc:	40021000 	.word	0x40021000
 80059e0:	40021400 	.word	0x40021400
 80059e4:	40021800 	.word	0x40021800
 80059e8:	40021c00 	.word	0x40021c00
 80059ec:	40022000 	.word	0x40022000
 80059f0:	40022400 	.word	0x40022400
 80059f4:	40022800 	.word	0x40022800
 80059f8:	0800bd7c 	.word	0x0800bd7c
 80059fc:	10110000 	.word	0x10110000
 8005a00:	10210000 	.word	0x10210000
 8005a04:	10310000 	.word	0x10310000
 8005a08:	10120000 	.word	0x10120000
 8005a0c:	10220000 	.word	0x10220000
 8005a10:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a14:	2201      	movs	r2, #1
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4013      	ands	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	f040 823a 	bne.w	8005ea6 <HAL_GPIO_Init+0x60a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d00b      	beq.n	8005a52 <HAL_GPIO_Init+0x1b6>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d007      	beq.n	8005a52 <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a46:	2b11      	cmp	r3, #17
 8005a48:	d003      	beq.n	8005a52 <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b12      	cmp	r3, #18
 8005a50:	d144      	bne.n	8005adc <HAL_GPIO_Init+0x240>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00f      	beq.n	8005a7a <HAL_GPIO_Init+0x1de>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d00b      	beq.n	8005a7a <HAL_GPIO_Init+0x1de>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d007      	beq.n	8005a7a <HAL_GPIO_Init+0x1de>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d003      	beq.n	8005a7a <HAL_GPIO_Init+0x1de>
 8005a72:	21c8      	movs	r1, #200	; 0xc8
 8005a74:	489a      	ldr	r0, [pc, #616]	; (8005ce0 <HAL_GPIO_Init+0x444>)
 8005a76:	f7fc ff76 	bl	8002966 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	2203      	movs	r2, #3
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4013      	ands	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	f003 0201 	and.w	r2, r3, #1
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	43db      	mvns	r3, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4013      	ands	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d004      	beq.n	8005b1e <HAL_GPIO_Init+0x282>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b12      	cmp	r3, #18
 8005b1a:	f040 80e3 	bne.w	8005ce4 <HAL_GPIO_Init+0x448>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80b6 	beq.w	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b09      	cmp	r3, #9
 8005b2e:	f000 80b1 	beq.w	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 80ac 	beq.w	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80a7 	beq.w	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 80a2 	beq.w	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 809d 	beq.w	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	f000 8098 	beq.w	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f000 8093 	beq.w	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	f000 808e 	beq.w	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	f000 8089 	beq.w	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	f000 8084 	beq.w	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d07f      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d07b      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d077      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d073      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b05      	cmp	r3, #5
 8005bb2:	d06f      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b05      	cmp	r3, #5
 8005bba:	d06b      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b09      	cmp	r3, #9
 8005bc2:	d067      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b06      	cmp	r3, #6
 8005bca:	d063      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b09      	cmp	r3, #9
 8005bd2:	d05f      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b07      	cmp	r3, #7
 8005bda:	d05b      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b07      	cmp	r3, #7
 8005be2:	d057      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b07      	cmp	r3, #7
 8005bea:	d053      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d04f      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d04b      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d047      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b09      	cmp	r3, #9
 8005c0a:	d043      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b09      	cmp	r3, #9
 8005c12:	d03f      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2b0a      	cmp	r3, #10
 8005c1a:	d03b      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b0a      	cmp	r3, #10
 8005c22:	d037      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b0b      	cmp	r3, #11
 8005c2a:	d033      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b0c      	cmp	r3, #12
 8005c32:	d02f      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b0c      	cmp	r3, #12
 8005c3a:	d02b      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b0d      	cmp	r3, #13
 8005c42:	d027      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b0f      	cmp	r3, #15
 8005c4a:	d023      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b05      	cmp	r3, #5
 8005c52:	d01f      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2b05      	cmp	r3, #5
 8005c5a:	d01b      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b05      	cmp	r3, #5
 8005c62:	d017      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d013      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d00f      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d00b      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b06      	cmp	r3, #6
 8005c82:	d007      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	2b0e      	cmp	r3, #14
 8005c8a:	d003      	beq.n	8005c94 <HAL_GPIO_Init+0x3f8>
 8005c8c:	21e0      	movs	r1, #224	; 0xe0
 8005c8e:	4814      	ldr	r0, [pc, #80]	; (8005ce0 <HAL_GPIO_Init+0x444>)
 8005c90:	f7fc fe69 	bl	8002966 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	08da      	lsrs	r2, r3, #3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3208      	adds	r2, #8
 8005c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	220f      	movs	r2, #15
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	08da      	lsrs	r2, r3, #3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3208      	adds	r2, #8
 8005cd6:	69b9      	ldr	r1, [r7, #24]
 8005cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005cdc:	e002      	b.n	8005ce4 <HAL_GPIO_Init+0x448>
 8005cde:	bf00      	nop
 8005ce0:	0800bd7c 	.word	0x0800bd7c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	2203      	movs	r2, #3
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 0203 	and.w	r2, r3, #3
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80c0 	beq.w	8005ea6 <HAL_GPIO_Init+0x60a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	4b65      	ldr	r3, [pc, #404]	; (8005ec0 <HAL_GPIO_Init+0x624>)
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	4a64      	ldr	r2, [pc, #400]	; (8005ec0 <HAL_GPIO_Init+0x624>)
 8005d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d34:	6453      	str	r3, [r2, #68]	; 0x44
 8005d36:	4b62      	ldr	r3, [pc, #392]	; (8005ec0 <HAL_GPIO_Init+0x624>)
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d42:	4a60      	ldr	r2, [pc, #384]	; (8005ec4 <HAL_GPIO_Init+0x628>)
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	089b      	lsrs	r3, r3, #2
 8005d48:	3302      	adds	r3, #2
 8005d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	220f      	movs	r2, #15
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a57      	ldr	r2, [pc, #348]	; (8005ec8 <HAL_GPIO_Init+0x62c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d037      	beq.n	8005dde <HAL_GPIO_Init+0x542>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a56      	ldr	r2, [pc, #344]	; (8005ecc <HAL_GPIO_Init+0x630>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d031      	beq.n	8005dda <HAL_GPIO_Init+0x53e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a55      	ldr	r2, [pc, #340]	; (8005ed0 <HAL_GPIO_Init+0x634>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d02b      	beq.n	8005dd6 <HAL_GPIO_Init+0x53a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a54      	ldr	r2, [pc, #336]	; (8005ed4 <HAL_GPIO_Init+0x638>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d025      	beq.n	8005dd2 <HAL_GPIO_Init+0x536>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a53      	ldr	r2, [pc, #332]	; (8005ed8 <HAL_GPIO_Init+0x63c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d01f      	beq.n	8005dce <HAL_GPIO_Init+0x532>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a52      	ldr	r2, [pc, #328]	; (8005edc <HAL_GPIO_Init+0x640>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d019      	beq.n	8005dca <HAL_GPIO_Init+0x52e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a51      	ldr	r2, [pc, #324]	; (8005ee0 <HAL_GPIO_Init+0x644>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <HAL_GPIO_Init+0x52a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a50      	ldr	r2, [pc, #320]	; (8005ee4 <HAL_GPIO_Init+0x648>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00d      	beq.n	8005dc2 <HAL_GPIO_Init+0x526>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a4f      	ldr	r2, [pc, #316]	; (8005ee8 <HAL_GPIO_Init+0x64c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d007      	beq.n	8005dbe <HAL_GPIO_Init+0x522>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a4e      	ldr	r2, [pc, #312]	; (8005eec <HAL_GPIO_Init+0x650>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d101      	bne.n	8005dba <HAL_GPIO_Init+0x51e>
 8005db6:	2309      	movs	r3, #9
 8005db8:	e012      	b.n	8005de0 <HAL_GPIO_Init+0x544>
 8005dba:	230a      	movs	r3, #10
 8005dbc:	e010      	b.n	8005de0 <HAL_GPIO_Init+0x544>
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	e00e      	b.n	8005de0 <HAL_GPIO_Init+0x544>
 8005dc2:	2307      	movs	r3, #7
 8005dc4:	e00c      	b.n	8005de0 <HAL_GPIO_Init+0x544>
 8005dc6:	2306      	movs	r3, #6
 8005dc8:	e00a      	b.n	8005de0 <HAL_GPIO_Init+0x544>
 8005dca:	2305      	movs	r3, #5
 8005dcc:	e008      	b.n	8005de0 <HAL_GPIO_Init+0x544>
 8005dce:	2304      	movs	r3, #4
 8005dd0:	e006      	b.n	8005de0 <HAL_GPIO_Init+0x544>
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e004      	b.n	8005de0 <HAL_GPIO_Init+0x544>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e002      	b.n	8005de0 <HAL_GPIO_Init+0x544>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <HAL_GPIO_Init+0x544>
 8005dde:	2300      	movs	r3, #0
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	f002 0203 	and.w	r2, r2, #3
 8005de6:	0092      	lsls	r2, r2, #2
 8005de8:	4093      	lsls	r3, r2
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005df0:	4934      	ldr	r1, [pc, #208]	; (8005ec4 <HAL_GPIO_Init+0x628>)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	089b      	lsrs	r3, r3, #2
 8005df6:	3302      	adds	r3, #2
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005dfe:	4b3c      	ldr	r3, [pc, #240]	; (8005ef0 <HAL_GPIO_Init+0x654>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	43db      	mvns	r3, r3
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_GPIO_Init+0x586>
        {
          temp |= iocurrent;
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e22:	4a33      	ldr	r2, [pc, #204]	; (8005ef0 <HAL_GPIO_Init+0x654>)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e28:	4b31      	ldr	r3, [pc, #196]	; (8005ef0 <HAL_GPIO_Init+0x654>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4013      	ands	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_GPIO_Init+0x5b0>
        {
          temp |= iocurrent;
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e4c:	4a28      	ldr	r2, [pc, #160]	; (8005ef0 <HAL_GPIO_Init+0x654>)
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e52:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <HAL_GPIO_Init+0x654>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_GPIO_Init+0x5da>
        {
          temp |= iocurrent;
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e76:	4a1e      	ldr	r2, [pc, #120]	; (8005ef0 <HAL_GPIO_Init+0x654>)
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ef0 <HAL_GPIO_Init+0x654>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_GPIO_Init+0x604>
        {
          temp |= iocurrent;
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ea0:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <HAL_GPIO_Init+0x654>)
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b0f      	cmp	r3, #15
 8005eb0:	f67f adb0 	bls.w	8005a14 <HAL_GPIO_Init+0x178>
      }
    }
  }
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	40013800 	.word	0x40013800
 8005ec8:	40020000 	.word	0x40020000
 8005ecc:	40020400 	.word	0x40020400
 8005ed0:	40020800 	.word	0x40020800
 8005ed4:	40020c00 	.word	0x40020c00
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40021400 	.word	0x40021400
 8005ee0:	40021800 	.word	0x40021800
 8005ee4:	40021c00 	.word	0x40021c00
 8005ee8:	40022000 	.word	0x40022000
 8005eec:	40022400 	.word	0x40022400
 8005ef0:	40013c00 	.word	0x40013c00

08005ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005f00:	887b      	ldrh	r3, [r7, #2]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d004      	beq.n	8005f10 <HAL_GPIO_ReadPin+0x1c>
 8005f06:	887b      	ldrh	r3, [r7, #2]
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	041b      	lsls	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d004      	beq.n	8005f1a <HAL_GPIO_ReadPin+0x26>
 8005f10:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8005f14:	4809      	ldr	r0, [pc, #36]	; (8005f3c <HAL_GPIO_ReadPin+0x48>)
 8005f16:	f7fc fd26 	bl	8002966 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	887b      	ldrh	r3, [r7, #2]
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
 8005f2a:	e001      	b.n	8005f30 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	0800bd7c 	.word	0x0800bd7c

08005f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	807b      	strh	r3, [r7, #2]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005f50:	887b      	ldrh	r3, [r7, #2]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <HAL_GPIO_WritePin+0x20>
 8005f56:	887b      	ldrh	r3, [r7, #2]
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	041b      	lsls	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <HAL_GPIO_WritePin+0x2a>
 8005f60:	f240 119f 	movw	r1, #415	; 0x19f
 8005f64:	480e      	ldr	r0, [pc, #56]	; (8005fa0 <HAL_GPIO_WritePin+0x60>)
 8005f66:	f7fc fcfe 	bl	8002966 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005f6a:	787b      	ldrb	r3, [r7, #1]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <HAL_GPIO_WritePin+0x40>
 8005f70:	787b      	ldrb	r3, [r7, #1]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d004      	beq.n	8005f80 <HAL_GPIO_WritePin+0x40>
 8005f76:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8005f7a:	4809      	ldr	r0, [pc, #36]	; (8005fa0 <HAL_GPIO_WritePin+0x60>)
 8005f7c:	f7fc fcf3 	bl	8002966 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005f80:	787b      	ldrb	r3, [r7, #1]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f86:	887a      	ldrh	r2, [r7, #2]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f8c:	e003      	b.n	8005f96 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f8e:	887b      	ldrh	r3, [r7, #2]
 8005f90:	041a      	lsls	r2, r3, #16
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	619a      	str	r2, [r3, #24]
}
 8005f96:	bf00      	nop
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	0800bd7c 	.word	0x0800bd7c

08005fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005fae:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d006      	beq.n	8005fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fba:	4a05      	ldr	r2, [pc, #20]	; (8005fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fc fa9a 	bl	80024fc <HAL_GPIO_EXTI_Callback>
  }
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40013c00 	.word	0x40013c00

08005fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e1be      	b.n	8006364 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a9f      	ldr	r2, [pc, #636]	; (8006268 <HAL_I2C_Init+0x294>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00e      	beq.n	800600e <HAL_I2C_Init+0x3a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a9d      	ldr	r2, [pc, #628]	; (800626c <HAL_I2C_Init+0x298>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d009      	beq.n	800600e <HAL_I2C_Init+0x3a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a9c      	ldr	r2, [pc, #624]	; (8006270 <HAL_I2C_Init+0x29c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d004      	beq.n	800600e <HAL_I2C_Init+0x3a>
 8006004:	f240 11bf 	movw	r1, #447	; 0x1bf
 8006008:	489a      	ldr	r0, [pc, #616]	; (8006274 <HAL_I2C_Init+0x2a0>)
 800600a:	f7fc fcac 	bl	8002966 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <HAL_I2C_Init+0x4c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4a97      	ldr	r2, [pc, #604]	; (8006278 <HAL_I2C_Init+0x2a4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d904      	bls.n	800602a <HAL_I2C_Init+0x56>
 8006020:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006024:	4893      	ldr	r0, [pc, #588]	; (8006274 <HAL_I2C_Init+0x2a0>)
 8006026:	f7fc fc9e 	bl	8002966 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <HAL_I2C_Init+0x72>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800603a:	d004      	beq.n	8006046 <HAL_I2C_Init+0x72>
 800603c:	f240 11c1 	movw	r1, #449	; 0x1c1
 8006040:	488c      	ldr	r0, [pc, #560]	; (8006274 <HAL_I2C_Init+0x2a0>)
 8006042:	f7fc fc90 	bl	8002966 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d004      	beq.n	8006060 <HAL_I2C_Init+0x8c>
 8006056:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800605a:	4886      	ldr	r0, [pc, #536]	; (8006274 <HAL_I2C_Init+0x2a0>)
 800605c:	f7fc fc83 	bl	8002966 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006068:	d009      	beq.n	800607e <HAL_I2C_Init+0xaa>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006072:	d004      	beq.n	800607e <HAL_I2C_Init+0xaa>
 8006074:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006078:	487e      	ldr	r0, [pc, #504]	; (8006274 <HAL_I2C_Init+0x2a0>)
 800607a:	f7fc fc74 	bl	8002966 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <HAL_I2C_Init+0xc4>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d004      	beq.n	8006098 <HAL_I2C_Init+0xc4>
 800608e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8006092:	4878      	ldr	r0, [pc, #480]	; (8006274 <HAL_I2C_Init+0x2a0>)
 8006094:	f7fc fc67 	bl	8002966 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d004      	beq.n	80060ae <HAL_I2C_Init+0xda>
 80060a4:	f240 11c5 	movw	r1, #453	; 0x1c5
 80060a8:	4872      	ldr	r0, [pc, #456]	; (8006274 <HAL_I2C_Init+0x2a0>)
 80060aa:	f7fc fc5c 	bl	8002966 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <HAL_I2C_Init+0xf4>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	2b40      	cmp	r3, #64	; 0x40
 80060bc:	d004      	beq.n	80060c8 <HAL_I2C_Init+0xf4>
 80060be:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80060c2:	486c      	ldr	r0, [pc, #432]	; (8006274 <HAL_I2C_Init+0x2a0>)
 80060c4:	f7fc fc4f 	bl	8002966 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_I2C_Init+0x10e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	2b80      	cmp	r3, #128	; 0x80
 80060d6:	d004      	beq.n	80060e2 <HAL_I2C_Init+0x10e>
 80060d8:	f240 11c7 	movw	r1, #455	; 0x1c7
 80060dc:	4865      	ldr	r0, [pc, #404]	; (8006274 <HAL_I2C_Init+0x2a0>)
 80060de:	f7fc fc42 	bl	8002966 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fb fe74 	bl	8001de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2224      	movs	r2, #36	; 0x24
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0201 	bic.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006134:	f001 fe70 	bl	8007e18 <HAL_RCC_GetPCLK1Freq>
 8006138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4a4f      	ldr	r2, [pc, #316]	; (800627c <HAL_I2C_Init+0x2a8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d807      	bhi.n	8006154 <HAL_I2C_Init+0x180>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a4e      	ldr	r2, [pc, #312]	; (8006280 <HAL_I2C_Init+0x2ac>)
 8006148:	4293      	cmp	r3, r2
 800614a:	bf94      	ite	ls
 800614c:	2301      	movls	r3, #1
 800614e:	2300      	movhi	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	e006      	b.n	8006162 <HAL_I2C_Init+0x18e>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4a4b      	ldr	r2, [pc, #300]	; (8006284 <HAL_I2C_Init+0x2b0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	bf94      	ite	ls
 800615c:	2301      	movls	r3, #1
 800615e:	2300      	movhi	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e0fc      	b.n	8006364 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4a46      	ldr	r2, [pc, #280]	; (8006288 <HAL_I2C_Init+0x2b4>)
 800616e:	fba2 2303 	umull	r2, r3, r2, r3
 8006172:	0c9b      	lsrs	r3, r3, #18
 8006174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	4a38      	ldr	r2, [pc, #224]	; (800627c <HAL_I2C_Init+0x2a8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d802      	bhi.n	80061a4 <HAL_I2C_Init+0x1d0>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	3301      	adds	r3, #1
 80061a2:	e009      	b.n	80061b8 <HAL_I2C_Init+0x1e4>
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
 80061ae:	4a37      	ldr	r2, [pc, #220]	; (800628c <HAL_I2C_Init+0x2b8>)
 80061b0:	fba2 2303 	umull	r2, r3, r2, r3
 80061b4:	099b      	lsrs	r3, r3, #6
 80061b6:	3301      	adds	r3, #1
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	430b      	orrs	r3, r1
 80061be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80061ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	492a      	ldr	r1, [pc, #168]	; (800627c <HAL_I2C_Init+0x2a8>)
 80061d4:	428b      	cmp	r3, r1
 80061d6:	d819      	bhi.n	800620c <HAL_I2C_Init+0x238>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	1e59      	subs	r1, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80061e6:	1c59      	adds	r1, r3, #1
 80061e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061ec:	400b      	ands	r3, r1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <HAL_I2C_Init+0x234>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1e59      	subs	r1, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006200:	3301      	adds	r3, #1
 8006202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006206:	e066      	b.n	80062d6 <HAL_I2C_Init+0x302>
 8006208:	2304      	movs	r3, #4
 800620a:	e064      	b.n	80062d6 <HAL_I2C_Init+0x302>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d111      	bne.n	8006238 <HAL_I2C_Init+0x264>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	1e58      	subs	r0, r3, #1
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6859      	ldr	r1, [r3, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	440b      	add	r3, r1
 8006222:	fbb0 f3f3 	udiv	r3, r0, r3
 8006226:	3301      	adds	r3, #1
 8006228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800622c:	2b00      	cmp	r3, #0
 800622e:	bf0c      	ite	eq
 8006230:	2301      	moveq	r3, #1
 8006232:	2300      	movne	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	e012      	b.n	800625e <HAL_I2C_Init+0x28a>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	1e58      	subs	r0, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6859      	ldr	r1, [r3, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	0099      	lsls	r1, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	fbb0 f3f3 	udiv	r3, r0, r3
 800624e:	3301      	adds	r3, #1
 8006250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006254:	2b00      	cmp	r3, #0
 8006256:	bf0c      	ite	eq
 8006258:	2301      	moveq	r3, #1
 800625a:	2300      	movne	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d016      	beq.n	8006290 <HAL_I2C_Init+0x2bc>
 8006262:	2301      	movs	r3, #1
 8006264:	e037      	b.n	80062d6 <HAL_I2C_Init+0x302>
 8006266:	bf00      	nop
 8006268:	40005400 	.word	0x40005400
 800626c:	40005800 	.word	0x40005800
 8006270:	40005c00 	.word	0x40005c00
 8006274:	0800bdb8 	.word	0x0800bdb8
 8006278:	00061a80 	.word	0x00061a80
 800627c:	000186a0 	.word	0x000186a0
 8006280:	001e847f 	.word	0x001e847f
 8006284:	003d08ff 	.word	0x003d08ff
 8006288:	431bde83 	.word	0x431bde83
 800628c:	10624dd3 	.word	0x10624dd3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10e      	bne.n	80062b6 <HAL_I2C_Init+0x2e2>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	1e58      	subs	r0, r3, #1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6859      	ldr	r1, [r3, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	440b      	add	r3, r1
 80062a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062aa:	3301      	adds	r3, #1
 80062ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b4:	e00f      	b.n	80062d6 <HAL_I2C_Init+0x302>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1e58      	subs	r0, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6859      	ldr	r1, [r3, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	0099      	lsls	r1, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80062cc:	3301      	adds	r3, #1
 80062ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	6809      	ldr	r1, [r1, #0]
 80062da:	4313      	orrs	r3, r2
 80062dc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006304:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6911      	ldr	r1, [r2, #16]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	68d2      	ldr	r2, [r2, #12]
 8006310:	4311      	orrs	r1, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	430b      	orrs	r3, r1
 8006318:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	695a      	ldr	r2, [r3, #20]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0201 	orr.w	r2, r2, #1
 8006344:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	4608      	mov	r0, r1
 8006376:	4611      	mov	r1, r2
 8006378:	461a      	mov	r2, r3
 800637a:	4603      	mov	r3, r0
 800637c:	817b      	strh	r3, [r7, #10]
 800637e:	460b      	mov	r3, r1
 8006380:	813b      	strh	r3, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006386:	f7fd fc47 	bl	8003c18 <HAL_GetTick>
 800638a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d007      	beq.n	80063a2 <HAL_I2C_Mem_Write+0x36>
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	2b10      	cmp	r3, #16
 8006396:	d004      	beq.n	80063a2 <HAL_I2C_Mem_Write+0x36>
 8006398:	f640 1175 	movw	r1, #2421	; 0x975
 800639c:	4873      	ldr	r0, [pc, #460]	; (800656c <HAL_I2C_Mem_Write+0x200>)
 800639e:	f7fc fae2 	bl	8002966 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	f040 80d9 	bne.w	8006562 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	2319      	movs	r3, #25
 80063b6:	2201      	movs	r2, #1
 80063b8:	496d      	ldr	r1, [pc, #436]	; (8006570 <HAL_I2C_Mem_Write+0x204>)
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fc8c 	bl	8006cd8 <I2C_WaitOnFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 80063c6:	2302      	movs	r3, #2
 80063c8:	e0cc      	b.n	8006564 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_I2C_Mem_Write+0x6c>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e0c5      	b.n	8006564 <HAL_I2C_Mem_Write+0x1f8>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d007      	beq.n	80063fe <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f042 0201 	orr.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800640c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2221      	movs	r2, #33	; 0x21
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2240      	movs	r2, #64	; 0x40
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a3a      	ldr	r2, [r7, #32]
 8006428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800642e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4a4d      	ldr	r2, [pc, #308]	; (8006574 <HAL_I2C_Mem_Write+0x208>)
 800643e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006440:	88f8      	ldrh	r0, [r7, #6]
 8006442:	893a      	ldrh	r2, [r7, #8]
 8006444:	8979      	ldrh	r1, [r7, #10]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	4603      	mov	r3, r0
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fac3 	bl	80069dc <I2C_RequestMemoryWrite>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d052      	beq.n	8006502 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e081      	b.n	8006564 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fd0d 	bl	8006e84 <I2C_WaitOnTXEFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00d      	beq.n	800648c <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	2b04      	cmp	r3, #4
 8006476:	d107      	bne.n	8006488 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006486:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e06b      	b.n	8006564 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d11b      	bne.n	8006502 <HAL_I2C_Mem_Write+0x196>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d017      	beq.n	8006502 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	781a      	ldrb	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1aa      	bne.n	8006460 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 fcf9 	bl	8006f06 <I2C_WaitOnBTFFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	2b04      	cmp	r3, #4
 8006520:	d107      	bne.n	8006532 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006530:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e016      	b.n	8006564 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006544:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	0800bdb8 	.word	0x0800bdb8
 8006570:	00100002 	.word	0x00100002
 8006574:	ffff0000 	.word	0xffff0000

08006578 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08c      	sub	sp, #48	; 0x30
 800657c:	af02      	add	r7, sp, #8
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	4608      	mov	r0, r1
 8006582:	4611      	mov	r1, r2
 8006584:	461a      	mov	r2, r3
 8006586:	4603      	mov	r3, r0
 8006588:	817b      	strh	r3, [r7, #10]
 800658a:	460b      	mov	r3, r1
 800658c:	813b      	strh	r3, [r7, #8]
 800658e:	4613      	mov	r3, r2
 8006590:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006592:	f7fd fb41 	bl	8003c18 <HAL_GetTick>
 8006596:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006598:	88fb      	ldrh	r3, [r7, #6]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d007      	beq.n	80065ae <HAL_I2C_Mem_Read+0x36>
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	2b10      	cmp	r3, #16
 80065a2:	d004      	beq.n	80065ae <HAL_I2C_Mem_Read+0x36>
 80065a4:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 80065a8:	4881      	ldr	r0, [pc, #516]	; (80067b0 <HAL_I2C_Mem_Read+0x238>)
 80065aa:	f7fc f9dc 	bl	8002966 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	f040 8209 	bne.w	80069ce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	2319      	movs	r3, #25
 80065c2:	2201      	movs	r2, #1
 80065c4:	497b      	ldr	r1, [pc, #492]	; (80067b4 <HAL_I2C_Mem_Read+0x23c>)
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 fb86 	bl	8006cd8 <I2C_WaitOnFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 80065d2:	2302      	movs	r3, #2
 80065d4:	e1fc      	b.n	80069d0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_I2C_Mem_Read+0x6c>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e1f5      	b.n	80069d0 <HAL_I2C_Mem_Read+0x458>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d007      	beq.n	800660a <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006618:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2222      	movs	r2, #34	; 0x22
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2240      	movs	r2, #64	; 0x40
 8006626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800663a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4a5b      	ldr	r2, [pc, #364]	; (80067b8 <HAL_I2C_Mem_Read+0x240>)
 800664a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800664c:	88f8      	ldrh	r0, [r7, #6]
 800664e:	893a      	ldrh	r2, [r7, #8]
 8006650:	8979      	ldrh	r1, [r7, #10]
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	4603      	mov	r3, r0
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fa53 	bl	8006b08 <I2C_RequestMemoryRead>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e1b1      	b.n	80069d0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006670:	2b00      	cmp	r3, #0
 8006672:	d113      	bne.n	800669c <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006674:	2300      	movs	r3, #0
 8006676:	623b      	str	r3, [r7, #32]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	623b      	str	r3, [r7, #32]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	623b      	str	r3, [r7, #32]
 8006688:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	e185      	b.n	80069a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d11b      	bne.n	80066dc <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b4:	2300      	movs	r3, #0
 80066b6:	61fb      	str	r3, [r7, #28]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	e165      	b.n	80069a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d11b      	bne.n	800671c <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f2:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006702:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006704:	2300      	movs	r3, #0
 8006706:	61bb      	str	r3, [r7, #24]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	61bb      	str	r3, [r7, #24]
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	e145      	b.n	80069a8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800671c:	2300      	movs	r3, #0
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006732:	e139      	b.n	80069a8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006738:	2b03      	cmp	r3, #3
 800673a:	f200 80f2 	bhi.w	8006922 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006742:	2b01      	cmp	r3, #1
 8006744:	d123      	bne.n	800678e <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fc1c 	bl	8006f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e13a      	b.n	80069d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800678c:	e10c      	b.n	80069a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006792:	2b02      	cmp	r3, #2
 8006794:	d14f      	bne.n	8006836 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	2200      	movs	r2, #0
 800679e:	4907      	ldr	r1, [pc, #28]	; (80067bc <HAL_I2C_Mem_Read+0x244>)
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fa99 	bl	8006cd8 <I2C_WaitOnFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e10f      	b.n	80069d0 <HAL_I2C_Mem_Read+0x458>
 80067b0:	0800bdb8 	.word	0x0800bdb8
 80067b4:	00100002 	.word	0x00100002
 80067b8:	ffff0000 	.word	0xffff0000
 80067bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681e:	3b01      	subs	r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006834:	e0b8      	b.n	80069a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	2200      	movs	r2, #0
 800683e:	4966      	ldr	r1, [pc, #408]	; (80069d8 <HAL_I2C_Mem_Read+0x460>)
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fa49 	bl	8006cd8 <I2C_WaitOnFlagUntilTimeout>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0bf      	b.n	80069d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	2200      	movs	r2, #0
 800689a:	494f      	ldr	r1, [pc, #316]	; (80069d8 <HAL_I2C_Mem_Read+0x460>)
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 fa1b 	bl	8006cd8 <I2C_WaitOnFlagUntilTimeout>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e091      	b.n	80069d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	691a      	ldr	r2, [r3, #16]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690a:	3b01      	subs	r3, #1
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006916:	b29b      	uxth	r3, r3
 8006918:	3b01      	subs	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006920:	e042      	b.n	80069a8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006924:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 fb2e 	bl	8006f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e04c      	b.n	80069d0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	2b04      	cmp	r3, #4
 8006974:	d118      	bne.n	80069a8 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	b2d2      	uxtb	r2, r2
 8006982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f47f aec1 	bne.w	8006734 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e000      	b.n	80069d0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80069ce:	2302      	movs	r3, #2
  }
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3728      	adds	r7, #40	; 0x28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	00010004 	.word	0x00010004

080069dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af02      	add	r7, sp, #8
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	4608      	mov	r0, r1
 80069e6:	4611      	mov	r1, r2
 80069e8:	461a      	mov	r2, r3
 80069ea:	4603      	mov	r3, r0
 80069ec:	817b      	strh	r3, [r7, #10]
 80069ee:	460b      	mov	r3, r1
 80069f0:	813b      	strh	r3, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f960 	bl	8006cd8 <I2C_WaitOnFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00d      	beq.n	8006a3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2c:	d103      	bne.n	8006a36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e05f      	b.n	8006afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a3a:	897b      	ldrh	r3, [r7, #10]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	6a3a      	ldr	r2, [r7, #32]
 8006a4e:	492d      	ldr	r1, [pc, #180]	; (8006b04 <I2C_RequestMemoryWrite+0x128>)
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f998 	bl	8006d86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e04c      	b.n	8006afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a60:	2300      	movs	r3, #0
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a78:	6a39      	ldr	r1, [r7, #32]
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 fa02 	bl	8006e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00d      	beq.n	8006aa2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d107      	bne.n	8006a9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e02b      	b.n	8006afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d105      	bne.n	8006ab4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa8:	893b      	ldrh	r3, [r7, #8]
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	611a      	str	r2, [r3, #16]
 8006ab2:	e021      	b.n	8006af8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ab4:	893b      	ldrh	r3, [r7, #8]
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac4:	6a39      	ldr	r1, [r7, #32]
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 f9dc 	bl	8006e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00d      	beq.n	8006aee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d107      	bne.n	8006aea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e005      	b.n	8006afa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006aee:	893b      	ldrh	r3, [r7, #8]
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	00010002 	.word	0x00010002

08006b08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	4608      	mov	r0, r1
 8006b12:	4611      	mov	r1, r2
 8006b14:	461a      	mov	r2, r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	817b      	strh	r3, [r7, #10]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	813b      	strh	r3, [r7, #8]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f8c2 	bl	8006cd8 <I2C_WaitOnFlagUntilTimeout>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00d      	beq.n	8006b76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b68:	d103      	bne.n	8006b72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e0aa      	b.n	8006ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b76:	897b      	ldrh	r3, [r7, #10]
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	6a3a      	ldr	r2, [r7, #32]
 8006b8a:	4952      	ldr	r1, [pc, #328]	; (8006cd4 <I2C_RequestMemoryRead+0x1cc>)
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 f8fa 	bl	8006d86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e097      	b.n	8006ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb4:	6a39      	ldr	r1, [r7, #32]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f964 	bl	8006e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00d      	beq.n	8006bde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d107      	bne.n	8006bda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e076      	b.n	8006ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bde:	88fb      	ldrh	r3, [r7, #6]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d105      	bne.n	8006bf0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006be4:	893b      	ldrh	r3, [r7, #8]
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	611a      	str	r2, [r3, #16]
 8006bee:	e021      	b.n	8006c34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006bf0:	893b      	ldrh	r3, [r7, #8]
 8006bf2:	0a1b      	lsrs	r3, r3, #8
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c00:	6a39      	ldr	r1, [r7, #32]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f93e 	bl	8006e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00d      	beq.n	8006c2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d107      	bne.n	8006c26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e050      	b.n	8006ccc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c2a:	893b      	ldrh	r3, [r7, #8]
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c36:	6a39      	ldr	r1, [r7, #32]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f923 	bl	8006e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00d      	beq.n	8006c60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d107      	bne.n	8006c5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e035      	b.n	8006ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f82b 	bl	8006cd8 <I2C_WaitOnFlagUntilTimeout>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00d      	beq.n	8006ca4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c96:	d103      	bne.n	8006ca0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e013      	b.n	8006ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ca4:	897b      	ldrh	r3, [r7, #10]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	6a3a      	ldr	r2, [r7, #32]
 8006cb8:	4906      	ldr	r1, [pc, #24]	; (8006cd4 <I2C_RequestMemoryRead+0x1cc>)
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 f863 	bl	8006d86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e000      	b.n	8006ccc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	00010002 	.word	0x00010002

08006cd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ce8:	e025      	b.n	8006d36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cf0:	d021      	beq.n	8006d36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf2:	f7fc ff91 	bl	8003c18 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d302      	bcc.n	8006d08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d116      	bne.n	8006d36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	f043 0220 	orr.w	r2, r3, #32
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e023      	b.n	8006d7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	0c1b      	lsrs	r3, r3, #16
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d10d      	bne.n	8006d5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	43da      	mvns	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bf0c      	ite	eq
 8006d52:	2301      	moveq	r3, #1
 8006d54:	2300      	movne	r3, #0
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	e00c      	b.n	8006d76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	43da      	mvns	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4013      	ands	r3, r2
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bf0c      	ite	eq
 8006d6e:	2301      	moveq	r3, #1
 8006d70:	2300      	movne	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d0b6      	beq.n	8006cea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	607a      	str	r2, [r7, #4]
 8006d92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d94:	e051      	b.n	8006e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da4:	d123      	bne.n	8006dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006db4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	f043 0204 	orr.w	r2, r3, #4
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e046      	b.n	8006e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df4:	d021      	beq.n	8006e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df6:	f7fc ff0f 	bl	8003c18 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d302      	bcc.n	8006e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d116      	bne.n	8006e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	f043 0220 	orr.w	r2, r3, #32
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e020      	b.n	8006e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d10c      	bne.n	8006e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	43da      	mvns	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	bf14      	ite	ne
 8006e56:	2301      	movne	r3, #1
 8006e58:	2300      	moveq	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	e00b      	b.n	8006e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	43da      	mvns	r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	bf14      	ite	ne
 8006e70:	2301      	movne	r3, #1
 8006e72:	2300      	moveq	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d18d      	bne.n	8006d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e90:	e02d      	b.n	8006eee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 f8ce 	bl	8007034 <I2C_IsAcknowledgeFailed>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e02d      	b.n	8006efe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea8:	d021      	beq.n	8006eee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eaa:	f7fc feb5 	bl	8003c18 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d302      	bcc.n	8006ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d116      	bne.n	8006eee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	f043 0220 	orr.w	r2, r3, #32
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e007      	b.n	8006efe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef8:	2b80      	cmp	r3, #128	; 0x80
 8006efa:	d1ca      	bne.n	8006e92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f12:	e02d      	b.n	8006f70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f88d 	bl	8007034 <I2C_IsAcknowledgeFailed>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e02d      	b.n	8006f80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f2a:	d021      	beq.n	8006f70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f2c:	f7fc fe74 	bl	8003c18 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d302      	bcc.n	8006f42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d116      	bne.n	8006f70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e007      	b.n	8006f80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d1ca      	bne.n	8006f14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f94:	e042      	b.n	800701c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	2b10      	cmp	r3, #16
 8006fa2:	d119      	bne.n	8006fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0210 	mvn.w	r2, #16
 8006fac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e029      	b.n	800702c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd8:	f7fc fe1e 	bl	8003c18 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d302      	bcc.n	8006fee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d116      	bne.n	800701c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	f043 0220 	orr.w	r2, r3, #32
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e007      	b.n	800702c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	d1b5      	bne.n	8006f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704a:	d11b      	bne.n	8007084 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007054:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2220      	movs	r2, #32
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	f043 0204 	orr.w	r2, r3, #4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
	...

08007094 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a28      	ldr	r2, [pc, #160]	; (8007144 <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00d      	beq.n	80070c4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a26      	ldr	r2, [pc, #152]	; (8007148 <HAL_I2CEx_ConfigAnalogFilter+0xb4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d008      	beq.n	80070c4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a25      	ldr	r2, [pc, #148]	; (800714c <HAL_I2CEx_ConfigAnalogFilter+0xb8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80070bc:	215c      	movs	r1, #92	; 0x5c
 80070be:	4824      	ldr	r0, [pc, #144]	; (8007150 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 80070c0:	f7fb fc51 	bl	8002966 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d006      	beq.n	80070d8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b10      	cmp	r3, #16
 80070ce:	d003      	beq.n	80070d8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80070d0:	215d      	movs	r1, #93	; 0x5d
 80070d2:	481f      	ldr	r0, [pc, #124]	; (8007150 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 80070d4:	f7fb fc47 	bl	8002966 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d129      	bne.n	8007138 <HAL_I2CEx_ConfigAnalogFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2224      	movs	r2, #36	; 0x24
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0210 	bic.w	r2, r2, #16
 800710a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	e000      	b.n	800713a <HAL_I2CEx_ConfigAnalogFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007138:	2302      	movs	r3, #2
  }
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	40005400 	.word	0x40005400
 8007148:	40005800 	.word	0x40005800
 800714c:	40005c00 	.word	0x40005c00
 8007150:	0800bdf0 	.word	0x0800bdf0

08007154 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a27      	ldr	r2, [pc, #156]	; (8007204 <HAL_I2CEx_ConfigDigitalFilter+0xb0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d00d      	beq.n	8007188 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a25      	ldr	r2, [pc, #148]	; (8007208 <HAL_I2CEx_ConfigDigitalFilter+0xb4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d008      	beq.n	8007188 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a24      	ldr	r2, [pc, #144]	; (800720c <HAL_I2CEx_ConfigDigitalFilter+0xb8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007180:	2184      	movs	r1, #132	; 0x84
 8007182:	4823      	ldr	r0, [pc, #140]	; (8007210 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 8007184:	f7fb fbef 	bl	8002966 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b0f      	cmp	r3, #15
 800718c:	d903      	bls.n	8007196 <HAL_I2CEx_ConfigDigitalFilter+0x42>
 800718e:	2185      	movs	r1, #133	; 0x85
 8007190:	481f      	ldr	r0, [pc, #124]	; (8007210 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 8007192:	f7fb fbe8 	bl	8002966 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d12a      	bne.n	80071f8 <HAL_I2CEx_ConfigDigitalFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2224      	movs	r2, #36	; 0x24
 80071a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0201 	bic.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80071c2:	89fb      	ldrh	r3, [r7, #14]
 80071c4:	f023 030f 	bic.w	r3, r3, #15
 80071c8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	89fb      	ldrh	r3, [r7, #14]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	89fa      	ldrh	r2, [r7, #14]
 80071da:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	e000      	b.n	80071fa <HAL_I2CEx_ConfigDigitalFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80071f8:	2302      	movs	r3, #2
  }
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	40005400 	.word	0x40005400
 8007208:	40005800 	.word	0x40005800
 800720c:	40005c00 	.word	0x40005c00
 8007210:	0800bdf0 	.word	0x0800bdf0

08007214 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800721e:	2300      	movs	r3, #0
 8007220:	603b      	str	r3, [r7, #0]
 8007222:	4b20      	ldr	r3, [pc, #128]	; (80072a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800722c:	6413      	str	r3, [r2, #64]	; 0x40
 800722e:	4b1d      	ldr	r3, [pc, #116]	; (80072a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800723a:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007240:	f7fc fcea 	bl	8003c18 <HAL_GetTick>
 8007244:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007246:	e009      	b.n	800725c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007248:	f7fc fce6 	bl	8003c18 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007256:	d901      	bls.n	800725c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e01f      	b.n	800729c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800725c:	4b13      	ldr	r3, [pc, #76]	; (80072ac <HAL_PWREx_EnableOverDrive+0x98>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007268:	d1ee      	bne.n	8007248 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800726a:	4b11      	ldr	r3, [pc, #68]	; (80072b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800726c:	2201      	movs	r2, #1
 800726e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007270:	f7fc fcd2 	bl	8003c18 <HAL_GetTick>
 8007274:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007276:	e009      	b.n	800728c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007278:	f7fc fcce 	bl	8003c18 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007286:	d901      	bls.n	800728c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e007      	b.n	800729c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800728c:	4b07      	ldr	r3, [pc, #28]	; (80072ac <HAL_PWREx_EnableOverDrive+0x98>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007298:	d1ee      	bne.n	8007278 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	40023800 	.word	0x40023800
 80072a8:	420e0040 	.word	0x420e0040
 80072ac:	40007000 	.word	0x40007000
 80072b0:	420e0044 	.word	0x420e0044

080072b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e30d      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b0f      	cmp	r3, #15
 80072cc:	d903      	bls.n	80072d6 <HAL_RCC_OscConfig+0x22>
 80072ce:	21e8      	movs	r1, #232	; 0xe8
 80072d0:	48a3      	ldr	r0, [pc, #652]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80072d2:	f7fb fb48 	bl	8002966 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8088 	beq.w	80073f4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00d      	beq.n	8007308 <HAL_RCC_OscConfig+0x54>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f4:	d008      	beq.n	8007308 <HAL_RCC_OscConfig+0x54>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072fe:	d003      	beq.n	8007308 <HAL_RCC_OscConfig+0x54>
 8007300:	21ed      	movs	r1, #237	; 0xed
 8007302:	4897      	ldr	r0, [pc, #604]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007304:	f7fb fb2f 	bl	8002966 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007308:	4b96      	ldr	r3, [pc, #600]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f003 030c 	and.w	r3, r3, #12
 8007310:	2b04      	cmp	r3, #4
 8007312:	d00c      	beq.n	800732e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007314:	4b93      	ldr	r3, [pc, #588]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800731c:	2b08      	cmp	r3, #8
 800731e:	d112      	bne.n	8007346 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007320:	4b90      	ldr	r3, [pc, #576]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800732c:	d10b      	bne.n	8007346 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800732e:	4b8d      	ldr	r3, [pc, #564]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d05b      	beq.n	80073f2 <HAL_RCC_OscConfig+0x13e>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d157      	bne.n	80073f2 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e2cd      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800734e:	d106      	bne.n	800735e <HAL_RCC_OscConfig+0xaa>
 8007350:	4b84      	ldr	r3, [pc, #528]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a83      	ldr	r2, [pc, #524]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	e01d      	b.n	800739a <HAL_RCC_OscConfig+0xe6>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007366:	d10c      	bne.n	8007382 <HAL_RCC_OscConfig+0xce>
 8007368:	4b7e      	ldr	r3, [pc, #504]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a7d      	ldr	r2, [pc, #500]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 800736e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	4b7b      	ldr	r3, [pc, #492]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a7a      	ldr	r2, [pc, #488]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 800737a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	e00b      	b.n	800739a <HAL_RCC_OscConfig+0xe6>
 8007382:	4b78      	ldr	r3, [pc, #480]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a77      	ldr	r2, [pc, #476]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	4b75      	ldr	r3, [pc, #468]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a74      	ldr	r2, [pc, #464]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007398:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d013      	beq.n	80073ca <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a2:	f7fc fc39 	bl	8003c18 <HAL_GetTick>
 80073a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a8:	e008      	b.n	80073bc <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073aa:	f7fc fc35 	bl	8003c18 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b64      	cmp	r3, #100	; 0x64
 80073b6:	d901      	bls.n	80073bc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e292      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073bc:	4b69      	ldr	r3, [pc, #420]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0f0      	beq.n	80073aa <HAL_RCC_OscConfig+0xf6>
 80073c8:	e014      	b.n	80073f4 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ca:	f7fc fc25 	bl	8003c18 <HAL_GetTick>
 80073ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073d0:	e008      	b.n	80073e4 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073d2:	f7fc fc21 	bl	8003c18 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b64      	cmp	r3, #100	; 0x64
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e27e      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073e4:	4b5f      	ldr	r3, [pc, #380]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1f0      	bne.n	80073d2 <HAL_RCC_OscConfig+0x11e>
 80073f0:	e000      	b.n	80073f4 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d079      	beq.n	80074f4 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d008      	beq.n	800741a <HAL_RCC_OscConfig+0x166>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d004      	beq.n	800741a <HAL_RCC_OscConfig+0x166>
 8007410:	f240 111f 	movw	r1, #287	; 0x11f
 8007414:	4852      	ldr	r0, [pc, #328]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007416:	f7fb faa6 	bl	8002966 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b1f      	cmp	r3, #31
 8007420:	d904      	bls.n	800742c <HAL_RCC_OscConfig+0x178>
 8007422:	f44f 7190 	mov.w	r1, #288	; 0x120
 8007426:	484e      	ldr	r0, [pc, #312]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007428:	f7fb fa9d 	bl	8002966 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800742c:	4b4d      	ldr	r3, [pc, #308]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 030c 	and.w	r3, r3, #12
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007438:	4b4a      	ldr	r3, [pc, #296]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007440:	2b08      	cmp	r3, #8
 8007442:	d11c      	bne.n	800747e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007444:	4b47      	ldr	r3, [pc, #284]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d116      	bne.n	800747e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007450:	4b44      	ldr	r3, [pc, #272]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <HAL_RCC_OscConfig+0x1b4>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d001      	beq.n	8007468 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e23c      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007468:	4b3e      	ldr	r3, [pc, #248]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	493b      	ldr	r1, [pc, #236]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007478:	4313      	orrs	r3, r2
 800747a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800747c:	e03a      	b.n	80074f4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d020      	beq.n	80074c8 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007486:	4b38      	ldr	r3, [pc, #224]	; (8007568 <HAL_RCC_OscConfig+0x2b4>)
 8007488:	2201      	movs	r2, #1
 800748a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748c:	f7fc fbc4 	bl	8003c18 <HAL_GetTick>
 8007490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007492:	e008      	b.n	80074a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007494:	f7fc fbc0 	bl	8003c18 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e21d      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a6:	4b2f      	ldr	r3, [pc, #188]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f0      	beq.n	8007494 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074b2:	4b2c      	ldr	r3, [pc, #176]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	4928      	ldr	r1, [pc, #160]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	600b      	str	r3, [r1, #0]
 80074c6:	e015      	b.n	80074f4 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074c8:	4b27      	ldr	r3, [pc, #156]	; (8007568 <HAL_RCC_OscConfig+0x2b4>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ce:	f7fc fba3 	bl	8003c18 <HAL_GetTick>
 80074d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074d4:	e008      	b.n	80074e8 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074d6:	f7fc fb9f 	bl	8003c18 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d901      	bls.n	80074e8 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e1fc      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074e8:	4b1e      	ldr	r3, [pc, #120]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1f0      	bne.n	80074d6 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d046      	beq.n	800758e <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d008      	beq.n	800751a <HAL_RCC_OscConfig+0x266>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d004      	beq.n	800751a <HAL_RCC_OscConfig+0x266>
 8007510:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8007514:	4812      	ldr	r0, [pc, #72]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007516:	f7fb fa26 	bl	8002966 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d016      	beq.n	8007550 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007522:	4b12      	ldr	r3, [pc, #72]	; (800756c <HAL_RCC_OscConfig+0x2b8>)
 8007524:	2201      	movs	r2, #1
 8007526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007528:	f7fc fb76 	bl	8003c18 <HAL_GetTick>
 800752c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800752e:	e008      	b.n	8007542 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007530:	f7fc fb72 	bl	8003c18 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e1cf      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007542:	4b08      	ldr	r3, [pc, #32]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0f0      	beq.n	8007530 <HAL_RCC_OscConfig+0x27c>
 800754e:	e01e      	b.n	800758e <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007550:	4b06      	ldr	r3, [pc, #24]	; (800756c <HAL_RCC_OscConfig+0x2b8>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007556:	f7fc fb5f 	bl	8003c18 <HAL_GetTick>
 800755a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800755c:	e011      	b.n	8007582 <HAL_RCC_OscConfig+0x2ce>
 800755e:	bf00      	nop
 8007560:	0800be2c 	.word	0x0800be2c
 8007564:	40023800 	.word	0x40023800
 8007568:	42470000 	.word	0x42470000
 800756c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007570:	f7fc fb52 	bl	8003c18 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e1af      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007582:	4b97      	ldr	r3, [pc, #604]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 8007584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f0      	bne.n	8007570 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 80a8 	beq.w	80076ec <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 800759c:	2300      	movs	r3, #0
 800759e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00c      	beq.n	80075c2 <HAL_RCC_OscConfig+0x30e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d008      	beq.n	80075c2 <HAL_RCC_OscConfig+0x30e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	2b05      	cmp	r3, #5
 80075b6:	d004      	beq.n	80075c2 <HAL_RCC_OscConfig+0x30e>
 80075b8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80075bc:	4889      	ldr	r0, [pc, #548]	; (80077e4 <HAL_RCC_OscConfig+0x530>)
 80075be:	f7fb f9d2 	bl	8002966 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075c2:	4b87      	ldr	r3, [pc, #540]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10f      	bne.n	80075ee <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075ce:	2300      	movs	r3, #0
 80075d0:	60bb      	str	r3, [r7, #8]
 80075d2:	4b83      	ldr	r3, [pc, #524]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	4a82      	ldr	r2, [pc, #520]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 80075d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075dc:	6413      	str	r3, [r2, #64]	; 0x40
 80075de:	4b80      	ldr	r3, [pc, #512]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e6:	60bb      	str	r3, [r7, #8]
 80075e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075ea:	2301      	movs	r3, #1
 80075ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ee:	4b7e      	ldr	r3, [pc, #504]	; (80077e8 <HAL_RCC_OscConfig+0x534>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d118      	bne.n	800762c <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075fa:	4b7b      	ldr	r3, [pc, #492]	; (80077e8 <HAL_RCC_OscConfig+0x534>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a7a      	ldr	r2, [pc, #488]	; (80077e8 <HAL_RCC_OscConfig+0x534>)
 8007600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007606:	f7fc fb07 	bl	8003c18 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800760e:	f7fc fb03 	bl	8003c18 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e160      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007620:	4b71      	ldr	r3, [pc, #452]	; (80077e8 <HAL_RCC_OscConfig+0x534>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f0      	beq.n	800760e <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d106      	bne.n	8007642 <HAL_RCC_OscConfig+0x38e>
 8007634:	4b6a      	ldr	r3, [pc, #424]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 8007636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007638:	4a69      	ldr	r2, [pc, #420]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 800763a:	f043 0301 	orr.w	r3, r3, #1
 800763e:	6713      	str	r3, [r2, #112]	; 0x70
 8007640:	e01c      	b.n	800767c <HAL_RCC_OscConfig+0x3c8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	2b05      	cmp	r3, #5
 8007648:	d10c      	bne.n	8007664 <HAL_RCC_OscConfig+0x3b0>
 800764a:	4b65      	ldr	r3, [pc, #404]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 800764c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764e:	4a64      	ldr	r2, [pc, #400]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 8007650:	f043 0304 	orr.w	r3, r3, #4
 8007654:	6713      	str	r3, [r2, #112]	; 0x70
 8007656:	4b62      	ldr	r3, [pc, #392]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 8007658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765a:	4a61      	ldr	r2, [pc, #388]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 800765c:	f043 0301 	orr.w	r3, r3, #1
 8007660:	6713      	str	r3, [r2, #112]	; 0x70
 8007662:	e00b      	b.n	800767c <HAL_RCC_OscConfig+0x3c8>
 8007664:	4b5e      	ldr	r3, [pc, #376]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 8007666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007668:	4a5d      	ldr	r2, [pc, #372]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 800766a:	f023 0301 	bic.w	r3, r3, #1
 800766e:	6713      	str	r3, [r2, #112]	; 0x70
 8007670:	4b5b      	ldr	r3, [pc, #364]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 8007672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007674:	4a5a      	ldr	r2, [pc, #360]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 8007676:	f023 0304 	bic.w	r3, r3, #4
 800767a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d015      	beq.n	80076b0 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007684:	f7fc fac8 	bl	8003c18 <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800768a:	e00a      	b.n	80076a2 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800768c:	f7fc fac4 	bl	8003c18 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	f241 3288 	movw	r2, #5000	; 0x1388
 800769a:	4293      	cmp	r3, r2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e11f      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a2:	4b4f      	ldr	r3, [pc, #316]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 80076a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0ee      	beq.n	800768c <HAL_RCC_OscConfig+0x3d8>
 80076ae:	e014      	b.n	80076da <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076b0:	f7fc fab2 	bl	8003c18 <HAL_GetTick>
 80076b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076b6:	e00a      	b.n	80076ce <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076b8:	f7fc faae 	bl	8003c18 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e109      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ce:	4b44      	ldr	r3, [pc, #272]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 80076d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1ee      	bne.n	80076b8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d105      	bne.n	80076ec <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076e0:	4b3f      	ldr	r3, [pc, #252]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	4a3e      	ldr	r2, [pc, #248]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 80076e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00c      	beq.n	800770e <HAL_RCC_OscConfig+0x45a>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d008      	beq.n	800770e <HAL_RCC_OscConfig+0x45a>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d004      	beq.n	800770e <HAL_RCC_OscConfig+0x45a>
 8007704:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007708:	4836      	ldr	r0, [pc, #216]	; (80077e4 <HAL_RCC_OscConfig+0x530>)
 800770a:	f7fb f92c 	bl	8002966 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 80e4 	beq.w	80078e0 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007718:	4b31      	ldr	r3, [pc, #196]	; (80077e0 <HAL_RCC_OscConfig+0x52c>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f003 030c 	and.w	r3, r3, #12
 8007720:	2b08      	cmp	r3, #8
 8007722:	f000 80ae 	beq.w	8007882 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	2b02      	cmp	r3, #2
 800772c:	f040 8092 	bne.w	8007854 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d009      	beq.n	800774c <HAL_RCC_OscConfig+0x498>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007740:	d004      	beq.n	800774c <HAL_RCC_OscConfig+0x498>
 8007742:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8007746:	4827      	ldr	r0, [pc, #156]	; (80077e4 <HAL_RCC_OscConfig+0x530>)
 8007748:	f7fb f90d 	bl	8002966 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	2b3f      	cmp	r3, #63	; 0x3f
 8007752:	d904      	bls.n	800775e <HAL_RCC_OscConfig+0x4aa>
 8007754:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007758:	4822      	ldr	r0, [pc, #136]	; (80077e4 <HAL_RCC_OscConfig+0x530>)
 800775a:	f7fb f904 	bl	8002966 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	2b31      	cmp	r3, #49	; 0x31
 8007764:	d904      	bls.n	8007770 <HAL_RCC_OscConfig+0x4bc>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800776e:	d904      	bls.n	800777a <HAL_RCC_OscConfig+0x4c6>
 8007770:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8007774:	481b      	ldr	r0, [pc, #108]	; (80077e4 <HAL_RCC_OscConfig+0x530>)
 8007776:	f7fb f8f6 	bl	8002966 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777e:	2b02      	cmp	r3, #2
 8007780:	d010      	beq.n	80077a4 <HAL_RCC_OscConfig+0x4f0>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	2b04      	cmp	r3, #4
 8007788:	d00c      	beq.n	80077a4 <HAL_RCC_OscConfig+0x4f0>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778e:	2b06      	cmp	r3, #6
 8007790:	d008      	beq.n	80077a4 <HAL_RCC_OscConfig+0x4f0>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007796:	2b08      	cmp	r3, #8
 8007798:	d004      	beq.n	80077a4 <HAL_RCC_OscConfig+0x4f0>
 800779a:	f240 11db 	movw	r1, #475	; 0x1db
 800779e:	4811      	ldr	r0, [pc, #68]	; (80077e4 <HAL_RCC_OscConfig+0x530>)
 80077a0:	f7fb f8e1 	bl	8002966 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d903      	bls.n	80077b4 <HAL_RCC_OscConfig+0x500>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	2b0f      	cmp	r3, #15
 80077b2:	d904      	bls.n	80077be <HAL_RCC_OscConfig+0x50a>
 80077b4:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80077b8:	480a      	ldr	r0, [pc, #40]	; (80077e4 <HAL_RCC_OscConfig+0x530>)
 80077ba:	f7fb f8d4 	bl	8002966 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077be:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <HAL_RCC_OscConfig+0x538>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077c4:	f7fc fa28 	bl	8003c18 <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ca:	e011      	b.n	80077f0 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077cc:	f7fc fa24 	bl	8003c18 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d90a      	bls.n	80077f0 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e081      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
 80077de:	bf00      	nop
 80077e0:	40023800 	.word	0x40023800
 80077e4:	0800be2c 	.word	0x0800be2c
 80077e8:	40007000 	.word	0x40007000
 80077ec:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077f0:	4b3e      	ldr	r3, [pc, #248]	; (80078ec <HAL_RCC_OscConfig+0x638>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e7      	bne.n	80077cc <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	019b      	lsls	r3, r3, #6
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	085b      	lsrs	r3, r3, #1
 8007814:	3b01      	subs	r3, #1
 8007816:	041b      	lsls	r3, r3, #16
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781e:	061b      	lsls	r3, r3, #24
 8007820:	4932      	ldr	r1, [pc, #200]	; (80078ec <HAL_RCC_OscConfig+0x638>)
 8007822:	4313      	orrs	r3, r2
 8007824:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007826:	4b32      	ldr	r3, [pc, #200]	; (80078f0 <HAL_RCC_OscConfig+0x63c>)
 8007828:	2201      	movs	r2, #1
 800782a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800782c:	f7fc f9f4 	bl	8003c18 <HAL_GetTick>
 8007830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007832:	e008      	b.n	8007846 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007834:	f7fc f9f0 	bl	8003c18 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d901      	bls.n	8007846 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e04d      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007846:	4b29      	ldr	r3, [pc, #164]	; (80078ec <HAL_RCC_OscConfig+0x638>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0f0      	beq.n	8007834 <HAL_RCC_OscConfig+0x580>
 8007852:	e045      	b.n	80078e0 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007854:	4b26      	ldr	r3, [pc, #152]	; (80078f0 <HAL_RCC_OscConfig+0x63c>)
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800785a:	f7fc f9dd 	bl	8003c18 <HAL_GetTick>
 800785e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007860:	e008      	b.n	8007874 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007862:	f7fc f9d9 	bl	8003c18 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e036      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007874:	4b1d      	ldr	r3, [pc, #116]	; (80078ec <HAL_RCC_OscConfig+0x638>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1f0      	bne.n	8007862 <HAL_RCC_OscConfig+0x5ae>
 8007880:	e02e      	b.n	80078e0 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e029      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800788e:	4b17      	ldr	r3, [pc, #92]	; (80078ec <HAL_RCC_OscConfig+0x638>)
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d11c      	bne.n	80078dc <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d115      	bne.n	80078dc <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80078b6:	4013      	ands	r3, r2
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80078bc:	4293      	cmp	r3, r2
 80078be:	d10d      	bne.n	80078dc <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d106      	bne.n	80078dc <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80078d8:	429a      	cmp	r2, r3
 80078da:	d001      	beq.n	80078e0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e000      	b.n	80078e2 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	40023800 	.word	0x40023800
 80078f0:	42470060 	.word	0x42470060

080078f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e18c      	b.n	8007c22 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <HAL_RCC_ClockConfig+0x24>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b0f      	cmp	r3, #15
 8007916:	d904      	bls.n	8007922 <HAL_RCC_ClockConfig+0x2e>
 8007918:	f240 2151 	movw	r1, #593	; 0x251
 800791c:	4887      	ldr	r0, [pc, #540]	; (8007b3c <HAL_RCC_ClockConfig+0x248>)
 800791e:	f7fb f822 	bl	8002966 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d031      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d02e      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b02      	cmp	r3, #2
 8007932:	d02b      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b03      	cmp	r3, #3
 8007938:	d028      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b04      	cmp	r3, #4
 800793e:	d025      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b05      	cmp	r3, #5
 8007944:	d022      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b06      	cmp	r3, #6
 800794a:	d01f      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b07      	cmp	r3, #7
 8007950:	d01c      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b08      	cmp	r3, #8
 8007956:	d019      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b09      	cmp	r3, #9
 800795c:	d016      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b0a      	cmp	r3, #10
 8007962:	d013      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b0b      	cmp	r3, #11
 8007968:	d010      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b0c      	cmp	r3, #12
 800796e:	d00d      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b0d      	cmp	r3, #13
 8007974:	d00a      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b0e      	cmp	r3, #14
 800797a:	d007      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b0f      	cmp	r3, #15
 8007980:	d004      	beq.n	800798c <HAL_RCC_ClockConfig+0x98>
 8007982:	f240 2152 	movw	r1, #594	; 0x252
 8007986:	486d      	ldr	r0, [pc, #436]	; (8007b3c <HAL_RCC_ClockConfig+0x248>)
 8007988:	f7fa ffed 	bl	8002966 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800798c:	4b6c      	ldr	r3, [pc, #432]	; (8007b40 <HAL_RCC_ClockConfig+0x24c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 030f 	and.w	r3, r3, #15
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	429a      	cmp	r2, r3
 8007998:	d90c      	bls.n	80079b4 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800799a:	4b69      	ldr	r3, [pc, #420]	; (8007b40 <HAL_RCC_ClockConfig+0x24c>)
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a2:	4b67      	ldr	r3, [pc, #412]	; (8007b40 <HAL_RCC_ClockConfig+0x24c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d001      	beq.n	80079b4 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e136      	b.n	8007c22 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d049      	beq.n	8007a54 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d005      	beq.n	80079d8 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079cc:	4b5d      	ldr	r3, [pc, #372]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	4a5c      	ldr	r2, [pc, #368]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 80079d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d005      	beq.n	80079f0 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079e4:	4b57      	ldr	r3, [pc, #348]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	4a56      	ldr	r2, [pc, #344]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 80079ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d024      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x14e>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	2b80      	cmp	r3, #128	; 0x80
 80079fe:	d020      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x14e>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b90      	cmp	r3, #144	; 0x90
 8007a06:	d01c      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x14e>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2ba0      	cmp	r3, #160	; 0xa0
 8007a0e:	d018      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x14e>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	2bb0      	cmp	r3, #176	; 0xb0
 8007a16:	d014      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x14e>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	2bc0      	cmp	r3, #192	; 0xc0
 8007a1e:	d010      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x14e>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2bd0      	cmp	r3, #208	; 0xd0
 8007a26:	d00c      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x14e>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	2be0      	cmp	r3, #224	; 0xe0
 8007a2e:	d008      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x14e>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	2bf0      	cmp	r3, #240	; 0xf0
 8007a36:	d004      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x14e>
 8007a38:	f240 2175 	movw	r1, #629	; 0x275
 8007a3c:	483f      	ldr	r0, [pc, #252]	; (8007b3c <HAL_RCC_ClockConfig+0x248>)
 8007a3e:	f7fa ff92 	bl	8002966 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a42:	4b40      	ldr	r3, [pc, #256]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	493d      	ldr	r1, [pc, #244]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d059      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d010      	beq.n	8007a8a <HAL_RCC_ClockConfig+0x196>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d00c      	beq.n	8007a8a <HAL_RCC_ClockConfig+0x196>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d008      	beq.n	8007a8a <HAL_RCC_ClockConfig+0x196>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d004      	beq.n	8007a8a <HAL_RCC_ClockConfig+0x196>
 8007a80:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8007a84:	482d      	ldr	r0, [pc, #180]	; (8007b3c <HAL_RCC_ClockConfig+0x248>)
 8007a86:	f7fa ff6e 	bl	8002966 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d107      	bne.n	8007aa2 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a92:	4b2c      	ldr	r3, [pc, #176]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d119      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e0bf      	b.n	8007c22 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d003      	beq.n	8007ab2 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d107      	bne.n	8007ac2 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d109      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e0af      	b.n	8007c22 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ac2:	4b20      	ldr	r3, [pc, #128]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e0a7      	b.n	8007c22 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ad2:	4b1c      	ldr	r3, [pc, #112]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f023 0203 	bic.w	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4919      	ldr	r1, [pc, #100]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ae4:	f7fc f898 	bl	8003c18 <HAL_GetTick>
 8007ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aea:	e00a      	b.n	8007b02 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aec:	f7fc f894 	bl	8003c18 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e08f      	b.n	8007c22 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b02:	4b10      	ldr	r3, [pc, #64]	; (8007b44 <HAL_RCC_ClockConfig+0x250>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 020c 	and.w	r2, r3, #12
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d1eb      	bne.n	8007aec <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b14:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <HAL_RCC_ClockConfig+0x24c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 030f 	and.w	r3, r3, #15
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d212      	bcs.n	8007b48 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b22:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <HAL_RCC_ClockConfig+0x24c>)
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	b2d2      	uxtb	r2, r2
 8007b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b2a:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <HAL_RCC_ClockConfig+0x24c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d007      	beq.n	8007b48 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e072      	b.n	8007c22 <HAL_RCC_ClockConfig+0x32e>
 8007b3c:	0800be2c 	.word	0x0800be2c
 8007b40:	40023c00 	.word	0x40023c00
 8007b44:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d025      	beq.n	8007ba0 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d018      	beq.n	8007b8e <HAL_RCC_ClockConfig+0x29a>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b64:	d013      	beq.n	8007b8e <HAL_RCC_ClockConfig+0x29a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b6e:	d00e      	beq.n	8007b8e <HAL_RCC_ClockConfig+0x29a>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007b78:	d009      	beq.n	8007b8e <HAL_RCC_ClockConfig+0x29a>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007b82:	d004      	beq.n	8007b8e <HAL_RCC_ClockConfig+0x29a>
 8007b84:	f240 21ba 	movw	r1, #698	; 0x2ba
 8007b88:	4828      	ldr	r0, [pc, #160]	; (8007c2c <HAL_RCC_ClockConfig+0x338>)
 8007b8a:	f7fa feec 	bl	8002966 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b8e:	4b28      	ldr	r3, [pc, #160]	; (8007c30 <HAL_RCC_ClockConfig+0x33c>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	4925      	ldr	r1, [pc, #148]	; (8007c30 <HAL_RCC_ClockConfig+0x33c>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0308 	and.w	r3, r3, #8
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d026      	beq.n	8007bfa <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d018      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x2f2>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bbc:	d013      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x2f2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007bc6:	d00e      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x2f2>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007bd0:	d009      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x2f2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007bda:	d004      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x2f2>
 8007bdc:	f240 21c1 	movw	r1, #705	; 0x2c1
 8007be0:	4812      	ldr	r0, [pc, #72]	; (8007c2c <HAL_RCC_ClockConfig+0x338>)
 8007be2:	f7fa fec0 	bl	8002966 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007be6:	4b12      	ldr	r3, [pc, #72]	; (8007c30 <HAL_RCC_ClockConfig+0x33c>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	490e      	ldr	r1, [pc, #56]	; (8007c30 <HAL_RCC_ClockConfig+0x33c>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bfa:	f000 f821 	bl	8007c40 <HAL_RCC_GetSysClockFreq>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <HAL_RCC_ClockConfig+0x33c>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	091b      	lsrs	r3, r3, #4
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	490a      	ldr	r1, [pc, #40]	; (8007c34 <HAL_RCC_ClockConfig+0x340>)
 8007c0c:	5ccb      	ldrb	r3, [r1, r3]
 8007c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c12:	4a09      	ldr	r2, [pc, #36]	; (8007c38 <HAL_RCC_ClockConfig+0x344>)
 8007c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c16:	4b09      	ldr	r3, [pc, #36]	; (8007c3c <HAL_RCC_ClockConfig+0x348>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fb ffb8 	bl	8003b90 <HAL_InitTick>

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	0800be2c 	.word	0x0800be2c
 8007c30:	40023800 	.word	0x40023800
 8007c34:	0800bf7c 	.word	0x0800bf7c
 8007c38:	200001f0 	.word	0x200001f0
 8007c3c:	200001f4 	.word	0x200001f4

08007c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	607b      	str	r3, [r7, #4]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	2300      	movs	r3, #0
 8007c52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c58:	4b67      	ldr	r3, [pc, #412]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 030c 	and.w	r3, r3, #12
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d00d      	beq.n	8007c80 <HAL_RCC_GetSysClockFreq+0x40>
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	f200 80bd 	bhi.w	8007de4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <HAL_RCC_GetSysClockFreq+0x34>
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d003      	beq.n	8007c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8007c72:	e0b7      	b.n	8007de4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c74:	4b61      	ldr	r3, [pc, #388]	; (8007dfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c76:	60bb      	str	r3, [r7, #8]
       break;
 8007c78:	e0b7      	b.n	8007dea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c7a:	4b60      	ldr	r3, [pc, #384]	; (8007dfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c7c:	60bb      	str	r3, [r7, #8]
      break;
 8007c7e:	e0b4      	b.n	8007dea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c80:	4b5d      	ldr	r3, [pc, #372]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c8a:	4b5b      	ldr	r3, [pc, #364]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d04d      	beq.n	8007d32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c96:	4b58      	ldr	r3, [pc, #352]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	099b      	lsrs	r3, r3, #6
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ca6:	f04f 0100 	mov.w	r1, #0
 8007caa:	ea02 0800 	and.w	r8, r2, r0
 8007cae:	ea03 0901 	and.w	r9, r3, r1
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	f04f 0200 	mov.w	r2, #0
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	014b      	lsls	r3, r1, #5
 8007cc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007cc4:	0142      	lsls	r2, r0, #5
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	4619      	mov	r1, r3
 8007cca:	ebb0 0008 	subs.w	r0, r0, r8
 8007cce:	eb61 0109 	sbc.w	r1, r1, r9
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	018b      	lsls	r3, r1, #6
 8007cdc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007ce0:	0182      	lsls	r2, r0, #6
 8007ce2:	1a12      	subs	r2, r2, r0
 8007ce4:	eb63 0301 	sbc.w	r3, r3, r1
 8007ce8:	f04f 0000 	mov.w	r0, #0
 8007cec:	f04f 0100 	mov.w	r1, #0
 8007cf0:	00d9      	lsls	r1, r3, #3
 8007cf2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cf6:	00d0      	lsls	r0, r2, #3
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	eb12 0208 	adds.w	r2, r2, r8
 8007d00:	eb43 0309 	adc.w	r3, r3, r9
 8007d04:	f04f 0000 	mov.w	r0, #0
 8007d08:	f04f 0100 	mov.w	r1, #0
 8007d0c:	0299      	lsls	r1, r3, #10
 8007d0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007d12:	0290      	lsls	r0, r2, #10
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	f7f8 ff68 	bl	8000bf8 <__aeabi_uldivmod>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	e04a      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d32:	4b31      	ldr	r3, [pc, #196]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	099b      	lsrs	r3, r3, #6
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f04f 0300 	mov.w	r3, #0
 8007d3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d42:	f04f 0100 	mov.w	r1, #0
 8007d46:	ea02 0400 	and.w	r4, r2, r0
 8007d4a:	ea03 0501 	and.w	r5, r3, r1
 8007d4e:	4620      	mov	r0, r4
 8007d50:	4629      	mov	r1, r5
 8007d52:	f04f 0200 	mov.w	r2, #0
 8007d56:	f04f 0300 	mov.w	r3, #0
 8007d5a:	014b      	lsls	r3, r1, #5
 8007d5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d60:	0142      	lsls	r2, r0, #5
 8007d62:	4610      	mov	r0, r2
 8007d64:	4619      	mov	r1, r3
 8007d66:	1b00      	subs	r0, r0, r4
 8007d68:	eb61 0105 	sbc.w	r1, r1, r5
 8007d6c:	f04f 0200 	mov.w	r2, #0
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	018b      	lsls	r3, r1, #6
 8007d76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d7a:	0182      	lsls	r2, r0, #6
 8007d7c:	1a12      	subs	r2, r2, r0
 8007d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8007d82:	f04f 0000 	mov.w	r0, #0
 8007d86:	f04f 0100 	mov.w	r1, #0
 8007d8a:	00d9      	lsls	r1, r3, #3
 8007d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d90:	00d0      	lsls	r0, r2, #3
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	1912      	adds	r2, r2, r4
 8007d98:	eb45 0303 	adc.w	r3, r5, r3
 8007d9c:	f04f 0000 	mov.w	r0, #0
 8007da0:	f04f 0100 	mov.w	r1, #0
 8007da4:	0299      	lsls	r1, r3, #10
 8007da6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007daa:	0290      	lsls	r0, r2, #10
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	4610      	mov	r0, r2
 8007db2:	4619      	mov	r1, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	461a      	mov	r2, r3
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	f7f8 ff1c 	bl	8000bf8 <__aeabi_uldivmod>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007dc8:	4b0b      	ldr	r3, [pc, #44]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	0c1b      	lsrs	r3, r3, #16
 8007dce:	f003 0303 	and.w	r3, r3, #3
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de0:	60bb      	str	r3, [r7, #8]
      break;
 8007de2:	e002      	b.n	8007dea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007de4:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007de6:	60bb      	str	r3, [r7, #8]
      break;
 8007de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dea:	68bb      	ldr	r3, [r7, #8]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007df6:	bf00      	nop
 8007df8:	40023800 	.word	0x40023800
 8007dfc:	00f42400 	.word	0x00f42400

08007e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e04:	4b03      	ldr	r3, [pc, #12]	; (8007e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e06:	681b      	ldr	r3, [r3, #0]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	200001f0 	.word	0x200001f0

08007e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e1c:	f7ff fff0 	bl	8007e00 <HAL_RCC_GetHCLKFreq>
 8007e20:	4602      	mov	r2, r0
 8007e22:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	0a9b      	lsrs	r3, r3, #10
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	4903      	ldr	r1, [pc, #12]	; (8007e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e2e:	5ccb      	ldrb	r3, [r1, r3]
 8007e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	0800bf8c 	.word	0x0800bf8c

08007e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e44:	f7ff ffdc 	bl	8007e00 <HAL_RCC_GetHCLKFreq>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	0b5b      	lsrs	r3, r3, #13
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	4903      	ldr	r1, [pc, #12]	; (8007e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e56:	5ccb      	ldrb	r3, [r1, r3]
 8007e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	40023800 	.word	0x40023800
 8007e64:	0800bf8c 	.word	0x0800bf8c

08007e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e118      	b.n	80080ac <HAL_SPI_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a8d      	ldr	r2, [pc, #564]	; (80080b4 <HAL_SPI_Init+0x24c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d01d      	beq.n	8007ec0 <HAL_SPI_Init+0x58>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a8b      	ldr	r2, [pc, #556]	; (80080b8 <HAL_SPI_Init+0x250>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d018      	beq.n	8007ec0 <HAL_SPI_Init+0x58>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a8a      	ldr	r2, [pc, #552]	; (80080bc <HAL_SPI_Init+0x254>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <HAL_SPI_Init+0x58>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a88      	ldr	r2, [pc, #544]	; (80080c0 <HAL_SPI_Init+0x258>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00e      	beq.n	8007ec0 <HAL_SPI_Init+0x58>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a87      	ldr	r2, [pc, #540]	; (80080c4 <HAL_SPI_Init+0x25c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d009      	beq.n	8007ec0 <HAL_SPI_Init+0x58>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a85      	ldr	r2, [pc, #532]	; (80080c8 <HAL_SPI_Init+0x260>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <HAL_SPI_Init+0x58>
 8007eb6:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007eba:	4884      	ldr	r0, [pc, #528]	; (80080cc <HAL_SPI_Init+0x264>)
 8007ebc:	f7fa fd53 	bl	8002966 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d009      	beq.n	8007edc <HAL_SPI_Init+0x74>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ed0:	d004      	beq.n	8007edc <HAL_SPI_Init+0x74>
 8007ed2:	f240 1143 	movw	r1, #323	; 0x143
 8007ed6:	487d      	ldr	r0, [pc, #500]	; (80080cc <HAL_SPI_Init+0x264>)
 8007ed8:	f7fa fd45 	bl	8002966 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00e      	beq.n	8007f02 <HAL_SPI_Init+0x9a>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eec:	d009      	beq.n	8007f02 <HAL_SPI_Init+0x9a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef6:	d004      	beq.n	8007f02 <HAL_SPI_Init+0x9a>
 8007ef8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007efc:	4873      	ldr	r0, [pc, #460]	; (80080cc <HAL_SPI_Init+0x264>)
 8007efe:	f7fa fd32 	bl	8002966 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f0a:	d008      	beq.n	8007f1e <HAL_SPI_Init+0xb6>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <HAL_SPI_Init+0xb6>
 8007f14:	f240 1145 	movw	r1, #325	; 0x145
 8007f18:	486c      	ldr	r0, [pc, #432]	; (80080cc <HAL_SPI_Init+0x264>)
 8007f1a:	f7fa fd24 	bl	8002966 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f26:	d00d      	beq.n	8007f44 <HAL_SPI_Init+0xdc>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d009      	beq.n	8007f44 <HAL_SPI_Init+0xdc>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f38:	d004      	beq.n	8007f44 <HAL_SPI_Init+0xdc>
 8007f3a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007f3e:	4863      	ldr	r0, [pc, #396]	; (80080cc <HAL_SPI_Init+0x264>)
 8007f40:	f7fa fd11 	bl	8002966 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d020      	beq.n	8007f8e <HAL_SPI_Init+0x126>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d01c      	beq.n	8007f8e <HAL_SPI_Init+0x126>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d018      	beq.n	8007f8e <HAL_SPI_Init+0x126>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	2b18      	cmp	r3, #24
 8007f62:	d014      	beq.n	8007f8e <HAL_SPI_Init+0x126>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d010      	beq.n	8007f8e <HAL_SPI_Init+0x126>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	2b28      	cmp	r3, #40	; 0x28
 8007f72:	d00c      	beq.n	8007f8e <HAL_SPI_Init+0x126>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	2b30      	cmp	r3, #48	; 0x30
 8007f7a:	d008      	beq.n	8007f8e <HAL_SPI_Init+0x126>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	2b38      	cmp	r3, #56	; 0x38
 8007f82:	d004      	beq.n	8007f8e <HAL_SPI_Init+0x126>
 8007f84:	f240 1147 	movw	r1, #327	; 0x147
 8007f88:	4850      	ldr	r0, [pc, #320]	; (80080cc <HAL_SPI_Init+0x264>)
 8007f8a:	f7fa fcec 	bl	8002966 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d008      	beq.n	8007fa8 <HAL_SPI_Init+0x140>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	2b80      	cmp	r3, #128	; 0x80
 8007f9c:	d004      	beq.n	8007fa8 <HAL_SPI_Init+0x140>
 8007f9e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007fa2:	484a      	ldr	r0, [pc, #296]	; (80080cc <HAL_SPI_Init+0x264>)
 8007fa4:	f7fa fcdf 	bl	8002966 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d008      	beq.n	8007fc2 <HAL_SPI_Init+0x15a>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	2b10      	cmp	r3, #16
 8007fb6:	d004      	beq.n	8007fc2 <HAL_SPI_Init+0x15a>
 8007fb8:	f240 1149 	movw	r1, #329	; 0x149
 8007fbc:	4843      	ldr	r0, [pc, #268]	; (80080cc <HAL_SPI_Init+0x264>)
 8007fbe:	f7fa fcd2 	bl	8002966 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d119      	bne.n	8007ffe <HAL_SPI_Init+0x196>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d008      	beq.n	8007fe4 <HAL_SPI_Init+0x17c>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d004      	beq.n	8007fe4 <HAL_SPI_Init+0x17c>
 8007fda:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007fde:	483b      	ldr	r0, [pc, #236]	; (80080cc <HAL_SPI_Init+0x264>)
 8007fe0:	f7fa fcc1 	bl	8002966 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	695b      	ldr	r3, [r3, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <HAL_SPI_Init+0x196>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d004      	beq.n	8007ffe <HAL_SPI_Init+0x196>
 8007ff4:	f240 114d 	movw	r1, #333	; 0x14d
 8007ff8:	4834      	ldr	r0, [pc, #208]	; (80080cc <HAL_SPI_Init+0x264>)
 8007ffa:	f7fa fcb4 	bl	8002966 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d106      	bne.n	800801e <HAL_SPI_Init+0x1b6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7fb f883 	bl	8003124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008034:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	431a      	orrs	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	431a      	orrs	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	ea42 0103 	orr.w	r1, r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	0c1b      	lsrs	r3, r3, #16
 800807c:	f003 0104 	and.w	r1, r3, #4
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69da      	ldr	r2, [r3, #28]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800809a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	40013000 	.word	0x40013000
 80080b8:	40003800 	.word	0x40003800
 80080bc:	40003c00 	.word	0x40003c00
 80080c0:	40013400 	.word	0x40013400
 80080c4:	40015000 	.word	0x40015000
 80080c8:	40015400 	.word	0x40015400
 80080cc:	0800be64 	.word	0x0800be64

080080d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	603b      	str	r3, [r7, #0]
 80080dc:	4613      	mov	r3, r2
 80080de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ec:	d112      	bne.n	8008114 <HAL_SPI_Receive+0x44>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10e      	bne.n	8008114 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2204      	movs	r2, #4
 80080fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80080fe:	88fa      	ldrh	r2, [r7, #6]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	4613      	mov	r3, r2
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 f8ea 	bl	80082e4 <HAL_SPI_TransmitReceive>
 8008110:	4603      	mov	r3, r0
 8008112:	e0e2      	b.n	80082da <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_SPI_Receive+0x52>
 800811e:	2302      	movs	r3, #2
 8008120:	e0db      	b.n	80082da <HAL_SPI_Receive+0x20a>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800812a:	f7fb fd75 	bl	8003c18 <HAL_GetTick>
 800812e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b01      	cmp	r3, #1
 800813a:	d002      	beq.n	8008142 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800813c:	2302      	movs	r3, #2
 800813e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008140:	e0c2      	b.n	80082c8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <HAL_SPI_Receive+0x7e>
 8008148:	88fb      	ldrh	r3, [r7, #6]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d102      	bne.n	8008154 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008152:	e0b9      	b.n	80082c8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2204      	movs	r2, #4
 8008158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	88fa      	ldrh	r2, [r7, #6]
 800816c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	88fa      	ldrh	r2, [r7, #6]
 8008172:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800819a:	d107      	bne.n	80081ac <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80081aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b40      	cmp	r3, #64	; 0x40
 80081b8:	d007      	beq.n	80081ca <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d162      	bne.n	8008298 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80081d2:	e02e      	b.n	8008232 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d115      	bne.n	800820e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f103 020c 	add.w	r2, r3, #12
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	b2d2      	uxtb	r2, r2
 80081f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008202:	b29b      	uxth	r3, r3
 8008204:	3b01      	subs	r3, #1
 8008206:	b29a      	uxth	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800820c:	e011      	b.n	8008232 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800820e:	f7fb fd03 	bl	8003c18 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d803      	bhi.n	8008226 <HAL_SPI_Receive+0x156>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008224:	d102      	bne.n	800822c <HAL_SPI_Receive+0x15c>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008230:	e04a      	b.n	80082c8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008236:	b29b      	uxth	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1cb      	bne.n	80081d4 <HAL_SPI_Receive+0x104>
 800823c:	e031      	b.n	80082a2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b01      	cmp	r3, #1
 800824a:	d113      	bne.n	8008274 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	b292      	uxth	r2, r2
 8008258:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825e:	1c9a      	adds	r2, r3, #2
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008268:	b29b      	uxth	r3, r3
 800826a:	3b01      	subs	r3, #1
 800826c:	b29a      	uxth	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008272:	e011      	b.n	8008298 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008274:	f7fb fcd0 	bl	8003c18 <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	429a      	cmp	r2, r3
 8008282:	d803      	bhi.n	800828c <HAL_SPI_Receive+0x1bc>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800828a:	d102      	bne.n	8008292 <HAL_SPI_Receive+0x1c2>
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008296:	e017      	b.n	80082c8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800829c:	b29b      	uxth	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1cd      	bne.n	800823e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 fa34 	bl	8008714 <SPI_EndRxTransaction>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2220      	movs	r2, #32
 80082b6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]
 80082c4:	e000      	b.n	80082c8 <HAL_SPI_Receive+0x1f8>
  }

error :
 80082c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08c      	sub	sp, #48	; 0x30
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082f2:	2301      	movs	r3, #1
 80082f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d004      	beq.n	800830e <HAL_SPI_TransmitReceive+0x2a>
 8008304:	f240 415a 	movw	r1, #1114	; 0x45a
 8008308:	4884      	ldr	r0, [pc, #528]	; (800851c <HAL_SPI_TransmitReceive+0x238>)
 800830a:	f7fa fb2c 	bl	8002966 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008314:	2b01      	cmp	r3, #1
 8008316:	d101      	bne.n	800831c <HAL_SPI_TransmitReceive+0x38>
 8008318:	2302      	movs	r3, #2
 800831a:	e18d      	b.n	8008638 <HAL_SPI_TransmitReceive+0x354>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008324:	f7fb fc78 	bl	8003c18 <HAL_GetTick>
 8008328:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800833a:	887b      	ldrh	r3, [r7, #2]
 800833c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800833e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008342:	2b01      	cmp	r3, #1
 8008344:	d00f      	beq.n	8008366 <HAL_SPI_TransmitReceive+0x82>
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800834c:	d107      	bne.n	800835e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d103      	bne.n	800835e <HAL_SPI_TransmitReceive+0x7a>
 8008356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800835a:	2b04      	cmp	r3, #4
 800835c:	d003      	beq.n	8008366 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800835e:	2302      	movs	r3, #2
 8008360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008364:	e15e      	b.n	8008624 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <HAL_SPI_TransmitReceive+0x94>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <HAL_SPI_TransmitReceive+0x94>
 8008372:	887b      	ldrh	r3, [r7, #2]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d103      	bne.n	8008380 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800837e:	e151      	b.n	8008624 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b04      	cmp	r3, #4
 800838a:	d003      	beq.n	8008394 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2205      	movs	r2, #5
 8008390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	887a      	ldrh	r2, [r7, #2]
 80083a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	887a      	ldrh	r2, [r7, #2]
 80083aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	887a      	ldrh	r2, [r7, #2]
 80083b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	887a      	ldrh	r2, [r7, #2]
 80083bc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d4:	2b40      	cmp	r3, #64	; 0x40
 80083d6:	d007      	beq.n	80083e8 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083f0:	d178      	bne.n	80084e4 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <HAL_SPI_TransmitReceive+0x11c>
 80083fa:	8b7b      	ldrh	r3, [r7, #26]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d166      	bne.n	80084ce <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008404:	881a      	ldrh	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008410:	1c9a      	adds	r2, r3, #2
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800841a:	b29b      	uxth	r3, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	b29a      	uxth	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008424:	e053      	b.n	80084ce <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b02      	cmp	r3, #2
 8008432:	d11b      	bne.n	800846c <HAL_SPI_TransmitReceive+0x188>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008438:	b29b      	uxth	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d016      	beq.n	800846c <HAL_SPI_TransmitReceive+0x188>
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	2b01      	cmp	r3, #1
 8008442:	d113      	bne.n	800846c <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008448:	881a      	ldrh	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008454:	1c9a      	adds	r2, r3, #2
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800845e:	b29b      	uxth	r3, r3
 8008460:	3b01      	subs	r3, #1
 8008462:	b29a      	uxth	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b01      	cmp	r3, #1
 8008478:	d119      	bne.n	80084ae <HAL_SPI_TransmitReceive+0x1ca>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800847e:	b29b      	uxth	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	d014      	beq.n	80084ae <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848e:	b292      	uxth	r2, r2
 8008490:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	1c9a      	adds	r2, r3, #2
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	3b01      	subs	r3, #1
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084aa:	2301      	movs	r3, #1
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084ae:	f7fb fbb3 	bl	8003c18 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d807      	bhi.n	80084ce <HAL_SPI_TransmitReceive+0x1ea>
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c4:	d003      	beq.n	80084ce <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80084cc:	e0aa      	b.n	8008624 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1a6      	bne.n	8008426 <HAL_SPI_TransmitReceive+0x142>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084dc:	b29b      	uxth	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1a1      	bne.n	8008426 <HAL_SPI_TransmitReceive+0x142>
 80084e2:	e07f      	b.n	80085e4 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <HAL_SPI_TransmitReceive+0x20e>
 80084ec:	8b7b      	ldrh	r3, [r7, #26]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d16e      	bne.n	80085d0 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	330c      	adds	r3, #12
 80084fc:	7812      	ldrb	r2, [r2, #0]
 80084fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800850e:	b29b      	uxth	r3, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008518:	e05a      	b.n	80085d0 <HAL_SPI_TransmitReceive+0x2ec>
 800851a:	bf00      	nop
 800851c:	0800be64 	.word	0x0800be64
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b02      	cmp	r3, #2
 800852c:	d11c      	bne.n	8008568 <HAL_SPI_TransmitReceive+0x284>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d017      	beq.n	8008568 <HAL_SPI_TransmitReceive+0x284>
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	2b01      	cmp	r3, #1
 800853c:	d114      	bne.n	8008568 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	330c      	adds	r3, #12
 8008548:	7812      	ldrb	r2, [r2, #0]
 800854a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800855a:	b29b      	uxth	r3, r3
 800855c:	3b01      	subs	r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b01      	cmp	r3, #1
 8008574:	d119      	bne.n	80085aa <HAL_SPI_TransmitReceive+0x2c6>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800857a:	b29b      	uxth	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d014      	beq.n	80085aa <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858a:	b2d2      	uxtb	r2, r2
 800858c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800859c:	b29b      	uxth	r3, r3
 800859e:	3b01      	subs	r3, #1
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085a6:	2301      	movs	r3, #1
 80085a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085aa:	f7fb fb35 	bl	8003c18 <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d803      	bhi.n	80085c2 <HAL_SPI_TransmitReceive+0x2de>
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085c0:	d102      	bne.n	80085c8 <HAL_SPI_TransmitReceive+0x2e4>
 80085c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d103      	bne.n	80085d0 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085ce:	e029      	b.n	8008624 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1a2      	bne.n	8008520 <HAL_SPI_TransmitReceive+0x23c>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085de:	b29b      	uxth	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d19d      	bne.n	8008520 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 f8f9 	bl	80087e0 <SPI_EndRxTxTransaction>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d006      	beq.n	8008602 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2220      	movs	r2, #32
 80085fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008600:	e010      	b.n	8008624 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10b      	bne.n	8008622 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800860a:	2300      	movs	r3, #0
 800860c:	617b      	str	r3, [r7, #20]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	617b      	str	r3, [r7, #20]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	617b      	str	r3, [r7, #20]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	e000      	b.n	8008624 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8008622:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008634:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008638:	4618      	mov	r0, r3
 800863a:	3730      	adds	r7, #48	; 0x30
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	4613      	mov	r3, r2
 800864e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008650:	e04c      	b.n	80086ec <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008658:	d048      	beq.n	80086ec <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800865a:	f7fb fadd 	bl	8003c18 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d902      	bls.n	8008670 <SPI_WaitFlagStateUntilTimeout+0x30>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d13d      	bne.n	80086ec <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800867e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008688:	d111      	bne.n	80086ae <SPI_WaitFlagStateUntilTimeout+0x6e>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008692:	d004      	beq.n	800869e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800869c:	d107      	bne.n	80086ae <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b6:	d10f      	bne.n	80086d8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e00f      	b.n	800870c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	4013      	ands	r3, r2
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	bf0c      	ite	eq
 80086fc:	2301      	moveq	r3, #1
 80086fe:	2300      	movne	r3, #0
 8008700:	b2db      	uxtb	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	79fb      	ldrb	r3, [r7, #7]
 8008706:	429a      	cmp	r2, r3
 8008708:	d1a3      	bne.n	8008652 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af02      	add	r7, sp, #8
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008728:	d111      	bne.n	800874e <SPI_EndRxTransaction+0x3a>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008732:	d004      	beq.n	800873e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800873c:	d107      	bne.n	800874e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800874c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008756:	d12a      	bne.n	80087ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008760:	d012      	beq.n	8008788 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2200      	movs	r2, #0
 800876a:	2180      	movs	r1, #128	; 0x80
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f7ff ff67 	bl	8008640 <SPI_WaitFlagStateUntilTimeout>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d02d      	beq.n	80087d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877c:	f043 0220 	orr.w	r2, r3, #32
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e026      	b.n	80087d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2200      	movs	r2, #0
 8008790:	2101      	movs	r1, #1
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff ff54 	bl	8008640 <SPI_WaitFlagStateUntilTimeout>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d01a      	beq.n	80087d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a2:	f043 0220 	orr.w	r2, r3, #32
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e013      	b.n	80087d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2200      	movs	r2, #0
 80087b6:	2101      	movs	r1, #1
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff ff41 	bl	8008640 <SPI_WaitFlagStateUntilTimeout>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d007      	beq.n	80087d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c8:	f043 0220 	orr.w	r2, r3, #32
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e000      	b.n	80087d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b088      	sub	sp, #32
 80087e4:	af02      	add	r7, sp, #8
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80087ec:	4b1b      	ldr	r3, [pc, #108]	; (800885c <SPI_EndRxTxTransaction+0x7c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a1b      	ldr	r2, [pc, #108]	; (8008860 <SPI_EndRxTxTransaction+0x80>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	0d5b      	lsrs	r3, r3, #21
 80087f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087fc:	fb02 f303 	mul.w	r3, r2, r3
 8008800:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800880a:	d112      	bne.n	8008832 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2200      	movs	r2, #0
 8008814:	2180      	movs	r1, #128	; 0x80
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7ff ff12 	bl	8008640 <SPI_WaitFlagStateUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d016      	beq.n	8008850 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008826:	f043 0220 	orr.w	r2, r3, #32
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e00f      	b.n	8008852 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	3b01      	subs	r3, #1
 800883c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008848:	2b80      	cmp	r3, #128	; 0x80
 800884a:	d0f2      	beq.n	8008832 <SPI_EndRxTxTransaction+0x52>
 800884c:	e000      	b.n	8008850 <SPI_EndRxTxTransaction+0x70>
        break;
 800884e:	bf00      	nop
  }

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	200001f0 	.word	0x200001f0
 8008860:	165e9f81 	.word	0x165e9f81

08008864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e0a1      	b.n	80089ba <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a52      	ldr	r2, [pc, #328]	; (80089c4 <HAL_TIM_Base_Init+0x160>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d045      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008888:	d040      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a4e      	ldr	r2, [pc, #312]	; (80089c8 <HAL_TIM_Base_Init+0x164>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d03b      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a4c      	ldr	r2, [pc, #304]	; (80089cc <HAL_TIM_Base_Init+0x168>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d036      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a4b      	ldr	r2, [pc, #300]	; (80089d0 <HAL_TIM_Base_Init+0x16c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d031      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a49      	ldr	r2, [pc, #292]	; (80089d4 <HAL_TIM_Base_Init+0x170>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d02c      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a48      	ldr	r2, [pc, #288]	; (80089d8 <HAL_TIM_Base_Init+0x174>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d027      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a46      	ldr	r2, [pc, #280]	; (80089dc <HAL_TIM_Base_Init+0x178>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d022      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a45      	ldr	r2, [pc, #276]	; (80089e0 <HAL_TIM_Base_Init+0x17c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d01d      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a43      	ldr	r2, [pc, #268]	; (80089e4 <HAL_TIM_Base_Init+0x180>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d018      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a42      	ldr	r2, [pc, #264]	; (80089e8 <HAL_TIM_Base_Init+0x184>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d013      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a40      	ldr	r2, [pc, #256]	; (80089ec <HAL_TIM_Base_Init+0x188>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d00e      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a3f      	ldr	r2, [pc, #252]	; (80089f0 <HAL_TIM_Base_Init+0x18c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d009      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a3d      	ldr	r2, [pc, #244]	; (80089f4 <HAL_TIM_Base_Init+0x190>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d004      	beq.n	800890c <HAL_TIM_Base_Init+0xa8>
 8008902:	f44f 7189 	mov.w	r1, #274	; 0x112
 8008906:	483c      	ldr	r0, [pc, #240]	; (80089f8 <HAL_TIM_Base_Init+0x194>)
 8008908:	f7fa f82d 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d014      	beq.n	800893e <HAL_TIM_Base_Init+0xda>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	2b10      	cmp	r3, #16
 800891a:	d010      	beq.n	800893e <HAL_TIM_Base_Init+0xda>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b20      	cmp	r3, #32
 8008922:	d00c      	beq.n	800893e <HAL_TIM_Base_Init+0xda>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2b40      	cmp	r3, #64	; 0x40
 800892a:	d008      	beq.n	800893e <HAL_TIM_Base_Init+0xda>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	2b60      	cmp	r3, #96	; 0x60
 8008932:	d004      	beq.n	800893e <HAL_TIM_Base_Init+0xda>
 8008934:	f240 1113 	movw	r1, #275	; 0x113
 8008938:	482f      	ldr	r0, [pc, #188]	; (80089f8 <HAL_TIM_Base_Init+0x194>)
 800893a:	f7fa f814 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00e      	beq.n	8008964 <HAL_TIM_Base_Init+0x100>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800894e:	d009      	beq.n	8008964 <HAL_TIM_Base_Init+0x100>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008958:	d004      	beq.n	8008964 <HAL_TIM_Base_Init+0x100>
 800895a:	f44f 718a 	mov.w	r1, #276	; 0x114
 800895e:	4826      	ldr	r0, [pc, #152]	; (80089f8 <HAL_TIM_Base_Init+0x194>)
 8008960:	f7fa f801 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d008      	beq.n	800897e <HAL_TIM_Base_Init+0x11a>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	2b80      	cmp	r3, #128	; 0x80
 8008972:	d004      	beq.n	800897e <HAL_TIM_Base_Init+0x11a>
 8008974:	f240 1115 	movw	r1, #277	; 0x115
 8008978:	481f      	ldr	r0, [pc, #124]	; (80089f8 <HAL_TIM_Base_Init+0x194>)
 800897a:	f7f9 fff4 	bl	8002966 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7fa fed0 	bl	8003738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f001 fa62 	bl	8009e74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	40010000 	.word	0x40010000
 80089c8:	40000400 	.word	0x40000400
 80089cc:	40000800 	.word	0x40000800
 80089d0:	40000c00 	.word	0x40000c00
 80089d4:	40001000 	.word	0x40001000
 80089d8:	40001400 	.word	0x40001400
 80089dc:	40010400 	.word	0x40010400
 80089e0:	40014000 	.word	0x40014000
 80089e4:	40014400 	.word	0x40014400
 80089e8:	40014800 	.word	0x40014800
 80089ec:	40001800 	.word	0x40001800
 80089f0:	40001c00 	.word	0x40001c00
 80089f4:	40002000 	.word	0x40002000
 80089f8:	0800be9c 	.word	0x0800be9c

080089fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a33      	ldr	r2, [pc, #204]	; (8008ad8 <HAL_TIM_Base_Start+0xdc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d045      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a16:	d040      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a2f      	ldr	r2, [pc, #188]	; (8008adc <HAL_TIM_Base_Start+0xe0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d03b      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a2e      	ldr	r2, [pc, #184]	; (8008ae0 <HAL_TIM_Base_Start+0xe4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d036      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a2c      	ldr	r2, [pc, #176]	; (8008ae4 <HAL_TIM_Base_Start+0xe8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d031      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a2b      	ldr	r2, [pc, #172]	; (8008ae8 <HAL_TIM_Base_Start+0xec>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d02c      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a29      	ldr	r2, [pc, #164]	; (8008aec <HAL_TIM_Base_Start+0xf0>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d027      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a28      	ldr	r2, [pc, #160]	; (8008af0 <HAL_TIM_Base_Start+0xf4>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d022      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a26      	ldr	r2, [pc, #152]	; (8008af4 <HAL_TIM_Base_Start+0xf8>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d01d      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a25      	ldr	r2, [pc, #148]	; (8008af8 <HAL_TIM_Base_Start+0xfc>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d018      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a23      	ldr	r2, [pc, #140]	; (8008afc <HAL_TIM_Base_Start+0x100>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d013      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a22      	ldr	r2, [pc, #136]	; (8008b00 <HAL_TIM_Base_Start+0x104>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00e      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a20      	ldr	r2, [pc, #128]	; (8008b04 <HAL_TIM_Base_Start+0x108>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d009      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a1f      	ldr	r2, [pc, #124]	; (8008b08 <HAL_TIM_Base_Start+0x10c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d004      	beq.n	8008a9a <HAL_TIM_Base_Start+0x9e>
 8008a90:	f240 1185 	movw	r1, #389	; 0x185
 8008a94:	481d      	ldr	r0, [pc, #116]	; (8008b0c <HAL_TIM_Base_Start+0x110>)
 8008a96:	f7f9 ff66 	bl	8002966 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2b06      	cmp	r3, #6
 8008ab2:	d007      	beq.n	8008ac4 <HAL_TIM_Base_Start+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0201 	orr.w	r2, r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	40010000 	.word	0x40010000
 8008adc:	40000400 	.word	0x40000400
 8008ae0:	40000800 	.word	0x40000800
 8008ae4:	40000c00 	.word	0x40000c00
 8008ae8:	40001000 	.word	0x40001000
 8008aec:	40001400 	.word	0x40001400
 8008af0:	40010400 	.word	0x40010400
 8008af4:	40014000 	.word	0x40014000
 8008af8:	40014400 	.word	0x40014400
 8008afc:	40014800 	.word	0x40014800
 8008b00:	40001800 	.word	0x40001800
 8008b04:	40001c00 	.word	0x40001c00
 8008b08:	40002000 	.word	0x40002000
 8008b0c:	0800be9c 	.word	0x0800be9c

08008b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e0a1      	b.n	8008c66 <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a52      	ldr	r2, [pc, #328]	; (8008c70 <HAL_TIM_PWM_Init+0x160>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d045      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b34:	d040      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a4e      	ldr	r2, [pc, #312]	; (8008c74 <HAL_TIM_PWM_Init+0x164>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d03b      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a4c      	ldr	r2, [pc, #304]	; (8008c78 <HAL_TIM_PWM_Init+0x168>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d036      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a4b      	ldr	r2, [pc, #300]	; (8008c7c <HAL_TIM_PWM_Init+0x16c>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d031      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a49      	ldr	r2, [pc, #292]	; (8008c80 <HAL_TIM_PWM_Init+0x170>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d02c      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a48      	ldr	r2, [pc, #288]	; (8008c84 <HAL_TIM_PWM_Init+0x174>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d027      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a46      	ldr	r2, [pc, #280]	; (8008c88 <HAL_TIM_PWM_Init+0x178>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d022      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a45      	ldr	r2, [pc, #276]	; (8008c8c <HAL_TIM_PWM_Init+0x17c>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d01d      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a43      	ldr	r2, [pc, #268]	; (8008c90 <HAL_TIM_PWM_Init+0x180>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d018      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a42      	ldr	r2, [pc, #264]	; (8008c94 <HAL_TIM_PWM_Init+0x184>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d013      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a40      	ldr	r2, [pc, #256]	; (8008c98 <HAL_TIM_PWM_Init+0x188>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00e      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a3f      	ldr	r2, [pc, #252]	; (8008c9c <HAL_TIM_PWM_Init+0x18c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d009      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a3d      	ldr	r2, [pc, #244]	; (8008ca0 <HAL_TIM_PWM_Init+0x190>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d004      	beq.n	8008bb8 <HAL_TIM_PWM_Init+0xa8>
 8008bae:	f240 419b 	movw	r1, #1179	; 0x49b
 8008bb2:	483c      	ldr	r0, [pc, #240]	; (8008ca4 <HAL_TIM_PWM_Init+0x194>)
 8008bb4:	f7f9 fed7 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d014      	beq.n	8008bea <HAL_TIM_PWM_Init+0xda>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	2b10      	cmp	r3, #16
 8008bc6:	d010      	beq.n	8008bea <HAL_TIM_PWM_Init+0xda>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	2b20      	cmp	r3, #32
 8008bce:	d00c      	beq.n	8008bea <HAL_TIM_PWM_Init+0xda>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	2b40      	cmp	r3, #64	; 0x40
 8008bd6:	d008      	beq.n	8008bea <HAL_TIM_PWM_Init+0xda>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	2b60      	cmp	r3, #96	; 0x60
 8008bde:	d004      	beq.n	8008bea <HAL_TIM_PWM_Init+0xda>
 8008be0:	f240 419c 	movw	r1, #1180	; 0x49c
 8008be4:	482f      	ldr	r0, [pc, #188]	; (8008ca4 <HAL_TIM_PWM_Init+0x194>)
 8008be6:	f7f9 febe 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00e      	beq.n	8008c10 <HAL_TIM_PWM_Init+0x100>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfa:	d009      	beq.n	8008c10 <HAL_TIM_PWM_Init+0x100>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c04:	d004      	beq.n	8008c10 <HAL_TIM_PWM_Init+0x100>
 8008c06:	f240 419d 	movw	r1, #1181	; 0x49d
 8008c0a:	4826      	ldr	r0, [pc, #152]	; (8008ca4 <HAL_TIM_PWM_Init+0x194>)
 8008c0c:	f7f9 feab 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d008      	beq.n	8008c2a <HAL_TIM_PWM_Init+0x11a>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	2b80      	cmp	r3, #128	; 0x80
 8008c1e:	d004      	beq.n	8008c2a <HAL_TIM_PWM_Init+0x11a>
 8008c20:	f240 419e 	movw	r1, #1182	; 0x49e
 8008c24:	481f      	ldr	r0, [pc, #124]	; (8008ca4 <HAL_TIM_PWM_Init+0x194>)
 8008c26:	f7f9 fe9e 	bl	8002966 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d106      	bne.n	8008c44 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f832 	bl	8008ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3304      	adds	r3, #4
 8008c54:	4619      	mov	r1, r3
 8008c56:	4610      	mov	r0, r2
 8008c58:	f001 f90c 	bl	8009e74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	40010000 	.word	0x40010000
 8008c74:	40000400 	.word	0x40000400
 8008c78:	40000800 	.word	0x40000800
 8008c7c:	40000c00 	.word	0x40000c00
 8008c80:	40001000 	.word	0x40001000
 8008c84:	40001400 	.word	0x40001400
 8008c88:	40010400 	.word	0x40010400
 8008c8c:	40014000 	.word	0x40014000
 8008c90:	40014400 	.word	0x40014400
 8008c94:	40014800 	.word	0x40014800
 8008c98:	40001800 	.word	0x40001800
 8008c9c:	40001c00 	.word	0x40001c00
 8008ca0:	40002000 	.word	0x40002000
 8008ca4:	0800be9c 	.word	0x0800be9c

08008ca8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a6d      	ldr	r2, [pc, #436]	; (8008e80 <HAL_TIM_PWM_Start+0x1c4>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d10f      	bne.n	8008cf0 <HAL_TIM_PWM_Start+0x34>
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 809f 	beq.w	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	f000 809b 	beq.w	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b08      	cmp	r3, #8
 8008ce4:	f000 8097 	beq.w	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2b0c      	cmp	r3, #12
 8008cec:	f000 8093 	beq.w	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf8:	d10e      	bne.n	8008d18 <HAL_TIM_PWM_Start+0x5c>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 808a 	beq.w	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	f000 8086 	beq.w	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b08      	cmp	r3, #8
 8008d0e:	f000 8082 	beq.w	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b0c      	cmp	r3, #12
 8008d16:	d07e      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a59      	ldr	r2, [pc, #356]	; (8008e84 <HAL_TIM_PWM_Start+0x1c8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d10b      	bne.n	8008d3a <HAL_TIM_PWM_Start+0x7e>
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d076      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	d073      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d070      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b0c      	cmp	r3, #12
 8008d38:	d06d      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a52      	ldr	r2, [pc, #328]	; (8008e88 <HAL_TIM_PWM_Start+0x1cc>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d10b      	bne.n	8008d5c <HAL_TIM_PWM_Start+0xa0>
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d065      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d062      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d05f      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b0c      	cmp	r3, #12
 8008d5a:	d05c      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a4a      	ldr	r2, [pc, #296]	; (8008e8c <HAL_TIM_PWM_Start+0x1d0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d10b      	bne.n	8008d7e <HAL_TIM_PWM_Start+0xc2>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d054      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d051      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	2b08      	cmp	r3, #8
 8008d76:	d04e      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b0c      	cmp	r3, #12
 8008d7c:	d04b      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a43      	ldr	r2, [pc, #268]	; (8008e90 <HAL_TIM_PWM_Start+0x1d4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d10b      	bne.n	8008da0 <HAL_TIM_PWM_Start+0xe4>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d043      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b04      	cmp	r3, #4
 8008d92:	d040      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	d03d      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b0c      	cmp	r3, #12
 8008d9e:	d03a      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a3b      	ldr	r2, [pc, #236]	; (8008e94 <HAL_TIM_PWM_Start+0x1d8>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d105      	bne.n	8008db6 <HAL_TIM_PWM_Start+0xfa>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d032      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2b04      	cmp	r3, #4
 8008db4:	d02f      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a37      	ldr	r2, [pc, #220]	; (8008e98 <HAL_TIM_PWM_Start+0x1dc>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d102      	bne.n	8008dc6 <HAL_TIM_PWM_Start+0x10a>
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d027      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a34      	ldr	r2, [pc, #208]	; (8008e9c <HAL_TIM_PWM_Start+0x1e0>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d102      	bne.n	8008dd6 <HAL_TIM_PWM_Start+0x11a>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d01f      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a31      	ldr	r2, [pc, #196]	; (8008ea0 <HAL_TIM_PWM_Start+0x1e4>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d105      	bne.n	8008dec <HAL_TIM_PWM_Start+0x130>
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d017      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d014      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a2c      	ldr	r2, [pc, #176]	; (8008ea4 <HAL_TIM_PWM_Start+0x1e8>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d102      	bne.n	8008dfc <HAL_TIM_PWM_Start+0x140>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00c      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a29      	ldr	r2, [pc, #164]	; (8008ea8 <HAL_TIM_PWM_Start+0x1ec>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d102      	bne.n	8008e0c <HAL_TIM_PWM_Start+0x150>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d004      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x15a>
 8008e0c:	f240 5113 	movw	r1, #1299	; 0x513
 8008e10:	4826      	ldr	r0, [pc, #152]	; (8008eac <HAL_TIM_PWM_Start+0x1f0>)
 8008e12:	f7f9 fda8 	bl	8002966 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f001 fcc6 	bl	800a7b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a15      	ldr	r2, [pc, #84]	; (8008e80 <HAL_TIM_PWM_Start+0x1c4>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d004      	beq.n	8008e38 <HAL_TIM_PWM_Start+0x17c>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a17      	ldr	r2, [pc, #92]	; (8008e90 <HAL_TIM_PWM_Start+0x1d4>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d101      	bne.n	8008e3c <HAL_TIM_PWM_Start+0x180>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e000      	b.n	8008e3e <HAL_TIM_PWM_Start+0x182>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d007      	beq.n	8008e52 <HAL_TIM_PWM_Start+0x196>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f003 0307 	and.w	r3, r3, #7
 8008e5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b06      	cmp	r3, #6
 8008e62:	d007      	beq.n	8008e74 <HAL_TIM_PWM_Start+0x1b8>
  {
    __HAL_TIM_ENABLE(htim);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f042 0201 	orr.w	r2, r2, #1
 8008e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40000c00 	.word	0x40000c00
 8008e90:	40010400 	.word	0x40010400
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800
 8008ea0:	40001800 	.word	0x40001800
 8008ea4:	40001c00 	.word	0x40001c00
 8008ea8:	40002000 	.word	0x40002000
 8008eac:	0800be9c 	.word	0x0800be9c

08008eb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e0a1      	b.n	8009006 <HAL_TIM_IC_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a52      	ldr	r2, [pc, #328]	; (8009010 <HAL_TIM_IC_Init+0x160>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d045      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ed4:	d040      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a4e      	ldr	r2, [pc, #312]	; (8009014 <HAL_TIM_IC_Init+0x164>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d03b      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a4c      	ldr	r2, [pc, #304]	; (8009018 <HAL_TIM_IC_Init+0x168>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d036      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a4b      	ldr	r2, [pc, #300]	; (800901c <HAL_TIM_IC_Init+0x16c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d031      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a49      	ldr	r2, [pc, #292]	; (8009020 <HAL_TIM_IC_Init+0x170>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d02c      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a48      	ldr	r2, [pc, #288]	; (8009024 <HAL_TIM_IC_Init+0x174>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d027      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a46      	ldr	r2, [pc, #280]	; (8009028 <HAL_TIM_IC_Init+0x178>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d022      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a45      	ldr	r2, [pc, #276]	; (800902c <HAL_TIM_IC_Init+0x17c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d01d      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a43      	ldr	r2, [pc, #268]	; (8009030 <HAL_TIM_IC_Init+0x180>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d018      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a42      	ldr	r2, [pc, #264]	; (8009034 <HAL_TIM_IC_Init+0x184>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d013      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a40      	ldr	r2, [pc, #256]	; (8009038 <HAL_TIM_IC_Init+0x188>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00e      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a3f      	ldr	r2, [pc, #252]	; (800903c <HAL_TIM_IC_Init+0x18c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d009      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a3d      	ldr	r2, [pc, #244]	; (8009040 <HAL_TIM_IC_Init+0x190>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d004      	beq.n	8008f58 <HAL_TIM_IC_Init+0xa8>
 8008f4e:	f240 61d9 	movw	r1, #1753	; 0x6d9
 8008f52:	483c      	ldr	r0, [pc, #240]	; (8009044 <HAL_TIM_IC_Init+0x194>)
 8008f54:	f7f9 fd07 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d014      	beq.n	8008f8a <HAL_TIM_IC_Init+0xda>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	2b10      	cmp	r3, #16
 8008f66:	d010      	beq.n	8008f8a <HAL_TIM_IC_Init+0xda>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	2b20      	cmp	r3, #32
 8008f6e:	d00c      	beq.n	8008f8a <HAL_TIM_IC_Init+0xda>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	2b40      	cmp	r3, #64	; 0x40
 8008f76:	d008      	beq.n	8008f8a <HAL_TIM_IC_Init+0xda>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	2b60      	cmp	r3, #96	; 0x60
 8008f7e:	d004      	beq.n	8008f8a <HAL_TIM_IC_Init+0xda>
 8008f80:	f240 61da 	movw	r1, #1754	; 0x6da
 8008f84:	482f      	ldr	r0, [pc, #188]	; (8009044 <HAL_TIM_IC_Init+0x194>)
 8008f86:	f7f9 fcee 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00e      	beq.n	8008fb0 <HAL_TIM_IC_Init+0x100>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f9a:	d009      	beq.n	8008fb0 <HAL_TIM_IC_Init+0x100>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa4:	d004      	beq.n	8008fb0 <HAL_TIM_IC_Init+0x100>
 8008fa6:	f240 61db 	movw	r1, #1755	; 0x6db
 8008faa:	4826      	ldr	r0, [pc, #152]	; (8009044 <HAL_TIM_IC_Init+0x194>)
 8008fac:	f7f9 fcdb 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d008      	beq.n	8008fca <HAL_TIM_IC_Init+0x11a>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	2b80      	cmp	r3, #128	; 0x80
 8008fbe:	d004      	beq.n	8008fca <HAL_TIM_IC_Init+0x11a>
 8008fc0:	f240 61dc 	movw	r1, #1756	; 0x6dc
 8008fc4:	481f      	ldr	r0, [pc, #124]	; (8009044 <HAL_TIM_IC_Init+0x194>)
 8008fc6:	f7f9 fcce 	bl	8002966 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d106      	bne.n	8008fe4 <HAL_TIM_IC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f832 	bl	8009048 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	f000 ff3c 	bl	8009e74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	40010000 	.word	0x40010000
 8009014:	40000400 	.word	0x40000400
 8009018:	40000800 	.word	0x40000800
 800901c:	40000c00 	.word	0x40000c00
 8009020:	40001000 	.word	0x40001000
 8009024:	40001400 	.word	0x40001400
 8009028:	40010400 	.word	0x40010400
 800902c:	40014000 	.word	0x40014000
 8009030:	40014400 	.word	0x40014400
 8009034:	40014800 	.word	0x40014800
 8009038:	40001800 	.word	0x40001800
 800903c:	40001c00 	.word	0x40001c00
 8009040:	40002000 	.word	0x40002000
 8009044:	0800be9c 	.word	0x0800be9c

08009048 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a7c      	ldr	r2, [pc, #496]	; (8009260 <HAL_TIM_IC_ConfigChannel+0x204>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d03b      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800907a:	d036      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a78      	ldr	r2, [pc, #480]	; (8009264 <HAL_TIM_IC_ConfigChannel+0x208>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d031      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a77      	ldr	r2, [pc, #476]	; (8009268 <HAL_TIM_IC_ConfigChannel+0x20c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d02c      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a75      	ldr	r2, [pc, #468]	; (800926c <HAL_TIM_IC_ConfigChannel+0x210>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d027      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a74      	ldr	r2, [pc, #464]	; (8009270 <HAL_TIM_IC_ConfigChannel+0x214>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d022      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a72      	ldr	r2, [pc, #456]	; (8009274 <HAL_TIM_IC_ConfigChannel+0x218>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d01d      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a71      	ldr	r2, [pc, #452]	; (8009278 <HAL_TIM_IC_ConfigChannel+0x21c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d018      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a6f      	ldr	r2, [pc, #444]	; (800927c <HAL_TIM_IC_ConfigChannel+0x220>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d013      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a6e      	ldr	r2, [pc, #440]	; (8009280 <HAL_TIM_IC_ConfigChannel+0x224>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00e      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a6c      	ldr	r2, [pc, #432]	; (8009284 <HAL_TIM_IC_ConfigChannel+0x228>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d009      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a6b      	ldr	r2, [pc, #428]	; (8009288 <HAL_TIM_IC_ConfigChannel+0x22c>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d004      	beq.n	80090ea <HAL_TIM_IC_ConfigChannel+0x8e>
 80090e0:	f640 5189 	movw	r1, #3465	; 0xd89
 80090e4:	4869      	ldr	r0, [pc, #420]	; (800928c <HAL_TIM_IC_ConfigChannel+0x230>)
 80090e6:	f7f9 fc3e 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00c      	beq.n	800910c <HAL_TIM_IC_ConfigChannel+0xb0>
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d008      	beq.n	800910c <HAL_TIM_IC_ConfigChannel+0xb0>
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b0a      	cmp	r3, #10
 8009100:	d004      	beq.n	800910c <HAL_TIM_IC_ConfigChannel+0xb0>
 8009102:	f640 518a 	movw	r1, #3466	; 0xd8a
 8009106:	4861      	ldr	r0, [pc, #388]	; (800928c <HAL_TIM_IC_ConfigChannel+0x230>)
 8009108:	f7f9 fc2d 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d00c      	beq.n	800912e <HAL_TIM_IC_ConfigChannel+0xd2>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	2b02      	cmp	r3, #2
 800911a:	d008      	beq.n	800912e <HAL_TIM_IC_ConfigChannel+0xd2>
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	2b03      	cmp	r3, #3
 8009122:	d004      	beq.n	800912e <HAL_TIM_IC_ConfigChannel+0xd2>
 8009124:	f640 518b 	movw	r1, #3467	; 0xd8b
 8009128:	4858      	ldr	r0, [pc, #352]	; (800928c <HAL_TIM_IC_ConfigChannel+0x230>)
 800912a:	f7f9 fc1c 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d010      	beq.n	8009158 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	2b04      	cmp	r3, #4
 800913c:	d00c      	beq.n	8009158 <HAL_TIM_IC_ConfigChannel+0xfc>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	2b08      	cmp	r3, #8
 8009144:	d008      	beq.n	8009158 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	2b0c      	cmp	r3, #12
 800914c:	d004      	beq.n	8009158 <HAL_TIM_IC_ConfigChannel+0xfc>
 800914e:	f640 518c 	movw	r1, #3468	; 0xd8c
 8009152:	484e      	ldr	r0, [pc, #312]	; (800928c <HAL_TIM_IC_ConfigChannel+0x230>)
 8009154:	f7f9 fc07 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	2b0f      	cmp	r3, #15
 800915e:	d904      	bls.n	800916a <HAL_TIM_IC_ConfigChannel+0x10e>
 8009160:	f640 518d 	movw	r1, #3469	; 0xd8d
 8009164:	4849      	ldr	r0, [pc, #292]	; (800928c <HAL_TIM_IC_ConfigChannel+0x230>)
 8009166:	f7f9 fbfe 	bl	8002966 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009170:	2b01      	cmp	r3, #1
 8009172:	d101      	bne.n	8009178 <HAL_TIM_IC_ConfigChannel+0x11c>
 8009174:	2302      	movs	r3, #2
 8009176:	e115      	b.n	80093a4 <HAL_TIM_IC_ConfigChannel+0x348>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d11b      	bne.n	80091c6 <HAL_TIM_IC_ConfigChannel+0x16a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	6819      	ldr	r1, [r3, #0]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f001 f943 	bl	800a428 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	699a      	ldr	r2, [r3, #24]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f022 020c 	bic.w	r2, r2, #12
 80091b0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6999      	ldr	r1, [r3, #24]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	689a      	ldr	r2, [r3, #8]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	619a      	str	r2, [r3, #24]
 80091c4:	e0e5      	b.n	8009392 <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else if (Channel == TIM_CHANNEL_2)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	d161      	bne.n	8009290 <HAL_TIM_IC_ConfigChannel+0x234>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a23      	ldr	r2, [pc, #140]	; (8009260 <HAL_TIM_IC_ConfigChannel+0x204>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d027      	beq.n	8009226 <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091de:	d022      	beq.n	8009226 <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a1f      	ldr	r2, [pc, #124]	; (8009264 <HAL_TIM_IC_ConfigChannel+0x208>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d01d      	beq.n	8009226 <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a1e      	ldr	r2, [pc, #120]	; (8009268 <HAL_TIM_IC_ConfigChannel+0x20c>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d018      	beq.n	8009226 <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a1c      	ldr	r2, [pc, #112]	; (800926c <HAL_TIM_IC_ConfigChannel+0x210>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d013      	beq.n	8009226 <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a1b      	ldr	r2, [pc, #108]	; (8009270 <HAL_TIM_IC_ConfigChannel+0x214>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00e      	beq.n	8009226 <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a19      	ldr	r2, [pc, #100]	; (8009274 <HAL_TIM_IC_ConfigChannel+0x218>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d009      	beq.n	8009226 <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a1a      	ldr	r2, [pc, #104]	; (8009280 <HAL_TIM_IC_ConfigChannel+0x224>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d004      	beq.n	8009226 <HAL_TIM_IC_ConfigChannel+0x1ca>
 800921c:	f640 51a5 	movw	r1, #3493	; 0xda5
 8009220:	481a      	ldr	r0, [pc, #104]	; (800928c <HAL_TIM_IC_ConfigChannel+0x230>)
 8009222:	f7f9 fba0 	bl	8002966 <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6819      	ldr	r1, [r3, #0]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f001 f99a 	bl	800a56e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	699a      	ldr	r2, [r3, #24]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009248:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6999      	ldr	r1, [r3, #24]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	021a      	lsls	r2, r3, #8
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	619a      	str	r2, [r3, #24]
 800925e:	e098      	b.n	8009392 <HAL_TIM_IC_ConfigChannel+0x336>
 8009260:	40010000 	.word	0x40010000
 8009264:	40000400 	.word	0x40000400
 8009268:	40000800 	.word	0x40000800
 800926c:	40000c00 	.word	0x40000c00
 8009270:	40010400 	.word	0x40010400
 8009274:	40014000 	.word	0x40014000
 8009278:	40014400 	.word	0x40014400
 800927c:	40014800 	.word	0x40014800
 8009280:	40001800 	.word	0x40001800
 8009284:	40001c00 	.word	0x40001c00
 8009288:	40002000 	.word	0x40002000
 800928c:	0800be9c 	.word	0x0800be9c
  }
  else if (Channel == TIM_CHANNEL_3)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b08      	cmp	r3, #8
 8009294:	d13e      	bne.n	8009314 <HAL_TIM_IC_ConfigChannel+0x2b8>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a44      	ldr	r2, [pc, #272]	; (80093ac <HAL_TIM_IC_ConfigChannel+0x350>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d01d      	beq.n	80092dc <HAL_TIM_IC_ConfigChannel+0x280>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a8:	d018      	beq.n	80092dc <HAL_TIM_IC_ConfigChannel+0x280>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a40      	ldr	r2, [pc, #256]	; (80093b0 <HAL_TIM_IC_ConfigChannel+0x354>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d013      	beq.n	80092dc <HAL_TIM_IC_ConfigChannel+0x280>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a3e      	ldr	r2, [pc, #248]	; (80093b4 <HAL_TIM_IC_ConfigChannel+0x358>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d00e      	beq.n	80092dc <HAL_TIM_IC_ConfigChannel+0x280>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a3d      	ldr	r2, [pc, #244]	; (80093b8 <HAL_TIM_IC_ConfigChannel+0x35c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d009      	beq.n	80092dc <HAL_TIM_IC_ConfigChannel+0x280>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a3b      	ldr	r2, [pc, #236]	; (80093bc <HAL_TIM_IC_ConfigChannel+0x360>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d004      	beq.n	80092dc <HAL_TIM_IC_ConfigChannel+0x280>
 80092d2:	f640 51b5 	movw	r1, #3509	; 0xdb5
 80092d6:	483a      	ldr	r0, [pc, #232]	; (80093c0 <HAL_TIM_IC_ConfigChannel+0x364>)
 80092d8:	f7f9 fb45 	bl	8002966 <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6818      	ldr	r0, [r3, #0]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	6819      	ldr	r1, [r3, #0]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	f001 f9ac 	bl	800a648 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	69da      	ldr	r2, [r3, #28]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 020c 	bic.w	r2, r2, #12
 80092fe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	69d9      	ldr	r1, [r3, #28]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	61da      	str	r2, [r3, #28]
 8009312:	e03e      	b.n	8009392 <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a24      	ldr	r2, [pc, #144]	; (80093ac <HAL_TIM_IC_ConfigChannel+0x350>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d01d      	beq.n	800935a <HAL_TIM_IC_ConfigChannel+0x2fe>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009326:	d018      	beq.n	800935a <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a20      	ldr	r2, [pc, #128]	; (80093b0 <HAL_TIM_IC_ConfigChannel+0x354>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d013      	beq.n	800935a <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a1f      	ldr	r2, [pc, #124]	; (80093b4 <HAL_TIM_IC_ConfigChannel+0x358>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d00e      	beq.n	800935a <HAL_TIM_IC_ConfigChannel+0x2fe>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a1d      	ldr	r2, [pc, #116]	; (80093b8 <HAL_TIM_IC_ConfigChannel+0x35c>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d009      	beq.n	800935a <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a1c      	ldr	r2, [pc, #112]	; (80093bc <HAL_TIM_IC_ConfigChannel+0x360>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d004      	beq.n	800935a <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009350:	f640 51c5 	movw	r1, #3525	; 0xdc5
 8009354:	481a      	ldr	r0, [pc, #104]	; (80093c0 <HAL_TIM_IC_ConfigChannel+0x364>)
 8009356:	f7f9 fb06 	bl	8002966 <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6818      	ldr	r0, [r3, #0]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	6819      	ldr	r1, [r3, #0]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f001 f9a9 	bl	800a6c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	69da      	ldr	r2, [r3, #28]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800937c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	69d9      	ldr	r1, [r3, #28]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	021a      	lsls	r2, r3, #8
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	40010000 	.word	0x40010000
 80093b0:	40000400 	.word	0x40000400
 80093b4:	40000800 	.word	0x40000800
 80093b8:	40000c00 	.word	0x40000c00
 80093bc:	40010400 	.word	0x40010400
 80093c0:	0800be9c 	.word	0x0800be9c

080093c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d010      	beq.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x34>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b04      	cmp	r3, #4
 80093da:	d00d      	beq.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x34>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b08      	cmp	r3, #8
 80093e0:	d00a      	beq.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x34>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b0c      	cmp	r3, #12
 80093e6:	d007      	beq.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x34>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b3c      	cmp	r3, #60	; 0x3c
 80093ec:	d004      	beq.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x34>
 80093ee:	f640 51ec 	movw	r1, #3564	; 0xdec
 80093f2:	4885      	ldr	r0, [pc, #532]	; (8009608 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80093f4:	f7f9 fab7 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b60      	cmp	r3, #96	; 0x60
 80093fe:	d008      	beq.n	8009412 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b70      	cmp	r3, #112	; 0x70
 8009406:	d004      	beq.n	8009412 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8009408:	f640 51ed 	movw	r1, #3565	; 0xded
 800940c:	487e      	ldr	r0, [pc, #504]	; (8009608 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800940e:	f7f9 faaa 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d008      	beq.n	800942c <HAL_TIM_PWM_ConfigChannel+0x68>
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	2b02      	cmp	r3, #2
 8009420:	d004      	beq.n	800942c <HAL_TIM_PWM_ConfigChannel+0x68>
 8009422:	f640 51ee 	movw	r1, #3566	; 0xdee
 8009426:	4878      	ldr	r0, [pc, #480]	; (8009608 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009428:	f7f9 fa9d 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d008      	beq.n	8009446 <HAL_TIM_PWM_ConfigChannel+0x82>
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	2b04      	cmp	r3, #4
 800943a:	d004      	beq.n	8009446 <HAL_TIM_PWM_ConfigChannel+0x82>
 800943c:	f640 51ef 	movw	r1, #3567	; 0xdef
 8009440:	4871      	ldr	r0, [pc, #452]	; (8009608 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009442:	f7f9 fa90 	bl	8002966 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800944c:	2b01      	cmp	r3, #1
 800944e:	d101      	bne.n	8009454 <HAL_TIM_PWM_ConfigChannel+0x90>
 8009450:	2302      	movs	r3, #2
 8009452:	e182      	b.n	800975a <HAL_TIM_PWM_ConfigChannel+0x396>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b0c      	cmp	r3, #12
 8009468:	f200 816d 	bhi.w	8009746 <HAL_TIM_PWM_ConfigChannel+0x382>
 800946c:	a201      	add	r2, pc, #4	; (adr r2, 8009474 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 800946e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009472:	bf00      	nop
 8009474:	080094a9 	.word	0x080094a9
 8009478:	08009747 	.word	0x08009747
 800947c:	08009747 	.word	0x08009747
 8009480:	08009747 	.word	0x08009747
 8009484:	0800956b 	.word	0x0800956b
 8009488:	08009747 	.word	0x08009747
 800948c:	08009747 	.word	0x08009747
 8009490:	08009747 	.word	0x08009747
 8009494:	08009639 	.word	0x08009639
 8009498:	08009747 	.word	0x08009747
 800949c:	08009747 	.word	0x08009747
 80094a0:	08009747 	.word	0x08009747
 80094a4:	080096bf 	.word	0x080096bf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a57      	ldr	r2, [pc, #348]	; (800960c <HAL_TIM_PWM_ConfigChannel+0x248>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d03b      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ba:	d036      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a53      	ldr	r2, [pc, #332]	; (8009610 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d031      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a52      	ldr	r2, [pc, #328]	; (8009614 <HAL_TIM_PWM_ConfigChannel+0x250>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d02c      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a50      	ldr	r2, [pc, #320]	; (8009618 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d027      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a4f      	ldr	r2, [pc, #316]	; (800961c <HAL_TIM_PWM_ConfigChannel+0x258>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d022      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a4d      	ldr	r2, [pc, #308]	; (8009620 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d01d      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a4c      	ldr	r2, [pc, #304]	; (8009624 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d018      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a4a      	ldr	r2, [pc, #296]	; (8009628 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d013      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a49      	ldr	r2, [pc, #292]	; (800962c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00e      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a47      	ldr	r2, [pc, #284]	; (8009630 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d009      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a46      	ldr	r2, [pc, #280]	; (8009634 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d004      	beq.n	800952a <HAL_TIM_PWM_ConfigChannel+0x166>
 8009520:	f640 51fb 	movw	r1, #3579	; 0xdfb
 8009524:	4838      	ldr	r0, [pc, #224]	; (8009608 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009526:	f7f9 fa1e 	bl	8002966 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68b9      	ldr	r1, [r7, #8]
 8009530:	4618      	mov	r0, r3
 8009532:	f000 fd3f 	bl	8009fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	699a      	ldr	r2, [r3, #24]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f042 0208 	orr.w	r2, r2, #8
 8009544:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	699a      	ldr	r2, [r3, #24]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 0204 	bic.w	r2, r2, #4
 8009554:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6999      	ldr	r1, [r3, #24]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	691a      	ldr	r2, [r3, #16]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	619a      	str	r2, [r3, #24]
      break;
 8009568:	e0ee      	b.n	8009748 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a27      	ldr	r2, [pc, #156]	; (800960c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d027      	beq.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x200>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800957c:	d022      	beq.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x200>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a23      	ldr	r2, [pc, #140]	; (8009610 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d01d      	beq.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x200>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a21      	ldr	r2, [pc, #132]	; (8009614 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d018      	beq.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x200>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a20      	ldr	r2, [pc, #128]	; (8009618 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d013      	beq.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x200>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a1e      	ldr	r2, [pc, #120]	; (800961c <HAL_TIM_PWM_ConfigChannel+0x258>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d00e      	beq.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x200>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a1d      	ldr	r2, [pc, #116]	; (8009620 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d009      	beq.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x200>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a1d      	ldr	r2, [pc, #116]	; (800962c <HAL_TIM_PWM_ConfigChannel+0x268>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d004      	beq.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x200>
 80095ba:	f640 610c 	movw	r1, #3596	; 0xe0c
 80095be:	4812      	ldr	r0, [pc, #72]	; (8009608 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80095c0:	f7f9 f9d1 	bl	8002966 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 fd8c 	bl	800a0e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699a      	ldr	r2, [r3, #24]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	699a      	ldr	r2, [r3, #24]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6999      	ldr	r1, [r3, #24]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	021a      	lsls	r2, r3, #8
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	430a      	orrs	r2, r1
 8009602:	619a      	str	r2, [r3, #24]
      break;
 8009604:	e0a0      	b.n	8009748 <HAL_TIM_PWM_ConfigChannel+0x384>
 8009606:	bf00      	nop
 8009608:	0800be9c 	.word	0x0800be9c
 800960c:	40010000 	.word	0x40010000
 8009610:	40000400 	.word	0x40000400
 8009614:	40000800 	.word	0x40000800
 8009618:	40000c00 	.word	0x40000c00
 800961c:	40010400 	.word	0x40010400
 8009620:	40014000 	.word	0x40014000
 8009624:	40014400 	.word	0x40014400
 8009628:	40014800 	.word	0x40014800
 800962c:	40001800 	.word	0x40001800
 8009630:	40001c00 	.word	0x40001c00
 8009634:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a49      	ldr	r2, [pc, #292]	; (8009764 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d01d      	beq.n	800967e <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964a:	d018      	beq.n	800967e <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a45      	ldr	r2, [pc, #276]	; (8009768 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d013      	beq.n	800967e <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a44      	ldr	r2, [pc, #272]	; (800976c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00e      	beq.n	800967e <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a42      	ldr	r2, [pc, #264]	; (8009770 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d009      	beq.n	800967e <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a41      	ldr	r2, [pc, #260]	; (8009774 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d004      	beq.n	800967e <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009674:	f640 611d 	movw	r1, #3613	; 0xe1d
 8009678:	483f      	ldr	r0, [pc, #252]	; (8009778 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800967a:	f7f9 f974 	bl	8002966 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68b9      	ldr	r1, [r7, #8]
 8009684:	4618      	mov	r0, r3
 8009686:	f000 fdcd 	bl	800a224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69da      	ldr	r2, [r3, #28]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f042 0208 	orr.w	r2, r2, #8
 8009698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69da      	ldr	r2, [r3, #28]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 0204 	bic.w	r2, r2, #4
 80096a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	69d9      	ldr	r1, [r3, #28]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	61da      	str	r2, [r3, #28]
      break;
 80096bc:	e044      	b.n	8009748 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a28      	ldr	r2, [pc, #160]	; (8009764 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d01d      	beq.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x340>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096d0:	d018      	beq.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x340>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a24      	ldr	r2, [pc, #144]	; (8009768 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d013      	beq.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x340>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a22      	ldr	r2, [pc, #136]	; (800976c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00e      	beq.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x340>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a21      	ldr	r2, [pc, #132]	; (8009770 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d009      	beq.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x340>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a1f      	ldr	r2, [pc, #124]	; (8009774 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d004      	beq.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x340>
 80096fa:	f640 612e 	movw	r1, #3630	; 0xe2e
 80096fe:	481e      	ldr	r0, [pc, #120]	; (8009778 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8009700:	f7f9 f931 	bl	8002966 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68b9      	ldr	r1, [r7, #8]
 800970a:	4618      	mov	r0, r3
 800970c:	f000 fe28 	bl	800a360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69da      	ldr	r2, [r3, #28]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800971e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	69da      	ldr	r2, [r3, #28]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800972e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69d9      	ldr	r1, [r3, #28]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	021a      	lsls	r2, r3, #8
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	430a      	orrs	r2, r1
 8009742:	61da      	str	r2, [r3, #28]
      break;
 8009744:	e000      	b.n	8009748 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      break;
 8009746:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	40010000 	.word	0x40010000
 8009768:	40000400 	.word	0x40000400
 800976c:	40000800 	.word	0x40000800
 8009770:	40000c00 	.word	0x40000c00
 8009774:	40010400 	.word	0x40010400
 8009778:	0800be9c 	.word	0x0800be9c

0800977c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800978c:	2b01      	cmp	r3, #1
 800978e:	d101      	bne.n	8009794 <HAL_TIM_ConfigClockSource+0x18>
 8009790:	2302      	movs	r3, #2
 8009792:	e35b      	b.n	8009e4c <HAL_TIM_ConfigClockSource+0x6d0>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ac:	d029      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x86>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097b6:	d024      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x86>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d020      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x86>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b10      	cmp	r3, #16
 80097c6:	d01c      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x86>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b20      	cmp	r3, #32
 80097ce:	d018      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x86>
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b30      	cmp	r3, #48	; 0x30
 80097d6:	d014      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x86>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b40      	cmp	r3, #64	; 0x40
 80097de:	d010      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x86>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b50      	cmp	r3, #80	; 0x50
 80097e6:	d00c      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x86>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b60      	cmp	r3, #96	; 0x60
 80097ee:	d008      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x86>
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b70      	cmp	r3, #112	; 0x70
 80097f6:	d004      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x86>
 80097f8:	f241 118b 	movw	r1, #4491	; 0x118b
 80097fc:	4893      	ldr	r0, [pc, #588]	; (8009a4c <HAL_TIM_ConfigClockSource+0x2d0>)
 80097fe:	f7f9 f8b2 	bl	8002966 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009810:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009818:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800982a:	f000 812b 	beq.w	8009a84 <HAL_TIM_ConfigClockSource+0x308>
 800982e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009832:	f200 82ff 	bhi.w	8009e34 <HAL_TIM_ConfigClockSource+0x6b8>
 8009836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800983a:	d02e      	beq.n	800989a <HAL_TIM_ConfigClockSource+0x11e>
 800983c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009840:	f200 82f8 	bhi.w	8009e34 <HAL_TIM_ConfigClockSource+0x6b8>
 8009844:	2b70      	cmp	r3, #112	; 0x70
 8009846:	f000 8082 	beq.w	800994e <HAL_TIM_ConfigClockSource+0x1d2>
 800984a:	2b70      	cmp	r3, #112	; 0x70
 800984c:	f200 82f2 	bhi.w	8009e34 <HAL_TIM_ConfigClockSource+0x6b8>
 8009850:	2b60      	cmp	r3, #96	; 0x60
 8009852:	f000 81e8 	beq.w	8009c26 <HAL_TIM_ConfigClockSource+0x4aa>
 8009856:	2b60      	cmp	r3, #96	; 0x60
 8009858:	f200 82ec 	bhi.w	8009e34 <HAL_TIM_ConfigClockSource+0x6b8>
 800985c:	2b50      	cmp	r3, #80	; 0x50
 800985e:	f000 8182 	beq.w	8009b66 <HAL_TIM_ConfigClockSource+0x3ea>
 8009862:	2b50      	cmp	r3, #80	; 0x50
 8009864:	f200 82e6 	bhi.w	8009e34 <HAL_TIM_ConfigClockSource+0x6b8>
 8009868:	2b40      	cmp	r3, #64	; 0x40
 800986a:	f000 824d 	beq.w	8009d08 <HAL_TIM_ConfigClockSource+0x58c>
 800986e:	2b40      	cmp	r3, #64	; 0x40
 8009870:	f200 82e0 	bhi.w	8009e34 <HAL_TIM_ConfigClockSource+0x6b8>
 8009874:	2b30      	cmp	r3, #48	; 0x30
 8009876:	f000 82a7 	beq.w	8009dc8 <HAL_TIM_ConfigClockSource+0x64c>
 800987a:	2b30      	cmp	r3, #48	; 0x30
 800987c:	f200 82da 	bhi.w	8009e34 <HAL_TIM_ConfigClockSource+0x6b8>
 8009880:	2b20      	cmp	r3, #32
 8009882:	f000 82a1 	beq.w	8009dc8 <HAL_TIM_ConfigClockSource+0x64c>
 8009886:	2b20      	cmp	r3, #32
 8009888:	f200 82d4 	bhi.w	8009e34 <HAL_TIM_ConfigClockSource+0x6b8>
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 829b 	beq.w	8009dc8 <HAL_TIM_ConfigClockSource+0x64c>
 8009892:	2b10      	cmp	r3, #16
 8009894:	f000 8298 	beq.w	8009dc8 <HAL_TIM_ConfigClockSource+0x64c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009898:	e2cc      	b.n	8009e34 <HAL_TIM_ConfigClockSource+0x6b8>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a6c      	ldr	r2, [pc, #432]	; (8009a50 <HAL_TIM_ConfigClockSource+0x2d4>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	f000 82c9 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ae:	f000 82c3 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a67      	ldr	r2, [pc, #412]	; (8009a54 <HAL_TIM_ConfigClockSource+0x2d8>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	f000 82bd 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a65      	ldr	r2, [pc, #404]	; (8009a58 <HAL_TIM_ConfigClockSource+0x2dc>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	f000 82b7 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a63      	ldr	r2, [pc, #396]	; (8009a5c <HAL_TIM_ConfigClockSource+0x2e0>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	f000 82b1 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a61      	ldr	r2, [pc, #388]	; (8009a60 <HAL_TIM_ConfigClockSource+0x2e4>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	f000 82ab 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a5f      	ldr	r2, [pc, #380]	; (8009a64 <HAL_TIM_ConfigClockSource+0x2e8>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	f000 82a5 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a5d      	ldr	r2, [pc, #372]	; (8009a68 <HAL_TIM_ConfigClockSource+0x2ec>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	f000 829f 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a5b      	ldr	r2, [pc, #364]	; (8009a6c <HAL_TIM_ConfigClockSource+0x2f0>)
 8009900:	4293      	cmp	r3, r2
 8009902:	f000 8299 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a59      	ldr	r2, [pc, #356]	; (8009a70 <HAL_TIM_ConfigClockSource+0x2f4>)
 800990c:	4293      	cmp	r3, r2
 800990e:	f000 8293 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a57      	ldr	r2, [pc, #348]	; (8009a74 <HAL_TIM_ConfigClockSource+0x2f8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	f000 828d 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a55      	ldr	r2, [pc, #340]	; (8009a78 <HAL_TIM_ConfigClockSource+0x2fc>)
 8009924:	4293      	cmp	r3, r2
 8009926:	f000 8287 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a53      	ldr	r2, [pc, #332]	; (8009a7c <HAL_TIM_ConfigClockSource+0x300>)
 8009930:	4293      	cmp	r3, r2
 8009932:	f000 8281 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a51      	ldr	r2, [pc, #324]	; (8009a80 <HAL_TIM_ConfigClockSource+0x304>)
 800993c:	4293      	cmp	r3, r2
 800993e:	f000 827b 	beq.w	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
 8009942:	f241 1197 	movw	r1, #4503	; 0x1197
 8009946:	4841      	ldr	r0, [pc, #260]	; (8009a4c <HAL_TIM_ConfigClockSource+0x2d0>)
 8009948:	f7f9 f80d 	bl	8002966 <assert_failed>
      break;
 800994c:	e274      	b.n	8009e38 <HAL_TIM_ConfigClockSource+0x6bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a3f      	ldr	r2, [pc, #252]	; (8009a50 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d027      	beq.n	80099a8 <HAL_TIM_ConfigClockSource+0x22c>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009960:	d022      	beq.n	80099a8 <HAL_TIM_ConfigClockSource+0x22c>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a3b      	ldr	r2, [pc, #236]	; (8009a54 <HAL_TIM_ConfigClockSource+0x2d8>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d01d      	beq.n	80099a8 <HAL_TIM_ConfigClockSource+0x22c>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a39      	ldr	r2, [pc, #228]	; (8009a58 <HAL_TIM_ConfigClockSource+0x2dc>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d018      	beq.n	80099a8 <HAL_TIM_ConfigClockSource+0x22c>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a38      	ldr	r2, [pc, #224]	; (8009a5c <HAL_TIM_ConfigClockSource+0x2e0>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d013      	beq.n	80099a8 <HAL_TIM_ConfigClockSource+0x22c>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a38      	ldr	r2, [pc, #224]	; (8009a68 <HAL_TIM_ConfigClockSource+0x2ec>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d00e      	beq.n	80099a8 <HAL_TIM_ConfigClockSource+0x22c>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a37      	ldr	r2, [pc, #220]	; (8009a6c <HAL_TIM_ConfigClockSource+0x2f0>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d009      	beq.n	80099a8 <HAL_TIM_ConfigClockSource+0x22c>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a37      	ldr	r2, [pc, #220]	; (8009a78 <HAL_TIM_ConfigClockSource+0x2fc>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d004      	beq.n	80099a8 <HAL_TIM_ConfigClockSource+0x22c>
 800999e:	f241 119e 	movw	r1, #4510	; 0x119e
 80099a2:	482a      	ldr	r0, [pc, #168]	; (8009a4c <HAL_TIM_ConfigClockSource+0x2d0>)
 80099a4:	f7f8 ffdf 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d013      	beq.n	80099d8 <HAL_TIM_ConfigClockSource+0x25c>
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b8:	d00e      	beq.n	80099d8 <HAL_TIM_ConfigClockSource+0x25c>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c2:	d009      	beq.n	80099d8 <HAL_TIM_ConfigClockSource+0x25c>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099cc:	d004      	beq.n	80099d8 <HAL_TIM_ConfigClockSource+0x25c>
 80099ce:	f241 11a1 	movw	r1, #4513	; 0x11a1
 80099d2:	481e      	ldr	r0, [pc, #120]	; (8009a4c <HAL_TIM_ConfigClockSource+0x2d0>)
 80099d4:	f7f8 ffc7 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099e0:	d014      	beq.n	8009a0c <HAL_TIM_ConfigClockSource+0x290>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d010      	beq.n	8009a0c <HAL_TIM_ConfigClockSource+0x290>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00c      	beq.n	8009a0c <HAL_TIM_ConfigClockSource+0x290>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d008      	beq.n	8009a0c <HAL_TIM_ConfigClockSource+0x290>
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	2b0a      	cmp	r3, #10
 8009a00:	d004      	beq.n	8009a0c <HAL_TIM_ConfigClockSource+0x290>
 8009a02:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8009a06:	4811      	ldr	r0, [pc, #68]	; (8009a4c <HAL_TIM_ConfigClockSource+0x2d0>)
 8009a08:	f7f8 ffad 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	2b0f      	cmp	r3, #15
 8009a12:	d904      	bls.n	8009a1e <HAL_TIM_ConfigClockSource+0x2a2>
 8009a14:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8009a18:	480c      	ldr	r0, [pc, #48]	; (8009a4c <HAL_TIM_ConfigClockSource+0x2d0>)
 8009a1a:	f7f8 ffa4 	bl	8002966 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	6899      	ldr	r1, [r3, #8]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	f000 fe9f 	bl	800a770 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	609a      	str	r2, [r3, #8]
      break;
 8009a4a:	e1f6      	b.n	8009e3a <HAL_TIM_ConfigClockSource+0x6be>
 8009a4c:	0800be9c 	.word	0x0800be9c
 8009a50:	40010000 	.word	0x40010000
 8009a54:	40000400 	.word	0x40000400
 8009a58:	40000800 	.word	0x40000800
 8009a5c:	40000c00 	.word	0x40000c00
 8009a60:	40001000 	.word	0x40001000
 8009a64:	40001400 	.word	0x40001400
 8009a68:	40010400 	.word	0x40010400
 8009a6c:	40014000 	.word	0x40014000
 8009a70:	40014400 	.word	0x40014400
 8009a74:	40014800 	.word	0x40014800
 8009a78:	40001800 	.word	0x40001800
 8009a7c:	40001c00 	.word	0x40001c00
 8009a80:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a97      	ldr	r2, [pc, #604]	; (8009ce8 <HAL_TIM_ConfigClockSource+0x56c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d01d      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0x34e>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a96:	d018      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0x34e>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a93      	ldr	r2, [pc, #588]	; (8009cec <HAL_TIM_ConfigClockSource+0x570>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d013      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0x34e>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a92      	ldr	r2, [pc, #584]	; (8009cf0 <HAL_TIM_ConfigClockSource+0x574>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d00e      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0x34e>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a90      	ldr	r2, [pc, #576]	; (8009cf4 <HAL_TIM_ConfigClockSource+0x578>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d009      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0x34e>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a8f      	ldr	r2, [pc, #572]	; (8009cf8 <HAL_TIM_ConfigClockSource+0x57c>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d004      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0x34e>
 8009ac0:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8009ac4:	488d      	ldr	r0, [pc, #564]	; (8009cfc <HAL_TIM_ConfigClockSource+0x580>)
 8009ac6:	f7f8 ff4e 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d013      	beq.n	8009afa <HAL_TIM_ConfigClockSource+0x37e>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ada:	d00e      	beq.n	8009afa <HAL_TIM_ConfigClockSource+0x37e>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ae4:	d009      	beq.n	8009afa <HAL_TIM_ConfigClockSource+0x37e>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009aee:	d004      	beq.n	8009afa <HAL_TIM_ConfigClockSource+0x37e>
 8009af0:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8009af4:	4881      	ldr	r0, [pc, #516]	; (8009cfc <HAL_TIM_ConfigClockSource+0x580>)
 8009af6:	f7f8 ff36 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b02:	d014      	beq.n	8009b2e <HAL_TIM_ConfigClockSource+0x3b2>
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d010      	beq.n	8009b2e <HAL_TIM_ConfigClockSource+0x3b2>
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00c      	beq.n	8009b2e <HAL_TIM_ConfigClockSource+0x3b2>
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d008      	beq.n	8009b2e <HAL_TIM_ConfigClockSource+0x3b2>
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	2b0a      	cmp	r3, #10
 8009b22:	d004      	beq.n	8009b2e <HAL_TIM_ConfigClockSource+0x3b2>
 8009b24:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8009b28:	4874      	ldr	r0, [pc, #464]	; (8009cfc <HAL_TIM_ConfigClockSource+0x580>)
 8009b2a:	f7f8 ff1c 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	2b0f      	cmp	r3, #15
 8009b34:	d904      	bls.n	8009b40 <HAL_TIM_ConfigClockSource+0x3c4>
 8009b36:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8009b3a:	4870      	ldr	r0, [pc, #448]	; (8009cfc <HAL_TIM_ConfigClockSource+0x580>)
 8009b3c:	f7f8 ff13 	bl	8002966 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6818      	ldr	r0, [r3, #0]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	6899      	ldr	r1, [r3, #8]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	f000 fe0e 	bl	800a770 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	689a      	ldr	r2, [r3, #8]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b62:	609a      	str	r2, [r3, #8]
      break;
 8009b64:	e169      	b.n	8009e3a <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a5f      	ldr	r2, [pc, #380]	; (8009ce8 <HAL_TIM_ConfigClockSource+0x56c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d027      	beq.n	8009bc0 <HAL_TIM_ConfigClockSource+0x444>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b78:	d022      	beq.n	8009bc0 <HAL_TIM_ConfigClockSource+0x444>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a5b      	ldr	r2, [pc, #364]	; (8009cec <HAL_TIM_ConfigClockSource+0x570>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d01d      	beq.n	8009bc0 <HAL_TIM_ConfigClockSource+0x444>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a59      	ldr	r2, [pc, #356]	; (8009cf0 <HAL_TIM_ConfigClockSource+0x574>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d018      	beq.n	8009bc0 <HAL_TIM_ConfigClockSource+0x444>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a58      	ldr	r2, [pc, #352]	; (8009cf4 <HAL_TIM_ConfigClockSource+0x578>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d013      	beq.n	8009bc0 <HAL_TIM_ConfigClockSource+0x444>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a56      	ldr	r2, [pc, #344]	; (8009cf8 <HAL_TIM_ConfigClockSource+0x57c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d00e      	beq.n	8009bc0 <HAL_TIM_ConfigClockSource+0x444>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a56      	ldr	r2, [pc, #344]	; (8009d00 <HAL_TIM_ConfigClockSource+0x584>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d009      	beq.n	8009bc0 <HAL_TIM_ConfigClockSource+0x444>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a54      	ldr	r2, [pc, #336]	; (8009d04 <HAL_TIM_ConfigClockSource+0x588>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d004      	beq.n	8009bc0 <HAL_TIM_ConfigClockSource+0x444>
 8009bb6:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8009bba:	4850      	ldr	r0, [pc, #320]	; (8009cfc <HAL_TIM_ConfigClockSource+0x580>)
 8009bbc:	f7f8 fed3 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bc8:	d014      	beq.n	8009bf4 <HAL_TIM_ConfigClockSource+0x478>
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d010      	beq.n	8009bf4 <HAL_TIM_ConfigClockSource+0x478>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00c      	beq.n	8009bf4 <HAL_TIM_ConfigClockSource+0x478>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d008      	beq.n	8009bf4 <HAL_TIM_ConfigClockSource+0x478>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	2b0a      	cmp	r3, #10
 8009be8:	d004      	beq.n	8009bf4 <HAL_TIM_ConfigClockSource+0x478>
 8009bea:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8009bee:	4843      	ldr	r0, [pc, #268]	; (8009cfc <HAL_TIM_ConfigClockSource+0x580>)
 8009bf0:	f7f8 feb9 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	2b0f      	cmp	r3, #15
 8009bfa:	d904      	bls.n	8009c06 <HAL_TIM_ConfigClockSource+0x48a>
 8009bfc:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8009c00:	483e      	ldr	r0, [pc, #248]	; (8009cfc <HAL_TIM_ConfigClockSource+0x580>)
 8009c02:	f7f8 feb0 	bl	8002966 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6818      	ldr	r0, [r3, #0]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	6859      	ldr	r1, [r3, #4]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	461a      	mov	r2, r3
 8009c14:	f000 fc7c 	bl	800a510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2150      	movs	r1, #80	; 0x50
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fd8b 	bl	800a73a <TIM_ITRx_SetConfig>
      break;
 8009c24:	e109      	b.n	8009e3a <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a2f      	ldr	r2, [pc, #188]	; (8009ce8 <HAL_TIM_ConfigClockSource+0x56c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d027      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x504>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c38:	d022      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x504>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a2b      	ldr	r2, [pc, #172]	; (8009cec <HAL_TIM_ConfigClockSource+0x570>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d01d      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x504>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a29      	ldr	r2, [pc, #164]	; (8009cf0 <HAL_TIM_ConfigClockSource+0x574>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d018      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x504>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a28      	ldr	r2, [pc, #160]	; (8009cf4 <HAL_TIM_ConfigClockSource+0x578>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d013      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x504>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a26      	ldr	r2, [pc, #152]	; (8009cf8 <HAL_TIM_ConfigClockSource+0x57c>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d00e      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x504>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a26      	ldr	r2, [pc, #152]	; (8009d00 <HAL_TIM_ConfigClockSource+0x584>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d009      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x504>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a24      	ldr	r2, [pc, #144]	; (8009d04 <HAL_TIM_ConfigClockSource+0x588>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d004      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0x504>
 8009c76:	f241 11da 	movw	r1, #4570	; 0x11da
 8009c7a:	4820      	ldr	r0, [pc, #128]	; (8009cfc <HAL_TIM_ConfigClockSource+0x580>)
 8009c7c:	f7f8 fe73 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c88:	d014      	beq.n	8009cb4 <HAL_TIM_ConfigClockSource+0x538>
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d010      	beq.n	8009cb4 <HAL_TIM_ConfigClockSource+0x538>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00c      	beq.n	8009cb4 <HAL_TIM_ConfigClockSource+0x538>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d008      	beq.n	8009cb4 <HAL_TIM_ConfigClockSource+0x538>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2b0a      	cmp	r3, #10
 8009ca8:	d004      	beq.n	8009cb4 <HAL_TIM_ConfigClockSource+0x538>
 8009caa:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8009cae:	4813      	ldr	r0, [pc, #76]	; (8009cfc <HAL_TIM_ConfigClockSource+0x580>)
 8009cb0:	f7f8 fe59 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	2b0f      	cmp	r3, #15
 8009cba:	d904      	bls.n	8009cc6 <HAL_TIM_ConfigClockSource+0x54a>
 8009cbc:	f241 11de 	movw	r1, #4574	; 0x11de
 8009cc0:	480e      	ldr	r0, [pc, #56]	; (8009cfc <HAL_TIM_ConfigClockSource+0x580>)
 8009cc2:	f7f8 fe50 	bl	8002966 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6818      	ldr	r0, [r3, #0]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	6859      	ldr	r1, [r3, #4]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f000 fc88 	bl	800a5e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2160      	movs	r1, #96	; 0x60
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fd2b 	bl	800a73a <TIM_ITRx_SetConfig>
      break;
 8009ce4:	e0a9      	b.n	8009e3a <HAL_TIM_ConfigClockSource+0x6be>
 8009ce6:	bf00      	nop
 8009ce8:	40010000 	.word	0x40010000
 8009cec:	40000400 	.word	0x40000400
 8009cf0:	40000800 	.word	0x40000800
 8009cf4:	40000c00 	.word	0x40000c00
 8009cf8:	40010400 	.word	0x40010400
 8009cfc:	0800be9c 	.word	0x0800be9c
 8009d00:	40014000 	.word	0x40014000
 8009d04:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a51      	ldr	r2, [pc, #324]	; (8009e54 <HAL_TIM_ConfigClockSource+0x6d8>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d027      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0x5e6>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d1a:	d022      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0x5e6>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a4d      	ldr	r2, [pc, #308]	; (8009e58 <HAL_TIM_ConfigClockSource+0x6dc>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d01d      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0x5e6>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a4c      	ldr	r2, [pc, #304]	; (8009e5c <HAL_TIM_ConfigClockSource+0x6e0>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d018      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0x5e6>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a4a      	ldr	r2, [pc, #296]	; (8009e60 <HAL_TIM_ConfigClockSource+0x6e4>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d013      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0x5e6>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a49      	ldr	r2, [pc, #292]	; (8009e64 <HAL_TIM_ConfigClockSource+0x6e8>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00e      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0x5e6>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a47      	ldr	r2, [pc, #284]	; (8009e68 <HAL_TIM_ConfigClockSource+0x6ec>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d009      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0x5e6>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a46      	ldr	r2, [pc, #280]	; (8009e6c <HAL_TIM_ConfigClockSource+0x6f0>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d004      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0x5e6>
 8009d58:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8009d5c:	4844      	ldr	r0, [pc, #272]	; (8009e70 <HAL_TIM_ConfigClockSource+0x6f4>)
 8009d5e:	f7f8 fe02 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d6a:	d014      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0x61a>
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d010      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0x61a>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00c      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0x61a>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d008      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0x61a>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2b0a      	cmp	r3, #10
 8009d8a:	d004      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0x61a>
 8009d8c:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8009d90:	4837      	ldr	r0, [pc, #220]	; (8009e70 <HAL_TIM_ConfigClockSource+0x6f4>)
 8009d92:	f7f8 fde8 	bl	8002966 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	2b0f      	cmp	r3, #15
 8009d9c:	d904      	bls.n	8009da8 <HAL_TIM_ConfigClockSource+0x62c>
 8009d9e:	f241 11ee 	movw	r1, #4590	; 0x11ee
 8009da2:	4833      	ldr	r0, [pc, #204]	; (8009e70 <HAL_TIM_ConfigClockSource+0x6f4>)
 8009da4:	f7f8 fddf 	bl	8002966 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6818      	ldr	r0, [r3, #0]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	6859      	ldr	r1, [r3, #4]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	461a      	mov	r2, r3
 8009db6:	f000 fbab 	bl	800a510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2140      	movs	r1, #64	; 0x40
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 fcba 	bl	800a73a <TIM_ITRx_SetConfig>
      break;
 8009dc6:	e038      	b.n	8009e3a <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a21      	ldr	r2, [pc, #132]	; (8009e54 <HAL_TIM_ConfigClockSource+0x6d8>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d027      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x6a6>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dda:	d022      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x6a6>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a1d      	ldr	r2, [pc, #116]	; (8009e58 <HAL_TIM_ConfigClockSource+0x6dc>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d01d      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x6a6>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a1c      	ldr	r2, [pc, #112]	; (8009e5c <HAL_TIM_ConfigClockSource+0x6e0>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d018      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x6a6>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a1a      	ldr	r2, [pc, #104]	; (8009e60 <HAL_TIM_ConfigClockSource+0x6e4>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d013      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x6a6>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a19      	ldr	r2, [pc, #100]	; (8009e64 <HAL_TIM_ConfigClockSource+0x6e8>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d00e      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x6a6>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a17      	ldr	r2, [pc, #92]	; (8009e68 <HAL_TIM_ConfigClockSource+0x6ec>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d009      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x6a6>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a16      	ldr	r2, [pc, #88]	; (8009e6c <HAL_TIM_ConfigClockSource+0x6f0>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d004      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x6a6>
 8009e18:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8009e1c:	4814      	ldr	r0, [pc, #80]	; (8009e70 <HAL_TIM_ConfigClockSource+0x6f4>)
 8009e1e:	f7f8 fda2 	bl	8002966 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	f000 fc84 	bl	800a73a <TIM_ITRx_SetConfig>
      break;
 8009e32:	e002      	b.n	8009e3a <HAL_TIM_ConfigClockSource+0x6be>
      break;
 8009e34:	bf00      	nop
 8009e36:	e000      	b.n	8009e3a <HAL_TIM_ConfigClockSource+0x6be>
      break;
 8009e38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	40010000 	.word	0x40010000
 8009e58:	40000400 	.word	0x40000400
 8009e5c:	40000800 	.word	0x40000800
 8009e60:	40000c00 	.word	0x40000c00
 8009e64:	40010400 	.word	0x40010400
 8009e68:	40014000 	.word	0x40014000
 8009e6c:	40001800 	.word	0x40001800
 8009e70:	0800be9c 	.word	0x0800be9c

08009e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a40      	ldr	r2, [pc, #256]	; (8009f88 <TIM_Base_SetConfig+0x114>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d013      	beq.n	8009eb4 <TIM_Base_SetConfig+0x40>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e92:	d00f      	beq.n	8009eb4 <TIM_Base_SetConfig+0x40>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a3d      	ldr	r2, [pc, #244]	; (8009f8c <TIM_Base_SetConfig+0x118>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d00b      	beq.n	8009eb4 <TIM_Base_SetConfig+0x40>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a3c      	ldr	r2, [pc, #240]	; (8009f90 <TIM_Base_SetConfig+0x11c>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d007      	beq.n	8009eb4 <TIM_Base_SetConfig+0x40>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a3b      	ldr	r2, [pc, #236]	; (8009f94 <TIM_Base_SetConfig+0x120>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d003      	beq.n	8009eb4 <TIM_Base_SetConfig+0x40>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a3a      	ldr	r2, [pc, #232]	; (8009f98 <TIM_Base_SetConfig+0x124>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d108      	bne.n	8009ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a2f      	ldr	r2, [pc, #188]	; (8009f88 <TIM_Base_SetConfig+0x114>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d02b      	beq.n	8009f26 <TIM_Base_SetConfig+0xb2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ed4:	d027      	beq.n	8009f26 <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a2c      	ldr	r2, [pc, #176]	; (8009f8c <TIM_Base_SetConfig+0x118>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d023      	beq.n	8009f26 <TIM_Base_SetConfig+0xb2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a2b      	ldr	r2, [pc, #172]	; (8009f90 <TIM_Base_SetConfig+0x11c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d01f      	beq.n	8009f26 <TIM_Base_SetConfig+0xb2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a2a      	ldr	r2, [pc, #168]	; (8009f94 <TIM_Base_SetConfig+0x120>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d01b      	beq.n	8009f26 <TIM_Base_SetConfig+0xb2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a29      	ldr	r2, [pc, #164]	; (8009f98 <TIM_Base_SetConfig+0x124>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d017      	beq.n	8009f26 <TIM_Base_SetConfig+0xb2>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a28      	ldr	r2, [pc, #160]	; (8009f9c <TIM_Base_SetConfig+0x128>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d013      	beq.n	8009f26 <TIM_Base_SetConfig+0xb2>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a27      	ldr	r2, [pc, #156]	; (8009fa0 <TIM_Base_SetConfig+0x12c>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00f      	beq.n	8009f26 <TIM_Base_SetConfig+0xb2>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a26      	ldr	r2, [pc, #152]	; (8009fa4 <TIM_Base_SetConfig+0x130>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d00b      	beq.n	8009f26 <TIM_Base_SetConfig+0xb2>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a25      	ldr	r2, [pc, #148]	; (8009fa8 <TIM_Base_SetConfig+0x134>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d007      	beq.n	8009f26 <TIM_Base_SetConfig+0xb2>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a24      	ldr	r2, [pc, #144]	; (8009fac <TIM_Base_SetConfig+0x138>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d003      	beq.n	8009f26 <TIM_Base_SetConfig+0xb2>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a23      	ldr	r2, [pc, #140]	; (8009fb0 <TIM_Base_SetConfig+0x13c>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d108      	bne.n	8009f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	689a      	ldr	r2, [r3, #8]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a0a      	ldr	r2, [pc, #40]	; (8009f88 <TIM_Base_SetConfig+0x114>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d003      	beq.n	8009f6c <TIM_Base_SetConfig+0xf8>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a0c      	ldr	r2, [pc, #48]	; (8009f98 <TIM_Base_SetConfig+0x124>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d103      	bne.n	8009f74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	691a      	ldr	r2, [r3, #16]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	615a      	str	r2, [r3, #20]
}
 8009f7a:	bf00      	nop
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	40010000 	.word	0x40010000
 8009f8c:	40000400 	.word	0x40000400
 8009f90:	40000800 	.word	0x40000800
 8009f94:	40000c00 	.word	0x40000c00
 8009f98:	40010400 	.word	0x40010400
 8009f9c:	40014000 	.word	0x40014000
 8009fa0:	40014400 	.word	0x40014400
 8009fa4:	40014800 	.word	0x40014800
 8009fa8:	40001800 	.word	0x40001800
 8009fac:	40001c00 	.word	0x40001c00
 8009fb0:	40002000 	.word	0x40002000

08009fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	f023 0201 	bic.w	r2, r3, #1
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0303 	bic.w	r3, r3, #3
 8009fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	f023 0302 	bic.w	r3, r3, #2
 8009ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	4313      	orrs	r3, r2
 800a006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a34      	ldr	r2, [pc, #208]	; (800a0dc <TIM_OC1_SetConfig+0x128>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d003      	beq.n	800a018 <TIM_OC1_SetConfig+0x64>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a33      	ldr	r2, [pc, #204]	; (800a0e0 <TIM_OC1_SetConfig+0x12c>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d119      	bne.n	800a04c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d008      	beq.n	800a032 <TIM_OC1_SetConfig+0x7e>
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	2b08      	cmp	r3, #8
 800a026:	d004      	beq.n	800a032 <TIM_OC1_SetConfig+0x7e>
 800a028:	f241 7102 	movw	r1, #5890	; 0x1702
 800a02c:	482d      	ldr	r0, [pc, #180]	; (800a0e4 <TIM_OC1_SetConfig+0x130>)
 800a02e:	f7f8 fc9a 	bl	8002966 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	f023 0308 	bic.w	r3, r3, #8
 800a038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	4313      	orrs	r3, r2
 800a042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f023 0304 	bic.w	r3, r3, #4
 800a04a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a23      	ldr	r2, [pc, #140]	; (800a0dc <TIM_OC1_SetConfig+0x128>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d003      	beq.n	800a05c <TIM_OC1_SetConfig+0xa8>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a22      	ldr	r2, [pc, #136]	; (800a0e0 <TIM_OC1_SetConfig+0x12c>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d12d      	bne.n	800a0b8 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a064:	d008      	beq.n	800a078 <TIM_OC1_SetConfig+0xc4>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d004      	beq.n	800a078 <TIM_OC1_SetConfig+0xc4>
 800a06e:	f241 710f 	movw	r1, #5903	; 0x170f
 800a072:	481c      	ldr	r0, [pc, #112]	; (800a0e4 <TIM_OC1_SetConfig+0x130>)
 800a074:	f7f8 fc77 	bl	8002966 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a080:	d008      	beq.n	800a094 <TIM_OC1_SetConfig+0xe0>
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d004      	beq.n	800a094 <TIM_OC1_SetConfig+0xe0>
 800a08a:	f241 7110 	movw	r1, #5904	; 0x1710
 800a08e:	4815      	ldr	r0, [pc, #84]	; (800a0e4 <TIM_OC1_SetConfig+0x130>)
 800a090:	f7f8 fc69 	bl	8002966 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a09a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	695b      	ldr	r3, [r3, #20]
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	693a      	ldr	r2, [r7, #16]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	621a      	str	r2, [r3, #32]
}
 800a0d2:	bf00      	nop
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	40010000 	.word	0x40010000
 800a0e0:	40010400 	.word	0x40010400
 800a0e4:	0800be9c 	.word	0x0800be9c

0800a0e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	f023 0210 	bic.w	r2, r3, #16
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a1b      	ldr	r3, [r3, #32]
 800a102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a11e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	021b      	lsls	r3, r3, #8
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	4313      	orrs	r3, r2
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f023 0320 	bic.w	r3, r3, #32
 800a132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a35      	ldr	r2, [pc, #212]	; (800a218 <TIM_OC2_SetConfig+0x130>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d003      	beq.n	800a150 <TIM_OC2_SetConfig+0x68>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a34      	ldr	r2, [pc, #208]	; (800a21c <TIM_OC2_SetConfig+0x134>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d11a      	bne.n	800a186 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d008      	beq.n	800a16a <TIM_OC2_SetConfig+0x82>
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	2b08      	cmp	r3, #8
 800a15e:	d004      	beq.n	800a16a <TIM_OC2_SetConfig+0x82>
 800a160:	f241 714d 	movw	r1, #5965	; 0x174d
 800a164:	482e      	ldr	r0, [pc, #184]	; (800a220 <TIM_OC2_SetConfig+0x138>)
 800a166:	f7f8 fbfe 	bl	8002966 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	011b      	lsls	r3, r3, #4
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a184:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a23      	ldr	r2, [pc, #140]	; (800a218 <TIM_OC2_SetConfig+0x130>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d003      	beq.n	800a196 <TIM_OC2_SetConfig+0xae>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a22      	ldr	r2, [pc, #136]	; (800a21c <TIM_OC2_SetConfig+0x134>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d12f      	bne.n	800a1f6 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a19e:	d008      	beq.n	800a1b2 <TIM_OC2_SetConfig+0xca>
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d004      	beq.n	800a1b2 <TIM_OC2_SetConfig+0xca>
 800a1a8:	f241 715b 	movw	r1, #5979	; 0x175b
 800a1ac:	481c      	ldr	r0, [pc, #112]	; (800a220 <TIM_OC2_SetConfig+0x138>)
 800a1ae:	f7f8 fbda 	bl	8002966 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	695b      	ldr	r3, [r3, #20]
 800a1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ba:	d008      	beq.n	800a1ce <TIM_OC2_SetConfig+0xe6>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d004      	beq.n	800a1ce <TIM_OC2_SetConfig+0xe6>
 800a1c4:	f241 715c 	movw	r1, #5980	; 0x175c
 800a1c8:	4815      	ldr	r0, [pc, #84]	; (800a220 <TIM_OC2_SetConfig+0x138>)
 800a1ca:	f7f8 fbcc 	bl	8002966 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	685a      	ldr	r2, [r3, #4]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	621a      	str	r2, [r3, #32]
}
 800a210:	bf00      	nop
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	40010000 	.word	0x40010000
 800a21c:	40010400 	.word	0x40010400
 800a220:	0800be9c 	.word	0x0800be9c

0800a224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f023 0303 	bic.w	r3, r3, #3
 800a25a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	4313      	orrs	r3, r2
 800a264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a26c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	021b      	lsls	r3, r3, #8
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	4313      	orrs	r3, r2
 800a278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a35      	ldr	r2, [pc, #212]	; (800a354 <TIM_OC3_SetConfig+0x130>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d003      	beq.n	800a28a <TIM_OC3_SetConfig+0x66>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a34      	ldr	r2, [pc, #208]	; (800a358 <TIM_OC3_SetConfig+0x134>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d11a      	bne.n	800a2c0 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d008      	beq.n	800a2a4 <TIM_OC3_SetConfig+0x80>
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	2b08      	cmp	r3, #8
 800a298:	d004      	beq.n	800a2a4 <TIM_OC3_SetConfig+0x80>
 800a29a:	f241 7198 	movw	r1, #6040	; 0x1798
 800a29e:	482f      	ldr	r0, [pc, #188]	; (800a35c <TIM_OC3_SetConfig+0x138>)
 800a2a0:	f7f8 fb61 	bl	8002966 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	021b      	lsls	r3, r3, #8
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a24      	ldr	r2, [pc, #144]	; (800a354 <TIM_OC3_SetConfig+0x130>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d003      	beq.n	800a2d0 <TIM_OC3_SetConfig+0xac>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a23      	ldr	r2, [pc, #140]	; (800a358 <TIM_OC3_SetConfig+0x134>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d12f      	bne.n	800a330 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2d8:	d008      	beq.n	800a2ec <TIM_OC3_SetConfig+0xc8>
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d004      	beq.n	800a2ec <TIM_OC3_SetConfig+0xc8>
 800a2e2:	f241 71a5 	movw	r1, #6053	; 0x17a5
 800a2e6:	481d      	ldr	r0, [pc, #116]	; (800a35c <TIM_OC3_SetConfig+0x138>)
 800a2e8:	f7f8 fb3d 	bl	8002966 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2f4:	d008      	beq.n	800a308 <TIM_OC3_SetConfig+0xe4>
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <TIM_OC3_SetConfig+0xe4>
 800a2fe:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800a302:	4816      	ldr	r0, [pc, #88]	; (800a35c <TIM_OC3_SetConfig+0x138>)
 800a304:	f7f8 fb2f 	bl	8002966 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a30e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	011b      	lsls	r3, r3, #4
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	4313      	orrs	r3, r2
 800a322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	011b      	lsls	r3, r3, #4
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	697a      	ldr	r2, [r7, #20]
 800a348:	621a      	str	r2, [r3, #32]
}
 800a34a:	bf00      	nop
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	40010000 	.word	0x40010000
 800a358:	40010400 	.word	0x40010400
 800a35c:	0800be9c 	.word	0x0800be9c

0800a360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	021b      	lsls	r3, r3, #8
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	031b      	lsls	r3, r3, #12
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a18      	ldr	r2, [pc, #96]	; (800a41c <TIM_OC4_SetConfig+0xbc>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d003      	beq.n	800a3c8 <TIM_OC4_SetConfig+0x68>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a17      	ldr	r2, [pc, #92]	; (800a420 <TIM_OC4_SetConfig+0xc0>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d117      	bne.n	800a3f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d0:	d008      	beq.n	800a3e4 <TIM_OC4_SetConfig+0x84>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d004      	beq.n	800a3e4 <TIM_OC4_SetConfig+0x84>
 800a3da:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800a3de:	4811      	ldr	r0, [pc, #68]	; (800a424 <TIM_OC4_SetConfig+0xc4>)
 800a3e0:	f7f8 fac1 	bl	8002966 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	695b      	ldr	r3, [r3, #20]
 800a3f0:	019b      	lsls	r3, r3, #6
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	697a      	ldr	r2, [r7, #20]
 800a3fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	621a      	str	r2, [r3, #32]
}
 800a412:	bf00      	nop
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	40010000 	.word	0x40010000
 800a420:	40010400 	.word	0x40010400
 800a424:	0800be9c 	.word	0x0800be9c

0800a428 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
 800a434:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	f023 0201 	bic.w	r2, r3, #1
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6a1b      	ldr	r3, [r3, #32]
 800a44c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4a28      	ldr	r2, [pc, #160]	; (800a4f4 <TIM_TI1_SetConfig+0xcc>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d01b      	beq.n	800a48e <TIM_TI1_SetConfig+0x66>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a45c:	d017      	beq.n	800a48e <TIM_TI1_SetConfig+0x66>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	4a25      	ldr	r2, [pc, #148]	; (800a4f8 <TIM_TI1_SetConfig+0xd0>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d013      	beq.n	800a48e <TIM_TI1_SetConfig+0x66>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	4a24      	ldr	r2, [pc, #144]	; (800a4fc <TIM_TI1_SetConfig+0xd4>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d00f      	beq.n	800a48e <TIM_TI1_SetConfig+0x66>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	4a23      	ldr	r2, [pc, #140]	; (800a500 <TIM_TI1_SetConfig+0xd8>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d00b      	beq.n	800a48e <TIM_TI1_SetConfig+0x66>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4a22      	ldr	r2, [pc, #136]	; (800a504 <TIM_TI1_SetConfig+0xdc>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d007      	beq.n	800a48e <TIM_TI1_SetConfig+0x66>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	4a21      	ldr	r2, [pc, #132]	; (800a508 <TIM_TI1_SetConfig+0xe0>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d003      	beq.n	800a48e <TIM_TI1_SetConfig+0x66>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	4a20      	ldr	r2, [pc, #128]	; (800a50c <TIM_TI1_SetConfig+0xe4>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d101      	bne.n	800a492 <TIM_TI1_SetConfig+0x6a>
 800a48e:	2301      	movs	r3, #1
 800a490:	e000      	b.n	800a494 <TIM_TI1_SetConfig+0x6c>
 800a492:	2300      	movs	r3, #0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d008      	beq.n	800a4aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	f023 0303 	bic.w	r3, r3, #3
 800a49e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	e003      	b.n	800a4b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f043 0301 	orr.w	r3, r3, #1
 800a4b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	011b      	lsls	r3, r3, #4
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	f023 030a 	bic.w	r3, r3, #10
 800a4cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	f003 030a 	and.w	r3, r3, #10
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	621a      	str	r2, [r3, #32]
}
 800a4e6:	bf00      	nop
 800a4e8:	371c      	adds	r7, #28
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	40010000 	.word	0x40010000
 800a4f8:	40000400 	.word	0x40000400
 800a4fc:	40000800 	.word	0x40000800
 800a500:	40000c00 	.word	0x40000c00
 800a504:	40010400 	.word	0x40010400
 800a508:	40014000 	.word	0x40014000
 800a50c:	40001800 	.word	0x40001800

0800a510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	f023 0201 	bic.w	r2, r3, #1
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a53a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	011b      	lsls	r3, r3, #4
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	4313      	orrs	r3, r2
 800a544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f023 030a 	bic.w	r3, r3, #10
 800a54c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	4313      	orrs	r3, r2
 800a554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	697a      	ldr	r2, [r7, #20]
 800a560:	621a      	str	r2, [r3, #32]
}
 800a562:	bf00      	nop
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a56e:	b480      	push	{r7}
 800a570:	b087      	sub	sp, #28
 800a572:	af00      	add	r7, sp, #0
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	60b9      	str	r1, [r7, #8]
 800a578:	607a      	str	r2, [r7, #4]
 800a57a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	f023 0210 	bic.w	r2, r3, #16
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a59a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	021b      	lsls	r3, r3, #8
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	031b      	lsls	r3, r3, #12
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	011b      	lsls	r3, r3, #4
 800a5c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	621a      	str	r2, [r3, #32]
}
 800a5dc:	bf00      	nop
 800a5de:	371c      	adds	r7, #28
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	f023 0210 	bic.w	r2, r3, #16
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6a1b      	ldr	r3, [r3, #32]
 800a60a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a612:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	031b      	lsls	r3, r3, #12
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a624:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	011b      	lsls	r3, r3, #4
 800a62a:	693a      	ldr	r2, [r7, #16]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	621a      	str	r2, [r3, #32]
}
 800a63c:	bf00      	nop
 800a63e:	371c      	adds	r7, #28
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6a1b      	ldr	r3, [r3, #32]
 800a65a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6a1b      	ldr	r3, [r3, #32]
 800a66c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	f023 0303 	bic.w	r3, r3, #3
 800a674:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a684:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	011b      	lsls	r3, r3, #4
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	4313      	orrs	r3, r2
 800a690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a698:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	021b      	lsls	r3, r3, #8
 800a69e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	621a      	str	r2, [r3, #32]
}
 800a6b4:	bf00      	nop
 800a6b6:	371c      	adds	r7, #28
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	69db      	ldr	r3, [r3, #28]
 800a6de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	021b      	lsls	r3, r3, #8
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	031b      	lsls	r3, r3, #12
 800a704:	b29b      	uxth	r3, r3
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	4313      	orrs	r3, r2
 800a70a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a712:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	031b      	lsls	r3, r3, #12
 800a718:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	4313      	orrs	r3, r2
 800a720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	621a      	str	r2, [r3, #32]
}
 800a72e:	bf00      	nop
 800a730:	371c      	adds	r7, #28
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a73a:	b480      	push	{r7}
 800a73c:	b085      	sub	sp, #20
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4313      	orrs	r3, r2
 800a758:	f043 0307 	orr.w	r3, r3, #7
 800a75c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	609a      	str	r2, [r3, #8]
}
 800a764:	bf00      	nop
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a770:	b480      	push	{r7}
 800a772:	b087      	sub	sp, #28
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
 800a77c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a78a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	021a      	lsls	r2, r3, #8
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	431a      	orrs	r2, r3
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	4313      	orrs	r3, r2
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	609a      	str	r2, [r3, #8]
}
 800a7a4:	bf00      	nop
 800a7a6:	371c      	adds	r7, #28
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	4a32      	ldr	r2, [pc, #200]	; (800a888 <TIM_CCxChannelCmd+0xd8>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d030      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ca:	d02c      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4a2f      	ldr	r2, [pc, #188]	; (800a88c <TIM_CCxChannelCmd+0xdc>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d028      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4a2e      	ldr	r2, [pc, #184]	; (800a890 <TIM_CCxChannelCmd+0xe0>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d024      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4a2d      	ldr	r2, [pc, #180]	; (800a894 <TIM_CCxChannelCmd+0xe4>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d020      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	4a2c      	ldr	r2, [pc, #176]	; (800a898 <TIM_CCxChannelCmd+0xe8>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d01c      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	4a2b      	ldr	r2, [pc, #172]	; (800a89c <TIM_CCxChannelCmd+0xec>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d018      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4a2a      	ldr	r2, [pc, #168]	; (800a8a0 <TIM_CCxChannelCmd+0xf0>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d014      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	4a29      	ldr	r2, [pc, #164]	; (800a8a4 <TIM_CCxChannelCmd+0xf4>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d010      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	4a28      	ldr	r2, [pc, #160]	; (800a8a8 <TIM_CCxChannelCmd+0xf8>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d00c      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	4a27      	ldr	r2, [pc, #156]	; (800a8ac <TIM_CCxChannelCmd+0xfc>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d008      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4a26      	ldr	r2, [pc, #152]	; (800a8b0 <TIM_CCxChannelCmd+0x100>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d004      	beq.n	800a826 <TIM_CCxChannelCmd+0x76>
 800a81c:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800a820:	4824      	ldr	r0, [pc, #144]	; (800a8b4 <TIM_CCxChannelCmd+0x104>)
 800a822:	f7f8 f8a0 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d010      	beq.n	800a84e <TIM_CCxChannelCmd+0x9e>
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d00d      	beq.n	800a84e <TIM_CCxChannelCmd+0x9e>
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b08      	cmp	r3, #8
 800a836:	d00a      	beq.n	800a84e <TIM_CCxChannelCmd+0x9e>
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	2b0c      	cmp	r3, #12
 800a83c:	d007      	beq.n	800a84e <TIM_CCxChannelCmd+0x9e>
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b3c      	cmp	r3, #60	; 0x3c
 800a842:	d004      	beq.n	800a84e <TIM_CCxChannelCmd+0x9e>
 800a844:	f641 11cd 	movw	r1, #6605	; 0x19cd
 800a848:	481a      	ldr	r0, [pc, #104]	; (800a8b4 <TIM_CCxChannelCmd+0x104>)
 800a84a:	f7f8 f88c 	bl	8002966 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f003 031f 	and.w	r3, r3, #31
 800a854:	2201      	movs	r2, #1
 800a856:	fa02 f303 	lsl.w	r3, r2, r3
 800a85a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6a1a      	ldr	r2, [r3, #32]
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	43db      	mvns	r3, r3
 800a864:	401a      	ands	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6a1a      	ldr	r2, [r3, #32]
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	f003 031f 	and.w	r3, r3, #31
 800a874:	6879      	ldr	r1, [r7, #4]
 800a876:	fa01 f303 	lsl.w	r3, r1, r3
 800a87a:	431a      	orrs	r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	621a      	str	r2, [r3, #32]
}
 800a880:	bf00      	nop
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	40010000 	.word	0x40010000
 800a88c:	40000400 	.word	0x40000400
 800a890:	40000800 	.word	0x40000800
 800a894:	40000c00 	.word	0x40000c00
 800a898:	40010400 	.word	0x40010400
 800a89c:	40014000 	.word	0x40014000
 800a8a0:	40014400 	.word	0x40014400
 800a8a4:	40014800 	.word	0x40014800
 800a8a8:	40001800 	.word	0x40001800
 800a8ac:	40001c00 	.word	0x40001c00
 800a8b0:	40002000 	.word	0x40002000
 800a8b4:	0800be9c 	.word	0x0800be9c

0800a8b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a61      	ldr	r2, [pc, #388]	; (800aa4c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d027      	beq.n	800a91c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8d4:	d022      	beq.n	800a91c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a5d      	ldr	r2, [pc, #372]	; (800aa50 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d01d      	beq.n	800a91c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a5b      	ldr	r2, [pc, #364]	; (800aa54 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d018      	beq.n	800a91c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a5a      	ldr	r2, [pc, #360]	; (800aa58 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d013      	beq.n	800a91c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a58      	ldr	r2, [pc, #352]	; (800aa5c <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d00e      	beq.n	800a91c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a57      	ldr	r2, [pc, #348]	; (800aa60 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d009      	beq.n	800a91c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a55      	ldr	r2, [pc, #340]	; (800aa64 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d004      	beq.n	800a91c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a912:	f240 6164 	movw	r1, #1636	; 0x664
 800a916:	4854      	ldr	r0, [pc, #336]	; (800aa68 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a918:	f7f8 f825 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d020      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b10      	cmp	r3, #16
 800a92a:	d01c      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b20      	cmp	r3, #32
 800a932:	d018      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b30      	cmp	r3, #48	; 0x30
 800a93a:	d014      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b40      	cmp	r3, #64	; 0x40
 800a942:	d010      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b50      	cmp	r3, #80	; 0x50
 800a94a:	d00c      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b60      	cmp	r3, #96	; 0x60
 800a952:	d008      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b70      	cmp	r3, #112	; 0x70
 800a95a:	d004      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a95c:	f240 6165 	movw	r1, #1637	; 0x665
 800a960:	4841      	ldr	r0, [pc, #260]	; (800aa68 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a962:	f7f8 f800 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	2b80      	cmp	r3, #128	; 0x80
 800a96c:	d008      	beq.n	800a980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d004      	beq.n	800a980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a976:	f240 6166 	movw	r1, #1638	; 0x666
 800a97a:	483b      	ldr	r0, [pc, #236]	; (800aa68 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a97c:	f7f7 fff3 	bl	8002966 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a986:	2b01      	cmp	r3, #1
 800a988:	d101      	bne.n	800a98e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a98a:	2302      	movs	r3, #2
 800a98c:	e05a      	b.n	800aa44 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2202      	movs	r2, #2
 800a99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a1f      	ldr	r2, [pc, #124]	; (800aa4c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d022      	beq.n	800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9da:	d01d      	beq.n	800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a1b      	ldr	r2, [pc, #108]	; (800aa50 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d018      	beq.n	800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a1a      	ldr	r2, [pc, #104]	; (800aa54 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d013      	beq.n	800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a18      	ldr	r2, [pc, #96]	; (800aa58 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d00e      	beq.n	800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a19      	ldr	r2, [pc, #100]	; (800aa64 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d009      	beq.n	800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a18      	ldr	r2, [pc, #96]	; (800aa6c <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d004      	beq.n	800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a17      	ldr	r2, [pc, #92]	; (800aa70 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d10c      	bne.n	800aa32 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	68ba      	ldr	r2, [r7, #8]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	40010000 	.word	0x40010000
 800aa50:	40000400 	.word	0x40000400
 800aa54:	40000800 	.word	0x40000800
 800aa58:	40000c00 	.word	0x40000c00
 800aa5c:	40001000 	.word	0x40001000
 800aa60:	40001400 	.word	0x40001400
 800aa64:	40010400 	.word	0x40010400
 800aa68:	0800bed4 	.word	0x0800bed4
 800aa6c:	40014000 	.word	0x40014000
 800aa70:	40001800 	.word	0x40001800

0800aa74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a5e      	ldr	r2, [pc, #376]	; (800ac00 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d009      	beq.n	800aaa0 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a5c      	ldr	r2, [pc, #368]	; (800ac04 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d004      	beq.n	800aaa0 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800aa96:	f240 61a1 	movw	r1, #1697	; 0x6a1
 800aa9a:	485b      	ldr	r0, [pc, #364]	; (800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aa9c:	f7f7 ff63 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaa8:	d008      	beq.n	800aabc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d004      	beq.n	800aabc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800aab2:	f240 61a2 	movw	r1, #1698	; 0x6a2
 800aab6:	4854      	ldr	r0, [pc, #336]	; (800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aab8:	f7f7 ff55 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aac4:	d008      	beq.n	800aad8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d004      	beq.n	800aad8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800aace:	f240 61a3 	movw	r1, #1699	; 0x6a3
 800aad2:	484d      	ldr	r0, [pc, #308]	; (800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aad4:	f7f7 ff47 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d013      	beq.n	800ab08 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aae8:	d00e      	beq.n	800ab08 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaf2:	d009      	beq.n	800ab08 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aafc:	d004      	beq.n	800ab08 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aafe:	f240 61a4 	movw	r1, #1700	; 0x6a4
 800ab02:	4841      	ldr	r0, [pc, #260]	; (800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab04:	f7f7 ff2f 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	2bff      	cmp	r3, #255	; 0xff
 800ab0e:	d904      	bls.n	800ab1a <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800ab10:	f240 61a5 	movw	r1, #1701	; 0x6a5
 800ab14:	483c      	ldr	r0, [pc, #240]	; (800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab16:	f7f7 ff26 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab22:	d008      	beq.n	800ab36 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d004      	beq.n	800ab36 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ab2c:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800ab30:	4835      	ldr	r0, [pc, #212]	; (800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab32:	f7f7 ff18 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	695b      	ldr	r3, [r3, #20]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d009      	beq.n	800ab52 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab46:	d004      	beq.n	800ab52 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800ab48:	f240 61a7 	movw	r1, #1703	; 0x6a7
 800ab4c:	482e      	ldr	r0, [pc, #184]	; (800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab4e:	f7f7 ff0a 	bl	8002966 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	69db      	ldr	r3, [r3, #28]
 800ab56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab5a:	d008      	beq.n	800ab6e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	69db      	ldr	r3, [r3, #28]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d004      	beq.n	800ab6e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800ab64:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 800ab68:	4827      	ldr	r0, [pc, #156]	; (800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab6a:	f7f7 fefc 	bl	8002966 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d101      	bne.n	800ab7c <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800ab78:	2302      	movs	r3, #2
 800ab7a:	e03d      	b.n	800abf8 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	4313      	orrs	r3, r2
 800abac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4313      	orrs	r3, r2
 800abba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	695b      	ldr	r3, [r3, #20]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	69db      	ldr	r3, [r3, #28]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	40010000 	.word	0x40010000
 800ac04:	40010400 	.word	0x40010400
 800ac08:	0800bed4 	.word	0x0800bed4

0800ac0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d101      	bne.n	800ac1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e0be      	b.n	800ad9c <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d031      	beq.n	800ac8a <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a5e      	ldr	r2, [pc, #376]	; (800ada4 <HAL_UART_Init+0x198>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d013      	beq.n	800ac58 <HAL_UART_Init+0x4c>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a5c      	ldr	r2, [pc, #368]	; (800ada8 <HAL_UART_Init+0x19c>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d00e      	beq.n	800ac58 <HAL_UART_Init+0x4c>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a5b      	ldr	r2, [pc, #364]	; (800adac <HAL_UART_Init+0x1a0>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d009      	beq.n	800ac58 <HAL_UART_Init+0x4c>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a59      	ldr	r2, [pc, #356]	; (800adb0 <HAL_UART_Init+0x1a4>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d004      	beq.n	800ac58 <HAL_UART_Init+0x4c>
 800ac4e:	f240 114b 	movw	r1, #331	; 0x14b
 800ac52:	4858      	ldr	r0, [pc, #352]	; (800adb4 <HAL_UART_Init+0x1a8>)
 800ac54:	f7f7 fe87 	bl	8002966 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d041      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac68:	d03c      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac72:	d037      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac7c:	d032      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800ac7e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800ac82:	484c      	ldr	r0, [pc, #304]	; (800adb4 <HAL_UART_Init+0x1a8>)
 800ac84:	f7f7 fe6f 	bl	8002966 <assert_failed>
 800ac88:	e02c      	b.n	800ace4 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a45      	ldr	r2, [pc, #276]	; (800ada4 <HAL_UART_Init+0x198>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d027      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a43      	ldr	r2, [pc, #268]	; (800ada8 <HAL_UART_Init+0x19c>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d022      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a42      	ldr	r2, [pc, #264]	; (800adac <HAL_UART_Init+0x1a0>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d01d      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a42      	ldr	r2, [pc, #264]	; (800adb8 <HAL_UART_Init+0x1ac>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d018      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a41      	ldr	r2, [pc, #260]	; (800adbc <HAL_UART_Init+0x1b0>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d013      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a3b      	ldr	r2, [pc, #236]	; (800adb0 <HAL_UART_Init+0x1a4>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d00e      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a3d      	ldr	r2, [pc, #244]	; (800adc0 <HAL_UART_Init+0x1b4>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d009      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a3b      	ldr	r2, [pc, #236]	; (800adc4 <HAL_UART_Init+0x1b8>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d004      	beq.n	800ace4 <HAL_UART_Init+0xd8>
 800acda:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800acde:	4835      	ldr	r0, [pc, #212]	; (800adb4 <HAL_UART_Init+0x1a8>)
 800ace0:	f7f7 fe41 	bl	8002966 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d009      	beq.n	800ad00 <HAL_UART_Init+0xf4>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acf4:	d004      	beq.n	800ad00 <HAL_UART_Init+0xf4>
 800acf6:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800acfa:	482e      	ldr	r0, [pc, #184]	; (800adb4 <HAL_UART_Init+0x1a8>)
 800acfc:	f7f7 fe33 	bl	8002966 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	69db      	ldr	r3, [r3, #28]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d009      	beq.n	800ad1c <HAL_UART_Init+0x110>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad10:	d004      	beq.n	800ad1c <HAL_UART_Init+0x110>
 800ad12:	f240 1153 	movw	r1, #339	; 0x153
 800ad16:	4827      	ldr	r0, [pc, #156]	; (800adb4 <HAL_UART_Init+0x1a8>)
 800ad18:	f7f7 fe25 	bl	8002966 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d106      	bne.n	800ad36 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7f8 fe3d 	bl	80039b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2224      	movs	r2, #36	; 0x24
 800ad3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68da      	ldr	r2, [r3, #12]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f83a 	bl	800adc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	691a      	ldr	r2, [r3, #16]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	695a      	ldr	r2, [r3, #20]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68da      	ldr	r2, [r3, #12]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2220      	movs	r2, #32
 800ad96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	40011000 	.word	0x40011000
 800ada8:	40004400 	.word	0x40004400
 800adac:	40004800 	.word	0x40004800
 800adb0:	40011400 	.word	0x40011400
 800adb4:	0800bf10 	.word	0x0800bf10
 800adb8:	40004c00 	.word	0x40004c00
 800adbc:	40005000 	.word	0x40005000
 800adc0:	40007800 	.word	0x40007800
 800adc4:	40007c00 	.word	0x40007c00

0800adc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	b0bd      	sub	sp, #244	; 0xf4
 800adce:	af00      	add	r7, sp, #0
 800add0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800add4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	4bae      	ldr	r3, [pc, #696]	; (800b094 <UART_SetConfig+0x2cc>)
 800addc:	429a      	cmp	r2, r3
 800adde:	d904      	bls.n	800adea <UART_SetConfig+0x22>
 800ade0:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800ade4:	48ac      	ldr	r0, [pc, #688]	; (800b098 <UART_SetConfig+0x2d0>)
 800ade6:	f7f7 fdbe 	bl	8002966 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800adea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00a      	beq.n	800ae0a <UART_SetConfig+0x42>
 800adf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adfe:	d004      	beq.n	800ae0a <UART_SetConfig+0x42>
 800ae00:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800ae04:	48a4      	ldr	r0, [pc, #656]	; (800b098 <UART_SetConfig+0x2d0>)
 800ae06:	f7f7 fdae 	bl	8002966 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800ae0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d010      	beq.n	800ae36 <UART_SetConfig+0x6e>
 800ae14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae1e:	d00a      	beq.n	800ae36 <UART_SetConfig+0x6e>
 800ae20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ae2a:	d004      	beq.n	800ae36 <UART_SetConfig+0x6e>
 800ae2c:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800ae30:	4899      	ldr	r0, [pc, #612]	; (800b098 <UART_SetConfig+0x2d0>)
 800ae32:	f7f7 fd98 	bl	8002966 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800ae36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae3a:	695a      	ldr	r2, [r3, #20]
 800ae3c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800ae40:	4013      	ands	r3, r2
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d104      	bne.n	800ae50 <UART_SetConfig+0x88>
 800ae46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d104      	bne.n	800ae5a <UART_SetConfig+0x92>
 800ae50:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800ae54:	4890      	ldr	r0, [pc, #576]	; (800b098 <UART_SetConfig+0x2d0>)
 800ae56:	f7f7 fd86 	bl	8002966 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae6a:	68d9      	ldr	r1, [r3, #12]
 800ae6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	ea40 0301 	orr.w	r3, r0, r1
 800ae76:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae7c:	689a      	ldr	r2, [r3, #8]
 800ae7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	431a      	orrs	r2, r3
 800ae86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	431a      	orrs	r2, r3
 800ae8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae92:	69db      	ldr	r3, [r3, #28]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800ae9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aea6:	f021 010c 	bic.w	r1, r1, #12
 800aeaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aeb4:	430b      	orrs	r3, r1
 800aeb6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aeb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aec8:	6999      	ldr	r1, [r3, #24]
 800aeca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	ea40 0301 	orr.w	r3, r0, r1
 800aed4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeda:	69db      	ldr	r3, [r3, #28]
 800aedc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aee0:	f040 81a9 	bne.w	800b236 <UART_SetConfig+0x46e>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	4b6c      	ldr	r3, [pc, #432]	; (800b09c <UART_SetConfig+0x2d4>)
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d006      	beq.n	800aefe <UART_SetConfig+0x136>
 800aef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	4b6a      	ldr	r3, [pc, #424]	; (800b0a0 <UART_SetConfig+0x2d8>)
 800aef8:	429a      	cmp	r2, r3
 800aefa:	f040 80d5 	bne.w	800b0a8 <UART_SetConfig+0x2e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aefe:	f7fc ff9f 	bl	8007e40 <HAL_RCC_GetPCLK2Freq>
 800af02:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af0a:	461c      	mov	r4, r3
 800af0c:	f04f 0500 	mov.w	r5, #0
 800af10:	4622      	mov	r2, r4
 800af12:	462b      	mov	r3, r5
 800af14:	1891      	adds	r1, r2, r2
 800af16:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800af1a:	415b      	adcs	r3, r3
 800af1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800af24:	1912      	adds	r2, r2, r4
 800af26:	eb45 0303 	adc.w	r3, r5, r3
 800af2a:	f04f 0000 	mov.w	r0, #0
 800af2e:	f04f 0100 	mov.w	r1, #0
 800af32:	00d9      	lsls	r1, r3, #3
 800af34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af38:	00d0      	lsls	r0, r2, #3
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	1911      	adds	r1, r2, r4
 800af40:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800af44:	416b      	adcs	r3, r5
 800af46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800af4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	461a      	mov	r2, r3
 800af52:	f04f 0300 	mov.w	r3, #0
 800af56:	1891      	adds	r1, r2, r2
 800af58:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800af5c:	415b      	adcs	r3, r3
 800af5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800af62:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800af66:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800af6a:	f7f5 fe45 	bl	8000bf8 <__aeabi_uldivmod>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	4b4c      	ldr	r3, [pc, #304]	; (800b0a4 <UART_SetConfig+0x2dc>)
 800af74:	fba3 2302 	umull	r2, r3, r3, r2
 800af78:	095b      	lsrs	r3, r3, #5
 800af7a:	011e      	lsls	r6, r3, #4
 800af7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af80:	461c      	mov	r4, r3
 800af82:	f04f 0500 	mov.w	r5, #0
 800af86:	4622      	mov	r2, r4
 800af88:	462b      	mov	r3, r5
 800af8a:	1891      	adds	r1, r2, r2
 800af8c:	67b9      	str	r1, [r7, #120]	; 0x78
 800af8e:	415b      	adcs	r3, r3
 800af90:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af92:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800af96:	1912      	adds	r2, r2, r4
 800af98:	eb45 0303 	adc.w	r3, r5, r3
 800af9c:	f04f 0000 	mov.w	r0, #0
 800afa0:	f04f 0100 	mov.w	r1, #0
 800afa4:	00d9      	lsls	r1, r3, #3
 800afa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800afaa:	00d0      	lsls	r0, r2, #3
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	1911      	adds	r1, r2, r4
 800afb2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800afb6:	416b      	adcs	r3, r5
 800afb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800afbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	461a      	mov	r2, r3
 800afc4:	f04f 0300 	mov.w	r3, #0
 800afc8:	1891      	adds	r1, r2, r2
 800afca:	6739      	str	r1, [r7, #112]	; 0x70
 800afcc:	415b      	adcs	r3, r3
 800afce:	677b      	str	r3, [r7, #116]	; 0x74
 800afd0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800afd4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800afd8:	f7f5 fe0e 	bl	8000bf8 <__aeabi_uldivmod>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	4b30      	ldr	r3, [pc, #192]	; (800b0a4 <UART_SetConfig+0x2dc>)
 800afe2:	fba3 1302 	umull	r1, r3, r3, r2
 800afe6:	095b      	lsrs	r3, r3, #5
 800afe8:	2164      	movs	r1, #100	; 0x64
 800afea:	fb01 f303 	mul.w	r3, r1, r3
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	00db      	lsls	r3, r3, #3
 800aff2:	3332      	adds	r3, #50	; 0x32
 800aff4:	4a2b      	ldr	r2, [pc, #172]	; (800b0a4 <UART_SetConfig+0x2dc>)
 800aff6:	fba2 2303 	umull	r2, r3, r2, r3
 800affa:	095b      	lsrs	r3, r3, #5
 800affc:	005b      	lsls	r3, r3, #1
 800affe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b002:	441e      	add	r6, r3
 800b004:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b008:	4618      	mov	r0, r3
 800b00a:	f04f 0100 	mov.w	r1, #0
 800b00e:	4602      	mov	r2, r0
 800b010:	460b      	mov	r3, r1
 800b012:	1894      	adds	r4, r2, r2
 800b014:	66bc      	str	r4, [r7, #104]	; 0x68
 800b016:	415b      	adcs	r3, r3
 800b018:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b01a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b01e:	1812      	adds	r2, r2, r0
 800b020:	eb41 0303 	adc.w	r3, r1, r3
 800b024:	f04f 0400 	mov.w	r4, #0
 800b028:	f04f 0500 	mov.w	r5, #0
 800b02c:	00dd      	lsls	r5, r3, #3
 800b02e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b032:	00d4      	lsls	r4, r2, #3
 800b034:	4622      	mov	r2, r4
 800b036:	462b      	mov	r3, r5
 800b038:	1814      	adds	r4, r2, r0
 800b03a:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800b03e:	414b      	adcs	r3, r1
 800b040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	461a      	mov	r2, r3
 800b04c:	f04f 0300 	mov.w	r3, #0
 800b050:	1891      	adds	r1, r2, r2
 800b052:	6639      	str	r1, [r7, #96]	; 0x60
 800b054:	415b      	adcs	r3, r3
 800b056:	667b      	str	r3, [r7, #100]	; 0x64
 800b058:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b05c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b060:	f7f5 fdca 	bl	8000bf8 <__aeabi_uldivmod>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4b0e      	ldr	r3, [pc, #56]	; (800b0a4 <UART_SetConfig+0x2dc>)
 800b06a:	fba3 1302 	umull	r1, r3, r3, r2
 800b06e:	095b      	lsrs	r3, r3, #5
 800b070:	2164      	movs	r1, #100	; 0x64
 800b072:	fb01 f303 	mul.w	r3, r1, r3
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	00db      	lsls	r3, r3, #3
 800b07a:	3332      	adds	r3, #50	; 0x32
 800b07c:	4a09      	ldr	r2, [pc, #36]	; (800b0a4 <UART_SetConfig+0x2dc>)
 800b07e:	fba2 2303 	umull	r2, r3, r2, r3
 800b082:	095b      	lsrs	r3, r3, #5
 800b084:	f003 0207 	and.w	r2, r3, #7
 800b088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4432      	add	r2, r6
 800b090:	609a      	str	r2, [r3, #8]
 800b092:	e277      	b.n	800b584 <UART_SetConfig+0x7bc>
 800b094:	00a037a0 	.word	0x00a037a0
 800b098:	0800bf10 	.word	0x0800bf10
 800b09c:	40011000 	.word	0x40011000
 800b0a0:	40011400 	.word	0x40011400
 800b0a4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b0a8:	f7fc feb6 	bl	8007e18 <HAL_RCC_GetPCLK1Freq>
 800b0ac:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b0b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0b4:	461c      	mov	r4, r3
 800b0b6:	f04f 0500 	mov.w	r5, #0
 800b0ba:	4622      	mov	r2, r4
 800b0bc:	462b      	mov	r3, r5
 800b0be:	1891      	adds	r1, r2, r2
 800b0c0:	65b9      	str	r1, [r7, #88]	; 0x58
 800b0c2:	415b      	adcs	r3, r3
 800b0c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b0ca:	1912      	adds	r2, r2, r4
 800b0cc:	eb45 0303 	adc.w	r3, r5, r3
 800b0d0:	f04f 0000 	mov.w	r0, #0
 800b0d4:	f04f 0100 	mov.w	r1, #0
 800b0d8:	00d9      	lsls	r1, r3, #3
 800b0da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b0de:	00d0      	lsls	r0, r2, #3
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	1911      	adds	r1, r2, r4
 800b0e6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800b0ea:	416b      	adcs	r3, r5
 800b0ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	f04f 0300 	mov.w	r3, #0
 800b0fc:	1891      	adds	r1, r2, r2
 800b0fe:	6539      	str	r1, [r7, #80]	; 0x50
 800b100:	415b      	adcs	r3, r3
 800b102:	657b      	str	r3, [r7, #84]	; 0x54
 800b104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b108:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b10c:	f7f5 fd74 	bl	8000bf8 <__aeabi_uldivmod>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4bb3      	ldr	r3, [pc, #716]	; (800b3e4 <UART_SetConfig+0x61c>)
 800b116:	fba3 2302 	umull	r2, r3, r3, r2
 800b11a:	095b      	lsrs	r3, r3, #5
 800b11c:	011e      	lsls	r6, r3, #4
 800b11e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b122:	461c      	mov	r4, r3
 800b124:	f04f 0500 	mov.w	r5, #0
 800b128:	4622      	mov	r2, r4
 800b12a:	462b      	mov	r3, r5
 800b12c:	1891      	adds	r1, r2, r2
 800b12e:	64b9      	str	r1, [r7, #72]	; 0x48
 800b130:	415b      	adcs	r3, r3
 800b132:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b134:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b138:	1912      	adds	r2, r2, r4
 800b13a:	eb45 0303 	adc.w	r3, r5, r3
 800b13e:	f04f 0000 	mov.w	r0, #0
 800b142:	f04f 0100 	mov.w	r1, #0
 800b146:	00d9      	lsls	r1, r3, #3
 800b148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b14c:	00d0      	lsls	r0, r2, #3
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	1911      	adds	r1, r2, r4
 800b154:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800b158:	416b      	adcs	r3, r5
 800b15a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	461a      	mov	r2, r3
 800b166:	f04f 0300 	mov.w	r3, #0
 800b16a:	1891      	adds	r1, r2, r2
 800b16c:	6439      	str	r1, [r7, #64]	; 0x40
 800b16e:	415b      	adcs	r3, r3
 800b170:	647b      	str	r3, [r7, #68]	; 0x44
 800b172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b176:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800b17a:	f7f5 fd3d 	bl	8000bf8 <__aeabi_uldivmod>
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	4b98      	ldr	r3, [pc, #608]	; (800b3e4 <UART_SetConfig+0x61c>)
 800b184:	fba3 1302 	umull	r1, r3, r3, r2
 800b188:	095b      	lsrs	r3, r3, #5
 800b18a:	2164      	movs	r1, #100	; 0x64
 800b18c:	fb01 f303 	mul.w	r3, r1, r3
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	3332      	adds	r3, #50	; 0x32
 800b196:	4a93      	ldr	r2, [pc, #588]	; (800b3e4 <UART_SetConfig+0x61c>)
 800b198:	fba2 2303 	umull	r2, r3, r2, r3
 800b19c:	095b      	lsrs	r3, r3, #5
 800b19e:	005b      	lsls	r3, r3, #1
 800b1a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b1a4:	441e      	add	r6, r3
 800b1a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f04f 0100 	mov.w	r1, #0
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	1894      	adds	r4, r2, r2
 800b1b6:	63bc      	str	r4, [r7, #56]	; 0x38
 800b1b8:	415b      	adcs	r3, r3
 800b1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b1c0:	1812      	adds	r2, r2, r0
 800b1c2:	eb41 0303 	adc.w	r3, r1, r3
 800b1c6:	f04f 0400 	mov.w	r4, #0
 800b1ca:	f04f 0500 	mov.w	r5, #0
 800b1ce:	00dd      	lsls	r5, r3, #3
 800b1d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b1d4:	00d4      	lsls	r4, r2, #3
 800b1d6:	4622      	mov	r2, r4
 800b1d8:	462b      	mov	r3, r5
 800b1da:	1814      	adds	r4, r2, r0
 800b1dc:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800b1e0:	414b      	adcs	r3, r1
 800b1e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	f04f 0300 	mov.w	r3, #0
 800b1f2:	1891      	adds	r1, r2, r2
 800b1f4:	6339      	str	r1, [r7, #48]	; 0x30
 800b1f6:	415b      	adcs	r3, r3
 800b1f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b1fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b1fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b202:	f7f5 fcf9 	bl	8000bf8 <__aeabi_uldivmod>
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	4b76      	ldr	r3, [pc, #472]	; (800b3e4 <UART_SetConfig+0x61c>)
 800b20c:	fba3 1302 	umull	r1, r3, r3, r2
 800b210:	095b      	lsrs	r3, r3, #5
 800b212:	2164      	movs	r1, #100	; 0x64
 800b214:	fb01 f303 	mul.w	r3, r1, r3
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	3332      	adds	r3, #50	; 0x32
 800b21e:	4a71      	ldr	r2, [pc, #452]	; (800b3e4 <UART_SetConfig+0x61c>)
 800b220:	fba2 2303 	umull	r2, r3, r2, r3
 800b224:	095b      	lsrs	r3, r3, #5
 800b226:	f003 0207 	and.w	r2, r3, #7
 800b22a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4432      	add	r2, r6
 800b232:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b234:	e1a6      	b.n	800b584 <UART_SetConfig+0x7bc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	4b6a      	ldr	r3, [pc, #424]	; (800b3e8 <UART_SetConfig+0x620>)
 800b23e:	429a      	cmp	r2, r3
 800b240:	d006      	beq.n	800b250 <UART_SetConfig+0x488>
 800b242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	4b68      	ldr	r3, [pc, #416]	; (800b3ec <UART_SetConfig+0x624>)
 800b24a:	429a      	cmp	r2, r3
 800b24c:	f040 80d0 	bne.w	800b3f0 <UART_SetConfig+0x628>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b250:	f7fc fdf6 	bl	8007e40 <HAL_RCC_GetPCLK2Freq>
 800b254:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b258:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b25c:	461c      	mov	r4, r3
 800b25e:	f04f 0500 	mov.w	r5, #0
 800b262:	4622      	mov	r2, r4
 800b264:	462b      	mov	r3, r5
 800b266:	1891      	adds	r1, r2, r2
 800b268:	62b9      	str	r1, [r7, #40]	; 0x28
 800b26a:	415b      	adcs	r3, r3
 800b26c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b26e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b272:	1912      	adds	r2, r2, r4
 800b274:	eb45 0303 	adc.w	r3, r5, r3
 800b278:	f04f 0000 	mov.w	r0, #0
 800b27c:	f04f 0100 	mov.w	r1, #0
 800b280:	00d9      	lsls	r1, r3, #3
 800b282:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b286:	00d0      	lsls	r0, r2, #3
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	eb12 0a04 	adds.w	sl, r2, r4
 800b290:	eb43 0b05 	adc.w	fp, r3, r5
 800b294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f04f 0100 	mov.w	r1, #0
 800b2a0:	f04f 0200 	mov.w	r2, #0
 800b2a4:	f04f 0300 	mov.w	r3, #0
 800b2a8:	008b      	lsls	r3, r1, #2
 800b2aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b2ae:	0082      	lsls	r2, r0, #2
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	4659      	mov	r1, fp
 800b2b4:	f7f5 fca0 	bl	8000bf8 <__aeabi_uldivmod>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4b49      	ldr	r3, [pc, #292]	; (800b3e4 <UART_SetConfig+0x61c>)
 800b2be:	fba3 2302 	umull	r2, r3, r3, r2
 800b2c2:	095b      	lsrs	r3, r3, #5
 800b2c4:	011e      	lsls	r6, r3, #4
 800b2c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f04f 0100 	mov.w	r1, #0
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	1894      	adds	r4, r2, r2
 800b2d6:	623c      	str	r4, [r7, #32]
 800b2d8:	415b      	adcs	r3, r3
 800b2da:	627b      	str	r3, [r7, #36]	; 0x24
 800b2dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b2e0:	1812      	adds	r2, r2, r0
 800b2e2:	eb41 0303 	adc.w	r3, r1, r3
 800b2e6:	f04f 0400 	mov.w	r4, #0
 800b2ea:	f04f 0500 	mov.w	r5, #0
 800b2ee:	00dd      	lsls	r5, r3, #3
 800b2f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b2f4:	00d4      	lsls	r4, r2, #3
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	462b      	mov	r3, r5
 800b2fa:	1814      	adds	r4, r2, r0
 800b2fc:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800b300:	414b      	adcs	r3, r1
 800b302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f04f 0100 	mov.w	r1, #0
 800b312:	f04f 0200 	mov.w	r2, #0
 800b316:	f04f 0300 	mov.w	r3, #0
 800b31a:	008b      	lsls	r3, r1, #2
 800b31c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b320:	0082      	lsls	r2, r0, #2
 800b322:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800b326:	f7f5 fc67 	bl	8000bf8 <__aeabi_uldivmod>
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	4b2d      	ldr	r3, [pc, #180]	; (800b3e4 <UART_SetConfig+0x61c>)
 800b330:	fba3 1302 	umull	r1, r3, r3, r2
 800b334:	095b      	lsrs	r3, r3, #5
 800b336:	2164      	movs	r1, #100	; 0x64
 800b338:	fb01 f303 	mul.w	r3, r1, r3
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	011b      	lsls	r3, r3, #4
 800b340:	3332      	adds	r3, #50	; 0x32
 800b342:	4a28      	ldr	r2, [pc, #160]	; (800b3e4 <UART_SetConfig+0x61c>)
 800b344:	fba2 2303 	umull	r2, r3, r2, r3
 800b348:	095b      	lsrs	r3, r3, #5
 800b34a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b34e:	441e      	add	r6, r3
 800b350:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b354:	4618      	mov	r0, r3
 800b356:	f04f 0100 	mov.w	r1, #0
 800b35a:	4602      	mov	r2, r0
 800b35c:	460b      	mov	r3, r1
 800b35e:	1894      	adds	r4, r2, r2
 800b360:	61bc      	str	r4, [r7, #24]
 800b362:	415b      	adcs	r3, r3
 800b364:	61fb      	str	r3, [r7, #28]
 800b366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b36a:	1812      	adds	r2, r2, r0
 800b36c:	eb41 0303 	adc.w	r3, r1, r3
 800b370:	f04f 0400 	mov.w	r4, #0
 800b374:	f04f 0500 	mov.w	r5, #0
 800b378:	00dd      	lsls	r5, r3, #3
 800b37a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b37e:	00d4      	lsls	r4, r2, #3
 800b380:	4622      	mov	r2, r4
 800b382:	462b      	mov	r3, r5
 800b384:	1814      	adds	r4, r2, r0
 800b386:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800b38a:	414b      	adcs	r3, r1
 800b38c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	4618      	mov	r0, r3
 800b398:	f04f 0100 	mov.w	r1, #0
 800b39c:	f04f 0200 	mov.w	r2, #0
 800b3a0:	f04f 0300 	mov.w	r3, #0
 800b3a4:	008b      	lsls	r3, r1, #2
 800b3a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b3aa:	0082      	lsls	r2, r0, #2
 800b3ac:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800b3b0:	f7f5 fc22 	bl	8000bf8 <__aeabi_uldivmod>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <UART_SetConfig+0x61c>)
 800b3ba:	fba3 1302 	umull	r1, r3, r3, r2
 800b3be:	095b      	lsrs	r3, r3, #5
 800b3c0:	2164      	movs	r1, #100	; 0x64
 800b3c2:	fb01 f303 	mul.w	r3, r1, r3
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	011b      	lsls	r3, r3, #4
 800b3ca:	3332      	adds	r3, #50	; 0x32
 800b3cc:	4a05      	ldr	r2, [pc, #20]	; (800b3e4 <UART_SetConfig+0x61c>)
 800b3ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d2:	095b      	lsrs	r3, r3, #5
 800b3d4:	f003 020f 	and.w	r2, r3, #15
 800b3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4432      	add	r2, r6
 800b3e0:	609a      	str	r2, [r3, #8]
 800b3e2:	e0cf      	b.n	800b584 <UART_SetConfig+0x7bc>
 800b3e4:	51eb851f 	.word	0x51eb851f
 800b3e8:	40011000 	.word	0x40011000
 800b3ec:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800b3f0:	f7fc fd12 	bl	8007e18 <HAL_RCC_GetPCLK1Freq>
 800b3f4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3fc:	461c      	mov	r4, r3
 800b3fe:	f04f 0500 	mov.w	r5, #0
 800b402:	4622      	mov	r2, r4
 800b404:	462b      	mov	r3, r5
 800b406:	1891      	adds	r1, r2, r2
 800b408:	6139      	str	r1, [r7, #16]
 800b40a:	415b      	adcs	r3, r3
 800b40c:	617b      	str	r3, [r7, #20]
 800b40e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b412:	1912      	adds	r2, r2, r4
 800b414:	eb45 0303 	adc.w	r3, r5, r3
 800b418:	f04f 0000 	mov.w	r0, #0
 800b41c:	f04f 0100 	mov.w	r1, #0
 800b420:	00d9      	lsls	r1, r3, #3
 800b422:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b426:	00d0      	lsls	r0, r2, #3
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	eb12 0804 	adds.w	r8, r2, r4
 800b430:	eb43 0905 	adc.w	r9, r3, r5
 800b434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f04f 0100 	mov.w	r1, #0
 800b440:	f04f 0200 	mov.w	r2, #0
 800b444:	f04f 0300 	mov.w	r3, #0
 800b448:	008b      	lsls	r3, r1, #2
 800b44a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b44e:	0082      	lsls	r2, r0, #2
 800b450:	4640      	mov	r0, r8
 800b452:	4649      	mov	r1, r9
 800b454:	f7f5 fbd0 	bl	8000bf8 <__aeabi_uldivmod>
 800b458:	4602      	mov	r2, r0
 800b45a:	460b      	mov	r3, r1
 800b45c:	4b4c      	ldr	r3, [pc, #304]	; (800b590 <UART_SetConfig+0x7c8>)
 800b45e:	fba3 2302 	umull	r2, r3, r3, r2
 800b462:	095b      	lsrs	r3, r3, #5
 800b464:	011e      	lsls	r6, r3, #4
 800b466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b46a:	4618      	mov	r0, r3
 800b46c:	f04f 0100 	mov.w	r1, #0
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	1894      	adds	r4, r2, r2
 800b476:	60bc      	str	r4, [r7, #8]
 800b478:	415b      	adcs	r3, r3
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b480:	1812      	adds	r2, r2, r0
 800b482:	eb41 0303 	adc.w	r3, r1, r3
 800b486:	f04f 0400 	mov.w	r4, #0
 800b48a:	f04f 0500 	mov.w	r5, #0
 800b48e:	00dd      	lsls	r5, r3, #3
 800b490:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b494:	00d4      	lsls	r4, r2, #3
 800b496:	4622      	mov	r2, r4
 800b498:	462b      	mov	r3, r5
 800b49a:	1814      	adds	r4, r2, r0
 800b49c:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800b4a0:	414b      	adcs	r3, r1
 800b4a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f04f 0100 	mov.w	r1, #0
 800b4b2:	f04f 0200 	mov.w	r2, #0
 800b4b6:	f04f 0300 	mov.w	r3, #0
 800b4ba:	008b      	lsls	r3, r1, #2
 800b4bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b4c0:	0082      	lsls	r2, r0, #2
 800b4c2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b4c6:	f7f5 fb97 	bl	8000bf8 <__aeabi_uldivmod>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	4b30      	ldr	r3, [pc, #192]	; (800b590 <UART_SetConfig+0x7c8>)
 800b4d0:	fba3 1302 	umull	r1, r3, r3, r2
 800b4d4:	095b      	lsrs	r3, r3, #5
 800b4d6:	2164      	movs	r1, #100	; 0x64
 800b4d8:	fb01 f303 	mul.w	r3, r1, r3
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	011b      	lsls	r3, r3, #4
 800b4e0:	3332      	adds	r3, #50	; 0x32
 800b4e2:	4a2b      	ldr	r2, [pc, #172]	; (800b590 <UART_SetConfig+0x7c8>)
 800b4e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e8:	095b      	lsrs	r3, r3, #5
 800b4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4ee:	441e      	add	r6, r3
 800b4f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f04f 0100 	mov.w	r1, #0
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	1894      	adds	r4, r2, r2
 800b500:	603c      	str	r4, [r7, #0]
 800b502:	415b      	adcs	r3, r3
 800b504:	607b      	str	r3, [r7, #4]
 800b506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b50a:	1812      	adds	r2, r2, r0
 800b50c:	eb41 0303 	adc.w	r3, r1, r3
 800b510:	f04f 0400 	mov.w	r4, #0
 800b514:	f04f 0500 	mov.w	r5, #0
 800b518:	00dd      	lsls	r5, r3, #3
 800b51a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b51e:	00d4      	lsls	r4, r2, #3
 800b520:	4622      	mov	r2, r4
 800b522:	462b      	mov	r3, r5
 800b524:	1814      	adds	r4, r2, r0
 800b526:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800b52a:	414b      	adcs	r3, r1
 800b52c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	4618      	mov	r0, r3
 800b538:	f04f 0100 	mov.w	r1, #0
 800b53c:	f04f 0200 	mov.w	r2, #0
 800b540:	f04f 0300 	mov.w	r3, #0
 800b544:	008b      	lsls	r3, r1, #2
 800b546:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b54a:	0082      	lsls	r2, r0, #2
 800b54c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800b550:	f7f5 fb52 	bl	8000bf8 <__aeabi_uldivmod>
 800b554:	4602      	mov	r2, r0
 800b556:	460b      	mov	r3, r1
 800b558:	4b0d      	ldr	r3, [pc, #52]	; (800b590 <UART_SetConfig+0x7c8>)
 800b55a:	fba3 1302 	umull	r1, r3, r3, r2
 800b55e:	095b      	lsrs	r3, r3, #5
 800b560:	2164      	movs	r1, #100	; 0x64
 800b562:	fb01 f303 	mul.w	r3, r1, r3
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	011b      	lsls	r3, r3, #4
 800b56a:	3332      	adds	r3, #50	; 0x32
 800b56c:	4a08      	ldr	r2, [pc, #32]	; (800b590 <UART_SetConfig+0x7c8>)
 800b56e:	fba2 2303 	umull	r2, r3, r2, r3
 800b572:	095b      	lsrs	r3, r3, #5
 800b574:	f003 020f 	and.w	r2, r3, #15
 800b578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4432      	add	r2, r6
 800b580:	609a      	str	r2, [r3, #8]
}
 800b582:	e7ff      	b.n	800b584 <UART_SetConfig+0x7bc>
 800b584:	bf00      	nop
 800b586:	37f4      	adds	r7, #244	; 0xf4
 800b588:	46bd      	mov	sp, r7
 800b58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58e:	bf00      	nop
 800b590:	51eb851f 	.word	0x51eb851f

0800b594 <__errno>:
 800b594:	4b01      	ldr	r3, [pc, #4]	; (800b59c <__errno+0x8>)
 800b596:	6818      	ldr	r0, [r3, #0]
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	200001fc 	.word	0x200001fc

0800b5a0 <__libc_init_array>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	4d0d      	ldr	r5, [pc, #52]	; (800b5d8 <__libc_init_array+0x38>)
 800b5a4:	4c0d      	ldr	r4, [pc, #52]	; (800b5dc <__libc_init_array+0x3c>)
 800b5a6:	1b64      	subs	r4, r4, r5
 800b5a8:	10a4      	asrs	r4, r4, #2
 800b5aa:	2600      	movs	r6, #0
 800b5ac:	42a6      	cmp	r6, r4
 800b5ae:	d109      	bne.n	800b5c4 <__libc_init_array+0x24>
 800b5b0:	4d0b      	ldr	r5, [pc, #44]	; (800b5e0 <__libc_init_array+0x40>)
 800b5b2:	4c0c      	ldr	r4, [pc, #48]	; (800b5e4 <__libc_init_array+0x44>)
 800b5b4:	f000 fb7e 	bl	800bcb4 <_init>
 800b5b8:	1b64      	subs	r4, r4, r5
 800b5ba:	10a4      	asrs	r4, r4, #2
 800b5bc:	2600      	movs	r6, #0
 800b5be:	42a6      	cmp	r6, r4
 800b5c0:	d105      	bne.n	800b5ce <__libc_init_array+0x2e>
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c8:	4798      	blx	r3
 800b5ca:	3601      	adds	r6, #1
 800b5cc:	e7ee      	b.n	800b5ac <__libc_init_array+0xc>
 800b5ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5d2:	4798      	blx	r3
 800b5d4:	3601      	adds	r6, #1
 800b5d6:	e7f2      	b.n	800b5be <__libc_init_array+0x1e>
 800b5d8:	0800c018 	.word	0x0800c018
 800b5dc:	0800c018 	.word	0x0800c018
 800b5e0:	0800c018 	.word	0x0800c018
 800b5e4:	0800c01c 	.word	0x0800c01c

0800b5e8 <memset>:
 800b5e8:	4402      	add	r2, r0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d100      	bne.n	800b5f2 <memset+0xa>
 800b5f0:	4770      	bx	lr
 800b5f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5f6:	e7f9      	b.n	800b5ec <memset+0x4>

0800b5f8 <atan>:
 800b5f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	ec55 4b10 	vmov	r4, r5, d0
 800b600:	4bc3      	ldr	r3, [pc, #780]	; (800b910 <atan+0x318>)
 800b602:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b606:	429e      	cmp	r6, r3
 800b608:	46ab      	mov	fp, r5
 800b60a:	dd18      	ble.n	800b63e <atan+0x46>
 800b60c:	4bc1      	ldr	r3, [pc, #772]	; (800b914 <atan+0x31c>)
 800b60e:	429e      	cmp	r6, r3
 800b610:	dc01      	bgt.n	800b616 <atan+0x1e>
 800b612:	d109      	bne.n	800b628 <atan+0x30>
 800b614:	b144      	cbz	r4, 800b628 <atan+0x30>
 800b616:	4622      	mov	r2, r4
 800b618:	462b      	mov	r3, r5
 800b61a:	4620      	mov	r0, r4
 800b61c:	4629      	mov	r1, r5
 800b61e:	f7f4 fded 	bl	80001fc <__adddf3>
 800b622:	4604      	mov	r4, r0
 800b624:	460d      	mov	r5, r1
 800b626:	e006      	b.n	800b636 <atan+0x3e>
 800b628:	f1bb 0f00 	cmp.w	fp, #0
 800b62c:	f300 8131 	bgt.w	800b892 <atan+0x29a>
 800b630:	a59b      	add	r5, pc, #620	; (adr r5, 800b8a0 <atan+0x2a8>)
 800b632:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b636:	ec45 4b10 	vmov	d0, r4, r5
 800b63a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63e:	4bb6      	ldr	r3, [pc, #728]	; (800b918 <atan+0x320>)
 800b640:	429e      	cmp	r6, r3
 800b642:	dc14      	bgt.n	800b66e <atan+0x76>
 800b644:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b648:	429e      	cmp	r6, r3
 800b64a:	dc0d      	bgt.n	800b668 <atan+0x70>
 800b64c:	a396      	add	r3, pc, #600	; (adr r3, 800b8a8 <atan+0x2b0>)
 800b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b652:	ee10 0a10 	vmov	r0, s0
 800b656:	4629      	mov	r1, r5
 800b658:	f7f4 fdd0 	bl	80001fc <__adddf3>
 800b65c:	4baf      	ldr	r3, [pc, #700]	; (800b91c <atan+0x324>)
 800b65e:	2200      	movs	r2, #0
 800b660:	f7f5 fa12 	bl	8000a88 <__aeabi_dcmpgt>
 800b664:	2800      	cmp	r0, #0
 800b666:	d1e6      	bne.n	800b636 <atan+0x3e>
 800b668:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b66c:	e02b      	b.n	800b6c6 <atan+0xce>
 800b66e:	f000 f963 	bl	800b938 <fabs>
 800b672:	4bab      	ldr	r3, [pc, #684]	; (800b920 <atan+0x328>)
 800b674:	429e      	cmp	r6, r3
 800b676:	ec55 4b10 	vmov	r4, r5, d0
 800b67a:	f300 80bf 	bgt.w	800b7fc <atan+0x204>
 800b67e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b682:	429e      	cmp	r6, r3
 800b684:	f300 80a0 	bgt.w	800b7c8 <atan+0x1d0>
 800b688:	ee10 2a10 	vmov	r2, s0
 800b68c:	ee10 0a10 	vmov	r0, s0
 800b690:	462b      	mov	r3, r5
 800b692:	4629      	mov	r1, r5
 800b694:	f7f4 fdb2 	bl	80001fc <__adddf3>
 800b698:	4ba0      	ldr	r3, [pc, #640]	; (800b91c <atan+0x324>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	f7f4 fdac 	bl	80001f8 <__aeabi_dsub>
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	460f      	mov	r7, r1
 800b6a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	f7f4 fda5 	bl	80001fc <__adddf3>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	4639      	mov	r1, r7
 800b6ba:	f7f5 f87f 	bl	80007bc <__aeabi_ddiv>
 800b6be:	f04f 0a00 	mov.w	sl, #0
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	460d      	mov	r5, r1
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	f7f4 ff4b 	bl	8000568 <__aeabi_dmul>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4680      	mov	r8, r0
 800b6d8:	4689      	mov	r9, r1
 800b6da:	f7f4 ff45 	bl	8000568 <__aeabi_dmul>
 800b6de:	a374      	add	r3, pc, #464	; (adr r3, 800b8b0 <atan+0x2b8>)
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	4606      	mov	r6, r0
 800b6e6:	460f      	mov	r7, r1
 800b6e8:	f7f4 ff3e 	bl	8000568 <__aeabi_dmul>
 800b6ec:	a372      	add	r3, pc, #456	; (adr r3, 800b8b8 <atan+0x2c0>)
 800b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f2:	f7f4 fd83 	bl	80001fc <__adddf3>
 800b6f6:	4632      	mov	r2, r6
 800b6f8:	463b      	mov	r3, r7
 800b6fa:	f7f4 ff35 	bl	8000568 <__aeabi_dmul>
 800b6fe:	a370      	add	r3, pc, #448	; (adr r3, 800b8c0 <atan+0x2c8>)
 800b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b704:	f7f4 fd7a 	bl	80001fc <__adddf3>
 800b708:	4632      	mov	r2, r6
 800b70a:	463b      	mov	r3, r7
 800b70c:	f7f4 ff2c 	bl	8000568 <__aeabi_dmul>
 800b710:	a36d      	add	r3, pc, #436	; (adr r3, 800b8c8 <atan+0x2d0>)
 800b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b716:	f7f4 fd71 	bl	80001fc <__adddf3>
 800b71a:	4632      	mov	r2, r6
 800b71c:	463b      	mov	r3, r7
 800b71e:	f7f4 ff23 	bl	8000568 <__aeabi_dmul>
 800b722:	a36b      	add	r3, pc, #428	; (adr r3, 800b8d0 <atan+0x2d8>)
 800b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b728:	f7f4 fd68 	bl	80001fc <__adddf3>
 800b72c:	4632      	mov	r2, r6
 800b72e:	463b      	mov	r3, r7
 800b730:	f7f4 ff1a 	bl	8000568 <__aeabi_dmul>
 800b734:	a368      	add	r3, pc, #416	; (adr r3, 800b8d8 <atan+0x2e0>)
 800b736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73a:	f7f4 fd5f 	bl	80001fc <__adddf3>
 800b73e:	4642      	mov	r2, r8
 800b740:	464b      	mov	r3, r9
 800b742:	f7f4 ff11 	bl	8000568 <__aeabi_dmul>
 800b746:	a366      	add	r3, pc, #408	; (adr r3, 800b8e0 <atan+0x2e8>)
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	4680      	mov	r8, r0
 800b74e:	4689      	mov	r9, r1
 800b750:	4630      	mov	r0, r6
 800b752:	4639      	mov	r1, r7
 800b754:	f7f4 ff08 	bl	8000568 <__aeabi_dmul>
 800b758:	a363      	add	r3, pc, #396	; (adr r3, 800b8e8 <atan+0x2f0>)
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	f7f4 fd4b 	bl	80001f8 <__aeabi_dsub>
 800b762:	4632      	mov	r2, r6
 800b764:	463b      	mov	r3, r7
 800b766:	f7f4 feff 	bl	8000568 <__aeabi_dmul>
 800b76a:	a361      	add	r3, pc, #388	; (adr r3, 800b8f0 <atan+0x2f8>)
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	f7f4 fd42 	bl	80001f8 <__aeabi_dsub>
 800b774:	4632      	mov	r2, r6
 800b776:	463b      	mov	r3, r7
 800b778:	f7f4 fef6 	bl	8000568 <__aeabi_dmul>
 800b77c:	a35e      	add	r3, pc, #376	; (adr r3, 800b8f8 <atan+0x300>)
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f7f4 fd39 	bl	80001f8 <__aeabi_dsub>
 800b786:	4632      	mov	r2, r6
 800b788:	463b      	mov	r3, r7
 800b78a:	f7f4 feed 	bl	8000568 <__aeabi_dmul>
 800b78e:	a35c      	add	r3, pc, #368	; (adr r3, 800b900 <atan+0x308>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	f7f4 fd30 	bl	80001f8 <__aeabi_dsub>
 800b798:	4632      	mov	r2, r6
 800b79a:	463b      	mov	r3, r7
 800b79c:	f7f4 fee4 	bl	8000568 <__aeabi_dmul>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	f7f4 fd28 	bl	80001fc <__adddf3>
 800b7ac:	4622      	mov	r2, r4
 800b7ae:	462b      	mov	r3, r5
 800b7b0:	f7f4 feda 	bl	8000568 <__aeabi_dmul>
 800b7b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	d14b      	bne.n	800b856 <atan+0x25e>
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	f7f4 fd19 	bl	80001f8 <__aeabi_dsub>
 800b7c6:	e72c      	b.n	800b622 <atan+0x2a>
 800b7c8:	ee10 0a10 	vmov	r0, s0
 800b7cc:	4b53      	ldr	r3, [pc, #332]	; (800b91c <atan+0x324>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	f7f4 fd11 	bl	80001f8 <__aeabi_dsub>
 800b7d6:	4b51      	ldr	r3, [pc, #324]	; (800b91c <atan+0x324>)
 800b7d8:	4606      	mov	r6, r0
 800b7da:	460f      	mov	r7, r1
 800b7dc:	2200      	movs	r2, #0
 800b7de:	4620      	mov	r0, r4
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	f7f4 fd0b 	bl	80001fc <__adddf3>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	f7f4 ffe5 	bl	80007bc <__aeabi_ddiv>
 800b7f2:	f04f 0a01 	mov.w	sl, #1
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	e764      	b.n	800b6c6 <atan+0xce>
 800b7fc:	4b49      	ldr	r3, [pc, #292]	; (800b924 <atan+0x32c>)
 800b7fe:	429e      	cmp	r6, r3
 800b800:	da1d      	bge.n	800b83e <atan+0x246>
 800b802:	ee10 0a10 	vmov	r0, s0
 800b806:	4b48      	ldr	r3, [pc, #288]	; (800b928 <atan+0x330>)
 800b808:	2200      	movs	r2, #0
 800b80a:	4629      	mov	r1, r5
 800b80c:	f7f4 fcf4 	bl	80001f8 <__aeabi_dsub>
 800b810:	4b45      	ldr	r3, [pc, #276]	; (800b928 <atan+0x330>)
 800b812:	4606      	mov	r6, r0
 800b814:	460f      	mov	r7, r1
 800b816:	2200      	movs	r2, #0
 800b818:	4620      	mov	r0, r4
 800b81a:	4629      	mov	r1, r5
 800b81c:	f7f4 fea4 	bl	8000568 <__aeabi_dmul>
 800b820:	4b3e      	ldr	r3, [pc, #248]	; (800b91c <atan+0x324>)
 800b822:	2200      	movs	r2, #0
 800b824:	f7f4 fcea 	bl	80001fc <__adddf3>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f4 ffc4 	bl	80007bc <__aeabi_ddiv>
 800b834:	f04f 0a02 	mov.w	sl, #2
 800b838:	4604      	mov	r4, r0
 800b83a:	460d      	mov	r5, r1
 800b83c:	e743      	b.n	800b6c6 <atan+0xce>
 800b83e:	462b      	mov	r3, r5
 800b840:	ee10 2a10 	vmov	r2, s0
 800b844:	4939      	ldr	r1, [pc, #228]	; (800b92c <atan+0x334>)
 800b846:	2000      	movs	r0, #0
 800b848:	f7f4 ffb8 	bl	80007bc <__aeabi_ddiv>
 800b84c:	f04f 0a03 	mov.w	sl, #3
 800b850:	4604      	mov	r4, r0
 800b852:	460d      	mov	r5, r1
 800b854:	e737      	b.n	800b6c6 <atan+0xce>
 800b856:	4b36      	ldr	r3, [pc, #216]	; (800b930 <atan+0x338>)
 800b858:	4e36      	ldr	r6, [pc, #216]	; (800b934 <atan+0x33c>)
 800b85a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b85e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b862:	e9da 2300 	ldrd	r2, r3, [sl]
 800b866:	f7f4 fcc7 	bl	80001f8 <__aeabi_dsub>
 800b86a:	4622      	mov	r2, r4
 800b86c:	462b      	mov	r3, r5
 800b86e:	f7f4 fcc3 	bl	80001f8 <__aeabi_dsub>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b87a:	f7f4 fcbd 	bl	80001f8 <__aeabi_dsub>
 800b87e:	f1bb 0f00 	cmp.w	fp, #0
 800b882:	4604      	mov	r4, r0
 800b884:	460d      	mov	r5, r1
 800b886:	f6bf aed6 	bge.w	800b636 <atan+0x3e>
 800b88a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b88e:	461d      	mov	r5, r3
 800b890:	e6d1      	b.n	800b636 <atan+0x3e>
 800b892:	a51d      	add	r5, pc, #116	; (adr r5, 800b908 <atan+0x310>)
 800b894:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b898:	e6cd      	b.n	800b636 <atan+0x3e>
 800b89a:	bf00      	nop
 800b89c:	f3af 8000 	nop.w
 800b8a0:	54442d18 	.word	0x54442d18
 800b8a4:	bff921fb 	.word	0xbff921fb
 800b8a8:	8800759c 	.word	0x8800759c
 800b8ac:	7e37e43c 	.word	0x7e37e43c
 800b8b0:	e322da11 	.word	0xe322da11
 800b8b4:	3f90ad3a 	.word	0x3f90ad3a
 800b8b8:	24760deb 	.word	0x24760deb
 800b8bc:	3fa97b4b 	.word	0x3fa97b4b
 800b8c0:	a0d03d51 	.word	0xa0d03d51
 800b8c4:	3fb10d66 	.word	0x3fb10d66
 800b8c8:	c54c206e 	.word	0xc54c206e
 800b8cc:	3fb745cd 	.word	0x3fb745cd
 800b8d0:	920083ff 	.word	0x920083ff
 800b8d4:	3fc24924 	.word	0x3fc24924
 800b8d8:	5555550d 	.word	0x5555550d
 800b8dc:	3fd55555 	.word	0x3fd55555
 800b8e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b8e4:	bfa2b444 	.word	0xbfa2b444
 800b8e8:	52defd9a 	.word	0x52defd9a
 800b8ec:	3fadde2d 	.word	0x3fadde2d
 800b8f0:	af749a6d 	.word	0xaf749a6d
 800b8f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b8f8:	fe231671 	.word	0xfe231671
 800b8fc:	3fbc71c6 	.word	0x3fbc71c6
 800b900:	9998ebc4 	.word	0x9998ebc4
 800b904:	3fc99999 	.word	0x3fc99999
 800b908:	54442d18 	.word	0x54442d18
 800b90c:	3ff921fb 	.word	0x3ff921fb
 800b910:	440fffff 	.word	0x440fffff
 800b914:	7ff00000 	.word	0x7ff00000
 800b918:	3fdbffff 	.word	0x3fdbffff
 800b91c:	3ff00000 	.word	0x3ff00000
 800b920:	3ff2ffff 	.word	0x3ff2ffff
 800b924:	40038000 	.word	0x40038000
 800b928:	3ff80000 	.word	0x3ff80000
 800b92c:	bff00000 	.word	0xbff00000
 800b930:	0800bfc0 	.word	0x0800bfc0
 800b934:	0800bfa0 	.word	0x0800bfa0

0800b938 <fabs>:
 800b938:	ec51 0b10 	vmov	r0, r1, d0
 800b93c:	ee10 2a10 	vmov	r2, s0
 800b940:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b944:	ec43 2b10 	vmov	d0, r2, r3
 800b948:	4770      	bx	lr

0800b94a <atan2>:
 800b94a:	f000 b835 	b.w	800b9b8 <__ieee754_atan2>
	...

0800b950 <sqrt>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	ed2d 8b02 	vpush	{d8}
 800b956:	ec55 4b10 	vmov	r4, r5, d0
 800b95a:	f000 f8f7 	bl	800bb4c <__ieee754_sqrt>
 800b95e:	4b15      	ldr	r3, [pc, #84]	; (800b9b4 <sqrt+0x64>)
 800b960:	eeb0 8a40 	vmov.f32	s16, s0
 800b964:	eef0 8a60 	vmov.f32	s17, s1
 800b968:	f993 3000 	ldrsb.w	r3, [r3]
 800b96c:	3301      	adds	r3, #1
 800b96e:	d019      	beq.n	800b9a4 <sqrt+0x54>
 800b970:	4622      	mov	r2, r4
 800b972:	462b      	mov	r3, r5
 800b974:	4620      	mov	r0, r4
 800b976:	4629      	mov	r1, r5
 800b978:	f7f5 f890 	bl	8000a9c <__aeabi_dcmpun>
 800b97c:	b990      	cbnz	r0, 800b9a4 <sqrt+0x54>
 800b97e:	2200      	movs	r2, #0
 800b980:	2300      	movs	r3, #0
 800b982:	4620      	mov	r0, r4
 800b984:	4629      	mov	r1, r5
 800b986:	f7f5 f861 	bl	8000a4c <__aeabi_dcmplt>
 800b98a:	b158      	cbz	r0, 800b9a4 <sqrt+0x54>
 800b98c:	f7ff fe02 	bl	800b594 <__errno>
 800b990:	2321      	movs	r3, #33	; 0x21
 800b992:	6003      	str	r3, [r0, #0]
 800b994:	2200      	movs	r2, #0
 800b996:	2300      	movs	r3, #0
 800b998:	4610      	mov	r0, r2
 800b99a:	4619      	mov	r1, r3
 800b99c:	f7f4 ff0e 	bl	80007bc <__aeabi_ddiv>
 800b9a0:	ec41 0b18 	vmov	d8, r0, r1
 800b9a4:	eeb0 0a48 	vmov.f32	s0, s16
 800b9a8:	eef0 0a68 	vmov.f32	s1, s17
 800b9ac:	ecbd 8b02 	vpop	{d8}
 800b9b0:	bd38      	pop	{r3, r4, r5, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20000260 	.word	0x20000260

0800b9b8 <__ieee754_atan2>:
 800b9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9bc:	ec57 6b11 	vmov	r6, r7, d1
 800b9c0:	4273      	negs	r3, r6
 800b9c2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bb48 <__ieee754_atan2+0x190>
 800b9c6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b9ca:	4333      	orrs	r3, r6
 800b9cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b9d0:	4573      	cmp	r3, lr
 800b9d2:	ec51 0b10 	vmov	r0, r1, d0
 800b9d6:	ee11 8a10 	vmov	r8, s2
 800b9da:	d80a      	bhi.n	800b9f2 <__ieee754_atan2+0x3a>
 800b9dc:	4244      	negs	r4, r0
 800b9de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9e2:	4304      	orrs	r4, r0
 800b9e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b9e8:	4574      	cmp	r4, lr
 800b9ea:	ee10 9a10 	vmov	r9, s0
 800b9ee:	468c      	mov	ip, r1
 800b9f0:	d907      	bls.n	800ba02 <__ieee754_atan2+0x4a>
 800b9f2:	4632      	mov	r2, r6
 800b9f4:	463b      	mov	r3, r7
 800b9f6:	f7f4 fc01 	bl	80001fc <__adddf3>
 800b9fa:	ec41 0b10 	vmov	d0, r0, r1
 800b9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ba06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ba0a:	4334      	orrs	r4, r6
 800ba0c:	d103      	bne.n	800ba16 <__ieee754_atan2+0x5e>
 800ba0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba12:	f7ff bdf1 	b.w	800b5f8 <atan>
 800ba16:	17bc      	asrs	r4, r7, #30
 800ba18:	f004 0402 	and.w	r4, r4, #2
 800ba1c:	ea53 0909 	orrs.w	r9, r3, r9
 800ba20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ba24:	d107      	bne.n	800ba36 <__ieee754_atan2+0x7e>
 800ba26:	2c02      	cmp	r4, #2
 800ba28:	d060      	beq.n	800baec <__ieee754_atan2+0x134>
 800ba2a:	2c03      	cmp	r4, #3
 800ba2c:	d1e5      	bne.n	800b9fa <__ieee754_atan2+0x42>
 800ba2e:	a142      	add	r1, pc, #264	; (adr r1, 800bb38 <__ieee754_atan2+0x180>)
 800ba30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba34:	e7e1      	b.n	800b9fa <__ieee754_atan2+0x42>
 800ba36:	ea52 0808 	orrs.w	r8, r2, r8
 800ba3a:	d106      	bne.n	800ba4a <__ieee754_atan2+0x92>
 800ba3c:	f1bc 0f00 	cmp.w	ip, #0
 800ba40:	da5f      	bge.n	800bb02 <__ieee754_atan2+0x14a>
 800ba42:	a13f      	add	r1, pc, #252	; (adr r1, 800bb40 <__ieee754_atan2+0x188>)
 800ba44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba48:	e7d7      	b.n	800b9fa <__ieee754_atan2+0x42>
 800ba4a:	4572      	cmp	r2, lr
 800ba4c:	d10f      	bne.n	800ba6e <__ieee754_atan2+0xb6>
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ba54:	d107      	bne.n	800ba66 <__ieee754_atan2+0xae>
 800ba56:	2c02      	cmp	r4, #2
 800ba58:	d84c      	bhi.n	800baf4 <__ieee754_atan2+0x13c>
 800ba5a:	4b35      	ldr	r3, [pc, #212]	; (800bb30 <__ieee754_atan2+0x178>)
 800ba5c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ba60:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ba64:	e7c9      	b.n	800b9fa <__ieee754_atan2+0x42>
 800ba66:	2c02      	cmp	r4, #2
 800ba68:	d848      	bhi.n	800bafc <__ieee754_atan2+0x144>
 800ba6a:	4b32      	ldr	r3, [pc, #200]	; (800bb34 <__ieee754_atan2+0x17c>)
 800ba6c:	e7f6      	b.n	800ba5c <__ieee754_atan2+0xa4>
 800ba6e:	4573      	cmp	r3, lr
 800ba70:	d0e4      	beq.n	800ba3c <__ieee754_atan2+0x84>
 800ba72:	1a9b      	subs	r3, r3, r2
 800ba74:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ba78:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba7c:	da1e      	bge.n	800babc <__ieee754_atan2+0x104>
 800ba7e:	2f00      	cmp	r7, #0
 800ba80:	da01      	bge.n	800ba86 <__ieee754_atan2+0xce>
 800ba82:	323c      	adds	r2, #60	; 0x3c
 800ba84:	db1e      	blt.n	800bac4 <__ieee754_atan2+0x10c>
 800ba86:	4632      	mov	r2, r6
 800ba88:	463b      	mov	r3, r7
 800ba8a:	f7f4 fe97 	bl	80007bc <__aeabi_ddiv>
 800ba8e:	ec41 0b10 	vmov	d0, r0, r1
 800ba92:	f7ff ff51 	bl	800b938 <fabs>
 800ba96:	f7ff fdaf 	bl	800b5f8 <atan>
 800ba9a:	ec51 0b10 	vmov	r0, r1, d0
 800ba9e:	2c01      	cmp	r4, #1
 800baa0:	d013      	beq.n	800baca <__ieee754_atan2+0x112>
 800baa2:	2c02      	cmp	r4, #2
 800baa4:	d015      	beq.n	800bad2 <__ieee754_atan2+0x11a>
 800baa6:	2c00      	cmp	r4, #0
 800baa8:	d0a7      	beq.n	800b9fa <__ieee754_atan2+0x42>
 800baaa:	a319      	add	r3, pc, #100	; (adr r3, 800bb10 <__ieee754_atan2+0x158>)
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	f7f4 fba2 	bl	80001f8 <__aeabi_dsub>
 800bab4:	a318      	add	r3, pc, #96	; (adr r3, 800bb18 <__ieee754_atan2+0x160>)
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	e014      	b.n	800bae6 <__ieee754_atan2+0x12e>
 800babc:	a118      	add	r1, pc, #96	; (adr r1, 800bb20 <__ieee754_atan2+0x168>)
 800babe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bac2:	e7ec      	b.n	800ba9e <__ieee754_atan2+0xe6>
 800bac4:	2000      	movs	r0, #0
 800bac6:	2100      	movs	r1, #0
 800bac8:	e7e9      	b.n	800ba9e <__ieee754_atan2+0xe6>
 800baca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bace:	4619      	mov	r1, r3
 800bad0:	e793      	b.n	800b9fa <__ieee754_atan2+0x42>
 800bad2:	a30f      	add	r3, pc, #60	; (adr r3, 800bb10 <__ieee754_atan2+0x158>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	f7f4 fb8e 	bl	80001f8 <__aeabi_dsub>
 800badc:	4602      	mov	r2, r0
 800bade:	460b      	mov	r3, r1
 800bae0:	a10d      	add	r1, pc, #52	; (adr r1, 800bb18 <__ieee754_atan2+0x160>)
 800bae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae6:	f7f4 fb87 	bl	80001f8 <__aeabi_dsub>
 800baea:	e786      	b.n	800b9fa <__ieee754_atan2+0x42>
 800baec:	a10a      	add	r1, pc, #40	; (adr r1, 800bb18 <__ieee754_atan2+0x160>)
 800baee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf2:	e782      	b.n	800b9fa <__ieee754_atan2+0x42>
 800baf4:	a10c      	add	r1, pc, #48	; (adr r1, 800bb28 <__ieee754_atan2+0x170>)
 800baf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bafa:	e77e      	b.n	800b9fa <__ieee754_atan2+0x42>
 800bafc:	2000      	movs	r0, #0
 800bafe:	2100      	movs	r1, #0
 800bb00:	e77b      	b.n	800b9fa <__ieee754_atan2+0x42>
 800bb02:	a107      	add	r1, pc, #28	; (adr r1, 800bb20 <__ieee754_atan2+0x168>)
 800bb04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb08:	e777      	b.n	800b9fa <__ieee754_atan2+0x42>
 800bb0a:	bf00      	nop
 800bb0c:	f3af 8000 	nop.w
 800bb10:	33145c07 	.word	0x33145c07
 800bb14:	3ca1a626 	.word	0x3ca1a626
 800bb18:	54442d18 	.word	0x54442d18
 800bb1c:	400921fb 	.word	0x400921fb
 800bb20:	54442d18 	.word	0x54442d18
 800bb24:	3ff921fb 	.word	0x3ff921fb
 800bb28:	54442d18 	.word	0x54442d18
 800bb2c:	3fe921fb 	.word	0x3fe921fb
 800bb30:	0800bfe0 	.word	0x0800bfe0
 800bb34:	0800bff8 	.word	0x0800bff8
 800bb38:	54442d18 	.word	0x54442d18
 800bb3c:	c00921fb 	.word	0xc00921fb
 800bb40:	54442d18 	.word	0x54442d18
 800bb44:	bff921fb 	.word	0xbff921fb
 800bb48:	7ff00000 	.word	0x7ff00000

0800bb4c <__ieee754_sqrt>:
 800bb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb50:	ec55 4b10 	vmov	r4, r5, d0
 800bb54:	4e56      	ldr	r6, [pc, #344]	; (800bcb0 <__ieee754_sqrt+0x164>)
 800bb56:	43ae      	bics	r6, r5
 800bb58:	ee10 0a10 	vmov	r0, s0
 800bb5c:	ee10 3a10 	vmov	r3, s0
 800bb60:	4629      	mov	r1, r5
 800bb62:	462a      	mov	r2, r5
 800bb64:	d110      	bne.n	800bb88 <__ieee754_sqrt+0x3c>
 800bb66:	ee10 2a10 	vmov	r2, s0
 800bb6a:	462b      	mov	r3, r5
 800bb6c:	f7f4 fcfc 	bl	8000568 <__aeabi_dmul>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	4620      	mov	r0, r4
 800bb76:	4629      	mov	r1, r5
 800bb78:	f7f4 fb40 	bl	80001fc <__adddf3>
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	460d      	mov	r5, r1
 800bb80:	ec45 4b10 	vmov	d0, r4, r5
 800bb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb88:	2d00      	cmp	r5, #0
 800bb8a:	dc10      	bgt.n	800bbae <__ieee754_sqrt+0x62>
 800bb8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bb90:	4330      	orrs	r0, r6
 800bb92:	d0f5      	beq.n	800bb80 <__ieee754_sqrt+0x34>
 800bb94:	b15d      	cbz	r5, 800bbae <__ieee754_sqrt+0x62>
 800bb96:	ee10 2a10 	vmov	r2, s0
 800bb9a:	462b      	mov	r3, r5
 800bb9c:	ee10 0a10 	vmov	r0, s0
 800bba0:	f7f4 fb2a 	bl	80001f8 <__aeabi_dsub>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	f7f4 fe08 	bl	80007bc <__aeabi_ddiv>
 800bbac:	e7e6      	b.n	800bb7c <__ieee754_sqrt+0x30>
 800bbae:	1509      	asrs	r1, r1, #20
 800bbb0:	d076      	beq.n	800bca0 <__ieee754_sqrt+0x154>
 800bbb2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bbb6:	07ce      	lsls	r6, r1, #31
 800bbb8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bbbc:	bf5e      	ittt	pl
 800bbbe:	0fda      	lsrpl	r2, r3, #31
 800bbc0:	005b      	lslpl	r3, r3, #1
 800bbc2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bbc6:	0fda      	lsrs	r2, r3, #31
 800bbc8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bbcc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	106d      	asrs	r5, r5, #1
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	f04f 0e16 	mov.w	lr, #22
 800bbda:	4684      	mov	ip, r0
 800bbdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbe0:	eb0c 0401 	add.w	r4, ip, r1
 800bbe4:	4294      	cmp	r4, r2
 800bbe6:	bfde      	ittt	le
 800bbe8:	1b12      	suble	r2, r2, r4
 800bbea:	eb04 0c01 	addle.w	ip, r4, r1
 800bbee:	1840      	addle	r0, r0, r1
 800bbf0:	0052      	lsls	r2, r2, #1
 800bbf2:	f1be 0e01 	subs.w	lr, lr, #1
 800bbf6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bbfa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bbfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc02:	d1ed      	bne.n	800bbe0 <__ieee754_sqrt+0x94>
 800bc04:	4671      	mov	r1, lr
 800bc06:	2720      	movs	r7, #32
 800bc08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bc0c:	4562      	cmp	r2, ip
 800bc0e:	eb04 060e 	add.w	r6, r4, lr
 800bc12:	dc02      	bgt.n	800bc1a <__ieee754_sqrt+0xce>
 800bc14:	d113      	bne.n	800bc3e <__ieee754_sqrt+0xf2>
 800bc16:	429e      	cmp	r6, r3
 800bc18:	d811      	bhi.n	800bc3e <__ieee754_sqrt+0xf2>
 800bc1a:	2e00      	cmp	r6, #0
 800bc1c:	eb06 0e04 	add.w	lr, r6, r4
 800bc20:	da43      	bge.n	800bcaa <__ieee754_sqrt+0x15e>
 800bc22:	f1be 0f00 	cmp.w	lr, #0
 800bc26:	db40      	blt.n	800bcaa <__ieee754_sqrt+0x15e>
 800bc28:	f10c 0801 	add.w	r8, ip, #1
 800bc2c:	eba2 020c 	sub.w	r2, r2, ip
 800bc30:	429e      	cmp	r6, r3
 800bc32:	bf88      	it	hi
 800bc34:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800bc38:	1b9b      	subs	r3, r3, r6
 800bc3a:	4421      	add	r1, r4
 800bc3c:	46c4      	mov	ip, r8
 800bc3e:	0052      	lsls	r2, r2, #1
 800bc40:	3f01      	subs	r7, #1
 800bc42:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bc46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bc4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc4e:	d1dd      	bne.n	800bc0c <__ieee754_sqrt+0xc0>
 800bc50:	4313      	orrs	r3, r2
 800bc52:	d006      	beq.n	800bc62 <__ieee754_sqrt+0x116>
 800bc54:	1c4c      	adds	r4, r1, #1
 800bc56:	bf13      	iteet	ne
 800bc58:	3101      	addne	r1, #1
 800bc5a:	3001      	addeq	r0, #1
 800bc5c:	4639      	moveq	r1, r7
 800bc5e:	f021 0101 	bicne.w	r1, r1, #1
 800bc62:	1043      	asrs	r3, r0, #1
 800bc64:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bc68:	0849      	lsrs	r1, r1, #1
 800bc6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bc6e:	07c2      	lsls	r2, r0, #31
 800bc70:	bf48      	it	mi
 800bc72:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bc76:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	463d      	mov	r5, r7
 800bc7e:	e77f      	b.n	800bb80 <__ieee754_sqrt+0x34>
 800bc80:	0ada      	lsrs	r2, r3, #11
 800bc82:	3815      	subs	r0, #21
 800bc84:	055b      	lsls	r3, r3, #21
 800bc86:	2a00      	cmp	r2, #0
 800bc88:	d0fa      	beq.n	800bc80 <__ieee754_sqrt+0x134>
 800bc8a:	02d7      	lsls	r7, r2, #11
 800bc8c:	d50a      	bpl.n	800bca4 <__ieee754_sqrt+0x158>
 800bc8e:	f1c1 0420 	rsb	r4, r1, #32
 800bc92:	fa23 f404 	lsr.w	r4, r3, r4
 800bc96:	1e4d      	subs	r5, r1, #1
 800bc98:	408b      	lsls	r3, r1
 800bc9a:	4322      	orrs	r2, r4
 800bc9c:	1b41      	subs	r1, r0, r5
 800bc9e:	e788      	b.n	800bbb2 <__ieee754_sqrt+0x66>
 800bca0:	4608      	mov	r0, r1
 800bca2:	e7f0      	b.n	800bc86 <__ieee754_sqrt+0x13a>
 800bca4:	0052      	lsls	r2, r2, #1
 800bca6:	3101      	adds	r1, #1
 800bca8:	e7ef      	b.n	800bc8a <__ieee754_sqrt+0x13e>
 800bcaa:	46e0      	mov	r8, ip
 800bcac:	e7be      	b.n	800bc2c <__ieee754_sqrt+0xe0>
 800bcae:	bf00      	nop
 800bcb0:	7ff00000 	.word	0x7ff00000

0800bcb4 <_init>:
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	bf00      	nop
 800bcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcba:	bc08      	pop	{r3}
 800bcbc:	469e      	mov	lr, r3
 800bcbe:	4770      	bx	lr

0800bcc0 <_fini>:
 800bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc2:	bf00      	nop
 800bcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcc6:	bc08      	pop	{r3}
 800bcc8:	469e      	mov	lr, r3
 800bcca:	4770      	bx	lr
