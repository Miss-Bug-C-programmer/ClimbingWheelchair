
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e9c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007048  08007048  00017048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007068  08007068  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007070  08007070  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007070  08007070  00017070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08007078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  200000e0  08007158  000200e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08007158  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c693  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003820  00000000  00000000  0003c7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0003ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  00041430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004808  00000000  00000000  00042728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abd5  00000000  00000000  00046f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3a47  00000000  00000000  00061b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014554c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  001455a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000e0 	.word	0x200000e0
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007030 	.word	0x08007030

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000e4 	.word	0x200000e4
 80001e8:	08007030 	.word	0x08007030

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <BatteryInit>:


uint8_t send_buf[7] = {0};


void BatteryInit(batteryHandler* battery_handler, UART_HandleTypeDef* huart){
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	battery_handler->huart = huart;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	601a      	str	r2, [r3, #0]
	battery_handler->battery_info.total_voltage = 0;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	809a      	strh	r2, [r3, #4]
	battery_handler->battery_info.current = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	80da      	strh	r2, [r3, #6]
	battery_handler->battery_info.remaining_capacity = 0;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2200      	movs	r2, #0
 8000504:	811a      	strh	r2, [r3, #8]
	battery_handler->battery_info.nominal_capacity = 0;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	815a      	strh	r2, [r3, #10]
	battery_handler->battery_info.cycles = 0;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2200      	movs	r2, #0
 8000510:	819a      	strh	r2, [r3, #12]
	battery_handler->battery_info.production_date = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	81da      	strh	r2, [r3, #14]
	battery_handler->battery_info.balanced_state[0] = 0;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	821a      	strh	r2, [r3, #16]
	battery_handler->battery_info.balanced_state[1] = 0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	825a      	strh	r2, [r3, #18]
	battery_handler->battery_info.protection_state = 0;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	829a      	strh	r2, [r3, #20]
	battery_handler->battery_info.software_version = 0;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	759a      	strb	r2, [r3, #22]
	battery_handler->battery_info.remaining_capacity_RSOC = 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	75da      	strb	r2, [r3, #23]
	battery_handler->battery_info.FET_control_status = 0;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	761a      	strb	r2, [r3, #24]
	battery_handler->battery_info.battery_number = 0;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	765a      	strb	r2, [r3, #25]
	battery_handler->battery_info.NTC_number = 0;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	769a      	strb	r2, [r3, #26]
	battery_handler->battery_info.NTC_content = NULL;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <getBatteryState>:
	free(battery_handler->huart);
	free(battery_handler->battery_info.NTC_content);

}

void getBatteryState(batteryHandler* battery_handler){
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	send_buf[0] = SOI;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <getBatteryState+0x60>)
 8000566:	22dd      	movs	r2, #221	; 0xdd
 8000568:	701a      	strb	r2, [r3, #0]
	send_buf[1] = BATTERY_READ;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <getBatteryState+0x60>)
 800056c:	22a5      	movs	r2, #165	; 0xa5
 800056e:	705a      	strb	r2, [r3, #1]
	send_buf[2] = BATTERY_BASIC_STATE;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <getBatteryState+0x60>)
 8000572:	2203      	movs	r2, #3
 8000574:	709a      	strb	r2, [r3, #2]
	send_buf[3] = 0x00; //Length of info desired, 0 if want to get all info
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <getBatteryState+0x60>)
 8000578:	2200      	movs	r2, #0
 800057a:	70da      	strb	r2, [r3, #3]
	uint16_t checksum = CalculateCheckSum(send_buf, SEND_COMMAND_IDX, SEND_LENGTH_IDX);
 800057c:	2203      	movs	r2, #3
 800057e:	2102      	movs	r1, #2
 8000580:	480e      	ldr	r0, [pc, #56]	; (80005bc <getBatteryState+0x60>)
 8000582:	f000 f97c 	bl	800087e <CalculateCheckSum>
 8000586:	4603      	mov	r3, r0
 8000588:	81fb      	strh	r3, [r7, #14]
	send_buf[4] = (checksum >> 8) & 0xFF;
 800058a:	89fb      	ldrh	r3, [r7, #14]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	b29b      	uxth	r3, r3
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <getBatteryState+0x60>)
 8000594:	711a      	strb	r2, [r3, #4]
	send_buf[5] = checksum & 0xFF;
 8000596:	89fb      	ldrh	r3, [r7, #14]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <getBatteryState+0x60>)
 800059c:	715a      	strb	r2, [r3, #5]
	send_buf[6] = EOI;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <getBatteryState+0x60>)
 80005a0:	2277      	movs	r2, #119	; 0x77
 80005a2:	719a      	strb	r2, [r3, #6]
//	HAL_UART_Transmit(battery_handler->huart, send_buf, sizeof(send_buf),10);

	HAL_UART_Transmit_DMA(battery_handler->huart, send_buf, sizeof(send_buf));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2207      	movs	r2, #7
 80005aa:	4904      	ldr	r1, [pc, #16]	; (80005bc <getBatteryState+0x60>)
 80005ac:	4618      	mov	r0, r3
 80005ae:	f005 fae7 	bl	8005b80 <HAL_UART_Transmit_DMA>
//	uint8_t send_buf1 = 0xff;
//	HAL_UART_Transmit_DMA(battery_handler->huart, &send_buf1, 1);
//	HAL_UART_Transmit(battery_handler->huart, (uint8_t*)send_buf1, 1,10);
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000fc 	.word	0x200000fc

080005c0 <ReadBatteryState>:

void ReadBatteryState(batteryHandler* battery_handler, uint8_t receive_buf[]){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
	//Last index number in buffer
	uint8_t end_idx = REPLY_TOTAL_VOLTAGE_IDX + receive_buf[REPLY_LENGTH_IDX] + 2; //2 is account for checksum byte
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	3303      	adds	r3, #3
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	3306      	adds	r3, #6
 80005d2:	74fb      	strb	r3, [r7, #19]
	//check receive start, r/w state. flag and end buffer
	uint8_t tmp1 = (receive_buf[0] == SOI);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2bdd      	cmp	r3, #221	; 0xdd
 80005da:	bf0c      	ite	eq
 80005dc:	2301      	moveq	r3, #1
 80005de:	2300      	movne	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	74bb      	strb	r3, [r7, #18]
	uint8_t tmp2 = (receive_buf[end_idx] == EOI);
 80005e4:	7cfb      	ldrb	r3, [r7, #19]
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	4413      	add	r3, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b77      	cmp	r3, #119	; 0x77
 80005ee:	bf0c      	ite	eq
 80005f0:	2301      	moveq	r3, #1
 80005f2:	2300      	movne	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	747b      	strb	r3, [r7, #17]
	uint8_t tmp3 = ((receive_buf[1] == BATTERY_BASIC_STATE || receive_buf[1] == BATTERY_READ));
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d004      	beq.n	800060c <ReadBatteryState+0x4c>
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2ba5      	cmp	r3, #165	; 0xa5
 800060a:	d101      	bne.n	8000610 <ReadBatteryState+0x50>
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <ReadBatteryState+0x52>
 8000610:	2300      	movs	r3, #0
 8000612:	743b      	strb	r3, [r7, #16]
	if (!(tmp1 && tmp2 && tmp3))
 8000614:	7cbb      	ldrb	r3, [r7, #18]
 8000616:	2b00      	cmp	r3, #0
 8000618:	f000 812b 	beq.w	8000872 <ReadBatteryState+0x2b2>
 800061c:	7c7b      	ldrb	r3, [r7, #17]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 8127 	beq.w	8000872 <ReadBatteryState+0x2b2>
 8000624:	7c3b      	ldrb	r3, [r7, #16]
 8000626:	2b00      	cmp	r3, #0
 8000628:	f000 8123 	beq.w	8000872 <ReadBatteryState+0x2b2>
		return;

	//Checksum_end_idx need to consider the length received from reply,
	uint8_t checksum_end_idx = REPLY_TOTAL_VOLTAGE_IDX + receive_buf[REPLY_LENGTH_IDX] - 1;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	3303      	adds	r3, #3
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3303      	adds	r3, #3
 8000634:	73fb      	strb	r3, [r7, #15]
	uint16_t checksum = CalculateCheckSum(receive_buf, REPLY_FLAG_IDX, checksum_end_idx);
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	461a      	mov	r2, r3
 800063a:	2102      	movs	r1, #2
 800063c:	6838      	ldr	r0, [r7, #0]
 800063e:	f000 f91e 	bl	800087e <CalculateCheckSum>
 8000642:	4603      	mov	r3, r0
 8000644:	81bb      	strh	r3, [r7, #12]
	//Check the last second and third byte, if doesnt match the check sum, dispose the data
	if (	receive_buf[REPLY_TOTAL_VOLTAGE_IDX + receive_buf[REPLY_LENGTH_IDX] 	  ] != ((checksum >> 8) & 0xFF) ||
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	3303      	adds	r3, #3
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3304      	adds	r3, #4
 800064e:	461a      	mov	r2, r3
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	89bb      	ldrh	r3, [r7, #12]
 800065a:	0a1b      	lsrs	r3, r3, #8
 800065c:	b29b      	uxth	r3, r3
 800065e:	b2db      	uxtb	r3, r3
 8000660:	429a      	cmp	r2, r3
 8000662:	f040 8108 	bne.w	8000876 <ReadBatteryState+0x2b6>
			receive_buf[REPLY_TOTAL_VOLTAGE_IDX + receive_buf[REPLY_LENGTH_IDX] +1 ] != (checksum & 0xFF)	)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	3303      	adds	r3, #3
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3305      	adds	r3, #5
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	89bb      	ldrh	r3, [r7, #12]
 8000678:	b2db      	uxtb	r3, r3
	if (	receive_buf[REPLY_TOTAL_VOLTAGE_IDX + receive_buf[REPLY_LENGTH_IDX] 	  ] != ((checksum >> 8) & 0xFF) ||
 800067a:	429a      	cmp	r2, r3
 800067c:	f040 80fb 	bne.w	8000876 <ReadBatteryState+0x2b6>
			return;

	battery_handler->battery_info.total_voltage = (receive_buf[REPLY_TOTAL_VOLTAGE_IDX] << 8) | receive_buf[REPLY_TOTAL_VOLTAGE_IDX+1];
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	3304      	adds	r3, #4
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	b21a      	sxth	r2, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	3305      	adds	r3, #5
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29a      	uxth	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	809a      	strh	r2, [r3, #4]
	battery_handler->battery_info.current = (receive_buf[REPLY_CURRENT_IDX] << 8) | receive_buf[REPLY_CURRENT_IDX+1];
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	3306      	adds	r3, #6
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	3307      	adds	r3, #7
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	80da      	strh	r2, [r3, #6]
	battery_handler->battery_info.remaining_capacity = (receive_buf[REPLY_REMAINING_CAPACITY_IDX] << 8) | receive_buf[REPLY_REMAINING_CAPACITY_IDX+1];
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	3308      	adds	r3, #8
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	3309      	adds	r3, #9
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	811a      	strh	r2, [r3, #8]
	battery_handler->battery_info.nominal_capacity = (receive_buf[REPLY_NOMINAL_CAPACITY_IDX] << 8) | receive_buf[REPLY_NOMINAL_CAPACITY_IDX+1];
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	330a      	adds	r3, #10
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	021b      	lsls	r3, r3, #8
 80006dc:	b21a      	sxth	r2, r3
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	330b      	adds	r3, #11
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	815a      	strh	r2, [r3, #10]
	battery_handler->battery_info.cycles = (receive_buf[REPLY_CYCLES_IDX] << 8) | receive_buf[REPLY_CYCLES_IDX+1];
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	330c      	adds	r3, #12
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	330d      	adds	r3, #13
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b21b      	sxth	r3, r3
 8000702:	4313      	orrs	r3, r2
 8000704:	b21b      	sxth	r3, r3
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	819a      	strh	r2, [r3, #12]
	battery_handler->battery_info.production_date = (receive_buf[REPLY_PRODUCTION_DATE_IDX] << 8) | receive_buf[REPLY_PRODUCTION_DATE_IDX+1];
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	330e      	adds	r3, #14
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	b21a      	sxth	r2, r3
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	330f      	adds	r3, #15
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b21b      	sxth	r3, r3
 800071e:	4313      	orrs	r3, r2
 8000720:	b21b      	sxth	r3, r3
 8000722:	b29a      	uxth	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	81da      	strh	r2, [r3, #14]
	battery_handler->battery_info.balanced_state[0] = (receive_buf[REPLY_BALANCE_LOW_IDX] << 8) | receive_buf[REPLY_BALANCE_LOW_IDX+1];
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	3310      	adds	r3, #16
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b21a      	sxth	r2, r3
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	3311      	adds	r3, #17
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b21b      	sxth	r3, r3
 800073e:	b29a      	uxth	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	821a      	strh	r2, [r3, #16]
	battery_handler->battery_info.balanced_state[1] = (receive_buf[REPLY_BALANCE_HIGH_IDX] << 8) | receive_buf[REPLY_BALANCE_HIGH_IDX+1];
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	3312      	adds	r3, #18
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b21a      	sxth	r2, r3
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	3313      	adds	r3, #19
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29a      	uxth	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	825a      	strh	r2, [r3, #18]
	battery_handler->battery_info.protection_state = (receive_buf[REPLY_PROTECTION_IDX] << 8) | receive_buf[REPLY_PROTECTION_IDX+1];
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	3314      	adds	r3, #20
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	b21a      	sxth	r2, r3
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	3315      	adds	r3, #21
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b21b      	sxth	r3, r3
 8000772:	4313      	orrs	r3, r2
 8000774:	b21b      	sxth	r3, r3
 8000776:	b29a      	uxth	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	829a      	strh	r2, [r3, #20]
	battery_handler->battery_info.software_version = receive_buf[REPLY_SOFTWARE_IDX];
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	7d9a      	ldrb	r2, [r3, #22]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	759a      	strb	r2, [r3, #22]
	battery_handler->battery_info.remaining_capacity_RSOC = receive_buf[REPLY_REMAINING_CAPACITY_PERCENTAGE_IDX];
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	7dda      	ldrb	r2, [r3, #23]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	75da      	strb	r2, [r3, #23]
	battery_handler->battery_info.FET_control_status = receive_buf[REPLY_FET_CONTROL_IDX];
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	7e1a      	ldrb	r2, [r3, #24]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	761a      	strb	r2, [r3, #24]
	battery_handler->battery_info.battery_number = receive_buf[REPLY_BATTERY_IDX];
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	7e5a      	ldrb	r2, [r3, #25]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	765a      	strb	r2, [r3, #25]
	//Check if NTC number is the same
	//For first iteration
	if (battery_handler->battery_info.NTC_number == 0){
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7e9b      	ldrb	r3, [r3, #26]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d10e      	bne.n	80007c2 <ReadBatteryState+0x202>
		battery_handler->battery_info.NTC_number = receive_buf[REPLY_NTC_IDX];
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	7e9a      	ldrb	r2, [r3, #26]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	769a      	strb	r2, [r3, #26]
		battery_handler->battery_info.NTC_content = (uint16_t*)malloc(battery_handler->battery_info.NTC_number*sizeof(uint16_t));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7e9b      	ldrb	r3, [r3, #26]
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	4618      	mov	r0, r3
 80007b4:	f006 fb20 	bl	8006df8 <malloc>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	61da      	str	r2, [r3, #28]
 80007c0:	e026      	b.n	8000810 <ReadBatteryState+0x250>
	}
	//for second onward iteration
	//Check if NTC number is the same, do nothing
	else if (battery_handler->battery_info.NTC_number == receive_buf[REPLY_NTC_IDX]){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7e9a      	ldrb	r2, [r3, #26]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	331a      	adds	r3, #26
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d104      	bne.n	80007da <ReadBatteryState+0x21a>
		battery_handler->battery_info.NTC_number = receive_buf[REPLY_NTC_IDX];
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	7e9a      	ldrb	r2, [r3, #26]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	769a      	strb	r2, [r3, #26]
 80007d8:	e01a      	b.n	8000810 <ReadBatteryState+0x250>
	}
	//Check if NTC is different
	//realloc memory to change the size of array
	else if (battery_handler->battery_info.NTC_number != receive_buf[REPLY_NTC_IDX]){
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7e9a      	ldrb	r2, [r3, #26]
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	331a      	adds	r3, #26
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d013      	beq.n	8000810 <ReadBatteryState+0x250>
		if(battery_handler->battery_info.NTC_content != NULL){
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00f      	beq.n	8000810 <ReadBatteryState+0x250>
			battery_handler->battery_info.NTC_number = receive_buf[REPLY_NTC_IDX];
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	7e9a      	ldrb	r2, [r3, #26]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	769a      	strb	r2, [r3, #26]
			battery_handler->battery_info.NTC_content = realloc(battery_handler->battery_info.NTC_content, battery_handler->battery_info.NTC_number*sizeof(uint16_t));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	69da      	ldr	r2, [r3, #28]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	7e9b      	ldrb	r3, [r3, #26]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4619      	mov	r1, r3
 8000804:	4610      	mov	r0, r2
 8000806:	f006 fbb1 	bl	8006f6c <realloc>
 800080a:	4602      	mov	r2, r0
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	61da      	str	r2, [r3, #28]
		}
	}
	for(int i = 0; i <= battery_handler->battery_info.NTC_number; i++){
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e026      	b.n	8000864 <ReadBatteryState+0x2a4>
		battery_handler->battery_info.NTC_content[i] =  (receive_buf[REPLY_NTC_CONTENT_IDX + 2*i] << 8) & 0xFF00;
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	331b      	adds	r3, #27
 800081c:	461a      	mov	r2, r3
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	0219      	lsls	r1, r3, #8
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	69da      	ldr	r2, [r3, #28]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	b28a      	uxth	r2, r1
 8000832:	801a      	strh	r2, [r3, #0]
		battery_handler->battery_info.NTC_content[i] |=  receive_buf[REPLY_NTC_CONTENT_IDX + 2*i + 1] & 0x00FF;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	69da      	ldr	r2, [r3, #28]
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	8819      	ldrh	r1, [r3, #0]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	331c      	adds	r3, #28
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b29a      	uxth	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	69d8      	ldr	r0, [r3, #28]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4403      	add	r3, r0
 8000858:	430a      	orrs	r2, r1
 800085a:	b292      	uxth	r2, r2
 800085c:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= battery_handler->battery_info.NTC_number; i++){
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7e9b      	ldrb	r3, [r3, #26]
 8000868:	461a      	mov	r2, r3
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	4293      	cmp	r3, r2
 800086e:	ddd2      	ble.n	8000816 <ReadBatteryState+0x256>
 8000870:	e002      	b.n	8000878 <ReadBatteryState+0x2b8>
		return;
 8000872:	bf00      	nop
 8000874:	e000      	b.n	8000878 <ReadBatteryState+0x2b8>
			return;
 8000876:	bf00      	nop
	}

}
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <CalculateCheckSum>:

uint16_t CalculateCheckSum(uint8_t buf[], int start_pos, int end_pos){
 800087e:	b480      	push	{r7}
 8000880:	b087      	sub	sp, #28
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	uint16_t checksum =0;
 800088a:	2300      	movs	r3, #0
 800088c:	82fb      	strh	r3, [r7, #22]
	for(int i = start_pos; i <= end_pos; i++){
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	e00a      	b.n	80008aa <CalculateCheckSum+0x2c>
		checksum += (uint16_t)buf[i];
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b29a      	uxth	r2, r3
 800089e:	8afb      	ldrh	r3, [r7, #22]
 80008a0:	4413      	add	r3, r2
 80008a2:	82fb      	strh	r3, [r7, #22]
	for(int i = start_pos; i <= end_pos; i++){
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	3301      	adds	r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	ddf0      	ble.n	8000894 <CalculateCheckSum+0x16>
	}
	//Formula given by datasheet
	checksum = 0xFFFF - checksum + 1;
 80008b2:	8afb      	ldrh	r3, [r7, #22]
 80008b4:	425b      	negs	r3, r3
 80008b6:	82fb      	strh	r3, [r7, #22]
	return checksum;
 80008b8:	8afb      	ldrh	r3, [r7, #22]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	889b      	ldrh	r3, [r3, #4]
 80008d8:	4619      	mov	r1, r3
 80008da:	4610      	mov	r0, r2
 80008dc:	f002 fef2 	bl	80036c4 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	799a      	ldrb	r2, [r3, #6]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	79db      	ldrb	r3, [r3, #7]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d004      	beq.n	80008fe <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 80008f4:	f001 fb5a 	bl	8001fac <HAL_GetTick>
 80008f8:	4602      	mov	r2, r0
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 80008fe:	f001 fb55 	bl	8001fac <HAL_GetTick>
 8000902:	4602      	mov	r2, r0
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d209      	bcs.n	8000924 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	799a      	ldrb	r2, [r3, #6]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7a1b      	ldrb	r3, [r3, #8]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d101      	bne.n	8000924 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8000920:	2301      	movs	r3, #1
 8000922:	e004      	b.n	800092e <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	799a      	ldrb	r2, [r3, #6]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800093e:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <MX_CAN1_Init+0xc8>)
 8000940:	4a30      	ldr	r2, [pc, #192]	; (8000a04 <MX_CAN1_Init+0xcc>)
 8000942:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000944:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <MX_CAN1_Init+0xc8>)
 8000946:	2209      	movs	r2, #9
 8000948:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <MX_CAN1_Init+0xc8>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000950:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <MX_CAN1_Init+0xc8>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000956:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <MX_CAN1_Init+0xc8>)
 8000958:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800095c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <MX_CAN1_Init+0xc8>)
 8000960:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000964:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <MX_CAN1_Init+0xc8>)
 8000968:	2200      	movs	r2, #0
 800096a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800096c:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <MX_CAN1_Init+0xc8>)
 800096e:	2200      	movs	r2, #0
 8000970:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000972:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <MX_CAN1_Init+0xc8>)
 8000974:	2200      	movs	r2, #0
 8000976:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000978:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <MX_CAN1_Init+0xc8>)
 800097a:	2200      	movs	r2, #0
 800097c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800097e:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <MX_CAN1_Init+0xc8>)
 8000980:	2200      	movs	r2, #0
 8000982:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_CAN1_Init+0xc8>)
 8000986:	2200      	movs	r2, #0
 8000988:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800098a:	481d      	ldr	r0, [pc, #116]	; (8000a00 <MX_CAN1_Init+0xc8>)
 800098c:	f001 fb3e 	bl	800200c <HAL_CAN_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000996:	f000 fd89 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil_1;
	canfil_1.FilterBank = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61fb      	str	r3, [r7, #28]
	canfil_1.FilterIdHigh = 0x0000;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
	canfil_1.FilterIdLow = 0x0000;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
	canfil_1.SlaveStartFilterBank = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	480e      	ldr	r0, [pc, #56]	; (8000a00 <MX_CAN1_Init+0xc8>)
 80009c8:	f001 fc1c 	bl	8002204 <HAL_CAN_ConfigFilter>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_CAN1_Init+0x9e>
				Error_Handler();
 80009d2:	f000 fd6b 	bl	80014ac <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 80009d6:	2102      	movs	r1, #2
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <MX_CAN1_Init+0xc8>)
 80009da:	f001 fd37 	bl	800244c <HAL_CAN_ActivateNotification>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <MX_CAN1_Init+0xb2>
				return Error_Handler();
 80009e4:	f000 fd62 	bl	80014ac <Error_Handler>
 80009e8:	e007      	b.n	80009fa <MX_CAN1_Init+0xc2>

	if (HAL_CAN_Start(&hcan1))
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_CAN1_Init+0xc8>)
 80009ec:	f001 fcea 	bl	80023c4 <HAL_CAN_Start>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_CAN1_Init+0xc2>
					return Error_Handler();
 80009f6:	f000 fd59 	bl	80014ac <Error_Handler>


  /* USER CODE END CAN1_Init 2 */

}
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2000016c 	.word	0x2000016c
 8000a04:	40006400 	.word	0x40006400

08000a08 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <HAL_CAN_MspInit+0x94>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d133      	bne.n	8000a92 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <HAL_CAN_MspInit+0x98>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <HAL_CAN_MspInit+0x98>)
 8000a34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_CAN_MspInit+0x98>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_CAN_MspInit+0x98>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_CAN_MspInit+0x98>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_CAN_MspInit+0x98>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a62:	2303      	movs	r3, #3
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a72:	2309      	movs	r3, #9
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <HAL_CAN_MspInit+0x9c>)
 8000a7e:	f002 fc75 	bl	800336c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	2014      	movs	r0, #20
 8000a88:	f002 f81b 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a8c:	2014      	movs	r0, #20
 8000a8e:	f002 f834 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40006400 	.word	0x40006400
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_DMA_Init+0x6c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <MX_DMA_Init+0x6c>)
 8000ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_DMA_Init+0x6c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	200c      	movs	r0, #12
 8000ad0:	f001 fff7 	bl	8002ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ad4:	200c      	movs	r0, #12
 8000ad6:	f002 f810 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	200e      	movs	r0, #14
 8000ae0:	f001 ffef 	bl	8002ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ae4:	200e      	movs	r0, #14
 8000ae6:	f002 f808 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2010      	movs	r0, #16
 8000af0:	f001 ffe7 	bl	8002ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000af4:	2010      	movs	r0, #16
 8000af6:	f002 f800 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2011      	movs	r0, #17
 8000b00:	f001 ffdf 	bl	8002ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b04:	2011      	movs	r0, #17
 8000b06:	f001 fff8 	bl	8002afa <HAL_NVIC_EnableIRQ>

}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <MX_GPIO_Init>:
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	4b93      	ldr	r3, [pc, #588]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a92      	ldr	r2, [pc, #584]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b38:	f043 0310 	orr.w	r3, r3, #16
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b90      	ldr	r3, [pc, #576]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0310 	and.w	r3, r3, #16
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	4b8c      	ldr	r3, [pc, #560]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a8b      	ldr	r2, [pc, #556]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b89      	ldr	r3, [pc, #548]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b85      	ldr	r3, [pc, #532]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a84      	ldr	r2, [pc, #528]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b82      	ldr	r3, [pc, #520]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b7e      	ldr	r3, [pc, #504]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a7d      	ldr	r2, [pc, #500]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b7b      	ldr	r3, [pc, #492]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b77      	ldr	r3, [pc, #476]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a76      	ldr	r2, [pc, #472]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b74      	ldr	r3, [pc, #464]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b70      	ldr	r3, [pc, #448]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a6f      	ldr	r2, [pc, #444]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b6d      	ldr	r3, [pc, #436]	; (8000d80 <MX_GPIO_Init+0x268>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	213f      	movs	r1, #63	; 0x3f
 8000bda:	486a      	ldr	r0, [pc, #424]	; (8000d84 <MX_GPIO_Init+0x26c>)
 8000bdc:	f002 fd8a 	bl	80036f4 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2110      	movs	r1, #16
 8000be4:	4868      	ldr	r0, [pc, #416]	; (8000d88 <MX_GPIO_Init+0x270>)
 8000be6:	f002 fd85 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8000bea:	2200      	movs	r2, #0
 8000bec:	219b      	movs	r1, #155	; 0x9b
 8000bee:	4867      	ldr	r0, [pc, #412]	; (8000d8c <MX_GPIO_Init+0x274>)
 8000bf0:	f002 fd80 	bl	80036f4 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8000bfa:	4865      	ldr	r0, [pc, #404]	; (8000d90 <MX_GPIO_Init+0x278>)
 8000bfc:	f002 fd7a 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8000c00:	2200      	movs	r2, #0
 8000c02:	f64e 4108 	movw	r1, #60424	; 0xec08
 8000c06:	4863      	ldr	r0, [pc, #396]	; (8000d94 <MX_GPIO_Init+0x27c>)
 8000c08:	f002 fd74 	bl	80036f4 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c14:	2302      	movs	r3, #2
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	485c      	ldr	r0, [pc, #368]	; (8000d90 <MX_GPIO_Init+0x278>)
 8000c20:	f002 fba4 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8000c24:	f248 1378 	movw	r3, #33144	; 0x8178
 8000c28:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4855      	ldr	r0, [pc, #340]	; (8000d90 <MX_GPIO_Init+0x278>)
 8000c3a:	f002 fb97 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000c3e:	233f      	movs	r3, #63	; 0x3f
 8000c40:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	484b      	ldr	r0, [pc, #300]	; (8000d84 <MX_GPIO_Init+0x26c>)
 8000c56:	f002 fb89 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4845      	ldr	r0, [pc, #276]	; (8000d88 <MX_GPIO_Init+0x270>)
 8000c72:	f002 fb7b 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	483f      	ldr	r0, [pc, #252]	; (8000d88 <MX_GPIO_Init+0x270>)
 8000c8c:	f002 fb6e 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8000c90:	239b      	movs	r3, #155	; 0x9b
 8000c92:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4839      	ldr	r0, [pc, #228]	; (8000d8c <MX_GPIO_Init+0x274>)
 8000ca8:	f002 fb60 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8000cac:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4832      	ldr	r0, [pc, #200]	; (8000d90 <MX_GPIO_Init+0x278>)
 8000cc6:	f002 fb51 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin;
 8000cca:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cdc:	2305      	movs	r3, #5
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4829      	ldr	r0, [pc, #164]	; (8000d8c <MX_GPIO_Init+0x274>)
 8000ce8:	f002 fb40 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8000cec:	f64e 4308 	movw	r3, #60424	; 0xec08
 8000cf0:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4823      	ldr	r0, [pc, #140]	; (8000d94 <MX_GPIO_Init+0x27c>)
 8000d06:	f002 fb31 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8000d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481d      	ldr	r0, [pc, #116]	; (8000d94 <MX_GPIO_Init+0x27c>)
 8000d20:	f002 fb24 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d36:	230a      	movs	r3, #10
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_GPIO_Init+0x270>)
 8000d42:	f002 fb13 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d46:	2320      	movs	r3, #32
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d56:	2309      	movs	r3, #9
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480a      	ldr	r0, [pc, #40]	; (8000d8c <MX_GPIO_Init+0x274>)
 8000d62:	f002 fb03 	bl	800336c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2017      	movs	r0, #23
 8000d6c:	f001 fea9 	bl	8002ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d70:	2017      	movs	r0, #23
 8000d72:	f001 fec2 	bl	8002afa <HAL_NVIC_EnableIRQ>

}
 8000d76:	bf00      	nop
 8000d78:	3730      	adds	r7, #48	; 0x30
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020800 	.word	0x40020800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40020c00 	.word	0x40020c00

08000d98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <MX_I2C1_Init+0x78>)
 8000da0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <MX_I2C1_Init+0x7c>)
 8000da6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000db6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000dd6:	f002 fccb 	bl	8003770 <HAL_I2C_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de0:	f000 fb64 	bl	80014ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de4:	2100      	movs	r1, #0
 8000de6:	4809      	ldr	r0, [pc, #36]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000de8:	f002 fe06 	bl	80039f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000df2:	f000 fb5b 	bl	80014ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000dfa:	f002 fe39 	bl	8003a70 <HAL_I2CEx_ConfigDigitalFilter>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e04:	f000 fb52 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000194 	.word	0x20000194
 8000e10:	40005400 	.word	0x40005400
 8000e14:	00061a80 	.word	0x00061a80

08000e18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_I2C_MspInit+0x84>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12c      	bne.n	8000e94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_I2C_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_I2C_MspInit+0x88>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_I2C_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8000e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5c:	2312      	movs	r3, #18
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <HAL_I2C_MspInit+0x8c>)
 8000e74:	f002 fa7a 	bl	800336c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_I2C_MspInit+0x88>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_I2C_MspInit+0x88>)
 8000e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_I2C_MspInit+0x88>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40005400 	.word	0x40005400
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000eae:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <MX_SPI1_Init+0x6c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000eb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000ebc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ec8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000edc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000ee0:	2228      	movs	r2, #40	; 0x28
 8000ee2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000ef8:	220a      	movs	r2, #10
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000efe:	f003 fab9 	bl	8004474 <HAL_SPI_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000f08:	f000 fad0 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000114 	.word	0x20000114
 8000f14:	40013000 	.word	0x40013000

08000f18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_SPI_MspInit+0x84>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d12b      	bne.n	8000f92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_SPI_MspInit+0x88>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_SPI_MspInit+0x88>)
 8000f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_SPI_MspInit+0x88>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_SPI_MspInit+0x88>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_SPI_MspInit+0x88>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_SPI_MspInit+0x88>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8000f72:	2360      	movs	r3, #96	; 0x60
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f82:	2305      	movs	r3, #5
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_SPI_MspInit+0x8c>)
 8000f8e:	f002 f9ed 	bl	800336c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40013000 	.word	0x40013000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 ff9a 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <DMA1_Stream1_IRQHandler+0x10>)
 800105a:	f001 ff1d 	bl	8002e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200004c0 	.word	0x200004c0

08001068 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <DMA1_Stream3_IRQHandler+0x10>)
 800106e:	f001 ff13 	bl	8002e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000564 	.word	0x20000564

0800107c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <DMA1_Stream5_IRQHandler+0x10>)
 8001082:	f001 ff09 	bl	8002e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000460 	.word	0x20000460

08001090 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <DMA1_Stream6_IRQHandler+0x10>)
 8001096:	f001 feff 	bl	8002e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200005c4 	.word	0x200005c4

080010a4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <CAN1_RX0_IRQHandler+0x10>)
 80010aa:	f001 f9f5 	bl	8002498 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000016c 	.word	0x2000016c

080010b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	f002 fb33 	bl	8003728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <USART2_IRQHandler+0x10>)
 80010ce:	f004 fe3b 	bl	8005d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000624 	.word	0x20000624

080010dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <USART3_IRQHandler+0x10>)
 80010e2:	f004 fe31 	bl	8005d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000520 	.word	0x20000520

080010f0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80010f6:	f003 fc78 	bl	80049ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000340 	.word	0x20000340

08001104 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800110a:	f003 fc6e 	bl	80049ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000340 	.word	0x20000340

08001118 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800111e:	f003 fc64 	bl	80049ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000340 	.word	0x20000340

0800112c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM8_CC_IRQHandler+0x10>)
 8001132:	f003 fc5a 	bl	80049ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000340 	.word	0x20000340

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f005 fe18 	bl	8006da4 <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	220c      	movs	r2, #12
 8001178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20030000 	.word	0x20030000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	20000104 	.word	0x20000104
 80011a8:	20000680 	.word	0x20000680

080011ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <SystemInit+0x28>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <SystemInit+0x28>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SystemInit+0x28>)
 80011c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c6:	609a      	str	r2, [r3, #8]
#endif
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011dc:	f000 fe80 	bl	8001ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e0:	f000 f8b0 	bl	8001344 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 80011e4:	f003 f912 	bl	800440c <HAL_RCC_GetHCLKFreq>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a4a      	ldr	r2, [pc, #296]	; (8001314 <main+0x13c>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	099b      	lsrs	r3, r3, #6
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 fc8f 	bl	8002b16 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011f8:	2004      	movs	r0, #4
 80011fa:	f001 fc99 	bl	8002b30 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001206:	f001 fc5c 	bl	8002ac2 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120a:	f7ff fc85 	bl	8000b18 <MX_GPIO_Init>
  MX_DMA_Init();
 800120e:	f7ff fc4b 	bl	8000aa8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001212:	f7ff fdc1 	bl	8000d98 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001216:	f000 f951 	bl	80014bc <MX_TIM1_Init>
  MX_TIM2_Init();
 800121a:	f000 f9ef 	bl	80015fc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800121e:	f000 fcb3 	bl	8001b88 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001222:	f000 fa5f 	bl	80016e4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001226:	f000 fadf 	bl	80017e8 <MX_TIM8_Init>
  MX_CAN1_Init();
 800122a:	f7ff fb85 	bl	8000938 <MX_CAN1_Init>
  MX_SPI1_Init();
 800122e:	f7ff fe3b 	bl	8000ea8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001232:	f000 fc7f 	bl	8001b34 <MX_USART2_UART_Init>
	//Initialize hardware communication
//	joystick_Init();
//	ADC_Init();
//	ADC_DataRequest();
//	ENCODER_Init();
	BatteryInit(&main_power_supply, &huart2);
 8001236:	4938      	ldr	r1, [pc, #224]	; (8001318 <main+0x140>)
 8001238:	4838      	ldr	r0, [pc, #224]	; (800131c <main+0x144>)
 800123a:	f7ff f953 	bl	80004e4 <BatteryInit>
//	}

	//Start base wheel PWM pin
//	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
//			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 800123e:	4838      	ldr	r0, [pc, #224]	; (8001320 <main+0x148>)
 8001240:	f003 f9f0 	bl	8004624 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8001244:	2100      	movs	r1, #0
 8001246:	4836      	ldr	r0, [pc, #216]	; (8001320 <main+0x148>)
 8001248:	f003 faae 	bl	80047a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 800124c:	2104      	movs	r1, #4
 800124e:	4834      	ldr	r0, [pc, #208]	; (8001320 <main+0x148>)
 8001250:	f003 faaa 	bl	80047a8 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <main+0x148>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 800125e:	4b30      	ldr	r3, [pc, #192]	; (8001320 <main+0x148>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001266:	639a      	str	r2, [r3, #56]	; 0x38
//	state_count = 0;
//	emBrakeMotor(1);
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 8001268:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800126c:	f000 feaa 	bl	8001fc4 <HAL_Delay>
	//debug variable
//	uint32_t debug_prev_time = HAL_GetTick();
//	uint8_t led_status = 0;
	//  float speed = 0;
//	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
	getBatteryState(&main_power_supply);
 8001270:	482a      	ldr	r0, [pc, #168]	; (800131c <main+0x144>)
 8001272:	f7ff f973 	bl	800055c <getBatteryState>
	while (1)
	{
		GPIO_Digital_Filtered_Input(&button1, 30);
 8001276:	211e      	movs	r1, #30
 8001278:	482a      	ldr	r0, [pc, #168]	; (8001324 <main+0x14c>)
 800127a:	f7ff fb24 	bl	80008c6 <GPIO_Digital_Filtered_Input>
		GPIO_Digital_Filtered_Input(&button2, 30);
 800127e:	211e      	movs	r1, #30
 8001280:	4829      	ldr	r0, [pc, #164]	; (8001328 <main+0x150>)
 8001282:	f7ff fb20 	bl	80008c6 <GPIO_Digital_Filtered_Input>
		GPIO_Digital_Filtered_Input(&button3, 30);
 8001286:	211e      	movs	r1, #30
 8001288:	4828      	ldr	r0, [pc, #160]	; (800132c <main+0x154>)
 800128a:	f7ff fb1c 	bl	80008c6 <GPIO_Digital_Filtered_Input>

		GPIO_Digital_Filtered_Input(&rearLS1, 5);
 800128e:	2105      	movs	r1, #5
 8001290:	4827      	ldr	r0, [pc, #156]	; (8001330 <main+0x158>)
 8001292:	f7ff fb18 	bl	80008c6 <GPIO_Digital_Filtered_Input>
		GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8001296:	2105      	movs	r1, #5
 8001298:	4826      	ldr	r0, [pc, #152]	; (8001334 <main+0x15c>)
 800129a:	f7ff fb14 	bl	80008c6 <GPIO_Digital_Filtered_Input>
		GPIO_Digital_Filtered_Input(&backLS1, 5);
 800129e:	2105      	movs	r1, #5
 80012a0:	4825      	ldr	r0, [pc, #148]	; (8001338 <main+0x160>)
 80012a2:	f7ff fb10 	bl	80008c6 <GPIO_Digital_Filtered_Input>
		GPIO_Digital_Filtered_Input(&backLS2, 5);
 80012a6:	2105      	movs	r1, #5
 80012a8:	4824      	ldr	r0, [pc, #144]	; (800133c <main+0x164>)
 80012aa:	f7ff fb0c 	bl	80008c6 <GPIO_Digital_Filtered_Input>
//				speed[BACK_INDEX] = 0;
//			if (button3.state == GPIO_PIN_SET){
//				motor_speed += 50;
//				HAL_Delay(500);
//			}
		if (GPIO_Digital_Filtered_Input(&button3, 30) == GPIO_PIN_SET){
 80012ae:	211e      	movs	r1, #30
 80012b0:	481e      	ldr	r0, [pc, #120]	; (800132c <main+0x154>)
 80012b2:	f7ff fb08 	bl	80008c6 <GPIO_Digital_Filtered_Input>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d108      	bne.n	80012ce <main+0xf6>
			motor_speed += 50;
 80012bc:	4b20      	ldr	r3, [pc, #128]	; (8001340 <main+0x168>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3332      	adds	r3, #50	; 0x32
 80012c2:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <main+0x168>)
 80012c4:	6013      	str	r3, [r2, #0]
			HAL_Delay(500);
 80012c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ca:	f000 fe7b 	bl	8001fc4 <HAL_Delay>
		}
		if (GPIO_Digital_Filtered_Input(&button1, 30) == GPIO_PIN_SET){
 80012ce:	211e      	movs	r1, #30
 80012d0:	4814      	ldr	r0, [pc, #80]	; (8001324 <main+0x14c>)
 80012d2:	f7ff faf8 	bl	80008c6 <GPIO_Digital_Filtered_Input>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d108      	bne.n	80012ee <main+0x116>
			motor_speed -= 50;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <main+0x168>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3b32      	subs	r3, #50	; 0x32
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <main+0x168>)
 80012e4:	6013      	str	r3, [r2, #0]
			HAL_Delay(500);
 80012e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ea:	f000 fe6b 	bl	8001fc4 <HAL_Delay>
//
//		if (button2.state == GPIO_PIN_SET)
//			MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = motor_speed + 1500;
//		else if (button2.state == GPIO_PIN_RESET)
//			MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
		MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = motor_speed + 1500;
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <main+0x168>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <main+0x148>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	639a      	str	r2, [r3, #56]	; 0x38
		MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = motor_speed + 1500;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <main+0x168>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <main+0x148>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
//		while(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET);
//		getBatteryState(&main_power_supply);
		HAL_Delay(500);
 800130a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130e:	f000 fe59 	bl	8001fc4 <HAL_Delay>
		GPIO_Digital_Filtered_Input(&button1, 30);
 8001312:	e7b0      	b.n	8001276 <main+0x9e>
 8001314:	10624dd3 	.word	0x10624dd3
 8001318:	20000624 	.word	0x20000624
 800131c:	200001e8 	.word	0x200001e8
 8001320:	20000388 	.word	0x20000388
 8001324:	20000044 	.word	0x20000044
 8001328:	20000054 	.word	0x20000054
 800132c:	20000064 	.word	0x20000064
 8001330:	20000004 	.word	0x20000004
 8001334:	20000014 	.word	0x20000014
 8001338:	20000024 	.word	0x20000024
 800133c:	20000034 	.word	0x20000034
 8001340:	20000108 	.word	0x20000108

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f005 fd58 	bl	8006e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <SystemClock_Config+0xd8>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a2a      	ldr	r2, [pc, #168]	; (800141c <SystemClock_Config+0xd8>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <SystemClock_Config+0xd8>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <SystemClock_Config+0xdc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a24      	ldr	r2, [pc, #144]	; (8001420 <SystemClock_Config+0xdc>)
 800138e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <SystemClock_Config+0xdc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a0:	2301      	movs	r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013aa:	2302      	movs	r3, #2
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013b4:	2308      	movs	r3, #8
 80013b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013b8:	23b4      	movs	r3, #180	; 0xb4
 80013ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013bc:	2302      	movs	r3, #2
 80013be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013c0:	2303      	movs	r3, #3
 80013c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fbe1 	bl	8003b90 <HAL_RCC_OscConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013d4:	f000 f86a 	bl	80014ac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013d8:	f002 fb8a 	bl	8003af0 <HAL_PWREx_EnableOverDrive>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80013e2:	f000 f863 	bl	80014ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
 80013e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	2302      	movs	r3, #2
 80013ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2105      	movs	r1, #5
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fe3b 	bl	8004080 <HAL_RCC_ClockConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001410:	f000 f84c 	bl	80014ac <Error_Handler>
  }
}
 8001414:	bf00      	nop
 8001416:	3750      	adds	r7, #80	; 0x50
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000

08001424 <HAL_UART_TxCpltCallback>:
//
//	}
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a09      	ldr	r2, [pc, #36]	; (8001458 <HAL_UART_TxCpltCallback+0x34>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d10c      	bne.n	8001450 <HAL_UART_TxCpltCallback+0x2c>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, battery_receive_buf, sizeof(battery_receive_buf));
 8001436:	2232      	movs	r2, #50	; 0x32
 8001438:	4908      	ldr	r1, [pc, #32]	; (800145c <HAL_UART_TxCpltCallback+0x38>)
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <HAL_UART_TxCpltCallback+0x3c>)
 800143c:	f004 fc1e 	bl	8005c7c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_UART_TxCpltCallback+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <HAL_UART_TxCpltCallback+0x40>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0208 	bic.w	r2, r2, #8
 800144e:	601a      	str	r2, [r3, #0]
	}
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40004400 	.word	0x40004400
 800145c:	200002bc 	.word	0x200002bc
 8001460:	20000624 	.word	0x20000624
 8001464:	20000460 	.word	0x20000460

08001468 <HAL_UARTEx_RxEventCallback>:
//}



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_UARTEx_RxEventCallback+0x38>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10b      	bne.n	8001496 <HAL_UARTEx_RxEventCallback+0x2e>
	{
		ReadBatteryState(&main_power_supply, battery_receive_buf);
 800147e:	4909      	ldr	r1, [pc, #36]	; (80014a4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001482:	f7ff f89d 	bl	80005c0 <ReadBatteryState>
		memset(battery_receive_buf, 0, sizeof(battery_receive_buf));
 8001486:	2232      	movs	r2, #50	; 0x32
 8001488:	2100      	movs	r1, #0
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <HAL_UARTEx_RxEventCallback+0x3c>)
 800148c:	f005 fcbc 	bl	8006e08 <memset>
		getBatteryState(&main_power_supply);
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001492:	f7ff f863 	bl	800055c <getBatteryState>
	}
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40004400 	.word	0x40004400
 80014a4:	200002bc 	.word	0x200002bc
 80014a8:	200001e8 	.word	0x200001e8

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
//	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_2);
//	brakeMotor(&backMotor, 1);
//	brakeMotor(&backMotor, 1);
  /* USER CODE END Error_Handler_Debug */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b096      	sub	sp, #88	; 0x58
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2220      	movs	r2, #32
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f005 fc87 	bl	8006e08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014fa:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <MX_TIM1_Init+0x138>)
 80014fc:	4a3e      	ldr	r2, [pc, #248]	; (80015f8 <MX_TIM1_Init+0x13c>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001500:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <MX_TIM1_Init+0x138>)
 8001502:	22b3      	movs	r2, #179	; 0xb3
 8001504:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <MX_TIM1_Init+0x138>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800150c:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <MX_TIM1_Init+0x138>)
 800150e:	2263      	movs	r2, #99	; 0x63
 8001510:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b38      	ldr	r3, [pc, #224]	; (80015f4 <MX_TIM1_Init+0x138>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001518:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <MX_TIM1_Init+0x138>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151e:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <MX_TIM1_Init+0x138>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001524:	4833      	ldr	r0, [pc, #204]	; (80015f4 <MX_TIM1_Init+0x138>)
 8001526:	f003 f82e 	bl	8004586 <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001530:	f7ff ffbc 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001538:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800153a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800153e:	4619      	mov	r1, r3
 8001540:	482c      	ldr	r0, [pc, #176]	; (80015f4 <MX_TIM1_Init+0x138>)
 8001542:	f003 fcb9 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800154c:	f7ff ffae 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001550:	4828      	ldr	r0, [pc, #160]	; (80015f4 <MX_TIM1_Init+0x138>)
 8001552:	f003 f8cf 	bl	80046f4 <HAL_TIM_PWM_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800155c:	f7ff ffa6 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001568:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800156c:	4619      	mov	r1, r3
 800156e:	4821      	ldr	r0, [pc, #132]	; (80015f4 <MX_TIM1_Init+0x138>)
 8001570:	f004 f9d6 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800157a:	f7ff ff97 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157e:	2360      	movs	r3, #96	; 0x60
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	2204      	movs	r2, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <MX_TIM1_Init+0x138>)
 80015a4:	f003 fbc6 	bl	8004d34 <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80015ae:	f7ff ff7d 	bl	80014ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4807      	ldr	r0, [pc, #28]	; (80015f4 <MX_TIM1_Init+0x138>)
 80015d6:	f004 fa1f 	bl	8005a18 <HAL_TIMEx_ConfigBreakDeadTime>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80015e0:	f7ff ff64 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <MX_TIM1_Init+0x138>)
 80015e6:	f000 fa1b 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 80015ea:	bf00      	nop
 80015ec:	3758      	adds	r7, #88	; 0x58
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200003d0 	.word	0x200003d0
 80015f8:	40010000 	.word	0x40010000

080015fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	f107 0320 	add.w	r3, r7, #32
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	615a      	str	r2, [r3, #20]
 800162a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <MX_TIM2_Init+0xe4>)
 800162e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001632:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001634:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <MX_TIM2_Init+0xe4>)
 8001636:	2259      	movs	r2, #89	; 0x59
 8001638:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <MX_TIM2_Init+0xe4>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <MX_TIM2_Init+0xe4>)
 8001642:	2263      	movs	r2, #99	; 0x63
 8001644:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <MX_TIM2_Init+0xe4>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <MX_TIM2_Init+0xe4>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001652:	4823      	ldr	r0, [pc, #140]	; (80016e0 <MX_TIM2_Init+0xe4>)
 8001654:	f002 ff97 	bl	8004586 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800165e:	f7ff ff25 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166c:	4619      	mov	r1, r3
 800166e:	481c      	ldr	r0, [pc, #112]	; (80016e0 <MX_TIM2_Init+0xe4>)
 8001670:	f003 fc22 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800167a:	f7ff ff17 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800167e:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_TIM2_Init+0xe4>)
 8001680:	f003 f838 	bl	80046f4 <HAL_TIM_PWM_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800168a:	f7ff ff0f 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001696:	f107 0320 	add.w	r3, r7, #32
 800169a:	4619      	mov	r1, r3
 800169c:	4810      	ldr	r0, [pc, #64]	; (80016e0 <MX_TIM2_Init+0xe4>)
 800169e:	f004 f93f 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80016a8:	f7ff ff00 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ac:	2360      	movs	r3, #96	; 0x60
 80016ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2208      	movs	r2, #8
 80016c0:	4619      	mov	r1, r3
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM2_Init+0xe4>)
 80016c4:	f003 fb36 	bl	8004d34 <HAL_TIM_PWM_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80016ce:	f7ff feed 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016d2:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM2_Init+0xe4>)
 80016d4:	f000 f9a4 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 80016d8:	bf00      	nop
 80016da:	3738      	adds	r7, #56	; 0x38
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000418 	.word	0x20000418

080016e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08e      	sub	sp, #56	; 0x38
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 0320 	add.w	r3, r7, #32
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
 8001710:	615a      	str	r2, [r3, #20]
 8001712:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <MX_TIM3_Init+0xfc>)
 8001716:	4a33      	ldr	r2, [pc, #204]	; (80017e4 <MX_TIM3_Init+0x100>)
 8001718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <MX_TIM3_Init+0xfc>)
 800171c:	2259      	movs	r2, #89	; 0x59
 800171e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <MX_TIM3_Init+0xfc>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <MX_TIM3_Init+0xfc>)
 8001728:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800172c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <MX_TIM3_Init+0xfc>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <MX_TIM3_Init+0xfc>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800173a:	4829      	ldr	r0, [pc, #164]	; (80017e0 <MX_TIM3_Init+0xfc>)
 800173c:	f002 ff23 	bl	8004586 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001746:	f7ff feb1 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001754:	4619      	mov	r1, r3
 8001756:	4822      	ldr	r0, [pc, #136]	; (80017e0 <MX_TIM3_Init+0xfc>)
 8001758:	f003 fbae 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001762:	f7ff fea3 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001766:	481e      	ldr	r0, [pc, #120]	; (80017e0 <MX_TIM3_Init+0xfc>)
 8001768:	f002 ffc4 	bl	80046f4 <HAL_TIM_PWM_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001772:	f7ff fe9b 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	4619      	mov	r1, r3
 8001784:	4816      	ldr	r0, [pc, #88]	; (80017e0 <MX_TIM3_Init+0xfc>)
 8001786:	f004 f8cb 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001790:	f7ff fe8c 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001794:	2360      	movs	r3, #96	; 0x60
 8001796:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001798:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800179c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <MX_TIM3_Init+0xfc>)
 80017ae:	f003 fac1 	bl	8004d34 <HAL_TIM_PWM_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80017b8:	f7ff fe78 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2204      	movs	r2, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <MX_TIM3_Init+0xfc>)
 80017c4:	f003 fab6 	bl	8004d34 <HAL_TIM_PWM_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80017ce:	f7ff fe6d 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017d2:	4803      	ldr	r0, [pc, #12]	; (80017e0 <MX_TIM3_Init+0xfc>)
 80017d4:	f000 f924 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 80017d8:	bf00      	nop
 80017da:	3738      	adds	r7, #56	; 0x38
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000388 	.word	0x20000388
 80017e4:	40000400 	.word	0x40000400

080017e8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0318 	add.w	r3, r7, #24
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <MX_TIM8_Init+0xe0>)
 8001814:	4a2d      	ldr	r2, [pc, #180]	; (80018cc <MX_TIM8_Init+0xe4>)
 8001816:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <MX_TIM8_Init+0xe0>)
 800181a:	2259      	movs	r2, #89	; 0x59
 800181c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <MX_TIM8_Init+0xe0>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001824:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <MX_TIM8_Init+0xe0>)
 8001826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <MX_TIM8_Init+0xe0>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001832:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <MX_TIM8_Init+0xe0>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <MX_TIM8_Init+0xe0>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800183e:	4822      	ldr	r0, [pc, #136]	; (80018c8 <MX_TIM8_Init+0xe0>)
 8001840:	f002 fea1 	bl	8004586 <HAL_TIM_Base_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800184a:	f7ff fe2f 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001852:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001854:	f107 0318 	add.w	r3, r7, #24
 8001858:	4619      	mov	r1, r3
 800185a:	481b      	ldr	r0, [pc, #108]	; (80018c8 <MX_TIM8_Init+0xe0>)
 800185c:	f003 fb2c 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001866:	f7ff fe21 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800186a:	4817      	ldr	r0, [pc, #92]	; (80018c8 <MX_TIM8_Init+0xe0>)
 800186c:	f003 f864 	bl	8004938 <HAL_TIM_IC_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8001876:	f7ff fe19 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	4619      	mov	r1, r3
 8001888:	480f      	ldr	r0, [pc, #60]	; (80018c8 <MX_TIM8_Init+0xe0>)
 800188a:	f004 f849 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8001894:	f7ff fe0a 	bl	80014ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001898:	2300      	movs	r3, #0
 800189a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800189c:	2301      	movs	r3, #1
 800189e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80018a8:	463b      	mov	r3, r7
 80018aa:	220c      	movs	r2, #12
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <MX_TIM8_Init+0xe0>)
 80018b0:	f003 f9a3 	bl	8004bfa <HAL_TIM_IC_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80018ba:	f7ff fdf7 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000340 	.word	0x20000340
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	; 0x30
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <HAL_TIM_Base_MspInit+0x13c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10e      	bne.n	8001910 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a45      	ldr	r2, [pc, #276]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800190e:	e079      	b.n	8001a04 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001918:	d10e      	bne.n	8001938 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a3b      	ldr	r2, [pc, #236]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697b      	ldr	r3, [r7, #20]
}
 8001936:	e065      	b.n	8001a04 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a35      	ldr	r2, [pc, #212]	; (8001a14 <HAL_TIM_Base_MspInit+0x144>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d10e      	bne.n	8001960 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
}
 800195e:	e051      	b.n	8001a04 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM8)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2c      	ldr	r2, [pc, #176]	; (8001a18 <HAL_TIM_Base_MspInit+0x148>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d14c      	bne.n	8001a04 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a27      	ldr	r2, [pc, #156]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a20      	ldr	r2, [pc, #128]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_TIM_Base_MspInit+0x140>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019b4:	2303      	movs	r3, #3
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4817      	ldr	r0, [pc, #92]	; (8001a1c <HAL_TIM_Base_MspInit+0x14c>)
 80019c0:	f001 fcd4 	bl	800336c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	202b      	movs	r0, #43	; 0x2b
 80019ca:	f001 f87a 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80019ce:	202b      	movs	r0, #43	; 0x2b
 80019d0:	f001 f893 	bl	8002afa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	202c      	movs	r0, #44	; 0x2c
 80019da:	f001 f872 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80019de:	202c      	movs	r0, #44	; 0x2c
 80019e0:	f001 f88b 	bl	8002afa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	202d      	movs	r0, #45	; 0x2d
 80019ea:	f001 f86a 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80019ee:	202d      	movs	r0, #45	; 0x2d
 80019f0:	f001 f883 	bl	8002afa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	202e      	movs	r0, #46	; 0x2e
 80019fa:	f001 f862 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80019fe:	202e      	movs	r0, #46	; 0x2e
 8001a00:	f001 f87b 	bl	8002afa <HAL_NVIC_EnableIRQ>
}
 8001a04:	bf00      	nop
 8001a06:	3730      	adds	r7, #48	; 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40000400 	.word	0x40000400
 8001a18:	40010400 	.word	0x40010400
 8001a1c:	40020800 	.word	0x40020800

08001a20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a37      	ldr	r2, [pc, #220]	; (8001b1c <HAL_TIM_MspPostInit+0xfc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d11f      	bne.n	8001a82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <HAL_TIM_MspPostInit+0x100>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a35      	ldr	r2, [pc, #212]	; (8001b20 <HAL_TIM_MspPostInit+0x100>)
 8001a4c:	f043 0310 	orr.w	r3, r3, #16
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <HAL_TIM_MspPostInit+0x100>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8001a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	482a      	ldr	r0, [pc, #168]	; (8001b24 <HAL_TIM_MspPostInit+0x104>)
 8001a7c:	f001 fc76 	bl	800336c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a80:	e047      	b.n	8001b12 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a8a:	d11f      	bne.n	8001acc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_TIM_MspPostInit+0x100>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <HAL_TIM_MspPostInit+0x100>)
 8001a96:	f043 0302 	orr.w	r3, r3, #2
 8001a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_TIM_MspPostInit+0x100>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 8001aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aba:	2301      	movs	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4818      	ldr	r0, [pc, #96]	; (8001b28 <HAL_TIM_MspPostInit+0x108>)
 8001ac6:	f001 fc51 	bl	800336c <HAL_GPIO_Init>
}
 8001aca:	e022      	b.n	8001b12 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <HAL_TIM_MspPostInit+0x10c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d11d      	bne.n	8001b12 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_TIM_MspPostInit+0x100>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_TIM_MspPostInit+0x100>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_TIM_MspPostInit+0x100>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8001af2:	23c0      	movs	r3, #192	; 0xc0
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b02:	2302      	movs	r3, #2
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <HAL_TIM_MspPostInit+0x110>)
 8001b0e:	f001 fc2d 	bl	800336c <HAL_GPIO_Init>
}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40000400 	.word	0x40000400
 8001b30:	40020800 	.word	0x40020800

08001b34 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <MX_USART2_UART_Init+0x50>)
 8001b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b6c:	f003 ffba 	bl	8005ae4 <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b76:	f7ff fc99 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000624 	.word	0x20000624
 8001b84:	40004400 	.word	0x40004400

08001b88 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <MX_USART3_UART_Init+0x50>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001bc0:	f003 ff90 	bl	8005ae4 <HAL_UART_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001bca:	f7ff fc6f 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000520 	.word	0x20000520
 8001bd8:	40004800 	.word	0x40004800

08001bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	; 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a97      	ldr	r2, [pc, #604]	; (8001e58 <HAL_UART_MspInit+0x27c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	f040 8091 	bne.w	8001d22 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	4b95      	ldr	r3, [pc, #596]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a94      	ldr	r2, [pc, #592]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b92      	ldr	r3, [pc, #584]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	4b8e      	ldr	r3, [pc, #568]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4a8d      	ldr	r2, [pc, #564]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2c:	4b8b      	ldr	r3, [pc, #556]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c38:	230c      	movs	r3, #12
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c48:	2307      	movs	r3, #7
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4883      	ldr	r0, [pc, #524]	; (8001e60 <HAL_UART_MspInit+0x284>)
 8001c54:	f001 fb8a 	bl	800336c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c58:	4b82      	ldr	r3, [pc, #520]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001c5a:	4a83      	ldr	r2, [pc, #524]	; (8001e68 <HAL_UART_MspInit+0x28c>)
 8001c5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c5e:	4b81      	ldr	r3, [pc, #516]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001c60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c64:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c66:	4b7f      	ldr	r3, [pc, #508]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c6c:	4b7d      	ldr	r3, [pc, #500]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c72:	4b7c      	ldr	r3, [pc, #496]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c78:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c7a:	4b7a      	ldr	r3, [pc, #488]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c80:	4b78      	ldr	r3, [pc, #480]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c86:	4b77      	ldr	r3, [pc, #476]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c8c:	4b75      	ldr	r3, [pc, #468]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c92:	4b74      	ldr	r3, [pc, #464]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c98:	4872      	ldr	r0, [pc, #456]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001c9a:	f000 ff65 	bl	8002b68 <HAL_DMA_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001ca4:	f7ff fc02 	bl	80014ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a6e      	ldr	r2, [pc, #440]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38
 8001cae:	4a6d      	ldr	r2, [pc, #436]	; (8001e64 <HAL_UART_MspInit+0x288>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001cb4:	4b6d      	ldr	r3, [pc, #436]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001cb6:	4a6e      	ldr	r2, [pc, #440]	; (8001e70 <HAL_UART_MspInit+0x294>)
 8001cb8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001cba:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001cbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001cc4:	2240      	movs	r2, #64	; 0x40
 8001cc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc8:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cce:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd6:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cdc:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ce2:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ce8:	4b60      	ldr	r3, [pc, #384]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cee:	4b5f      	ldr	r3, [pc, #380]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cf4:	485d      	ldr	r0, [pc, #372]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001cf6:	f000 ff37 	bl	8002b68 <HAL_DMA_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001d00:	f7ff fbd4 	bl	80014ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a59      	ldr	r2, [pc, #356]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
 8001d0a:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <HAL_UART_MspInit+0x290>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2100      	movs	r1, #0
 8001d14:	2026      	movs	r0, #38	; 0x26
 8001d16:	f000 fed4 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d1a:	2026      	movs	r0, #38	; 0x26
 8001d1c:	f000 feed 	bl	8002afa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d20:	e096      	b.n	8001e50 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a53      	ldr	r2, [pc, #332]	; (8001e74 <HAL_UART_MspInit+0x298>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	f040 8091 	bne.w	8001e50 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a49      	ldr	r2, [pc, #292]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a42      	ldr	r2, [pc, #264]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <HAL_UART_MspInit+0x280>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8001d66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d78:	2307      	movs	r3, #7
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	483d      	ldr	r0, [pc, #244]	; (8001e78 <HAL_UART_MspInit+0x29c>)
 8001d84:	f001 faf2 	bl	800336c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d88:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001d8a:	4a3d      	ldr	r2, [pc, #244]	; (8001e80 <HAL_UART_MspInit+0x2a4>)
 8001d8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001d90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d94:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d9c:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001da2:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001db6:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dbc:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc2:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001dc8:	482c      	ldr	r0, [pc, #176]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001dca:	f000 fecd 	bl	8002b68 <HAL_DMA_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001dd4:	f7ff fb6a 	bl	80014ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a28      	ldr	r2, [pc, #160]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001ddc:	639a      	str	r2, [r3, #56]	; 0x38
 8001dde:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_UART_MspInit+0x2a0>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001de6:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <HAL_UART_MspInit+0x2ac>)
 8001de8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001dec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001df4:	2240      	movs	r2, #64	; 0x40
 8001df6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e04:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e06:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e24:	4817      	ldr	r0, [pc, #92]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001e26:	f000 fe9f 	bl	8002b68 <HAL_DMA_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8001e30:	f7ff fb3c 	bl	80014ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a13      	ldr	r2, [pc, #76]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <HAL_UART_MspInit+0x2a8>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	2027      	movs	r0, #39	; 0x27
 8001e46:	f000 fe3c 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e4a:	2027      	movs	r0, #39	; 0x27
 8001e4c:	f000 fe55 	bl	8002afa <HAL_NVIC_EnableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3730      	adds	r7, #48	; 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40004400 	.word	0x40004400
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	20000460 	.word	0x20000460
 8001e68:	40026088 	.word	0x40026088
 8001e6c:	200005c4 	.word	0x200005c4
 8001e70:	400260a0 	.word	0x400260a0
 8001e74:	40004800 	.word	0x40004800
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	200004c0 	.word	0x200004c0
 8001e80:	40026028 	.word	0x40026028
 8001e84:	20000564 	.word	0x20000564
 8001e88:	40026058 	.word	0x40026058

08001e8c <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e92:	e003      	b.n	8001e9c <LoopCopyDataInit>

08001e94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e9a:	3104      	adds	r1, #4

08001e9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e9c:	480b      	ldr	r0, [pc, #44]	; (8001ecc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ea0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ea2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ea4:	d3f6      	bcc.n	8001e94 <CopyDataInit>
  ldr  r2, =_sbss
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ea8:	e002      	b.n	8001eb0 <LoopFillZerobss>

08001eaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001eaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001eac:	f842 3b04 	str.w	r3, [r2], #4

08001eb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001eb4:	d3f9      	bcc.n	8001eaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eb6:	f7ff f979 	bl	80011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f004 ff79 	bl	8006db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7ff f98b 	bl	80011d8 <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ec4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001ec8:	08007078 	.word	0x08007078
  ldr  r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ed0:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8001ed4:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8001ed8:	2000067c 	.word	0x2000067c

08001edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>
	...

08001ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_Init+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <HAL_Init+0x40>)
 8001eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <HAL_Init+0x40>)
 8001ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <HAL_Init+0x40>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f000 fdcf 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f000 f808 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f14:	f7ff f848 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x54>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_InitTick+0x58>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fde7 	bl	8002b16 <HAL_SYSTICK_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00e      	b.n	8001f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d80a      	bhi.n	8001f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f60:	f000 fdaf 	bl	8002ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f64:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <HAL_InitTick+0x5c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000078 	.word	0x20000078
 8001f80:	20000074 	.word	0x20000074

08001f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x20>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_IncTick+0x24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_IncTick+0x24>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000078 	.word	0x20000078
 8001fa8:	20000668 	.word	0x20000668

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_GetTick+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000668 	.word	0x20000668

08001fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff ffee 	bl	8001fac <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fdc:	d005      	beq.n	8001fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_Delay+0x44>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fea:	bf00      	nop
 8001fec:	f7ff ffde 	bl	8001fac <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f7      	bhi.n	8001fec <HAL_Delay+0x28>
  {
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000078 	.word	0x20000078

0800200c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0ed      	b.n	80021fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fcec 	bl	8000a08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7ff ffb4 	bl	8001fac <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002046:	e012      	b.n	800206e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002048:	f7ff ffb0 	bl	8001fac <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b0a      	cmp	r3, #10
 8002054:	d90b      	bls.n	800206e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2205      	movs	r2, #5
 8002066:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0c5      	b.n	80021fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0e5      	beq.n	8002048 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0202 	bic.w	r2, r2, #2
 800208a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800208c:	f7ff ff8e 	bl	8001fac <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002092:	e012      	b.n	80020ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002094:	f7ff ff8a 	bl	8001fac <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b0a      	cmp	r3, #10
 80020a0:	d90b      	bls.n	80020ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2205      	movs	r2, #5
 80020b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e09f      	b.n	80021fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e5      	bne.n	8002094 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e007      	b.n	80020f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7e5b      	ldrb	r3, [r3, #25]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d108      	bne.n	800210c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e007      	b.n	800211c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800211a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7e9b      	ldrb	r3, [r3, #26]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d108      	bne.n	8002136 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0220 	orr.w	r2, r2, #32
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e007      	b.n	8002146 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0220 	bic.w	r2, r2, #32
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7edb      	ldrb	r3, [r3, #27]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d108      	bne.n	8002160 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0210 	bic.w	r2, r2, #16
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e007      	b.n	8002170 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0210 	orr.w	r2, r2, #16
 800216e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7f1b      	ldrb	r3, [r3, #28]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d108      	bne.n	800218a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0208 	orr.w	r2, r2, #8
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e007      	b.n	800219a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7f5b      	ldrb	r3, [r3, #29]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0204 	orr.w	r2, r2, #4
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e007      	b.n	80021c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0204 	bic.w	r2, r2, #4
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	ea42 0103 	orr.w	r1, r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d003      	beq.n	800222a <HAL_CAN_ConfigFilter+0x26>
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	2b02      	cmp	r3, #2
 8002226:	f040 80be 	bne.w	80023a6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800222a:	4b65      	ldr	r3, [pc, #404]	; (80023c0 <HAL_CAN_ConfigFilter+0x1bc>)
 800222c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002244:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	431a      	orrs	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2201      	movs	r2, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	43db      	mvns	r3, r3
 800227c:	401a      	ands	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d123      	bne.n	80022d4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	43db      	mvns	r3, r3
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	3248      	adds	r2, #72	; 0x48
 80022b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022ca:	6979      	ldr	r1, [r7, #20]
 80022cc:	3348      	adds	r3, #72	; 0x48
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d122      	bne.n	8002322 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3248      	adds	r2, #72	; 0x48
 8002302:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002316:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002318:	6979      	ldr	r1, [r7, #20]
 800231a:	3348      	adds	r3, #72	; 0x48
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	43db      	mvns	r3, r3
 8002334:	401a      	ands	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800233c:	e007      	b.n	800234e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	431a      	orrs	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	43db      	mvns	r3, r3
 8002360:	401a      	ands	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002368:	e007      	b.n	800237a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	431a      	orrs	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d107      	bne.n	8002392 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	431a      	orrs	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002398:	f023 0201 	bic.w	r2, r3, #1
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e006      	b.n	80023b4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
  }
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40006400 	.word	0x40006400

080023c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d12e      	bne.n	8002436 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023f0:	f7ff fddc 	bl	8001fac <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023f6:	e012      	b.n	800241e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023f8:	f7ff fdd8 	bl	8001fac <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b0a      	cmp	r3, #10
 8002404:	d90b      	bls.n	800241e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2205      	movs	r2, #5
 8002416:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e012      	b.n	8002444 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1e5      	bne.n	80023f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e006      	b.n	8002444 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
  }
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d002      	beq.n	800246a <HAL_CAN_ActivateNotification+0x1e>
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d109      	bne.n	800247e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6959      	ldr	r1, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e006      	b.n	800248c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d07c      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d023      	beq.n	8002530 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2201      	movs	r2, #1
 80024ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f983 	bl	8002806 <HAL_CAN_TxMailbox0CompleteCallback>
 8002500:	e016      	b.n	8002530 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	e00c      	b.n	8002530 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	e002      	b.n	8002530 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f989 	bl	8002842 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d024      	beq.n	8002584 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002542:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f963 	bl	800281a <HAL_CAN_TxMailbox1CompleteCallback>
 8002554:	e016      	b.n	8002584 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	e00c      	b.n	8002584 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	e002      	b.n	8002584 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f969 	bl	8002856 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d024      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002596:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f943 	bl	800282e <HAL_CAN_TxMailbox2CompleteCallback>
 80025a8:	e016      	b.n	80025d8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e00c      	b.n	80025d8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
 80025d0:	e002      	b.n	80025d8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f949 	bl	800286a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2210      	movs	r2, #16
 80025fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2208      	movs	r2, #8
 8002616:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f93a 	bl	8002892 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d009      	beq.n	800263c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f921 	bl	800287e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00c      	beq.n	8002660 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002656:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2210      	movs	r2, #16
 800265e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2208      	movs	r2, #8
 800267a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f91c 	bl	80028ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f903 	bl	80028a6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2210      	movs	r2, #16
 80026ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f906 	bl	80028ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2208      	movs	r2, #8
 80026dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8ff 	bl	80028e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d07b      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d072      	beq.n	80027de <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002752:	2b00      	cmp	r3, #0
 8002754:	d043      	beq.n	80027de <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d03e      	beq.n	80027de <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002766:	2b60      	cmp	r3, #96	; 0x60
 8002768:	d02b      	beq.n	80027c2 <HAL_CAN_IRQHandler+0x32a>
 800276a:	2b60      	cmp	r3, #96	; 0x60
 800276c:	d82e      	bhi.n	80027cc <HAL_CAN_IRQHandler+0x334>
 800276e:	2b50      	cmp	r3, #80	; 0x50
 8002770:	d022      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x320>
 8002772:	2b50      	cmp	r3, #80	; 0x50
 8002774:	d82a      	bhi.n	80027cc <HAL_CAN_IRQHandler+0x334>
 8002776:	2b40      	cmp	r3, #64	; 0x40
 8002778:	d019      	beq.n	80027ae <HAL_CAN_IRQHandler+0x316>
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d826      	bhi.n	80027cc <HAL_CAN_IRQHandler+0x334>
 800277e:	2b30      	cmp	r3, #48	; 0x30
 8002780:	d010      	beq.n	80027a4 <HAL_CAN_IRQHandler+0x30c>
 8002782:	2b30      	cmp	r3, #48	; 0x30
 8002784:	d822      	bhi.n	80027cc <HAL_CAN_IRQHandler+0x334>
 8002786:	2b10      	cmp	r3, #16
 8002788:	d002      	beq.n	8002790 <HAL_CAN_IRQHandler+0x2f8>
 800278a:	2b20      	cmp	r3, #32
 800278c:	d005      	beq.n	800279a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800278e:	e01d      	b.n	80027cc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	f043 0308 	orr.w	r3, r3, #8
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002798:	e019      	b.n	80027ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	f043 0310 	orr.w	r3, r3, #16
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027a2:	e014      	b.n	80027ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	f043 0320 	orr.w	r3, r3, #32
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027ac:	e00f      	b.n	80027ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027b6:	e00a      	b.n	80027ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027c0:	e005      	b.n	80027ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027ca:	e000      	b.n	80027ce <HAL_CAN_IRQHandler+0x336>
            break;
 80027cc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699a      	ldr	r2, [r3, #24]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027dc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2204      	movs	r2, #4
 80027e4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f87c 	bl	80028f6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027fe:	bf00      	nop
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4907      	ldr	r1, [pc, #28]	; (80029a8 <__NVIC_EnableIRQ+0x38>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	; (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a78:	d301      	bcc.n	8002a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00f      	b.n	8002a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <SysTick_Config+0x40>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a86:	210f      	movs	r1, #15
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a8c:	f7ff ff8e 	bl	80029ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <SysTick_Config+0x40>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <SysTick_Config+0x40>)
 8002a98:	2207      	movs	r2, #7
 8002a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff29 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad4:	f7ff ff3e 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f7ff ff8e 	bl	8002a00 <NVIC_EncodePriority>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff5d 	bl	80029ac <__NVIC_SetPriority>
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff31 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffa2 	bl	8002a68 <SysTick_Config>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d106      	bne.n	8002b4c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002b4a:	e005      	b.n	8002b58 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002b52:	f023 0304 	bic.w	r3, r3, #4
 8002b56:	6013      	str	r3, [r2, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000e010 	.word	0xe000e010

08002b68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7ff fa1a 	bl	8001fac <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e099      	b.n	8002cb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba4:	e00f      	b.n	8002bc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba6:	f7ff fa01 	bl	8001fac <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d908      	bls.n	8002bc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e078      	b.n	8002cb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e8      	bne.n	8002ba6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <HAL_DMA_Init+0x158>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d107      	bne.n	8002c30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f023 0307 	bic.w	r3, r3, #7
 8002c46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d117      	bne.n	8002c8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fb01 	bl	8003274 <DMA_CheckFifoParam>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c86:	2301      	movs	r3, #1
 8002c88:	e016      	b.n	8002cb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fab8 	bl	8003208 <DMA_CalcBaseAndBitshift>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	223f      	movs	r2, #63	; 0x3f
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	f010803f 	.word	0xf010803f

08002cc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_DMA_Start_IT+0x26>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e040      	b.n	8002d6c <HAL_DMA_Start_IT+0xa8>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d12f      	bne.n	8002d5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fa4a 	bl	80031ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	223f      	movs	r2, #63	; 0x3f
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0216 	orr.w	r2, r2, #22
 8002d32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0208 	orr.w	r2, r2, #8
 8002d4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e005      	b.n	8002d6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d66:	2302      	movs	r3, #2
 8002d68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d82:	f7ff f913 	bl	8001fac <HAL_GetTick>
 8002d86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d008      	beq.n	8002da6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e052      	b.n	8002e4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0216 	bic.w	r2, r2, #22
 8002db4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <HAL_DMA_Abort+0x62>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0208 	bic.w	r2, r2, #8
 8002de4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df6:	e013      	b.n	8002e20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002df8:	f7ff f8d8 	bl	8001fac <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d90c      	bls.n	8002e20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2203      	movs	r2, #3
 8002e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e015      	b.n	8002e4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e4      	bne.n	8002df8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	223f      	movs	r2, #63	; 0x3f
 8002e34:	409a      	lsls	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d004      	beq.n	8002e72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00c      	b.n	8002e8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2205      	movs	r2, #5
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ea4:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <HAL_DMA_IRQHandler+0x258>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a92      	ldr	r2, [pc, #584]	; (80030f4 <HAL_DMA_IRQHandler+0x25c>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	0a9b      	lsrs	r3, r3, #10
 8002eb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01a      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0204 	bic.w	r2, r2, #4
 8002eea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	2201      	movs	r2, #1
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d012      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	2201      	movs	r2, #1
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f043 0202 	orr.w	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	2204      	movs	r2, #4
 8002f40:	409a      	lsls	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d012      	beq.n	8002f70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f043 0204 	orr.w	r2, r3, #4
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	2210      	movs	r2, #16
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d043      	beq.n	8003008 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d03c      	beq.n	8003008 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	2210      	movs	r2, #16
 8002f94:	409a      	lsls	r2, r3
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d108      	bne.n	8002fc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d024      	beq.n	8003008 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
 8002fc6:	e01f      	b.n	8003008 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01b      	beq.n	8003008 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
 8002fd8:	e016      	b.n	8003008 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0208 	bic.w	r2, r2, #8
 8002ff6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	2220      	movs	r2, #32
 800300e:	409a      	lsls	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 808e 	beq.w	8003136 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8086 	beq.w	8003136 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302e:	2220      	movs	r2, #32
 8003030:	409a      	lsls	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b05      	cmp	r3, #5
 8003040:	d136      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0216 	bic.w	r2, r2, #22
 8003050:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003060:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <HAL_DMA_IRQHandler+0x1da>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0208 	bic.w	r2, r2, #8
 8003080:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003086:	223f      	movs	r2, #63	; 0x3f
 8003088:	409a      	lsls	r2, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d07d      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
        }
        return;
 80030ae:	e078      	b.n	80031a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01c      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d108      	bne.n	80030de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d030      	beq.n	8003136 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
 80030dc:	e02b      	b.n	8003136 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d027      	beq.n	8003136 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
 80030ee:	e022      	b.n	8003136 <HAL_DMA_IRQHandler+0x29e>
 80030f0:	20000000 	.word	0x20000000
 80030f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10f      	bne.n	8003126 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0210 	bic.w	r2, r2, #16
 8003114:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	2b00      	cmp	r3, #0
 800313c:	d032      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d022      	beq.n	8003190 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2205      	movs	r2, #5
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3301      	adds	r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	429a      	cmp	r2, r3
 800316c:	d307      	bcc.n	800317e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f2      	bne.n	8003162 <HAL_DMA_IRQHandler+0x2ca>
 800317c:	e000      	b.n	8003180 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800317e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
 80031a0:	e000      	b.n	80031a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031a2:	bf00      	nop
    }
  }
}
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop

080031ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d108      	bne.n	80031ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031ea:	e007      	b.n	80031fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	3b10      	subs	r3, #16
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <DMA_CalcBaseAndBitshift+0x64>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003222:	4a13      	ldr	r2, [pc, #76]	; (8003270 <DMA_CalcBaseAndBitshift+0x68>)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d909      	bls.n	800324a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	1d1a      	adds	r2, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	659a      	str	r2, [r3, #88]	; 0x58
 8003248:	e007      	b.n	800325a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003252:	f023 0303 	bic.w	r3, r3, #3
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	aaaaaaab 	.word	0xaaaaaaab
 8003270:	08007060 	.word	0x08007060

08003274 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11f      	bne.n	80032ce <DMA_CheckFifoParam+0x5a>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d856      	bhi.n	8003342 <DMA_CheckFifoParam+0xce>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <DMA_CheckFifoParam+0x28>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	080032bf 	.word	0x080032bf
 80032a4:	080032ad 	.word	0x080032ad
 80032a8:	08003343 	.word	0x08003343
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d046      	beq.n	8003346 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032bc:	e043      	b.n	8003346 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032c6:	d140      	bne.n	800334a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032cc:	e03d      	b.n	800334a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d6:	d121      	bne.n	800331c <DMA_CheckFifoParam+0xa8>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d837      	bhi.n	800334e <DMA_CheckFifoParam+0xda>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <DMA_CheckFifoParam+0x70>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	080032fb 	.word	0x080032fb
 80032ec:	080032f5 	.word	0x080032f5
 80032f0:	0800330d 	.word	0x0800330d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      break;
 80032f8:	e030      	b.n	800335c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d025      	beq.n	8003352 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800330a:	e022      	b.n	8003352 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003314:	d11f      	bne.n	8003356 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800331a:	e01c      	b.n	8003356 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d903      	bls.n	800332a <DMA_CheckFifoParam+0xb6>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d003      	beq.n	8003330 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003328:	e018      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      break;
 800332e:	e015      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      break;
 8003340:	e00b      	b.n	800335a <DMA_CheckFifoParam+0xe6>
      break;
 8003342:	bf00      	nop
 8003344:	e00a      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 8003346:	bf00      	nop
 8003348:	e008      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 800334a:	bf00      	nop
 800334c:	e006      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 800334e:	bf00      	nop
 8003350:	e004      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 8003352:	bf00      	nop
 8003354:	e002      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;   
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 800335a:	bf00      	nop
    }
  } 
  
  return status; 
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop

0800336c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e177      	b.n	8003678 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003388:	2201      	movs	r2, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f040 8166 	bne.w	8003672 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d005      	beq.n	80033be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d130      	bne.n	8003420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2203      	movs	r2, #3
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f4:	2201      	movs	r2, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 0201 	and.w	r2, r3, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b03      	cmp	r3, #3
 800342a:	d017      	beq.n	800345c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d123      	bne.n	80034b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	08da      	lsrs	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3208      	adds	r2, #8
 8003470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	220f      	movs	r2, #15
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	08da      	lsrs	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3208      	adds	r2, #8
 80034aa:	69b9      	ldr	r1, [r7, #24]
 80034ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0203 	and.w	r2, r3, #3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80c0 	beq.w	8003672 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	4b66      	ldr	r3, [pc, #408]	; (8003690 <HAL_GPIO_Init+0x324>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	4a65      	ldr	r2, [pc, #404]	; (8003690 <HAL_GPIO_Init+0x324>)
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003500:	6453      	str	r3, [r2, #68]	; 0x44
 8003502:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HAL_GPIO_Init+0x324>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800350e:	4a61      	ldr	r2, [pc, #388]	; (8003694 <HAL_GPIO_Init+0x328>)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	3302      	adds	r3, #2
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a58      	ldr	r2, [pc, #352]	; (8003698 <HAL_GPIO_Init+0x32c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d037      	beq.n	80035aa <HAL_GPIO_Init+0x23e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a57      	ldr	r2, [pc, #348]	; (800369c <HAL_GPIO_Init+0x330>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d031      	beq.n	80035a6 <HAL_GPIO_Init+0x23a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a56      	ldr	r2, [pc, #344]	; (80036a0 <HAL_GPIO_Init+0x334>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02b      	beq.n	80035a2 <HAL_GPIO_Init+0x236>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a55      	ldr	r2, [pc, #340]	; (80036a4 <HAL_GPIO_Init+0x338>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d025      	beq.n	800359e <HAL_GPIO_Init+0x232>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a54      	ldr	r2, [pc, #336]	; (80036a8 <HAL_GPIO_Init+0x33c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01f      	beq.n	800359a <HAL_GPIO_Init+0x22e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a53      	ldr	r2, [pc, #332]	; (80036ac <HAL_GPIO_Init+0x340>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d019      	beq.n	8003596 <HAL_GPIO_Init+0x22a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <HAL_GPIO_Init+0x344>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_GPIO_Init+0x226>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a51      	ldr	r2, [pc, #324]	; (80036b4 <HAL_GPIO_Init+0x348>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00d      	beq.n	800358e <HAL_GPIO_Init+0x222>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a50      	ldr	r2, [pc, #320]	; (80036b8 <HAL_GPIO_Init+0x34c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <HAL_GPIO_Init+0x21e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4f      	ldr	r2, [pc, #316]	; (80036bc <HAL_GPIO_Init+0x350>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_GPIO_Init+0x21a>
 8003582:	2309      	movs	r3, #9
 8003584:	e012      	b.n	80035ac <HAL_GPIO_Init+0x240>
 8003586:	230a      	movs	r3, #10
 8003588:	e010      	b.n	80035ac <HAL_GPIO_Init+0x240>
 800358a:	2308      	movs	r3, #8
 800358c:	e00e      	b.n	80035ac <HAL_GPIO_Init+0x240>
 800358e:	2307      	movs	r3, #7
 8003590:	e00c      	b.n	80035ac <HAL_GPIO_Init+0x240>
 8003592:	2306      	movs	r3, #6
 8003594:	e00a      	b.n	80035ac <HAL_GPIO_Init+0x240>
 8003596:	2305      	movs	r3, #5
 8003598:	e008      	b.n	80035ac <HAL_GPIO_Init+0x240>
 800359a:	2304      	movs	r3, #4
 800359c:	e006      	b.n	80035ac <HAL_GPIO_Init+0x240>
 800359e:	2303      	movs	r3, #3
 80035a0:	e004      	b.n	80035ac <HAL_GPIO_Init+0x240>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e002      	b.n	80035ac <HAL_GPIO_Init+0x240>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_GPIO_Init+0x240>
 80035aa:	2300      	movs	r3, #0
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	f002 0203 	and.w	r2, r2, #3
 80035b2:	0092      	lsls	r2, r2, #2
 80035b4:	4093      	lsls	r3, r2
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035bc:	4935      	ldr	r1, [pc, #212]	; (8003694 <HAL_GPIO_Init+0x328>)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ca:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <HAL_GPIO_Init+0x354>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ee:	4a34      	ldr	r2, [pc, #208]	; (80036c0 <HAL_GPIO_Init+0x354>)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <HAL_GPIO_Init+0x354>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003618:	4a29      	ldr	r2, [pc, #164]	; (80036c0 <HAL_GPIO_Init+0x354>)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361e:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <HAL_GPIO_Init+0x354>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003642:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_GPIO_Init+0x354>)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_GPIO_Init+0x354>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800366c:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <HAL_GPIO_Init+0x354>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3301      	adds	r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	f67f ae84 	bls.w	8003388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	3724      	adds	r7, #36	; 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	40013800 	.word	0x40013800
 8003698:	40020000 	.word	0x40020000
 800369c:	40020400 	.word	0x40020400
 80036a0:	40020800 	.word	0x40020800
 80036a4:	40020c00 	.word	0x40020c00
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40021400 	.word	0x40021400
 80036b0:	40021800 	.word	0x40021800
 80036b4:	40021c00 	.word	0x40021c00
 80036b8:	40022000 	.word	0x40022000
 80036bc:	40022400 	.word	0x40022400
 80036c0:	40013c00 	.word	0x40013c00

080036c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	887b      	ldrh	r3, [r7, #2]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	e001      	b.n	80036e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
 8003700:	4613      	mov	r3, r2
 8003702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003704:	787b      	ldrb	r3, [r7, #1]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003710:	e003      	b.n	800371a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	041a      	lsls	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	619a      	str	r2, [r3, #24]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800373e:	4a05      	ldr	r2, [pc, #20]	; (8003754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f806 	bl	8003758 <HAL_GPIO_EXTI_Callback>
  }
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40013c00 	.word	0x40013c00

08003758 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e12b      	b.n	80039da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd fb3e 	bl	8000e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2224      	movs	r2, #36	; 0x24
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d4:	f000 fe26 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 80037d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4a81      	ldr	r2, [pc, #516]	; (80039e4 <HAL_I2C_Init+0x274>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d807      	bhi.n	80037f4 <HAL_I2C_Init+0x84>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a80      	ldr	r2, [pc, #512]	; (80039e8 <HAL_I2C_Init+0x278>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	bf94      	ite	ls
 80037ec:	2301      	movls	r3, #1
 80037ee:	2300      	movhi	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e006      	b.n	8003802 <HAL_I2C_Init+0x92>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a7d      	ldr	r2, [pc, #500]	; (80039ec <HAL_I2C_Init+0x27c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	bf94      	ite	ls
 80037fc:	2301      	movls	r3, #1
 80037fe:	2300      	movhi	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e0e7      	b.n	80039da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a78      	ldr	r2, [pc, #480]	; (80039f0 <HAL_I2C_Init+0x280>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0c9b      	lsrs	r3, r3, #18
 8003814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4a6a      	ldr	r2, [pc, #424]	; (80039e4 <HAL_I2C_Init+0x274>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d802      	bhi.n	8003844 <HAL_I2C_Init+0xd4>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3301      	adds	r3, #1
 8003842:	e009      	b.n	8003858 <HAL_I2C_Init+0xe8>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	4a69      	ldr	r2, [pc, #420]	; (80039f4 <HAL_I2C_Init+0x284>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	3301      	adds	r3, #1
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	430b      	orrs	r3, r1
 800385e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800386a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	495c      	ldr	r1, [pc, #368]	; (80039e4 <HAL_I2C_Init+0x274>)
 8003874:	428b      	cmp	r3, r1
 8003876:	d819      	bhi.n	80038ac <HAL_I2C_Init+0x13c>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e59      	subs	r1, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fbb1 f3f3 	udiv	r3, r1, r3
 8003886:	1c59      	adds	r1, r3, #1
 8003888:	f640 73fc 	movw	r3, #4092	; 0xffc
 800388c:	400b      	ands	r3, r1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_I2C_Init+0x138>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e59      	subs	r1, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a0:	3301      	adds	r3, #1
 80038a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a6:	e051      	b.n	800394c <HAL_I2C_Init+0x1dc>
 80038a8:	2304      	movs	r3, #4
 80038aa:	e04f      	b.n	800394c <HAL_I2C_Init+0x1dc>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d111      	bne.n	80038d8 <HAL_I2C_Init+0x168>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	440b      	add	r3, r1
 80038c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e012      	b.n	80038fe <HAL_I2C_Init+0x18e>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1e58      	subs	r0, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	0099      	lsls	r1, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Init+0x196>
 8003902:	2301      	movs	r3, #1
 8003904:	e022      	b.n	800394c <HAL_I2C_Init+0x1dc>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10e      	bne.n	800392c <HAL_I2C_Init+0x1bc>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1e58      	subs	r0, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6859      	ldr	r1, [r3, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	440b      	add	r3, r1
 800391c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003920:	3301      	adds	r3, #1
 8003922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392a:	e00f      	b.n	800394c <HAL_I2C_Init+0x1dc>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1e58      	subs	r0, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	0099      	lsls	r1, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003942:	3301      	adds	r3, #1
 8003944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	6809      	ldr	r1, [r1, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800397a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6911      	ldr	r1, [r2, #16]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68d2      	ldr	r2, [r2, #12]
 8003986:	4311      	orrs	r1, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	430b      	orrs	r3, r1
 800398e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	000186a0 	.word	0x000186a0
 80039e8:	001e847f 	.word	0x001e847f
 80039ec:	003d08ff 	.word	0x003d08ff
 80039f0:	431bde83 	.word	0x431bde83
 80039f4:	10624dd3 	.word	0x10624dd3

080039f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d129      	bne.n	8003a62 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2224      	movs	r2, #36	; 0x24
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0210 	bic.w	r2, r2, #16
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e000      	b.n	8003a64 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
  }
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d12a      	bne.n	8003ae0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2224      	movs	r2, #36	; 0x24
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0201 	bic.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003aaa:	89fb      	ldrh	r3, [r7, #14]
 8003aac:	f023 030f 	bic.w	r3, r3, #15
 8003ab0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	89fb      	ldrh	r3, [r7, #14]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	89fa      	ldrh	r2, [r7, #14]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a1f      	ldr	r2, [pc, #124]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0a:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b16:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b1c:	f7fe fa46 	bl	8001fac <HAL_GetTick>
 8003b20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b22:	e009      	b.n	8003b38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b24:	f7fe fa42 	bl	8001fac <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b32:	d901      	bls.n	8003b38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e01f      	b.n	8003b78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b44:	d1ee      	bne.n	8003b24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b4c:	f7fe fa2e 	bl	8001fac <HAL_GetTick>
 8003b50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b52:	e009      	b.n	8003b68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b54:	f7fe fa2a 	bl	8001fac <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b62:	d901      	bls.n	8003b68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e007      	b.n	8003b78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b68:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b74:	d1ee      	bne.n	8003b54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40023800 	.word	0x40023800
 8003b84:	420e0040 	.word	0x420e0040
 8003b88:	40007000 	.word	0x40007000
 8003b8c:	420e0044 	.word	0x420e0044

08003b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e264      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d075      	beq.n	8003c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bae:	4ba3      	ldr	r3, [pc, #652]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bba:	4ba0      	ldr	r3, [pc, #640]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d112      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc6:	4b9d      	ldr	r3, [pc, #628]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd2:	d10b      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	4b99      	ldr	r3, [pc, #612]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d05b      	beq.n	8003c98 <HAL_RCC_OscConfig+0x108>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d157      	bne.n	8003c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e23f      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d106      	bne.n	8003c04 <HAL_RCC_OscConfig+0x74>
 8003bf6:	4b91      	ldr	r3, [pc, #580]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a90      	ldr	r2, [pc, #576]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e01d      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x98>
 8003c0e:	4b8b      	ldr	r3, [pc, #556]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a8a      	ldr	r2, [pc, #552]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b88      	ldr	r3, [pc, #544]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a87      	ldr	r2, [pc, #540]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c28:	4b84      	ldr	r3, [pc, #528]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a83      	ldr	r2, [pc, #524]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b81      	ldr	r3, [pc, #516]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a80      	ldr	r2, [pc, #512]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fe f9b0 	bl	8001fac <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c50:	f7fe f9ac 	bl	8001fac <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	; 0x64
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e204      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0xc0>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fe f99c 	bl	8001fac <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fe f998 	bl	8001fac <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e1f0      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8a:	4b6c      	ldr	r3, [pc, #432]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0xe8>
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d063      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca6:	4b65      	ldr	r3, [pc, #404]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb2:	4b62      	ldr	r3, [pc, #392]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d11c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b5f      	ldr	r3, [pc, #380]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d116      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cca:	4b5c      	ldr	r3, [pc, #368]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e1c4      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce2:	4b56      	ldr	r3, [pc, #344]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4952      	ldr	r1, [pc, #328]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	e03a      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d00:	4b4f      	ldr	r3, [pc, #316]	; (8003e40 <HAL_RCC_OscConfig+0x2b0>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fe f951 	bl	8001fac <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fe f94d 	bl	8001fac <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e1a5      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	4b46      	ldr	r3, [pc, #280]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4940      	ldr	r1, [pc, #256]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]
 8003d40:	e015      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d42:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <HAL_RCC_OscConfig+0x2b0>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fe f930 	bl	8001fac <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d50:	f7fe f92c 	bl	8001fac <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e184      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d030      	beq.n	8003ddc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d016      	beq.n	8003db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b30      	ldr	r3, [pc, #192]	; (8003e44 <HAL_RCC_OscConfig+0x2b4>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fe f910 	bl	8001fac <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d90:	f7fe f90c 	bl	8001fac <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e164      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	4b26      	ldr	r3, [pc, #152]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x200>
 8003dae:	e015      	b.n	8003ddc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db0:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_RCC_OscConfig+0x2b4>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db6:	f7fe f8f9 	bl	8001fac <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fe f8f5 	bl	8001fac <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e14d      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80a0 	beq.w	8003f2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dea:	2300      	movs	r3, #0
 8003dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10f      	bne.n	8003e1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_OscConfig+0x2b8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d121      	bne.n	8003e6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e26:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <HAL_RCC_OscConfig+0x2b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a07      	ldr	r2, [pc, #28]	; (8003e48 <HAL_RCC_OscConfig+0x2b8>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e32:	f7fe f8bb 	bl	8001fac <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e38:	e011      	b.n	8003e5e <HAL_RCC_OscConfig+0x2ce>
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	42470000 	.word	0x42470000
 8003e44:	42470e80 	.word	0x42470e80
 8003e48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4c:	f7fe f8ae 	bl	8001fac <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e106      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5e:	4b85      	ldr	r3, [pc, #532]	; (8004074 <HAL_RCC_OscConfig+0x4e4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d106      	bne.n	8003e80 <HAL_RCC_OscConfig+0x2f0>
 8003e72:	4b81      	ldr	r3, [pc, #516]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a80      	ldr	r2, [pc, #512]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7e:	e01c      	b.n	8003eba <HAL_RCC_OscConfig+0x32a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	d10c      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x312>
 8003e88:	4b7b      	ldr	r3, [pc, #492]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a7a      	ldr	r2, [pc, #488]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003e8e:	f043 0304 	orr.w	r3, r3, #4
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
 8003e94:	4b78      	ldr	r3, [pc, #480]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a77      	ldr	r2, [pc, #476]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	e00b      	b.n	8003eba <HAL_RCC_OscConfig+0x32a>
 8003ea2:	4b75      	ldr	r3, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	4a74      	ldr	r2, [pc, #464]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70
 8003eae:	4b72      	ldr	r3, [pc, #456]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a71      	ldr	r2, [pc, #452]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003eb4:	f023 0304 	bic.w	r3, r3, #4
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d015      	beq.n	8003eee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec2:	f7fe f873 	bl	8001fac <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eca:	f7fe f86f 	bl	8001fac <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e0c5      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	4b65      	ldr	r3, [pc, #404]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ee      	beq.n	8003eca <HAL_RCC_OscConfig+0x33a>
 8003eec:	e014      	b.n	8003f18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eee:	f7fe f85d 	bl	8001fac <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fe f859 	bl	8001fac <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e0af      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0c:	4b5a      	ldr	r3, [pc, #360]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ee      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d105      	bne.n	8003f2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1e:	4b56      	ldr	r3, [pc, #344]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a55      	ldr	r2, [pc, #340]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 809b 	beq.w	800406a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d05c      	beq.n	8003ffa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d141      	bne.n	8003fcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f48:	4b4c      	ldr	r3, [pc, #304]	; (800407c <HAL_RCC_OscConfig+0x4ec>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fe f82d 	bl	8001fac <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fe f829 	bl	8001fac <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e081      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f68:	4b43      	ldr	r3, [pc, #268]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	019b      	lsls	r3, r3, #6
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	041b      	lsls	r3, r3, #16
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	061b      	lsls	r3, r3, #24
 8003f98:	4937      	ldr	r1, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9e:	4b37      	ldr	r3, [pc, #220]	; (800407c <HAL_RCC_OscConfig+0x4ec>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa4:	f7fe f802 	bl	8001fac <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fd fffe 	bl	8001fac <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e056      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	4b2e      	ldr	r3, [pc, #184]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x41c>
 8003fca:	e04e      	b.n	800406a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	; (800407c <HAL_RCC_OscConfig+0x4ec>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fd ffeb 	bl	8001fac <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fda:	f7fd ffe7 	bl	8001fac <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e03f      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fec:	4b22      	ldr	r3, [pc, #136]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x44a>
 8003ff8:	e037      	b.n	800406a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e032      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004006:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <HAL_RCC_OscConfig+0x4e8>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d028      	beq.n	8004066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d121      	bne.n	8004066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d11a      	bne.n	8004066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004036:	4013      	ands	r3, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800403c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800403e:	4293      	cmp	r3, r2
 8004040:	d111      	bne.n	8004066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	3b01      	subs	r3, #1
 8004050:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d107      	bne.n	8004066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d001      	beq.n	800406a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40007000 	.word	0x40007000
 8004078:	40023800 	.word	0x40023800
 800407c:	42470060 	.word	0x42470060

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0cc      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b68      	ldr	r3, [pc, #416]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d90c      	bls.n	80040bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b65      	ldr	r3, [pc, #404]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b63      	ldr	r3, [pc, #396]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0b8      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d4:	4b59      	ldr	r3, [pc, #356]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a58      	ldr	r2, [pc, #352]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ec:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f8:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	494d      	ldr	r1, [pc, #308]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d044      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d119      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d003      	beq.n	800413e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	2b03      	cmp	r3, #3
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413e:	4b3f      	ldr	r3, [pc, #252]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e06f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e067      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415e:	4b37      	ldr	r3, [pc, #220]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 0203 	bic.w	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4934      	ldr	r1, [pc, #208]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004170:	f7fd ff1c 	bl	8001fac <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	e00a      	b.n	800418e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004178:	f7fd ff18 	bl	8001fac <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e04f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 020c 	and.w	r2, r3, #12
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	429a      	cmp	r2, r3
 800419e:	d1eb      	bne.n	8004178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d20c      	bcs.n	80041c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e032      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4916      	ldr	r1, [pc, #88]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	490e      	ldr	r1, [pc, #56]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004206:	f000 f821 	bl	800424c <HAL_RCC_GetSysClockFreq>
 800420a:	4602      	mov	r2, r0
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	490a      	ldr	r1, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	5ccb      	ldrb	r3, [r1, r3]
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004222:	4b09      	ldr	r3, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fd fe7c 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023c00 	.word	0x40023c00
 800423c:	40023800 	.word	0x40023800
 8004240:	08007048 	.word	0x08007048
 8004244:	20000000 	.word	0x20000000
 8004248:	20000074 	.word	0x20000074

0800424c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800424c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	607b      	str	r3, [r7, #4]
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	2300      	movs	r3, #0
 800425e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004264:	4b67      	ldr	r3, [pc, #412]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d00d      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x40>
 8004270:	2b08      	cmp	r3, #8
 8004272:	f200 80bd 	bhi.w	80043f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x34>
 800427a:	2b04      	cmp	r3, #4
 800427c:	d003      	beq.n	8004286 <HAL_RCC_GetSysClockFreq+0x3a>
 800427e:	e0b7      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004280:	4b61      	ldr	r3, [pc, #388]	; (8004408 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004282:	60bb      	str	r3, [r7, #8]
       break;
 8004284:	e0b7      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004286:	4b60      	ldr	r3, [pc, #384]	; (8004408 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004288:	60bb      	str	r3, [r7, #8]
      break;
 800428a:	e0b4      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800428c:	4b5d      	ldr	r3, [pc, #372]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004294:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004296:	4b5b      	ldr	r3, [pc, #364]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d04d      	beq.n	800433e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a2:	4b58      	ldr	r3, [pc, #352]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	461a      	mov	r2, r3
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	ea02 0800 	and.w	r8, r2, r0
 80042ba:	ea03 0901 	and.w	r9, r3, r1
 80042be:	4640      	mov	r0, r8
 80042c0:	4649      	mov	r1, r9
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	014b      	lsls	r3, r1, #5
 80042cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042d0:	0142      	lsls	r2, r0, #5
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	ebb0 0008 	subs.w	r0, r0, r8
 80042da:	eb61 0109 	sbc.w	r1, r1, r9
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	018b      	lsls	r3, r1, #6
 80042e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042ec:	0182      	lsls	r2, r0, #6
 80042ee:	1a12      	subs	r2, r2, r0
 80042f0:	eb63 0301 	sbc.w	r3, r3, r1
 80042f4:	f04f 0000 	mov.w	r0, #0
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	00d9      	lsls	r1, r3, #3
 80042fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004302:	00d0      	lsls	r0, r2, #3
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	eb12 0208 	adds.w	r2, r2, r8
 800430c:	eb43 0309 	adc.w	r3, r3, r9
 8004310:	f04f 0000 	mov.w	r0, #0
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	0299      	lsls	r1, r3, #10
 800431a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800431e:	0290      	lsls	r0, r2, #10
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	461a      	mov	r2, r3
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	f7fb ff5c 	bl	80001ec <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4613      	mov	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e04a      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433e:	4b31      	ldr	r3, [pc, #196]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	099b      	lsrs	r3, r3, #6
 8004344:	461a      	mov	r2, r3
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800434e:	f04f 0100 	mov.w	r1, #0
 8004352:	ea02 0400 	and.w	r4, r2, r0
 8004356:	ea03 0501 	and.w	r5, r3, r1
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	014b      	lsls	r3, r1, #5
 8004368:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800436c:	0142      	lsls	r2, r0, #5
 800436e:	4610      	mov	r0, r2
 8004370:	4619      	mov	r1, r3
 8004372:	1b00      	subs	r0, r0, r4
 8004374:	eb61 0105 	sbc.w	r1, r1, r5
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	018b      	lsls	r3, r1, #6
 8004382:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004386:	0182      	lsls	r2, r0, #6
 8004388:	1a12      	subs	r2, r2, r0
 800438a:	eb63 0301 	sbc.w	r3, r3, r1
 800438e:	f04f 0000 	mov.w	r0, #0
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	00d9      	lsls	r1, r3, #3
 8004398:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800439c:	00d0      	lsls	r0, r2, #3
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	1912      	adds	r2, r2, r4
 80043a4:	eb45 0303 	adc.w	r3, r5, r3
 80043a8:	f04f 0000 	mov.w	r0, #0
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	0299      	lsls	r1, r3, #10
 80043b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043b6:	0290      	lsls	r0, r2, #10
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	f7fb ff10 	bl	80001ec <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4613      	mov	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	3301      	adds	r3, #1
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	60bb      	str	r3, [r7, #8]
      break;
 80043ee:	e002      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043f2:	60bb      	str	r3, [r7, #8]
      break;
 80043f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f6:	68bb      	ldr	r3, [r7, #8]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800
 8004408:	00f42400 	.word	0x00f42400

0800440c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_RCC_GetHCLKFreq+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000000 	.word	0x20000000

08004424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004428:	f7ff fff0 	bl	800440c <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0a9b      	lsrs	r3, r3, #10
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4903      	ldr	r1, [pc, #12]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	08007058 	.word	0x08007058

0800444c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004450:	f7ff ffdc 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0b5b      	lsrs	r3, r3, #13
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4903      	ldr	r1, [pc, #12]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	08007058 	.word	0x08007058

08004474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e07b      	b.n	800457e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	d108      	bne.n	80044a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004496:	d009      	beq.n	80044ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	61da      	str	r2, [r3, #28]
 800449e:	e005      	b.n	80044ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fc fd26 	bl	8000f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	ea42 0103 	orr.w	r1, r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	f003 0104 	and.w	r1, r3, #4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	f003 0210 	and.w	r2, r3, #16
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800456c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e041      	b.n	800461c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7fd f98f 	bl	80018d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f000 fd71 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	d001      	beq.n	800463c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e046      	b.n	80046ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a23      	ldr	r2, [pc, #140]	; (80046d8 <HAL_TIM_Base_Start+0xb4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d022      	beq.n	8004694 <HAL_TIM_Base_Start+0x70>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004656:	d01d      	beq.n	8004694 <HAL_TIM_Base_Start+0x70>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <HAL_TIM_Base_Start+0xb8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <HAL_TIM_Base_Start+0x70>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <HAL_TIM_Base_Start+0xbc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_TIM_Base_Start+0x70>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <HAL_TIM_Base_Start+0xc0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_Base_Start+0x70>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1b      	ldr	r2, [pc, #108]	; (80046e8 <HAL_TIM_Base_Start+0xc4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_TIM_Base_Start+0x70>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a19      	ldr	r2, [pc, #100]	; (80046ec <HAL_TIM_Base_Start+0xc8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_Base_Start+0x70>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_TIM_Base_Start+0xcc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d111      	bne.n	80046b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d010      	beq.n	80046c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	e007      	b.n	80046c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40010400 	.word	0x40010400
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40001800 	.word	0x40001800

080046f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e041      	b.n	800478a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f839 	bl	8004792 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f000 fcba 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <HAL_TIM_PWM_Start+0x24>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e022      	b.n	8004812 <HAL_TIM_PWM_Start+0x6a>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d109      	bne.n	80047e6 <HAL_TIM_PWM_Start+0x3e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	bf14      	ite	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	2300      	moveq	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	e015      	b.n	8004812 <HAL_TIM_PWM_Start+0x6a>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d109      	bne.n	8004800 <HAL_TIM_PWM_Start+0x58>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e008      	b.n	8004812 <HAL_TIM_PWM_Start+0x6a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e07c      	b.n	8004914 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0x82>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004828:	e013      	b.n	8004852 <HAL_TIM_PWM_Start+0xaa>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b04      	cmp	r3, #4
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0x92>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004838:	e00b      	b.n	8004852 <HAL_TIM_PWM_Start+0xaa>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0xa2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004848:	e003      	b.n	8004852 <HAL_TIM_PWM_Start+0xaa>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f001 f83a 	bl	80058d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a2d      	ldr	r2, [pc, #180]	; (800491c <HAL_TIM_PWM_Start+0x174>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_TIM_PWM_Start+0xcc>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a2c      	ldr	r2, [pc, #176]	; (8004920 <HAL_TIM_PWM_Start+0x178>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d101      	bne.n	8004878 <HAL_TIM_PWM_Start+0xd0>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <HAL_TIM_PWM_Start+0xd2>
 8004878:	2300      	movs	r3, #0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a22      	ldr	r2, [pc, #136]	; (800491c <HAL_TIM_PWM_Start+0x174>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d022      	beq.n	80048de <HAL_TIM_PWM_Start+0x136>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a0:	d01d      	beq.n	80048de <HAL_TIM_PWM_Start+0x136>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <HAL_TIM_PWM_Start+0x17c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d018      	beq.n	80048de <HAL_TIM_PWM_Start+0x136>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <HAL_TIM_PWM_Start+0x180>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_TIM_PWM_Start+0x136>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1c      	ldr	r2, [pc, #112]	; (800492c <HAL_TIM_PWM_Start+0x184>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_TIM_PWM_Start+0x136>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a16      	ldr	r2, [pc, #88]	; (8004920 <HAL_TIM_PWM_Start+0x178>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d009      	beq.n	80048de <HAL_TIM_PWM_Start+0x136>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a18      	ldr	r2, [pc, #96]	; (8004930 <HAL_TIM_PWM_Start+0x188>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_TIM_PWM_Start+0x136>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a16      	ldr	r2, [pc, #88]	; (8004934 <HAL_TIM_PWM_Start+0x18c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d111      	bne.n	8004902 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b06      	cmp	r3, #6
 80048ee:	d010      	beq.n	8004912 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004900:	e007      	b.n	8004912 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40010000 	.word	0x40010000
 8004920:	40010400 	.word	0x40010400
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40014000 	.word	0x40014000
 8004934:	40001800 	.word	0x40001800

08004938 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e041      	b.n	80049ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f839 	bl	80049d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f000 fb98 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d122      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d11b      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f06f 0202 	mvn.w	r2, #2
 8004a16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fb1e 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004a32:	e005      	b.n	8004a40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fb10 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fb21 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d122      	bne.n	8004a9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d11b      	bne.n	8004a9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 0204 	mvn.w	r2, #4
 8004a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 faf4 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004a86:	e005      	b.n	8004a94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fae6 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 faf7 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d122      	bne.n	8004aee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d11b      	bne.n	8004aee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f06f 0208 	mvn.w	r2, #8
 8004abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2204      	movs	r2, #4
 8004ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 faca 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004ada:	e005      	b.n	8004ae8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fabc 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 facd 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b10      	cmp	r3, #16
 8004afa:	d122      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d11b      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f06f 0210 	mvn.w	r2, #16
 8004b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2208      	movs	r2, #8
 8004b18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 faa0 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004b2e:	e005      	b.n	8004b3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fa92 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 faa3 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d10e      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d107      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0201 	mvn.w	r2, #1
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa6c 	bl	8005046 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b78:	2b80      	cmp	r3, #128	; 0x80
 8004b7a:	d10e      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b80      	cmp	r3, #128	; 0x80
 8004b88:	d107      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 ff9b 	bl	8005ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d10e      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d107      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fa68 	bl	8005096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d10e      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d107      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f06f 0220 	mvn.w	r2, #32
 8004bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 ff65 	bl	8005abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e088      	b.n	8004d2a <HAL_TIM_IC_ConfigChannel+0x130>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d11b      	bne.n	8004c5e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f000 fc89 	bl	800554c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 020c 	bic.w	r2, r2, #12
 8004c48:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6999      	ldr	r1, [r3, #24]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	619a      	str	r2, [r3, #24]
 8004c5c:	e060      	b.n	8004d20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d11c      	bne.n	8004c9e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6819      	ldr	r1, [r3, #0]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f000 fd0d 	bl	8005692 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c86:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6999      	ldr	r1, [r3, #24]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	021a      	lsls	r2, r3, #8
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	619a      	str	r2, [r3, #24]
 8004c9c:	e040      	b.n	8004d20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d11b      	bne.n	8004cdc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6819      	ldr	r1, [r3, #0]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f000 fd5a 	bl	800576c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 020c 	bic.w	r2, r2, #12
 8004cc6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69d9      	ldr	r1, [r3, #28]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	61da      	str	r2, [r3, #28]
 8004cda:	e021      	b.n	8004d20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b0c      	cmp	r3, #12
 8004ce0:	d11c      	bne.n	8004d1c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	6819      	ldr	r1, [r3, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f000 fd77 	bl	80057e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d04:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69d9      	ldr	r1, [r3, #28]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	021a      	lsls	r2, r3, #8
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	61da      	str	r2, [r3, #28]
 8004d1a:	e001      	b.n	8004d20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e0ae      	b.n	8004eb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b0c      	cmp	r3, #12
 8004d5e:	f200 809f 	bhi.w	8004ea0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004d9d 	.word	0x08004d9d
 8004d6c:	08004ea1 	.word	0x08004ea1
 8004d70:	08004ea1 	.word	0x08004ea1
 8004d74:	08004ea1 	.word	0x08004ea1
 8004d78:	08004ddd 	.word	0x08004ddd
 8004d7c:	08004ea1 	.word	0x08004ea1
 8004d80:	08004ea1 	.word	0x08004ea1
 8004d84:	08004ea1 	.word	0x08004ea1
 8004d88:	08004e1f 	.word	0x08004e1f
 8004d8c:	08004ea1 	.word	0x08004ea1
 8004d90:	08004ea1 	.word	0x08004ea1
 8004d94:	08004ea1 	.word	0x08004ea1
 8004d98:	08004e5f 	.word	0x08004e5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fa22 	bl	80051ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0208 	orr.w	r2, r2, #8
 8004db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0204 	bic.w	r2, r2, #4
 8004dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6999      	ldr	r1, [r3, #24]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	619a      	str	r2, [r3, #24]
      break;
 8004dda:	e064      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68b9      	ldr	r1, [r7, #8]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fa72 	bl	80052cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6999      	ldr	r1, [r3, #24]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	021a      	lsls	r2, r3, #8
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	619a      	str	r2, [r3, #24]
      break;
 8004e1c:	e043      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fac7 	bl	80053b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0208 	orr.w	r2, r2, #8
 8004e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0204 	bic.w	r2, r2, #4
 8004e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69d9      	ldr	r1, [r3, #28]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	61da      	str	r2, [r3, #28]
      break;
 8004e5c:	e023      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fb1b 	bl	80054a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69d9      	ldr	r1, [r3, #28]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	021a      	lsls	r2, r3, #8
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	61da      	str	r2, [r3, #28]
      break;
 8004e9e:	e002      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e0b4      	b.n	800503e <HAL_TIM_ConfigClockSource+0x186>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0c:	d03e      	beq.n	8004f8c <HAL_TIM_ConfigClockSource+0xd4>
 8004f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f12:	f200 8087 	bhi.w	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1a:	f000 8086 	beq.w	800502a <HAL_TIM_ConfigClockSource+0x172>
 8004f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f22:	d87f      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f24:	2b70      	cmp	r3, #112	; 0x70
 8004f26:	d01a      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0xa6>
 8004f28:	2b70      	cmp	r3, #112	; 0x70
 8004f2a:	d87b      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f2c:	2b60      	cmp	r3, #96	; 0x60
 8004f2e:	d050      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x11a>
 8004f30:	2b60      	cmp	r3, #96	; 0x60
 8004f32:	d877      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f34:	2b50      	cmp	r3, #80	; 0x50
 8004f36:	d03c      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0xfa>
 8004f38:	2b50      	cmp	r3, #80	; 0x50
 8004f3a:	d873      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d058      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x13a>
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d86f      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f44:	2b30      	cmp	r3, #48	; 0x30
 8004f46:	d064      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x15a>
 8004f48:	2b30      	cmp	r3, #48	; 0x30
 8004f4a:	d86b      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d060      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x15a>
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d867      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d05c      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x15a>
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d05a      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x15a>
 8004f5c:	e062      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6899      	ldr	r1, [r3, #8]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f000 fc91 	bl	8005894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	609a      	str	r2, [r3, #8]
      break;
 8004f8a:	e04f      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	6899      	ldr	r1, [r3, #8]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f000 fc7a 	bl	8005894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fae:	609a      	str	r2, [r3, #8]
      break;
 8004fb0:	e03c      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f000 fb38 	bl	8005634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2150      	movs	r1, #80	; 0x50
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fc47 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8004fd0:	e02c      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6859      	ldr	r1, [r3, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f000 fb94 	bl	800570c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2160      	movs	r1, #96	; 0x60
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fc37 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8004ff0:	e01c      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6859      	ldr	r1, [r3, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f000 fb18 	bl	8005634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2140      	movs	r1, #64	; 0x40
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fc27 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005010:	e00c      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f000 fc1e 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005022:	e003      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
      break;
 8005028:	e000      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800502a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800503c:	7bfb      	ldrb	r3, [r7, #15]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a40      	ldr	r2, [pc, #256]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ca:	d00f      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3d      	ldr	r2, [pc, #244]	; (80051c4 <TIM_Base_SetConfig+0x118>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3c      	ldr	r2, [pc, #240]	; (80051c8 <TIM_Base_SetConfig+0x11c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a3b      	ldr	r2, [pc, #236]	; (80051cc <TIM_Base_SetConfig+0x120>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3a      	ldr	r2, [pc, #232]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d108      	bne.n	80050fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d02b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510c:	d027      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <TIM_Base_SetConfig+0x118>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d023      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2b      	ldr	r2, [pc, #172]	; (80051c8 <TIM_Base_SetConfig+0x11c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01f      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <TIM_Base_SetConfig+0x120>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d017      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a28      	ldr	r2, [pc, #160]	; (80051d4 <TIM_Base_SetConfig+0x128>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a27      	ldr	r2, [pc, #156]	; (80051d8 <TIM_Base_SetConfig+0x12c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00f      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a26      	ldr	r2, [pc, #152]	; (80051dc <TIM_Base_SetConfig+0x130>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <TIM_Base_SetConfig+0x134>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a24      	ldr	r2, [pc, #144]	; (80051e4 <TIM_Base_SetConfig+0x138>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a23      	ldr	r2, [pc, #140]	; (80051e8 <TIM_Base_SetConfig+0x13c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_Base_SetConfig+0xf8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d103      	bne.n	80051ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	615a      	str	r2, [r3, #20]
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40010400 	.word	0x40010400
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40014400 	.word	0x40014400
 80051dc:	40014800 	.word	0x40014800
 80051e0:	40001800 	.word	0x40001800
 80051e4:	40001c00 	.word	0x40001c00
 80051e8:	40002000 	.word	0x40002000

080051ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0303 	bic.w	r3, r3, #3
 8005222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f023 0302 	bic.w	r3, r3, #2
 8005234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a20      	ldr	r2, [pc, #128]	; (80052c4 <TIM_OC1_SetConfig+0xd8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <TIM_OC1_SetConfig+0x64>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <TIM_OC1_SetConfig+0xdc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10c      	bne.n	800526a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0308 	bic.w	r3, r3, #8
 8005256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f023 0304 	bic.w	r3, r3, #4
 8005268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <TIM_OC1_SetConfig+0xd8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_OC1_SetConfig+0x8e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <TIM_OC1_SetConfig+0xdc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d111      	bne.n	800529e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	621a      	str	r2, [r3, #32]
}
 80052b8:	bf00      	nop
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40010400 	.word	0x40010400

080052cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0210 	bic.w	r2, r3, #16
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0320 	bic.w	r3, r3, #32
 8005316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a22      	ldr	r2, [pc, #136]	; (80053b0 <TIM_OC2_SetConfig+0xe4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d003      	beq.n	8005334 <TIM_OC2_SetConfig+0x68>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a21      	ldr	r2, [pc, #132]	; (80053b4 <TIM_OC2_SetConfig+0xe8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d10d      	bne.n	8005350 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800533a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <TIM_OC2_SetConfig+0xe4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_OC2_SetConfig+0x94>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <TIM_OC2_SetConfig+0xe8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d113      	bne.n	8005388 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800536e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40010000 	.word	0x40010000
 80053b4:	40010400 	.word	0x40010400

080053b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0303 	bic.w	r3, r3, #3
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a21      	ldr	r2, [pc, #132]	; (8005498 <TIM_OC3_SetConfig+0xe0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_OC3_SetConfig+0x66>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a20      	ldr	r2, [pc, #128]	; (800549c <TIM_OC3_SetConfig+0xe4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d10d      	bne.n	800543a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a16      	ldr	r2, [pc, #88]	; (8005498 <TIM_OC3_SetConfig+0xe0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_OC3_SetConfig+0x92>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a15      	ldr	r2, [pc, #84]	; (800549c <TIM_OC3_SetConfig+0xe4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d113      	bne.n	8005472 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	621a      	str	r2, [r3, #32]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40010000 	.word	0x40010000
 800549c:	40010400 	.word	0x40010400

080054a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	031b      	lsls	r3, r3, #12
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a12      	ldr	r2, [pc, #72]	; (8005544 <TIM_OC4_SetConfig+0xa4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_OC4_SetConfig+0x68>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a11      	ldr	r2, [pc, #68]	; (8005548 <TIM_OC4_SetConfig+0xa8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d109      	bne.n	800551c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800550e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	019b      	lsls	r3, r3, #6
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40010000 	.word	0x40010000
 8005548:	40010400 	.word	0x40010400

0800554c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a28      	ldr	r2, [pc, #160]	; (8005618 <TIM_TI1_SetConfig+0xcc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01b      	beq.n	80055b2 <TIM_TI1_SetConfig+0x66>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005580:	d017      	beq.n	80055b2 <TIM_TI1_SetConfig+0x66>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a25      	ldr	r2, [pc, #148]	; (800561c <TIM_TI1_SetConfig+0xd0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <TIM_TI1_SetConfig+0x66>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a24      	ldr	r2, [pc, #144]	; (8005620 <TIM_TI1_SetConfig+0xd4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00f      	beq.n	80055b2 <TIM_TI1_SetConfig+0x66>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a23      	ldr	r2, [pc, #140]	; (8005624 <TIM_TI1_SetConfig+0xd8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00b      	beq.n	80055b2 <TIM_TI1_SetConfig+0x66>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a22      	ldr	r2, [pc, #136]	; (8005628 <TIM_TI1_SetConfig+0xdc>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d007      	beq.n	80055b2 <TIM_TI1_SetConfig+0x66>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a21      	ldr	r2, [pc, #132]	; (800562c <TIM_TI1_SetConfig+0xe0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_TI1_SetConfig+0x66>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a20      	ldr	r2, [pc, #128]	; (8005630 <TIM_TI1_SetConfig+0xe4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d101      	bne.n	80055b6 <TIM_TI1_SetConfig+0x6a>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <TIM_TI1_SetConfig+0x6c>
 80055b6:	2300      	movs	r3, #0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	e003      	b.n	80055d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f023 030a 	bic.w	r3, r3, #10
 80055f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f003 030a 	and.w	r3, r3, #10
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40010000 	.word	0x40010000
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800
 8005624:	40000c00 	.word	0x40000c00
 8005628:	40010400 	.word	0x40010400
 800562c:	40014000 	.word	0x40014000
 8005630:	40001800 	.word	0x40001800

08005634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f023 0201 	bic.w	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800565e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f023 030a 	bic.w	r3, r3, #10
 8005670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005692:	b480      	push	{r7}
 8005694:	b087      	sub	sp, #28
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f023 0210 	bic.w	r2, r3, #16
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	031b      	lsls	r3, r3, #12
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	621a      	str	r2, [r3, #32]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f023 0210 	bic.w	r2, r3, #16
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005736:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	031b      	lsls	r3, r3, #12
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005748:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 0303 	bic.w	r3, r3, #3
 8005798:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80057bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	621a      	str	r2, [r3, #32]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005810:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005822:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	031b      	lsls	r3, r3, #12
 8005828:	b29b      	uxth	r3, r3
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005836:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	031b      	lsls	r3, r3, #12
 800583c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	f043 0307 	orr.w	r3, r3, #7
 8005880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	021a      	lsls	r2, r3, #8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	2201      	movs	r2, #1
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a1a      	ldr	r2, [r3, #32]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	43db      	mvns	r3, r3
 80058f6:	401a      	ands	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a1a      	ldr	r2, [r3, #32]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 031f 	and.w	r3, r3, #31
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	fa01 f303 	lsl.w	r3, r1, r3
 800590c:	431a      	orrs	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005934:	2302      	movs	r3, #2
 8005936:	e05a      	b.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a21      	ldr	r2, [pc, #132]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005984:	d01d      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1d      	ldr	r2, [pc, #116]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1b      	ldr	r2, [pc, #108]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1a      	ldr	r2, [pc, #104]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a17      	ldr	r2, [pc, #92]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10c      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40000c00 	.word	0x40000c00
 8005a0c:	40010400 	.word	0x40010400
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40001800 	.word	0x40001800

08005a18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e03d      	b.n	8005ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e03f      	b.n	8005b76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fc f866 	bl	8001bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	; 0x24
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 ff73 	bl	8006a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08c      	sub	sp, #48	; 0x30
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	d165      	bne.n	8005c66 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_UART_Transmit_DMA+0x26>
 8005ba0:	88fb      	ldrh	r3, [r7, #6]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e05e      	b.n	8005c68 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_UART_Transmit_DMA+0x38>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e057      	b.n	8005c68 <HAL_UART_Transmit_DMA+0xe8>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	88fa      	ldrh	r2, [r7, #6]
 8005bca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	88fa      	ldrh	r2, [r7, #6]
 8005bd0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2221      	movs	r2, #33	; 0x21
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be4:	4a22      	ldr	r2, [pc, #136]	; (8005c70 <HAL_UART_Transmit_DMA+0xf0>)
 8005be6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bec:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <HAL_UART_Transmit_DMA+0xf4>)
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf4:	4a20      	ldr	r2, [pc, #128]	; (8005c78 <HAL_UART_Transmit_DMA+0xf8>)
 8005bf6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005c00:	f107 0308 	add.w	r3, r7, #8
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	6819      	ldr	r1, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3304      	adds	r3, #4
 8005c14:	461a      	mov	r2, r3
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	f7fd f854 	bl	8002cc4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c24:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3314      	adds	r3, #20
 8005c34:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3314      	adds	r3, #20
 8005c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c4e:	627a      	str	r2, [r7, #36]	; 0x24
 8005c50:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	6a39      	ldr	r1, [r7, #32]
 8005c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e5      	bne.n	8005c2e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e000      	b.n	8005c68 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
  }
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3730      	adds	r7, #48	; 0x30
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	080062b5 	.word	0x080062b5
 8005c74:	0800634f 	.word	0x0800634f
 8005c78:	080064c7 	.word	0x080064c7

08005c7c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08c      	sub	sp, #48	; 0x30
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	d152      	bne.n	8005d3c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e04b      	b.n	8005d3e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e044      	b.n	8005d3e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 fc47 	bl	800655c <UART_Start_Receive_DMA>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d12c      	bne.n	8005d36 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d125      	bne.n	8005d30 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	617b      	str	r3, [r7, #20]
   return(result);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f043 0310 	orr.w	r3, r3, #16
 8005d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	330c      	adds	r3, #12
 8005d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d1a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6a39      	ldr	r1, [r7, #32]
 8005d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e5      	bne.n	8005cfa <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005d2e:	e002      	b.n	8005d36 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d3a:	e000      	b.n	8005d3e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
  }
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3730      	adds	r7, #48	; 0x30
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b0ba      	sub	sp, #232	; 0xe8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10f      	bne.n	8005dae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_UART_IRQHandler+0x66>
 8005d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fd79 	bl	800689e <UART_Receive_IT>
      return;
 8005dac:	e256      	b.n	800625c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80de 	beq.w	8005f74 <HAL_UART_IRQHandler+0x22c>
 8005db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80d1 	beq.w	8005f74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <HAL_UART_IRQHandler+0xae>
 8005dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f043 0201 	orr.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <HAL_UART_IRQHandler+0xd2>
 8005e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f043 0202 	orr.w	r2, r3, #2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00b      	beq.n	8005e3e <HAL_UART_IRQHandler+0xf6>
 8005e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f043 0204 	orr.w	r2, r3, #4
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d011      	beq.n	8005e6e <HAL_UART_IRQHandler+0x126>
 8005e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d105      	bne.n	8005e62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	f043 0208 	orr.w	r2, r3, #8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 81ed 	beq.w	8006252 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_UART_IRQHandler+0x14e>
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fd04 	bl	800689e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d103      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x17a>
 8005eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d04f      	beq.n	8005f62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fc0c 	bl	80066e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	d141      	bne.n	8005f5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3314      	adds	r3, #20
 8005edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3314      	adds	r3, #20
 8005efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1d9      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d013      	beq.n	8005f52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	4a7d      	ldr	r2, [pc, #500]	; (8006124 <HAL_UART_IRQHandler+0x3dc>)
 8005f30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fc ff8c 	bl	8002e54 <HAL_DMA_Abort_IT>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d016      	beq.n	8005f70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f50:	e00e      	b.n	8005f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f9a4 	bl	80062a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f58:	e00a      	b.n	8005f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f9a0 	bl	80062a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	e006      	b.n	8005f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f99c 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f6e:	e170      	b.n	8006252 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	bf00      	nop
    return;
 8005f72:	e16e      	b.n	8006252 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	f040 814a 	bne.w	8006212 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8143 	beq.w	8006212 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 813c 	beq.w	8006212 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fba:	2b40      	cmp	r3, #64	; 0x40
 8005fbc:	f040 80b4 	bne.w	8006128 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8140 	beq.w	8006256 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	f080 8139 	bcs.w	8006256 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff6:	f000 8088 	beq.w	800610a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006026:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800602a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006032:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800603e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1d9      	bne.n	8005ffa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3314      	adds	r3, #20
 800604c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3314      	adds	r3, #20
 8006066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800606a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800606e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006072:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800607c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e1      	bne.n	8006046 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3314      	adds	r3, #20
 8006088:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3314      	adds	r3, #20
 80060a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e3      	bne.n	8006082 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060da:	f023 0310 	bic.w	r3, r3, #16
 80060de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e3      	bne.n	80060c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	4618      	mov	r0, r3
 8006106:	f7fc fe35 	bl	8002d74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006112:	b29b      	uxth	r3, r3
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	b29b      	uxth	r3, r3
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fb f9a4 	bl	8001468 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006120:	e099      	b.n	8006256 <HAL_UART_IRQHandler+0x50e>
 8006122:	bf00      	nop
 8006124:	080067a7 	.word	0x080067a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006130:	b29b      	uxth	r3, r3
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 808b 	beq.w	800625a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006144:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 8086 	beq.w	800625a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	330c      	adds	r3, #12
 8006154:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006164:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	330c      	adds	r3, #12
 800616e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006172:	647a      	str	r2, [r7, #68]	; 0x44
 8006174:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e3      	bne.n	800614e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3314      	adds	r3, #20
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	623b      	str	r3, [r7, #32]
   return(result);
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3314      	adds	r3, #20
 80061a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061aa:	633a      	str	r2, [r7, #48]	; 0x30
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e3      	bne.n	8006186 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	60fb      	str	r3, [r7, #12]
   return(result);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0310 	bic.w	r3, r3, #16
 80061e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	330c      	adds	r3, #12
 80061ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061f0:	61fa      	str	r2, [r7, #28]
 80061f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	69b9      	ldr	r1, [r7, #24]
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	617b      	str	r3, [r7, #20]
   return(result);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e3      	bne.n	80061cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006204:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fb f92c 	bl	8001468 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006210:	e023      	b.n	800625a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <HAL_UART_IRQHandler+0x4ea>
 800621e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 facf 	bl	80067ce <UART_Transmit_IT>
    return;
 8006230:	e014      	b.n	800625c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00e      	beq.n	800625c <HAL_UART_IRQHandler+0x514>
 800623e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d008      	beq.n	800625c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fb0f 	bl	800686e <UART_EndTransmit_IT>
    return;
 8006250:	e004      	b.n	800625c <HAL_UART_IRQHandler+0x514>
    return;
 8006252:	bf00      	nop
 8006254:	e002      	b.n	800625c <HAL_UART_IRQHandler+0x514>
      return;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <HAL_UART_IRQHandler+0x514>
      return;
 800625a:	bf00      	nop
  }
}
 800625c:	37e8      	adds	r7, #232	; 0xe8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop

08006264 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b090      	sub	sp, #64	; 0x40
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d137      	bne.n	8006340 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80062d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d2:	2200      	movs	r2, #0
 80062d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3314      	adds	r3, #20
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	623b      	str	r3, [r7, #32]
   return(result);
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80062ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3314      	adds	r3, #20
 80062f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062f6:	633a      	str	r2, [r7, #48]	; 0x30
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e5      	bne.n	80062d6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800630a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	60fb      	str	r3, [r7, #12]
   return(result);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
 8006322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800632a:	61fa      	str	r2, [r7, #28]
 800632c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	69b9      	ldr	r1, [r7, #24]
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	617b      	str	r3, [r7, #20]
   return(result);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e5      	bne.n	800630a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800633e:	e002      	b.n	8006346 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006340:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006342:	f7fb f86f 	bl	8001424 <HAL_UART_TxCpltCallback>
}
 8006346:	bf00      	nop
 8006348:	3740      	adds	r7, #64	; 0x40
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff ff81 	bl	8006264 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b09c      	sub	sp, #112	; 0x70
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006382:	2b00      	cmp	r3, #0
 8006384:	d172      	bne.n	800646c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006388:	2200      	movs	r2, #0
 800638a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800638c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800639c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800639e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80063ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e5      	bne.n	800638c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3314      	adds	r3, #20
 80063c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	f023 0301 	bic.w	r3, r3, #1
 80063d6:	667b      	str	r3, [r7, #100]	; 0x64
 80063d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3314      	adds	r3, #20
 80063de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063e0:	647a      	str	r2, [r7, #68]	; 0x44
 80063e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3314      	adds	r3, #20
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	623b      	str	r3, [r7, #32]
   return(result);
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640a:	663b      	str	r3, [r7, #96]	; 0x60
 800640c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3314      	adds	r3, #20
 8006412:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006414:	633a      	str	r2, [r7, #48]	; 0x30
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800641a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e5      	bne.n	80063f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	2b01      	cmp	r3, #1
 8006436:	d119      	bne.n	800646c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	60fb      	str	r3, [r7, #12]
   return(result);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0310 	bic.w	r3, r3, #16
 800644e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	330c      	adds	r3, #12
 8006456:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006458:	61fa      	str	r2, [r7, #28]
 800645a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	69b9      	ldr	r1, [r7, #24]
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	617b      	str	r3, [r7, #20]
   return(result);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e5      	bne.n	8006438 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800646c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	2b01      	cmp	r3, #1
 8006472:	d106      	bne.n	8006482 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006476:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006478:	4619      	mov	r1, r3
 800647a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800647c:	f7fa fff4 	bl	8001468 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006480:	e002      	b.n	8006488 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006482:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006484:	f7ff fef8 	bl	8006278 <HAL_UART_RxCpltCallback>
}
 8006488:	bf00      	nop
 800648a:	3770      	adds	r7, #112	; 0x70
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d108      	bne.n	80064b8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	4619      	mov	r1, r3
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7fa ffd9 	bl	8001468 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064b6:	e002      	b.n	80064be <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f7ff fee7 	bl	800628c <HAL_UART_RxHalfCpltCallback>
}
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b80      	cmp	r3, #128	; 0x80
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b21      	cmp	r3, #33	; 0x21
 80064f8:	d108      	bne.n	800650c <UART_DMAError+0x46>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2200      	movs	r2, #0
 8006504:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006506:	68b8      	ldr	r0, [r7, #8]
 8006508:	f000 f8c2 	bl	8006690 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	bf0c      	ite	eq
 800651a:	2301      	moveq	r3, #1
 800651c:	2300      	movne	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b22      	cmp	r3, #34	; 0x22
 800652c:	d108      	bne.n	8006540 <UART_DMAError+0x7a>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2200      	movs	r2, #0
 8006538:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800653a:	68b8      	ldr	r0, [r7, #8]
 800653c:	f000 f8d0 	bl	80066e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	f043 0210 	orr.w	r2, r3, #16
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800654c:	68b8      	ldr	r0, [r7, #8]
 800654e:	f7ff fea7 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b098      	sub	sp, #96	; 0x60
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	88fa      	ldrh	r2, [r7, #6]
 8006574:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2222      	movs	r2, #34	; 0x22
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	4a3e      	ldr	r2, [pc, #248]	; (8006684 <UART_Start_Receive_DMA+0x128>)
 800658a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	4a3d      	ldr	r2, [pc, #244]	; (8006688 <UART_Start_Receive_DMA+0x12c>)
 8006592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	4a3c      	ldr	r2, [pc, #240]	; (800668c <UART_Start_Receive_DMA+0x130>)
 800659a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	2200      	movs	r2, #0
 80065a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80065a4:	f107 0308 	add.w	r3, r7, #8
 80065a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4619      	mov	r1, r3
 80065b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	88fb      	ldrh	r3, [r7, #6]
 80065bc:	f7fc fb82 	bl	8002cc4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	330c      	adds	r3, #12
 80065e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006600:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800660c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e5      	bne.n	80065de <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	f043 0301 	orr.w	r3, r3, #1
 8006628:	657b      	str	r3, [r7, #84]	; 0x54
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3314      	adds	r3, #20
 8006630:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006632:	63ba      	str	r2, [r7, #56]	; 0x38
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e5      	bne.n	8006612 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3314      	adds	r3, #20
 800664c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	617b      	str	r3, [r7, #20]
   return(result);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800665c:	653b      	str	r3, [r7, #80]	; 0x50
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3314      	adds	r3, #20
 8006664:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006666:	627a      	str	r2, [r7, #36]	; 0x24
 8006668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6a39      	ldr	r1, [r7, #32]
 800666c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	61fb      	str	r3, [r7, #28]
   return(result);
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e5      	bne.n	8006646 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3760      	adds	r7, #96	; 0x60
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	0800636b 	.word	0x0800636b
 8006688:	08006491 	.word	0x08006491
 800668c:	080064c7 	.word	0x080064c7

08006690 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b089      	sub	sp, #36	; 0x24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	330c      	adds	r3, #12
 800669e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066ae:	61fb      	str	r3, [r7, #28]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	330c      	adds	r3, #12
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	61ba      	str	r2, [r7, #24]
 80066ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6979      	ldr	r1, [r7, #20]
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	613b      	str	r3, [r7, #16]
   return(result);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e5      	bne.n	8006698 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80066d4:	bf00      	nop
 80066d6:	3724      	adds	r7, #36	; 0x24
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b095      	sub	sp, #84	; 0x54
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	330c      	adds	r3, #12
 8006706:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006708:	643a      	str	r2, [r7, #64]	; 0x40
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800670e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e5      	bne.n	80066e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3314      	adds	r3, #20
 8006722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	61fb      	str	r3, [r7, #28]
   return(result);
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	64bb      	str	r3, [r7, #72]	; 0x48
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3314      	adds	r3, #20
 800673a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800673c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e5      	bne.n	800671c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006754:	2b01      	cmp	r3, #1
 8006756:	d119      	bne.n	800678c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	60bb      	str	r3, [r7, #8]
   return(result);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f023 0310 	bic.w	r3, r3, #16
 800676e:	647b      	str	r3, [r7, #68]	; 0x44
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006778:	61ba      	str	r2, [r7, #24]
 800677a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	6979      	ldr	r1, [r7, #20]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	613b      	str	r3, [r7, #16]
   return(result);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e5      	bne.n	8006758 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	631a      	str	r2, [r3, #48]	; 0x30
}
 800679a:	bf00      	nop
 800679c:	3754      	adds	r7, #84	; 0x54
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7ff fd6d 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067c6:	bf00      	nop
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b21      	cmp	r3, #33	; 0x21
 80067e0:	d13e      	bne.n	8006860 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ea:	d114      	bne.n	8006816 <UART_Transmit_IT+0x48>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d110      	bne.n	8006816 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006808:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	1c9a      	adds	r2, r3, #2
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	621a      	str	r2, [r3, #32]
 8006814:	e008      	b.n	8006828 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	1c59      	adds	r1, r3, #1
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6211      	str	r1, [r2, #32]
 8006820:	781a      	ldrb	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29b      	uxth	r3, r3
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	4619      	mov	r1, r3
 8006836:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10f      	bne.n	800685c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800684a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800685a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	e000      	b.n	8006862 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006860:	2302      	movs	r3, #2
  }
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006884:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fa fdc8 	bl	8001424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b08c      	sub	sp, #48	; 0x30
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b22      	cmp	r3, #34	; 0x22
 80068b0:	f040 80ab 	bne.w	8006a0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068bc:	d117      	bne.n	80068ee <UART_Receive_IT+0x50>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d113      	bne.n	80068ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068c6:	2300      	movs	r3, #0
 80068c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068dc:	b29a      	uxth	r2, r3
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	1c9a      	adds	r2, r3, #2
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	629a      	str	r2, [r3, #40]	; 0x28
 80068ec:	e026      	b.n	800693c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006900:	d007      	beq.n	8006912 <UART_Receive_IT+0x74>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <UART_Receive_IT+0x82>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	b2da      	uxtb	r2, r3
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	e008      	b.n	8006932 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692c:	b2da      	uxtb	r2, r3
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006940:	b29b      	uxth	r3, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	b29b      	uxth	r3, r3
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	4619      	mov	r1, r3
 800694a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800694c:	2b00      	cmp	r3, #0
 800694e:	d15a      	bne.n	8006a06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0220 	bic.w	r2, r2, #32
 800695e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800696e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0201 	bic.w	r2, r2, #1
 800697e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698c:	2b01      	cmp	r3, #1
 800698e:	d135      	bne.n	80069fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	330c      	adds	r3, #12
 800699c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	613b      	str	r3, [r7, #16]
   return(result);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f023 0310 	bic.w	r3, r3, #16
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	330c      	adds	r3, #12
 80069b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b6:	623a      	str	r2, [r7, #32]
 80069b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	69f9      	ldr	r1, [r7, #28]
 80069bc:	6a3a      	ldr	r2, [r7, #32]
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e5      	bne.n	8006996 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b10      	cmp	r3, #16
 80069d6:	d10a      	bne.n	80069ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7fa fd37 	bl	8001468 <HAL_UARTEx_RxEventCallback>
 80069fa:	e002      	b.n	8006a02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff fc3b 	bl	8006278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e002      	b.n	8006a0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	e000      	b.n	8006a0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a0a:	2302      	movs	r3, #2
  }
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3730      	adds	r7, #48	; 0x30
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	b09f      	sub	sp, #124	; 0x7c
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a2a:	68d9      	ldr	r1, [r3, #12]
 8006a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	ea40 0301 	orr.w	r3, r0, r1
 8006a34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a58:	f021 010c 	bic.w	r1, r1, #12
 8006a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a62:	430b      	orrs	r3, r1
 8006a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a72:	6999      	ldr	r1, [r3, #24]
 8006a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	ea40 0301 	orr.w	r3, r0, r1
 8006a7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4bc5      	ldr	r3, [pc, #788]	; (8006d98 <UART_SetConfig+0x384>)
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d004      	beq.n	8006a92 <UART_SetConfig+0x7e>
 8006a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	4bc3      	ldr	r3, [pc, #780]	; (8006d9c <UART_SetConfig+0x388>)
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d103      	bne.n	8006a9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a92:	f7fd fcdb 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8006a96:	6778      	str	r0, [r7, #116]	; 0x74
 8006a98:	e002      	b.n	8006aa0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a9a:	f7fd fcc3 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8006a9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa8:	f040 80b6 	bne.w	8006c18 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aae:	461c      	mov	r4, r3
 8006ab0:	f04f 0500 	mov.w	r5, #0
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	1891      	adds	r1, r2, r2
 8006aba:	6439      	str	r1, [r7, #64]	; 0x40
 8006abc:	415b      	adcs	r3, r3
 8006abe:	647b      	str	r3, [r7, #68]	; 0x44
 8006ac0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ac4:	1912      	adds	r2, r2, r4
 8006ac6:	eb45 0303 	adc.w	r3, r5, r3
 8006aca:	f04f 0000 	mov.w	r0, #0
 8006ace:	f04f 0100 	mov.w	r1, #0
 8006ad2:	00d9      	lsls	r1, r3, #3
 8006ad4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ad8:	00d0      	lsls	r0, r2, #3
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	1911      	adds	r1, r2, r4
 8006ae0:	6639      	str	r1, [r7, #96]	; 0x60
 8006ae2:	416b      	adcs	r3, r5
 8006ae4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f04f 0300 	mov.w	r3, #0
 8006af0:	1891      	adds	r1, r2, r2
 8006af2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006af4:	415b      	adcs	r3, r3
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006afc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b00:	f7f9 fb74 	bl	80001ec <__aeabi_uldivmod>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4ba5      	ldr	r3, [pc, #660]	; (8006da0 <UART_SetConfig+0x38c>)
 8006b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b0e:	095b      	lsrs	r3, r3, #5
 8006b10:	011e      	lsls	r6, r3, #4
 8006b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b14:	461c      	mov	r4, r3
 8006b16:	f04f 0500 	mov.w	r5, #0
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	462b      	mov	r3, r5
 8006b1e:	1891      	adds	r1, r2, r2
 8006b20:	6339      	str	r1, [r7, #48]	; 0x30
 8006b22:	415b      	adcs	r3, r3
 8006b24:	637b      	str	r3, [r7, #52]	; 0x34
 8006b26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006b2a:	1912      	adds	r2, r2, r4
 8006b2c:	eb45 0303 	adc.w	r3, r5, r3
 8006b30:	f04f 0000 	mov.w	r0, #0
 8006b34:	f04f 0100 	mov.w	r1, #0
 8006b38:	00d9      	lsls	r1, r3, #3
 8006b3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b3e:	00d0      	lsls	r0, r2, #3
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	1911      	adds	r1, r2, r4
 8006b46:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b48:	416b      	adcs	r3, r5
 8006b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	461a      	mov	r2, r3
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	1891      	adds	r1, r2, r2
 8006b58:	62b9      	str	r1, [r7, #40]	; 0x28
 8006b5a:	415b      	adcs	r3, r3
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006b66:	f7f9 fb41 	bl	80001ec <__aeabi_uldivmod>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4b8c      	ldr	r3, [pc, #560]	; (8006da0 <UART_SetConfig+0x38c>)
 8006b70:	fba3 1302 	umull	r1, r3, r3, r2
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	2164      	movs	r1, #100	; 0x64
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	3332      	adds	r3, #50	; 0x32
 8006b82:	4a87      	ldr	r2, [pc, #540]	; (8006da0 <UART_SetConfig+0x38c>)
 8006b84:	fba2 2303 	umull	r2, r3, r2, r3
 8006b88:	095b      	lsrs	r3, r3, #5
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b90:	441e      	add	r6, r3
 8006b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b94:	4618      	mov	r0, r3
 8006b96:	f04f 0100 	mov.w	r1, #0
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	1894      	adds	r4, r2, r2
 8006ba0:	623c      	str	r4, [r7, #32]
 8006ba2:	415b      	adcs	r3, r3
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006baa:	1812      	adds	r2, r2, r0
 8006bac:	eb41 0303 	adc.w	r3, r1, r3
 8006bb0:	f04f 0400 	mov.w	r4, #0
 8006bb4:	f04f 0500 	mov.w	r5, #0
 8006bb8:	00dd      	lsls	r5, r3, #3
 8006bba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bbe:	00d4      	lsls	r4, r2, #3
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	462b      	mov	r3, r5
 8006bc4:	1814      	adds	r4, r2, r0
 8006bc6:	653c      	str	r4, [r7, #80]	; 0x50
 8006bc8:	414b      	adcs	r3, r1
 8006bca:	657b      	str	r3, [r7, #84]	; 0x54
 8006bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	1891      	adds	r1, r2, r2
 8006bd8:	61b9      	str	r1, [r7, #24]
 8006bda:	415b      	adcs	r3, r3
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006be2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006be6:	f7f9 fb01 	bl	80001ec <__aeabi_uldivmod>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4b6c      	ldr	r3, [pc, #432]	; (8006da0 <UART_SetConfig+0x38c>)
 8006bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	2164      	movs	r1, #100	; 0x64
 8006bf8:	fb01 f303 	mul.w	r3, r1, r3
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	3332      	adds	r3, #50	; 0x32
 8006c02:	4a67      	ldr	r2, [pc, #412]	; (8006da0 <UART_SetConfig+0x38c>)
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	f003 0207 	and.w	r2, r3, #7
 8006c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4432      	add	r2, r6
 8006c14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c16:	e0b9      	b.n	8006d8c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c1a:	461c      	mov	r4, r3
 8006c1c:	f04f 0500 	mov.w	r5, #0
 8006c20:	4622      	mov	r2, r4
 8006c22:	462b      	mov	r3, r5
 8006c24:	1891      	adds	r1, r2, r2
 8006c26:	6139      	str	r1, [r7, #16]
 8006c28:	415b      	adcs	r3, r3
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c30:	1912      	adds	r2, r2, r4
 8006c32:	eb45 0303 	adc.w	r3, r5, r3
 8006c36:	f04f 0000 	mov.w	r0, #0
 8006c3a:	f04f 0100 	mov.w	r1, #0
 8006c3e:	00d9      	lsls	r1, r3, #3
 8006c40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c44:	00d0      	lsls	r0, r2, #3
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	eb12 0804 	adds.w	r8, r2, r4
 8006c4e:	eb43 0905 	adc.w	r9, r3, r5
 8006c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f04f 0100 	mov.w	r1, #0
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	008b      	lsls	r3, r1, #2
 8006c66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c6a:	0082      	lsls	r2, r0, #2
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	4649      	mov	r1, r9
 8006c70:	f7f9 fabc 	bl	80001ec <__aeabi_uldivmod>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4b49      	ldr	r3, [pc, #292]	; (8006da0 <UART_SetConfig+0x38c>)
 8006c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c7e:	095b      	lsrs	r3, r3, #5
 8006c80:	011e      	lsls	r6, r3, #4
 8006c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c84:	4618      	mov	r0, r3
 8006c86:	f04f 0100 	mov.w	r1, #0
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	1894      	adds	r4, r2, r2
 8006c90:	60bc      	str	r4, [r7, #8]
 8006c92:	415b      	adcs	r3, r3
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c9a:	1812      	adds	r2, r2, r0
 8006c9c:	eb41 0303 	adc.w	r3, r1, r3
 8006ca0:	f04f 0400 	mov.w	r4, #0
 8006ca4:	f04f 0500 	mov.w	r5, #0
 8006ca8:	00dd      	lsls	r5, r3, #3
 8006caa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006cae:	00d4      	lsls	r4, r2, #3
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	462b      	mov	r3, r5
 8006cb4:	1814      	adds	r4, r2, r0
 8006cb6:	64bc      	str	r4, [r7, #72]	; 0x48
 8006cb8:	414b      	adcs	r3, r1
 8006cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f04f 0100 	mov.w	r1, #0
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	008b      	lsls	r3, r1, #2
 8006cd0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006cd4:	0082      	lsls	r2, r0, #2
 8006cd6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006cda:	f7f9 fa87 	bl	80001ec <__aeabi_uldivmod>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4b2f      	ldr	r3, [pc, #188]	; (8006da0 <UART_SetConfig+0x38c>)
 8006ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	2164      	movs	r1, #100	; 0x64
 8006cec:	fb01 f303 	mul.w	r3, r1, r3
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	3332      	adds	r3, #50	; 0x32
 8006cf6:	4a2a      	ldr	r2, [pc, #168]	; (8006da0 <UART_SetConfig+0x38c>)
 8006cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfc:	095b      	lsrs	r3, r3, #5
 8006cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d02:	441e      	add	r6, r3
 8006d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d06:	4618      	mov	r0, r3
 8006d08:	f04f 0100 	mov.w	r1, #0
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	1894      	adds	r4, r2, r2
 8006d12:	603c      	str	r4, [r7, #0]
 8006d14:	415b      	adcs	r3, r3
 8006d16:	607b      	str	r3, [r7, #4]
 8006d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1c:	1812      	adds	r2, r2, r0
 8006d1e:	eb41 0303 	adc.w	r3, r1, r3
 8006d22:	f04f 0400 	mov.w	r4, #0
 8006d26:	f04f 0500 	mov.w	r5, #0
 8006d2a:	00dd      	lsls	r5, r3, #3
 8006d2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d30:	00d4      	lsls	r4, r2, #3
 8006d32:	4622      	mov	r2, r4
 8006d34:	462b      	mov	r3, r5
 8006d36:	eb12 0a00 	adds.w	sl, r2, r0
 8006d3a:	eb43 0b01 	adc.w	fp, r3, r1
 8006d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f04f 0100 	mov.w	r1, #0
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	008b      	lsls	r3, r1, #2
 8006d52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d56:	0082      	lsls	r2, r0, #2
 8006d58:	4650      	mov	r0, sl
 8006d5a:	4659      	mov	r1, fp
 8006d5c:	f7f9 fa46 	bl	80001ec <__aeabi_uldivmod>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4b0e      	ldr	r3, [pc, #56]	; (8006da0 <UART_SetConfig+0x38c>)
 8006d66:	fba3 1302 	umull	r1, r3, r3, r2
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	2164      	movs	r1, #100	; 0x64
 8006d6e:	fb01 f303 	mul.w	r3, r1, r3
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	3332      	adds	r3, #50	; 0x32
 8006d78:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <UART_SetConfig+0x38c>)
 8006d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	f003 020f 	and.w	r2, r3, #15
 8006d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4432      	add	r2, r6
 8006d8a:	609a      	str	r2, [r3, #8]
}
 8006d8c:	bf00      	nop
 8006d8e:	377c      	adds	r7, #124	; 0x7c
 8006d90:	46bd      	mov	sp, r7
 8006d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d96:	bf00      	nop
 8006d98:	40011000 	.word	0x40011000
 8006d9c:	40011400 	.word	0x40011400
 8006da0:	51eb851f 	.word	0x51eb851f

08006da4 <__errno>:
 8006da4:	4b01      	ldr	r3, [pc, #4]	; (8006dac <__errno+0x8>)
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	2000007c 	.word	0x2000007c

08006db0 <__libc_init_array>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	4d0d      	ldr	r5, [pc, #52]	; (8006de8 <__libc_init_array+0x38>)
 8006db4:	4c0d      	ldr	r4, [pc, #52]	; (8006dec <__libc_init_array+0x3c>)
 8006db6:	1b64      	subs	r4, r4, r5
 8006db8:	10a4      	asrs	r4, r4, #2
 8006dba:	2600      	movs	r6, #0
 8006dbc:	42a6      	cmp	r6, r4
 8006dbe:	d109      	bne.n	8006dd4 <__libc_init_array+0x24>
 8006dc0:	4d0b      	ldr	r5, [pc, #44]	; (8006df0 <__libc_init_array+0x40>)
 8006dc2:	4c0c      	ldr	r4, [pc, #48]	; (8006df4 <__libc_init_array+0x44>)
 8006dc4:	f000 f934 	bl	8007030 <_init>
 8006dc8:	1b64      	subs	r4, r4, r5
 8006dca:	10a4      	asrs	r4, r4, #2
 8006dcc:	2600      	movs	r6, #0
 8006dce:	42a6      	cmp	r6, r4
 8006dd0:	d105      	bne.n	8006dde <__libc_init_array+0x2e>
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}
 8006dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd8:	4798      	blx	r3
 8006dda:	3601      	adds	r6, #1
 8006ddc:	e7ee      	b.n	8006dbc <__libc_init_array+0xc>
 8006dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de2:	4798      	blx	r3
 8006de4:	3601      	adds	r6, #1
 8006de6:	e7f2      	b.n	8006dce <__libc_init_array+0x1e>
 8006de8:	08007070 	.word	0x08007070
 8006dec:	08007070 	.word	0x08007070
 8006df0:	08007070 	.word	0x08007070
 8006df4:	08007074 	.word	0x08007074

08006df8 <malloc>:
 8006df8:	4b02      	ldr	r3, [pc, #8]	; (8006e04 <malloc+0xc>)
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	f000 b85b 	b.w	8006eb8 <_malloc_r>
 8006e02:	bf00      	nop
 8006e04:	2000007c 	.word	0x2000007c

08006e08 <memset>:
 8006e08:	4402      	add	r2, r0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d100      	bne.n	8006e12 <memset+0xa>
 8006e10:	4770      	bx	lr
 8006e12:	f803 1b01 	strb.w	r1, [r3], #1
 8006e16:	e7f9      	b.n	8006e0c <memset+0x4>

08006e18 <_free_r>:
 8006e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e1a:	2900      	cmp	r1, #0
 8006e1c:	d048      	beq.n	8006eb0 <_free_r+0x98>
 8006e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e22:	9001      	str	r0, [sp, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f1a1 0404 	sub.w	r4, r1, #4
 8006e2a:	bfb8      	it	lt
 8006e2c:	18e4      	addlt	r4, r4, r3
 8006e2e:	f000 f8b5 	bl	8006f9c <__malloc_lock>
 8006e32:	4a20      	ldr	r2, [pc, #128]	; (8006eb4 <_free_r+0x9c>)
 8006e34:	9801      	ldr	r0, [sp, #4]
 8006e36:	6813      	ldr	r3, [r2, #0]
 8006e38:	4615      	mov	r5, r2
 8006e3a:	b933      	cbnz	r3, 8006e4a <_free_r+0x32>
 8006e3c:	6063      	str	r3, [r4, #4]
 8006e3e:	6014      	str	r4, [r2, #0]
 8006e40:	b003      	add	sp, #12
 8006e42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e46:	f000 b8af 	b.w	8006fa8 <__malloc_unlock>
 8006e4a:	42a3      	cmp	r3, r4
 8006e4c:	d90b      	bls.n	8006e66 <_free_r+0x4e>
 8006e4e:	6821      	ldr	r1, [r4, #0]
 8006e50:	1862      	adds	r2, r4, r1
 8006e52:	4293      	cmp	r3, r2
 8006e54:	bf04      	itt	eq
 8006e56:	681a      	ldreq	r2, [r3, #0]
 8006e58:	685b      	ldreq	r3, [r3, #4]
 8006e5a:	6063      	str	r3, [r4, #4]
 8006e5c:	bf04      	itt	eq
 8006e5e:	1852      	addeq	r2, r2, r1
 8006e60:	6022      	streq	r2, [r4, #0]
 8006e62:	602c      	str	r4, [r5, #0]
 8006e64:	e7ec      	b.n	8006e40 <_free_r+0x28>
 8006e66:	461a      	mov	r2, r3
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	b10b      	cbz	r3, 8006e70 <_free_r+0x58>
 8006e6c:	42a3      	cmp	r3, r4
 8006e6e:	d9fa      	bls.n	8006e66 <_free_r+0x4e>
 8006e70:	6811      	ldr	r1, [r2, #0]
 8006e72:	1855      	adds	r5, r2, r1
 8006e74:	42a5      	cmp	r5, r4
 8006e76:	d10b      	bne.n	8006e90 <_free_r+0x78>
 8006e78:	6824      	ldr	r4, [r4, #0]
 8006e7a:	4421      	add	r1, r4
 8006e7c:	1854      	adds	r4, r2, r1
 8006e7e:	42a3      	cmp	r3, r4
 8006e80:	6011      	str	r1, [r2, #0]
 8006e82:	d1dd      	bne.n	8006e40 <_free_r+0x28>
 8006e84:	681c      	ldr	r4, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	6053      	str	r3, [r2, #4]
 8006e8a:	4421      	add	r1, r4
 8006e8c:	6011      	str	r1, [r2, #0]
 8006e8e:	e7d7      	b.n	8006e40 <_free_r+0x28>
 8006e90:	d902      	bls.n	8006e98 <_free_r+0x80>
 8006e92:	230c      	movs	r3, #12
 8006e94:	6003      	str	r3, [r0, #0]
 8006e96:	e7d3      	b.n	8006e40 <_free_r+0x28>
 8006e98:	6825      	ldr	r5, [r4, #0]
 8006e9a:	1961      	adds	r1, r4, r5
 8006e9c:	428b      	cmp	r3, r1
 8006e9e:	bf04      	itt	eq
 8006ea0:	6819      	ldreq	r1, [r3, #0]
 8006ea2:	685b      	ldreq	r3, [r3, #4]
 8006ea4:	6063      	str	r3, [r4, #4]
 8006ea6:	bf04      	itt	eq
 8006ea8:	1949      	addeq	r1, r1, r5
 8006eaa:	6021      	streq	r1, [r4, #0]
 8006eac:	6054      	str	r4, [r2, #4]
 8006eae:	e7c7      	b.n	8006e40 <_free_r+0x28>
 8006eb0:	b003      	add	sp, #12
 8006eb2:	bd30      	pop	{r4, r5, pc}
 8006eb4:	2000010c 	.word	0x2000010c

08006eb8 <_malloc_r>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	1ccd      	adds	r5, r1, #3
 8006ebc:	f025 0503 	bic.w	r5, r5, #3
 8006ec0:	3508      	adds	r5, #8
 8006ec2:	2d0c      	cmp	r5, #12
 8006ec4:	bf38      	it	cc
 8006ec6:	250c      	movcc	r5, #12
 8006ec8:	2d00      	cmp	r5, #0
 8006eca:	4606      	mov	r6, r0
 8006ecc:	db01      	blt.n	8006ed2 <_malloc_r+0x1a>
 8006ece:	42a9      	cmp	r1, r5
 8006ed0:	d903      	bls.n	8006eda <_malloc_r+0x22>
 8006ed2:	230c      	movs	r3, #12
 8006ed4:	6033      	str	r3, [r6, #0]
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eda:	f000 f85f 	bl	8006f9c <__malloc_lock>
 8006ede:	4921      	ldr	r1, [pc, #132]	; (8006f64 <_malloc_r+0xac>)
 8006ee0:	680a      	ldr	r2, [r1, #0]
 8006ee2:	4614      	mov	r4, r2
 8006ee4:	b99c      	cbnz	r4, 8006f0e <_malloc_r+0x56>
 8006ee6:	4f20      	ldr	r7, [pc, #128]	; (8006f68 <_malloc_r+0xb0>)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	b923      	cbnz	r3, 8006ef6 <_malloc_r+0x3e>
 8006eec:	4621      	mov	r1, r4
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f000 f844 	bl	8006f7c <_sbrk_r>
 8006ef4:	6038      	str	r0, [r7, #0]
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f000 f83f 	bl	8006f7c <_sbrk_r>
 8006efe:	1c43      	adds	r3, r0, #1
 8006f00:	d123      	bne.n	8006f4a <_malloc_r+0x92>
 8006f02:	230c      	movs	r3, #12
 8006f04:	6033      	str	r3, [r6, #0]
 8006f06:	4630      	mov	r0, r6
 8006f08:	f000 f84e 	bl	8006fa8 <__malloc_unlock>
 8006f0c:	e7e3      	b.n	8006ed6 <_malloc_r+0x1e>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	1b5b      	subs	r3, r3, r5
 8006f12:	d417      	bmi.n	8006f44 <_malloc_r+0x8c>
 8006f14:	2b0b      	cmp	r3, #11
 8006f16:	d903      	bls.n	8006f20 <_malloc_r+0x68>
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	441c      	add	r4, r3
 8006f1c:	6025      	str	r5, [r4, #0]
 8006f1e:	e004      	b.n	8006f2a <_malloc_r+0x72>
 8006f20:	6863      	ldr	r3, [r4, #4]
 8006f22:	42a2      	cmp	r2, r4
 8006f24:	bf0c      	ite	eq
 8006f26:	600b      	streq	r3, [r1, #0]
 8006f28:	6053      	strne	r3, [r2, #4]
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f000 f83c 	bl	8006fa8 <__malloc_unlock>
 8006f30:	f104 000b 	add.w	r0, r4, #11
 8006f34:	1d23      	adds	r3, r4, #4
 8006f36:	f020 0007 	bic.w	r0, r0, #7
 8006f3a:	1ac2      	subs	r2, r0, r3
 8006f3c:	d0cc      	beq.n	8006ed8 <_malloc_r+0x20>
 8006f3e:	1a1b      	subs	r3, r3, r0
 8006f40:	50a3      	str	r3, [r4, r2]
 8006f42:	e7c9      	b.n	8006ed8 <_malloc_r+0x20>
 8006f44:	4622      	mov	r2, r4
 8006f46:	6864      	ldr	r4, [r4, #4]
 8006f48:	e7cc      	b.n	8006ee4 <_malloc_r+0x2c>
 8006f4a:	1cc4      	adds	r4, r0, #3
 8006f4c:	f024 0403 	bic.w	r4, r4, #3
 8006f50:	42a0      	cmp	r0, r4
 8006f52:	d0e3      	beq.n	8006f1c <_malloc_r+0x64>
 8006f54:	1a21      	subs	r1, r4, r0
 8006f56:	4630      	mov	r0, r6
 8006f58:	f000 f810 	bl	8006f7c <_sbrk_r>
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d1dd      	bne.n	8006f1c <_malloc_r+0x64>
 8006f60:	e7cf      	b.n	8006f02 <_malloc_r+0x4a>
 8006f62:	bf00      	nop
 8006f64:	2000010c 	.word	0x2000010c
 8006f68:	20000110 	.word	0x20000110

08006f6c <realloc>:
 8006f6c:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <realloc+0xc>)
 8006f6e:	460a      	mov	r2, r1
 8006f70:	4601      	mov	r1, r0
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	f000 b81e 	b.w	8006fb4 <_realloc_r>
 8006f78:	2000007c 	.word	0x2000007c

08006f7c <_sbrk_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4d06      	ldr	r5, [pc, #24]	; (8006f98 <_sbrk_r+0x1c>)
 8006f80:	2300      	movs	r3, #0
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	602b      	str	r3, [r5, #0]
 8006f88:	f7fa f8da 	bl	8001140 <_sbrk>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_sbrk_r+0x1a>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_sbrk_r+0x1a>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	2000066c 	.word	0x2000066c

08006f9c <__malloc_lock>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <__malloc_lock+0x8>)
 8006f9e:	f000 b82f 	b.w	8007000 <__retarget_lock_acquire_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	20000674 	.word	0x20000674

08006fa8 <__malloc_unlock>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__malloc_unlock+0x8>)
 8006faa:	f000 b82a 	b.w	8007002 <__retarget_lock_release_recursive>
 8006fae:	bf00      	nop
 8006fb0:	20000674 	.word	0x20000674

08006fb4 <_realloc_r>:
 8006fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb6:	4607      	mov	r7, r0
 8006fb8:	4614      	mov	r4, r2
 8006fba:	460e      	mov	r6, r1
 8006fbc:	b921      	cbnz	r1, 8006fc8 <_realloc_r+0x14>
 8006fbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	f7ff bf78 	b.w	8006eb8 <_malloc_r>
 8006fc8:	b922      	cbnz	r2, 8006fd4 <_realloc_r+0x20>
 8006fca:	f7ff ff25 	bl	8006e18 <_free_r>
 8006fce:	4625      	mov	r5, r4
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd4:	f000 f824 	bl	8007020 <_malloc_usable_size_r>
 8006fd8:	42a0      	cmp	r0, r4
 8006fda:	d20f      	bcs.n	8006ffc <_realloc_r+0x48>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4638      	mov	r0, r7
 8006fe0:	f7ff ff6a 	bl	8006eb8 <_malloc_r>
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d0f2      	beq.n	8006fd0 <_realloc_r+0x1c>
 8006fea:	4631      	mov	r1, r6
 8006fec:	4622      	mov	r2, r4
 8006fee:	f000 f809 	bl	8007004 <memcpy>
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f7ff ff0f 	bl	8006e18 <_free_r>
 8006ffa:	e7e9      	b.n	8006fd0 <_realloc_r+0x1c>
 8006ffc:	4635      	mov	r5, r6
 8006ffe:	e7e7      	b.n	8006fd0 <_realloc_r+0x1c>

08007000 <__retarget_lock_acquire_recursive>:
 8007000:	4770      	bx	lr

08007002 <__retarget_lock_release_recursive>:
 8007002:	4770      	bx	lr

08007004 <memcpy>:
 8007004:	440a      	add	r2, r1
 8007006:	4291      	cmp	r1, r2
 8007008:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800700c:	d100      	bne.n	8007010 <memcpy+0xc>
 800700e:	4770      	bx	lr
 8007010:	b510      	push	{r4, lr}
 8007012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800701a:	4291      	cmp	r1, r2
 800701c:	d1f9      	bne.n	8007012 <memcpy+0xe>
 800701e:	bd10      	pop	{r4, pc}

08007020 <_malloc_usable_size_r>:
 8007020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007024:	1f18      	subs	r0, r3, #4
 8007026:	2b00      	cmp	r3, #0
 8007028:	bfbc      	itt	lt
 800702a:	580b      	ldrlt	r3, [r1, r0]
 800702c:	18c0      	addlt	r0, r0, r3
 800702e:	4770      	bx	lr

08007030 <_init>:
 8007030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007032:	bf00      	nop
 8007034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007036:	bc08      	pop	{r3}
 8007038:	469e      	mov	lr, r3
 800703a:	4770      	bx	lr

0800703c <_fini>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	bf00      	nop
 8007040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007042:	bc08      	pop	{r3}
 8007044:	469e      	mov	lr, r3
 8007046:	4770      	bx	lr
