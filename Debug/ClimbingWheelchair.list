
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000951c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080096d0  080096d0  000196d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009778  08009778  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08009778  08009778  00019778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009780  08009780  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009780  08009780  00019780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009784  08009784  00019784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08009788  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000230  080099b4  00020230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  080099b4  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d357  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000410e  00000000  00000000  0003d5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  000416c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  00042c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b99  00000000  00000000  00043f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1bd  00000000  00000000  0006bb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e22b0  00000000  00000000  00086cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168f6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a88  00000000  00000000  00168fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000230 	.word	0x20000230
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080096b4 	.word	0x080096b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000234 	.word	0x20000234
 80001ec:	080096b4 	.word	0x080096b4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f8c3 	bl	80010b8 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 f95e 	bl	80011fc <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f811 	bl	8000f74 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f002 fd9b 	bl	8003a8c <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <PID_tune>:
	pid->lastin = in;
	pid->lasttime = HAL_GetTick();
}

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f80:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f84:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 8000f88:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	d452      	bmi.n	800103c <PID_tune+0xc8>
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa2:	d44b      	bmi.n	800103c <PID_tune+0xc8>
 8000fa4:	edd7 7a00 	vldr	s15, [r7]
 8000fa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	d444      	bmi.n	800103c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fbe:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001048 <PID_tune+0xd4>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8000fd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8000fe2:	edd7 6a00 	vldr	s13, [r7]
 8000fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d11f      	bne.n	800103e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	edd3 7a03 	vldr	s15, [r3, #12]
 8001004:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800104c <PID_tune+0xd8>
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a04 	vldr	s15, [r3, #16]
 8001018:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800104c <PID_tune+0xd8>
 800101c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	edd3 7a05 	vldr	s15, [r3, #20]
 800102c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800104c <PID_tune+0xd8>
 8001030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	edc3 7a05 	vstr	s15, [r3, #20]
 800103a:	e000      	b.n	800103e <PID_tune+0xca>
		return;
 800103c:	bf00      	nop
	}
}
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	447a0000 	.word	0x447a0000
 800104c:	00000000 	.word	0x00000000

08001050 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d025      	beq.n	80010ac <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107a:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	ed93 7a04 	vldr	s14, [r3, #16]
 8001084:	edd7 7a03 	vldr	s15, [r7, #12]
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	edd3 6a05 	vldr	s13, [r3, #20]
 8001098:	ed97 7a03 	vldr	s14, [r7, #12]
 800109c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80010c4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 80010c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80010cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	da4d      	bge.n	8001176 <pid_limits+0xbe>
	pid->omin = min;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d043      	beq.n	8001178 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	ed93 7a00 	vldr	s14, [r3]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80010fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd05      	ble.n	8001114 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	69d2      	ldr	r2, [r2, #28]
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e010      	b.n	8001136 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	d504      	bpl.n	8001136 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	6992      	ldr	r2, [r2, #24]
 8001134:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	ed93 7a08 	vldr	s14, [r3, #32]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	dd04      	ble.n	8001156 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	69da      	ldr	r2, [r3, #28]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	621a      	str	r2, [r3, #32]
 8001154:	e010      	b.n	8001178 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	ed93 7a08 	vldr	s14, [r3, #32]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d505      	bpl.n	8001178 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	621a      	str	r2, [r3, #32]
 8001174:	e000      	b.n	8001178 <pid_limits+0xc0>
	if (min >= max) return;
 8001176:	bf00      	nop
	}
}
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <pid_auto>:

void pid_auto(PID_t pid)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001190:	2b00      	cmp	r3, #0
 8001192:	d12c      	bne.n	80011ee <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80011b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	dd04      	ble.n	80011c8 <pid_auto+0x46>
			pid->iterm = pid->omax;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69da      	ldr	r2, [r3, #28]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	621a      	str	r2, [r3, #32]
 80011c6:	e00e      	b.n	80011e6 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d503      	bpl.n	80011e6 <pid_auto+0x64>
			pid->iterm = pid->omin;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800120e:	2b00      	cmp	r3, #0
 8001210:	d023      	beq.n	800125a <pid_direction+0x5e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	429a      	cmp	r2, r3
 800121c:	d01d      	beq.n	800125a <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edd3 7a03 	vldr	s15, [r3, #12]
 8001224:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001270 <pid_direction+0x74>
 8001228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	edd3 7a04 	vldr	s15, [r3, #16]
 8001238:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001270 <pid_direction+0x74>
 800123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edd3 7a05 	vldr	s15, [r3, #20]
 800124c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001270 <pid_direction+0x74>
 8001250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	78fa      	ldrb	r2, [r7, #3]
 800125e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	00000000 	.word	0x00000000

08001274 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <hubMotor_Init+0x2c>)
 8001280:	f004 f8f8 	bl	8005474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <hubMotor_Init+0x2c>)
 800128c:	f004 f8f2 	bl	8005474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001296:	4802      	ldr	r0, [pc, #8]	; (80012a0 <hubMotor_Init+0x2c>)
 8001298:	f004 f8ec 	bl	8005474 <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	00000000 	.word	0x00000000

080012a8 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80012b2:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff f8fe 	bl	80004b8 <__aeabi_f2d>
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b63      	ldr	r3, [pc, #396]	; (8001450 <send_HubMotor+0x1a8>)
 80012c2:	f7ff f951 	bl	8000568 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	a35e      	add	r3, pc, #376	; (adr r3, 8001448 <send_HubMotor+0x1a0>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff fa72 	bl	80007bc <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fbf2 	bl	8000ac8 <__aeabi_d2iz>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	425b      	negs	r3, r3
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 80012f0:	6838      	ldr	r0, [r7, #0]
 80012f2:	f7ff f8e1 	bl	80004b8 <__aeabi_f2d>
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b55      	ldr	r3, [pc, #340]	; (8001450 <send_HubMotor+0x1a8>)
 80012fc:	f7ff f934 	bl	8000568 <__aeabi_dmul>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	a34f      	add	r3, pc, #316	; (adr r3, 8001448 <send_HubMotor+0x1a0>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff fa55 	bl	80007bc <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fbd5 	bl	8000ac8 <__aeabi_d2iz>
 800131e:	4603      	mov	r3, r0
 8001320:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 8001322:	23aa      	movs	r3, #170	; 0xaa
 8001324:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 8001326:	23a4      	movs	r3, #164	; 0xa4
 8001328:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 800132a:	230e      	movs	r3, #14
 800132c:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 800133a:	23c8      	movs	r3, #200	; 0xc8
 800133c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 800133e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b29b      	uxth	r3, r3
 8001344:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 8001348:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800134a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 800134e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001352:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 8001354:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001358:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 300;
 800135a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800135e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 8001360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	b29b      	uxth	r3, r3
 8001366:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 800136a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800136c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 8001370:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001374:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 8001376:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800137a:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 800137c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001380:	121b      	asrs	r3, r3, #8
 8001382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 8001386:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 800138c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001390:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 8001392:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001396:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 8001398:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800139c:	121b      	asrs	r3, r3, #8
 800139e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 80013a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013a4:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 80013a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ac:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 80013ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013b2:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 80013b4:	7b3b      	ldrb	r3, [r7, #12]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	7b7b      	ldrb	r3, [r7, #13]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4413      	add	r3, r2
 80013be:	b29a      	uxth	r2, r3
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4413      	add	r3, r2
 80013ce:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 80013d0:	7c3b      	ldrb	r3, [r7, #16]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	7c7b      	ldrb	r3, [r7, #17]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4413      	add	r3, r2
 80013de:	b29a      	uxth	r2, r3
 80013e0:	7cbb      	ldrb	r3, [r7, #18]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 80013e8:	7cfb      	ldrb	r3, [r7, #19]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	7d3b      	ldrb	r3, [r7, #20]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4413      	add	r3, r2
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	7d7b      	ldrb	r3, [r7, #21]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001400:	7dbb      	ldrb	r3, [r7, #22]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4413      	add	r3, r2
 8001406:	b29a      	uxth	r2, r3
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4413      	add	r3, r2
 800140e:	b29a      	uxth	r2, r3
 8001410:	7e3b      	ldrb	r3, [r7, #24]
 8001412:	b29b      	uxth	r3, r3
 8001414:	4413      	add	r3, r2
 8001416:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001418:	7e7b      	ldrb	r3, [r7, #25]
 800141a:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 800141c:	4413      	add	r3, r2
 800141e:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001420:	8bfb      	ldrh	r3, [r7, #30]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15, 50);
 8001426:	f107 010c 	add.w	r1, r7, #12
 800142a:	2332      	movs	r3, #50	; 0x32
 800142c:	220f      	movs	r2, #15
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <send_HubMotor+0x1ac>)
 8001430:	f006 ffdd 	bl	80083ee <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 8001434:	220f      	movs	r2, #15
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <send_HubMotor+0x1b0>)
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <send_HubMotor+0x1ac>)
 800143a:	f007 f871 	bl	8008520 <HAL_UART_Receive_DMA>
}
 800143e:	bf00      	nop
 8001440:	3730      	adds	r7, #48	; 0x30
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	54442d18 	.word	0x54442d18
 800144c:	401921fb 	.word	0x401921fb
 8001450:	40b00000 	.word	0x40b00000
 8001454:	200006d0 	.word	0x200006d0
 8001458:	20000554 	.word	0x20000554

0800145c <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 8001460:	2201      	movs	r2, #1
 8001462:	2110      	movs	r1, #16
 8001464:	481c      	ldr	r0, [pc, #112]	; (80014d8 <ADC_Init+0x7c>)
 8001466:	f004 f805 	bl	8005474 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 800146a:	2200      	movs	r2, #0
 800146c:	2120      	movs	r1, #32
 800146e:	481b      	ldr	r0, [pc, #108]	; (80014dc <ADC_Init+0x80>)
 8001470:	f004 f800 	bl	8005474 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 8001474:	2200      	movs	r2, #0
 8001476:	2110      	movs	r1, #16
 8001478:	4818      	ldr	r0, [pc, #96]	; (80014dc <ADC_Init+0x80>)
 800147a:	f003 fffb 	bl	8005474 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f002 fb10 	bl	8003aa4 <HAL_Delay>
	AD7606_RST_HIGH;
 8001484:	2201      	movs	r2, #1
 8001486:	2110      	movs	r1, #16
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <ADC_Init+0x80>)
 800148a:	f003 fff3 	bl	8005474 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800148e:	2001      	movs	r0, #1
 8001490:	f002 fb08 	bl	8003aa4 <HAL_Delay>
	AD7606_RST_LOW;
 8001494:	2200      	movs	r2, #0
 8001496:	2110      	movs	r1, #16
 8001498:	4810      	ldr	r0, [pc, #64]	; (80014dc <ADC_Init+0x80>)
 800149a:	f003 ffeb 	bl	8005474 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 800149e:	2200      	movs	r2, #0
 80014a0:	2101      	movs	r1, #1
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <ADC_Init+0x80>)
 80014a4:	f003 ffe6 	bl	8005474 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f002 fafb 	bl	8003aa4 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2102      	movs	r1, #2
 80014b2:	480a      	ldr	r0, [pc, #40]	; (80014dc <ADC_Init+0x80>)
 80014b4:	f003 ffde 	bl	8005474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2104      	movs	r1, #4
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <ADC_Init+0x80>)
 80014be:	f003 ffd9 	bl	8005474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	2108      	movs	r1, #8
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <ADC_Init+0x80>)
 80014c8:	f003 ffd4 	bl	8005474 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f002 fae9 	bl	8003aa4 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020800 	.word	0x40020800

080014e0 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 80014e4:	2200      	movs	r2, #0
 80014e6:	2120      	movs	r1, #32
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <ADC_DataRequest+0x1c>)
 80014ea:	f003 ffc3 	bl	8005474 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 80014ee:	2201      	movs	r2, #1
 80014f0:	2120      	movs	r1, #32
 80014f2:	4802      	ldr	r0, [pc, #8]	; (80014fc <ADC_DataRequest+0x1c>)
 80014f4:	f003 ffbe 	bl	8005474 <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40020800 	.word	0x40020800

08001500 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001508:	2200      	movs	r2, #0
 800150a:	2110      	movs	r1, #16
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <ADC_Read+0x30>)
 800150e:	f003 ffb1 	bl	8005474 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8001512:	2302      	movs	r3, #2
 8001514:	2208      	movs	r2, #8
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <ADC_Read+0x34>)
 800151a:	f005 fd35 	bl	8006f88 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 800151e:	2201      	movs	r2, #1
 8001520:	2110      	movs	r1, #16
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <ADC_Read+0x30>)
 8001524:	f003 ffa6 	bl	8005474 <HAL_GPIO_WritePin>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40020000 	.word	0x40020000
 8001534:	200002bc 	.word	0x200002bc

08001538 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001540:	2100      	movs	r1, #0
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f808 	bl	8001558 <enableMotor>
	brakeMotor(motor, 0);
 8001548:	2100      	movs	r1, #0
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f828 	bl	80015a0 <brakeMotor>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	4619      	mov	r1, r3
 8001570:	f003 ff80 	bl	8005474 <HAL_GPIO_WritePin>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	461a      	mov	r2, r3
 800158a:	2108      	movs	r1, #8
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <emBrakeMotor+0x20>)
 800158e:	f003 ff71 	bl	8005474 <HAL_GPIO_WritePin>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40020c00 	.word	0x40020c00

080015a0 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69d8      	ldr	r0, [r3, #28]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	8c1b      	ldrh	r3, [r3, #32]
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	4619      	mov	r1, r3
 80015b8:	f003 ff5c 	bl	8005474 <HAL_GPIO_WritePin>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	4619      	mov	r1, r3
 80015dc:	f003 ff4a 	bl	8005474 <HAL_GPIO_WritePin>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 80015fa:	edd7 7a00 	vldr	s15, [r7]
 80015fe:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001730 <setMotorSpeed+0x148>
 8001602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	dd01      	ble.n	8001610 <setMotorSpeed+0x28>
 800160c:	4b49      	ldr	r3, [pc, #292]	; (8001734 <setMotorSpeed+0x14c>)
 800160e:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001610:	6838      	ldr	r0, [r7, #0]
 8001612:	f7fe ff51 	bl	80004b8 <__aeabi_f2d>
 8001616:	a340      	add	r3, pc, #256	; (adr r3, 8001718 <setMotorSpeed+0x130>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe fdec 	bl	80001f8 <__aeabi_dsub>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	a33d      	add	r3, pc, #244	; (adr r3, 8001720 <setMotorSpeed+0x138>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7ff f8c5 	bl	80007bc <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fa6d 	bl	8000b18 <__aeabi_d2uiz>
 800163e:	4603      	mov	r3, r0
 8001640:	b29b      	uxth	r3, r3
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164a:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7fe ff32 	bl	80004b8 <__aeabi_f2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	a133      	add	r1, pc, #204	; (adr r1, 8001728 <setMotorSpeed+0x140>)
 800165a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800165e:	f7ff f8ad 	bl	80007bc <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa2d 	bl	8000ac8 <__aeabi_d2iz>
 800166e:	4603      	mov	r3, r0
 8001670:	b29b      	uxth	r3, r3
 8001672:	3301      	adds	r3, #1
 8001674:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	085b      	lsrs	r3, r3, #1
 800167a:	b29b      	uxth	r3, r3
 800167c:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 800167e:	edd7 7a00 	vldr	s15, [r7]
 8001682:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800168a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168e:	d503      	bpl.n	8001698 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001690:	2101      	movs	r1, #1
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff84 	bl	80015a0 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	8a7a      	ldrh	r2, [r7, #18]
 80016a0:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	8b1b      	ldrh	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d105      	bne.n	80016b6 <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34
 80016b4:	e01c      	b.n	80016f0 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	8b1b      	ldrh	r3, [r3, #24]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d105      	bne.n	80016ca <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	639a      	str	r2, [r3, #56]	; 0x38
 80016c8:	e012      	b.n	80016f0 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	8b1b      	ldrh	r3, [r3, #24]
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d105      	bne.n	80016de <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	63da      	str	r2, [r3, #60]	; 0x3c
 80016dc:	e008      	b.n	80016f0 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	8b1b      	ldrh	r3, [r3, #24]
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d104      	bne.n	80016f0 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695a      	ldr	r2, [r3, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	8b1b      	ldrh	r3, [r3, #24]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f006 f884 	bl	8007808 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	f3af 8000 	nop.w
 8001718:	bfb15b57 	.word	0xbfb15b57
 800171c:	3fd09eec 	.word	0x3fd09eec
 8001720:	1172ef0b 	.word	0x1172ef0b
 8001724:	3f9989df 	.word	0x3f9989df
 8001728:	00000000 	.word	0x00000000
 800172c:	412e8480 	.word	0x412e8480
 8001730:	42c80000 	.word	0x42c80000
 8001734:	42c80000 	.word	0x42c80000

08001738 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800174a:	2b01      	cmp	r3, #1
 800174c:	d129      	bne.n	80017a2 <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 800174e:	edd7 7a00 	vldr	s15, [r7]
 8001752:	eef0 7ae7 	vabs.f32	s15, s15
 8001756:	ee17 0a90 	vmov	r0, s15
 800175a:	f7fe fead 	bl	80004b8 <__aeabi_f2d>
 800175e:	4604      	mov	r4, r0
 8001760:	460d      	mov	r5, r1
 8001762:	6838      	ldr	r0, [r7, #0]
 8001764:	f7fe fea8 	bl	80004b8 <__aeabi_f2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4620      	mov	r0, r4
 800176e:	4629      	mov	r1, r5
 8001770:	f7ff f824 	bl	80007bc <__aeabi_ddiv>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	f7ff f976 	bl	8000a74 <__aeabi_dcmpge>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <runMotor+0x60>
	      setMotorDir(motor, 0);
 800178e:	2100      	movs	r1, #0
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff17 	bl	80015c4 <setMotorDir>
 8001796:	e032      	b.n	80017fe <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001798:	2101      	movs	r1, #1
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ff12 	bl	80015c4 <setMotorDir>
 80017a0:	e02d      	b.n	80017fe <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d128      	bne.n	80017fe <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 80017ac:	edd7 7a00 	vldr	s15, [r7]
 80017b0:	eef0 7ae7 	vabs.f32	s15, s15
 80017b4:	ee17 0a90 	vmov	r0, s15
 80017b8:	f7fe fe7e 	bl	80004b8 <__aeabi_f2d>
 80017bc:	4604      	mov	r4, r0
 80017be:	460d      	mov	r5, r1
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f7fe fe79 	bl	80004b8 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4620      	mov	r0, r4
 80017cc:	4629      	mov	r1, r5
 80017ce:	f7fe fff5 	bl	80007bc <__aeabi_ddiv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	f7ff f947 	bl	8000a74 <__aeabi_dcmpge>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <runMotor+0xbe>
	  setMotorDir(motor, 1);
 80017ec:	2101      	movs	r1, #1
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fee8 	bl	80015c4 <setMotorDir>
 80017f4:	e003      	b.n	80017fe <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 80017f6:	2100      	movs	r1, #0
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fee3 	bl	80015c4 <setMotorDir>
    }

    HAL_Delay(50);
 80017fe:	2032      	movs	r0, #50	; 0x32
 8001800:	f002 f950 	bl	8003aa4 <HAL_Delay>
    brakeMotor(motor, 0);
 8001804:	2100      	movs	r1, #0
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff feca 	bl	80015a0 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 800180c:	edd7 7a00 	vldr	s15, [r7]
 8001810:	eef0 7ae7 	vabs.f32	s15, s15
 8001814:	eeb0 0a67 	vmov.f32	s0, s15
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fee5 	bl	80015e8 <setMotorSpeed>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bdb0      	pop	{r4, r5, r7, pc}

08001826 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	889b      	ldrh	r3, [r3, #4]
 8001838:	4619      	mov	r1, r3
 800183a:	4610      	mov	r0, r2
 800183c:	f003 fe02 	bl	8005444 <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	799a      	ldrb	r2, [r3, #6]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	79db      	ldrb	r3, [r3, #7]
 8001850:	429a      	cmp	r2, r3
 8001852:	d004      	beq.n	800185e <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 8001854:	f002 f91a 	bl	8003a8c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 800185e:	f002 f915 	bl	8003a8c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d209      	bcs.n	8001884 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	799a      	ldrb	r2, [r3, #6]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7a1b      	ldrb	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8001880:	2301      	movs	r3, #1
 8001882:	e004      	b.n	800188e <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	799a      	ldrb	r2, [r3, #6]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018a0:	4a30      	ldr	r2, [pc, #192]	; (8001964 <MX_CAN1_Init+0xcc>)
 80018a2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80018a4:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018a6:	2209      	movs	r2, #9
 80018a8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018bc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80018be:	4b28      	ldr	r3, [pc, #160]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018c4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018ea:	481d      	ldr	r0, [pc, #116]	; (8001960 <MX_CAN1_Init+0xc8>)
 80018ec:	f002 f8fe 	bl	8003aec <HAL_CAN_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80018f6:	f000 ff6f 	bl	80027d8 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfil_1;
  	canfil_1.FilterBank = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001902:	2301      	movs	r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
  	canfil_1.FilterIdHigh = 0x0000;
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
  	canfil_1.FilterIdLow = 0x0000;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
  	canfil_1.FilterMaskIdHigh = 0x0000;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
  	canfil_1.FilterMaskIdLow = 0x0000;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 800191a:	2301      	movs	r3, #1
 800191c:	623b      	str	r3, [r7, #32]
  	canfil_1.SlaveStartFilterBank = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001922:	463b      	mov	r3, r7
 8001924:	4619      	mov	r1, r3
 8001926:	480e      	ldr	r0, [pc, #56]	; (8001960 <MX_CAN1_Init+0xc8>)
 8001928:	f002 f9dc 	bl	8003ce4 <HAL_CAN_ConfigFilter>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_CAN1_Init+0x9e>
  		Error_Handler();
 8001932:	f000 ff51 	bl	80027d8 <Error_Handler>

  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001936:	2102      	movs	r1, #2
 8001938:	4809      	ldr	r0, [pc, #36]	; (8001960 <MX_CAN1_Init+0xc8>)
 800193a:	f002 fce4 	bl	8004306 <HAL_CAN_ActivateNotification>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <MX_CAN1_Init+0xb2>
  		return Error_Handler();
 8001944:	f000 ff48 	bl	80027d8 <Error_Handler>
 8001948:	e007      	b.n	800195a <MX_CAN1_Init+0xc2>

  	if (HAL_CAN_Start(&hcan1))
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_CAN1_Init+0xc8>)
 800194c:	f002 faaa 	bl	8003ea4 <HAL_CAN_Start>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_CAN1_Init+0xc2>
  		return Error_Handler();
 8001956:	f000 ff3f 	bl	80027d8 <Error_Handler>


    /* USER CODE END CAN1_Init 2 */

}
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000314 	.word	0x20000314
 8001964:	40006400 	.word	0x40006400

08001968 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <HAL_CAN_MspInit+0x94>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d133      	bne.n	80019f2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_CAN_MspInit+0x98>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <HAL_CAN_MspInit+0x98>)
 8001994:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_CAN_MspInit+0x98>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_CAN_MspInit+0x98>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <HAL_CAN_MspInit+0x98>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_CAN_MspInit+0x98>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019c2:	2303      	movs	r3, #3
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019d2:	2309      	movs	r3, #9
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4809      	ldr	r0, [pc, #36]	; (8001a04 <HAL_CAN_MspInit+0x9c>)
 80019de:	f003 fb85 	bl	80050ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2014      	movs	r0, #20
 80019e8:	f002 ffbd 	bl	8004966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019ec:	2014      	movs	r0, #20
 80019ee:	f002 ffd6 	bl	800499e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	; 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40006400 	.word	0x40006400
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020c00 	.word	0x40020c00

08001a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_DMA_Init+0x3c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <MX_DMA_Init+0x3c>)
 8001a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_DMA_Init+0x3c>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	200c      	movs	r0, #12
 8001a30:	f002 ff99 	bl	8004966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a34:	200c      	movs	r0, #12
 8001a36:	f002 ffb2 	bl	800499e <HAL_NVIC_EnableIRQ>

}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800

08001a48 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <ENCODER_Init+0x24>)
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <ENCODER_Init+0x28>)
 8001a50:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <ENCODER_Init+0x2c>)
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <ENCODER_Init+0x28>)
 8001a56:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4804      	ldr	r0, [pc, #16]	; (8001a6c <ENCODER_Init+0x24>)
 8001a5c:	f000 f83f 	bl	8001ade <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001a60:	2102      	movs	r1, #2
 8001a62:	4804      	ldr	r0, [pc, #16]	; (8001a74 <ENCODER_Init+0x2c>)
 8001a64:	f000 f83b 	bl	8001ade <ENCODER_Set_TxHeader>

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200003bc 	.word	0x200003bc
 8001a70:	20000314 	.word	0x20000314
 8001a74:	20000364 	.word	0x20000364

08001a78 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	785a      	ldrb	r2, [r3, #1]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	789a      	ldrb	r2, [r3, #2]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	78da      	ldrb	r2, [r3, #3]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	791a      	ldrb	r2, [r3, #4]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	795a      	ldrb	r2, [r3, #5]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	799a      	ldrb	r2, [r3, #6]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	79da      	ldrb	r2, [r3, #7]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2204      	movs	r2, #4
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->sendData[2] = 0x01;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->sendData[3] = 0x00;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f103 0120 	add.w	r1, r3, #32
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3338      	adds	r3, #56	; 0x38
 8001b5e:	f002 f9e5 	bl	8003f2c <HAL_CAN_AddTxMessage>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffd1 	bl	8001b1a <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	441a      	add	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	4413      	add	r3, r2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	4b8a      	ldr	r3, [pc, #552]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a89      	ldr	r2, [pc, #548]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001bf4:	f043 0310 	orr.w	r3, r3, #16
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b87      	ldr	r3, [pc, #540]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	4b83      	ldr	r3, [pc, #524]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a82      	ldr	r2, [pc, #520]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b80      	ldr	r3, [pc, #512]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b7c      	ldr	r3, [pc, #496]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a7b      	ldr	r2, [pc, #492]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b79      	ldr	r3, [pc, #484]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b75      	ldr	r3, [pc, #468]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a74      	ldr	r2, [pc, #464]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b72      	ldr	r3, [pc, #456]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b6e      	ldr	r3, [pc, #440]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a6d      	ldr	r2, [pc, #436]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b6b      	ldr	r3, [pc, #428]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a66      	ldr	r2, [pc, #408]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c80:	f043 0308 	orr.w	r3, r3, #8
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b64      	ldr	r3, [pc, #400]	; (8001e18 <MX_GPIO_Init+0x244>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001c92:	2200      	movs	r2, #0
 8001c94:	213f      	movs	r1, #63	; 0x3f
 8001c96:	4861      	ldr	r0, [pc, #388]	; (8001e1c <MX_GPIO_Init+0x248>)
 8001c98:	f003 fbec 	bl	8005474 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	485f      	ldr	r0, [pc, #380]	; (8001e20 <MX_GPIO_Init+0x24c>)
 8001ca2:	f003 fbe7 	bl	8005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	219b      	movs	r1, #155	; 0x9b
 8001caa:	485e      	ldr	r0, [pc, #376]	; (8001e24 <MX_GPIO_Init+0x250>)
 8001cac:	f003 fbe2 	bl	8005474 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001cb6:	485c      	ldr	r0, [pc, #368]	; (8001e28 <MX_GPIO_Init+0x254>)
 8001cb8:	f003 fbdc 	bl	8005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001cc2:	485a      	ldr	r0, [pc, #360]	; (8001e2c <MX_GPIO_Init+0x258>)
 8001cc4:	f003 fbd6 	bl	8005474 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4853      	ldr	r0, [pc, #332]	; (8001e28 <MX_GPIO_Init+0x254>)
 8001cdc:	f003 fa06 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001ce0:	f248 1378 	movw	r3, #33144	; 0x8178
 8001ce4:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	484c      	ldr	r0, [pc, #304]	; (8001e28 <MX_GPIO_Init+0x254>)
 8001cf6:	f003 f9f9 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001cfa:	233f      	movs	r3, #63	; 0x3f
 8001cfc:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4842      	ldr	r0, [pc, #264]	; (8001e1c <MX_GPIO_Init+0x248>)
 8001d12:	f003 f9eb 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001d16:	2310      	movs	r3, #16
 8001d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	483c      	ldr	r0, [pc, #240]	; (8001e20 <MX_GPIO_Init+0x24c>)
 8001d2e:	f003 f9dd 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d36:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <MX_GPIO_Init+0x25c>)
 8001d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	4619      	mov	r1, r3
 8001d44:	4836      	ldr	r0, [pc, #216]	; (8001e20 <MX_GPIO_Init+0x24c>)
 8001d46:	f003 f9d1 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001d4a:	239b      	movs	r3, #155	; 0x9b
 8001d4c:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4830      	ldr	r0, [pc, #192]	; (8001e24 <MX_GPIO_Init+0x250>)
 8001d62:	f003 f9c3 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001d66:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	482a      	ldr	r0, [pc, #168]	; (8001e28 <MX_GPIO_Init+0x254>)
 8001d80:	f003 f9b4 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001d84:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d96:	2305      	movs	r3, #5
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4820      	ldr	r0, [pc, #128]	; (8001e24 <MX_GPIO_Init+0x250>)
 8001da2:	f003 f9a3 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001da6:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001daa:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	481b      	ldr	r0, [pc, #108]	; (8001e2c <MX_GPIO_Init+0x258>)
 8001dc0:	f003 f994 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4814      	ldr	r0, [pc, #80]	; (8001e2c <MX_GPIO_Init+0x258>)
 8001dda:	f003 f987 	bl	80050ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dde:	2320      	movs	r3, #32
 8001de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001dee:	2309      	movs	r3, #9
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	480a      	ldr	r0, [pc, #40]	; (8001e24 <MX_GPIO_Init+0x250>)
 8001dfa:	f003 f977 	bl	80050ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	2017      	movs	r0, #23
 8001e04:	f002 fdaf 	bl	8004966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e08:	2017      	movs	r0, #23
 8001e0a:	f002 fdc8 	bl	800499e <HAL_NVIC_EnableIRQ>

}
 8001e0e:	bf00      	nop
 8001e10:	3730      	adds	r7, #48	; 0x30
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40020c00 	.word	0x40020c00
 8001e30:	10210000 	.word	0x10210000

08001e34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <MX_I2C1_Init+0x78>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e40:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <MX_I2C1_Init+0x7c>)
 8001e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e72:	f003 fb31 	bl	80054d8 <HAL_I2C_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e7c:	f000 fcac 	bl	80027d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e80:	2100      	movs	r1, #0
 8001e82:	4809      	ldr	r0, [pc, #36]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e84:	f004 fae7 	bl	8006456 <HAL_I2CEx_ConfigAnalogFilter>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001e8e:	f000 fca3 	bl	80027d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e92:	2100      	movs	r1, #0
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e96:	f004 fb1a 	bl	80064ce <HAL_I2CEx_ConfigDigitalFilter>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001ea0:	f000 fc9a 	bl	80027d8 <Error_Handler>
  }

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000414 	.word	0x20000414
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	00061a80 	.word	0x00061a80

08001eb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_I2C_MspInit+0x84>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12c      	bne.n	8001f30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef8:	2312      	movs	r3, #18
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f04:	2304      	movs	r3, #4
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480c      	ldr	r0, [pc, #48]	; (8001f40 <HAL_I2C_MspInit+0x8c>)
 8001f10:	f003 f8ec 	bl	80050ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	; 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020400 	.word	0x40020400

08001f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f4a:	f001 fd39 	bl	80039c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f4e:	f000 f9df 	bl	8002310 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001f52:	f004 ff81 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4ab1      	ldr	r2, [pc, #708]	; (8002220 <main+0x2dc>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	099b      	lsrs	r3, r3, #6
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 fd2a 	bl	80049ba <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f66:	2004      	movs	r0, #4
 8001f68:	f002 fd34 	bl	80049d4 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f74:	f002 fcf7 	bl	8004966 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f78:	f7ff fe2c 	bl	8001bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f7c:	f7ff fd44 	bl	8001a08 <MX_DMA_Init>
  MX_I2C1_Init();
 8001f80:	f7ff ff58 	bl	8001e34 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001f84:	f001 f8d2 	bl	800312c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f88:	f001 f970 	bl	800326c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001f8c:	f001 fc14 	bl	80037b8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001f90:	f001 f9e0 	bl	8003354 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001f94:	f001 fa60 	bl	8003458 <MX_TIM8_Init>
  MX_CAN1_Init();
 8001f98:	f7ff fc7e 	bl	8001898 <MX_CAN1_Init>
  MX_SPI1_Init();
 8001f9c:	f000 ffbe 	bl	8002f1c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 8001fa0:	f001 fcae 	bl	8003900 <joystick_Init>
	ADC_Init();
 8001fa4:	f7ff fa5a 	bl	800145c <ADC_Init>
	ADC_DataRequest();
 8001fa8:	f7ff fa9a 	bl	80014e0 <ADC_DataRequest>
	ENCODER_Init();
 8001fac:	f7ff fd4c 	bl	8001a48 <ENCODER_Init>
//	  DWT_Init();

	uint32_t state_count = HAL_GetTick();
 8001fb0:	f001 fd6c 	bl	8003a8c <HAL_GetTick>
 8001fb4:	6078      	str	r0, [r7, #4]
	while (MPU6050_Init(&hi2c1) == 1)
 8001fb6:	e00a      	b.n	8001fce <main+0x8a>
	{
		if (HAL_GetTick() - state_count > 5000)
 8001fb8:	f001 fd68 	bl	8003a8c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <main+0x8a>
			Error_Handler();
 8001fca:	f000 fc05 	bl	80027d8 <Error_Handler>
	while (MPU6050_Init(&hi2c1) == 1)
 8001fce:	4895      	ldr	r0, [pc, #596]	; (8002224 <main+0x2e0>)
 8001fd0:	f000 fc09 	bl	80027e6 <MPU6050_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d0ee      	beq.n	8001fb8 <main+0x74>
	}

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 8001fda:	4b93      	ldr	r3, [pc, #588]	; (8002228 <main+0x2e4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a93      	ldr	r2, [pc, #588]	; (800222c <main+0x2e8>)
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	4b8f      	ldr	r3, [pc, #572]	; (8002228 <main+0x2e4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a90      	ldr	r2, [pc, #576]	; (8002230 <main+0x2ec>)
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	ed93 7a00 	vldr	s14, [r3]
 8001ff6:	eef0 0a47 	vmov.f32	s1, s14
 8001ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffe:	488d      	ldr	r0, [pc, #564]	; (8002234 <main+0x2f0>)
 8002000:	f001 fc8a 	bl	8003918 <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8002004:	488c      	ldr	r0, [pc, #560]	; (8002238 <main+0x2f4>)
 8002006:	f005 fba6 	bl	8007756 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 800200a:	2100      	movs	r1, #0
 800200c:	488a      	ldr	r0, [pc, #552]	; (8002238 <main+0x2f4>)
 800200e:	f005 fbfb 	bl	8007808 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8002012:	2104      	movs	r1, #4
 8002014:	4888      	ldr	r0, [pc, #544]	; (8002238 <main+0x2f4>)
 8002016:	f005 fbf7 	bl	8007808 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 800201a:	4b87      	ldr	r3, [pc, #540]	; (8002238 <main+0x2f4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8002024:	4b84      	ldr	r3, [pc, #528]	; (8002238 <main+0x2f4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800202c:	639a      	str	r2, [r3, #56]	; 0x38

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 800202e:	4883      	ldr	r0, [pc, #524]	; (800223c <main+0x2f8>)
 8002030:	f7ff fa82 	bl	8001538 <bd25l_Init>
	bd25l_Init(&backMotor);
 8002034:	4882      	ldr	r0, [pc, #520]	; (8002240 <main+0x2fc>)
 8002036:	f7ff fa7f 	bl	8001538 <bd25l_Init>
	runMotor(&rearMotor, 0);
 800203a:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8002244 <main+0x300>
 800203e:	487f      	ldr	r0, [pc, #508]	; (800223c <main+0x2f8>)
 8002040:	f7ff fb7a 	bl	8001738 <runMotor>
	runMotor(&backMotor, 0);
 8002044:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8002244 <main+0x300>
 8002048:	487d      	ldr	r0, [pc, #500]	; (8002240 <main+0x2fc>)
 800204a:	f7ff fb75 	bl	8001738 <runMotor>
	emBrakeMotor(0);
 800204e:	2000      	movs	r0, #0
 8002050:	f7ff fa94 	bl	800157c <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 8002054:	f7ff f90e 	bl	8001274 <hubMotor_Init>
	send_HubMotor(0, 0);
 8002058:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8002244 <main+0x300>
 800205c:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8002244 <main+0x300>
 8002060:	f7ff f922 	bl	80012a8 <send_HubMotor>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 8002064:	4b78      	ldr	r3, [pc, #480]	; (8002248 <main+0x304>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	4b78      	ldr	r3, [pc, #480]	; (800224c <main+0x308>)
 800206c:	ed93 7a00 	vldr	s14, [r3]
 8002070:	4b77      	ldr	r3, [pc, #476]	; (8002250 <main+0x30c>)
 8002072:	edd3 6a00 	vldr	s13, [r3]
 8002076:	eeb0 1a66 	vmov.f32	s2, s13
 800207a:	eef0 0a47 	vmov.f32	s1, s14
 800207e:	eeb0 0a67 	vmov.f32	s0, s15
 8002082:	4b74      	ldr	r3, [pc, #464]	; (8002254 <main+0x310>)
 8002084:	4a74      	ldr	r2, [pc, #464]	; (8002258 <main+0x314>)
 8002086:	4975      	ldr	r1, [pc, #468]	; (800225c <main+0x318>)
 8002088:	4875      	ldr	r0, [pc, #468]	; (8002260 <main+0x31c>)
 800208a:	f7fe ff31 	bl	8000ef0 <pid_create>
 800208e:	4603      	mov	r3, r0
 8002090:	4a74      	ldr	r2, [pc, #464]	; (8002264 <main+0x320>)
 8002092:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -50, 50);
 8002094:	4b73      	ldr	r3, [pc, #460]	; (8002264 <main+0x320>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	eddf 0a73 	vldr	s1, [pc, #460]	; 8002268 <main+0x324>
 800209c:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800226c <main+0x328>
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff f809 	bl	80010b8 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 80020a6:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <main+0x320>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2101      	movs	r1, #1
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe ffcf 	bl	8001050 <pid_sample>
	pid_auto(frontClimb_pid);
 80020b2:	4b6c      	ldr	r3, [pc, #432]	; (8002264 <main+0x320>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f863 	bl	8001182 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 80020bc:	4b6c      	ldr	r3, [pc, #432]	; (8002270 <main+0x32c>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	4b6c      	ldr	r3, [pc, #432]	; (8002274 <main+0x330>)
 80020c4:	ed93 7a00 	vldr	s14, [r3]
 80020c8:	4b6b      	ldr	r3, [pc, #428]	; (8002278 <main+0x334>)
 80020ca:	edd3 6a00 	vldr	s13, [r3]
 80020ce:	eeb0 1a66 	vmov.f32	s2, s13
 80020d2:	eef0 0a47 	vmov.f32	s1, s14
 80020d6:	eeb0 0a67 	vmov.f32	s0, s15
 80020da:	4b68      	ldr	r3, [pc, #416]	; (800227c <main+0x338>)
 80020dc:	4a68      	ldr	r2, [pc, #416]	; (8002280 <main+0x33c>)
 80020de:	4969      	ldr	r1, [pc, #420]	; (8002284 <main+0x340>)
 80020e0:	4869      	ldr	r0, [pc, #420]	; (8002288 <main+0x344>)
 80020e2:	f7fe ff05 	bl	8000ef0 <pid_create>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4a68      	ldr	r2, [pc, #416]	; (800228c <main+0x348>)
 80020ea:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -50, 50);
 80020ec:	4b67      	ldr	r3, [pc, #412]	; (800228c <main+0x348>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8002268 <main+0x324>
 80020f4:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800226c <main+0x328>
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe ffdd 	bl	80010b8 <pid_limits>
	pid_sample(backClimb_pid, 1);
 80020fe:	4b63      	ldr	r3, [pc, #396]	; (800228c <main+0x348>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2101      	movs	r1, #1
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe ffa3 	bl	8001050 <pid_sample>
	pid_auto(backClimb_pid);
 800210a:	4b60      	ldr	r3, [pc, #384]	; (800228c <main+0x348>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f837 	bl	8001182 <pid_auto>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 8002114:	f001 fcba 	bl	8003a8c <HAL_GetTick>
 8002118:	6038      	str	r0, [r7, #0]
	ENCODER_Get_Angle(&encoderBack);
 800211a:	485d      	ldr	r0, [pc, #372]	; (8002290 <main+0x34c>)
 800211c:	f7ff fd25 	bl	8001b6a <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 8002120:	485c      	ldr	r0, [pc, #368]	; (8002294 <main+0x350>)
 8002122:	f7ff fd22 	bl	8001b6a <ENCODER_Get_Angle>
	while (state_count++ < 1000)
 8002126:	e003      	b.n	8002130 <main+0x1ec>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8002128:	495b      	ldr	r1, [pc, #364]	; (8002298 <main+0x354>)
 800212a:	483e      	ldr	r0, [pc, #248]	; (8002224 <main+0x2e0>)
 800212c:	f000 fbb4 	bl	8002898 <MPU6050_Read_All>
	while (state_count++ < 1000)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800213a:	d3f5      	bcc.n	8002128 <main+0x1e4>
	initial_angle = MPU6050.KalmanAngleX;
 800213c:	4b56      	ldr	r3, [pc, #344]	; (8002298 <main+0x354>)
 800213e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002142:	4956      	ldr	r1, [pc, #344]	; (800229c <main+0x358>)
 8002144:	e9c1 2300 	strd	r2, r3, [r1]
	state_count = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	607b      	str	r3, [r7, #4]
	emBrakeMotor(1);
 800214c:	2001      	movs	r0, #1
 800214e:	f7ff fa15 	bl	800157c <emBrakeMotor>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 8002152:	f001 fc9b 	bl	8003a8c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4293      	cmp	r3, r2
 800215c:	d0f9      	beq.n	8002152 <main+0x20e>
		{
			ADC_DataRequest();
 800215e:	f7ff f9bf 	bl	80014e0 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 8002162:	484b      	ldr	r0, [pc, #300]	; (8002290 <main+0x34c>)
 8002164:	f7ff fcd9 	bl	8001b1a <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 8002168:	484a      	ldr	r0, [pc, #296]	; (8002294 <main+0x350>)
 800216a:	f7ff fcd6 	bl	8001b1a <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
			MPU6050_Read_All(&hi2c1, &MPU6050);
 800216e:	494a      	ldr	r1, [pc, #296]	; (8002298 <main+0x354>)
 8002170:	482c      	ldr	r0, [pc, #176]	; (8002224 <main+0x2e0>)
 8002172:	f000 fb91 	bl	8002898 <MPU6050_Read_All>
			GPIO_Digital_Filtered_Input(&button1, 30);
 8002176:	211e      	movs	r1, #30
 8002178:	4849      	ldr	r0, [pc, #292]	; (80022a0 <main+0x35c>)
 800217a:	f7ff fb54 	bl	8001826 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 800217e:	211e      	movs	r1, #30
 8002180:	4848      	ldr	r0, [pc, #288]	; (80022a4 <main+0x360>)
 8002182:	f7ff fb50 	bl	8001826 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 8002186:	211e      	movs	r1, #30
 8002188:	4847      	ldr	r0, [pc, #284]	; (80022a8 <main+0x364>)
 800218a:	f7ff fb4c 	bl	8001826 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 800218e:	2105      	movs	r1, #5
 8002190:	4846      	ldr	r0, [pc, #280]	; (80022ac <main+0x368>)
 8002192:	f7ff fb48 	bl	8001826 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8002196:	2105      	movs	r1, #5
 8002198:	4845      	ldr	r0, [pc, #276]	; (80022b0 <main+0x36c>)
 800219a:	f7ff fb44 	bl	8001826 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 800219e:	2105      	movs	r1, #5
 80021a0:	4844      	ldr	r0, [pc, #272]	; (80022b4 <main+0x370>)
 80021a2:	f7ff fb40 	bl	8001826 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 80021a6:	2105      	movs	r1, #5
 80021a8:	4843      	ldr	r0, [pc, #268]	; (80022b8 <main+0x374>)
 80021aa:	f7ff fb3c 	bl	8001826 <GPIO_Digital_Filtered_Input>

			//---------------------------------------------------------------------------------------------------
			//3-button control climbing mechanism
//			---------------------------------------------------------------------------------------------------
			if (button1.state == GPIO_PIN_SET
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <main+0x35c>)
 80021b0:	7a1b      	ldrb	r3, [r3, #8]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <main+0x282>
					&& button3.state == GPIO_PIN_RESET)
 80021b6:	4b3c      	ldr	r3, [pc, #240]	; (80022a8 <main+0x364>)
 80021b8:	7a1b      	ldrb	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d103      	bne.n	80021c6 <main+0x282>
				speed[FRONT_INDEX] = 30;
 80021be:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <main+0x378>)
 80021c0:	4a3f      	ldr	r2, [pc, #252]	; (80022c0 <main+0x37c>)
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e013      	b.n	80021ee <main+0x2aa>
			else if (button1.state == GPIO_PIN_SET
 80021c6:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <main+0x35c>)
 80021c8:	7a1b      	ldrb	r3, [r3, #8]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <main+0x29a>
					&& button3.state == GPIO_PIN_SET)
 80021ce:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <main+0x364>)
 80021d0:	7a1b      	ldrb	r3, [r3, #8]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d103      	bne.n	80021de <main+0x29a>
				speed[FRONT_INDEX] = -10;
 80021d6:	4b39      	ldr	r3, [pc, #228]	; (80022bc <main+0x378>)
 80021d8:	4a3a      	ldr	r2, [pc, #232]	; (80022c4 <main+0x380>)
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e007      	b.n	80021ee <main+0x2aa>
			else if (button1.state == GPIO_PIN_RESET)
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <main+0x35c>)
 80021e0:	7a1b      	ldrb	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <main+0x2aa>
				speed[FRONT_INDEX] = 0;
 80021e6:	4b35      	ldr	r3, [pc, #212]	; (80022bc <main+0x378>)
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]

			if (button2.state == GPIO_PIN_SET
 80021ee:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <main+0x360>)
 80021f0:	7a1b      	ldrb	r3, [r3, #8]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <main+0x2c2>
					&& button3.state == GPIO_PIN_RESET)
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <main+0x364>)
 80021f8:	7a1b      	ldrb	r3, [r3, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <main+0x2c2>
				speed[BACK_INDEX] = 30;
 80021fe:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <main+0x378>)
 8002200:	4a2f      	ldr	r2, [pc, #188]	; (80022c0 <main+0x37c>)
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	e068      	b.n	80022d8 <main+0x394>
			else if (button2.state == GPIO_PIN_SET
 8002206:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <main+0x360>)
 8002208:	7a1b      	ldrb	r3, [r3, #8]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d15c      	bne.n	80022c8 <main+0x384>
					&& button3.state == GPIO_PIN_SET)
 800220e:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <main+0x364>)
 8002210:	7a1b      	ldrb	r3, [r3, #8]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d158      	bne.n	80022c8 <main+0x384>
				speed[BACK_INDEX] = -10;
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <main+0x378>)
 8002218:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <main+0x380>)
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	e05c      	b.n	80022d8 <main+0x394>
 800221e:	bf00      	nop
 8002220:	10624dd3 	.word	0x10624dd3
 8002224:	20000414 	.word	0x20000414
 8002228:	20000108 	.word	0x20000108
 800222c:	080096d0 	.word	0x080096d0
 8002230:	080096dc 	.word	0x080096dc
 8002234:	200000d8 	.word	0x200000d8
 8002238:	200005b0 	.word	0x200005b0
 800223c:	20000000 	.word	0x20000000
 8002240:	20000034 	.word	0x20000034
 8002244:	00000000 	.word	0x00000000
 8002248:	2000010c 	.word	0x2000010c
 800224c:	20000110 	.word	0x20000110
 8002250:	20000114 	.word	0x20000114
 8002254:	20000268 	.word	0x20000268
 8002258:	20000264 	.word	0x20000264
 800225c:	20000260 	.word	0x20000260
 8002260:	20000520 	.word	0x20000520
 8002264:	2000051c 	.word	0x2000051c
 8002268:	42480000 	.word	0x42480000
 800226c:	c2480000 	.word	0xc2480000
 8002270:	20000118 	.word	0x20000118
 8002274:	2000011c 	.word	0x2000011c
 8002278:	20000120 	.word	0x20000120
 800227c:	20000274 	.word	0x20000274
 8002280:	20000270 	.word	0x20000270
 8002284:	2000026c 	.word	0x2000026c
 8002288:	200004d8 	.word	0x200004d8
 800228c:	20000568 	.word	0x20000568
 8002290:	200003bc 	.word	0x200003bc
 8002294:	20000364 	.word	0x20000364
 8002298:	20000478 	.word	0x20000478
 800229c:	20000250 	.word	0x20000250
 80022a0:	200000a8 	.word	0x200000a8
 80022a4:	200000b8 	.word	0x200000b8
 80022a8:	200000c8 	.word	0x200000c8
 80022ac:	20000068 	.word	0x20000068
 80022b0:	20000078 	.word	0x20000078
 80022b4:	20000088 	.word	0x20000088
 80022b8:	20000098 	.word	0x20000098
 80022bc:	20000258 	.word	0x20000258
 80022c0:	41f00000 	.word	0x41f00000
 80022c4:	c1200000 	.word	0xc1200000
			else if (button2.state == GPIO_PIN_RESET)
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <main+0x3bc>)
 80022ca:	7a1b      	ldrb	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d103      	bne.n	80022d8 <main+0x394>
				speed[BACK_INDEX] = 0;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <main+0x3c0>)
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	605a      	str	r2, [r3, #4]

			runMotor(&backMotor, speed[BACK_INDEX]);
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <main+0x3c0>)
 80022da:	edd3 7a01 	vldr	s15, [r3, #4]
 80022de:	eeb0 0a67 	vmov.f32	s0, s15
 80022e2:	4809      	ldr	r0, [pc, #36]	; (8002308 <main+0x3c4>)
 80022e4:	f7ff fa28 	bl	8001738 <runMotor>
			runMotor(&rearMotor, speed[FRONT_INDEX]);
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <main+0x3c0>)
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	eeb0 0a67 	vmov.f32	s0, s15
 80022f2:	4806      	ldr	r0, [pc, #24]	; (800230c <main+0x3c8>)
 80022f4:	f7ff fa20 	bl	8001738 <runMotor>
//			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
//				emBrakeMotor(0);
//			else
//				emBrakeMotor(1);

			prev_time = HAL_GetTick();
 80022f8:	f001 fbc8 	bl	8003a8c <HAL_GetTick>
 80022fc:	6038      	str	r0, [r7, #0]
		if (HAL_GetTick() - prev_time >= 1)
 80022fe:	e728      	b.n	8002152 <main+0x20e>
 8002300:	200000b8 	.word	0x200000b8
 8002304:	20000258 	.word	0x20000258
 8002308:	20000034 	.word	0x20000034
 800230c:	20000000 	.word	0x20000000

08002310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b094      	sub	sp, #80	; 0x50
 8002314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002316:	f107 0320 	add.w	r3, r7, #32
 800231a:	2230      	movs	r2, #48	; 0x30
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f006 fe62 	bl	8008fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <SystemClock_Config+0xd8>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	4a2a      	ldr	r2, [pc, #168]	; (80023e8 <SystemClock_Config+0xd8>)
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002342:	6413      	str	r3, [r2, #64]	; 0x40
 8002344:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <SystemClock_Config+0xd8>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002350:	2300      	movs	r3, #0
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	4b25      	ldr	r3, [pc, #148]	; (80023ec <SystemClock_Config+0xdc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a24      	ldr	r2, [pc, #144]	; (80023ec <SystemClock_Config+0xdc>)
 800235a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b22      	ldr	r3, [pc, #136]	; (80023ec <SystemClock_Config+0xdc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800236c:	2301      	movs	r3, #1
 800236e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002376:	2302      	movs	r3, #2
 8002378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800237a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002380:	2308      	movs	r3, #8
 8002382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002384:	23b4      	movs	r3, #180	; 0xb4
 8002386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002388:	2302      	movs	r3, #2
 800238a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800238c:	2304      	movs	r3, #4
 800238e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002390:	f107 0320 	add.w	r3, r7, #32
 8002394:	4618      	mov	r0, r3
 8002396:	f004 f929 	bl	80065ec <HAL_RCC_OscConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023a0:	f000 fa1a 	bl	80027d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023a4:	f004 f8d2 	bl	800654c <HAL_PWREx_EnableOverDrive>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80023ae:	f000 fa13 	bl	80027d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b2:	230f      	movs	r3, #15
 80023b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b6:	2302      	movs	r3, #2
 80023b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	2105      	movs	r1, #5
 80023d0:	4618      	mov	r0, r3
 80023d2:	f004 fb7b 	bl	8006acc <HAL_RCC_ClockConfig>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80023dc:	f000 f9fc 	bl	80027d8 <Error_Handler>
  }
}
 80023e0:	bf00      	nop
 80023e2:	3750      	adds	r7, #80	; 0x50
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40007000 	.word	0x40007000

080023f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d11c      	bne.n	800243a <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8002400:	f001 fb44 	bl	8003a8c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_GPIO_EXTI_Callback+0x58>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d916      	bls.n	800243e <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8002410:	480e      	ldr	r0, [pc, #56]	; (800244c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002412:	f7ff f875 	bl	8001500 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002418:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800241c:	461a      	mov	r2, r3
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_GPIO_EXTI_Callback+0x60>)
 8002420:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002424:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002428:	461a      	mov	r2, r3
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_GPIO_EXTI_Callback+0x64>)
 800242c:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 800242e:	f001 fb2d 	bl	8003a8c <HAL_GetTick>
 8002432:	4603      	mov	r3, r0
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_GPIO_EXTI_Callback+0x58>)
 8002436:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002438:	e001      	b.n	800243e <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 800243a:	bf00      	nop
 800243c:	e000      	b.n	8002440 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 800243e:	bf00      	nop
	}
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	2000024c 	.word	0x2000024c
 800244c:	2000050c 	.word	0x2000050c
 8002450:	20000564 	.word	0x20000564
 8002454:	20000468 	.word	0x20000468

08002458 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a3f      	ldr	r2, [pc, #252]	; (8002564 <HAL_UART_RxCpltCallback+0x10c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d175      	bne.n	8002556 <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 800246a:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b29a      	uxth	r2, r3
 8002470:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	b29b      	uxth	r3, r3
 8002476:	4413      	add	r3, r2
 8002478:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 800247c:	789b      	ldrb	r3, [r3, #2]
 800247e:	b29b      	uxth	r3, r3
 8002480:	4413      	add	r3, r2
 8002482:	b29a      	uxth	r2, r3
 8002484:	4b38      	ldr	r3, [pc, #224]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 8002486:	78db      	ldrb	r3, [r3, #3]
 8002488:	b29b      	uxth	r3, r3
 800248a:	4413      	add	r3, r2
 800248c:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 800248e:	4b36      	ldr	r3, [pc, #216]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	b29b      	uxth	r3, r3
 8002494:	4413      	add	r3, r2
 8002496:	b29a      	uxth	r2, r3
 8002498:	4b33      	ldr	r3, [pc, #204]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 800249a:	795b      	ldrb	r3, [r3, #5]
 800249c:	b29b      	uxth	r3, r3
 800249e:	4413      	add	r3, r2
 80024a0:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 80024a2:	4b31      	ldr	r3, [pc, #196]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 80024a4:	799b      	ldrb	r3, [r3, #6]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 80024ae:	79db      	ldrb	r3, [r3, #7]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 80024b6:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 80024b8:	7a1b      	ldrb	r3, [r3, #8]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4413      	add	r3, r2
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 80024c2:	7a5b      	ldrb	r3, [r3, #9]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 80024cc:	7a9b      	ldrb	r3, [r3, #10]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 80024d6:	7adb      	ldrb	r3, [r3, #11]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4413      	add	r3, r2
 80024dc:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 80024e0:	7b1b      	ldrb	r3, [r3, #12]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 80024ea:	7b5b      	ldrb	r3, [r3, #13]
 80024ec:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 80024ee:	4413      	add	r3, r2
 80024f0:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 80024f2:	89fb      	ldrh	r3, [r7, #14]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 80024f8:	7b9b      	ldrb	r3, [r3, #14]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d12b      	bne.n	8002556 <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2baa      	cmp	r3, #170	; 0xaa
 8002504:	d127      	bne.n	8002556 <HAL_UART_RxCpltCallback+0xfe>
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 8002508:	785b      	ldrb	r3, [r3, #1]
 800250a:	2ba4      	cmp	r3, #164	; 0xa4
 800250c:	d123      	bne.n	8002556 <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 8002510:	78db      	ldrb	r3, [r3, #3]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11f      	bne.n	8002556 <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 8002518:	7a5b      	ldrb	r3, [r3, #9]
 800251a:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 800251e:	7a1b      	ldrb	r3, [r3, #8]
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	441a      	add	r2, r3
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 8002526:	79db      	ldrb	r3, [r3, #7]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	4413      	add	r3, r2
						+ (receive_buf[6]);
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 800252e:	7992      	ldrb	r2, [r2, #6]
 8002530:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002532:	4a0e      	ldr	r2, [pc, #56]	; (800256c <HAL_UART_RxCpltCallback+0x114>)
 8002534:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 8002538:	7b5b      	ldrb	r3, [r3, #13]
 800253a:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 800253e:	7b1b      	ldrb	r3, [r3, #12]
 8002540:	041b      	lsls	r3, r3, #16
 8002542:	441a      	add	r2, r3
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 8002546:	7adb      	ldrb	r3, [r3, #11]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	4413      	add	r3, r2
						+ (receive_buf[10]);
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <HAL_UART_RxCpltCallback+0x110>)
 800254e:	7a92      	ldrb	r2, [r2, #10]
 8002550:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002552:	4a06      	ldr	r2, [pc, #24]	; (800256c <HAL_UART_RxCpltCallback+0x114>)
 8002554:	6053      	str	r3, [r2, #4]
			}
		}
	}

}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40004800 	.word	0x40004800
 8002568:	20000554 	.word	0x20000554
 800256c:	2000046c 	.word	0x2000046c

08002570 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a8f      	ldr	r2, [pc, #572]	; (80027b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800257c:	4293      	cmp	r3, r2
 800257e:	f040 810c 	bne.w	800279a <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002582:	f107 0308 	add.w	r3, r7, #8
 8002586:	4a8d      	ldr	r2, [pc, #564]	; (80027bc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8002588:	2100      	movs	r1, #0
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f001 fda9 	bl	80040e2 <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8002590:	7a7b      	ldrb	r3, [r7, #9]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d151      	bne.n	800263a <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	4989      	ldr	r1, [pc, #548]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fa6b 	bl	8001a78 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 80025a2:	4887      	ldr	r0, [pc, #540]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80025a4:	f7ff fae1 	bl	8001b6a <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos
 80025a8:	4b85      	ldr	r3, [pc, #532]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (uint32_t) (4096 * BACK_GEAR_RATIO);
 80025ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
					- encoderBack.encoder_pos
 80025b0:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
 80025b4:	4a82      	ldr	r2, [pc, #520]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80025b6:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 80025b8:	4b81      	ldr	r3, [pc, #516]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 80025c4:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80027c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>
 80025c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025cc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80027c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 80025d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d4:	ee17 0a90 	vmov	r0, s15
 80025d8:	f7fd ff6e 	bl	80004b8 <__aeabi_f2d>
 80025dc:	a372      	add	r3, pc, #456	; (adr r3, 80027a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	f7fd fe0b 	bl	80001fc <__adddf3>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	f7fe fab3 	bl	8000b58 <__aeabi_d2f>
 80025f2:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 80025f4:	4a72      	ldr	r2, [pc, #456]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80025f6:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 80025f8:	4b71      	ldr	r3, [pc, #452]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80025fa:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80025fe:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80027c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 8002602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260a:	dd09      	ble.n	8002620 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
				encoderBack.angleDeg -= 360;
 800260c:	4b6c      	ldr	r3, [pc, #432]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 800260e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002612:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80027c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 8002616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800261a:	4b69      	ldr	r3, [pc, #420]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 800261c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (encoderBack.encoder_pos >= MAX_BACK_ALLOWABLE_ENC)
 8002620:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002628:	4293      	cmp	r3, r2
 800262a:	d306      	bcc.n	800263a <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos - 4096 * BACK_GEAR_RATIO;
 800262c:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002634:	461a      	mov	r2, r3
 8002636:	4b62      	ldr	r3, [pc, #392]	; (80027c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002638:	649a      	str	r2, [r3, #72]	; 0x48
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 800263a:	7a7b      	ldrb	r3, [r7, #9]
 800263c:	2b02      	cmp	r3, #2
 800263e:	f040 80ac 	bne.w	800279a <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	4961      	ldr	r1, [pc, #388]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fa15 	bl	8001a78 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 800264e:	485f      	ldr	r0, [pc, #380]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002650:	f7ff fa8b 	bl	8001b6a <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 8002654:	4b5d      	ldr	r3, [pc, #372]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 800265c:	f247 522f 	movw	r2, #29999	; 0x752f
 8002660:	4293      	cmp	r3, r2
 8002662:	d839      	bhi.n	80026d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 800266c:	4b58      	ldr	r3, [pc, #352]	; (80027d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 800266e:	fba3 1302 	umull	r1, r3, r3, r2
 8002672:	0b5b      	lsrs	r3, r3, #13
 8002674:	f242 3133 	movw	r1, #9011	; 0x2333
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 800267e:	4a53      	ldr	r2, [pc, #332]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002682:	4b52      	ldr	r3, [pc, #328]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268e:	ee17 0a90 	vmov	r0, s15
 8002692:	f7fd ff11 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002696:	a346      	add	r3, pc, #280	; (adr r3, 80027b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fe f88e 	bl	80007bc <__aeabi_ddiv>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	4b49      	ldr	r3, [pc, #292]	; (80027d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 80026ae:	f7fd ff5b 	bl	8000568 <__aeabi_dmul>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	a33b      	add	r3, pc, #236	; (adr r3, 80027a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fd fd9c 	bl	80001fc <__adddf3>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7fe fa44 	bl	8000b58 <__aeabi_d2f>
 80026d0:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80026d2:	4a3e      	ldr	r2, [pc, #248]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	e047      	b.n	8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>
			}
			else
			{
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
						- encoderFront.encoder_pos;
 80026d8:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd fec9 	bl	8000474 <__aeabi_ui2d>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	a132      	add	r1, pc, #200	; (adr r1, 80027b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80026e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ec:	f7fd fd84 	bl	80001f8 <__aeabi_dsub>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f7fe fa0e 	bl	8000b18 <__aeabi_d2uiz>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4a33      	ldr	r2, [pc, #204]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270e:	ee17 0a90 	vmov	r0, s15
 8002712:	f7fd fed1 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8002716:	a326      	add	r3, pc, #152	; (adr r3, 80027b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fe f84e 	bl	80007bc <__aeabi_ddiv>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 800272e:	f7fd ff1b 	bl	8000568 <__aeabi_dmul>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	a31b      	add	r3, pc, #108	; (adr r3, 80027a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	f7fd fd5c 	bl	80001fc <__adddf3>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8002752:	f7fd fd51 	bl	80001f8 <__aeabi_dsub>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f7fe f9fb 	bl	8000b58 <__aeabi_d2f>
 8002762:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002766:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (encoderFront.encoder_pos >= MAX_FRONT_ALLOWABLE_ENC)
 8002768:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002770:	4293      	cmp	r3, r2
 8002772:	d312      	bcc.n	800279a <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
				encoderFront.signed_encoder_pos =  encoderFront.encoder_pos - 4096 * FRONT_GEAR_RATIO;
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd fe7b 	bl	8000474 <__aeabi_ui2d>
 800277e:	a30c      	add	r3, pc, #48	; (adr r3, 80027b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002784:	f7fd fd38 	bl	80001f8 <__aeabi_dsub>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	f7fe f99a 	bl	8000ac8 <__aeabi_d2iz>
 8002794:	4603      	mov	r3, r0
 8002796:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002798:	6493      	str	r3, [r2, #72]	; 0x48
		}
	}
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	f3af 8000 	nop.w
 80027a8:	d0e56042 	.word	0xd0e56042
 80027ac:	40424b22 	.word	0x40424b22
 80027b0:	9999999a 	.word	0x9999999a
 80027b4:	40c19999 	.word	0x40c19999
 80027b8:	20000314 	.word	0x20000314
 80027bc:	20000278 	.word	0x20000278
 80027c0:	200003bc 	.word	0x200003bc
 80027c4:	46000000 	.word	0x46000000
 80027c8:	43b40000 	.word	0x43b40000
 80027cc:	20000364 	.word	0x20000364
 80027d0:	e8bb8111 	.word	0xe8bb8111
 80027d4:	40768000 	.word	0x40768000

080027d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b088      	sub	sp, #32
 80027ea:	af04      	add	r7, sp, #16
 80027ec:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80027ee:	2364      	movs	r3, #100	; 0x64
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	2301      	movs	r3, #1
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	f107 030f 	add.w	r3, r7, #15
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2301      	movs	r3, #1
 80027fe:	2275      	movs	r2, #117	; 0x75
 8002800:	21d0      	movs	r1, #208	; 0xd0
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f003 f8a6 	bl	8005954 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b68      	cmp	r3, #104	; 0x68
 800280c:	d13d      	bne.n	800288a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002812:	2364      	movs	r3, #100	; 0x64
 8002814:	9302      	str	r3, [sp, #8]
 8002816:	2301      	movs	r3, #1
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	f107 030e 	add.w	r3, r7, #14
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	2301      	movs	r3, #1
 8002822:	226b      	movs	r2, #107	; 0x6b
 8002824:	21d0      	movs	r1, #208	; 0xd0
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f002 ff9a 	bl	8005760 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800282c:	2307      	movs	r3, #7
 800282e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002830:	2364      	movs	r3, #100	; 0x64
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	2301      	movs	r3, #1
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	f107 030e 	add.w	r3, r7, #14
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2301      	movs	r3, #1
 8002840:	2219      	movs	r2, #25
 8002842:	21d0      	movs	r1, #208	; 0xd0
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f002 ff8b 	bl	8005760 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800284a:	2300      	movs	r3, #0
 800284c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800284e:	2364      	movs	r3, #100	; 0x64
 8002850:	9302      	str	r3, [sp, #8]
 8002852:	2301      	movs	r3, #1
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	f107 030e 	add.w	r3, r7, #14
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2301      	movs	r3, #1
 800285e:	221c      	movs	r2, #28
 8002860:	21d0      	movs	r1, #208	; 0xd0
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f002 ff7c 	bl	8005760 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002868:	2300      	movs	r3, #0
 800286a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800286c:	2364      	movs	r3, #100	; 0x64
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	2301      	movs	r3, #1
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	f107 030e 	add.w	r3, r7, #14
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	221b      	movs	r2, #27
 800287e:	21d0      	movs	r1, #208	; 0xd0
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f002 ff6d 	bl	8005760 <HAL_I2C_Mem_Write>
        return 0;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <MPU6050_Init+0xa6>
    }
    return 1;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	0000      	movs	r0, r0
	...

08002898 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800289c:	b094      	sub	sp, #80	; 0x50
 800289e:	af04      	add	r7, sp, #16
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80028a4:	2364      	movs	r3, #100	; 0x64
 80028a6:	9302      	str	r3, [sp, #8]
 80028a8:	230e      	movs	r3, #14
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	f107 0308 	add.w	r3, r7, #8
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2301      	movs	r3, #1
 80028b4:	223b      	movs	r2, #59	; 0x3b
 80028b6:	21d0      	movs	r1, #208	; 0xd0
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f003 f84b 	bl	8005954 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80028be:	7a3b      	ldrb	r3, [r7, #8]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	b21a      	sxth	r2, r3
 80028c4:	7a7b      	ldrb	r3, [r7, #9]
 80028c6:	b21b      	sxth	r3, r3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	b21a      	sxth	r2, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80028d0:	7abb      	ldrb	r3, [r7, #10]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	b21a      	sxth	r2, r3
 80028d6:	7afb      	ldrb	r3, [r7, #11]
 80028d8:	b21b      	sxth	r3, r3
 80028da:	4313      	orrs	r3, r2
 80028dc:	b21a      	sxth	r2, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80028e2:	7b3b      	ldrb	r3, [r7, #12]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	7b7b      	ldrb	r3, [r7, #13]
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80028f4:	7bbb      	ldrb	r3, [r7, #14]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	b21a      	sxth	r2, r3
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	b21b      	sxth	r3, r3
 80028fe:	4313      	orrs	r3, r2
 8002900:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002902:	7c3b      	ldrb	r3, [r7, #16]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	b21a      	sxth	r2, r3
 8002908:	7c7b      	ldrb	r3, [r7, #17]
 800290a:	b21b      	sxth	r3, r3
 800290c:	4313      	orrs	r3, r2
 800290e:	b21a      	sxth	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002914:	7cbb      	ldrb	r3, [r7, #18]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	b21a      	sxth	r2, r3
 800291a:	7cfb      	ldrb	r3, [r7, #19]
 800291c:	b21b      	sxth	r3, r3
 800291e:	4313      	orrs	r3, r2
 8002920:	b21a      	sxth	r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002926:	7d3b      	ldrb	r3, [r7, #20]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	b21a      	sxth	r2, r3
 800292c:	7d7b      	ldrb	r3, [r7, #21]
 800292e:	b21b      	sxth	r3, r3
 8002930:	4313      	orrs	r3, r2
 8002932:	b21a      	sxth	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fda8 	bl	8000494 <__aeabi_i2d>
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	4bbd      	ldr	r3, [pc, #756]	; (8002c40 <MPU6050_Read_All+0x3a8>)
 800294a:	f7fd ff37 	bl	80007bc <__aeabi_ddiv>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	6839      	ldr	r1, [r7, #0]
 8002954:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fd fd98 	bl	8000494 <__aeabi_i2d>
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	4bb5      	ldr	r3, [pc, #724]	; (8002c40 <MPU6050_Read_All+0x3a8>)
 800296a:	f7fd ff27 	bl	80007bc <__aeabi_ddiv>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	6839      	ldr	r1, [r7, #0]
 8002974:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fd88 	bl	8000494 <__aeabi_i2d>
 8002984:	a3a8      	add	r3, pc, #672	; (adr r3, 8002c28 <MPU6050_Read_All+0x390>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	f7fd ff17 	bl	80007bc <__aeabi_ddiv>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002998:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029a4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002c44 <MPU6050_Read_All+0x3ac>
 80029a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ac:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002c48 <MPU6050_Read_All+0x3b0>
 80029b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fd67 	bl	8000494 <__aeabi_i2d>
 80029c6:	a39a      	add	r3, pc, #616	; (adr r3, 8002c30 <MPU6050_Read_All+0x398>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fef6 	bl	80007bc <__aeabi_ddiv>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	6839      	ldr	r1, [r7, #0]
 80029d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd57 	bl	8000494 <__aeabi_i2d>
 80029e6:	a392      	add	r3, pc, #584	; (adr r3, 8002c30 <MPU6050_Read_All+0x398>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f7fd fee6 	bl	80007bc <__aeabi_ddiv>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	6839      	ldr	r1, [r7, #0]
 80029f6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd47 	bl	8000494 <__aeabi_i2d>
 8002a06:	a38a      	add	r3, pc, #552	; (adr r3, 8002c30 <MPU6050_Read_All+0x398>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fed6 	bl	80007bc <__aeabi_ddiv>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002a1a:	f001 f837 	bl	8003a8c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b8a      	ldr	r3, [pc, #552]	; (8002c4c <MPU6050_Read_All+0x3b4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fd24 	bl	8000474 <__aeabi_ui2d>
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	4b87      	ldr	r3, [pc, #540]	; (8002c50 <MPU6050_Read_All+0x3b8>)
 8002a32:	f7fd fec3 	bl	80007bc <__aeabi_ddiv>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002a3e:	f001 f825 	bl	8003a8c <HAL_GetTick>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4a81      	ldr	r2, [pc, #516]	; (8002c4c <MPU6050_Read_All+0x3b4>)
 8002a46:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a56:	fb03 f202 	mul.w	r2, r3, r2
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a60:	4619      	mov	r1, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a68:	fb03 f301 	mul.w	r3, r3, r1
 8002a6c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fd10 	bl	8000494 <__aeabi_i2d>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	ec43 2b10 	vmov	d0, r2, r3
 8002a7c:	f006 fc68 	bl	8009350 <sqrt>
 8002a80:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a90:	f7fd ffd2 	bl	8000a38 <__aeabi_dcmpeq>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d11f      	bne.n	8002ada <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fcf7 	bl	8000494 <__aeabi_i2d>
 8002aa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aaa:	f7fd fe87 	bl	80007bc <__aeabi_ddiv>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	ec43 2b17 	vmov	d7, r2, r3
 8002ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8002aba:	eef0 0a67 	vmov.f32	s1, s15
 8002abe:	f006 fa9b 	bl	8008ff8 <atan>
 8002ac2:	ec51 0b10 	vmov	r0, r1, d0
 8002ac6:	a35c      	add	r3, pc, #368	; (adr r3, 8002c38 <MPU6050_Read_All+0x3a0>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f7fd fd4c 	bl	8000568 <__aeabi_dmul>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002ad8:	e005      	b.n	8002ae6 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aec:	425b      	negs	r3, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fcd0 	bl	8000494 <__aeabi_i2d>
 8002af4:	4682      	mov	sl, r0
 8002af6:	468b      	mov	fp, r1
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd fcc8 	bl	8000494 <__aeabi_i2d>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	ec43 2b11 	vmov	d1, r2, r3
 8002b0c:	ec4b ab10 	vmov	d0, sl, fp
 8002b10:	f006 fc1b 	bl	800934a <atan2>
 8002b14:	ec51 0b10 	vmov	r0, r1, d0
 8002b18:	a347      	add	r3, pc, #284	; (adr r3, 8002c38 <MPU6050_Read_All+0x3a0>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fd fd23 	bl	8000568 <__aeabi_dmul>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <MPU6050_Read_All+0x3bc>)
 8002b30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b34:	f7fd ff8a 	bl	8000a4c <__aeabi_dcmplt>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <MPU6050_Read_All+0x2bc>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <MPU6050_Read_All+0x3c0>)
 8002b4a:	f7fd ff9d 	bl	8000a88 <__aeabi_dcmpgt>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d114      	bne.n	8002b7e <MPU6050_Read_All+0x2e6>
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <MPU6050_Read_All+0x3c0>)
 8002b5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b5e:	f7fd ff93 	bl	8000a88 <__aeabi_dcmpgt>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <MPU6050_Read_All+0x2fc>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <MPU6050_Read_All+0x3bc>)
 8002b74:	f7fd ff6a 	bl	8000a4c <__aeabi_dcmplt>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8002b7e:	4937      	ldr	r1, [pc, #220]	; (8002c5c <MPU6050_Read_All+0x3c4>)
 8002b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b84:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002b88:	6839      	ldr	r1, [r7, #0]
 8002b8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b8e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002b92:	e014      	b.n	8002bbe <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002b9a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002b9e:	eeb0 1a47 	vmov.f32	s2, s14
 8002ba2:	eef0 1a67 	vmov.f32	s3, s15
 8002ba6:	ed97 0b06 	vldr	d0, [r7, #24]
 8002baa:	482c      	ldr	r0, [pc, #176]	; (8002c5c <MPU6050_Read_All+0x3c4>)
 8002bac:	f000 f85a 	bl	8002c64 <Kalman_getAngle>
 8002bb0:	eeb0 7a40 	vmov.f32	s14, s0
 8002bb4:	eef0 7a60 	vmov.f32	s15, s1
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002bc4:	4690      	mov	r8, r2
 8002bc6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <MPU6050_Read_All+0x3c0>)
 8002bd0:	4640      	mov	r0, r8
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	f7fd ff58 	bl	8000a88 <__aeabi_dcmpgt>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002be4:	4614      	mov	r4, r2
 8002be6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002bf6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002bfa:	eeb0 1a47 	vmov.f32	s2, s14
 8002bfe:	eef0 1a67 	vmov.f32	s3, s15
 8002c02:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002c06:	4816      	ldr	r0, [pc, #88]	; (8002c60 <MPU6050_Read_All+0x3c8>)
 8002c08:	f000 f82c 	bl	8002c64 <Kalman_getAngle>
 8002c0c:	eeb0 7a40 	vmov.f32	s14, s0
 8002c10:	eef0 7a60 	vmov.f32	s15, s1
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8002c1a:	bf00      	nop
 8002c1c:	3740      	adds	r7, #64	; 0x40
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c24:	f3af 8000 	nop.w
 8002c28:	00000000 	.word	0x00000000
 8002c2c:	40cc2900 	.word	0x40cc2900
 8002c30:	00000000 	.word	0x00000000
 8002c34:	40606000 	.word	0x40606000
 8002c38:	1a63c1f8 	.word	0x1a63c1f8
 8002c3c:	404ca5dc 	.word	0x404ca5dc
 8002c40:	40d00000 	.word	0x40d00000
 8002c44:	43aa0000 	.word	0x43aa0000
 8002c48:	42121eb8 	.word	0x42121eb8
 8002c4c:	2000056c 	.word	0x2000056c
 8002c50:	408f4000 	.word	0x408f4000
 8002c54:	c0568000 	.word	0xc0568000
 8002c58:	40568000 	.word	0x40568000
 8002c5c:	20000170 	.word	0x20000170
 8002c60:	20000128 	.word	0x20000128

08002c64 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002c64:	b5b0      	push	{r4, r5, r7, lr}
 8002c66:	b096      	sub	sp, #88	; 0x58
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	61f8      	str	r0, [r7, #28]
 8002c6c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002c70:	ed87 1b02 	vstr	d1, [r7, #8]
 8002c74:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c82:	f7fd fab9 	bl	80001f8 <__aeabi_dsub>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002c94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c9c:	f7fd fc64 	bl	8000568 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	f7fd faa8 	bl	80001fc <__adddf3>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	69f9      	ldr	r1, [r7, #28]
 8002cb2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cc6:	f7fd fc4f 	bl	8000568 <__aeabi_dmul>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002cd8:	f7fd fa8e 	bl	80001f8 <__aeabi_dsub>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002cea:	f7fd fa85 	bl	80001f8 <__aeabi_dsub>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f7fd fa7e 	bl	80001fc <__adddf3>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d0c:	f7fd fc2c 	bl	8000568 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4620      	mov	r0, r4
 8002d16:	4629      	mov	r1, r5
 8002d18:	f7fd fa70 	bl	80001fc <__adddf3>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	69f9      	ldr	r1, [r7, #28]
 8002d22:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d36:	f7fd fc17 	bl	8000568 <__aeabi_dmul>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4620      	mov	r0, r4
 8002d40:	4629      	mov	r1, r5
 8002d42:	f7fd fa59 	bl	80001f8 <__aeabi_dsub>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	69f9      	ldr	r1, [r7, #28]
 8002d4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d60:	f7fd fc02 	bl	8000568 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4620      	mov	r0, r4
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	f7fd fa44 	bl	80001f8 <__aeabi_dsub>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	69f9      	ldr	r1, [r7, #28]
 8002d76:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d8a:	f7fd fbed 	bl	8000568 <__aeabi_dmul>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4620      	mov	r0, r4
 8002d94:	4629      	mov	r1, r5
 8002d96:	f7fd fa31 	bl	80001fc <__adddf3>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	69f9      	ldr	r1, [r7, #28]
 8002da0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002db0:	f7fd fa24 	bl	80001fc <__adddf3>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002dc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dc6:	f7fd fcf9 	bl	80007bc <__aeabi_ddiv>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ddc:	f7fd fcee 	bl	80007bc <__aeabi_ddiv>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002dee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002df2:	f7fd fa01 	bl	80001f8 <__aeabi_dsub>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002e04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e0c:	f7fd fbac 	bl	8000568 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4620      	mov	r0, r4
 8002e16:	4629      	mov	r1, r5
 8002e18:	f7fd f9f0 	bl	80001fc <__adddf3>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	69f9      	ldr	r1, [r7, #28]
 8002e22:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002e2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e34:	f7fd fb98 	bl	8000568 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7fd f9dc 	bl	80001fc <__adddf3>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	69f9      	ldr	r1, [r7, #28]
 8002e4a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e54:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002e68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e70:	f7fd fb7a 	bl	8000568 <__aeabi_dmul>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4620      	mov	r0, r4
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	f7fd f9bc 	bl	80001f8 <__aeabi_dsub>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	69f9      	ldr	r1, [r7, #28]
 8002e86:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002e90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e98:	f7fd fb66 	bl	8000568 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	f7fd f9a8 	bl	80001f8 <__aeabi_dsub>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	69f9      	ldr	r1, [r7, #28]
 8002eae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002eb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ec0:	f7fd fb52 	bl	8000568 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd f994 	bl	80001f8 <__aeabi_dsub>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	69f9      	ldr	r1, [r7, #28]
 8002ed6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002ee0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ee4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ee8:	f7fd fb3e 	bl	8000568 <__aeabi_dmul>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	f7fd f980 	bl	80001f8 <__aeabi_dsub>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	69f9      	ldr	r1, [r7, #28]
 8002efe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f08:	ec43 2b17 	vmov	d7, r2, r3
};
 8002f0c:	eeb0 0a47 	vmov.f32	s0, s14
 8002f10:	eef0 0a67 	vmov.f32	s1, s15
 8002f14:	3758      	adds	r7, #88	; 0x58
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002f1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f22:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <MX_SPI1_Init+0x6c>)
 8002f24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f34:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002f36:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f40:	2202      	movs	r2, #2
 8002f42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002f52:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f54:	2228      	movs	r2, #40	; 0x28
 8002f56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f64:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f6c:	220a      	movs	r2, #10
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f70:	4804      	ldr	r0, [pc, #16]	; (8002f84 <MX_SPI1_Init+0x68>)
 8002f72:	f003 ffa5 	bl	8006ec0 <HAL_SPI_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002f7c:	f7ff fc2c 	bl	80027d8 <Error_Handler>
  }

}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	200002bc 	.word	0x200002bc
 8002f88:	40013000 	.word	0x40013000

08002f8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_SPI_MspInit+0x84>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d12b      	bne.n	8003006 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a17      	ldr	r2, [pc, #92]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a10      	ldr	r2, [pc, #64]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8002fe6:	2360      	movs	r3, #96	; 0x60
 8002fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ff6:	2305      	movs	r3, #5
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4619      	mov	r1, r3
 8003000:	4805      	ldr	r0, [pc, #20]	; (8003018 <HAL_SPI_MspInit+0x8c>)
 8003002:	f002 f873 	bl	80050ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003006:	bf00      	nop
 8003008:	3728      	adds	r7, #40	; 0x28
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40013000 	.word	0x40013000
 8003014:	40023800 	.word	0x40023800
 8003018:	40020000 	.word	0x40020000

0800301c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_MspInit+0x4c>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	4a0f      	ldr	r2, [pc, #60]	; (8003068 <HAL_MspInit+0x4c>)
 800302c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_MspInit+0x4c>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_MspInit+0x4c>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a08      	ldr	r2, [pc, #32]	; (8003068 <HAL_MspInit+0x4c>)
 8003048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_MspInit+0x4c>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800

0800306c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800307e:	e7fe      	b.n	800307e <HardFault_Handler+0x4>

08003080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <MemManage_Handler+0x4>

08003086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <BusFault_Handler+0x4>

0800308c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <UsageFault_Handler+0x4>

08003092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030c0:	f000 fcd0 	bl	8003a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80030cc:	4802      	ldr	r0, [pc, #8]	; (80030d8 <DMA1_Stream1_IRQHandler+0x10>)
 80030ce:	f001 fda3 	bl	8004c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000670 	.word	0x20000670

080030dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80030e0:	4802      	ldr	r0, [pc, #8]	; (80030ec <CAN1_RX0_IRQHandler+0x10>)
 80030e2:	f001 f936 	bl	8004352 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000314 	.word	0x20000314

080030f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80030f4:	2080      	movs	r0, #128	; 0x80
 80030f6:	f002 f9d7 	bl	80054a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <SystemInit+0x28>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <SystemInit+0x28>)
 800310c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <SystemInit+0x28>)
 8003116:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800311a:	609a      	str	r2, [r3, #8]
#endif
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b096      	sub	sp, #88	; 0x58
 8003130:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003132:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003140:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800314a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	60da      	str	r2, [r3, #12]
 8003158:	611a      	str	r2, [r3, #16]
 800315a:	615a      	str	r2, [r3, #20]
 800315c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	2220      	movs	r2, #32
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f005 ff3f 	bl	8008fe8 <memset>

  htim1.Instance = TIM1;
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <MX_TIM1_Init+0x138>)
 800316c:	4a3e      	ldr	r2, [pc, #248]	; (8003268 <MX_TIM1_Init+0x13c>)
 800316e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003170:	4b3c      	ldr	r3, [pc, #240]	; (8003264 <MX_TIM1_Init+0x138>)
 8003172:	22b3      	movs	r2, #179	; 0xb3
 8003174:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003176:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <MX_TIM1_Init+0x138>)
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800317c:	4b39      	ldr	r3, [pc, #228]	; (8003264 <MX_TIM1_Init+0x138>)
 800317e:	2263      	movs	r2, #99	; 0x63
 8003180:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003182:	4b38      	ldr	r3, [pc, #224]	; (8003264 <MX_TIM1_Init+0x138>)
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003188:	4b36      	ldr	r3, [pc, #216]	; (8003264 <MX_TIM1_Init+0x138>)
 800318a:	2200      	movs	r2, #0
 800318c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318e:	4b35      	ldr	r3, [pc, #212]	; (8003264 <MX_TIM1_Init+0x138>)
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003194:	4833      	ldr	r0, [pc, #204]	; (8003264 <MX_TIM1_Init+0x138>)
 8003196:	f004 fab3 	bl	8007700 <HAL_TIM_Base_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80031a0:	f7ff fb1a 	bl	80027d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031ae:	4619      	mov	r1, r3
 80031b0:	482c      	ldr	r0, [pc, #176]	; (8003264 <MX_TIM1_Init+0x138>)
 80031b2:	f004 fc2d 	bl	8007a10 <HAL_TIM_ConfigClockSource>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80031bc:	f7ff fb0c 	bl	80027d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80031c0:	4828      	ldr	r0, [pc, #160]	; (8003264 <MX_TIM1_Init+0x138>)
 80031c2:	f004 faec 	bl	800779e <HAL_TIM_PWM_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80031cc:	f7ff fb04 	bl	80027d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031dc:	4619      	mov	r1, r3
 80031de:	4821      	ldr	r0, [pc, #132]	; (8003264 <MX_TIM1_Init+0x138>)
 80031e0:	f004 ffea 	bl	80081b8 <HAL_TIMEx_MasterConfigSynchronization>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80031ea:	f7ff faf5 	bl	80027d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ee:	2360      	movs	r3, #96	; 0x60
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80031fa:	2300      	movs	r3, #0
 80031fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031fe:	2300      	movs	r3, #0
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003206:	2300      	movs	r3, #0
 8003208:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800320a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800320e:	2204      	movs	r2, #4
 8003210:	4619      	mov	r1, r3
 8003212:	4814      	ldr	r0, [pc, #80]	; (8003264 <MX_TIM1_Init+0x138>)
 8003214:	f004 fb36 	bl	8007884 <HAL_TIM_PWM_ConfigChannel>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800321e:	f7ff fadb 	bl	80027d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800323a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4807      	ldr	r0, [pc, #28]	; (8003264 <MX_TIM1_Init+0x138>)
 8003246:	f005 f833 	bl	80082b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003250:	f7ff fac2 	bl	80027d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003254:	4803      	ldr	r0, [pc, #12]	; (8003264 <MX_TIM1_Init+0x138>)
 8003256:	f000 f9ff 	bl	8003658 <HAL_TIM_MspPostInit>

}
 800325a:	bf00      	nop
 800325c:	3758      	adds	r7, #88	; 0x58
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200005f0 	.word	0x200005f0
 8003268:	40010000 	.word	0x40010000

0800326c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08e      	sub	sp, #56	; 0x38
 8003270:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003280:	f107 0320 	add.w	r3, r7, #32
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	611a      	str	r2, [r3, #16]
 8003298:	615a      	str	r2, [r3, #20]
 800329a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800329c:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <MX_TIM2_Init+0xe4>)
 800329e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <MX_TIM2_Init+0xe4>)
 80032a6:	2259      	movs	r2, #89	; 0x59
 80032a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032aa:	4b29      	ldr	r3, [pc, #164]	; (8003350 <MX_TIM2_Init+0xe4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80032b0:	4b27      	ldr	r3, [pc, #156]	; (8003350 <MX_TIM2_Init+0xe4>)
 80032b2:	2263      	movs	r2, #99	; 0x63
 80032b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032b6:	4b26      	ldr	r3, [pc, #152]	; (8003350 <MX_TIM2_Init+0xe4>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032bc:	4b24      	ldr	r3, [pc, #144]	; (8003350 <MX_TIM2_Init+0xe4>)
 80032be:	2200      	movs	r2, #0
 80032c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032c2:	4823      	ldr	r0, [pc, #140]	; (8003350 <MX_TIM2_Init+0xe4>)
 80032c4:	f004 fa1c 	bl	8007700 <HAL_TIM_Base_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80032ce:	f7ff fa83 	bl	80027d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032dc:	4619      	mov	r1, r3
 80032de:	481c      	ldr	r0, [pc, #112]	; (8003350 <MX_TIM2_Init+0xe4>)
 80032e0:	f004 fb96 	bl	8007a10 <HAL_TIM_ConfigClockSource>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80032ea:	f7ff fa75 	bl	80027d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032ee:	4818      	ldr	r0, [pc, #96]	; (8003350 <MX_TIM2_Init+0xe4>)
 80032f0:	f004 fa55 	bl	800779e <HAL_TIM_PWM_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80032fa:	f7ff fa6d 	bl	80027d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003302:	2300      	movs	r3, #0
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003306:	f107 0320 	add.w	r3, r7, #32
 800330a:	4619      	mov	r1, r3
 800330c:	4810      	ldr	r0, [pc, #64]	; (8003350 <MX_TIM2_Init+0xe4>)
 800330e:	f004 ff53 	bl	80081b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003318:	f7ff fa5e 	bl	80027d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800331c:	2360      	movs	r3, #96	; 0x60
 800331e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	2208      	movs	r2, #8
 8003330:	4619      	mov	r1, r3
 8003332:	4807      	ldr	r0, [pc, #28]	; (8003350 <MX_TIM2_Init+0xe4>)
 8003334:	f004 faa6 	bl	8007884 <HAL_TIM_PWM_ConfigChannel>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800333e:	f7ff fa4b 	bl	80027d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003342:	4803      	ldr	r0, [pc, #12]	; (8003350 <MX_TIM2_Init+0xe4>)
 8003344:	f000 f988 	bl	8003658 <HAL_TIM_MspPostInit>

}
 8003348:	bf00      	nop
 800334a:	3738      	adds	r7, #56	; 0x38
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000630 	.word	0x20000630

08003354 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08e      	sub	sp, #56	; 0x38
 8003358:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800335a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003368:	f107 0320 	add.w	r3, r7, #32
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
 8003380:	615a      	str	r2, [r3, #20]
 8003382:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003384:	4b32      	ldr	r3, [pc, #200]	; (8003450 <MX_TIM3_Init+0xfc>)
 8003386:	4a33      	ldr	r2, [pc, #204]	; (8003454 <MX_TIM3_Init+0x100>)
 8003388:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800338a:	4b31      	ldr	r3, [pc, #196]	; (8003450 <MX_TIM3_Init+0xfc>)
 800338c:	2259      	movs	r2, #89	; 0x59
 800338e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003390:	4b2f      	ldr	r3, [pc, #188]	; (8003450 <MX_TIM3_Init+0xfc>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003396:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <MX_TIM3_Init+0xfc>)
 8003398:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800339c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800339e:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <MX_TIM3_Init+0xfc>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a4:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <MX_TIM3_Init+0xfc>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033aa:	4829      	ldr	r0, [pc, #164]	; (8003450 <MX_TIM3_Init+0xfc>)
 80033ac:	f004 f9a8 	bl	8007700 <HAL_TIM_Base_Init>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80033b6:	f7ff fa0f 	bl	80027d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033c4:	4619      	mov	r1, r3
 80033c6:	4822      	ldr	r0, [pc, #136]	; (8003450 <MX_TIM3_Init+0xfc>)
 80033c8:	f004 fb22 	bl	8007a10 <HAL_TIM_ConfigClockSource>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80033d2:	f7ff fa01 	bl	80027d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033d6:	481e      	ldr	r0, [pc, #120]	; (8003450 <MX_TIM3_Init+0xfc>)
 80033d8:	f004 f9e1 	bl	800779e <HAL_TIM_PWM_Init>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80033e2:	f7ff f9f9 	bl	80027d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033ee:	f107 0320 	add.w	r3, r7, #32
 80033f2:	4619      	mov	r1, r3
 80033f4:	4816      	ldr	r0, [pc, #88]	; (8003450 <MX_TIM3_Init+0xfc>)
 80033f6:	f004 fedf 	bl	80081b8 <HAL_TIMEx_MasterConfigSynchronization>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003400:	f7ff f9ea 	bl	80027d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003404:	2360      	movs	r3, #96	; 0x60
 8003406:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003408:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800340c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	2200      	movs	r2, #0
 800341a:	4619      	mov	r1, r3
 800341c:	480c      	ldr	r0, [pc, #48]	; (8003450 <MX_TIM3_Init+0xfc>)
 800341e:	f004 fa31 	bl	8007884 <HAL_TIM_PWM_ConfigChannel>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003428:	f7ff f9d6 	bl	80027d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	2204      	movs	r2, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4807      	ldr	r0, [pc, #28]	; (8003450 <MX_TIM3_Init+0xfc>)
 8003434:	f004 fa26 	bl	8007884 <HAL_TIM_PWM_ConfigChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800343e:	f7ff f9cb 	bl	80027d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003442:	4803      	ldr	r0, [pc, #12]	; (8003450 <MX_TIM3_Init+0xfc>)
 8003444:	f000 f908 	bl	8003658 <HAL_TIM_MspPostInit>

}
 8003448:	bf00      	nop
 800344a:	3738      	adds	r7, #56	; 0x38
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	200005b0 	.word	0x200005b0
 8003454:	40000400 	.word	0x40000400

08003458 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b096      	sub	sp, #88	; 0x58
 800345c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800345e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800346c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	611a      	str	r2, [r3, #16]
 8003486:	615a      	str	r2, [r3, #20]
 8003488:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	2220      	movs	r2, #32
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f005 fda9 	bl	8008fe8 <memset>

  htim8.Instance = TIM8;
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <MX_TIM8_Init+0x134>)
 8003498:	4a3d      	ldr	r2, [pc, #244]	; (8003590 <MX_TIM8_Init+0x138>)
 800349a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 800349c:	4b3b      	ldr	r3, [pc, #236]	; (800358c <MX_TIM8_Init+0x134>)
 800349e:	22b3      	movs	r2, #179	; 0xb3
 80034a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a2:	4b3a      	ldr	r3, [pc, #232]	; (800358c <MX_TIM8_Init+0x134>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80034a8:	4b38      	ldr	r3, [pc, #224]	; (800358c <MX_TIM8_Init+0x134>)
 80034aa:	2263      	movs	r2, #99	; 0x63
 80034ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <MX_TIM8_Init+0x134>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80034b4:	4b35      	ldr	r3, [pc, #212]	; (800358c <MX_TIM8_Init+0x134>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ba:	4b34      	ldr	r3, [pc, #208]	; (800358c <MX_TIM8_Init+0x134>)
 80034bc:	2200      	movs	r2, #0
 80034be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80034c0:	4832      	ldr	r0, [pc, #200]	; (800358c <MX_TIM8_Init+0x134>)
 80034c2:	f004 f91d 	bl	8007700 <HAL_TIM_Base_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80034cc:	f7ff f984 	bl	80027d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80034d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034da:	4619      	mov	r1, r3
 80034dc:	482b      	ldr	r0, [pc, #172]	; (800358c <MX_TIM8_Init+0x134>)
 80034de:	f004 fa97 	bl	8007a10 <HAL_TIM_ConfigClockSource>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80034e8:	f7ff f976 	bl	80027d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80034ec:	4827      	ldr	r0, [pc, #156]	; (800358c <MX_TIM8_Init+0x134>)
 80034ee:	f004 f956 	bl	800779e <HAL_TIM_PWM_Init>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80034f8:	f7ff f96e 	bl	80027d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034fc:	2300      	movs	r3, #0
 80034fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003500:	2300      	movs	r3, #0
 8003502:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003508:	4619      	mov	r1, r3
 800350a:	4820      	ldr	r0, [pc, #128]	; (800358c <MX_TIM8_Init+0x134>)
 800350c:	f004 fe54 	bl	80081b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003516:	f7ff f95f 	bl	80027d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800351a:	2360      	movs	r3, #96	; 0x60
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003522:	2300      	movs	r3, #0
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003526:	2300      	movs	r3, #0
 8003528:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003536:	220c      	movs	r2, #12
 8003538:	4619      	mov	r1, r3
 800353a:	4814      	ldr	r0, [pc, #80]	; (800358c <MX_TIM8_Init+0x134>)
 800353c:	f004 f9a2 	bl	8007884 <HAL_TIM_PWM_ConfigChannel>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8003546:	f7ff f947 	bl	80027d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800355e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003562:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003564:	2300      	movs	r3, #0
 8003566:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	4619      	mov	r1, r3
 800356c:	4807      	ldr	r0, [pc, #28]	; (800358c <MX_TIM8_Init+0x134>)
 800356e:	f004 fe9f 	bl	80082b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8003578:	f7ff f92e 	bl	80027d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800357c:	4803      	ldr	r0, [pc, #12]	; (800358c <MX_TIM8_Init+0x134>)
 800357e:	f000 f86b 	bl	8003658 <HAL_TIM_MspPostInit>

}
 8003582:	bf00      	nop
 8003584:	3758      	adds	r7, #88	; 0x58
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000570 	.word	0x20000570
 8003590:	40010400 	.word	0x40010400

08003594 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a29      	ldr	r2, [pc, #164]	; (8003648 <HAL_TIM_Base_MspInit+0xb4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10e      	bne.n	80035c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	4b28      	ldr	r3, [pc, #160]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	4a27      	ldr	r2, [pc, #156]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6453      	str	r3, [r2, #68]	; 0x44
 80035b6:	4b25      	ldr	r3, [pc, #148]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80035c2:	e03a      	b.n	800363a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035cc:	d10e      	bne.n	80035ec <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6413      	str	r3, [r2, #64]	; 0x40
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]
}
 80035ea:	e026      	b.n	800363a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a17      	ldr	r2, [pc, #92]	; (8003650 <HAL_TIM_Base_MspInit+0xbc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b14      	ldr	r3, [pc, #80]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 8003600:	f043 0302 	orr.w	r3, r3, #2
 8003604:	6413      	str	r3, [r2, #64]	; 0x40
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
}
 8003612:	e012      	b.n	800363a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <HAL_TIM_Base_MspInit+0xc0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d10d      	bne.n	800363a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	4a09      	ldr	r2, [pc, #36]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	6453      	str	r3, [r2, #68]	; 0x44
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <HAL_TIM_Base_MspInit+0xb8>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40023800 	.word	0x40023800
 8003650:	40000400 	.word	0x40000400
 8003654:	40010400 	.word	0x40010400

08003658 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	; 0x30
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003660:	f107 031c 	add.w	r3, r7, #28
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a49      	ldr	r2, [pc, #292]	; (800379c <HAL_TIM_MspPostInit+0x144>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d11f      	bne.n	80036ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	4b48      	ldr	r3, [pc, #288]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	4a47      	ldr	r2, [pc, #284]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 8003684:	f043 0310 	orr.w	r3, r3, #16
 8003688:	6313      	str	r3, [r2, #48]	; 0x30
 800368a:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8003696:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800369a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036a8:	2301      	movs	r3, #1
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 80036ac:	f107 031c 	add.w	r3, r7, #28
 80036b0:	4619      	mov	r1, r3
 80036b2:	483c      	ldr	r0, [pc, #240]	; (80037a4 <HAL_TIM_MspPostInit+0x14c>)
 80036b4:	f001 fd1a 	bl	80050ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80036b8:	e06c      	b.n	8003794 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM2)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c2:	d11f      	bne.n	8003704 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	4a34      	ldr	r2, [pc, #208]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	6313      	str	r3, [r2, #48]	; 0x30
 80036d4:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 80036e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ee:	2300      	movs	r3, #0
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036f2:	2301      	movs	r3, #1
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 80036f6:	f107 031c 	add.w	r3, r7, #28
 80036fa:	4619      	mov	r1, r3
 80036fc:	482a      	ldr	r0, [pc, #168]	; (80037a8 <HAL_TIM_MspPostInit+0x150>)
 80036fe:	f001 fcf5 	bl	80050ec <HAL_GPIO_Init>
}
 8003702:	e047      	b.n	8003794 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM3)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a28      	ldr	r2, [pc, #160]	; (80037ac <HAL_TIM_MspPostInit+0x154>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d11e      	bne.n	800374c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	4a22      	ldr	r2, [pc, #136]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 8003718:	f043 0304 	orr.w	r3, r3, #4
 800371c:	6313      	str	r3, [r2, #48]	; 0x30
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 800372a:	23c0      	movs	r3, #192	; 0xc0
 800372c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003736:	2300      	movs	r3, #0
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800373a:	2302      	movs	r3, #2
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800373e:	f107 031c 	add.w	r3, r7, #28
 8003742:	4619      	mov	r1, r3
 8003744:	481a      	ldr	r0, [pc, #104]	; (80037b0 <HAL_TIM_MspPostInit+0x158>)
 8003746:	f001 fcd1 	bl	80050ec <HAL_GPIO_Init>
}
 800374a:	e023      	b.n	8003794 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM8)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <HAL_TIM_MspPostInit+0x15c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d11e      	bne.n	8003794 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	4a10      	ldr	r2, [pc, #64]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 8003760:	f043 0304 	orr.w	r3, r3, #4
 8003764:	6313      	str	r3, [r2, #48]	; 0x30
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <HAL_TIM_MspPostInit+0x148>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8003772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003778:	2302      	movs	r3, #2
 800377a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003780:	2300      	movs	r3, #0
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003784:	2303      	movs	r3, #3
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8003788:	f107 031c 	add.w	r3, r7, #28
 800378c:	4619      	mov	r1, r3
 800378e:	4808      	ldr	r0, [pc, #32]	; (80037b0 <HAL_TIM_MspPostInit+0x158>)
 8003790:	f001 fcac 	bl	80050ec <HAL_GPIO_Init>
}
 8003794:	bf00      	nop
 8003796:	3730      	adds	r7, #48	; 0x30
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40010000 	.word	0x40010000
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40020400 	.word	0x40020400
 80037ac:	40000400 	.word	0x40000400
 80037b0:	40020800 	.word	0x40020800
 80037b4:	40010400 	.word	0x40010400

080037b8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <MX_USART3_UART_Init+0x4c>)
 80037be:	4a12      	ldr	r2, [pc, #72]	; (8003808 <MX_USART3_UART_Init+0x50>)
 80037c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <MX_USART3_UART_Init+0x4c>)
 80037c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <MX_USART3_UART_Init+0x4c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <MX_USART3_UART_Init+0x4c>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <MX_USART3_UART_Init+0x4c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <MX_USART3_UART_Init+0x4c>)
 80037de:	220c      	movs	r2, #12
 80037e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <MX_USART3_UART_Init+0x4c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <MX_USART3_UART_Init+0x4c>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037ee:	4805      	ldr	r0, [pc, #20]	; (8003804 <MX_USART3_UART_Init+0x4c>)
 80037f0:	f004 fdb0 	bl	8008354 <HAL_UART_Init>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80037fa:	f7fe ffed 	bl	80027d8 <Error_Handler>
  }

}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	200006d0 	.word	0x200006d0
 8003808:	40004800 	.word	0x40004800

0800380c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a30      	ldr	r2, [pc, #192]	; (80038ec <HAL_UART_MspInit+0xe0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d15a      	bne.n	80038e4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <HAL_UART_MspInit+0xe4>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a2e      	ldr	r2, [pc, #184]	; (80038f0 <HAL_UART_MspInit+0xe4>)
 8003838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <HAL_UART_MspInit+0xe4>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <HAL_UART_MspInit+0xe4>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a27      	ldr	r2, [pc, #156]	; (80038f0 <HAL_UART_MspInit+0xe4>)
 8003854:	f043 0308 	orr.w	r3, r3, #8
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <HAL_UART_MspInit+0xe4>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8003866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800386a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386c:	2302      	movs	r3, #2
 800386e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003874:	2303      	movs	r3, #3
 8003876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003878:	2307      	movs	r3, #7
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	4619      	mov	r1, r3
 8003882:	481c      	ldr	r0, [pc, #112]	; (80038f4 <HAL_UART_MspInit+0xe8>)
 8003884:	f001 fc32 	bl	80050ec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003888:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_UART_MspInit+0xec>)
 800388a:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <HAL_UART_MspInit+0xf0>)
 800388c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800388e:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <HAL_UART_MspInit+0xec>)
 8003890:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003894:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003896:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <HAL_UART_MspInit+0xec>)
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800389c:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <HAL_UART_MspInit+0xec>)
 800389e:	2200      	movs	r2, #0
 80038a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_UART_MspInit+0xec>)
 80038a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <HAL_UART_MspInit+0xec>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_UART_MspInit+0xec>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <HAL_UART_MspInit+0xec>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_UART_MspInit+0xec>)
 80038be:	2200      	movs	r2, #0
 80038c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <HAL_UART_MspInit+0xec>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80038c8:	480b      	ldr	r0, [pc, #44]	; (80038f8 <HAL_UART_MspInit+0xec>)
 80038ca:	f001 f89f 	bl	8004a0c <HAL_DMA_Init>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80038d4:	f7fe ff80 	bl	80027d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <HAL_UART_MspInit+0xec>)
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34
 80038de:	4a06      	ldr	r2, [pc, #24]	; (80038f8 <HAL_UART_MspInit+0xec>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80038e4:	bf00      	nop
 80038e6:	3728      	adds	r7, #40	; 0x28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40004800 	.word	0x40004800
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40020c00 	.word	0x40020c00
 80038f8:	20000670 	.word	0x20000670
 80038fc:	40026028 	.word	0x40026028

08003900 <joystick_Init>:
static int joyPosBuffer[2][5] = {0};
static int joy_pos_buffer_cnt = 0;
static const float JoyForwardAngle = 1.57;
static const float JoyForwardAngleDeadzone = 0.1;

void joystick_Init(void){
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8003904:	2228      	movs	r2, #40	; 0x28
 8003906:	2100      	movs	r1, #0
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <joystick_Init+0x14>)
 800390a:	f005 fb6d 	bl	8008fe8 <memset>
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000294 	.word	0x20000294

08003918 <wheelSpeedControl_Init>:

  joy_pos_buffer_cnt++;
}

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	ed87 0a02 	vstr	s0, [r7, #8]
 8003924:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 800396c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039a4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003970:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003972:	e003      	b.n	800397c <LoopCopyDataInit>

08003974 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003976:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003978:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800397a:	3104      	adds	r1, #4

0800397c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800397c:	480b      	ldr	r0, [pc, #44]	; (80039ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003980:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003982:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003984:	d3f6      	bcc.n	8003974 <CopyDataInit>
  ldr  r2, =_sbss
 8003986:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003988:	e002      	b.n	8003990 <LoopFillZerobss>

0800398a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800398a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800398c:	f842 3b04 	str.w	r3, [r2], #4

08003990 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003992:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003994:	d3f9      	bcc.n	800398a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003996:	f7ff fbb3 	bl	8003100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800399a:	f005 fb01 	bl	8008fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800399e:	f7fe fad1 	bl	8001f44 <main>
  bx  lr    
 80039a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80039a4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80039a8:	08009788 	.word	0x08009788
  ldr  r0, =_sdata
 80039ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039b0:	2000022c 	.word	0x2000022c
  ldr  r2, =_sbss
 80039b4:	20000230 	.word	0x20000230
  ldr  r3, = _ebss
 80039b8:	20000714 	.word	0x20000714

080039bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039bc:	e7fe      	b.n	80039bc <ADC_IRQHandler>
	...

080039c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <HAL_Init+0x40>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <HAL_Init+0x40>)
 80039ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_Init+0x40>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <HAL_Init+0x40>)
 80039d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <HAL_Init+0x40>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a07      	ldr	r2, [pc, #28]	; (8003a00 <HAL_Init+0x40>)
 80039e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e8:	2003      	movs	r0, #3
 80039ea:	f000 ffb1 	bl	8004950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ee:	2000      	movs	r0, #0
 80039f0:	f000 f808 	bl	8003a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039f4:	f7ff fb12 	bl	800301c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40023c00 	.word	0x40023c00

08003a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a0c:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_InitTick+0x54>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <HAL_InitTick+0x58>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	4619      	mov	r1, r3
 8003a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 ffc9 	bl	80049ba <HAL_SYSTICK_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00e      	b.n	8003a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b0f      	cmp	r3, #15
 8003a36:	d80a      	bhi.n	8003a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a40:	f000 ff91 	bl	8004966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a44:	4a06      	ldr	r2, [pc, #24]	; (8003a60 <HAL_InitTick+0x5c>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	200001b8 	.word	0x200001b8
 8003a5c:	200001c0 	.word	0x200001c0
 8003a60:	200001bc 	.word	0x200001bc

08003a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_IncTick+0x20>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_IncTick+0x24>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4413      	add	r3, r2
 8003a74:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <HAL_IncTick+0x24>)
 8003a76:	6013      	str	r3, [r2, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	200001c0 	.word	0x200001c0
 8003a88:	20000710 	.word	0x20000710

08003a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a90:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <HAL_GetTick+0x14>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000710 	.word	0x20000710

08003aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aac:	f7ff ffee 	bl	8003a8c <HAL_GetTick>
 8003ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003abc:	d005      	beq.n	8003aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <HAL_Delay+0x44>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aca:	bf00      	nop
 8003acc:	f7ff ffde 	bl	8003a8c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d8f7      	bhi.n	8003acc <HAL_Delay+0x28>
  {
  }
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200001c0 	.word	0x200001c0

08003aec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0ed      	b.n	8003cda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fd ff2c 	bl	8001968 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0202 	bic.w	r2, r2, #2
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b20:	f7ff ffb4 	bl	8003a8c <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b26:	e012      	b.n	8003b4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b28:	f7ff ffb0 	bl	8003a8c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b0a      	cmp	r3, #10
 8003b34:	d90b      	bls.n	8003b4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2205      	movs	r2, #5
 8003b46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0c5      	b.n	8003cda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e5      	bne.n	8003b28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b6c:	f7ff ff8e 	bl	8003a8c <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b72:	e012      	b.n	8003b9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b74:	f7ff ff8a 	bl	8003a8c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b0a      	cmp	r3, #10
 8003b80:	d90b      	bls.n	8003b9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2205      	movs	r2, #5
 8003b92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e09f      	b.n	8003cda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0e5      	beq.n	8003b74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7e1b      	ldrb	r3, [r3, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d108      	bne.n	8003bc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	e007      	b.n	8003bd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	7e5b      	ldrb	r3, [r3, #25]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d108      	bne.n	8003bec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e007      	b.n	8003bfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7e9b      	ldrb	r3, [r3, #26]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d108      	bne.n	8003c16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0220 	orr.w	r2, r2, #32
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e007      	b.n	8003c26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0220 	bic.w	r2, r2, #32
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7edb      	ldrb	r3, [r3, #27]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d108      	bne.n	8003c40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0210 	bic.w	r2, r2, #16
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e007      	b.n	8003c50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0210 	orr.w	r2, r2, #16
 8003c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7f1b      	ldrb	r3, [r3, #28]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d108      	bne.n	8003c6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0208 	orr.w	r2, r2, #8
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e007      	b.n	8003c7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0208 	bic.w	r2, r2, #8
 8003c78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	7f5b      	ldrb	r3, [r3, #29]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d108      	bne.n	8003c94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0204 	orr.w	r2, r2, #4
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e007      	b.n	8003ca4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0204 	bic.w	r2, r2, #4
 8003ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	ea42 0103 	orr.w	r1, r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	1e5a      	subs	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cfa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d003      	beq.n	8003d0a <HAL_CAN_ConfigFilter+0x26>
 8003d02:	7cfb      	ldrb	r3, [r7, #19]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	f040 80be 	bne.w	8003e86 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003d0a:	4b65      	ldr	r3, [pc, #404]	; (8003ea0 <HAL_CAN_ConfigFilter+0x1bc>)
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d14:	f043 0201 	orr.w	r2, r3, #1
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d123      	bne.n	8003db4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	401a      	ands	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	3248      	adds	r2, #72	; 0x48
 8003d94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003da8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003daa:	6979      	ldr	r1, [r7, #20]
 8003dac:	3348      	adds	r3, #72	; 0x48
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	440b      	add	r3, r1
 8003db2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d122      	bne.n	8003e02 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ddc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	3248      	adds	r2, #72	; 0x48
 8003de2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003df6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003df8:	6979      	ldr	r1, [r7, #20]
 8003dfa:	3348      	adds	r3, #72	; 0x48
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	440b      	add	r3, r1
 8003e00:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	401a      	ands	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003e1c:	e007      	b.n	8003e2e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	401a      	ands	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003e48:	e007      	b.n	8003e5a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d107      	bne.n	8003e72 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e78:	f023 0201 	bic.w	r2, r3, #1
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e006      	b.n	8003e94 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40006400 	.word	0x40006400

08003ea4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d12e      	bne.n	8003f16 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ed0:	f7ff fddc 	bl	8003a8c <HAL_GetTick>
 8003ed4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ed6:	e012      	b.n	8003efe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ed8:	f7ff fdd8 	bl	8003a8c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b0a      	cmp	r3, #10
 8003ee4:	d90b      	bls.n	8003efe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2205      	movs	r2, #5
 8003ef6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e012      	b.n	8003f24 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e5      	bne.n	8003ed8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e006      	b.n	8003f24 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	; 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f40:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f4a:	7ffb      	ldrb	r3, [r7, #31]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d003      	beq.n	8003f58 <HAL_CAN_AddTxMessage+0x2c>
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	f040 80b8 	bne.w	80040c8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80a0 	beq.w	80040b8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	0e1b      	lsrs	r3, r3, #24
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d907      	bls.n	8003f98 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e09e      	b.n	80040d6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f98:	2201      	movs	r2, #1
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10d      	bne.n	8003fc6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003fb4:	68f9      	ldr	r1, [r7, #12]
 8003fb6:	6809      	ldr	r1, [r1, #0]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	3318      	adds	r3, #24
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	440b      	add	r3, r1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e00f      	b.n	8003fe6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fd0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003fda:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3318      	adds	r3, #24
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	440b      	add	r3, r1
 8003fe4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	7d1b      	ldrb	r3, [r3, #20]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d111      	bne.n	8004026 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	3318      	adds	r3, #24
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	4413      	add	r3, r2
 800400e:	3304      	adds	r3, #4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	6811      	ldr	r1, [r2, #0]
 8004016:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3318      	adds	r3, #24
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	440b      	add	r3, r1
 8004022:	3304      	adds	r3, #4
 8004024:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3307      	adds	r3, #7
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	061a      	lsls	r2, r3, #24
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3306      	adds	r3, #6
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	041b      	lsls	r3, r3, #16
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3305      	adds	r3, #5
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	4313      	orrs	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	3204      	adds	r2, #4
 8004046:	7812      	ldrb	r2, [r2, #0]
 8004048:	4610      	mov	r0, r2
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	6811      	ldr	r1, [r2, #0]
 800404e:	ea43 0200 	orr.w	r2, r3, r0
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	440b      	add	r3, r1
 8004058:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800405c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3303      	adds	r3, #3
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	061a      	lsls	r2, r3, #24
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3302      	adds	r3, #2
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	041b      	lsls	r3, r3, #16
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3301      	adds	r3, #1
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	4313      	orrs	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	7812      	ldrb	r2, [r2, #0]
 800407e:	4610      	mov	r0, r2
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	6811      	ldr	r1, [r2, #0]
 8004084:	ea43 0200 	orr.w	r2, r3, r0
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	440b      	add	r3, r1
 800408e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004092:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3318      	adds	r3, #24
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	4413      	add	r3, r2
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	6811      	ldr	r1, [r2, #0]
 80040a6:	f043 0201 	orr.w	r2, r3, #1
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	3318      	adds	r3, #24
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	440b      	add	r3, r1
 80040b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e00e      	b.n	80040d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e006      	b.n	80040d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3724      	adds	r7, #36	; 0x24
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80040e2:	b480      	push	{r7}
 80040e4:	b087      	sub	sp, #28
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d003      	beq.n	8004106 <HAL_CAN_GetRxMessage+0x24>
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	2b02      	cmp	r3, #2
 8004102:	f040 80f3 	bne.w	80042ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10e      	bne.n	800412a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d116      	bne.n	8004148 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e0e7      	b.n	80042fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d107      	bne.n	8004148 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0d8      	b.n	80042fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	331b      	adds	r3, #27
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	4413      	add	r3, r2
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0204 	and.w	r2, r3, #4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10c      	bne.n	8004180 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	331b      	adds	r3, #27
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	4413      	add	r3, r2
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0d5b      	lsrs	r3, r3, #21
 8004176:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e00b      	b.n	8004198 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	331b      	adds	r3, #27
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	4413      	add	r3, r2
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	08db      	lsrs	r3, r3, #3
 8004190:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	331b      	adds	r3, #27
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	4413      	add	r3, r2
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0202 	and.w	r2, r3, #2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	331b      	adds	r3, #27
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	4413      	add	r3, r2
 80041ba:	3304      	adds	r3, #4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	331b      	adds	r3, #27
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	4413      	add	r3, r2
 80041d2:	3304      	adds	r3, #4
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	331b      	adds	r3, #27
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	4413      	add	r3, r2
 80041ea:	3304      	adds	r3, #4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	0c1b      	lsrs	r3, r3, #16
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	4413      	add	r3, r2
 8004200:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	4413      	add	r3, r2
 8004216:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0a1a      	lsrs	r2, r3, #8
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	4413      	add	r3, r2
 8004230:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	0c1a      	lsrs	r2, r3, #16
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	3302      	adds	r3, #2
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	4413      	add	r3, r2
 800424a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	0e1a      	lsrs	r2, r3, #24
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	3303      	adds	r3, #3
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	4413      	add	r3, r2
 8004264:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	3304      	adds	r3, #4
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	4413      	add	r3, r2
 800427c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	0a1a      	lsrs	r2, r3, #8
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	3305      	adds	r3, #5
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	4413      	add	r3, r2
 8004296:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0c1a      	lsrs	r2, r3, #16
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	3306      	adds	r3, #6
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	0e1a      	lsrs	r2, r3, #24
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	3307      	adds	r3, #7
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0220 	orr.w	r2, r2, #32
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	e007      	b.n	80042e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0220 	orr.w	r2, r2, #32
 80042e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e006      	b.n	80042fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004316:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d002      	beq.n	8004324 <HAL_CAN_ActivateNotification+0x1e>
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d109      	bne.n	8004338 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6959      	ldr	r1, [r3, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e006      	b.n	8004346 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b08a      	sub	sp, #40	; 0x28
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d07c      	beq.n	8004492 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d023      	beq.n	80043ea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2201      	movs	r2, #1
 80043a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f983 	bl	80046c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80043ba:	e016      	b.n	80043ea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	e00c      	b.n	80043ea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	e002      	b.n	80043ea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f989 	bl	80046fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d024      	beq.n	800443e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f963 	bl	80046d4 <HAL_CAN_TxMailbox1CompleteCallback>
 800440e:	e016      	b.n	800443e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
 8004422:	e00c      	b.n	800443e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	e002      	b.n	800443e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f969 	bl	8004710 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d024      	beq.n	8004492 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004450:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f943 	bl	80046e8 <HAL_CAN_TxMailbox2CompleteCallback>
 8004462:	e016      	b.n	8004492 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
 8004476:	e00c      	b.n	8004492 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	e002      	b.n	8004492 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f949 	bl	8004724 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00c      	beq.n	80044b6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2210      	movs	r2, #16
 80044b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2208      	movs	r2, #8
 80044d0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f930 	bl	8004738 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7fe f83d 	bl	8002570 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00c      	beq.n	800451a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004510:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2210      	movs	r2, #16
 8004518:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00b      	beq.n	800453c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d006      	beq.n	800453c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2208      	movs	r2, #8
 8004534:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f912 	bl	8004760 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f8f9 	bl	800474c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	d006      	beq.n	800457c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2210      	movs	r2, #16
 8004574:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8fc 	bl	8004774 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d006      	beq.n	800459e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2208      	movs	r2, #8
 8004596:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f8f5 	bl	8004788 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d07b      	beq.n	80046a0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d072      	beq.n	8004698 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	f043 0302 	orr.w	r3, r3, #2
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	f043 0304 	orr.w	r3, r3, #4
 8004604:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460c:	2b00      	cmp	r3, #0
 800460e:	d043      	beq.n	8004698 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004616:	2b00      	cmp	r3, #0
 8004618:	d03e      	beq.n	8004698 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004620:	2b60      	cmp	r3, #96	; 0x60
 8004622:	d02b      	beq.n	800467c <HAL_CAN_IRQHandler+0x32a>
 8004624:	2b60      	cmp	r3, #96	; 0x60
 8004626:	d82e      	bhi.n	8004686 <HAL_CAN_IRQHandler+0x334>
 8004628:	2b50      	cmp	r3, #80	; 0x50
 800462a:	d022      	beq.n	8004672 <HAL_CAN_IRQHandler+0x320>
 800462c:	2b50      	cmp	r3, #80	; 0x50
 800462e:	d82a      	bhi.n	8004686 <HAL_CAN_IRQHandler+0x334>
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d019      	beq.n	8004668 <HAL_CAN_IRQHandler+0x316>
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d826      	bhi.n	8004686 <HAL_CAN_IRQHandler+0x334>
 8004638:	2b30      	cmp	r3, #48	; 0x30
 800463a:	d010      	beq.n	800465e <HAL_CAN_IRQHandler+0x30c>
 800463c:	2b30      	cmp	r3, #48	; 0x30
 800463e:	d822      	bhi.n	8004686 <HAL_CAN_IRQHandler+0x334>
 8004640:	2b10      	cmp	r3, #16
 8004642:	d002      	beq.n	800464a <HAL_CAN_IRQHandler+0x2f8>
 8004644:	2b20      	cmp	r3, #32
 8004646:	d005      	beq.n	8004654 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004648:	e01d      	b.n	8004686 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	f043 0308 	orr.w	r3, r3, #8
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004652:	e019      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f043 0310 	orr.w	r3, r3, #16
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800465c:	e014      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	f043 0320 	orr.w	r3, r3, #32
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004666:	e00f      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004670:	e00a      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800467a:	e005      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004684:	e000      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            break;
 8004686:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004696:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2204      	movs	r2, #4
 800469e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f872 	bl	800479c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80046b8:	bf00      	nop
 80046ba:	3728      	adds	r7, #40	; 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <__NVIC_SetPriorityGrouping+0x44>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047cc:	4013      	ands	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047e2:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <__NVIC_SetPriorityGrouping+0x44>)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	60d3      	str	r3, [r2, #12]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047fc:	4b04      	ldr	r3, [pc, #16]	; (8004810 <__NVIC_GetPriorityGrouping+0x18>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 0307 	and.w	r3, r3, #7
}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	2b00      	cmp	r3, #0
 8004824:	db0b      	blt.n	800483e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	4907      	ldr	r1, [pc, #28]	; (800484c <__NVIC_EnableIRQ+0x38>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2001      	movs	r0, #1
 8004836:	fa00 f202 	lsl.w	r2, r0, r2
 800483a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	e000e100 	.word	0xe000e100

08004850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	6039      	str	r1, [r7, #0]
 800485a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004860:	2b00      	cmp	r3, #0
 8004862:	db0a      	blt.n	800487a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	b2da      	uxtb	r2, r3
 8004868:	490c      	ldr	r1, [pc, #48]	; (800489c <__NVIC_SetPriority+0x4c>)
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	0112      	lsls	r2, r2, #4
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	440b      	add	r3, r1
 8004874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004878:	e00a      	b.n	8004890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	4908      	ldr	r1, [pc, #32]	; (80048a0 <__NVIC_SetPriority+0x50>)
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	3b04      	subs	r3, #4
 8004888:	0112      	lsls	r2, r2, #4
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	440b      	add	r3, r1
 800488e:	761a      	strb	r2, [r3, #24]
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	e000e100 	.word	0xe000e100
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b089      	sub	sp, #36	; 0x24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f1c3 0307 	rsb	r3, r3, #7
 80048be:	2b04      	cmp	r3, #4
 80048c0:	bf28      	it	cs
 80048c2:	2304      	movcs	r3, #4
 80048c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2b06      	cmp	r3, #6
 80048cc:	d902      	bls.n	80048d4 <NVIC_EncodePriority+0x30>
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3b03      	subs	r3, #3
 80048d2:	e000      	b.n	80048d6 <NVIC_EncodePriority+0x32>
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43da      	mvns	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	401a      	ands	r2, r3
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	43d9      	mvns	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048fc:	4313      	orrs	r3, r2
         );
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3724      	adds	r7, #36	; 0x24
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3b01      	subs	r3, #1
 8004918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800491c:	d301      	bcc.n	8004922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800491e:	2301      	movs	r3, #1
 8004920:	e00f      	b.n	8004942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004922:	4a0a      	ldr	r2, [pc, #40]	; (800494c <SysTick_Config+0x40>)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3b01      	subs	r3, #1
 8004928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800492a:	210f      	movs	r1, #15
 800492c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004930:	f7ff ff8e 	bl	8004850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004934:	4b05      	ldr	r3, [pc, #20]	; (800494c <SysTick_Config+0x40>)
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800493a:	4b04      	ldr	r3, [pc, #16]	; (800494c <SysTick_Config+0x40>)
 800493c:	2207      	movs	r2, #7
 800493e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	e000e010 	.word	0xe000e010

08004950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff29 	bl	80047b0 <__NVIC_SetPriorityGrouping>
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	4603      	mov	r3, r0
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
 8004972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004978:	f7ff ff3e 	bl	80047f8 <__NVIC_GetPriorityGrouping>
 800497c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	6978      	ldr	r0, [r7, #20]
 8004984:	f7ff ff8e 	bl	80048a4 <NVIC_EncodePriority>
 8004988:	4602      	mov	r2, r0
 800498a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff ff5d 	bl	8004850 <__NVIC_SetPriority>
}
 8004996:	bf00      	nop
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4603      	mov	r3, r0
 80049a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff ff31 	bl	8004814 <__NVIC_EnableIRQ>
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff ffa2 	bl	800490c <SysTick_Config>
 80049c8:	4603      	mov	r3, r0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d106      	bne.n	80049f0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a08      	ldr	r2, [pc, #32]	; (8004a08 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80049e8:	f043 0304 	orr.w	r3, r3, #4
 80049ec:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80049ee:	e005      	b.n	80049fc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80049f6:	f023 0304 	bic.w	r3, r3, #4
 80049fa:	6013      	str	r3, [r2, #0]
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	e000e010 	.word	0xe000e010

08004a0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a18:	f7ff f838 	bl	8003a8c <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e099      	b.n	8004b5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a48:	e00f      	b.n	8004a6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a4a:	f7ff f81f 	bl	8003a8c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	d908      	bls.n	8004a6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2203      	movs	r2, #3
 8004a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e078      	b.n	8004b5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e8      	bne.n	8004a4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <HAL_DMA_Init+0x158>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d107      	bne.n	8004ad4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	4313      	orrs	r3, r2
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 0307 	bic.w	r3, r3, #7
 8004aea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d117      	bne.n	8004b2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00e      	beq.n	8004b2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fa6f 	bl	8004ff4 <DMA_CheckFifoParam>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2240      	movs	r2, #64	; 0x40
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e016      	b.n	8004b5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa26 	bl	8004f88 <DMA_CalcBaseAndBitshift>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	223f      	movs	r2, #63	; 0x3f
 8004b46:	409a      	lsls	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	f010803f 	.word	0xf010803f

08004b68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_DMA_Start_IT+0x26>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e040      	b.n	8004c10 <HAL_DMA_Start_IT+0xa8>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d12f      	bne.n	8004c02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f9b8 	bl	8004f2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc0:	223f      	movs	r2, #63	; 0x3f
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0216 	orr.w	r2, r2, #22
 8004bd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0208 	orr.w	r2, r2, #8
 8004bee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e005      	b.n	8004c0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c24:	4b92      	ldr	r3, [pc, #584]	; (8004e70 <HAL_DMA_IRQHandler+0x258>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a92      	ldr	r2, [pc, #584]	; (8004e74 <HAL_DMA_IRQHandler+0x25c>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	0a9b      	lsrs	r3, r3, #10
 8004c30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c42:	2208      	movs	r2, #8
 8004c44:	409a      	lsls	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01a      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d013      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0204 	bic.w	r2, r2, #4
 8004c6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c70:	2208      	movs	r2, #8
 8004c72:	409a      	lsls	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7c:	f043 0201 	orr.w	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c88:	2201      	movs	r2, #1
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d012      	beq.n	8004cba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00b      	beq.n	8004cba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	409a      	lsls	r2, r3
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb2:	f043 0202 	orr.w	r2, r3, #2
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d012      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00b      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cdc:	2204      	movs	r2, #4
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	f043 0204 	orr.w	r2, r3, #4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf4:	2210      	movs	r2, #16
 8004cf6:	409a      	lsls	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d043      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d03c      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d12:	2210      	movs	r2, #16
 8004d14:	409a      	lsls	r2, r3
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d018      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d108      	bne.n	8004d48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d024      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	4798      	blx	r3
 8004d46:	e01f      	b.n	8004d88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01b      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
 8004d58:	e016      	b.n	8004d88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d107      	bne.n	8004d78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0208 	bic.w	r2, r2, #8
 8004d76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 808e 	beq.w	8004eb6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8086 	beq.w	8004eb6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dae:	2220      	movs	r2, #32
 8004db0:	409a      	lsls	r2, r3
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b05      	cmp	r3, #5
 8004dc0:	d136      	bne.n	8004e30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0216 	bic.w	r2, r2, #22
 8004dd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004de0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <HAL_DMA_IRQHandler+0x1da>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0208 	bic.w	r2, r2, #8
 8004e00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e06:	223f      	movs	r2, #63	; 0x3f
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d07d      	beq.n	8004f22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	4798      	blx	r3
        }
        return;
 8004e2e:	e078      	b.n	8004f22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01c      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d108      	bne.n	8004e5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d030      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	4798      	blx	r3
 8004e5c:	e02b      	b.n	8004eb6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d027      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
 8004e6e:	e022      	b.n	8004eb6 <HAL_DMA_IRQHandler+0x29e>
 8004e70:	200001b8 	.word	0x200001b8
 8004e74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10f      	bne.n	8004ea6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0210 	bic.w	r2, r2, #16
 8004e94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d032      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d022      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2205      	movs	r2, #5
 8004ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d307      	bcc.n	8004efe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f2      	bne.n	8004ee2 <HAL_DMA_IRQHandler+0x2ca>
 8004efc:	e000      	b.n	8004f00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004efe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	4798      	blx	r3
 8004f20:	e000      	b.n	8004f24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004f22:	bf00      	nop
    }
  }
}
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop

08004f2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b40      	cmp	r3, #64	; 0x40
 8004f58:	d108      	bne.n	8004f6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f6a:	e007      	b.n	8004f7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	3b10      	subs	r3, #16
 8004f98:	4a14      	ldr	r2, [pc, #80]	; (8004fec <DMA_CalcBaseAndBitshift+0x64>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fa2:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <DMA_CalcBaseAndBitshift+0x68>)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d909      	bls.n	8004fca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fbe:	f023 0303 	bic.w	r3, r3, #3
 8004fc2:	1d1a      	adds	r2, r3, #4
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	659a      	str	r2, [r3, #88]	; 0x58
 8004fc8:	e007      	b.n	8004fda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	aaaaaaab 	.word	0xaaaaaaab
 8004ff0:	08009700 	.word	0x08009700

08004ff4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005004:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d11f      	bne.n	800504e <DMA_CheckFifoParam+0x5a>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b03      	cmp	r3, #3
 8005012:	d856      	bhi.n	80050c2 <DMA_CheckFifoParam+0xce>
 8005014:	a201      	add	r2, pc, #4	; (adr r2, 800501c <DMA_CheckFifoParam+0x28>)
 8005016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501a:	bf00      	nop
 800501c:	0800502d 	.word	0x0800502d
 8005020:	0800503f 	.word	0x0800503f
 8005024:	0800502d 	.word	0x0800502d
 8005028:	080050c3 	.word	0x080050c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d046      	beq.n	80050c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800503c:	e043      	b.n	80050c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005046:	d140      	bne.n	80050ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800504c:	e03d      	b.n	80050ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005056:	d121      	bne.n	800509c <DMA_CheckFifoParam+0xa8>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b03      	cmp	r3, #3
 800505c:	d837      	bhi.n	80050ce <DMA_CheckFifoParam+0xda>
 800505e:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <DMA_CheckFifoParam+0x70>)
 8005060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005064:	08005075 	.word	0x08005075
 8005068:	0800507b 	.word	0x0800507b
 800506c:	08005075 	.word	0x08005075
 8005070:	0800508d 	.word	0x0800508d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      break;
 8005078:	e030      	b.n	80050dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d025      	beq.n	80050d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800508a:	e022      	b.n	80050d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005094:	d11f      	bne.n	80050d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800509a:	e01c      	b.n	80050d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d903      	bls.n	80050aa <DMA_CheckFifoParam+0xb6>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d003      	beq.n	80050b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050a8:	e018      	b.n	80050dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
      break;
 80050ae:	e015      	b.n	80050dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00e      	beq.n	80050da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
      break;
 80050c0:	e00b      	b.n	80050da <DMA_CheckFifoParam+0xe6>
      break;
 80050c2:	bf00      	nop
 80050c4:	e00a      	b.n	80050dc <DMA_CheckFifoParam+0xe8>
      break;
 80050c6:	bf00      	nop
 80050c8:	e008      	b.n	80050dc <DMA_CheckFifoParam+0xe8>
      break;
 80050ca:	bf00      	nop
 80050cc:	e006      	b.n	80050dc <DMA_CheckFifoParam+0xe8>
      break;
 80050ce:	bf00      	nop
 80050d0:	e004      	b.n	80050dc <DMA_CheckFifoParam+0xe8>
      break;
 80050d2:	bf00      	nop
 80050d4:	e002      	b.n	80050dc <DMA_CheckFifoParam+0xe8>
      break;   
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <DMA_CheckFifoParam+0xe8>
      break;
 80050da:	bf00      	nop
    }
  } 
  
  return status; 
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop

080050ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	; 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	e177      	b.n	80053f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005108:	2201      	movs	r2, #1
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4013      	ands	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	429a      	cmp	r2, r3
 8005122:	f040 8166 	bne.w	80053f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d00b      	beq.n	8005146 <HAL_GPIO_Init+0x5a>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d007      	beq.n	8005146 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800513a:	2b11      	cmp	r3, #17
 800513c:	d003      	beq.n	8005146 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b12      	cmp	r3, #18
 8005144:	d130      	bne.n	80051a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	2203      	movs	r2, #3
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4013      	ands	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4313      	orrs	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800517c:	2201      	movs	r2, #1
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	f003 0201 	and.w	r2, r3, #1
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4313      	orrs	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	2203      	movs	r2, #3
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	43db      	mvns	r3, r3
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4013      	ands	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d003      	beq.n	80051e8 <HAL_GPIO_Init+0xfc>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b12      	cmp	r3, #18
 80051e6:	d123      	bne.n	8005230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	08da      	lsrs	r2, r3, #3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3208      	adds	r2, #8
 80051f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	220f      	movs	r2, #15
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4313      	orrs	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	08da      	lsrs	r2, r3, #3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3208      	adds	r2, #8
 800522a:	69b9      	ldr	r1, [r7, #24]
 800522c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	2203      	movs	r2, #3
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f003 0203 	and.w	r2, r3, #3
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80c0 	beq.w	80053f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	4b66      	ldr	r3, [pc, #408]	; (8005410 <HAL_GPIO_Init+0x324>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	4a65      	ldr	r2, [pc, #404]	; (8005410 <HAL_GPIO_Init+0x324>)
 800527c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005280:	6453      	str	r3, [r2, #68]	; 0x44
 8005282:	4b63      	ldr	r3, [pc, #396]	; (8005410 <HAL_GPIO_Init+0x324>)
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800528e:	4a61      	ldr	r2, [pc, #388]	; (8005414 <HAL_GPIO_Init+0x328>)
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	089b      	lsrs	r3, r3, #2
 8005294:	3302      	adds	r3, #2
 8005296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	220f      	movs	r2, #15
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43db      	mvns	r3, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4013      	ands	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a58      	ldr	r2, [pc, #352]	; (8005418 <HAL_GPIO_Init+0x32c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d037      	beq.n	800532a <HAL_GPIO_Init+0x23e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a57      	ldr	r2, [pc, #348]	; (800541c <HAL_GPIO_Init+0x330>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d031      	beq.n	8005326 <HAL_GPIO_Init+0x23a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a56      	ldr	r2, [pc, #344]	; (8005420 <HAL_GPIO_Init+0x334>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d02b      	beq.n	8005322 <HAL_GPIO_Init+0x236>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a55      	ldr	r2, [pc, #340]	; (8005424 <HAL_GPIO_Init+0x338>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d025      	beq.n	800531e <HAL_GPIO_Init+0x232>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a54      	ldr	r2, [pc, #336]	; (8005428 <HAL_GPIO_Init+0x33c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01f      	beq.n	800531a <HAL_GPIO_Init+0x22e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a53      	ldr	r2, [pc, #332]	; (800542c <HAL_GPIO_Init+0x340>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d019      	beq.n	8005316 <HAL_GPIO_Init+0x22a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a52      	ldr	r2, [pc, #328]	; (8005430 <HAL_GPIO_Init+0x344>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <HAL_GPIO_Init+0x226>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a51      	ldr	r2, [pc, #324]	; (8005434 <HAL_GPIO_Init+0x348>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00d      	beq.n	800530e <HAL_GPIO_Init+0x222>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a50      	ldr	r2, [pc, #320]	; (8005438 <HAL_GPIO_Init+0x34c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d007      	beq.n	800530a <HAL_GPIO_Init+0x21e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a4f      	ldr	r2, [pc, #316]	; (800543c <HAL_GPIO_Init+0x350>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d101      	bne.n	8005306 <HAL_GPIO_Init+0x21a>
 8005302:	2309      	movs	r3, #9
 8005304:	e012      	b.n	800532c <HAL_GPIO_Init+0x240>
 8005306:	230a      	movs	r3, #10
 8005308:	e010      	b.n	800532c <HAL_GPIO_Init+0x240>
 800530a:	2308      	movs	r3, #8
 800530c:	e00e      	b.n	800532c <HAL_GPIO_Init+0x240>
 800530e:	2307      	movs	r3, #7
 8005310:	e00c      	b.n	800532c <HAL_GPIO_Init+0x240>
 8005312:	2306      	movs	r3, #6
 8005314:	e00a      	b.n	800532c <HAL_GPIO_Init+0x240>
 8005316:	2305      	movs	r3, #5
 8005318:	e008      	b.n	800532c <HAL_GPIO_Init+0x240>
 800531a:	2304      	movs	r3, #4
 800531c:	e006      	b.n	800532c <HAL_GPIO_Init+0x240>
 800531e:	2303      	movs	r3, #3
 8005320:	e004      	b.n	800532c <HAL_GPIO_Init+0x240>
 8005322:	2302      	movs	r3, #2
 8005324:	e002      	b.n	800532c <HAL_GPIO_Init+0x240>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_GPIO_Init+0x240>
 800532a:	2300      	movs	r3, #0
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	f002 0203 	and.w	r2, r2, #3
 8005332:	0092      	lsls	r2, r2, #2
 8005334:	4093      	lsls	r3, r2
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800533c:	4935      	ldr	r1, [pc, #212]	; (8005414 <HAL_GPIO_Init+0x328>)
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	3302      	adds	r3, #2
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800534a:	4b3d      	ldr	r3, [pc, #244]	; (8005440 <HAL_GPIO_Init+0x354>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	43db      	mvns	r3, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4013      	ands	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800536e:	4a34      	ldr	r2, [pc, #208]	; (8005440 <HAL_GPIO_Init+0x354>)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005374:	4b32      	ldr	r3, [pc, #200]	; (8005440 <HAL_GPIO_Init+0x354>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	43db      	mvns	r3, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005398:	4a29      	ldr	r2, [pc, #164]	; (8005440 <HAL_GPIO_Init+0x354>)
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800539e:	4b28      	ldr	r3, [pc, #160]	; (8005440 <HAL_GPIO_Init+0x354>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	43db      	mvns	r3, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053c2:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <HAL_GPIO_Init+0x354>)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053c8:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <HAL_GPIO_Init+0x354>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	43db      	mvns	r3, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4013      	ands	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <HAL_GPIO_Init+0x354>)
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3301      	adds	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	f67f ae84 	bls.w	8005108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	3724      	adds	r7, #36	; 0x24
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40023800 	.word	0x40023800
 8005414:	40013800 	.word	0x40013800
 8005418:	40020000 	.word	0x40020000
 800541c:	40020400 	.word	0x40020400
 8005420:	40020800 	.word	0x40020800
 8005424:	40020c00 	.word	0x40020c00
 8005428:	40021000 	.word	0x40021000
 800542c:	40021400 	.word	0x40021400
 8005430:	40021800 	.word	0x40021800
 8005434:	40021c00 	.word	0x40021c00
 8005438:	40022000 	.word	0x40022000
 800543c:	40022400 	.word	0x40022400
 8005440:	40013c00 	.word	0x40013c00

08005444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	887b      	ldrh	r3, [r7, #2]
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
 8005460:	e001      	b.n	8005466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005462:	2300      	movs	r3, #0
 8005464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	807b      	strh	r3, [r7, #2]
 8005480:	4613      	mov	r3, r2
 8005482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005484:	787b      	ldrb	r3, [r7, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800548a:	887a      	ldrh	r2, [r7, #2]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005490:	e003      	b.n	800549a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005492:	887b      	ldrh	r3, [r7, #2]
 8005494:	041a      	lsls	r2, r3, #16
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	619a      	str	r2, [r3, #24]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054b2:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d006      	beq.n	80054cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054be:	4a05      	ldr	r2, [pc, #20]	; (80054d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fc ff92 	bl	80023f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40013c00 	.word	0x40013c00

080054d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e12b      	b.n	8005742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fc fcd8 	bl	8001eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2224      	movs	r2, #36	; 0x24
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800552a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800553a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800553c:	f001 fc98 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 8005540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4a81      	ldr	r2, [pc, #516]	; (800574c <HAL_I2C_Init+0x274>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d807      	bhi.n	800555c <HAL_I2C_Init+0x84>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a80      	ldr	r2, [pc, #512]	; (8005750 <HAL_I2C_Init+0x278>)
 8005550:	4293      	cmp	r3, r2
 8005552:	bf94      	ite	ls
 8005554:	2301      	movls	r3, #1
 8005556:	2300      	movhi	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	e006      	b.n	800556a <HAL_I2C_Init+0x92>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4a7d      	ldr	r2, [pc, #500]	; (8005754 <HAL_I2C_Init+0x27c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	bf94      	ite	ls
 8005564:	2301      	movls	r3, #1
 8005566:	2300      	movhi	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e0e7      	b.n	8005742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a78      	ldr	r2, [pc, #480]	; (8005758 <HAL_I2C_Init+0x280>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	0c9b      	lsrs	r3, r3, #18
 800557c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4a6a      	ldr	r2, [pc, #424]	; (800574c <HAL_I2C_Init+0x274>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d802      	bhi.n	80055ac <HAL_I2C_Init+0xd4>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	3301      	adds	r3, #1
 80055aa:	e009      	b.n	80055c0 <HAL_I2C_Init+0xe8>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055b2:	fb02 f303 	mul.w	r3, r2, r3
 80055b6:	4a69      	ldr	r2, [pc, #420]	; (800575c <HAL_I2C_Init+0x284>)
 80055b8:	fba2 2303 	umull	r2, r3, r2, r3
 80055bc:	099b      	lsrs	r3, r3, #6
 80055be:	3301      	adds	r3, #1
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	495c      	ldr	r1, [pc, #368]	; (800574c <HAL_I2C_Init+0x274>)
 80055dc:	428b      	cmp	r3, r1
 80055de:	d819      	bhi.n	8005614 <HAL_I2C_Init+0x13c>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1e59      	subs	r1, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055f4:	400b      	ands	r3, r1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_I2C_Init+0x138>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1e59      	subs	r1, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	fbb1 f3f3 	udiv	r3, r1, r3
 8005608:	3301      	adds	r3, #1
 800560a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800560e:	e051      	b.n	80056b4 <HAL_I2C_Init+0x1dc>
 8005610:	2304      	movs	r3, #4
 8005612:	e04f      	b.n	80056b4 <HAL_I2C_Init+0x1dc>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d111      	bne.n	8005640 <HAL_I2C_Init+0x168>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	1e58      	subs	r0, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6859      	ldr	r1, [r3, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	440b      	add	r3, r1
 800562a:	fbb0 f3f3 	udiv	r3, r0, r3
 800562e:	3301      	adds	r3, #1
 8005630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf0c      	ite	eq
 8005638:	2301      	moveq	r3, #1
 800563a:	2300      	movne	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	e012      	b.n	8005666 <HAL_I2C_Init+0x18e>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1e58      	subs	r0, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6859      	ldr	r1, [r3, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	0099      	lsls	r1, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	fbb0 f3f3 	udiv	r3, r0, r3
 8005656:	3301      	adds	r3, #1
 8005658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800565c:	2b00      	cmp	r3, #0
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_I2C_Init+0x196>
 800566a:	2301      	movs	r3, #1
 800566c:	e022      	b.n	80056b4 <HAL_I2C_Init+0x1dc>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10e      	bne.n	8005694 <HAL_I2C_Init+0x1bc>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1e58      	subs	r0, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6859      	ldr	r1, [r3, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	440b      	add	r3, r1
 8005684:	fbb0 f3f3 	udiv	r3, r0, r3
 8005688:	3301      	adds	r3, #1
 800568a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800568e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005692:	e00f      	b.n	80056b4 <HAL_I2C_Init+0x1dc>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	1e58      	subs	r0, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6859      	ldr	r1, [r3, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	0099      	lsls	r1, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056aa:	3301      	adds	r3, #1
 80056ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	6809      	ldr	r1, [r1, #0]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69da      	ldr	r2, [r3, #28]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6911      	ldr	r1, [r2, #16]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68d2      	ldr	r2, [r2, #12]
 80056ee:	4311      	orrs	r1, r2
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	430b      	orrs	r3, r1
 80056f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	000186a0 	.word	0x000186a0
 8005750:	001e847f 	.word	0x001e847f
 8005754:	003d08ff 	.word	0x003d08ff
 8005758:	431bde83 	.word	0x431bde83
 800575c:	10624dd3 	.word	0x10624dd3

08005760 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	4608      	mov	r0, r1
 800576a:	4611      	mov	r1, r2
 800576c:	461a      	mov	r2, r3
 800576e:	4603      	mov	r3, r0
 8005770:	817b      	strh	r3, [r7, #10]
 8005772:	460b      	mov	r3, r1
 8005774:	813b      	strh	r3, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800577a:	f7fe f987 	bl	8003a8c <HAL_GetTick>
 800577e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b20      	cmp	r3, #32
 800578a:	f040 80d9 	bne.w	8005940 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	2319      	movs	r3, #25
 8005794:	2201      	movs	r2, #1
 8005796:	496d      	ldr	r1, [pc, #436]	; (800594c <HAL_I2C_Mem_Write+0x1ec>)
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 fc7f 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
 80057a6:	e0cc      	b.n	8005942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_I2C_Mem_Write+0x56>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e0c5      	b.n	8005942 <HAL_I2C_Mem_Write+0x1e2>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d007      	beq.n	80057dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0201 	orr.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2221      	movs	r2, #33	; 0x21
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2240      	movs	r2, #64	; 0x40
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a3a      	ldr	r2, [r7, #32]
 8005806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800580c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4a4d      	ldr	r2, [pc, #308]	; (8005950 <HAL_I2C_Mem_Write+0x1f0>)
 800581c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800581e:	88f8      	ldrh	r0, [r7, #6]
 8005820:	893a      	ldrh	r2, [r7, #8]
 8005822:	8979      	ldrh	r1, [r7, #10]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	4603      	mov	r3, r0
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fab6 	bl	8005da0 <I2C_RequestMemoryWrite>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d052      	beq.n	80058e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e081      	b.n	8005942 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fd00 	bl	8006248 <I2C_WaitOnTXEFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00d      	beq.n	800586a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	2b04      	cmp	r3, #4
 8005854:	d107      	bne.n	8005866 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e06b      	b.n	8005942 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	781a      	ldrb	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d11b      	bne.n	80058e0 <HAL_I2C_Mem_Write+0x180>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d017      	beq.n	80058e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	781a      	ldrb	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1aa      	bne.n	800583e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fcec 	bl	80062ca <I2C_WaitOnBTFFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00d      	beq.n	8005914 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d107      	bne.n	8005910 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e016      	b.n	8005942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	e000      	b.n	8005942 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005940:	2302      	movs	r3, #2
  }
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	00100002 	.word	0x00100002
 8005950:	ffff0000 	.word	0xffff0000

08005954 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08c      	sub	sp, #48	; 0x30
 8005958:	af02      	add	r7, sp, #8
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	4608      	mov	r0, r1
 800595e:	4611      	mov	r1, r2
 8005960:	461a      	mov	r2, r3
 8005962:	4603      	mov	r3, r0
 8005964:	817b      	strh	r3, [r7, #10]
 8005966:	460b      	mov	r3, r1
 8005968:	813b      	strh	r3, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800596e:	f7fe f88d 	bl	8003a8c <HAL_GetTick>
 8005972:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b20      	cmp	r3, #32
 800597e:	f040 8208 	bne.w	8005d92 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	2319      	movs	r3, #25
 8005988:	2201      	movs	r2, #1
 800598a:	497b      	ldr	r1, [pc, #492]	; (8005b78 <HAL_I2C_Mem_Read+0x224>)
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fb85 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
 800599a:	e1fb      	b.n	8005d94 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_I2C_Mem_Read+0x56>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e1f4      	b.n	8005d94 <HAL_I2C_Mem_Read+0x440>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d007      	beq.n	80059d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2222      	movs	r2, #34	; 0x22
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2240      	movs	r2, #64	; 0x40
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a5b      	ldr	r2, [pc, #364]	; (8005b7c <HAL_I2C_Mem_Read+0x228>)
 8005a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a12:	88f8      	ldrh	r0, [r7, #6]
 8005a14:	893a      	ldrh	r2, [r7, #8]
 8005a16:	8979      	ldrh	r1, [r7, #10]
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	4603      	mov	r3, r0
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fa52 	bl	8005ecc <I2C_RequestMemoryRead>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e1b0      	b.n	8005d94 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d113      	bne.n	8005a62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	623b      	str	r3, [r7, #32]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	623b      	str	r3, [r7, #32]
 8005a4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	e184      	b.n	8005d6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d11b      	bne.n	8005aa2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	e164      	b.n	8005d6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d11b      	bne.n	8005ae2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aca:	2300      	movs	r3, #0
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	e144      	b.n	8005d6c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005af8:	e138      	b.n	8005d6c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	f200 80f1 	bhi.w	8005ce6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d123      	bne.n	8005b54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fc1b 	bl	800634c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e139      	b.n	8005d94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b52:	e10b      	b.n	8005d6c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d14e      	bne.n	8005bfa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	2200      	movs	r2, #0
 8005b64:	4906      	ldr	r1, [pc, #24]	; (8005b80 <HAL_I2C_Mem_Read+0x22c>)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fa98 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e10e      	b.n	8005d94 <HAL_I2C_Mem_Read+0x440>
 8005b76:	bf00      	nop
 8005b78:	00100002 	.word	0x00100002
 8005b7c:	ffff0000 	.word	0xffff0000
 8005b80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bf8:	e0b8      	b.n	8005d6c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	2200      	movs	r2, #0
 8005c02:	4966      	ldr	r1, [pc, #408]	; (8005d9c <HAL_I2C_Mem_Read+0x448>)
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fa49 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0bf      	b.n	8005d94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	494f      	ldr	r1, [pc, #316]	; (8005d9c <HAL_I2C_Mem_Read+0x448>)
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fa1b 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e091      	b.n	8005d94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ce4:	e042      	b.n	8005d6c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fb2e 	bl	800634c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e04c      	b.n	8005d94 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d118      	bne.n	8005d6c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f47f aec2 	bne.w	8005afa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
  }
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3728      	adds	r7, #40	; 0x28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	00010004 	.word	0x00010004

08005da0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	4608      	mov	r0, r1
 8005daa:	4611      	mov	r1, r2
 8005dac:	461a      	mov	r2, r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	817b      	strh	r3, [r7, #10]
 8005db2:	460b      	mov	r3, r1
 8005db4:	813b      	strh	r3, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 f960 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00d      	beq.n	8005dfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df0:	d103      	bne.n	8005dfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e05f      	b.n	8005ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dfe:	897b      	ldrh	r3, [r7, #10]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	492d      	ldr	r1, [pc, #180]	; (8005ec8 <I2C_RequestMemoryWrite+0x128>)
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f998 	bl	800614a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e04c      	b.n	8005ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3c:	6a39      	ldr	r1, [r7, #32]
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fa02 	bl	8006248 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00d      	beq.n	8005e66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d107      	bne.n	8005e62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e02b      	b.n	8005ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e66:	88fb      	ldrh	r3, [r7, #6]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d105      	bne.n	8005e78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e6c:	893b      	ldrh	r3, [r7, #8]
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	611a      	str	r2, [r3, #16]
 8005e76:	e021      	b.n	8005ebc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e78:	893b      	ldrh	r3, [r7, #8]
 8005e7a:	0a1b      	lsrs	r3, r3, #8
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e88:	6a39      	ldr	r1, [r7, #32]
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 f9dc 	bl	8006248 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00d      	beq.n	8005eb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d107      	bne.n	8005eae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e005      	b.n	8005ebe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eb2:	893b      	ldrh	r3, [r7, #8]
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	00010002 	.word	0x00010002

08005ecc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4603      	mov	r3, r0
 8005edc:	817b      	strh	r3, [r7, #10]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	813b      	strh	r3, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ef4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f8c2 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00d      	beq.n	8005f3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f2c:	d103      	bne.n	8005f36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e0aa      	b.n	8006090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f3a:	897b      	ldrh	r3, [r7, #10]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	6a3a      	ldr	r2, [r7, #32]
 8005f4e:	4952      	ldr	r1, [pc, #328]	; (8006098 <I2C_RequestMemoryRead+0x1cc>)
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f8fa 	bl	800614a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e097      	b.n	8006090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f78:	6a39      	ldr	r1, [r7, #32]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f964 	bl	8006248 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00d      	beq.n	8005fa2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d107      	bne.n	8005f9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e076      	b.n	8006090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d105      	bne.n	8005fb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fa8:	893b      	ldrh	r3, [r7, #8]
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	611a      	str	r2, [r3, #16]
 8005fb2:	e021      	b.n	8005ff8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fb4:	893b      	ldrh	r3, [r7, #8]
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc4:	6a39      	ldr	r1, [r7, #32]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f93e 	bl	8006248 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d107      	bne.n	8005fea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e050      	b.n	8006090 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fee:	893b      	ldrh	r3, [r7, #8]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffa:	6a39      	ldr	r1, [r7, #32]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f923 	bl	8006248 <I2C_WaitOnTXEFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00d      	beq.n	8006024 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	2b04      	cmp	r3, #4
 800600e:	d107      	bne.n	8006020 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e035      	b.n	8006090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006032:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	2200      	movs	r2, #0
 800603c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 f82b 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00d      	beq.n	8006068 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605a:	d103      	bne.n	8006064 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006062:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e013      	b.n	8006090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006068:	897b      	ldrh	r3, [r7, #10]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	f043 0301 	orr.w	r3, r3, #1
 8006070:	b2da      	uxtb	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	6a3a      	ldr	r2, [r7, #32]
 800607c:	4906      	ldr	r1, [pc, #24]	; (8006098 <I2C_RequestMemoryRead+0x1cc>)
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f863 	bl	800614a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	00010002 	.word	0x00010002

0800609c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	4613      	mov	r3, r2
 80060aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060ac:	e025      	b.n	80060fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b4:	d021      	beq.n	80060fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b6:	f7fd fce9 	bl	8003a8c <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d302      	bcc.n	80060cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d116      	bne.n	80060fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e023      	b.n	8006142 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d10d      	bne.n	8006120 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	43da      	mvns	r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4013      	ands	r3, r2
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	bf0c      	ite	eq
 8006116:	2301      	moveq	r3, #1
 8006118:	2300      	movne	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	e00c      	b.n	800613a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	43da      	mvns	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4013      	ands	r3, r2
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	bf0c      	ite	eq
 8006132:	2301      	moveq	r3, #1
 8006134:	2300      	movne	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	429a      	cmp	r2, r3
 800613e:	d0b6      	beq.n	80060ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
 8006156:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006158:	e051      	b.n	80061fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006168:	d123      	bne.n	80061b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006178:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006182:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f043 0204 	orr.w	r2, r3, #4
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e046      	b.n	8006240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b8:	d021      	beq.n	80061fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ba:	f7fd fc67 	bl	8003a8c <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d302      	bcc.n	80061d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d116      	bne.n	80061fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2220      	movs	r2, #32
 80061da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	f043 0220 	orr.w	r2, r3, #32
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e020      	b.n	8006240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	d10c      	bne.n	8006222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	43da      	mvns	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4013      	ands	r3, r2
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	bf14      	ite	ne
 800621a:	2301      	movne	r3, #1
 800621c:	2300      	moveq	r3, #0
 800621e:	b2db      	uxtb	r3, r3
 8006220:	e00b      	b.n	800623a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	43da      	mvns	r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4013      	ands	r3, r2
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	bf14      	ite	ne
 8006234:	2301      	movne	r3, #1
 8006236:	2300      	moveq	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d18d      	bne.n	800615a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006254:	e02d      	b.n	80062b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f8ce 	bl	80063f8 <I2C_IsAcknowledgeFailed>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e02d      	b.n	80062c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800626c:	d021      	beq.n	80062b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626e:	f7fd fc0d 	bl	8003a8c <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	429a      	cmp	r2, r3
 800627c:	d302      	bcc.n	8006284 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d116      	bne.n	80062b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f043 0220 	orr.w	r2, r3, #32
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e007      	b.n	80062c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062bc:	2b80      	cmp	r3, #128	; 0x80
 80062be:	d1ca      	bne.n	8006256 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062d6:	e02d      	b.n	8006334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f88d 	bl	80063f8 <I2C_IsAcknowledgeFailed>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e02d      	b.n	8006344 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ee:	d021      	beq.n	8006334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f0:	f7fd fbcc 	bl	8003a8c <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d302      	bcc.n	8006306 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d116      	bne.n	8006334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	f043 0220 	orr.w	r2, r3, #32
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e007      	b.n	8006344 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b04      	cmp	r3, #4
 8006340:	d1ca      	bne.n	80062d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006358:	e042      	b.n	80063e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b10      	cmp	r3, #16
 8006366:	d119      	bne.n	800639c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0210 	mvn.w	r2, #16
 8006370:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e029      	b.n	80063f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639c:	f7fd fb76 	bl	8003a8c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d302      	bcc.n	80063b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d116      	bne.n	80063e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	f043 0220 	orr.w	r2, r3, #32
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e007      	b.n	80063f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	d1b5      	bne.n	800635a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800640a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640e:	d11b      	bne.n	8006448 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006418:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	f043 0204 	orr.w	r2, r3, #4
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e000      	b.n	800644a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b20      	cmp	r3, #32
 800646a:	d129      	bne.n	80064c0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2224      	movs	r2, #36	; 0x24
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0210 	bic.w	r2, r2, #16
 8006492:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	e000      	b.n	80064c2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
  }
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	d12a      	bne.n	800653e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2224      	movs	r2, #36	; 0x24
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0201 	bic.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006508:	89fb      	ldrh	r3, [r7, #14]
 800650a:	f023 030f 	bic.w	r3, r3, #15
 800650e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	b29a      	uxth	r2, r3
 8006514:	89fb      	ldrh	r3, [r7, #14]
 8006516:	4313      	orrs	r3, r2
 8006518:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	89fa      	ldrh	r2, [r7, #14]
 8006520:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 0201 	orr.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	e000      	b.n	8006540 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800653e:	2302      	movs	r3, #2
  }
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006556:	2300      	movs	r3, #0
 8006558:	603b      	str	r3, [r7, #0]
 800655a:	4b20      	ldr	r3, [pc, #128]	; (80065dc <HAL_PWREx_EnableOverDrive+0x90>)
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	4a1f      	ldr	r2, [pc, #124]	; (80065dc <HAL_PWREx_EnableOverDrive+0x90>)
 8006560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006564:	6413      	str	r3, [r2, #64]	; 0x40
 8006566:	4b1d      	ldr	r3, [pc, #116]	; (80065dc <HAL_PWREx_EnableOverDrive+0x90>)
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006572:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006578:	f7fd fa88 	bl	8003a8c <HAL_GetTick>
 800657c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800657e:	e009      	b.n	8006594 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006580:	f7fd fa84 	bl	8003a8c <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800658e:	d901      	bls.n	8006594 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e01f      	b.n	80065d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006594:	4b13      	ldr	r3, [pc, #76]	; (80065e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800659c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a0:	d1ee      	bne.n	8006580 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80065a2:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065a4:	2201      	movs	r2, #1
 80065a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065a8:	f7fd fa70 	bl	8003a8c <HAL_GetTick>
 80065ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80065ae:	e009      	b.n	80065c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065b0:	f7fd fa6c 	bl	8003a8c <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065be:	d901      	bls.n	80065c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e007      	b.n	80065d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80065c4:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065d0:	d1ee      	bne.n	80065b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40023800 	.word	0x40023800
 80065e0:	420e0040 	.word	0x420e0040
 80065e4:	40007000 	.word	0x40007000
 80065e8:	420e0044 	.word	0x420e0044

080065ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e25b      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d075      	beq.n	80066f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800660a:	4ba3      	ldr	r3, [pc, #652]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 030c 	and.w	r3, r3, #12
 8006612:	2b04      	cmp	r3, #4
 8006614:	d00c      	beq.n	8006630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006616:	4ba0      	ldr	r3, [pc, #640]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800661e:	2b08      	cmp	r3, #8
 8006620:	d112      	bne.n	8006648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006622:	4b9d      	ldr	r3, [pc, #628]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800662a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800662e:	d10b      	bne.n	8006648 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006630:	4b99      	ldr	r3, [pc, #612]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d05b      	beq.n	80066f4 <HAL_RCC_OscConfig+0x108>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d157      	bne.n	80066f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e236      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006650:	d106      	bne.n	8006660 <HAL_RCC_OscConfig+0x74>
 8006652:	4b91      	ldr	r3, [pc, #580]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a90      	ldr	r2, [pc, #576]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	e01d      	b.n	800669c <HAL_RCC_OscConfig+0xb0>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006668:	d10c      	bne.n	8006684 <HAL_RCC_OscConfig+0x98>
 800666a:	4b8b      	ldr	r3, [pc, #556]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a8a      	ldr	r2, [pc, #552]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	4b88      	ldr	r3, [pc, #544]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a87      	ldr	r2, [pc, #540]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 800667c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	e00b      	b.n	800669c <HAL_RCC_OscConfig+0xb0>
 8006684:	4b84      	ldr	r3, [pc, #528]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a83      	ldr	r2, [pc, #524]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 800668a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	4b81      	ldr	r3, [pc, #516]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a80      	ldr	r2, [pc, #512]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800669a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d013      	beq.n	80066cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a4:	f7fd f9f2 	bl	8003a8c <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066ac:	f7fd f9ee 	bl	8003a8c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b64      	cmp	r3, #100	; 0x64
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e1fb      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066be:	4b76      	ldr	r3, [pc, #472]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0xc0>
 80066ca:	e014      	b.n	80066f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066cc:	f7fd f9de 	bl	8003a8c <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066d4:	f7fd f9da 	bl	8003a8c <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b64      	cmp	r3, #100	; 0x64
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e1e7      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066e6:	4b6c      	ldr	r3, [pc, #432]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f0      	bne.n	80066d4 <HAL_RCC_OscConfig+0xe8>
 80066f2:	e000      	b.n	80066f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d063      	beq.n	80067ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006702:	4b65      	ldr	r3, [pc, #404]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 030c 	and.w	r3, r3, #12
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800670e:	4b62      	ldr	r3, [pc, #392]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006716:	2b08      	cmp	r3, #8
 8006718:	d11c      	bne.n	8006754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800671a:	4b5f      	ldr	r3, [pc, #380]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d116      	bne.n	8006754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006726:	4b5c      	ldr	r3, [pc, #368]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <HAL_RCC_OscConfig+0x152>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d001      	beq.n	800673e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e1bb      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800673e:	4b56      	ldr	r3, [pc, #344]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	4952      	ldr	r1, [pc, #328]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 800674e:	4313      	orrs	r3, r2
 8006750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006752:	e03a      	b.n	80067ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d020      	beq.n	800679e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800675c:	4b4f      	ldr	r3, [pc, #316]	; (800689c <HAL_RCC_OscConfig+0x2b0>)
 800675e:	2201      	movs	r2, #1
 8006760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006762:	f7fd f993 	bl	8003a8c <HAL_GetTick>
 8006766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800676a:	f7fd f98f 	bl	8003a8c <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e19c      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800677c:	4b46      	ldr	r3, [pc, #280]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006788:	4b43      	ldr	r3, [pc, #268]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4940      	ldr	r1, [pc, #256]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006798:	4313      	orrs	r3, r2
 800679a:	600b      	str	r3, [r1, #0]
 800679c:	e015      	b.n	80067ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800679e:	4b3f      	ldr	r3, [pc, #252]	; (800689c <HAL_RCC_OscConfig+0x2b0>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fd f972 	bl	8003a8c <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067ac:	f7fd f96e 	bl	8003a8c <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e17b      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067be:	4b36      	ldr	r3, [pc, #216]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f0      	bne.n	80067ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d030      	beq.n	8006838 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d016      	beq.n	800680c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067de:	4b30      	ldr	r3, [pc, #192]	; (80068a0 <HAL_RCC_OscConfig+0x2b4>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e4:	f7fd f952 	bl	8003a8c <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067ec:	f7fd f94e 	bl	8003a8c <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e15b      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067fe:	4b26      	ldr	r3, [pc, #152]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0x200>
 800680a:	e015      	b.n	8006838 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800680c:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <HAL_RCC_OscConfig+0x2b4>)
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006812:	f7fd f93b 	bl	8003a8c <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006818:	e008      	b.n	800682c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800681a:	f7fd f937 	bl	8003a8c <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e144      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800682c:	4b1a      	ldr	r3, [pc, #104]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 800682e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f0      	bne.n	800681a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80a0 	beq.w	8006986 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006846:	2300      	movs	r3, #0
 8006848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800684a:	4b13      	ldr	r3, [pc, #76]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10f      	bne.n	8006876 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006856:	2300      	movs	r3, #0
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	4a0e      	ldr	r2, [pc, #56]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006864:	6413      	str	r3, [r2, #64]	; 0x40
 8006866:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <HAL_RCC_OscConfig+0x2ac>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686e:	60bb      	str	r3, [r7, #8]
 8006870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006872:	2301      	movs	r3, #1
 8006874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006876:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <HAL_RCC_OscConfig+0x2b8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687e:	2b00      	cmp	r3, #0
 8006880:	d121      	bne.n	80068c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006882:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <HAL_RCC_OscConfig+0x2b8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a07      	ldr	r2, [pc, #28]	; (80068a4 <HAL_RCC_OscConfig+0x2b8>)
 8006888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800688c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800688e:	f7fd f8fd 	bl	8003a8c <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006894:	e011      	b.n	80068ba <HAL_RCC_OscConfig+0x2ce>
 8006896:	bf00      	nop
 8006898:	40023800 	.word	0x40023800
 800689c:	42470000 	.word	0x42470000
 80068a0:	42470e80 	.word	0x42470e80
 80068a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a8:	f7fd f8f0 	bl	8003a8c <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e0fd      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ba:	4b81      	ldr	r3, [pc, #516]	; (8006ac0 <HAL_RCC_OscConfig+0x4d4>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d106      	bne.n	80068dc <HAL_RCC_OscConfig+0x2f0>
 80068ce:	4b7d      	ldr	r3, [pc, #500]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d2:	4a7c      	ldr	r2, [pc, #496]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	6713      	str	r3, [r2, #112]	; 0x70
 80068da:	e01c      	b.n	8006916 <HAL_RCC_OscConfig+0x32a>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	2b05      	cmp	r3, #5
 80068e2:	d10c      	bne.n	80068fe <HAL_RCC_OscConfig+0x312>
 80068e4:	4b77      	ldr	r3, [pc, #476]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 80068e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e8:	4a76      	ldr	r2, [pc, #472]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 80068ea:	f043 0304 	orr.w	r3, r3, #4
 80068ee:	6713      	str	r3, [r2, #112]	; 0x70
 80068f0:	4b74      	ldr	r3, [pc, #464]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f4:	4a73      	ldr	r2, [pc, #460]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 80068f6:	f043 0301 	orr.w	r3, r3, #1
 80068fa:	6713      	str	r3, [r2, #112]	; 0x70
 80068fc:	e00b      	b.n	8006916 <HAL_RCC_OscConfig+0x32a>
 80068fe:	4b71      	ldr	r3, [pc, #452]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 8006900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006902:	4a70      	ldr	r2, [pc, #448]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	6713      	str	r3, [r2, #112]	; 0x70
 800690a:	4b6e      	ldr	r3, [pc, #440]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	4a6d      	ldr	r2, [pc, #436]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 8006910:	f023 0304 	bic.w	r3, r3, #4
 8006914:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d015      	beq.n	800694a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691e:	f7fd f8b5 	bl	8003a8c <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006924:	e00a      	b.n	800693c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006926:	f7fd f8b1 	bl	8003a8c <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	f241 3288 	movw	r2, #5000	; 0x1388
 8006934:	4293      	cmp	r3, r2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e0bc      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800693c:	4b61      	ldr	r3, [pc, #388]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 800693e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0ee      	beq.n	8006926 <HAL_RCC_OscConfig+0x33a>
 8006948:	e014      	b.n	8006974 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800694a:	f7fd f89f 	bl	8003a8c <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006950:	e00a      	b.n	8006968 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006952:	f7fd f89b 	bl	8003a8c <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006960:	4293      	cmp	r3, r2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e0a6      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006968:	4b56      	ldr	r3, [pc, #344]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 800696a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1ee      	bne.n	8006952 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d105      	bne.n	8006986 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800697a:	4b52      	ldr	r3, [pc, #328]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	4a51      	ldr	r2, [pc, #324]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 8006980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006984:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8092 	beq.w	8006ab4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006990:	4b4c      	ldr	r3, [pc, #304]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f003 030c 	and.w	r3, r3, #12
 8006998:	2b08      	cmp	r3, #8
 800699a:	d05c      	beq.n	8006a56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d141      	bne.n	8006a28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a4:	4b48      	ldr	r3, [pc, #288]	; (8006ac8 <HAL_RCC_OscConfig+0x4dc>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069aa:	f7fd f86f 	bl	8003a8c <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b0:	e008      	b.n	80069c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069b2:	f7fd f86b 	bl	8003a8c <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e078      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069c4:	4b3f      	ldr	r3, [pc, #252]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1f0      	bne.n	80069b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	69da      	ldr	r2, [r3, #28]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	019b      	lsls	r3, r3, #6
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e6:	085b      	lsrs	r3, r3, #1
 80069e8:	3b01      	subs	r3, #1
 80069ea:	041b      	lsls	r3, r3, #16
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	061b      	lsls	r3, r3, #24
 80069f4:	4933      	ldr	r1, [pc, #204]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069fa:	4b33      	ldr	r3, [pc, #204]	; (8006ac8 <HAL_RCC_OscConfig+0x4dc>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a00:	f7fd f844 	bl	8003a8c <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a08:	f7fd f840 	bl	8003a8c <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e04d      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a1a:	4b2a      	ldr	r3, [pc, #168]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0x41c>
 8006a26:	e045      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a28:	4b27      	ldr	r3, [pc, #156]	; (8006ac8 <HAL_RCC_OscConfig+0x4dc>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2e:	f7fd f82d 	bl	8003a8c <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a36:	f7fd f829 	bl	8003a8c <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e036      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a48:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1f0      	bne.n	8006a36 <HAL_RCC_OscConfig+0x44a>
 8006a54:	e02e      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e029      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a62:	4b18      	ldr	r3, [pc, #96]	; (8006ac4 <HAL_RCC_OscConfig+0x4d8>)
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d11c      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d115      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d10d      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d106      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d001      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40007000 	.word	0x40007000
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	42470060 	.word	0x42470060

08006acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0cc      	b.n	8006c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae0:	4b68      	ldr	r3, [pc, #416]	; (8006c84 <HAL_RCC_ClockConfig+0x1b8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d90c      	bls.n	8006b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aee:	4b65      	ldr	r3, [pc, #404]	; (8006c84 <HAL_RCC_ClockConfig+0x1b8>)
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af6:	4b63      	ldr	r3, [pc, #396]	; (8006c84 <HAL_RCC_ClockConfig+0x1b8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d001      	beq.n	8006b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e0b8      	b.n	8006c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d020      	beq.n	8006b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b20:	4b59      	ldr	r3, [pc, #356]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	4a58      	ldr	r2, [pc, #352]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0308 	and.w	r3, r3, #8
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d005      	beq.n	8006b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b38:	4b53      	ldr	r3, [pc, #332]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	4a52      	ldr	r2, [pc, #328]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b44:	4b50      	ldr	r3, [pc, #320]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	494d      	ldr	r1, [pc, #308]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d044      	beq.n	8006bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d107      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6a:	4b47      	ldr	r3, [pc, #284]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d119      	bne.n	8006baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e07f      	b.n	8006c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d003      	beq.n	8006b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d107      	bne.n	8006b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b8a:	4b3f      	ldr	r3, [pc, #252]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e06f      	b.n	8006c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b9a:	4b3b      	ldr	r3, [pc, #236]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e067      	b.n	8006c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006baa:	4b37      	ldr	r3, [pc, #220]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f023 0203 	bic.w	r2, r3, #3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	4934      	ldr	r1, [pc, #208]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bbc:	f7fc ff66 	bl	8003a8c <HAL_GetTick>
 8006bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc2:	e00a      	b.n	8006bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bc4:	f7fc ff62 	bl	8003a8c <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e04f      	b.n	8006c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bda:	4b2b      	ldr	r3, [pc, #172]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 020c 	and.w	r2, r3, #12
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d1eb      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bec:	4b25      	ldr	r3, [pc, #148]	; (8006c84 <HAL_RCC_ClockConfig+0x1b8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d20c      	bcs.n	8006c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bfa:	4b22      	ldr	r3, [pc, #136]	; (8006c84 <HAL_RCC_ClockConfig+0x1b8>)
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c02:	4b20      	ldr	r3, [pc, #128]	; (8006c84 <HAL_RCC_ClockConfig+0x1b8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d001      	beq.n	8006c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e032      	b.n	8006c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c20:	4b19      	ldr	r3, [pc, #100]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	4916      	ldr	r1, [pc, #88]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0308 	and.w	r3, r3, #8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c3e:	4b12      	ldr	r3, [pc, #72]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	490e      	ldr	r1, [pc, #56]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c52:	f000 f821 	bl	8006c98 <HAL_RCC_GetSysClockFreq>
 8006c56:	4602      	mov	r2, r0
 8006c58:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	091b      	lsrs	r3, r3, #4
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	490a      	ldr	r1, [pc, #40]	; (8006c8c <HAL_RCC_ClockConfig+0x1c0>)
 8006c64:	5ccb      	ldrb	r3, [r1, r3]
 8006c66:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6a:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fc fec6 	bl	8003a04 <HAL_InitTick>

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	40023c00 	.word	0x40023c00
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	080096e8 	.word	0x080096e8
 8006c90:	200001b8 	.word	0x200001b8
 8006c94:	200001bc 	.word	0x200001bc

08006c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	607b      	str	r3, [r7, #4]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cb0:	4b67      	ldr	r3, [pc, #412]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f003 030c 	and.w	r3, r3, #12
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d00d      	beq.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	f200 80bd 	bhi.w	8006e3c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_RCC_GetSysClockFreq+0x34>
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d003      	beq.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006cca:	e0b7      	b.n	8006e3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ccc:	4b61      	ldr	r3, [pc, #388]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006cce:	60bb      	str	r3, [r7, #8]
       break;
 8006cd0:	e0b7      	b.n	8006e42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cd2:	4b60      	ldr	r3, [pc, #384]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006cd4:	60bb      	str	r3, [r7, #8]
      break;
 8006cd6:	e0b4      	b.n	8006e42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cd8:	4b5d      	ldr	r3, [pc, #372]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ce0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ce2:	4b5b      	ldr	r3, [pc, #364]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d04d      	beq.n	8006d8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cee:	4b58      	ldr	r3, [pc, #352]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	099b      	lsrs	r3, r3, #6
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006cfe:	f04f 0100 	mov.w	r1, #0
 8006d02:	ea02 0800 	and.w	r8, r2, r0
 8006d06:	ea03 0901 	and.w	r9, r3, r1
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	014b      	lsls	r3, r1, #5
 8006d18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d1c:	0142      	lsls	r2, r0, #5
 8006d1e:	4610      	mov	r0, r2
 8006d20:	4619      	mov	r1, r3
 8006d22:	ebb0 0008 	subs.w	r0, r0, r8
 8006d26:	eb61 0109 	sbc.w	r1, r1, r9
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	f04f 0300 	mov.w	r3, #0
 8006d32:	018b      	lsls	r3, r1, #6
 8006d34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d38:	0182      	lsls	r2, r0, #6
 8006d3a:	1a12      	subs	r2, r2, r0
 8006d3c:	eb63 0301 	sbc.w	r3, r3, r1
 8006d40:	f04f 0000 	mov.w	r0, #0
 8006d44:	f04f 0100 	mov.w	r1, #0
 8006d48:	00d9      	lsls	r1, r3, #3
 8006d4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d4e:	00d0      	lsls	r0, r2, #3
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	eb12 0208 	adds.w	r2, r2, r8
 8006d58:	eb43 0309 	adc.w	r3, r3, r9
 8006d5c:	f04f 0000 	mov.w	r0, #0
 8006d60:	f04f 0100 	mov.w	r1, #0
 8006d64:	0299      	lsls	r1, r3, #10
 8006d66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006d6a:	0290      	lsls	r0, r2, #10
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4610      	mov	r0, r2
 8006d72:	4619      	mov	r1, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	461a      	mov	r2, r3
 8006d78:	f04f 0300 	mov.w	r3, #0
 8006d7c:	f7f9 ff3c 	bl	8000bf8 <__aeabi_uldivmod>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4613      	mov	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e04a      	b.n	8006e20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d8a:	4b31      	ldr	r3, [pc, #196]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	099b      	lsrs	r3, r3, #6
 8006d90:	461a      	mov	r2, r3
 8006d92:	f04f 0300 	mov.w	r3, #0
 8006d96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d9a:	f04f 0100 	mov.w	r1, #0
 8006d9e:	ea02 0400 	and.w	r4, r2, r0
 8006da2:	ea03 0501 	and.w	r5, r3, r1
 8006da6:	4620      	mov	r0, r4
 8006da8:	4629      	mov	r1, r5
 8006daa:	f04f 0200 	mov.w	r2, #0
 8006dae:	f04f 0300 	mov.w	r3, #0
 8006db2:	014b      	lsls	r3, r1, #5
 8006db4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006db8:	0142      	lsls	r2, r0, #5
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	1b00      	subs	r0, r0, r4
 8006dc0:	eb61 0105 	sbc.w	r1, r1, r5
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	018b      	lsls	r3, r1, #6
 8006dce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006dd2:	0182      	lsls	r2, r0, #6
 8006dd4:	1a12      	subs	r2, r2, r0
 8006dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8006dda:	f04f 0000 	mov.w	r0, #0
 8006dde:	f04f 0100 	mov.w	r1, #0
 8006de2:	00d9      	lsls	r1, r3, #3
 8006de4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006de8:	00d0      	lsls	r0, r2, #3
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	1912      	adds	r2, r2, r4
 8006df0:	eb45 0303 	adc.w	r3, r5, r3
 8006df4:	f04f 0000 	mov.w	r0, #0
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	0299      	lsls	r1, r3, #10
 8006dfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006e02:	0290      	lsls	r0, r2, #10
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	f7f9 fef0 	bl	8000bf8 <__aeabi_uldivmod>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	0c1b      	lsrs	r3, r3, #16
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e38:	60bb      	str	r3, [r7, #8]
      break;
 8006e3a:	e002      	b.n	8006e42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e3c:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e3e:	60bb      	str	r3, [r7, #8]
      break;
 8006e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e42:	68bb      	ldr	r3, [r7, #8]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e4e:	bf00      	nop
 8006e50:	40023800 	.word	0x40023800
 8006e54:	00f42400 	.word	0x00f42400

08006e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e5c:	4b03      	ldr	r3, [pc, #12]	; (8006e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	200001b8 	.word	0x200001b8

08006e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e74:	f7ff fff0 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	0a9b      	lsrs	r3, r3, #10
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	4903      	ldr	r1, [pc, #12]	; (8006e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e86:	5ccb      	ldrb	r3, [r1, r3]
 8006e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40023800 	.word	0x40023800
 8006e94:	080096f8 	.word	0x080096f8

08006e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e9c:	f7ff ffdc 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	0b5b      	lsrs	r3, r3, #13
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	4903      	ldr	r1, [pc, #12]	; (8006ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eae:	5ccb      	ldrb	r3, [r1, r3]
 8006eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	080096f8 	.word	0x080096f8

08006ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e056      	b.n	8006f80 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7fc f84d 	bl	8002f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f08:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	431a      	orrs	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	ea42 0103 	orr.w	r1, r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	0c1b      	lsrs	r3, r3, #16
 8006f50:	f003 0104 	and.w	r1, r3, #4
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69da      	ldr	r2, [r3, #28]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af02      	add	r7, sp, #8
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fa4:	d112      	bne.n	8006fcc <HAL_SPI_Receive+0x44>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10e      	bne.n	8006fcc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fb6:	88fa      	ldrh	r2, [r7, #6]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f8e9 	bl	800719a <HAL_SPI_TransmitReceive>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	e0e2      	b.n	8007192 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_SPI_Receive+0x52>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e0db      	b.n	8007192 <HAL_SPI_Receive+0x20a>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fe2:	f7fc fd53 	bl	8003a8c <HAL_GetTick>
 8006fe6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d002      	beq.n	8006ffa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ff8:	e0c2      	b.n	8007180 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <HAL_SPI_Receive+0x7e>
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d102      	bne.n	800700c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	75fb      	strb	r3, [r7, #23]
    goto error;
 800700a:	e0b9      	b.n	8007180 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2204      	movs	r2, #4
 8007010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	88fa      	ldrh	r2, [r7, #6]
 8007024:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	88fa      	ldrh	r2, [r7, #6]
 800702a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007052:	d107      	bne.n	8007064 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007062:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d007      	beq.n	8007082 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007080:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d162      	bne.n	8007150 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800708a:	e02e      	b.n	80070ea <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b01      	cmp	r3, #1
 8007098:	d115      	bne.n	80070c6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f103 020c 	add.w	r2, r3, #12
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	b2d2      	uxtb	r2, r2
 80070aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070c4:	e011      	b.n	80070ea <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070c6:	f7fc fce1 	bl	8003a8c <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d803      	bhi.n	80070de <HAL_SPI_Receive+0x156>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070dc:	d102      	bne.n	80070e4 <HAL_SPI_Receive+0x15c>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070e8:	e04a      	b.n	8007180 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1cb      	bne.n	800708c <HAL_SPI_Receive+0x104>
 80070f4:	e031      	b.n	800715a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b01      	cmp	r3, #1
 8007102:	d113      	bne.n	800712c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710e:	b292      	uxth	r2, r2
 8007110:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	1c9a      	adds	r2, r3, #2
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	87da      	strh	r2, [r3, #62]	; 0x3e
 800712a:	e011      	b.n	8007150 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800712c:	f7fc fcae 	bl	8003a8c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d803      	bhi.n	8007144 <HAL_SPI_Receive+0x1bc>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007142:	d102      	bne.n	800714a <HAL_SPI_Receive+0x1c2>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d102      	bne.n	8007150 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800714e:	e017      	b.n	8007180 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1cd      	bne.n	80070f6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 fa27 	bl	80075b2 <SPI_EndRxTransaction>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	75fb      	strb	r3, [r7, #23]
 800717c:	e000      	b.n	8007180 <HAL_SPI_Receive+0x1f8>
  }

error :
 800717e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b08c      	sub	sp, #48	; 0x30
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
 80071a6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071a8:	2301      	movs	r3, #1
 80071aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_SPI_TransmitReceive+0x26>
 80071bc:	2302      	movs	r3, #2
 80071be:	e18a      	b.n	80074d6 <HAL_SPI_TransmitReceive+0x33c>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071c8:	f7fc fc60 	bl	8003a8c <HAL_GetTick>
 80071cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80071de:	887b      	ldrh	r3, [r7, #2]
 80071e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d00f      	beq.n	800720a <HAL_SPI_TransmitReceive+0x70>
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071f0:	d107      	bne.n	8007202 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d103      	bne.n	8007202 <HAL_SPI_TransmitReceive+0x68>
 80071fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d003      	beq.n	800720a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007202:	2302      	movs	r3, #2
 8007204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007208:	e15b      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <HAL_SPI_TransmitReceive+0x82>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_SPI_TransmitReceive+0x82>
 8007216:	887b      	ldrh	r3, [r7, #2]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d103      	bne.n	8007224 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007222:	e14e      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b04      	cmp	r3, #4
 800722e:	d003      	beq.n	8007238 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2205      	movs	r2, #5
 8007234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	887a      	ldrh	r2, [r7, #2]
 8007248:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	887a      	ldrh	r2, [r7, #2]
 800724e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	887a      	ldrh	r2, [r7, #2]
 800725a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	887a      	ldrh	r2, [r7, #2]
 8007260:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007278:	2b40      	cmp	r3, #64	; 0x40
 800727a:	d007      	beq.n	800728c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800728a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007294:	d178      	bne.n	8007388 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_SPI_TransmitReceive+0x10a>
 800729e:	8b7b      	ldrh	r3, [r7, #26]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d166      	bne.n	8007372 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	881a      	ldrh	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	1c9a      	adds	r2, r3, #2
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072be:	b29b      	uxth	r3, r3
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c8:	e053      	b.n	8007372 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d11b      	bne.n	8007310 <HAL_SPI_TransmitReceive+0x176>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072dc:	b29b      	uxth	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d016      	beq.n	8007310 <HAL_SPI_TransmitReceive+0x176>
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d113      	bne.n	8007310 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ec:	881a      	ldrh	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	1c9a      	adds	r2, r3, #2
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b01      	cmp	r3, #1
 800731c:	d119      	bne.n	8007352 <HAL_SPI_TransmitReceive+0x1b8>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007322:	b29b      	uxth	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d014      	beq.n	8007352 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	b292      	uxth	r2, r2
 8007334:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733a:	1c9a      	adds	r2, r3, #2
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007344:	b29b      	uxth	r3, r3
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800734e:	2301      	movs	r3, #1
 8007350:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007352:	f7fc fb9b 	bl	8003a8c <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800735e:	429a      	cmp	r2, r3
 8007360:	d807      	bhi.n	8007372 <HAL_SPI_TransmitReceive+0x1d8>
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007368:	d003      	beq.n	8007372 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007370:	e0a7      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1a6      	bne.n	80072ca <HAL_SPI_TransmitReceive+0x130>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007380:	b29b      	uxth	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1a1      	bne.n	80072ca <HAL_SPI_TransmitReceive+0x130>
 8007386:	e07c      	b.n	8007482 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <HAL_SPI_TransmitReceive+0x1fc>
 8007390:	8b7b      	ldrh	r3, [r7, #26]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d16b      	bne.n	800746e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	330c      	adds	r3, #12
 80073a0:	7812      	ldrb	r2, [r2, #0]
 80073a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073bc:	e057      	b.n	800746e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d11c      	bne.n	8007406 <HAL_SPI_TransmitReceive+0x26c>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d017      	beq.n	8007406 <HAL_SPI_TransmitReceive+0x26c>
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d114      	bne.n	8007406 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	330c      	adds	r3, #12
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	d119      	bne.n	8007448 <HAL_SPI_TransmitReceive+0x2ae>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d014      	beq.n	8007448 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743a:	b29b      	uxth	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007444:	2301      	movs	r3, #1
 8007446:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007448:	f7fc fb20 	bl	8003a8c <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007454:	429a      	cmp	r2, r3
 8007456:	d803      	bhi.n	8007460 <HAL_SPI_TransmitReceive+0x2c6>
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800745e:	d102      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x2cc>
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	2b00      	cmp	r3, #0
 8007464:	d103      	bne.n	800746e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800746c:	e029      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1a2      	bne.n	80073be <HAL_SPI_TransmitReceive+0x224>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d19d      	bne.n	80073be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007484:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 f8f8 	bl	800767c <SPI_EndRxTxTransaction>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d006      	beq.n	80074a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2220      	movs	r2, #32
 800749c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800749e:	e010      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10b      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	e000      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80074c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3730      	adds	r7, #48	; 0x30
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	603b      	str	r3, [r7, #0]
 80074ea:	4613      	mov	r3, r2
 80074ec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ee:	e04c      	b.n	800758a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074f6:	d048      	beq.n	800758a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80074f8:	f7fc fac8 	bl	8003a8c <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d902      	bls.n	800750e <SPI_WaitFlagStateUntilTimeout+0x30>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d13d      	bne.n	800758a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800751c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007526:	d111      	bne.n	800754c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007530:	d004      	beq.n	800753c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800753a:	d107      	bne.n	800754c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800754a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007554:	d10f      	bne.n	8007576 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e00f      	b.n	80075aa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4013      	ands	r3, r2
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	429a      	cmp	r2, r3
 8007598:	bf0c      	ite	eq
 800759a:	2301      	moveq	r3, #1
 800759c:	2300      	movne	r3, #0
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	461a      	mov	r2, r3
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d1a3      	bne.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af02      	add	r7, sp, #8
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c6:	d111      	bne.n	80075ec <SPI_EndRxTransaction+0x3a>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d0:	d004      	beq.n	80075dc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075da:	d107      	bne.n	80075ec <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ea:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075f4:	d12a      	bne.n	800764c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075fe:	d012      	beq.n	8007626 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2200      	movs	r2, #0
 8007608:	2180      	movs	r1, #128	; 0x80
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff ff67 	bl	80074de <SPI_WaitFlagStateUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d02d      	beq.n	8007672 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761a:	f043 0220 	orr.w	r2, r3, #32
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e026      	b.n	8007674 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2200      	movs	r2, #0
 800762e:	2101      	movs	r1, #1
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff ff54 	bl	80074de <SPI_WaitFlagStateUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01a      	beq.n	8007672 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e013      	b.n	8007674 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	2101      	movs	r1, #1
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff ff41 	bl	80074de <SPI_WaitFlagStateUntilTimeout>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d007      	beq.n	8007672 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007666:	f043 0220 	orr.w	r2, r3, #32
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e000      	b.n	8007674 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007688:	4b1b      	ldr	r3, [pc, #108]	; (80076f8 <SPI_EndRxTxTransaction+0x7c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1b      	ldr	r2, [pc, #108]	; (80076fc <SPI_EndRxTxTransaction+0x80>)
 800768e:	fba2 2303 	umull	r2, r3, r2, r3
 8007692:	0d5b      	lsrs	r3, r3, #21
 8007694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007698:	fb02 f303 	mul.w	r3, r2, r3
 800769c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076a6:	d112      	bne.n	80076ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2200      	movs	r2, #0
 80076b0:	2180      	movs	r1, #128	; 0x80
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f7ff ff13 	bl	80074de <SPI_WaitFlagStateUntilTimeout>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d016      	beq.n	80076ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	f043 0220 	orr.w	r2, r3, #32
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e00f      	b.n	80076ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e4:	2b80      	cmp	r3, #128	; 0x80
 80076e6:	d0f2      	beq.n	80076ce <SPI_EndRxTxTransaction+0x52>
 80076e8:	e000      	b.n	80076ec <SPI_EndRxTxTransaction+0x70>
        break;
 80076ea:	bf00      	nop
  }

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	200001b8 	.word	0x200001b8
 80076fc:	165e9f81 	.word	0x165e9f81

08007700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e01d      	b.n	800774e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fb ff34 	bl	8003594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3304      	adds	r3, #4
 800773c:	4619      	mov	r1, r3
 800773e:	4610      	mov	r0, r2
 8007740:	f000 fa2a 	bl	8007b98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2202      	movs	r2, #2
 8007762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b06      	cmp	r3, #6
 8007776:	d007      	beq.n	8007788 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e01d      	b.n	80077ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f815 	bl	80077f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3304      	adds	r3, #4
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f000 f9db 	bl	8007b98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2201      	movs	r2, #1
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fca6 	bl	800816c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a15      	ldr	r2, [pc, #84]	; (800787c <HAL_TIM_PWM_Start+0x74>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d004      	beq.n	8007834 <HAL_TIM_PWM_Start+0x2c>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a14      	ldr	r2, [pc, #80]	; (8007880 <HAL_TIM_PWM_Start+0x78>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d101      	bne.n	8007838 <HAL_TIM_PWM_Start+0x30>
 8007834:	2301      	movs	r3, #1
 8007836:	e000      	b.n	800783a <HAL_TIM_PWM_Start+0x32>
 8007838:	2300      	movs	r3, #0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800784c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b06      	cmp	r3, #6
 800785e:	d007      	beq.n	8007870 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0201 	orr.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40010000 	.word	0x40010000
 8007880:	40010400 	.word	0x40010400

08007884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800789a:	2302      	movs	r3, #2
 800789c:	e0b4      	b.n	8007a08 <HAL_TIM_PWM_ConfigChannel+0x184>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2202      	movs	r2, #2
 80078aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b0c      	cmp	r3, #12
 80078b2:	f200 809f 	bhi.w	80079f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80078b6:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	080078f1 	.word	0x080078f1
 80078c0:	080079f5 	.word	0x080079f5
 80078c4:	080079f5 	.word	0x080079f5
 80078c8:	080079f5 	.word	0x080079f5
 80078cc:	08007931 	.word	0x08007931
 80078d0:	080079f5 	.word	0x080079f5
 80078d4:	080079f5 	.word	0x080079f5
 80078d8:	080079f5 	.word	0x080079f5
 80078dc:	08007973 	.word	0x08007973
 80078e0:	080079f5 	.word	0x080079f5
 80078e4:	080079f5 	.word	0x080079f5
 80078e8:	080079f5 	.word	0x080079f5
 80078ec:	080079b3 	.word	0x080079b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 f9ee 	bl	8007cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0208 	orr.w	r2, r2, #8
 800790a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	699a      	ldr	r2, [r3, #24]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0204 	bic.w	r2, r2, #4
 800791a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6999      	ldr	r1, [r3, #24]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	619a      	str	r2, [r3, #24]
      break;
 800792e:	e062      	b.n	80079f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68b9      	ldr	r1, [r7, #8]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fa3e 	bl	8007db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800794a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800795a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6999      	ldr	r1, [r3, #24]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	021a      	lsls	r2, r3, #8
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	619a      	str	r2, [r3, #24]
      break;
 8007970:	e041      	b.n	80079f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68b9      	ldr	r1, [r7, #8]
 8007978:	4618      	mov	r0, r3
 800797a:	f000 fa93 	bl	8007ea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69da      	ldr	r2, [r3, #28]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f042 0208 	orr.w	r2, r2, #8
 800798c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69da      	ldr	r2, [r3, #28]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0204 	bic.w	r2, r2, #4
 800799c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69d9      	ldr	r1, [r3, #28]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	691a      	ldr	r2, [r3, #16]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	61da      	str	r2, [r3, #28]
      break;
 80079b0:	e021      	b.n	80079f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fae7 	bl	8007f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69d9      	ldr	r1, [r3, #28]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	021a      	lsls	r2, r3, #8
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	61da      	str	r2, [r3, #28]
      break;
 80079f2:	e000      	b.n	80079f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80079f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d101      	bne.n	8007a28 <HAL_TIM_ConfigClockSource+0x18>
 8007a24:	2302      	movs	r3, #2
 8007a26:	e0b3      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x180>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a60:	d03e      	beq.n	8007ae0 <HAL_TIM_ConfigClockSource+0xd0>
 8007a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a66:	f200 8087 	bhi.w	8007b78 <HAL_TIM_ConfigClockSource+0x168>
 8007a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6e:	f000 8085 	beq.w	8007b7c <HAL_TIM_ConfigClockSource+0x16c>
 8007a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a76:	d87f      	bhi.n	8007b78 <HAL_TIM_ConfigClockSource+0x168>
 8007a78:	2b70      	cmp	r3, #112	; 0x70
 8007a7a:	d01a      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0xa2>
 8007a7c:	2b70      	cmp	r3, #112	; 0x70
 8007a7e:	d87b      	bhi.n	8007b78 <HAL_TIM_ConfigClockSource+0x168>
 8007a80:	2b60      	cmp	r3, #96	; 0x60
 8007a82:	d050      	beq.n	8007b26 <HAL_TIM_ConfigClockSource+0x116>
 8007a84:	2b60      	cmp	r3, #96	; 0x60
 8007a86:	d877      	bhi.n	8007b78 <HAL_TIM_ConfigClockSource+0x168>
 8007a88:	2b50      	cmp	r3, #80	; 0x50
 8007a8a:	d03c      	beq.n	8007b06 <HAL_TIM_ConfigClockSource+0xf6>
 8007a8c:	2b50      	cmp	r3, #80	; 0x50
 8007a8e:	d873      	bhi.n	8007b78 <HAL_TIM_ConfigClockSource+0x168>
 8007a90:	2b40      	cmp	r3, #64	; 0x40
 8007a92:	d058      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x136>
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	d86f      	bhi.n	8007b78 <HAL_TIM_ConfigClockSource+0x168>
 8007a98:	2b30      	cmp	r3, #48	; 0x30
 8007a9a:	d064      	beq.n	8007b66 <HAL_TIM_ConfigClockSource+0x156>
 8007a9c:	2b30      	cmp	r3, #48	; 0x30
 8007a9e:	d86b      	bhi.n	8007b78 <HAL_TIM_ConfigClockSource+0x168>
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	d060      	beq.n	8007b66 <HAL_TIM_ConfigClockSource+0x156>
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	d867      	bhi.n	8007b78 <HAL_TIM_ConfigClockSource+0x168>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d05c      	beq.n	8007b66 <HAL_TIM_ConfigClockSource+0x156>
 8007aac:	2b10      	cmp	r3, #16
 8007aae:	d05a      	beq.n	8007b66 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007ab0:	e062      	b.n	8007b78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	6899      	ldr	r1, [r3, #8]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f000 fb33 	bl	800812c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ad4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	609a      	str	r2, [r3, #8]
      break;
 8007ade:	e04e      	b.n	8007b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	6899      	ldr	r1, [r3, #8]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f000 fb1c 	bl	800812c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b02:	609a      	str	r2, [r3, #8]
      break;
 8007b04:	e03b      	b.n	8007b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	6859      	ldr	r1, [r3, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	461a      	mov	r2, r3
 8007b14:	f000 fa90 	bl	8008038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2150      	movs	r1, #80	; 0x50
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fae9 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 8007b24:	e02b      	b.n	8007b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	6859      	ldr	r1, [r3, #4]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	461a      	mov	r2, r3
 8007b34:	f000 faaf 	bl	8008096 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2160      	movs	r1, #96	; 0x60
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fad9 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 8007b44:	e01b      	b.n	8007b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	6859      	ldr	r1, [r3, #4]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f000 fa70 	bl	8008038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2140      	movs	r1, #64	; 0x40
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fac9 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 8007b64:	e00b      	b.n	8007b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4610      	mov	r0, r2
 8007b72:	f000 fac0 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 8007b76:	e002      	b.n	8007b7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b78:	bf00      	nop
 8007b7a:	e000      	b.n	8007b7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a40      	ldr	r2, [pc, #256]	; (8007cac <TIM_Base_SetConfig+0x114>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d013      	beq.n	8007bd8 <TIM_Base_SetConfig+0x40>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb6:	d00f      	beq.n	8007bd8 <TIM_Base_SetConfig+0x40>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a3d      	ldr	r2, [pc, #244]	; (8007cb0 <TIM_Base_SetConfig+0x118>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00b      	beq.n	8007bd8 <TIM_Base_SetConfig+0x40>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a3c      	ldr	r2, [pc, #240]	; (8007cb4 <TIM_Base_SetConfig+0x11c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d007      	beq.n	8007bd8 <TIM_Base_SetConfig+0x40>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a3b      	ldr	r2, [pc, #236]	; (8007cb8 <TIM_Base_SetConfig+0x120>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d003      	beq.n	8007bd8 <TIM_Base_SetConfig+0x40>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a3a      	ldr	r2, [pc, #232]	; (8007cbc <TIM_Base_SetConfig+0x124>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d108      	bne.n	8007bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a2f      	ldr	r2, [pc, #188]	; (8007cac <TIM_Base_SetConfig+0x114>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d02b      	beq.n	8007c4a <TIM_Base_SetConfig+0xb2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf8:	d027      	beq.n	8007c4a <TIM_Base_SetConfig+0xb2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a2c      	ldr	r2, [pc, #176]	; (8007cb0 <TIM_Base_SetConfig+0x118>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d023      	beq.n	8007c4a <TIM_Base_SetConfig+0xb2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a2b      	ldr	r2, [pc, #172]	; (8007cb4 <TIM_Base_SetConfig+0x11c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d01f      	beq.n	8007c4a <TIM_Base_SetConfig+0xb2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a2a      	ldr	r2, [pc, #168]	; (8007cb8 <TIM_Base_SetConfig+0x120>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d01b      	beq.n	8007c4a <TIM_Base_SetConfig+0xb2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a29      	ldr	r2, [pc, #164]	; (8007cbc <TIM_Base_SetConfig+0x124>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d017      	beq.n	8007c4a <TIM_Base_SetConfig+0xb2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a28      	ldr	r2, [pc, #160]	; (8007cc0 <TIM_Base_SetConfig+0x128>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d013      	beq.n	8007c4a <TIM_Base_SetConfig+0xb2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a27      	ldr	r2, [pc, #156]	; (8007cc4 <TIM_Base_SetConfig+0x12c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00f      	beq.n	8007c4a <TIM_Base_SetConfig+0xb2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a26      	ldr	r2, [pc, #152]	; (8007cc8 <TIM_Base_SetConfig+0x130>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00b      	beq.n	8007c4a <TIM_Base_SetConfig+0xb2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a25      	ldr	r2, [pc, #148]	; (8007ccc <TIM_Base_SetConfig+0x134>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d007      	beq.n	8007c4a <TIM_Base_SetConfig+0xb2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a24      	ldr	r2, [pc, #144]	; (8007cd0 <TIM_Base_SetConfig+0x138>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d003      	beq.n	8007c4a <TIM_Base_SetConfig+0xb2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a23      	ldr	r2, [pc, #140]	; (8007cd4 <TIM_Base_SetConfig+0x13c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d108      	bne.n	8007c5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a0a      	ldr	r2, [pc, #40]	; (8007cac <TIM_Base_SetConfig+0x114>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d003      	beq.n	8007c90 <TIM_Base_SetConfig+0xf8>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a0c      	ldr	r2, [pc, #48]	; (8007cbc <TIM_Base_SetConfig+0x124>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d103      	bne.n	8007c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	691a      	ldr	r2, [r3, #16]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	615a      	str	r2, [r3, #20]
}
 8007c9e:	bf00      	nop
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40010000 	.word	0x40010000
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	40000c00 	.word	0x40000c00
 8007cbc:	40010400 	.word	0x40010400
 8007cc0:	40014000 	.word	0x40014000
 8007cc4:	40014400 	.word	0x40014400
 8007cc8:	40014800 	.word	0x40014800
 8007ccc:	40001800 	.word	0x40001800
 8007cd0:	40001c00 	.word	0x40001c00
 8007cd4:	40002000 	.word	0x40002000

08007cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f023 0201 	bic.w	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0303 	bic.w	r3, r3, #3
 8007d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f023 0302 	bic.w	r3, r3, #2
 8007d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a20      	ldr	r2, [pc, #128]	; (8007db0 <TIM_OC1_SetConfig+0xd8>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d003      	beq.n	8007d3c <TIM_OC1_SetConfig+0x64>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a1f      	ldr	r2, [pc, #124]	; (8007db4 <TIM_OC1_SetConfig+0xdc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d10c      	bne.n	8007d56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f023 0308 	bic.w	r3, r3, #8
 8007d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f023 0304 	bic.w	r3, r3, #4
 8007d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a15      	ldr	r2, [pc, #84]	; (8007db0 <TIM_OC1_SetConfig+0xd8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d003      	beq.n	8007d66 <TIM_OC1_SetConfig+0x8e>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a14      	ldr	r2, [pc, #80]	; (8007db4 <TIM_OC1_SetConfig+0xdc>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d111      	bne.n	8007d8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	621a      	str	r2, [r3, #32]
}
 8007da4:	bf00      	nop
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	40010000 	.word	0x40010000
 8007db4:	40010400 	.word	0x40010400

08007db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	f023 0210 	bic.w	r2, r3, #16
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f023 0320 	bic.w	r3, r3, #32
 8007e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	011b      	lsls	r3, r3, #4
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a22      	ldr	r2, [pc, #136]	; (8007e9c <TIM_OC2_SetConfig+0xe4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d003      	beq.n	8007e20 <TIM_OC2_SetConfig+0x68>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a21      	ldr	r2, [pc, #132]	; (8007ea0 <TIM_OC2_SetConfig+0xe8>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d10d      	bne.n	8007e3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	011b      	lsls	r3, r3, #4
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a17      	ldr	r2, [pc, #92]	; (8007e9c <TIM_OC2_SetConfig+0xe4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d003      	beq.n	8007e4c <TIM_OC2_SetConfig+0x94>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a16      	ldr	r2, [pc, #88]	; (8007ea0 <TIM_OC2_SetConfig+0xe8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d113      	bne.n	8007e74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	621a      	str	r2, [r3, #32]
}
 8007e8e:	bf00      	nop
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	40010400 	.word	0x40010400

08007ea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a21      	ldr	r2, [pc, #132]	; (8007f84 <TIM_OC3_SetConfig+0xe0>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d003      	beq.n	8007f0a <TIM_OC3_SetConfig+0x66>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a20      	ldr	r2, [pc, #128]	; (8007f88 <TIM_OC3_SetConfig+0xe4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d10d      	bne.n	8007f26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	021b      	lsls	r3, r3, #8
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a16      	ldr	r2, [pc, #88]	; (8007f84 <TIM_OC3_SetConfig+0xe0>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d003      	beq.n	8007f36 <TIM_OC3_SetConfig+0x92>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <TIM_OC3_SetConfig+0xe4>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d113      	bne.n	8007f5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	011b      	lsls	r3, r3, #4
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	621a      	str	r2, [r3, #32]
}
 8007f78:	bf00      	nop
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40010400 	.word	0x40010400

08007f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	021b      	lsls	r3, r3, #8
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	031b      	lsls	r3, r3, #12
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a12      	ldr	r2, [pc, #72]	; (8008030 <TIM_OC4_SetConfig+0xa4>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_OC4_SetConfig+0x68>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a11      	ldr	r2, [pc, #68]	; (8008034 <TIM_OC4_SetConfig+0xa8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d109      	bne.n	8008008 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	019b      	lsls	r3, r3, #6
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	621a      	str	r2, [r3, #32]
}
 8008022:	bf00      	nop
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	40010000 	.word	0x40010000
 8008034:	40010400 	.word	0x40010400

08008038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	f023 0201 	bic.w	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f023 030a 	bic.w	r3, r3, #10
 8008074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4313      	orrs	r3, r2
 800807c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	621a      	str	r2, [r3, #32]
}
 800808a:	bf00      	nop
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008096:	b480      	push	{r7}
 8008098:	b087      	sub	sp, #28
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	f023 0210 	bic.w	r2, r3, #16
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	031b      	lsls	r3, r3, #12
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	4313      	orrs	r3, r2
 80080dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	f043 0307 	orr.w	r3, r3, #7
 8008118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	609a      	str	r2, [r3, #8]
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800812c:	b480      	push	{r7}
 800812e:	b087      	sub	sp, #28
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
 8008138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	021a      	lsls	r2, r3, #8
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	431a      	orrs	r2, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	4313      	orrs	r3, r2
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	609a      	str	r2, [r3, #8]
}
 8008160:	bf00      	nop
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f003 031f 	and.w	r3, r3, #31
 800817e:	2201      	movs	r2, #1
 8008180:	fa02 f303 	lsl.w	r3, r2, r3
 8008184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a1a      	ldr	r2, [r3, #32]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	43db      	mvns	r3, r3
 800818e:	401a      	ands	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a1a      	ldr	r2, [r3, #32]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 031f 	and.w	r3, r3, #31
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	fa01 f303 	lsl.w	r3, r1, r3
 80081a4:	431a      	orrs	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
	...

080081b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e05a      	b.n	8008286 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a21      	ldr	r2, [pc, #132]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d022      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821c:	d01d      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a1d      	ldr	r2, [pc, #116]	; (8008298 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d018      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a1b      	ldr	r2, [pc, #108]	; (800829c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d013      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a1a      	ldr	r2, [pc, #104]	; (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d00e      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a18      	ldr	r2, [pc, #96]	; (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d009      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a17      	ldr	r2, [pc, #92]	; (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d004      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a15      	ldr	r2, [pc, #84]	; (80082ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d10c      	bne.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	4313      	orrs	r3, r2
 800826a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	40010000 	.word	0x40010000
 8008298:	40000400 	.word	0x40000400
 800829c:	40000800 	.word	0x40000800
 80082a0:	40000c00 	.word	0x40000c00
 80082a4:	40010400 	.word	0x40010400
 80082a8:	40014000 	.word	0x40014000
 80082ac:	40001800 	.word	0x40001800

080082b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e03d      	b.n	8008348 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4313      	orrs	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	4313      	orrs	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	4313      	orrs	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e03f      	b.n	80083e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d106      	bne.n	8008380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7fb fa46 	bl	800380c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2224      	movs	r2, #36	; 0x24
 8008384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fa5f 	bl	800885c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	691a      	ldr	r2, [r3, #16]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	695a      	ldr	r2, [r3, #20]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b088      	sub	sp, #32
 80083f2:	af02      	add	r7, sp, #8
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	60b9      	str	r1, [r7, #8]
 80083f8:	603b      	str	r3, [r7, #0]
 80083fa:	4613      	mov	r3, r2
 80083fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b20      	cmp	r3, #32
 800840c:	f040 8083 	bne.w	8008516 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <HAL_UART_Transmit+0x2e>
 8008416:	88fb      	ldrh	r3, [r7, #6]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e07b      	b.n	8008518 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008426:	2b01      	cmp	r3, #1
 8008428:	d101      	bne.n	800842e <HAL_UART_Transmit+0x40>
 800842a:	2302      	movs	r3, #2
 800842c:	e074      	b.n	8008518 <HAL_UART_Transmit+0x12a>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2221      	movs	r2, #33	; 0x21
 8008440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008444:	f7fb fb22 	bl	8003a8c <HAL_GetTick>
 8008448:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	88fa      	ldrh	r2, [r7, #6]
 800844e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	88fa      	ldrh	r2, [r7, #6]
 8008454:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800845e:	e042      	b.n	80084e6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008476:	d122      	bne.n	80084be <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2200      	movs	r2, #0
 8008480:	2180      	movs	r1, #128	; 0x80
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 f96c 	bl	8008760 <UART_WaitOnFlagUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e042      	b.n	8008518 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d103      	bne.n	80084b6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	3302      	adds	r3, #2
 80084b2:	60bb      	str	r3, [r7, #8]
 80084b4:	e017      	b.n	80084e6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	3301      	adds	r3, #1
 80084ba:	60bb      	str	r3, [r7, #8]
 80084bc:	e013      	b.n	80084e6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2200      	movs	r2, #0
 80084c6:	2180      	movs	r1, #128	; 0x80
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f949 	bl	8008760 <UART_WaitOnFlagUntilTimeout>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e01f      	b.n	8008518 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	60ba      	str	r2, [r7, #8]
 80084de:	781a      	ldrb	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1b7      	bne.n	8008460 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2200      	movs	r2, #0
 80084f8:	2140      	movs	r1, #64	; 0x40
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 f930 	bl	8008760 <UART_WaitOnFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e006      	b.n	8008518 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2220      	movs	r2, #32
 800850e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	e000      	b.n	8008518 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008516:	2302      	movs	r3, #2
  }
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	4613      	mov	r3, r2
 800852c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b20      	cmp	r3, #32
 8008538:	d166      	bne.n	8008608 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <HAL_UART_Receive_DMA+0x26>
 8008540:	88fb      	ldrh	r3, [r7, #6]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e05f      	b.n	800860a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008550:	2b01      	cmp	r3, #1
 8008552:	d101      	bne.n	8008558 <HAL_UART_Receive_DMA+0x38>
 8008554:	2302      	movs	r3, #2
 8008556:	e058      	b.n	800860a <HAL_UART_Receive_DMA+0xea>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	88fa      	ldrh	r2, [r7, #6]
 800856a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2222      	movs	r2, #34	; 0x22
 8008576:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857e:	4a25      	ldr	r2, [pc, #148]	; (8008614 <HAL_UART_Receive_DMA+0xf4>)
 8008580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008586:	4a24      	ldr	r2, [pc, #144]	; (8008618 <HAL_UART_Receive_DMA+0xf8>)
 8008588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858e:	4a23      	ldr	r2, [pc, #140]	; (800861c <HAL_UART_Receive_DMA+0xfc>)
 8008590:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008596:	2200      	movs	r2, #0
 8008598:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800859a:	f107 0308 	add.w	r3, r7, #8
 800859e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3304      	adds	r3, #4
 80085aa:	4619      	mov	r1, r3
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	88fb      	ldrh	r3, [r7, #6]
 80085b2:	f7fc fad9 	bl	8004b68 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80085b6:	2300      	movs	r3, #0
 80085b8:	613b      	str	r3, [r7, #16]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085e2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695a      	ldr	r2, [r3, #20]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 0201 	orr.w	r2, r2, #1
 80085f2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	695a      	ldr	r2, [r3, #20]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008602:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	e000      	b.n	800860a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008608:	2302      	movs	r3, #2
  }
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	08008649 	.word	0x08008649
 8008618:	080086b1 	.word	0x080086b1
 800861c:	080086cd 	.word	0x080086cd

08008620 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008660:	2b00      	cmp	r3, #0
 8008662:	d11e      	bne.n	80086a2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008678:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	695a      	ldr	r2, [r3, #20]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f022 0201 	bic.w	r2, r2, #1
 8008688:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	695a      	ldr	r2, [r3, #20]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008698:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2220      	movs	r2, #32
 800869e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f7f9 fed8 	bl	8002458 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086a8:	bf00      	nop
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086bc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f7ff ffae 	bl	8008620 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086c4:	bf00      	nop
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e8:	2b80      	cmp	r3, #128	; 0x80
 80086ea:	bf0c      	ite	eq
 80086ec:	2301      	moveq	r3, #1
 80086ee:	2300      	movne	r3, #0
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b21      	cmp	r3, #33	; 0x21
 80086fe:	d108      	bne.n	8008712 <UART_DMAError+0x46>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2200      	movs	r2, #0
 800870a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800870c:	68b8      	ldr	r0, [r7, #8]
 800870e:	f000 f871 	bl	80087f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871c:	2b40      	cmp	r3, #64	; 0x40
 800871e:	bf0c      	ite	eq
 8008720:	2301      	moveq	r3, #1
 8008722:	2300      	movne	r3, #0
 8008724:	b2db      	uxtb	r3, r3
 8008726:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b22      	cmp	r3, #34	; 0x22
 8008732:	d108      	bne.n	8008746 <UART_DMAError+0x7a>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2200      	movs	r2, #0
 800873e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008740:	68b8      	ldr	r0, [r7, #8]
 8008742:	f000 f86d 	bl	8008820 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874a:	f043 0210 	orr.w	r2, r3, #16
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008752:	68b8      	ldr	r0, [r7, #8]
 8008754:	f7ff ff6e 	bl	8008634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	4613      	mov	r3, r2
 800876e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008770:	e02c      	b.n	80087cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008778:	d028      	beq.n	80087cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <UART_WaitOnFlagUntilTimeout+0x30>
 8008780:	f7fb f984 	bl	8003a8c <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	429a      	cmp	r2, r3
 800878e:	d21d      	bcs.n	80087cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68da      	ldr	r2, [r3, #12]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800879e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	695a      	ldr	r2, [r3, #20]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0201 	bic.w	r2, r2, #1
 80087ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e00f      	b.n	80087ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4013      	ands	r3, r2
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	429a      	cmp	r2, r3
 80087da:	bf0c      	ite	eq
 80087dc:	2301      	moveq	r3, #1
 80087de:	2300      	movne	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	461a      	mov	r2, r3
 80087e4:	79fb      	ldrb	r3, [r7, #7]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d0c3      	beq.n	8008772 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800880a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2220      	movs	r2, #32
 8008810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008836:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	695a      	ldr	r2, [r3, #20]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0201 	bic.w	r2, r2, #1
 8008846:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800885c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008860:	b0bd      	sub	sp, #244	; 0xf4
 8008862:	af00      	add	r7, sp, #0
 8008864:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008878:	68d9      	ldr	r1, [r3, #12]
 800887a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	ea40 0301 	orr.w	r3, r0, r1
 8008884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	431a      	orrs	r2, r3
 8008894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	431a      	orrs	r2, r3
 800889c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80088a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80088b4:	f021 010c 	bic.w	r1, r1, #12
 80088b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088c2:	430b      	orrs	r3, r1
 80088c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80088d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d6:	6999      	ldr	r1, [r3, #24]
 80088d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	ea40 0301 	orr.w	r3, r0, r1
 80088e2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ee:	f040 81a5 	bne.w	8008c3c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	4bcd      	ldr	r3, [pc, #820]	; (8008c30 <UART_SetConfig+0x3d4>)
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d006      	beq.n	800890c <UART_SetConfig+0xb0>
 80088fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	4bcb      	ldr	r3, [pc, #812]	; (8008c34 <UART_SetConfig+0x3d8>)
 8008906:	429a      	cmp	r2, r3
 8008908:	f040 80cb 	bne.w	8008aa2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800890c:	f7fe fac4 	bl	8006e98 <HAL_RCC_GetPCLK2Freq>
 8008910:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008914:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008918:	461c      	mov	r4, r3
 800891a:	f04f 0500 	mov.w	r5, #0
 800891e:	4622      	mov	r2, r4
 8008920:	462b      	mov	r3, r5
 8008922:	1891      	adds	r1, r2, r2
 8008924:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008928:	415b      	adcs	r3, r3
 800892a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800892e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008932:	1912      	adds	r2, r2, r4
 8008934:	eb45 0303 	adc.w	r3, r5, r3
 8008938:	f04f 0000 	mov.w	r0, #0
 800893c:	f04f 0100 	mov.w	r1, #0
 8008940:	00d9      	lsls	r1, r3, #3
 8008942:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008946:	00d0      	lsls	r0, r2, #3
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	1911      	adds	r1, r2, r4
 800894e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008952:	416b      	adcs	r3, r5
 8008954:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	461a      	mov	r2, r3
 8008960:	f04f 0300 	mov.w	r3, #0
 8008964:	1891      	adds	r1, r2, r2
 8008966:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800896a:	415b      	adcs	r3, r3
 800896c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008970:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008974:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008978:	f7f8 f93e 	bl	8000bf8 <__aeabi_uldivmod>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	4bad      	ldr	r3, [pc, #692]	; (8008c38 <UART_SetConfig+0x3dc>)
 8008982:	fba3 2302 	umull	r2, r3, r3, r2
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	011e      	lsls	r6, r3, #4
 800898a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800898e:	461c      	mov	r4, r3
 8008990:	f04f 0500 	mov.w	r5, #0
 8008994:	4622      	mov	r2, r4
 8008996:	462b      	mov	r3, r5
 8008998:	1891      	adds	r1, r2, r2
 800899a:	67b9      	str	r1, [r7, #120]	; 0x78
 800899c:	415b      	adcs	r3, r3
 800899e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089a0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80089a4:	1912      	adds	r2, r2, r4
 80089a6:	eb45 0303 	adc.w	r3, r5, r3
 80089aa:	f04f 0000 	mov.w	r0, #0
 80089ae:	f04f 0100 	mov.w	r1, #0
 80089b2:	00d9      	lsls	r1, r3, #3
 80089b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089b8:	00d0      	lsls	r0, r2, #3
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	1911      	adds	r1, r2, r4
 80089c0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80089c4:	416b      	adcs	r3, r5
 80089c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80089ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	461a      	mov	r2, r3
 80089d2:	f04f 0300 	mov.w	r3, #0
 80089d6:	1891      	adds	r1, r2, r2
 80089d8:	6739      	str	r1, [r7, #112]	; 0x70
 80089da:	415b      	adcs	r3, r3
 80089dc:	677b      	str	r3, [r7, #116]	; 0x74
 80089de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80089e2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80089e6:	f7f8 f907 	bl	8000bf8 <__aeabi_uldivmod>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4b92      	ldr	r3, [pc, #584]	; (8008c38 <UART_SetConfig+0x3dc>)
 80089f0:	fba3 1302 	umull	r1, r3, r3, r2
 80089f4:	095b      	lsrs	r3, r3, #5
 80089f6:	2164      	movs	r1, #100	; 0x64
 80089f8:	fb01 f303 	mul.w	r3, r1, r3
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	3332      	adds	r3, #50	; 0x32
 8008a02:	4a8d      	ldr	r2, [pc, #564]	; (8008c38 <UART_SetConfig+0x3dc>)
 8008a04:	fba2 2303 	umull	r2, r3, r2, r3
 8008a08:	095b      	lsrs	r3, r3, #5
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a10:	441e      	add	r6, r3
 8008a12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a16:	4618      	mov	r0, r3
 8008a18:	f04f 0100 	mov.w	r1, #0
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	1894      	adds	r4, r2, r2
 8008a22:	66bc      	str	r4, [r7, #104]	; 0x68
 8008a24:	415b      	adcs	r3, r3
 8008a26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a28:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008a2c:	1812      	adds	r2, r2, r0
 8008a2e:	eb41 0303 	adc.w	r3, r1, r3
 8008a32:	f04f 0400 	mov.w	r4, #0
 8008a36:	f04f 0500 	mov.w	r5, #0
 8008a3a:	00dd      	lsls	r5, r3, #3
 8008a3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a40:	00d4      	lsls	r4, r2, #3
 8008a42:	4622      	mov	r2, r4
 8008a44:	462b      	mov	r3, r5
 8008a46:	1814      	adds	r4, r2, r0
 8008a48:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008a4c:	414b      	adcs	r3, r1
 8008a4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f04f 0300 	mov.w	r3, #0
 8008a5e:	1891      	adds	r1, r2, r2
 8008a60:	6639      	str	r1, [r7, #96]	; 0x60
 8008a62:	415b      	adcs	r3, r3
 8008a64:	667b      	str	r3, [r7, #100]	; 0x64
 8008a66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008a6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008a6e:	f7f8 f8c3 	bl	8000bf8 <__aeabi_uldivmod>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	4b70      	ldr	r3, [pc, #448]	; (8008c38 <UART_SetConfig+0x3dc>)
 8008a78:	fba3 1302 	umull	r1, r3, r3, r2
 8008a7c:	095b      	lsrs	r3, r3, #5
 8008a7e:	2164      	movs	r1, #100	; 0x64
 8008a80:	fb01 f303 	mul.w	r3, r1, r3
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	00db      	lsls	r3, r3, #3
 8008a88:	3332      	adds	r3, #50	; 0x32
 8008a8a:	4a6b      	ldr	r2, [pc, #428]	; (8008c38 <UART_SetConfig+0x3dc>)
 8008a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a90:	095b      	lsrs	r3, r3, #5
 8008a92:	f003 0207 	and.w	r2, r3, #7
 8008a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4432      	add	r2, r6
 8008a9e:	609a      	str	r2, [r3, #8]
 8008aa0:	e26d      	b.n	8008f7e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008aa2:	f7fe f9e5 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 8008aa6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aae:	461c      	mov	r4, r3
 8008ab0:	f04f 0500 	mov.w	r5, #0
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	462b      	mov	r3, r5
 8008ab8:	1891      	adds	r1, r2, r2
 8008aba:	65b9      	str	r1, [r7, #88]	; 0x58
 8008abc:	415b      	adcs	r3, r3
 8008abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ac0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ac4:	1912      	adds	r2, r2, r4
 8008ac6:	eb45 0303 	adc.w	r3, r5, r3
 8008aca:	f04f 0000 	mov.w	r0, #0
 8008ace:	f04f 0100 	mov.w	r1, #0
 8008ad2:	00d9      	lsls	r1, r3, #3
 8008ad4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ad8:	00d0      	lsls	r0, r2, #3
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	1911      	adds	r1, r2, r4
 8008ae0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008ae4:	416b      	adcs	r3, r5
 8008ae6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	461a      	mov	r2, r3
 8008af2:	f04f 0300 	mov.w	r3, #0
 8008af6:	1891      	adds	r1, r2, r2
 8008af8:	6539      	str	r1, [r7, #80]	; 0x50
 8008afa:	415b      	adcs	r3, r3
 8008afc:	657b      	str	r3, [r7, #84]	; 0x54
 8008afe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b02:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008b06:	f7f8 f877 	bl	8000bf8 <__aeabi_uldivmod>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4b4a      	ldr	r3, [pc, #296]	; (8008c38 <UART_SetConfig+0x3dc>)
 8008b10:	fba3 2302 	umull	r2, r3, r3, r2
 8008b14:	095b      	lsrs	r3, r3, #5
 8008b16:	011e      	lsls	r6, r3, #4
 8008b18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b1c:	461c      	mov	r4, r3
 8008b1e:	f04f 0500 	mov.w	r5, #0
 8008b22:	4622      	mov	r2, r4
 8008b24:	462b      	mov	r3, r5
 8008b26:	1891      	adds	r1, r2, r2
 8008b28:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b2a:	415b      	adcs	r3, r3
 8008b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b32:	1912      	adds	r2, r2, r4
 8008b34:	eb45 0303 	adc.w	r3, r5, r3
 8008b38:	f04f 0000 	mov.w	r0, #0
 8008b3c:	f04f 0100 	mov.w	r1, #0
 8008b40:	00d9      	lsls	r1, r3, #3
 8008b42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b46:	00d0      	lsls	r0, r2, #3
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	1911      	adds	r1, r2, r4
 8008b4e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008b52:	416b      	adcs	r3, r5
 8008b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f04f 0300 	mov.w	r3, #0
 8008b64:	1891      	adds	r1, r2, r2
 8008b66:	6439      	str	r1, [r7, #64]	; 0x40
 8008b68:	415b      	adcs	r3, r3
 8008b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b70:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008b74:	f7f8 f840 	bl	8000bf8 <__aeabi_uldivmod>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4b2e      	ldr	r3, [pc, #184]	; (8008c38 <UART_SetConfig+0x3dc>)
 8008b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8008b82:	095b      	lsrs	r3, r3, #5
 8008b84:	2164      	movs	r1, #100	; 0x64
 8008b86:	fb01 f303 	mul.w	r3, r1, r3
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	3332      	adds	r3, #50	; 0x32
 8008b90:	4a29      	ldr	r2, [pc, #164]	; (8008c38 <UART_SetConfig+0x3dc>)
 8008b92:	fba2 2303 	umull	r2, r3, r2, r3
 8008b96:	095b      	lsrs	r3, r3, #5
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b9e:	441e      	add	r6, r3
 8008ba0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f04f 0100 	mov.w	r1, #0
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	1894      	adds	r4, r2, r2
 8008bb0:	63bc      	str	r4, [r7, #56]	; 0x38
 8008bb2:	415b      	adcs	r3, r3
 8008bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bb6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bba:	1812      	adds	r2, r2, r0
 8008bbc:	eb41 0303 	adc.w	r3, r1, r3
 8008bc0:	f04f 0400 	mov.w	r4, #0
 8008bc4:	f04f 0500 	mov.w	r5, #0
 8008bc8:	00dd      	lsls	r5, r3, #3
 8008bca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008bce:	00d4      	lsls	r4, r2, #3
 8008bd0:	4622      	mov	r2, r4
 8008bd2:	462b      	mov	r3, r5
 8008bd4:	1814      	adds	r4, r2, r0
 8008bd6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8008bda:	414b      	adcs	r3, r1
 8008bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	461a      	mov	r2, r3
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	1891      	adds	r1, r2, r2
 8008bee:	6339      	str	r1, [r7, #48]	; 0x30
 8008bf0:	415b      	adcs	r3, r3
 8008bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008bf8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008bfc:	f7f7 fffc 	bl	8000bf8 <__aeabi_uldivmod>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4b0c      	ldr	r3, [pc, #48]	; (8008c38 <UART_SetConfig+0x3dc>)
 8008c06:	fba3 1302 	umull	r1, r3, r3, r2
 8008c0a:	095b      	lsrs	r3, r3, #5
 8008c0c:	2164      	movs	r1, #100	; 0x64
 8008c0e:	fb01 f303 	mul.w	r3, r1, r3
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	00db      	lsls	r3, r3, #3
 8008c16:	3332      	adds	r3, #50	; 0x32
 8008c18:	4a07      	ldr	r2, [pc, #28]	; (8008c38 <UART_SetConfig+0x3dc>)
 8008c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c1e:	095b      	lsrs	r3, r3, #5
 8008c20:	f003 0207 	and.w	r2, r3, #7
 8008c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4432      	add	r2, r6
 8008c2c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008c2e:	e1a6      	b.n	8008f7e <UART_SetConfig+0x722>
 8008c30:	40011000 	.word	0x40011000
 8008c34:	40011400 	.word	0x40011400
 8008c38:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	4bd1      	ldr	r3, [pc, #836]	; (8008f88 <UART_SetConfig+0x72c>)
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d006      	beq.n	8008c56 <UART_SetConfig+0x3fa>
 8008c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	4bcf      	ldr	r3, [pc, #828]	; (8008f8c <UART_SetConfig+0x730>)
 8008c50:	429a      	cmp	r2, r3
 8008c52:	f040 80ca 	bne.w	8008dea <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c56:	f7fe f91f 	bl	8006e98 <HAL_RCC_GetPCLK2Freq>
 8008c5a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c62:	461c      	mov	r4, r3
 8008c64:	f04f 0500 	mov.w	r5, #0
 8008c68:	4622      	mov	r2, r4
 8008c6a:	462b      	mov	r3, r5
 8008c6c:	1891      	adds	r1, r2, r2
 8008c6e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008c70:	415b      	adcs	r3, r3
 8008c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c78:	1912      	adds	r2, r2, r4
 8008c7a:	eb45 0303 	adc.w	r3, r5, r3
 8008c7e:	f04f 0000 	mov.w	r0, #0
 8008c82:	f04f 0100 	mov.w	r1, #0
 8008c86:	00d9      	lsls	r1, r3, #3
 8008c88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c8c:	00d0      	lsls	r0, r2, #3
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	eb12 0a04 	adds.w	sl, r2, r4
 8008c96:	eb43 0b05 	adc.w	fp, r3, r5
 8008c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f04f 0100 	mov.w	r1, #0
 8008ca6:	f04f 0200 	mov.w	r2, #0
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	008b      	lsls	r3, r1, #2
 8008cb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008cb4:	0082      	lsls	r2, r0, #2
 8008cb6:	4650      	mov	r0, sl
 8008cb8:	4659      	mov	r1, fp
 8008cba:	f7f7 ff9d 	bl	8000bf8 <__aeabi_uldivmod>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4bb3      	ldr	r3, [pc, #716]	; (8008f90 <UART_SetConfig+0x734>)
 8008cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8008cc8:	095b      	lsrs	r3, r3, #5
 8008cca:	011e      	lsls	r6, r3, #4
 8008ccc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f04f 0100 	mov.w	r1, #0
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	1894      	adds	r4, r2, r2
 8008cdc:	623c      	str	r4, [r7, #32]
 8008cde:	415b      	adcs	r3, r3
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ce6:	1812      	adds	r2, r2, r0
 8008ce8:	eb41 0303 	adc.w	r3, r1, r3
 8008cec:	f04f 0400 	mov.w	r4, #0
 8008cf0:	f04f 0500 	mov.w	r5, #0
 8008cf4:	00dd      	lsls	r5, r3, #3
 8008cf6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008cfa:	00d4      	lsls	r4, r2, #3
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	462b      	mov	r3, r5
 8008d00:	1814      	adds	r4, r2, r0
 8008d02:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008d06:	414b      	adcs	r3, r1
 8008d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f04f 0100 	mov.w	r1, #0
 8008d18:	f04f 0200 	mov.w	r2, #0
 8008d1c:	f04f 0300 	mov.w	r3, #0
 8008d20:	008b      	lsls	r3, r1, #2
 8008d22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d26:	0082      	lsls	r2, r0, #2
 8008d28:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008d2c:	f7f7 ff64 	bl	8000bf8 <__aeabi_uldivmod>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4b96      	ldr	r3, [pc, #600]	; (8008f90 <UART_SetConfig+0x734>)
 8008d36:	fba3 1302 	umull	r1, r3, r3, r2
 8008d3a:	095b      	lsrs	r3, r3, #5
 8008d3c:	2164      	movs	r1, #100	; 0x64
 8008d3e:	fb01 f303 	mul.w	r3, r1, r3
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	011b      	lsls	r3, r3, #4
 8008d46:	3332      	adds	r3, #50	; 0x32
 8008d48:	4a91      	ldr	r2, [pc, #580]	; (8008f90 <UART_SetConfig+0x734>)
 8008d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4e:	095b      	lsrs	r3, r3, #5
 8008d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d54:	441e      	add	r6, r3
 8008d56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f04f 0100 	mov.w	r1, #0
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	1894      	adds	r4, r2, r2
 8008d66:	61bc      	str	r4, [r7, #24]
 8008d68:	415b      	adcs	r3, r3
 8008d6a:	61fb      	str	r3, [r7, #28]
 8008d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d70:	1812      	adds	r2, r2, r0
 8008d72:	eb41 0303 	adc.w	r3, r1, r3
 8008d76:	f04f 0400 	mov.w	r4, #0
 8008d7a:	f04f 0500 	mov.w	r5, #0
 8008d7e:	00dd      	lsls	r5, r3, #3
 8008d80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d84:	00d4      	lsls	r4, r2, #3
 8008d86:	4622      	mov	r2, r4
 8008d88:	462b      	mov	r3, r5
 8008d8a:	1814      	adds	r4, r2, r0
 8008d8c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008d90:	414b      	adcs	r3, r1
 8008d92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f04f 0100 	mov.w	r1, #0
 8008da2:	f04f 0200 	mov.w	r2, #0
 8008da6:	f04f 0300 	mov.w	r3, #0
 8008daa:	008b      	lsls	r3, r1, #2
 8008dac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008db0:	0082      	lsls	r2, r0, #2
 8008db2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008db6:	f7f7 ff1f 	bl	8000bf8 <__aeabi_uldivmod>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4b74      	ldr	r3, [pc, #464]	; (8008f90 <UART_SetConfig+0x734>)
 8008dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8008dc4:	095b      	lsrs	r3, r3, #5
 8008dc6:	2164      	movs	r1, #100	; 0x64
 8008dc8:	fb01 f303 	mul.w	r3, r1, r3
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	3332      	adds	r3, #50	; 0x32
 8008dd2:	4a6f      	ldr	r2, [pc, #444]	; (8008f90 <UART_SetConfig+0x734>)
 8008dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd8:	095b      	lsrs	r3, r3, #5
 8008dda:	f003 020f 	and.w	r2, r3, #15
 8008dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4432      	add	r2, r6
 8008de6:	609a      	str	r2, [r3, #8]
 8008de8:	e0c9      	b.n	8008f7e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dea:	f7fe f841 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 8008dee:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008df2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008df6:	461c      	mov	r4, r3
 8008df8:	f04f 0500 	mov.w	r5, #0
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	462b      	mov	r3, r5
 8008e00:	1891      	adds	r1, r2, r2
 8008e02:	6139      	str	r1, [r7, #16]
 8008e04:	415b      	adcs	r3, r3
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e0c:	1912      	adds	r2, r2, r4
 8008e0e:	eb45 0303 	adc.w	r3, r5, r3
 8008e12:	f04f 0000 	mov.w	r0, #0
 8008e16:	f04f 0100 	mov.w	r1, #0
 8008e1a:	00d9      	lsls	r1, r3, #3
 8008e1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e20:	00d0      	lsls	r0, r2, #3
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	eb12 0804 	adds.w	r8, r2, r4
 8008e2a:	eb43 0905 	adc.w	r9, r3, r5
 8008e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f04f 0100 	mov.w	r1, #0
 8008e3a:	f04f 0200 	mov.w	r2, #0
 8008e3e:	f04f 0300 	mov.w	r3, #0
 8008e42:	008b      	lsls	r3, r1, #2
 8008e44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e48:	0082      	lsls	r2, r0, #2
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	f7f7 fed3 	bl	8000bf8 <__aeabi_uldivmod>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4b4e      	ldr	r3, [pc, #312]	; (8008f90 <UART_SetConfig+0x734>)
 8008e58:	fba3 2302 	umull	r2, r3, r3, r2
 8008e5c:	095b      	lsrs	r3, r3, #5
 8008e5e:	011e      	lsls	r6, r3, #4
 8008e60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e64:	4618      	mov	r0, r3
 8008e66:	f04f 0100 	mov.w	r1, #0
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	1894      	adds	r4, r2, r2
 8008e70:	60bc      	str	r4, [r7, #8]
 8008e72:	415b      	adcs	r3, r3
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e7a:	1812      	adds	r2, r2, r0
 8008e7c:	eb41 0303 	adc.w	r3, r1, r3
 8008e80:	f04f 0400 	mov.w	r4, #0
 8008e84:	f04f 0500 	mov.w	r5, #0
 8008e88:	00dd      	lsls	r5, r3, #3
 8008e8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e8e:	00d4      	lsls	r4, r2, #3
 8008e90:	4622      	mov	r2, r4
 8008e92:	462b      	mov	r3, r5
 8008e94:	1814      	adds	r4, r2, r0
 8008e96:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008e9a:	414b      	adcs	r3, r1
 8008e9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f04f 0100 	mov.w	r1, #0
 8008eac:	f04f 0200 	mov.w	r2, #0
 8008eb0:	f04f 0300 	mov.w	r3, #0
 8008eb4:	008b      	lsls	r3, r1, #2
 8008eb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008eba:	0082      	lsls	r2, r0, #2
 8008ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ec0:	f7f7 fe9a 	bl	8000bf8 <__aeabi_uldivmod>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4b31      	ldr	r3, [pc, #196]	; (8008f90 <UART_SetConfig+0x734>)
 8008eca:	fba3 1302 	umull	r1, r3, r3, r2
 8008ece:	095b      	lsrs	r3, r3, #5
 8008ed0:	2164      	movs	r1, #100	; 0x64
 8008ed2:	fb01 f303 	mul.w	r3, r1, r3
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	011b      	lsls	r3, r3, #4
 8008eda:	3332      	adds	r3, #50	; 0x32
 8008edc:	4a2c      	ldr	r2, [pc, #176]	; (8008f90 <UART_SetConfig+0x734>)
 8008ede:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee2:	095b      	lsrs	r3, r3, #5
 8008ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ee8:	441e      	add	r6, r3
 8008eea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f04f 0100 	mov.w	r1, #0
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	1894      	adds	r4, r2, r2
 8008efa:	603c      	str	r4, [r7, #0]
 8008efc:	415b      	adcs	r3, r3
 8008efe:	607b      	str	r3, [r7, #4]
 8008f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f04:	1812      	adds	r2, r2, r0
 8008f06:	eb41 0303 	adc.w	r3, r1, r3
 8008f0a:	f04f 0400 	mov.w	r4, #0
 8008f0e:	f04f 0500 	mov.w	r5, #0
 8008f12:	00dd      	lsls	r5, r3, #3
 8008f14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f18:	00d4      	lsls	r4, r2, #3
 8008f1a:	4622      	mov	r2, r4
 8008f1c:	462b      	mov	r3, r5
 8008f1e:	1814      	adds	r4, r2, r0
 8008f20:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008f24:	414b      	adcs	r3, r1
 8008f26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f04f 0100 	mov.w	r1, #0
 8008f36:	f04f 0200 	mov.w	r2, #0
 8008f3a:	f04f 0300 	mov.w	r3, #0
 8008f3e:	008b      	lsls	r3, r1, #2
 8008f40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f44:	0082      	lsls	r2, r0, #2
 8008f46:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008f4a:	f7f7 fe55 	bl	8000bf8 <__aeabi_uldivmod>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4b0f      	ldr	r3, [pc, #60]	; (8008f90 <UART_SetConfig+0x734>)
 8008f54:	fba3 1302 	umull	r1, r3, r3, r2
 8008f58:	095b      	lsrs	r3, r3, #5
 8008f5a:	2164      	movs	r1, #100	; 0x64
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	3332      	adds	r3, #50	; 0x32
 8008f66:	4a0a      	ldr	r2, [pc, #40]	; (8008f90 <UART_SetConfig+0x734>)
 8008f68:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6c:	095b      	lsrs	r3, r3, #5
 8008f6e:	f003 020f 	and.w	r2, r3, #15
 8008f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4432      	add	r2, r6
 8008f7a:	609a      	str	r2, [r3, #8]
}
 8008f7c:	e7ff      	b.n	8008f7e <UART_SetConfig+0x722>
 8008f7e:	bf00      	nop
 8008f80:	37f4      	adds	r7, #244	; 0xf4
 8008f82:	46bd      	mov	sp, r7
 8008f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f88:	40011000 	.word	0x40011000
 8008f8c:	40011400 	.word	0x40011400
 8008f90:	51eb851f 	.word	0x51eb851f

08008f94 <__errno>:
 8008f94:	4b01      	ldr	r3, [pc, #4]	; (8008f9c <__errno+0x8>)
 8008f96:	6818      	ldr	r0, [r3, #0]
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	200001c4 	.word	0x200001c4

08008fa0 <__libc_init_array>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	4d0d      	ldr	r5, [pc, #52]	; (8008fd8 <__libc_init_array+0x38>)
 8008fa4:	4c0d      	ldr	r4, [pc, #52]	; (8008fdc <__libc_init_array+0x3c>)
 8008fa6:	1b64      	subs	r4, r4, r5
 8008fa8:	10a4      	asrs	r4, r4, #2
 8008faa:	2600      	movs	r6, #0
 8008fac:	42a6      	cmp	r6, r4
 8008fae:	d109      	bne.n	8008fc4 <__libc_init_array+0x24>
 8008fb0:	4d0b      	ldr	r5, [pc, #44]	; (8008fe0 <__libc_init_array+0x40>)
 8008fb2:	4c0c      	ldr	r4, [pc, #48]	; (8008fe4 <__libc_init_array+0x44>)
 8008fb4:	f000 fb7e 	bl	80096b4 <_init>
 8008fb8:	1b64      	subs	r4, r4, r5
 8008fba:	10a4      	asrs	r4, r4, #2
 8008fbc:	2600      	movs	r6, #0
 8008fbe:	42a6      	cmp	r6, r4
 8008fc0:	d105      	bne.n	8008fce <__libc_init_array+0x2e>
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc8:	4798      	blx	r3
 8008fca:	3601      	adds	r6, #1
 8008fcc:	e7ee      	b.n	8008fac <__libc_init_array+0xc>
 8008fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fd2:	4798      	blx	r3
 8008fd4:	3601      	adds	r6, #1
 8008fd6:	e7f2      	b.n	8008fbe <__libc_init_array+0x1e>
 8008fd8:	08009780 	.word	0x08009780
 8008fdc:	08009780 	.word	0x08009780
 8008fe0:	08009780 	.word	0x08009780
 8008fe4:	08009784 	.word	0x08009784

08008fe8 <memset>:
 8008fe8:	4402      	add	r2, r0
 8008fea:	4603      	mov	r3, r0
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d100      	bne.n	8008ff2 <memset+0xa>
 8008ff0:	4770      	bx	lr
 8008ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff6:	e7f9      	b.n	8008fec <memset+0x4>

08008ff8 <atan>:
 8008ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	ec55 4b10 	vmov	r4, r5, d0
 8009000:	4bc3      	ldr	r3, [pc, #780]	; (8009310 <atan+0x318>)
 8009002:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009006:	429e      	cmp	r6, r3
 8009008:	46ab      	mov	fp, r5
 800900a:	dd18      	ble.n	800903e <atan+0x46>
 800900c:	4bc1      	ldr	r3, [pc, #772]	; (8009314 <atan+0x31c>)
 800900e:	429e      	cmp	r6, r3
 8009010:	dc01      	bgt.n	8009016 <atan+0x1e>
 8009012:	d109      	bne.n	8009028 <atan+0x30>
 8009014:	b144      	cbz	r4, 8009028 <atan+0x30>
 8009016:	4622      	mov	r2, r4
 8009018:	462b      	mov	r3, r5
 800901a:	4620      	mov	r0, r4
 800901c:	4629      	mov	r1, r5
 800901e:	f7f7 f8ed 	bl	80001fc <__adddf3>
 8009022:	4604      	mov	r4, r0
 8009024:	460d      	mov	r5, r1
 8009026:	e006      	b.n	8009036 <atan+0x3e>
 8009028:	f1bb 0f00 	cmp.w	fp, #0
 800902c:	f300 8131 	bgt.w	8009292 <atan+0x29a>
 8009030:	a59b      	add	r5, pc, #620	; (adr r5, 80092a0 <atan+0x2a8>)
 8009032:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009036:	ec45 4b10 	vmov	d0, r4, r5
 800903a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903e:	4bb6      	ldr	r3, [pc, #728]	; (8009318 <atan+0x320>)
 8009040:	429e      	cmp	r6, r3
 8009042:	dc14      	bgt.n	800906e <atan+0x76>
 8009044:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009048:	429e      	cmp	r6, r3
 800904a:	dc0d      	bgt.n	8009068 <atan+0x70>
 800904c:	a396      	add	r3, pc, #600	; (adr r3, 80092a8 <atan+0x2b0>)
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	ee10 0a10 	vmov	r0, s0
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 f8d0 	bl	80001fc <__adddf3>
 800905c:	4baf      	ldr	r3, [pc, #700]	; (800931c <atan+0x324>)
 800905e:	2200      	movs	r2, #0
 8009060:	f7f7 fd12 	bl	8000a88 <__aeabi_dcmpgt>
 8009064:	2800      	cmp	r0, #0
 8009066:	d1e6      	bne.n	8009036 <atan+0x3e>
 8009068:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800906c:	e02b      	b.n	80090c6 <atan+0xce>
 800906e:	f000 f963 	bl	8009338 <fabs>
 8009072:	4bab      	ldr	r3, [pc, #684]	; (8009320 <atan+0x328>)
 8009074:	429e      	cmp	r6, r3
 8009076:	ec55 4b10 	vmov	r4, r5, d0
 800907a:	f300 80bf 	bgt.w	80091fc <atan+0x204>
 800907e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009082:	429e      	cmp	r6, r3
 8009084:	f300 80a0 	bgt.w	80091c8 <atan+0x1d0>
 8009088:	ee10 2a10 	vmov	r2, s0
 800908c:	ee10 0a10 	vmov	r0, s0
 8009090:	462b      	mov	r3, r5
 8009092:	4629      	mov	r1, r5
 8009094:	f7f7 f8b2 	bl	80001fc <__adddf3>
 8009098:	4ba0      	ldr	r3, [pc, #640]	; (800931c <atan+0x324>)
 800909a:	2200      	movs	r2, #0
 800909c:	f7f7 f8ac 	bl	80001f8 <__aeabi_dsub>
 80090a0:	2200      	movs	r2, #0
 80090a2:	4606      	mov	r6, r0
 80090a4:	460f      	mov	r7, r1
 80090a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090aa:	4620      	mov	r0, r4
 80090ac:	4629      	mov	r1, r5
 80090ae:	f7f7 f8a5 	bl	80001fc <__adddf3>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	4630      	mov	r0, r6
 80090b8:	4639      	mov	r1, r7
 80090ba:	f7f7 fb7f 	bl	80007bc <__aeabi_ddiv>
 80090be:	f04f 0a00 	mov.w	sl, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	460d      	mov	r5, r1
 80090c6:	4622      	mov	r2, r4
 80090c8:	462b      	mov	r3, r5
 80090ca:	4620      	mov	r0, r4
 80090cc:	4629      	mov	r1, r5
 80090ce:	f7f7 fa4b 	bl	8000568 <__aeabi_dmul>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4680      	mov	r8, r0
 80090d8:	4689      	mov	r9, r1
 80090da:	f7f7 fa45 	bl	8000568 <__aeabi_dmul>
 80090de:	a374      	add	r3, pc, #464	; (adr r3, 80092b0 <atan+0x2b8>)
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	4606      	mov	r6, r0
 80090e6:	460f      	mov	r7, r1
 80090e8:	f7f7 fa3e 	bl	8000568 <__aeabi_dmul>
 80090ec:	a372      	add	r3, pc, #456	; (adr r3, 80092b8 <atan+0x2c0>)
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	f7f7 f883 	bl	80001fc <__adddf3>
 80090f6:	4632      	mov	r2, r6
 80090f8:	463b      	mov	r3, r7
 80090fa:	f7f7 fa35 	bl	8000568 <__aeabi_dmul>
 80090fe:	a370      	add	r3, pc, #448	; (adr r3, 80092c0 <atan+0x2c8>)
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f7f7 f87a 	bl	80001fc <__adddf3>
 8009108:	4632      	mov	r2, r6
 800910a:	463b      	mov	r3, r7
 800910c:	f7f7 fa2c 	bl	8000568 <__aeabi_dmul>
 8009110:	a36d      	add	r3, pc, #436	; (adr r3, 80092c8 <atan+0x2d0>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 f871 	bl	80001fc <__adddf3>
 800911a:	4632      	mov	r2, r6
 800911c:	463b      	mov	r3, r7
 800911e:	f7f7 fa23 	bl	8000568 <__aeabi_dmul>
 8009122:	a36b      	add	r3, pc, #428	; (adr r3, 80092d0 <atan+0x2d8>)
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f7f7 f868 	bl	80001fc <__adddf3>
 800912c:	4632      	mov	r2, r6
 800912e:	463b      	mov	r3, r7
 8009130:	f7f7 fa1a 	bl	8000568 <__aeabi_dmul>
 8009134:	a368      	add	r3, pc, #416	; (adr r3, 80092d8 <atan+0x2e0>)
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f7f7 f85f 	bl	80001fc <__adddf3>
 800913e:	4642      	mov	r2, r8
 8009140:	464b      	mov	r3, r9
 8009142:	f7f7 fa11 	bl	8000568 <__aeabi_dmul>
 8009146:	a366      	add	r3, pc, #408	; (adr r3, 80092e0 <atan+0x2e8>)
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	4680      	mov	r8, r0
 800914e:	4689      	mov	r9, r1
 8009150:	4630      	mov	r0, r6
 8009152:	4639      	mov	r1, r7
 8009154:	f7f7 fa08 	bl	8000568 <__aeabi_dmul>
 8009158:	a363      	add	r3, pc, #396	; (adr r3, 80092e8 <atan+0x2f0>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7f7 f84b 	bl	80001f8 <__aeabi_dsub>
 8009162:	4632      	mov	r2, r6
 8009164:	463b      	mov	r3, r7
 8009166:	f7f7 f9ff 	bl	8000568 <__aeabi_dmul>
 800916a:	a361      	add	r3, pc, #388	; (adr r3, 80092f0 <atan+0x2f8>)
 800916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009170:	f7f7 f842 	bl	80001f8 <__aeabi_dsub>
 8009174:	4632      	mov	r2, r6
 8009176:	463b      	mov	r3, r7
 8009178:	f7f7 f9f6 	bl	8000568 <__aeabi_dmul>
 800917c:	a35e      	add	r3, pc, #376	; (adr r3, 80092f8 <atan+0x300>)
 800917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009182:	f7f7 f839 	bl	80001f8 <__aeabi_dsub>
 8009186:	4632      	mov	r2, r6
 8009188:	463b      	mov	r3, r7
 800918a:	f7f7 f9ed 	bl	8000568 <__aeabi_dmul>
 800918e:	a35c      	add	r3, pc, #368	; (adr r3, 8009300 <atan+0x308>)
 8009190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009194:	f7f7 f830 	bl	80001f8 <__aeabi_dsub>
 8009198:	4632      	mov	r2, r6
 800919a:	463b      	mov	r3, r7
 800919c:	f7f7 f9e4 	bl	8000568 <__aeabi_dmul>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 f828 	bl	80001fc <__adddf3>
 80091ac:	4622      	mov	r2, r4
 80091ae:	462b      	mov	r3, r5
 80091b0:	f7f7 f9da 	bl	8000568 <__aeabi_dmul>
 80091b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	d14b      	bne.n	8009256 <atan+0x25e>
 80091be:	4620      	mov	r0, r4
 80091c0:	4629      	mov	r1, r5
 80091c2:	f7f7 f819 	bl	80001f8 <__aeabi_dsub>
 80091c6:	e72c      	b.n	8009022 <atan+0x2a>
 80091c8:	ee10 0a10 	vmov	r0, s0
 80091cc:	4b53      	ldr	r3, [pc, #332]	; (800931c <atan+0x324>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	4629      	mov	r1, r5
 80091d2:	f7f7 f811 	bl	80001f8 <__aeabi_dsub>
 80091d6:	4b51      	ldr	r3, [pc, #324]	; (800931c <atan+0x324>)
 80091d8:	4606      	mov	r6, r0
 80091da:	460f      	mov	r7, r1
 80091dc:	2200      	movs	r2, #0
 80091de:	4620      	mov	r0, r4
 80091e0:	4629      	mov	r1, r5
 80091e2:	f7f7 f80b 	bl	80001fc <__adddf3>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4630      	mov	r0, r6
 80091ec:	4639      	mov	r1, r7
 80091ee:	f7f7 fae5 	bl	80007bc <__aeabi_ddiv>
 80091f2:	f04f 0a01 	mov.w	sl, #1
 80091f6:	4604      	mov	r4, r0
 80091f8:	460d      	mov	r5, r1
 80091fa:	e764      	b.n	80090c6 <atan+0xce>
 80091fc:	4b49      	ldr	r3, [pc, #292]	; (8009324 <atan+0x32c>)
 80091fe:	429e      	cmp	r6, r3
 8009200:	da1d      	bge.n	800923e <atan+0x246>
 8009202:	ee10 0a10 	vmov	r0, s0
 8009206:	4b48      	ldr	r3, [pc, #288]	; (8009328 <atan+0x330>)
 8009208:	2200      	movs	r2, #0
 800920a:	4629      	mov	r1, r5
 800920c:	f7f6 fff4 	bl	80001f8 <__aeabi_dsub>
 8009210:	4b45      	ldr	r3, [pc, #276]	; (8009328 <atan+0x330>)
 8009212:	4606      	mov	r6, r0
 8009214:	460f      	mov	r7, r1
 8009216:	2200      	movs	r2, #0
 8009218:	4620      	mov	r0, r4
 800921a:	4629      	mov	r1, r5
 800921c:	f7f7 f9a4 	bl	8000568 <__aeabi_dmul>
 8009220:	4b3e      	ldr	r3, [pc, #248]	; (800931c <atan+0x324>)
 8009222:	2200      	movs	r2, #0
 8009224:	f7f6 ffea 	bl	80001fc <__adddf3>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4630      	mov	r0, r6
 800922e:	4639      	mov	r1, r7
 8009230:	f7f7 fac4 	bl	80007bc <__aeabi_ddiv>
 8009234:	f04f 0a02 	mov.w	sl, #2
 8009238:	4604      	mov	r4, r0
 800923a:	460d      	mov	r5, r1
 800923c:	e743      	b.n	80090c6 <atan+0xce>
 800923e:	462b      	mov	r3, r5
 8009240:	ee10 2a10 	vmov	r2, s0
 8009244:	4939      	ldr	r1, [pc, #228]	; (800932c <atan+0x334>)
 8009246:	2000      	movs	r0, #0
 8009248:	f7f7 fab8 	bl	80007bc <__aeabi_ddiv>
 800924c:	f04f 0a03 	mov.w	sl, #3
 8009250:	4604      	mov	r4, r0
 8009252:	460d      	mov	r5, r1
 8009254:	e737      	b.n	80090c6 <atan+0xce>
 8009256:	4b36      	ldr	r3, [pc, #216]	; (8009330 <atan+0x338>)
 8009258:	4e36      	ldr	r6, [pc, #216]	; (8009334 <atan+0x33c>)
 800925a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800925e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009262:	e9da 2300 	ldrd	r2, r3, [sl]
 8009266:	f7f6 ffc7 	bl	80001f8 <__aeabi_dsub>
 800926a:	4622      	mov	r2, r4
 800926c:	462b      	mov	r3, r5
 800926e:	f7f6 ffc3 	bl	80001f8 <__aeabi_dsub>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	e9d6 0100 	ldrd	r0, r1, [r6]
 800927a:	f7f6 ffbd 	bl	80001f8 <__aeabi_dsub>
 800927e:	f1bb 0f00 	cmp.w	fp, #0
 8009282:	4604      	mov	r4, r0
 8009284:	460d      	mov	r5, r1
 8009286:	f6bf aed6 	bge.w	8009036 <atan+0x3e>
 800928a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800928e:	461d      	mov	r5, r3
 8009290:	e6d1      	b.n	8009036 <atan+0x3e>
 8009292:	a51d      	add	r5, pc, #116	; (adr r5, 8009308 <atan+0x310>)
 8009294:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009298:	e6cd      	b.n	8009036 <atan+0x3e>
 800929a:	bf00      	nop
 800929c:	f3af 8000 	nop.w
 80092a0:	54442d18 	.word	0x54442d18
 80092a4:	bff921fb 	.word	0xbff921fb
 80092a8:	8800759c 	.word	0x8800759c
 80092ac:	7e37e43c 	.word	0x7e37e43c
 80092b0:	e322da11 	.word	0xe322da11
 80092b4:	3f90ad3a 	.word	0x3f90ad3a
 80092b8:	24760deb 	.word	0x24760deb
 80092bc:	3fa97b4b 	.word	0x3fa97b4b
 80092c0:	a0d03d51 	.word	0xa0d03d51
 80092c4:	3fb10d66 	.word	0x3fb10d66
 80092c8:	c54c206e 	.word	0xc54c206e
 80092cc:	3fb745cd 	.word	0x3fb745cd
 80092d0:	920083ff 	.word	0x920083ff
 80092d4:	3fc24924 	.word	0x3fc24924
 80092d8:	5555550d 	.word	0x5555550d
 80092dc:	3fd55555 	.word	0x3fd55555
 80092e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80092e4:	bfa2b444 	.word	0xbfa2b444
 80092e8:	52defd9a 	.word	0x52defd9a
 80092ec:	3fadde2d 	.word	0x3fadde2d
 80092f0:	af749a6d 	.word	0xaf749a6d
 80092f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80092f8:	fe231671 	.word	0xfe231671
 80092fc:	3fbc71c6 	.word	0x3fbc71c6
 8009300:	9998ebc4 	.word	0x9998ebc4
 8009304:	3fc99999 	.word	0x3fc99999
 8009308:	54442d18 	.word	0x54442d18
 800930c:	3ff921fb 	.word	0x3ff921fb
 8009310:	440fffff 	.word	0x440fffff
 8009314:	7ff00000 	.word	0x7ff00000
 8009318:	3fdbffff 	.word	0x3fdbffff
 800931c:	3ff00000 	.word	0x3ff00000
 8009320:	3ff2ffff 	.word	0x3ff2ffff
 8009324:	40038000 	.word	0x40038000
 8009328:	3ff80000 	.word	0x3ff80000
 800932c:	bff00000 	.word	0xbff00000
 8009330:	08009728 	.word	0x08009728
 8009334:	08009708 	.word	0x08009708

08009338 <fabs>:
 8009338:	ec51 0b10 	vmov	r0, r1, d0
 800933c:	ee10 2a10 	vmov	r2, s0
 8009340:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009344:	ec43 2b10 	vmov	d0, r2, r3
 8009348:	4770      	bx	lr

0800934a <atan2>:
 800934a:	f000 b835 	b.w	80093b8 <__ieee754_atan2>
	...

08009350 <sqrt>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	ed2d 8b02 	vpush	{d8}
 8009356:	ec55 4b10 	vmov	r4, r5, d0
 800935a:	f000 f8f7 	bl	800954c <__ieee754_sqrt>
 800935e:	4b15      	ldr	r3, [pc, #84]	; (80093b4 <sqrt+0x64>)
 8009360:	eeb0 8a40 	vmov.f32	s16, s0
 8009364:	eef0 8a60 	vmov.f32	s17, s1
 8009368:	f993 3000 	ldrsb.w	r3, [r3]
 800936c:	3301      	adds	r3, #1
 800936e:	d019      	beq.n	80093a4 <sqrt+0x54>
 8009370:	4622      	mov	r2, r4
 8009372:	462b      	mov	r3, r5
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7f7 fb90 	bl	8000a9c <__aeabi_dcmpun>
 800937c:	b990      	cbnz	r0, 80093a4 <sqrt+0x54>
 800937e:	2200      	movs	r2, #0
 8009380:	2300      	movs	r3, #0
 8009382:	4620      	mov	r0, r4
 8009384:	4629      	mov	r1, r5
 8009386:	f7f7 fb61 	bl	8000a4c <__aeabi_dcmplt>
 800938a:	b158      	cbz	r0, 80093a4 <sqrt+0x54>
 800938c:	f7ff fe02 	bl	8008f94 <__errno>
 8009390:	2321      	movs	r3, #33	; 0x21
 8009392:	6003      	str	r3, [r0, #0]
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	4610      	mov	r0, r2
 800939a:	4619      	mov	r1, r3
 800939c:	f7f7 fa0e 	bl	80007bc <__aeabi_ddiv>
 80093a0:	ec41 0b18 	vmov	d8, r0, r1
 80093a4:	eeb0 0a48 	vmov.f32	s0, s16
 80093a8:	eef0 0a68 	vmov.f32	s1, s17
 80093ac:	ecbd 8b02 	vpop	{d8}
 80093b0:	bd38      	pop	{r3, r4, r5, pc}
 80093b2:	bf00      	nop
 80093b4:	20000228 	.word	0x20000228

080093b8 <__ieee754_atan2>:
 80093b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093bc:	ec57 6b11 	vmov	r6, r7, d1
 80093c0:	4273      	negs	r3, r6
 80093c2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009548 <__ieee754_atan2+0x190>
 80093c6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80093ca:	4333      	orrs	r3, r6
 80093cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80093d0:	4573      	cmp	r3, lr
 80093d2:	ec51 0b10 	vmov	r0, r1, d0
 80093d6:	ee11 8a10 	vmov	r8, s2
 80093da:	d80a      	bhi.n	80093f2 <__ieee754_atan2+0x3a>
 80093dc:	4244      	negs	r4, r0
 80093de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093e2:	4304      	orrs	r4, r0
 80093e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80093e8:	4574      	cmp	r4, lr
 80093ea:	ee10 9a10 	vmov	r9, s0
 80093ee:	468c      	mov	ip, r1
 80093f0:	d907      	bls.n	8009402 <__ieee754_atan2+0x4a>
 80093f2:	4632      	mov	r2, r6
 80093f4:	463b      	mov	r3, r7
 80093f6:	f7f6 ff01 	bl	80001fc <__adddf3>
 80093fa:	ec41 0b10 	vmov	d0, r0, r1
 80093fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009402:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009406:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800940a:	4334      	orrs	r4, r6
 800940c:	d103      	bne.n	8009416 <__ieee754_atan2+0x5e>
 800940e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009412:	f7ff bdf1 	b.w	8008ff8 <atan>
 8009416:	17bc      	asrs	r4, r7, #30
 8009418:	f004 0402 	and.w	r4, r4, #2
 800941c:	ea53 0909 	orrs.w	r9, r3, r9
 8009420:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009424:	d107      	bne.n	8009436 <__ieee754_atan2+0x7e>
 8009426:	2c02      	cmp	r4, #2
 8009428:	d060      	beq.n	80094ec <__ieee754_atan2+0x134>
 800942a:	2c03      	cmp	r4, #3
 800942c:	d1e5      	bne.n	80093fa <__ieee754_atan2+0x42>
 800942e:	a142      	add	r1, pc, #264	; (adr r1, 8009538 <__ieee754_atan2+0x180>)
 8009430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009434:	e7e1      	b.n	80093fa <__ieee754_atan2+0x42>
 8009436:	ea52 0808 	orrs.w	r8, r2, r8
 800943a:	d106      	bne.n	800944a <__ieee754_atan2+0x92>
 800943c:	f1bc 0f00 	cmp.w	ip, #0
 8009440:	da5f      	bge.n	8009502 <__ieee754_atan2+0x14a>
 8009442:	a13f      	add	r1, pc, #252	; (adr r1, 8009540 <__ieee754_atan2+0x188>)
 8009444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009448:	e7d7      	b.n	80093fa <__ieee754_atan2+0x42>
 800944a:	4572      	cmp	r2, lr
 800944c:	d10f      	bne.n	800946e <__ieee754_atan2+0xb6>
 800944e:	4293      	cmp	r3, r2
 8009450:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009454:	d107      	bne.n	8009466 <__ieee754_atan2+0xae>
 8009456:	2c02      	cmp	r4, #2
 8009458:	d84c      	bhi.n	80094f4 <__ieee754_atan2+0x13c>
 800945a:	4b35      	ldr	r3, [pc, #212]	; (8009530 <__ieee754_atan2+0x178>)
 800945c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009460:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009464:	e7c9      	b.n	80093fa <__ieee754_atan2+0x42>
 8009466:	2c02      	cmp	r4, #2
 8009468:	d848      	bhi.n	80094fc <__ieee754_atan2+0x144>
 800946a:	4b32      	ldr	r3, [pc, #200]	; (8009534 <__ieee754_atan2+0x17c>)
 800946c:	e7f6      	b.n	800945c <__ieee754_atan2+0xa4>
 800946e:	4573      	cmp	r3, lr
 8009470:	d0e4      	beq.n	800943c <__ieee754_atan2+0x84>
 8009472:	1a9b      	subs	r3, r3, r2
 8009474:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009478:	ea4f 5223 	mov.w	r2, r3, asr #20
 800947c:	da1e      	bge.n	80094bc <__ieee754_atan2+0x104>
 800947e:	2f00      	cmp	r7, #0
 8009480:	da01      	bge.n	8009486 <__ieee754_atan2+0xce>
 8009482:	323c      	adds	r2, #60	; 0x3c
 8009484:	db1e      	blt.n	80094c4 <__ieee754_atan2+0x10c>
 8009486:	4632      	mov	r2, r6
 8009488:	463b      	mov	r3, r7
 800948a:	f7f7 f997 	bl	80007bc <__aeabi_ddiv>
 800948e:	ec41 0b10 	vmov	d0, r0, r1
 8009492:	f7ff ff51 	bl	8009338 <fabs>
 8009496:	f7ff fdaf 	bl	8008ff8 <atan>
 800949a:	ec51 0b10 	vmov	r0, r1, d0
 800949e:	2c01      	cmp	r4, #1
 80094a0:	d013      	beq.n	80094ca <__ieee754_atan2+0x112>
 80094a2:	2c02      	cmp	r4, #2
 80094a4:	d015      	beq.n	80094d2 <__ieee754_atan2+0x11a>
 80094a6:	2c00      	cmp	r4, #0
 80094a8:	d0a7      	beq.n	80093fa <__ieee754_atan2+0x42>
 80094aa:	a319      	add	r3, pc, #100	; (adr r3, 8009510 <__ieee754_atan2+0x158>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f7f6 fea2 	bl	80001f8 <__aeabi_dsub>
 80094b4:	a318      	add	r3, pc, #96	; (adr r3, 8009518 <__ieee754_atan2+0x160>)
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	e014      	b.n	80094e6 <__ieee754_atan2+0x12e>
 80094bc:	a118      	add	r1, pc, #96	; (adr r1, 8009520 <__ieee754_atan2+0x168>)
 80094be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094c2:	e7ec      	b.n	800949e <__ieee754_atan2+0xe6>
 80094c4:	2000      	movs	r0, #0
 80094c6:	2100      	movs	r1, #0
 80094c8:	e7e9      	b.n	800949e <__ieee754_atan2+0xe6>
 80094ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094ce:	4619      	mov	r1, r3
 80094d0:	e793      	b.n	80093fa <__ieee754_atan2+0x42>
 80094d2:	a30f      	add	r3, pc, #60	; (adr r3, 8009510 <__ieee754_atan2+0x158>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f7f6 fe8e 	bl	80001f8 <__aeabi_dsub>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	a10d      	add	r1, pc, #52	; (adr r1, 8009518 <__ieee754_atan2+0x160>)
 80094e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094e6:	f7f6 fe87 	bl	80001f8 <__aeabi_dsub>
 80094ea:	e786      	b.n	80093fa <__ieee754_atan2+0x42>
 80094ec:	a10a      	add	r1, pc, #40	; (adr r1, 8009518 <__ieee754_atan2+0x160>)
 80094ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f2:	e782      	b.n	80093fa <__ieee754_atan2+0x42>
 80094f4:	a10c      	add	r1, pc, #48	; (adr r1, 8009528 <__ieee754_atan2+0x170>)
 80094f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094fa:	e77e      	b.n	80093fa <__ieee754_atan2+0x42>
 80094fc:	2000      	movs	r0, #0
 80094fe:	2100      	movs	r1, #0
 8009500:	e77b      	b.n	80093fa <__ieee754_atan2+0x42>
 8009502:	a107      	add	r1, pc, #28	; (adr r1, 8009520 <__ieee754_atan2+0x168>)
 8009504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009508:	e777      	b.n	80093fa <__ieee754_atan2+0x42>
 800950a:	bf00      	nop
 800950c:	f3af 8000 	nop.w
 8009510:	33145c07 	.word	0x33145c07
 8009514:	3ca1a626 	.word	0x3ca1a626
 8009518:	54442d18 	.word	0x54442d18
 800951c:	400921fb 	.word	0x400921fb
 8009520:	54442d18 	.word	0x54442d18
 8009524:	3ff921fb 	.word	0x3ff921fb
 8009528:	54442d18 	.word	0x54442d18
 800952c:	3fe921fb 	.word	0x3fe921fb
 8009530:	08009748 	.word	0x08009748
 8009534:	08009760 	.word	0x08009760
 8009538:	54442d18 	.word	0x54442d18
 800953c:	c00921fb 	.word	0xc00921fb
 8009540:	54442d18 	.word	0x54442d18
 8009544:	bff921fb 	.word	0xbff921fb
 8009548:	7ff00000 	.word	0x7ff00000

0800954c <__ieee754_sqrt>:
 800954c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009550:	ec55 4b10 	vmov	r4, r5, d0
 8009554:	4e56      	ldr	r6, [pc, #344]	; (80096b0 <__ieee754_sqrt+0x164>)
 8009556:	43ae      	bics	r6, r5
 8009558:	ee10 0a10 	vmov	r0, s0
 800955c:	ee10 3a10 	vmov	r3, s0
 8009560:	4629      	mov	r1, r5
 8009562:	462a      	mov	r2, r5
 8009564:	d110      	bne.n	8009588 <__ieee754_sqrt+0x3c>
 8009566:	ee10 2a10 	vmov	r2, s0
 800956a:	462b      	mov	r3, r5
 800956c:	f7f6 fffc 	bl	8000568 <__aeabi_dmul>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	4620      	mov	r0, r4
 8009576:	4629      	mov	r1, r5
 8009578:	f7f6 fe40 	bl	80001fc <__adddf3>
 800957c:	4604      	mov	r4, r0
 800957e:	460d      	mov	r5, r1
 8009580:	ec45 4b10 	vmov	d0, r4, r5
 8009584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009588:	2d00      	cmp	r5, #0
 800958a:	dc10      	bgt.n	80095ae <__ieee754_sqrt+0x62>
 800958c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009590:	4330      	orrs	r0, r6
 8009592:	d0f5      	beq.n	8009580 <__ieee754_sqrt+0x34>
 8009594:	b15d      	cbz	r5, 80095ae <__ieee754_sqrt+0x62>
 8009596:	ee10 2a10 	vmov	r2, s0
 800959a:	462b      	mov	r3, r5
 800959c:	ee10 0a10 	vmov	r0, s0
 80095a0:	f7f6 fe2a 	bl	80001f8 <__aeabi_dsub>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	f7f7 f908 	bl	80007bc <__aeabi_ddiv>
 80095ac:	e7e6      	b.n	800957c <__ieee754_sqrt+0x30>
 80095ae:	1509      	asrs	r1, r1, #20
 80095b0:	d076      	beq.n	80096a0 <__ieee754_sqrt+0x154>
 80095b2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80095b6:	07ce      	lsls	r6, r1, #31
 80095b8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80095bc:	bf5e      	ittt	pl
 80095be:	0fda      	lsrpl	r2, r3, #31
 80095c0:	005b      	lslpl	r3, r3, #1
 80095c2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80095c6:	0fda      	lsrs	r2, r3, #31
 80095c8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80095cc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80095d0:	2000      	movs	r0, #0
 80095d2:	106d      	asrs	r5, r5, #1
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	f04f 0e16 	mov.w	lr, #22
 80095da:	4684      	mov	ip, r0
 80095dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095e0:	eb0c 0401 	add.w	r4, ip, r1
 80095e4:	4294      	cmp	r4, r2
 80095e6:	bfde      	ittt	le
 80095e8:	1b12      	suble	r2, r2, r4
 80095ea:	eb04 0c01 	addle.w	ip, r4, r1
 80095ee:	1840      	addle	r0, r0, r1
 80095f0:	0052      	lsls	r2, r2, #1
 80095f2:	f1be 0e01 	subs.w	lr, lr, #1
 80095f6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80095fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80095fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009602:	d1ed      	bne.n	80095e0 <__ieee754_sqrt+0x94>
 8009604:	4671      	mov	r1, lr
 8009606:	2720      	movs	r7, #32
 8009608:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800960c:	4562      	cmp	r2, ip
 800960e:	eb04 060e 	add.w	r6, r4, lr
 8009612:	dc02      	bgt.n	800961a <__ieee754_sqrt+0xce>
 8009614:	d113      	bne.n	800963e <__ieee754_sqrt+0xf2>
 8009616:	429e      	cmp	r6, r3
 8009618:	d811      	bhi.n	800963e <__ieee754_sqrt+0xf2>
 800961a:	2e00      	cmp	r6, #0
 800961c:	eb06 0e04 	add.w	lr, r6, r4
 8009620:	da43      	bge.n	80096aa <__ieee754_sqrt+0x15e>
 8009622:	f1be 0f00 	cmp.w	lr, #0
 8009626:	db40      	blt.n	80096aa <__ieee754_sqrt+0x15e>
 8009628:	f10c 0801 	add.w	r8, ip, #1
 800962c:	eba2 020c 	sub.w	r2, r2, ip
 8009630:	429e      	cmp	r6, r3
 8009632:	bf88      	it	hi
 8009634:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009638:	1b9b      	subs	r3, r3, r6
 800963a:	4421      	add	r1, r4
 800963c:	46c4      	mov	ip, r8
 800963e:	0052      	lsls	r2, r2, #1
 8009640:	3f01      	subs	r7, #1
 8009642:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009646:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800964a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800964e:	d1dd      	bne.n	800960c <__ieee754_sqrt+0xc0>
 8009650:	4313      	orrs	r3, r2
 8009652:	d006      	beq.n	8009662 <__ieee754_sqrt+0x116>
 8009654:	1c4c      	adds	r4, r1, #1
 8009656:	bf13      	iteet	ne
 8009658:	3101      	addne	r1, #1
 800965a:	3001      	addeq	r0, #1
 800965c:	4639      	moveq	r1, r7
 800965e:	f021 0101 	bicne.w	r1, r1, #1
 8009662:	1043      	asrs	r3, r0, #1
 8009664:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009668:	0849      	lsrs	r1, r1, #1
 800966a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800966e:	07c2      	lsls	r2, r0, #31
 8009670:	bf48      	it	mi
 8009672:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009676:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800967a:	460c      	mov	r4, r1
 800967c:	463d      	mov	r5, r7
 800967e:	e77f      	b.n	8009580 <__ieee754_sqrt+0x34>
 8009680:	0ada      	lsrs	r2, r3, #11
 8009682:	3815      	subs	r0, #21
 8009684:	055b      	lsls	r3, r3, #21
 8009686:	2a00      	cmp	r2, #0
 8009688:	d0fa      	beq.n	8009680 <__ieee754_sqrt+0x134>
 800968a:	02d7      	lsls	r7, r2, #11
 800968c:	d50a      	bpl.n	80096a4 <__ieee754_sqrt+0x158>
 800968e:	f1c1 0420 	rsb	r4, r1, #32
 8009692:	fa23 f404 	lsr.w	r4, r3, r4
 8009696:	1e4d      	subs	r5, r1, #1
 8009698:	408b      	lsls	r3, r1
 800969a:	4322      	orrs	r2, r4
 800969c:	1b41      	subs	r1, r0, r5
 800969e:	e788      	b.n	80095b2 <__ieee754_sqrt+0x66>
 80096a0:	4608      	mov	r0, r1
 80096a2:	e7f0      	b.n	8009686 <__ieee754_sqrt+0x13a>
 80096a4:	0052      	lsls	r2, r2, #1
 80096a6:	3101      	adds	r1, #1
 80096a8:	e7ef      	b.n	800968a <__ieee754_sqrt+0x13e>
 80096aa:	46e0      	mov	r8, ip
 80096ac:	e7be      	b.n	800962c <__ieee754_sqrt+0xe0>
 80096ae:	bf00      	nop
 80096b0:	7ff00000 	.word	0x7ff00000

080096b4 <_init>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	bf00      	nop
 80096b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ba:	bc08      	pop	{r3}
 80096bc:	469e      	mov	lr, r3
 80096be:	4770      	bx	lr

080096c0 <_fini>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	bf00      	nop
 80096c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c6:	bc08      	pop	{r3}
 80096c8:	469e      	mov	lr, r3
 80096ca:	4770      	bx	lr
